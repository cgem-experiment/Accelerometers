
AD7177_H723ZG_20250612_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b9c8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e68  0801bc98  0801bc98  0001cc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801eb00  0801eb00  0001fb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801eb08  0801eb08  0001fb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801eb0c  0801eb0c  0001fb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000cc  24004984  0801eb10  00020984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .lwip_sec     00004983  24000000  24000000  00021000  2**2
                  ALLOC
  8 .bss          0001041c  24004a50  0801ebdc  00020a50  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  24014e6c  0801ebdc  00020e6c  2**0
                  ALLOC
 10 .lwip_sec     00000160  30000000  30000000  00021000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020a50  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039093  00000000  00000000  00020a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000080f1  00000000  00000000  00059b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027c0  00000000  00000000  00061c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f43  00000000  00000000  000643c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d21  00000000  00000000  0006630b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d8d5  00000000  00000000  0007902c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00171f31  00000000  00000000  000b6901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00228832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae1c  00000000  00000000  00228878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00233694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004a50 	.word	0x24004a50
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801bc80 	.word	0x0801bc80

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004a54 	.word	0x24004a54
 800030c:	0801bc80 	.word	0x0801bc80

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 ffb7 	bl	8001328 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b54      	ldr	r3, [pc, #336]	@ (800050c <main+0x15c>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b4e      	ldr	r3, [pc, #312]	@ (800050c <main+0x15c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b49      	ldr	r3, [pc, #292]	@ (800050c <main+0x15c>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a48      	ldr	r2, [pc, #288]	@ (800050c <main+0x15c>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b42      	ldr	r3, [pc, #264]	@ (800050c <main+0x15c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b3f      	ldr	r3, [pc, #252]	@ (800050c <main+0x15c>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b3c      	ldr	r3, [pc, #240]	@ (800050c <main+0x15c>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	4931      	ldr	r1, [pc, #196]	@ (800050c <main+0x15c>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b29      	ldr	r3, [pc, #164]	@ (800050c <main+0x15c>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a28      	ldr	r2, [pc, #160]	@ (800050c <main+0x15c>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f001 fd54 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f858 	bl	8000538 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000488:	f000 f8c8 	bl	800061c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 fb3a 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000490:	f000 fb00 	bl	8000a94 <MX_DMA_Init>
  MX_TIM2_Init();
 8000494:	f000 fa3a 	bl	800090c <MX_TIM2_Init>
  MX_SPI4_Init();
 8000498:	f000 f936 	bl	8000708 <MX_SPI4_Init>
  MX_TIM23_Init();
 800049c:	f000 faaa 	bl	80009f4 <MX_TIM23_Init>
  MX_TIM1_Init();
 80004a0:	f000 f98a 	bl	80007b8 <MX_TIM1_Init>
  MX_SPI1_Init();
 80004a4:	f000 f8d8 	bl	8000658 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2140      	movs	r1, #64	@ 0x40
 80004ac:	4818      	ldr	r0, [pc, #96]	@ (8000510 <main+0x160>)
 80004ae:	f005 fd9f 	bl	8005ff0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)resetSequence, 8, 50);
 80004b2:	2332      	movs	r3, #50	@ 0x32
 80004b4:	2208      	movs	r2, #8
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <main+0x164>)
 80004b8:	4817      	ldr	r0, [pc, #92]	@ (8000518 <main+0x168>)
 80004ba:	f008 f9cb 	bl	8008854 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2140      	movs	r1, #64	@ 0x40
 80004c2:	4813      	ldr	r0, [pc, #76]	@ (8000510 <main+0x160>)
 80004c4:	f005 fd94 	bl	8005ff0 <HAL_GPIO_WritePin>

  check_id = AD7177_ReadRegister(AD7177_REG_ID, 2);
 80004c8:	2102      	movs	r1, #2
 80004ca:	2007      	movs	r0, #7
 80004cc:	f000 fd10 	bl	8000ef0 <AD7177_ReadRegister>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a12      	ldr	r2, [pc, #72]	@ (800051c <main+0x16c>)
 80004d4:	6013      	str	r3, [r2, #0]

  initializeAD7177Board();
 80004d6:	f000 fd5d 	bl	8000f94 <initializeAD7177Board>

  readInitializedRegisters();
 80004da:	f000 fdbd 	bl	8001058 <readInitializedRegisters>
  uint32_t exti8 = (exticr3 >> 0) & 0xF;
  */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004de:	f00b fe35 	bl	800c14c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000520 <main+0x170>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	480f      	ldr	r0, [pc, #60]	@ (8000524 <main+0x174>)
 80004e8:	f00b fe8f 	bl	800c20a <osThreadNew>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000528 <main+0x178>)
 80004f0:	6013      	str	r3, [r2, #0]

  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(startEthernetTask, NULL, &ethernetTask_attributes);
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <main+0x17c>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	480e      	ldr	r0, [pc, #56]	@ (8000530 <main+0x180>)
 80004f8:	f00b fe87 	bl	800c20a <osThreadNew>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <main+0x184>)
 8000500:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000502:	f00b fe47 	bl	800c194 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000506:	bf00      	nop
 8000508:	e7fd      	b.n	8000506 <main+0x156>
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00
 8000510:	58020400 	.word	0x58020400
 8000514:	24004984 	.word	0x24004984
 8000518:	24004a6c 	.word	0x24004a6c
 800051c:	2400498c 	.word	0x2400498c
 8000520:	0801e884 	.word	0x0801e884
 8000524:	0800117d 	.word	0x0800117d
 8000528:	24004e40 	.word	0x24004e40
 800052c:	0801e8a8 	.word	0x0801e8a8
 8000530:	080011a5 	.word	0x080011a5
 8000534:	24004e44 	.word	0x24004e44

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09c      	sub	sp, #112	@ 0x70
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000542:	224c      	movs	r2, #76	@ 0x4c
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f01a fc99 	bl	801ae7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2220      	movs	r2, #32
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f01a fc93 	bl	801ae7e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000558:	2002      	movs	r0, #2
 800055a:	f005 fd87 	bl	800606c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	4b2d      	ldr	r3, [pc, #180]	@ (8000618 <SystemClock_Config+0xe0>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a2c      	ldr	r2, [pc, #176]	@ (8000618 <SystemClock_Config+0xe0>)
 8000568:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b2a      	ldr	r3, [pc, #168]	@ (8000618 <SystemClock_Config+0xe0>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800057a:	bf00      	nop
 800057c:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <SystemClock_Config+0xe0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000588:	d1f8      	bne.n	800057c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800058a:	2303      	movs	r3, #3
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800058e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000592:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000594:	2301      	movs	r3, #1
 8000596:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000598:	2340      	movs	r3, #64	@ 0x40
 800059a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80005a8:	f240 1313 	movw	r3, #275	@ 0x113
 80005ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b2:	2304      	movs	r3, #4
 80005b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80005ba:	2304      	movs	r3, #4
 80005bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005be:	2300      	movs	r3, #0
 80005c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fd88 	bl	80060e0 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d6:	f000 ff09 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	233f      	movs	r3, #63	@ 0x3f
 80005dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005e6:	2308      	movs	r3, #8
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005ea:	2340      	movs	r3, #64	@ 0x40
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ee:	2340      	movs	r3, #64	@ 0x40
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80005f2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005f8:	2340      	movs	r3, #64	@ 0x40
 80005fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2103      	movs	r1, #3
 8000600:	4618      	mov	r0, r3
 8000602:	f006 f947 	bl	8006894 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800060c:	f000 feee 	bl	80013ec <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3770      	adds	r7, #112	@ 0x70
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	58024800 	.word	0x58024800

0800061c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0ae      	sub	sp, #184	@ 0xb8
 8000620:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	22b8      	movs	r2, #184	@ 0xb8
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f01a fc28 	bl	801ae7e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800062e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800063a:	2300      	movs	r3, #0
 800063c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	4618      	mov	r0, r3
 8000642:	f006 fcdf 	bl	8007004 <HAL_RCCEx_PeriphCLKConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 fece 	bl	80013ec <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	37b8      	adds	r7, #184	@ 0xb8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <MX_SPI1_Init+0xa8>)
 800065e:	4a29      	ldr	r2, [pc, #164]	@ (8000704 <MX_SPI1_Init+0xac>)
 8000660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000664:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <MX_SPI1_Init+0xa8>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000672:	2207      	movs	r2, #7
 8000674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000676:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000678:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800067c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000680:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000684:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000688:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800068c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000690:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000694:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_SPI1_Init+0xa8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80006a8:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006ee:	f007 ff8d 	bl	800860c <HAL_SPI_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80006f8:	f000 fe78 	bl	80013ec <Error_Handler>
  /* USER CODE BEGIN SPI1_Init 2 */
 // HAL_NVIC_EnableIRQ(SPI1_IRQn);
//
  /* USER CODE END SPI1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	24004a6c 	.word	0x24004a6c
 8000704:	40013000 	.word	0x40013000

08000708 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800070c:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <MX_SPI4_Init+0xac>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000714:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000718:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000720:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000722:	2207      	movs	r2, #7
 8000724:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000728:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800072c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000730:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000734:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000738:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800073c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000740:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000744:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000768:	2200      	movs	r2, #0
 800076a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800076c:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800076e:	2200      	movs	r2, #0
 8000770:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000774:	2200      	movs	r2, #0
 8000776:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800077a:	2200      	movs	r2, #0
 800077c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000786:	2200      	movs	r2, #0
 8000788:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800078c:	2200      	movs	r2, #0
 800078e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000792:	2200      	movs	r2, #0
 8000794:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000798:	2200      	movs	r2, #0
 800079a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800079e:	f007 ff35 	bl	800860c <HAL_SPI_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 80007a8:	f000 fe20 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	24004af4 	.word	0x24004af4
 80007b4:	40013400 	.word	0x40013400

080007b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	@ 0x70
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2234      	movs	r2, #52	@ 0x34
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f01a fb43 	bl	801ae7e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f8:	4b42      	ldr	r3, [pc, #264]	@ (8000904 <MX_TIM1_Init+0x14c>)
 80007fa:	4a43      	ldr	r2, [pc, #268]	@ (8000908 <MX_TIM1_Init+0x150>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1375-1;
 80007fe:	4b41      	ldr	r3, [pc, #260]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000800:	f240 525e 	movw	r2, #1374	@ 0x55e
 8000804:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b3f      	ldr	r3, [pc, #252]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800080c:	4b3d      	ldr	r3, [pc, #244]	@ (8000904 <MX_TIM1_Init+0x14c>)
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b3b      	ldr	r3, [pc, #236]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081a:	4b3a      	ldr	r3, [pc, #232]	@ (8000904 <MX_TIM1_Init+0x14c>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b38      	ldr	r3, [pc, #224]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000826:	4837      	ldr	r0, [pc, #220]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000828:	f009 fab1 	bl	8009d8e <HAL_TIM_Base_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000832:	f000 fddb 	bl	80013ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000840:	4619      	mov	r1, r3
 8000842:	4830      	ldr	r0, [pc, #192]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000844:	f009 ff56 	bl	800a6f4 <HAL_TIM_ConfigClockSource>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800084e:	f000 fdcd 	bl	80013ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000852:	482c      	ldr	r0, [pc, #176]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000854:	f009 fbf6 	bl	800a044 <HAL_TIM_OC_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800085e:	f000 fdc5 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000872:	4619      	mov	r1, r3
 8000874:	4823      	ldr	r0, [pc, #140]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000876:	f00a fc7d 	bl	800b174 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000880:	f000 fdb4 	bl	80013ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088c:	2300      	movs	r3, #0
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	4816      	ldr	r0, [pc, #88]	@ (8000904 <MX_TIM1_Init+0x14c>)
 80008aa:	f009 fd95 	bl	800a3d8 <HAL_TIM_OC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80008b4:	f000 fd9a 	bl	80013ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_TIM1_Init+0x14c>)
 80008ee:	f00a fcdd 	bl	800b2ac <HAL_TIMEx_ConfigBreakDeadTime>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008f8:	f000 fd78 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3770      	adds	r7, #112	@ 0x70
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24004d5c 	.word	0x24004d5c
 8000908:	40010000 	.word	0x40010000

0800090c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	@ 0x38
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093e:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000940:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 275-1;
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000948:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800094c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000954:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000956:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800095a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000968:	4821      	ldr	r0, [pc, #132]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 800096a:	f009 fa10 	bl	8009d8e <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000974:	f000 fd3a 	bl	80013ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000982:	4619      	mov	r1, r3
 8000984:	481a      	ldr	r0, [pc, #104]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000986:	f009 feb5 	bl	800a6f4 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000990:	f000 fd2c 	bl	80013ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000994:	4816      	ldr	r0, [pc, #88]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000996:	f009 fbb6 	bl	800a106 <HAL_TIM_PWM_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009a0:	f000 fd24 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	480f      	ldr	r0, [pc, #60]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 80009b4:	f00a fbde 	bl	800b174 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80009be:	f000 fd15 	bl	80013ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c2:	2360      	movs	r3, #96	@ 0x60
 80009c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 80009da:	f009 fd77 	bl	800a4cc <HAL_TIM_PWM_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80009e4:	f000 fd02 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3738      	adds	r7, #56	@ 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	24004da8 	.word	0x24004da8

080009f4 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a14:	4a1e      	ldr	r2, [pc, #120]	@ (8000a90 <MX_TIM23_Init+0x9c>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a1a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000a1e:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000a3a:	4814      	ldr	r0, [pc, #80]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a3c:	f009 f9a7 	bl	8009d8e <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000a46:	f000 fcd1 	bl	80013ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a58:	f009 fe4c 	bl	800a6f4 <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000a62:	f000 fcc3 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a74:	f00a fb7e 	bl	800b174 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000a7e:	f000 fcb5 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24004df4 	.word	0x24004df4
 8000a90:	4000e000 	.word	0x4000e000

08000a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <MX_DMA_Init+0x6c>)
 8000a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aa0:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <MX_DMA_Init+0x6c>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_DMA_Init+0x6c>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2105      	movs	r1, #5
 8000abc:	200b      	movs	r0, #11
 8000abe:	f001 fb81 	bl	80021c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ac2:	200b      	movs	r0, #11
 8000ac4:	f001 fb98 	bl	80021f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2105      	movs	r1, #5
 8000acc:	200c      	movs	r0, #12
 8000ace:	f001 fb79 	bl	80021c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ad2:	200c      	movs	r0, #12
 8000ad4:	f001 fb90 	bl	80021f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2105      	movs	r1, #5
 8000adc:	200d      	movs	r0, #13
 8000ade:	f001 fb71 	bl	80021c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ae2:	200d      	movs	r0, #13
 8000ae4:	f001 fb88 	bl	80021f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2105      	movs	r1, #5
 8000aec:	200e      	movs	r0, #14
 8000aee:	f001 fb69 	bl	80021c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000af2:	200e      	movs	r0, #14
 8000af4:	f001 fb80 	bl	80021f8 <HAL_NVIC_EnableIRQ>

}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58024400 	.word	0x58024400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	@ 0x30
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	4b43      	ldr	r3, [pc, #268]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	4a41      	ldr	r2, [pc, #260]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b38:	4b3b      	ldr	r3, [pc, #236]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b84:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	4a23      	ldr	r2, [pc, #140]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <MX_GPIO_Init+0x128>)
 8000bd4:	f005 fa0c 	bl	8005ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bd8:	2340      	movs	r3, #64	@ 0x40
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	480f      	ldr	r0, [pc, #60]	@ (8000c2c <MX_GPIO_Init+0x128>)
 8000bf0:	f005 f856 	bl	8005ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <MX_GPIO_Init+0x128>)
 8000c0c:	f005 f848 	bl	8005ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2105      	movs	r1, #5
 8000c14:	2017      	movs	r0, #23
 8000c16:	f001 fad5 	bl	80021c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c1a:	2017      	movs	r0, #23
 8000c1c:	f001 faec 	bl	80021f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	@ 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	58020400 	.word	0x58020400

08000c30 <AD7177_ReadIfReady>:

/* USER CODE BEGIN 4 */

//void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
void AD7177_ReadIfReady(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

	  // read the data register
		uint32_t raw = AD7177_ReadRegister(AD7177_REG_DATA, 4);
 8000c36:	2104      	movs	r1, #4
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f000 f959 	bl	8000ef0 <AD7177_ReadRegister>
 8000c3e:	6178      	str	r0, [r7, #20]

		uint32_t value_24Bit = (raw >> 8) & 0xFFFFFF;    // Top 3 bytes = ADC value
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	613b      	str	r3, [r7, #16]
		uint8_t  status       = raw & 0xFF;              // Bottom byte = status
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	73fb      	strb	r3, [r7, #15]

		bool rdy        = !(status & 0x80);   // Bit 7: 0 = data ready
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	09db      	lsrs	r3, r3, #7
 8000c54:	73bb      	strb	r3, [r7, #14]
		bool adc_error  =  (status & 0x40);   // Bit 6: 1 = ADC error
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	bf14      	ite	ne
 8000c60:	2301      	movne	r3, #1
 8000c62:	2300      	moveq	r3, #0
 8000c64:	737b      	strb	r3, [r7, #13]
		bool crc_error  =  (status & 0x20);   // Bit 5: 1 = CRC error
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	733b      	strb	r3, [r7, #12]
		uint8_t channel_id = status & 0x0F;   // Bits 3:0 = Channel ID
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	f003 030f 	and.w	r3, r3, #15
 8000c7c:	72fb      	strb	r3, [r7, #11]

		if (rdy && !adc_error && !crc_error && channel_id < NUM_CH_ENABLED) {
 8000c7e:	7bbb      	ldrb	r3, [r7, #14]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d017      	beq.n	8000cb4 <AD7177_ReadIfReady+0x84>
 8000c84:	7b7b      	ldrb	r3, [r7, #13]
 8000c86:	f083 0301 	eor.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d011      	beq.n	8000cb4 <AD7177_ReadIfReady+0x84>
 8000c90:	7b3b      	ldrb	r3, [r7, #12]
 8000c92:	f083 0301 	eor.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00b      	beq.n	8000cb4 <AD7177_ReadIfReady+0x84>
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d808      	bhi.n	8000cb4 <AD7177_ReadIfReady+0x84>
			channel_data[channel_id] = value_24Bit;
 8000ca2:	7afb      	ldrb	r3, [r7, #11]
 8000ca4:	4960      	ldr	r1, [pc, #384]	@ (8000e28 <AD7177_ReadIfReady+0x1f8>)
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			channel_ready[channel_id] = 1;
 8000cac:	7afb      	ldrb	r3, [r7, #11]
 8000cae:	4a5f      	ldr	r2, [pc, #380]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	54d1      	strb	r1, [r2, r3]
		}

		// Once all 4 channels have been read, build and store packet
		if (channel_ready[0] && channel_ready[1] && channel_ready[2]) {
 8000cb4:	4b5d      	ldr	r3, [pc, #372]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80af 	beq.w	8000e1e <AD7177_ReadIfReady+0x1ee>
 8000cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000cc2:	785b      	ldrb	r3, [r3, #1]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 80a9 	beq.w	8000e1e <AD7177_ReadIfReady+0x1ee>
 8000ccc:	4b57      	ldr	r3, [pc, #348]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000cce:	789b      	ldrb	r3, [r3, #2]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 80a3 	beq.w	8000e1e <AD7177_ReadIfReady+0x1ee>

			// Clear ready flags
			for (int i = 0; i < NUM_CH_ENABLED; i++) channel_ready[i] = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	e007      	b.n	8000cee <AD7177_ReadIfReady+0xbe>
 8000cde:	4a53      	ldr	r2, [pc, #332]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	3301      	adds	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	ddf4      	ble.n	8000cde <AD7177_ReadIfReady+0xae>

			// Fill spiData
			for (int i = 0; i < NUM_CH_ENABLED; i++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	e028      	b.n	8000d4c <AD7177_ReadIfReady+0x11c>
				spiData[spiIndex + (i * 2)]     = channel_data[i] & 0xFFFF; // bits 15:0
 8000cfa:	4a4b      	ldr	r2, [pc, #300]	@ (8000e28 <AD7177_ReadIfReady+0x1f8>)
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d02:	4b4b      	ldr	r3, [pc, #300]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4619      	mov	r1, r3
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	440b      	add	r3, r1
 8000d10:	b291      	uxth	r1, r2
 8000d12:	4a48      	ldr	r2, [pc, #288]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				spiData[spiIndex + (i * 2) + 1] = (channel_data[i] >> 16) << 8 | i; // bits 23:16 + channel id
 8000d18:	4a43      	ldr	r2, [pc, #268]	@ (8000e28 <AD7177_ReadIfReady+0x1f8>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	0c1b      	lsrs	r3, r3, #16
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b299      	uxth	r1, r3
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	4b40      	ldr	r3, [pc, #256]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4403      	add	r3, r0
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	b291      	uxth	r1, r2
 8000d40:	4a3c      	ldr	r2, [pc, #240]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < NUM_CH_ENABLED; i++) {
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	ddd3      	ble.n	8000cfa <AD7177_ReadIfReady+0xca>




			// Add timestamp
			timer23val = __HAL_TIM_GET_COUNTER(&htim23);
 8000d52:	4b39      	ldr	r3, [pc, #228]	@ (8000e38 <AD7177_ReadIfReady+0x208>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d58:	4a38      	ldr	r2, [pc, #224]	@ (8000e3c <AD7177_ReadIfReady+0x20c>)
 8000d5a:	6013      	str	r3, [r2, #0]
			spiData[spiIndex + 6]  = timer23val & 0xFFFF;
 8000d5c:	4b37      	ldr	r3, [pc, #220]	@ (8000e3c <AD7177_ReadIfReady+0x20c>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b33      	ldr	r3, [pc, #204]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	3306      	adds	r3, #6
 8000d68:	b291      	uxth	r1, r2
 8000d6a:	4a32      	ldr	r2, [pc, #200]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			spiData[spiIndex + 7]  = (timer23val >> 16) & 0xFFFF;
 8000d70:	4b32      	ldr	r3, [pc, #200]	@ (8000e3c <AD7177_ReadIfReady+0x20c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	0c1a      	lsrs	r2, r3, #16
 8000d76:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	3307      	adds	r3, #7
 8000d7e:	b291      	uxth	r1, r2
 8000d80:	4a2c      	ldr	r2, [pc, #176]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			//spacers (may change this later)
			spiData[spiIndex + 8] = 0xAB89;
 8000d86:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	3308      	adds	r3, #8
 8000d8e:	4a29      	ldr	r2, [pc, #164]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d90:	f64a 3189 	movw	r1, #43913	@ 0xab89
 8000d94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			spiData[spiIndex + 9] = 0xEFCD;
 8000d98:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3309      	adds	r3, #9
 8000da0:	4a24      	ldr	r2, [pc, #144]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000da2:	f64e 71cd 	movw	r1, #61389	@ 0xefcd
 8000da6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			// Advance index
			spiIndex += 10;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	330a      	adds	r3, #10
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000db6:	801a      	strh	r2, [r3, #0]

			if (spiIndex >= 700) {
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000dc2:	d303      	bcc.n	8000dcc <AD7177_ReadIfReady+0x19c>
				spiIndex = 0;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	801a      	strh	r2, [r3, #0]
				//return 1; // success

			}
	}
		//return 0;
}
 8000dca:	e028      	b.n	8000e1e <AD7177_ReadIfReady+0x1ee>
			else if (spiIndex == 600) {
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000dd6:	d122      	bne.n	8000e1e <AD7177_ReadIfReady+0x1ee>
				spiData[spiIndex] = sampleNum++;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <AD7177_ReadIfReady+0x210>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	4918      	ldr	r1, [pc, #96]	@ (8000e40 <AD7177_ReadIfReady+0x210>)
 8000de0:	600a      	str	r2, [r1, #0]
 8000de2:	4a13      	ldr	r2, [pc, #76]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000de4:	8812      	ldrh	r2, [r2, #0]
 8000de6:	b292      	uxth	r2, r2
 8000de8:	b299      	uxth	r1, r3
 8000dea:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000dec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				spiIndex = 0;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	801a      	strh	r2, [r3, #0]
				BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
				vTaskNotifyGiveFromISR(ethernetTaskHandle, &xHigherPriorityTaskWoken); // function will set xHigherPriorityTaskWoken to pdTRUE if the unblocked task (ethernetTaskHandle) has a higher priority than the currently running task. Also unblocks task
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <AD7177_ReadIfReady+0x214>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	1d3a      	adds	r2, r7, #4
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f00e f82e 	bl	800ee64 <vTaskNotifyGiveFromISR>
				portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // if xHigherPriorityTaskWoken is pdTURE, scheduler will switch to the ethernetTaskHandle task as soon as the ISR completes. Otherwise, currently running task will continue to run after ISR completes
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d007      	beq.n	8000e1e <AD7177_ReadIfReady+0x1ee>
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <AD7177_ReadIfReady+0x218>)
 8000e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	f3bf 8f4f 	dsb	sy
 8000e1a:	f3bf 8f6f 	isb	sy
}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	24005884 	.word	0x24005884
 8000e2c:	24005894 	.word	0x24005894
 8000e30:	24005872 	.word	0x24005872
 8000e34:	24004e48 	.word	0x24004e48
 8000e38:	24004df4 	.word	0x24004df4
 8000e3c:	24005898 	.word	0x24005898
 8000e40:	24005874 	.word	0x24005874
 8000e44:	24004e44 	.word	0x24004e44
 8000e48:	e000ed04 	.word	0xe000ed04

08000e4c <AD7177_WriteRegister>:

void AD7177_WriteRegister(uint8_t reg, uint32_t value, uint8_t num_bytes){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = (reg & 0x3F);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e62:	73fb      	strb	r3, [r7, #15]
    uint8_t tx[4] = { cmd, 0, 0, 0 };
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	723b      	strb	r3, [r7, #8]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	727b      	strb	r3, [r7, #9]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	72bb      	strb	r3, [r7, #10]
 8000e70:	2300      	movs	r3, #0
 8000e72:	72fb      	strb	r3, [r7, #11]
    if (num_bytes == 3) {
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d10b      	bne.n	8000e92 <AD7177_WriteRegister+0x46>
        tx[1] = (value >> 16) & 0xFF;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	0c1b      	lsrs	r3, r3, #16
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	727b      	strb	r3, [r7, #9]
        tx[2] = (value >> 8) & 0xFF;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	72bb      	strb	r3, [r7, #10]
        tx[3] = value & 0xFF;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	72fb      	strb	r3, [r7, #11]
 8000e90:	e010      	b.n	8000eb4 <AD7177_WriteRegister+0x68>
    } else if (num_bytes == 2) {
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d107      	bne.n	8000ea8 <AD7177_WriteRegister+0x5c>
        tx[1] = (value >> 8) & 0xFF;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	0a1b      	lsrs	r3, r3, #8
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	727b      	strb	r3, [r7, #9]
        tx[2] = value & 0xFF;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	72bb      	strb	r3, [r7, #10]
 8000ea6:	e005      	b.n	8000eb4 <AD7177_WriteRegister+0x68>
    } else if (num_bytes == 1) {
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d102      	bne.n	8000eb4 <AD7177_WriteRegister+0x68>
        tx[1] = value & 0xFF;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	727b      	strb	r3, [r7, #9]
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	@ 0x40
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <AD7177_WriteRegister+0x9c>)
 8000eba:	f005 f899 	bl	8005ff0 <HAL_GPIO_WritePin>
    //HAL_Delay(1);
    HAL_SPI_Transmit(&hspi1, tx, num_bytes + 1, HAL_MAX_DELAY);
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f107 0108 	add.w	r1, r7, #8
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	4807      	ldr	r0, [pc, #28]	@ (8000eec <AD7177_WriteRegister+0xa0>)
 8000ed0:	f007 fcc0 	bl	8008854 <HAL_SPI_Transmit>
    //HAL_Delay(1);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2140      	movs	r1, #64	@ 0x40
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <AD7177_WriteRegister+0x9c>)
 8000eda:	f005 f889 	bl	8005ff0 <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	58020400 	.word	0x58020400
 8000eec:	24004a6c 	.word	0x24004a6c

08000ef0 <AD7177_ReadRegister>:

uint32_t AD7177_ReadRegister(uint8_t reg, uint8_t num_bytes)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460a      	mov	r2, r1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	4613      	mov	r3, r2
 8000efe:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = 0x40 | (reg & 0x3F);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	75fb      	strb	r3, [r7, #23]
    uint8_t tx[4] = { cmd, 0, 0, 0 };
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	743b      	strb	r3, [r7, #16]
 8000f16:	2300      	movs	r3, #0
 8000f18:	747b      	strb	r3, [r7, #17]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	74bb      	strb	r3, [r7, #18]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	74fb      	strb	r3, [r7, #19]
    uint8_t rx[4] = {0};
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2140      	movs	r1, #64	@ 0x40
 8000f2a:	4818      	ldr	r0, [pc, #96]	@ (8000f8c <AD7177_ReadRegister+0x9c>)
 8000f2c:	f005 f860 	bl	8005ff0 <HAL_GPIO_WritePin>
    //HAL_Delay(1);
    HAL_SPI_TransmitReceive(&hspi1, tx, rx, num_bytes + 1, 50);
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3301      	adds	r3, #1
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	f107 0110 	add.w	r1, r7, #16
 8000f40:	2032      	movs	r0, #50	@ 0x32
 8000f42:	9000      	str	r0, [sp, #0]
 8000f44:	4812      	ldr	r0, [pc, #72]	@ (8000f90 <AD7177_ReadRegister+0xa0>)
 8000f46:	f008 f8e5 	bl	8009114 <HAL_SPI_TransmitReceive>
    //HAL_Delay(1);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2140      	movs	r1, #64	@ 0x40
 8000f4e:	480f      	ldr	r0, [pc, #60]	@ (8000f8c <AD7177_ReadRegister+0x9c>)
 8000f50:	f005 f84e 	bl	8005ff0 <HAL_GPIO_WritePin>
    uint32_t result = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < num_bytes; ++i) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	e00c      	b.n	8000f78 <AD7177_ReadRegister+0x88>
        result = (result << 8) | rx[i + 1];
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	3201      	adds	r2, #1
 8000f66:	3220      	adds	r2, #32
 8000f68:	443a      	add	r2, r7
 8000f6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < num_bytes; ++i) {
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbee      	blt.n	8000f5e <AD7177_ReadRegister+0x6e>
    }
    return result;
 8000f80:	69fb      	ldr	r3, [r7, #28]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	58020400 	.word	0x58020400
 8000f90:	24004a6c 	.word	0x24004a6c

08000f94 <initializeAD7177Board>:

void initializeAD7177Board() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    // Reset
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2140      	movs	r1, #64	@ 0x40
 8000f9c:	4829      	ldr	r0, [pc, #164]	@ (8001044 <initializeAD7177Board+0xb0>)
 8000f9e:	f005 f827 	bl	8005ff0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)resetSequence, 8, HAL_MAX_DELAY);
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	4927      	ldr	r1, [pc, #156]	@ (8001048 <initializeAD7177Board+0xb4>)
 8000faa:	4828      	ldr	r0, [pc, #160]	@ (800104c <initializeAD7177Board+0xb8>)
 8000fac:	f007 fc52 	bl	8008854 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2140      	movs	r1, #64	@ 0x40
 8000fb4:	4823      	ldr	r0, [pc, #140]	@ (8001044 <initializeAD7177Board+0xb0>)
 8000fb6:	f005 f81b 	bl	8005ff0 <HAL_GPIO_WritePin>

    HAL_Delay(5);
 8000fba:	2005      	movs	r0, #5
 8000fbc:	f001 f812 	bl	8001fe4 <HAL_Delay>


    // Check for functionality
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2140      	movs	r1, #64	@ 0x40
 8000fc4:	481f      	ldr	r0, [pc, #124]	@ (8001044 <initializeAD7177Board+0xb0>)
 8000fc6:	f005 f813 	bl	8005ff0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)checkTransmit, 1, HAL_MAX_DELAY);
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	2201      	movs	r2, #1
 8000fd0:	491f      	ldr	r1, [pc, #124]	@ (8001050 <initializeAD7177Board+0xbc>)
 8000fd2:	481e      	ldr	r0, [pc, #120]	@ (800104c <initializeAD7177Board+0xb8>)
 8000fd4:	f007 fc3e 	bl	8008854 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)checkReceive, 2, HAL_MAX_DELAY);
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	2202      	movs	r2, #2
 8000fde:	491d      	ldr	r1, [pc, #116]	@ (8001054 <initializeAD7177Board+0xc0>)
 8000fe0:	481a      	ldr	r0, [pc, #104]	@ (800104c <initializeAD7177Board+0xb8>)
 8000fe2:	f007 fe25 	bl	8008c30 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2140      	movs	r1, #64	@ 0x40
 8000fea:	4816      	ldr	r0, [pc, #88]	@ (8001044 <initializeAD7177Board+0xb0>)
 8000fec:	f005 f800 	bl	8005ff0 <HAL_GPIO_WritePin>
    } else {
        // Unexpected ID
    }

    // set up ADC Mode
    AD7177_WriteRegister(AD7177_REG_ADCMODE, AD7177_ADCMODE, 2);
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff ff28 	bl	8000e4c <AD7177_WriteRegister>

    // set up IF Mode, enable DATA_STAT byte
    AD7177_WriteRegister(AD7177_REG_IFMODE, AD7177_IFMODE, 2);
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	2140      	movs	r1, #64	@ 0x40
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff ff23 	bl	8000e4c <AD7177_WriteRegister>

    // Configure filter mode 0
    AD7177_WriteRegister(AD7177_REG_FILTCON0, AD7177_FILTCON0, 2);
 8001006:	2202      	movs	r2, #2
 8001008:	2109      	movs	r1, #9
 800100a:	2028      	movs	r0, #40	@ 0x28
 800100c:	f7ff ff1e 	bl	8000e4c <AD7177_WriteRegister>

    // Configure setup mode 0
    AD7177_WriteRegister(AD7177_REG_SETUPCON0, AD7177_SETUPCON0, 2);
 8001010:	2202      	movs	r2, #2
 8001012:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001016:	2020      	movs	r0, #32
 8001018:	f7ff ff18 	bl	8000e4c <AD7177_WriteRegister>

    // Setup channels 0 to 3
    AD7177_WriteRegister(AD7177_REG_CH0, AD7177_CH0_SETUP0, 2);
 800101c:	2202      	movs	r2, #2
 800101e:	f248 0104 	movw	r1, #32772	@ 0x8004
 8001022:	2010      	movs	r0, #16
 8001024:	f7ff ff12 	bl	8000e4c <AD7177_WriteRegister>
    AD7177_WriteRegister(AD7177_REG_CH1, AD7177_CH1_SETUP0, 2);
 8001028:	2202      	movs	r2, #2
 800102a:	f248 0124 	movw	r1, #32804	@ 0x8024
 800102e:	2011      	movs	r0, #17
 8001030:	f7ff ff0c 	bl	8000e4c <AD7177_WriteRegister>
    AD7177_WriteRegister(AD7177_REG_CH2, AD7177_CH2_SETUP0, 2);
 8001034:	2202      	movs	r2, #2
 8001036:	f248 0144 	movw	r1, #32836	@ 0x8044
 800103a:	2012      	movs	r0, #18
 800103c:	f7ff ff06 	bl	8000e4c <AD7177_WriteRegister>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58020400 	.word	0x58020400
 8001048:	24004984 	.word	0x24004984
 800104c:	24004a6c 	.word	0x24004a6c
 8001050:	24004990 	.word	0x24004990
 8001054:	2400589c 	.word	0x2400589c

08001058 <readInitializedRegisters>:
void readInitializedRegisters() {
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	adc_mode = AD7177_ReadRegister(AD7177_REG_ADCMODE, 2);
 800105c:	2102      	movs	r1, #2
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff ff46 	bl	8000ef0 <AD7177_ReadRegister>
 8001064:	4603      	mov	r3, r0
 8001066:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <readInitializedRegisters+0xac>)
 8001068:	6013      	str	r3, [r2, #0]
	if_mode = AD7177_ReadRegister(AD7177_REG_IFMODE, 2);
 800106a:	2102      	movs	r1, #2
 800106c:	2002      	movs	r0, #2
 800106e:	f7ff ff3f 	bl	8000ef0 <AD7177_ReadRegister>
 8001072:	4603      	mov	r3, r0
 8001074:	4a24      	ldr	r2, [pc, #144]	@ (8001108 <readInitializedRegisters+0xb0>)
 8001076:	6013      	str	r3, [r2, #0]
	filtcon0 = AD7177_ReadRegister(AD7177_REG_FILTCON0, 2);
 8001078:	2102      	movs	r1, #2
 800107a:	2028      	movs	r0, #40	@ 0x28
 800107c:	f7ff ff38 	bl	8000ef0 <AD7177_ReadRegister>
 8001080:	4603      	mov	r3, r0
 8001082:	4a22      	ldr	r2, [pc, #136]	@ (800110c <readInitializedRegisters+0xb4>)
 8001084:	6013      	str	r3, [r2, #0]
	setupcon0 = AD7177_ReadRegister(AD7177_REG_SETUPCON0, 2);
 8001086:	2102      	movs	r1, #2
 8001088:	2020      	movs	r0, #32
 800108a:	f7ff ff31 	bl	8000ef0 <AD7177_ReadRegister>
 800108e:	4603      	mov	r3, r0
 8001090:	4a1f      	ldr	r2, [pc, #124]	@ (8001110 <readInitializedRegisters+0xb8>)
 8001092:	6013      	str	r3, [r2, #0]

	ch0_setup = AD7177_ReadRegister(AD7177_REG_CH0, 2);
 8001094:	2102      	movs	r1, #2
 8001096:	2010      	movs	r0, #16
 8001098:	f7ff ff2a 	bl	8000ef0 <AD7177_ReadRegister>
 800109c:	4603      	mov	r3, r0
 800109e:	4a1d      	ldr	r2, [pc, #116]	@ (8001114 <readInitializedRegisters+0xbc>)
 80010a0:	6013      	str	r3, [r2, #0]
	ch1_setup = AD7177_ReadRegister(AD7177_REG_CH1, 2);
 80010a2:	2102      	movs	r1, #2
 80010a4:	2011      	movs	r0, #17
 80010a6:	f7ff ff23 	bl	8000ef0 <AD7177_ReadRegister>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001118 <readInitializedRegisters+0xc0>)
 80010ae:	6013      	str	r3, [r2, #0]
	ch2_setup = AD7177_ReadRegister(AD7177_REG_CH2, 2);
 80010b0:	2102      	movs	r1, #2
 80010b2:	2012      	movs	r0, #18
 80010b4:	f7ff ff1c 	bl	8000ef0 <AD7177_ReadRegister>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a18      	ldr	r2, [pc, #96]	@ (800111c <readInitializedRegisters+0xc4>)
 80010bc:	6013      	str	r3, [r2, #0]
	ch3_setup = AD7177_ReadRegister(AD7177_REG_CH3, 2);
 80010be:	2102      	movs	r1, #2
 80010c0:	2013      	movs	r0, #19
 80010c2:	f7ff ff15 	bl	8000ef0 <AD7177_ReadRegister>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a15      	ldr	r2, [pc, #84]	@ (8001120 <readInitializedRegisters+0xc8>)
 80010ca:	6013      	str	r3, [r2, #0]

	initial_data = AD7177_ReadRegister(AD7177_REG_DATA, 4);
 80010cc:	2104      	movs	r1, #4
 80010ce:	2004      	movs	r0, #4
 80010d0:	f7ff ff0e 	bl	8000ef0 <AD7177_ReadRegister>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a13      	ldr	r2, [pc, #76]	@ (8001124 <readInitializedRegisters+0xcc>)
 80010d8:	6013      	str	r3, [r2, #0]
	initial_voltage = convertDataToVoltage(initial_data);
 80010da:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <readInitializedRegisters+0xcc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f826 	bl	8001130 <convertDataToVoltage>
 80010e4:	eef0 7a40 	vmov.f32	s15, s0
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <readInitializedRegisters+0xd0>)
 80010ea:	edc3 7a00 	vstr	s15, [r3]

	initial_ch = initial_data & 0x03;
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <readInitializedRegisters+0xcc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <readInitializedRegisters+0xd4>)
 80010fc:	701a      	strb	r2, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24004994 	.word	0x24004994
 8001108:	24004998 	.word	0x24004998
 800110c:	2400499c 	.word	0x2400499c
 8001110:	240049a0 	.word	0x240049a0
 8001114:	240049a4 	.word	0x240049a4
 8001118:	240049a8 	.word	0x240049a8
 800111c:	240049ac 	.word	0x240049ac
 8001120:	240049b0 	.word	0x240049b0
 8001124:	240049b4 	.word	0x240049b4
 8001128:	240049b8 	.word	0x240049b8
 800112c:	240049bc 	.word	0x240049bc

08001130 <convertDataToVoltage>:

float convertDataToVoltage(uint32_t data){
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	//read the first 24 bits:
	uint32_t first24 = data >> 8;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	60fb      	str	r3, [r7, #12]

	float voltage = (((float)first24 / ((1 << 24) - 1)) * 10) - 5;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001148:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001178 <convertDataToVoltage+0x48>
 800114c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001150:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001158:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800115c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001160:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	ee07 3a90 	vmov	s15, r3
}
 800116a:	eeb0 0a67 	vmov.f32	s0, s15
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	4b7fffff 	.word	0x4b7fffff

0800117c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// MAKE SURE TO DELETE ANY "MX_LWIP_Init()" ABOVE
  /* Infinite loop */
  for(;;)
  {
	  timer23val = __HAL_TIM_GET_COUNTER(&htim23);
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <StartDefaultTask+0x20>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <StartDefaultTask+0x24>)
 800118c:	6013      	str	r3, [r2, #0]
	  AD7177_ReadIfReady(); // Sample and accumulate
 800118e:	f7ff fd4f 	bl	8000c30 <AD7177_ReadIfReady>
	  // Control polling rate
	  // Try reading one sample from the ADC
	   //AD7177_ReadIfReady(2);  // timeout of 2 ms

    osDelay(0.5);
 8001192:	2000      	movs	r0, #0
 8001194:	f00b f8cb 	bl	800c32e <osDelay>
	  timer23val = __HAL_TIM_GET_COUNTER(&htim23);
 8001198:	bf00      	nop
 800119a:	e7f3      	b.n	8001184 <StartDefaultTask+0x8>
 800119c:	24004df4 	.word	0x24004df4
 80011a0:	24005898 	.word	0x24005898

080011a4 <startEthernetTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEthernetTask */
void startEthernetTask(void *argument)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0a4      	sub	sp, #144	@ 0x90
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEthernetTask */
	MX_LWIP_Init();
 80011ac:	f00a f928 	bl	800b400 <MX_LWIP_Init>

	osDelay(100); // let LWIP be initialized
 80011b0:	2064      	movs	r0, #100	@ 0x64
 80011b2:	f00b f8bc 	bl	800c32e <osDelay>

	extern struct netif gnetif;

	netif_set_up(&gnetif);
 80011b6:	484d      	ldr	r0, [pc, #308]	@ (80012ec <startEthernetTask+0x148>)
 80011b8:	f010 f876 	bl	80112a8 <netif_set_up>
	netif_set_link_up(&gnetif); // Forces link status if not auto-detected
 80011bc:	484b      	ldr	r0, [pc, #300]	@ (80012ec <startEthernetTask+0x148>)
 80011be:	f010 f911 	bl	80113e4 <netif_set_link_up>

	const char* ip_status;
	ip_status = ipaddr_ntoa(&gnetif.ip_addr);
 80011c2:	484b      	ldr	r0, [pc, #300]	@ (80012f0 <startEthernetTask+0x14c>)
 80011c4:	f018 fc60 	bl	8019a88 <ip4addr_ntoa>
 80011c8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

	ETH_MACConfigTypeDef mac_config;
	HAL_ETH_GetMACConfig(&heth, &mac_config);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4848      	ldr	r0, [pc, #288]	@ (80012f4 <startEthernetTask+0x150>)
 80011d4:	f003 fd8a 	bl	8004cec <HAL_ETH_GetMACConfig>

	volatile uint32_t eth_speed = mac_config.Speed;         // Should be ETH_SPEED_100M
 80011d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011da:	61bb      	str	r3, [r7, #24]
	volatile uint32_t eth_duplex = mac_config.DuplexMode;   // Should be ETH_FULLDUPLEX_MODE
 80011dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011de:	617b      	str	r3, [r7, #20]


	extern ETH_HandleTypeDef heth;

	HAL_StatusTypeDef eth_status = HAL_ETH_Start(&heth);
 80011e0:	4844      	ldr	r0, [pc, #272]	@ (80012f4 <startEthernetTask+0x150>)
 80011e2:	f003 f891 	bl	8004308 <HAL_ETH_Start>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	if (eth_status != HAL_OK)
 80011ec:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <startEthernetTask+0x54>
	{
	    // Set a debug flag so we know it failed
	    volatile int eth_failed = 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
	}

	// Own IP
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 10, 20, 3, 3);
 80011f8:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <startEthernetTask+0x154>)
 80011fa:	613b      	str	r3, [r7, #16]

	// Computer IP
	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 10, 20, 1, 3);
 80011fc:	4b3f      	ldr	r3, [pc, #252]	@ (80012fc <startEthernetTask+0x158>)
 80011fe:	60fb      	str	r3, [r7, #12]

	struct udp_pcb* my_udp = udp_new();
 8001200:	f017 f816 	bl	8018230 <udp_new>
 8001204:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	udp_bind(my_udp, &myIPaddr, 8);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2208      	movs	r2, #8
 800120e:	4619      	mov	r1, r3
 8001210:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001214:	f016 ff16 	bl	8018044 <udp_bind>
	udp_connect(my_udp, &PC_IPADDR, 12345);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	f243 0239 	movw	r2, #12345	@ 0x3039
 8001220:	4619      	mov	r1, r3
 8001222:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001226:	f016 ff95 	bl	8018154 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	// Start timer 23
	HAL_TIM_Base_Start(&htim23);
 8001230:	4833      	ldr	r0, [pc, #204]	@ (8001300 <startEthernetTask+0x15c>)
 8001232:	f008 fe03 	bl	8009e3c <HAL_TIM_Base_Start>

	// Start timer 1
	HAL_TIM_Base_Start(&htim1);
 8001236:	4833      	ldr	r0, [pc, #204]	@ (8001304 <startEthernetTask+0x160>)
 8001238:	f008 fe00 	bl	8009e3c <HAL_TIM_Base_Start>

	// Start timer 2 with 1ms interrupts
	HAL_TIM_Base_Start_IT(&htim2);
 800123c:	4832      	ldr	r0, [pc, #200]	@ (8001308 <startEthernetTask+0x164>)
 800123e:	f008 fe7b 	bl	8009f38 <HAL_TIM_Base_Start_IT>

	 ticks1 = __HAL_TIM_GET_COUNTER(&htim23);
 8001242:	4b2f      	ldr	r3, [pc, #188]	@ (8001300 <startEthernetTask+0x15c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	4a30      	ldr	r2, [pc, #192]	@ (800130c <startEthernetTask+0x168>)
 800124a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);  // wait 1 second
 800124c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001250:	f000 fec8 	bl	8001fe4 <HAL_Delay>
	  ticks2 = __HAL_TIM_GET_COUNTER(&htim23);
 8001254:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <startEthernetTask+0x15c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	4a2d      	ldr	r2, [pc, #180]	@ (8001310 <startEthernetTask+0x16c>)
 800125c:	6013      	str	r3, [r2, #0]
	  ticksdiff = ticks2 - ticks1;
 800125e:	4b2c      	ldr	r3, [pc, #176]	@ (8001310 <startEthernetTask+0x16c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <startEthernetTask+0x168>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	4a2a      	ldr	r2, [pc, #168]	@ (8001314 <startEthernetTask+0x170>)
 800126a:	6013      	str	r3, [r2, #0]
		//AD7177_ReadIfReady();
		 // Wait for the notification to send data
		//ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

		// Wait for the notification to send data
			  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);;
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	2001      	movs	r0, #1
 8001272:	f00d fdab 	bl	800edcc <ulTaskNotifyTake>

			  // Copy samples from spiData to tempBuffer
			  memcpy(tempBuffer, spiData, sizeof(tempBuffer));
 8001276:	4a28      	ldr	r2, [pc, #160]	@ (8001318 <startEthernetTask+0x174>)
 8001278:	4b28      	ldr	r3, [pc, #160]	@ (800131c <startEthernetTask+0x178>)
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f240 43b2 	movw	r3, #1202	@ 0x4b2
 8001282:	461a      	mov	r2, r3
 8001284:	f019 fecf 	bl	801b026 <memcpy>

			  // Send the data over Ethernet
			  udp_buffer = pbuf_alloc(PBUF_TRANSPORT, sizeof(tempBuffer), PBUF_RAM);
 8001288:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800128c:	f240 41b2 	movw	r1, #1202	@ 0x4b2
 8001290:	2036      	movs	r0, #54	@ 0x36
 8001292:	f010 f9d5 	bl	8011640 <pbuf_alloc>
 8001296:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
			  if (udp_buffer != NULL)
 800129a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d012      	beq.n	80012c8 <startEthernetTask+0x124>
			  {
				  memcpy(udp_buffer->payload, tempBuffer, sizeof(tempBuffer));
 80012a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f240 42b2 	movw	r2, #1202	@ 0x4b2
 80012ac:	491a      	ldr	r1, [pc, #104]	@ (8001318 <startEthernetTask+0x174>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f019 feb9 	bl	801b026 <memcpy>
				  udp_send(my_udp, udp_buffer);
 80012b4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80012b8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80012bc:	f016 fcd8 	bl	8017c70 <udp_send>
				  pbuf_free(udp_buffer);
 80012c0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80012c4:	f010 fca4 	bl	8011c10 <pbuf_free>
			  }

			  // Shift the remaining samples up in the spiData buffer (pointer to dest, pointer to source, number of bytes)
			  memmove(spiData, &spiData[601], sizeof(spiData) - sizeof(tempBuffer));
 80012c8:	4a14      	ldr	r2, [pc, #80]	@ (800131c <startEthernetTask+0x178>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <startEthernetTask+0x17c>)
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	23c6      	movs	r3, #198	@ 0xc6
 80012d2:	461a      	mov	r2, r3
 80012d4:	f019 fea7 	bl	801b026 <memcpy>

			  // Update spiIndex to reflect the new starting position
			  spiIndex -= 601;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <startEthernetTask+0x180>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <startEthernetTask+0x180>)
 80012e6:	801a      	strh	r2, [r3, #0]
			  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);;
 80012e8:	e7c0      	b.n	800126c <startEthernetTask+0xc8>
 80012ea:	bf00      	nop
 80012ec:	240058f4 	.word	0x240058f4
 80012f0:	240058f8 	.word	0x240058f8
 80012f4:	24005974 	.word	0x24005974
 80012f8:	0303140a 	.word	0x0303140a
 80012fc:	0301140a 	.word	0x0301140a
 8001300:	24004df4 	.word	0x24004df4
 8001304:	24004d5c 	.word	0x24004d5c
 8001308:	24004da8 	.word	0x24004da8
 800130c:	24005878 	.word	0x24005878
 8001310:	2400587c 	.word	0x2400587c
 8001314:	24005880 	.word	0x24005880
 8001318:	240053c0 	.word	0x240053c0
 800131c:	24004e48 	.word	0x24004e48
 8001320:	240052fa 	.word	0x240052fa
 8001324:	24005872 	.word	0x24005872

08001328 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800133a:	f000 ff6b 	bl	8002214 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800133e:	2301      	movs	r3, #1
 8001340:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001342:	2300      	movs	r3, #0
 8001344:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800134a:	231f      	movs	r3, #31
 800134c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800134e:	2387      	movs	r3, #135	@ 0x87
 8001350:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001352:	2300      	movs	r3, #0
 8001354:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001356:	2300      	movs	r3, #0
 8001358:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800135a:	2301      	movs	r3, #1
 800135c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800135e:	2301      	movs	r3, #1
 8001360:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800136a:	463b      	mov	r3, r7
 800136c:	4618      	mov	r0, r3
 800136e:	f000 ff89 	bl	8002284 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001372:	2301      	movs	r3, #1
 8001374:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001376:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800137a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 800137c:	2309      	movs	r3, #9
 800137e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001380:	2300      	movs	r3, #0
 8001382:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001384:	2303      	movs	r3, #3
 8001386:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800138c:	463b      	mov	r3, r7
 800138e:	4618      	mov	r0, r3
 8001390:	f000 ff78 	bl	8002284 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001394:	2302      	movs	r3, #2
 8001396:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <MPU_Config+0x9c>)
 800139a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800139c:	230f      	movs	r3, #15
 800139e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013ac:	463b      	mov	r3, r7
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 ff68 	bl	8002284 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013b4:	2004      	movs	r0, #4
 80013b6:	f000 ff45 	bl	8002244 <HAL_MPU_Enable>

}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	30000200 	.word	0x30000200

080013c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013da:	f000 fde3 	bl	8001fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40001000 	.word	0x40001000

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <Error_Handler+0x8>

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <HAL_MspInit+0x38>)
 8001400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001404:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <HAL_MspInit+0x38>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <HAL_MspInit+0x38>)
 8001410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	210f      	movs	r1, #15
 8001420:	f06f 0001 	mvn.w	r0, #1
 8001424:	f000 fece 	bl	80021c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58024400 	.word	0x58024400

08001434 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0bc      	sub	sp, #240	@ 0xf0
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	22b8      	movs	r2, #184	@ 0xb8
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f019 fd12 	bl	801ae7e <memset>
  if(hspi->Instance==SPI1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a69      	ldr	r2, [pc, #420]	@ (8001604 <HAL_SPI_MspInit+0x1d0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	f040 80df 	bne.w	8001624 <HAL_SPI_MspInit+0x1f0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001466:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001472:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001476:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fdc1 	bl	8007004 <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001488:	f7ff ffb0 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800148c:	4b5e      	ldr	r3, [pc, #376]	@ (8001608 <HAL_SPI_MspInit+0x1d4>)
 800148e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001492:	4a5d      	ldr	r2, [pc, #372]	@ (8001608 <HAL_SPI_MspInit+0x1d4>)
 8001494:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001498:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800149c:	4b5a      	ldr	r3, [pc, #360]	@ (8001608 <HAL_SPI_MspInit+0x1d4>)
 800149e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b57      	ldr	r3, [pc, #348]	@ (8001608 <HAL_SPI_MspInit+0x1d4>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b0:	4a55      	ldr	r2, [pc, #340]	@ (8001608 <HAL_SPI_MspInit+0x1d4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ba:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <HAL_SPI_MspInit+0x1d4>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001608 <HAL_SPI_MspInit+0x1d4>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001608 <HAL_SPI_MspInit+0x1d4>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001608 <HAL_SPI_MspInit+0x1d4>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014e6:	2360      	movs	r3, #96	@ 0x60
 80014e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014fe:	2305      	movs	r3, #5
 8001500:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001508:	4619      	mov	r1, r3
 800150a:	4840      	ldr	r0, [pc, #256]	@ (800160c <HAL_SPI_MspInit+0x1d8>)
 800150c:	f004 fbc8 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001510:	2320      	movs	r3, #32
 8001512:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001528:	2305      	movs	r3, #5
 800152a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001532:	4619      	mov	r1, r3
 8001534:	4836      	ldr	r0, [pc, #216]	@ (8001610 <HAL_SPI_MspInit+0x1dc>)
 8001536:	f004 fbb3 	bl	8005ca0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream2;
 800153a:	4b36      	ldr	r3, [pc, #216]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 800153c:	4a36      	ldr	r2, [pc, #216]	@ (8001618 <HAL_SPI_MspInit+0x1e4>)
 800153e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001540:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 8001542:	2225      	movs	r2, #37	@ 0x25
 8001544:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001546:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154c:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 8001554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001558:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155a:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001560:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001566:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800156c:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 800156e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001572:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001574:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800157a:	4826      	ldr	r0, [pc, #152]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 800157c:	f000 fec2 	bl	8002304 <HAL_DMA_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_SPI_MspInit+0x156>
    {
      Error_Handler();
 8001586:	f7ff ff31 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 800158e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001590:	4a20      	ldr	r2, [pc, #128]	@ (8001614 <HAL_SPI_MspInit+0x1e0>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 8001598:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <HAL_SPI_MspInit+0x1ec>)
 800159a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800159c:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 800159e:	2226      	movs	r2, #38	@ 0x26
 80015a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015a4:	2240      	movs	r2, #64	@ 0x40
 80015a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ae:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015ce:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015d6:	4811      	ldr	r0, [pc, #68]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015d8:	f000 fe94 	bl	8002304 <HAL_DMA_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_SPI_MspInit+0x1b2>
    {
      Error_Handler();
 80015e2:	f7ff ff03 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015ea:	679a      	str	r2, [r3, #120]	@ 0x78
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_SPI_MspInit+0x1e8>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2105      	movs	r1, #5
 80015f6:	2023      	movs	r0, #35	@ 0x23
 80015f8:	f000 fde4 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015fc:	2023      	movs	r0, #35	@ 0x23
 80015fe:	f000 fdfb 	bl	80021f8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001602:	e0c0      	b.n	8001786 <HAL_SPI_MspInit+0x352>
 8001604:	40013000 	.word	0x40013000
 8001608:	58024400 	.word	0x58024400
 800160c:	58020000 	.word	0x58020000
 8001610:	58020400 	.word	0x58020400
 8001614:	24004b7c 	.word	0x24004b7c
 8001618:	40020040 	.word	0x40020040
 800161c:	24004bf4 	.word	0x24004bf4
 8001620:	40020058 	.word	0x40020058
  else if(hspi->Instance==SPI4)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a59      	ldr	r2, [pc, #356]	@ (8001790 <HAL_SPI_MspInit+0x35c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	f040 80ab 	bne.w	8001786 <HAL_SPI_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0320 	add.w	r3, r7, #32
 8001646:	4618      	mov	r0, r3
 8001648:	f005 fcdc 	bl	8007004 <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001652:	f7ff fecb 	bl	80013ec <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001656:	4b4f      	ldr	r3, [pc, #316]	@ (8001794 <HAL_SPI_MspInit+0x360>)
 8001658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800165c:	4a4d      	ldr	r2, [pc, #308]	@ (8001794 <HAL_SPI_MspInit+0x360>)
 800165e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001662:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001666:	4b4b      	ldr	r3, [pc, #300]	@ (8001794 <HAL_SPI_MspInit+0x360>)
 8001668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800166c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001674:	4b47      	ldr	r3, [pc, #284]	@ (8001794 <HAL_SPI_MspInit+0x360>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	4a46      	ldr	r2, [pc, #280]	@ (8001794 <HAL_SPI_MspInit+0x360>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001684:	4b43      	ldr	r3, [pc, #268]	@ (8001794 <HAL_SPI_MspInit+0x360>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001692:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80016ac:	2305      	movs	r3, #5
 80016ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016b6:	4619      	mov	r1, r3
 80016b8:	4837      	ldr	r0, [pc, #220]	@ (8001798 <HAL_SPI_MspInit+0x364>)
 80016ba:	f004 faf1 	bl	8005ca0 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA1_Stream0;
 80016be:	4b37      	ldr	r3, [pc, #220]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016c0:	4a37      	ldr	r2, [pc, #220]	@ (80017a0 <HAL_SPI_MspInit+0x36c>)
 80016c2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80016c4:	4b35      	ldr	r3, [pc, #212]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016c6:	2254      	movs	r2, #84	@ 0x54
 80016c8:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ca:	4b34      	ldr	r3, [pc, #208]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016cc:	2240      	movs	r2, #64	@ 0x40
 80016ce:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d0:	4b32      	ldr	r3, [pc, #200]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016d6:	4b31      	ldr	r3, [pc, #196]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016dc:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016de:	4b2f      	ldr	r3, [pc, #188]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80016ea:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016f0:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016f6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f8:	4b28      	ldr	r3, [pc, #160]	@ (800179c <HAL_SPI_MspInit+0x368>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80016fe:	4827      	ldr	r0, [pc, #156]	@ (800179c <HAL_SPI_MspInit+0x368>)
 8001700:	f000 fe00 	bl	8002304 <HAL_DMA_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_SPI_MspInit+0x2da>
      Error_Handler();
 800170a:	f7ff fe6f 	bl	80013ec <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a22      	ldr	r2, [pc, #136]	@ (800179c <HAL_SPI_MspInit+0x368>)
 8001712:	679a      	str	r2, [r3, #120]	@ 0x78
 8001714:	4a21      	ldr	r2, [pc, #132]	@ (800179c <HAL_SPI_MspInit+0x368>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_rx.Instance = DMA1_Stream1;
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 800171c:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <HAL_SPI_MspInit+0x374>)
 800171e:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001720:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 8001722:	2253      	movs	r2, #83	@ 0x53
 8001724:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 8001734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001738:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001746:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 800174e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001752:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800175a:	4812      	ldr	r0, [pc, #72]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 800175c:	f000 fdd2 	bl	8002304 <HAL_DMA_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_SPI_MspInit+0x336>
      Error_Handler();
 8001766:	f7ff fe41 	bl	80013ec <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 800176e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001770:	4a0c      	ldr	r2, [pc, #48]	@ (80017a4 <HAL_SPI_MspInit+0x370>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2105      	movs	r1, #5
 800177a:	2054      	movs	r0, #84	@ 0x54
 800177c:	f000 fd22 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001780:	2054      	movs	r0, #84	@ 0x54
 8001782:	f000 fd39 	bl	80021f8 <HAL_NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	37f0      	adds	r7, #240	@ 0xf0
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40013400 	.word	0x40013400
 8001794:	58024400 	.word	0x58024400
 8001798:	58021000 	.word	0x58021000
 800179c:	24004c6c 	.word	0x24004c6c
 80017a0:	40020010 	.word	0x40020010
 80017a4:	24004ce4 	.word	0x24004ce4
 80017a8:	40020028 	.word	0x40020028

080017ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a23      	ldr	r2, [pc, #140]	@ (8001848 <HAL_TIM_Base_MspInit+0x9c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10f      	bne.n	80017de <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017be:	4b23      	ldr	r3, [pc, #140]	@ (800184c <HAL_TIM_Base_MspInit+0xa0>)
 80017c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017c4:	4a21      	ldr	r2, [pc, #132]	@ (800184c <HAL_TIM_Base_MspInit+0xa0>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <HAL_TIM_Base_MspInit+0xa0>)
 80017d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM23_MspInit 1 */

    /* USER CODE END TIM23_MspInit 1 */
  }

}
 80017dc:	e030      	b.n	8001840 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e6:	d117      	bne.n	8001818 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_TIM_Base_MspInit+0xa0>)
 80017ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ee:	4a17      	ldr	r2, [pc, #92]	@ (800184c <HAL_TIM_Base_MspInit+0xa0>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_TIM_Base_MspInit+0xa0>)
 80017fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2105      	movs	r1, #5
 800180a:	201c      	movs	r0, #28
 800180c:	f000 fcda 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001810:	201c      	movs	r0, #28
 8001812:	f000 fcf1 	bl	80021f8 <HAL_NVIC_EnableIRQ>
}
 8001816:	e013      	b.n	8001840 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM23)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <HAL_TIM_Base_MspInit+0xa4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d10e      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_TIM_Base_MspInit+0xa0>)
 8001824:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001828:	4a08      	ldr	r2, [pc, #32]	@ (800184c <HAL_TIM_Base_MspInit+0xa0>)
 800182a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_TIM_Base_MspInit+0xa0>)
 8001834:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40010000 	.word	0x40010000
 800184c:	58024400 	.word	0x58024400
 8001850:	4000e000 	.word	0x4000e000

08001854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b090      	sub	sp, #64	@ 0x40
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	d827      	bhi.n	80018b2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001862:	2200      	movs	r2, #0
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	2036      	movs	r0, #54	@ 0x36
 8001868:	f000 fcac 	bl	80021c4 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800186c:	2036      	movs	r0, #54	@ 0x36
 800186e:	f000 fcc3 	bl	80021f8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001872:	4a29      	ldr	r2, [pc, #164]	@ (8001918 <HAL_InitTick+0xc4>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001878:	4b28      	ldr	r3, [pc, #160]	@ (800191c <HAL_InitTick+0xc8>)
 800187a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800187e:	4a27      	ldr	r2, [pc, #156]	@ (800191c <HAL_InitTick+0xc8>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001888:	4b24      	ldr	r3, [pc, #144]	@ (800191c <HAL_InitTick+0xc8>)
 800188a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001896:	f107 0210 	add.w	r2, r7, #16
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f005 fb6d 	bl	8006f80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d106      	bne.n	80018be <HAL_InitTick+0x6a>
 80018b0:	e001      	b.n	80018b6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e02b      	b.n	800190e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018b6:	f005 fb4d 	bl	8006f54 <HAL_RCC_GetPCLK1Freq>
 80018ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80018bc:	e004      	b.n	80018c8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018be:	f005 fb49 	bl	8006f54 <HAL_RCC_GetPCLK1Freq>
 80018c2:	4603      	mov	r3, r0
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ca:	4a15      	ldr	r2, [pc, #84]	@ (8001920 <HAL_InitTick+0xcc>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9b      	lsrs	r3, r3, #18
 80018d2:	3b01      	subs	r3, #1
 80018d4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018d6:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <HAL_InitTick+0xd0>)
 80018d8:	4a13      	ldr	r2, [pc, #76]	@ (8001928 <HAL_InitTick+0xd4>)
 80018da:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_InitTick+0xd0>)
 80018de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001924 <HAL_InitTick+0xd0>)
 80018e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <HAL_InitTick+0xd0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <HAL_InitTick+0xd0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018f6:	480b      	ldr	r0, [pc, #44]	@ (8001924 <HAL_InitTick+0xd0>)
 80018f8:	f008 fa49 	bl	8009d8e <HAL_TIM_Base_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d104      	bne.n	800190c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001902:	4808      	ldr	r0, [pc, #32]	@ (8001924 <HAL_InitTick+0xd0>)
 8001904:	f008 fb18 	bl	8009f38 <HAL_TIM_Base_Start_IT>
 8001908:	4603      	mov	r3, r0
 800190a:	e000      	b.n	800190e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	3740      	adds	r7, #64	@ 0x40
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	240049c8 	.word	0x240049c8
 800191c:	58024400 	.word	0x58024400
 8001920:	431bde83 	.word	0x431bde83
 8001924:	240058a0 	.word	0x240058a0
 8001928:	40001000 	.word	0x40001000

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <NMI_Handler+0x4>

08001934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <MemManage_Handler+0x4>

08001944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <UsageFault_Handler+0x4>

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <DMA1_Stream0_IRQHandler+0x10>)
 800196a:	f001 fa69 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	24004c6c 	.word	0x24004c6c

08001978 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <DMA1_Stream1_IRQHandler+0x10>)
 800197e:	f001 fa5f 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	24004ce4 	.word	0x24004ce4

0800198c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <DMA1_Stream2_IRQHandler+0x10>)
 8001992:	f001 fa55 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	24004b7c 	.word	0x24004b7c

080019a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <DMA1_Stream3_IRQHandler+0x10>)
 80019a6:	f001 fa4b 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	24004bf4 	.word	0x24004bf4

080019b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80019bc:	f004 fb31 	bl	8006022 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <TIM2_IRQHandler+0x10>)
 80019ca:	f008 fbfd 	bl	800a1c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	24004da8 	.word	0x24004da8

080019d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <SPI1_IRQHandler+0x10>)
 80019de:	f007 fed3 	bl	8009788 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	24004a6c 	.word	0x24004a6c

080019ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM6_DAC_IRQHandler+0x10>)
 80019f2:	f008 fbe9 	bl	800a1c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	240058a0 	.word	0x240058a0

08001a00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <ETH_IRQHandler+0x10>)
 8001a06:	f002 ffb7 	bl	8004978 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	24005974 	.word	0x24005974

08001a14 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <SPI4_IRQHandler+0x10>)
 8001a1a:	f007 feb5 	bl	8009788 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	24004af4 	.word	0x24004af4

08001a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return 1;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_kill>:

int _kill(int pid, int sig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <_kill+0x20>)
 8001a44:	2216      	movs	r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
  return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	24014e5c 	.word	0x24014e5c

08001a5c <_exit>:

void _exit (int status)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ffe5 	bl	8001a38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a6e:	bf00      	nop
 8001a70:	e7fd      	b.n	8001a6e <_exit+0x12>

08001a72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e00a      	b.n	8001a9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a84:	f3af 8000 	nop.w
 8001a88:	4601      	mov	r1, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	60ba      	str	r2, [r7, #8]
 8001a90:	b2ca      	uxtb	r2, r1
 8001a92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbf0      	blt.n	8001a84 <_read+0x12>
  }

  return len;
 8001aa2:	687b      	ldr	r3, [r7, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e009      	b.n	8001ad2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60ba      	str	r2, [r7, #8]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dbf1      	blt.n	8001abe <_write+0x12>
  }
  return len;
 8001ada:	687b      	ldr	r3, [r7, #4]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_close>:

int _close(int file)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_isatty>:

int _isatty(int file)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d205      	bcs.n	8001b88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <_sbrk+0x6c>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a06      	ldr	r2, [pc, #24]	@ (8001bb0 <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	24050000 	.word	0x24050000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	240058ec 	.word	0x240058ec
 8001bb4:	24014e70 	.word	0x24014e70
 8001bb8:	24014e5c 	.word	0x24014e5c

08001bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cac <SystemInit+0xf0>)
 8001bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc8:	4a38      	ldr	r2, [pc, #224]	@ (8001cac <SystemInit+0xf0>)
 8001bca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bd2:	4b37      	ldr	r3, [pc, #220]	@ (8001cb0 <SystemInit+0xf4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d807      	bhi.n	8001bee <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bde:	4b34      	ldr	r3, [pc, #208]	@ (8001cb0 <SystemInit+0xf4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 030f 	bic.w	r3, r3, #15
 8001be6:	4a32      	ldr	r2, [pc, #200]	@ (8001cb0 <SystemInit+0xf4>)
 8001be8:	f043 0307 	orr.w	r3, r3, #7
 8001bec:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bee:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <SystemInit+0xf8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a30      	ldr	r2, [pc, #192]	@ (8001cb4 <SystemInit+0xf8>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <SystemInit+0xf8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c00:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb4 <SystemInit+0xf8>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	492b      	ldr	r1, [pc, #172]	@ (8001cb4 <SystemInit+0xf8>)
 8001c06:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb8 <SystemInit+0xfc>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c0c:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <SystemInit+0xf4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <SystemInit+0xf4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 030f 	bic.w	r3, r3, #15
 8001c20:	4a23      	ldr	r2, [pc, #140]	@ (8001cb0 <SystemInit+0xf4>)
 8001c22:	f043 0307 	orr.w	r3, r3, #7
 8001c26:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c28:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <SystemInit+0xf8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <SystemInit+0xf8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <SystemInit+0xf8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <SystemInit+0xf8>)
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cbc <SystemInit+0x100>)
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c40:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <SystemInit+0xf8>)
 8001c42:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <SystemInit+0x104>)
 8001c44:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <SystemInit+0xf8>)
 8001c48:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc4 <SystemInit+0x108>)
 8001c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <SystemInit+0xf8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <SystemInit+0xf8>)
 8001c54:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <SystemInit+0x108>)
 8001c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <SystemInit+0xf8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <SystemInit+0xf8>)
 8001c60:	4a18      	ldr	r2, [pc, #96]	@ (8001cc4 <SystemInit+0x108>)
 8001c62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <SystemInit+0xf8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <SystemInit+0xf8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a11      	ldr	r2, [pc, #68]	@ (8001cb4 <SystemInit+0xf8>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c76:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <SystemInit+0xf8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <SystemInit+0xf8>)
 8001c7e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c82:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb4 <SystemInit+0xf8>)
 8001c84:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001c88:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <SystemInit+0xf8>)
 8001c8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c92:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001c94:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c96:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <SystemInit+0x10c>)
 8001c98:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00
 8001cb0:	52002000 	.word	0x52002000
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cbc:	02020200 	.word	0x02020200
 8001cc0:	01ff0000 	.word	0x01ff0000
 8001cc4:	01010280 	.word	0x01010280
 8001cc8:	52004000 	.word	0x52004000

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cd0:	f7ff ff74 	bl	8001bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	@ (8001d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	@ (8001d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f019 f96d 	bl	801afd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7fe fb57 	bl	80003b0 <main>
  bx  lr
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d04:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001d08:	24004984 	.word	0x24004984
  ldr r1, =_edata
 8001d0c:	24004a50 	.word	0x24004a50
  ldr r2, =_sidata
 8001d10:	0801eb10 	.word	0x0801eb10
  ldr r2, =_sbss
 8001d14:	24004a50 	.word	0x24004a50
  ldr r4, =_ebss
 8001d18:	24014e6c 	.word	0x24014e6c

08001d1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC3_IRQHandler>

08001d1e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <LAN8742_RegisterBusIO+0x28>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <LAN8742_RegisterBusIO+0x28>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <LAN8742_RegisterBusIO+0x28>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e014      	b.n	8001d76 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d139      	bne.n	8001e12 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e01c      	b.n	8001df2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f107 020c 	add.w	r2, r7, #12
 8001dc0:	2112      	movs	r1, #18
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	4798      	blx	r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da03      	bge.n	8001dd4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001dcc:	f06f 0304 	mvn.w	r3, #4
 8001dd0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001dd2:	e00b      	b.n	8001dec <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d105      	bne.n	8001dec <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
         break;
 8001dea:	e005      	b.n	8001df8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b1f      	cmp	r3, #31
 8001df6:	d9df      	bls.n	8001db8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b1f      	cmp	r3, #31
 8001dfe:	d902      	bls.n	8001e06 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001e00:	f06f 0302 	mvn.w	r3, #2
 8001e04:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001e12:	693b      	ldr	r3, [r7, #16]
 }
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6810      	ldr	r0, [r2, #0]
 8001e30:	f107 020c 	add.w	r2, r7, #12
 8001e34:	2101      	movs	r1, #1
 8001e36:	4798      	blx	r3
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da02      	bge.n	8001e44 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e3e:	f06f 0304 	mvn.w	r3, #4
 8001e42:	e06e      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6810      	ldr	r0, [r2, #0]
 8001e4c:	f107 020c 	add.w	r2, r7, #12
 8001e50:	2101      	movs	r1, #1
 8001e52:	4798      	blx	r3
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	da02      	bge.n	8001e60 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e5a:	f06f 0304 	mvn.w	r3, #4
 8001e5e:	e060      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e059      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6810      	ldr	r0, [r2, #0]
 8001e76:	f107 020c 	add.w	r2, r7, #12
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4798      	blx	r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da02      	bge.n	8001e8a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e84:	f06f 0304 	mvn.w	r3, #4
 8001e88:	e04b      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d11b      	bne.n	8001ecc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <LAN8742_GetLinkState+0x90>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e03a      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e033      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	e02c      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001ec8:	2305      	movs	r3, #5
 8001eca:	e02a      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6810      	ldr	r0, [r2, #0]
 8001ed4:	f107 020c 	add.w	r2, r7, #12
 8001ed8:	211f      	movs	r1, #31
 8001eda:	4798      	blx	r3
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da02      	bge.n	8001ee8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001ee2:	f06f 0304 	mvn.w	r3, #4
 8001ee6:	e01c      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	e015      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 031c 	and.w	r3, r3, #28
 8001efc:	2b18      	cmp	r3, #24
 8001efe:	d101      	bne.n	8001f04 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f00:	2302      	movs	r3, #2
 8001f02:	e00e      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 031c 	and.w	r3, r3, #28
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d101      	bne.n	8001f12 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e007      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 031c 	and.w	r3, r3, #28
 8001f18:	2b14      	cmp	r3, #20
 8001f1a:	d101      	bne.n	8001f20 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e000      	b.n	8001f22 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f20:	2305      	movs	r3, #5
    }
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f000 f93b 	bl	80021ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f38:	f004 fe62 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <HAL_Init+0x68>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	4913      	ldr	r1, [pc, #76]	@ (8001f98 <HAL_Init+0x6c>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f56:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <HAL_Init+0x68>)
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f98 <HAL_Init+0x6c>)
 8001f60:	5cd3      	ldrb	r3, [r2, r3]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f9c <HAL_Init+0x70>)
 8001f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f70:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <HAL_Init+0x74>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f76:	200f      	movs	r0, #15
 8001f78:	f7ff fc6c 	bl	8001854 <HAL_InitTick>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e002      	b.n	8001f8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f86:	f7ff fa37 	bl	80013f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	58024400 	.word	0x58024400
 8001f98:	0801e8cc 	.word	0x0801e8cc
 8001f9c:	240049c4 	.word	0x240049c4
 8001fa0:	240049c0 	.word	0x240049c0

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	240049cc 	.word	0x240049cc
 8001fc8:	240058f0 	.word	0x240058f0

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	@ (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	240058f0 	.word	0x240058f0

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	240049cc 	.word	0x240049cc

0800202c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800203c:	4904      	ldr	r1, [pc, #16]	@ (8002050 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	58000400 	.word	0x58000400

08002054 <__NVIC_SetPriorityGrouping>:
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <__NVIC_SetPriorityGrouping+0x40>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	4313      	orrs	r3, r2
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <__NVIC_SetPriorityGrouping+0x40>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	05fa0000 	.word	0x05fa0000

0800209c <__NVIC_GetPriorityGrouping>:
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_EnableIRQ>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db0b      	blt.n	80020e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4907      	ldr	r1, [pc, #28]	@ (80020f0 <__NVIC_EnableIRQ+0x38>)
 80020d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000e100 	.word	0xe000e100

080020f4 <__NVIC_SetPriority>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	@ (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	@ (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	@ 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	@ 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ff4c 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d2:	f7ff ff63 	bl	800209c <__NVIC_GetPriorityGrouping>
 80021d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7ff ffb3 	bl	8002148 <NVIC_EncodePriority>
 80021e2:	4602      	mov	r2, r0
 80021e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff82 	bl	80020f4 <__NVIC_SetPriority>
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff56 	bl	80020b8 <__NVIC_EnableIRQ>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002218:	f3bf 8f5f 	dmb	sy
}
 800221c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <HAL_MPU_Disable+0x28>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	4a06      	ldr	r2, [pc, #24]	@ (800223c <HAL_MPU_Disable+0x28>)
 8002224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002228:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800222a:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <HAL_MPU_Disable+0x2c>)
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00
 8002240:	e000ed90 	.word	0xe000ed90

08002244 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800224c:	4a0b      	ldr	r2, [pc, #44]	@ (800227c <HAL_MPU_Enable+0x38>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_MPU_Enable+0x3c>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	4a09      	ldr	r2, [pc, #36]	@ (8002280 <HAL_MPU_Enable+0x3c>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002260:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002262:	f3bf 8f4f 	dsb	sy
}
 8002266:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002268:	f3bf 8f6f 	isb	sy
}
 800226c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed90 	.word	0xe000ed90
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	785a      	ldrb	r2, [r3, #1]
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <HAL_MPU_ConfigRegion+0x7c>)
 8002292:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002294:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <HAL_MPU_ConfigRegion+0x7c>)
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	4a19      	ldr	r2, [pc, #100]	@ (8002300 <HAL_MPU_ConfigRegion+0x7c>)
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022a0:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_MPU_ConfigRegion+0x7c>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7b1b      	ldrb	r3, [r3, #12]
 80022ac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7adb      	ldrb	r3, [r3, #11]
 80022b2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7a9b      	ldrb	r3, [r3, #10]
 80022ba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7b5b      	ldrb	r3, [r3, #13]
 80022c2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7b9b      	ldrb	r3, [r3, #14]
 80022ca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7bdb      	ldrb	r3, [r3, #15]
 80022d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7a5b      	ldrb	r3, [r3, #9]
 80022da:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7a1b      	ldrb	r3, [r3, #8]
 80022e2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022e4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022ec:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022ee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022f0:	6113      	str	r3, [r2, #16]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed90 	.word	0xe000ed90

08002304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff fe5e 	bl	8001fcc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e312      	b.n	8002942 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a66      	ldr	r2, [pc, #408]	@ (80024bc <HAL_DMA_Init+0x1b8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d04a      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a65      	ldr	r2, [pc, #404]	@ (80024c0 <HAL_DMA_Init+0x1bc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d045      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a63      	ldr	r2, [pc, #396]	@ (80024c4 <HAL_DMA_Init+0x1c0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d040      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a62      	ldr	r2, [pc, #392]	@ (80024c8 <HAL_DMA_Init+0x1c4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d03b      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a60      	ldr	r2, [pc, #384]	@ (80024cc <HAL_DMA_Init+0x1c8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d036      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a5f      	ldr	r2, [pc, #380]	@ (80024d0 <HAL_DMA_Init+0x1cc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d031      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5d      	ldr	r2, [pc, #372]	@ (80024d4 <HAL_DMA_Init+0x1d0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02c      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a5c      	ldr	r2, [pc, #368]	@ (80024d8 <HAL_DMA_Init+0x1d4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d027      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a5a      	ldr	r2, [pc, #360]	@ (80024dc <HAL_DMA_Init+0x1d8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d022      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a59      	ldr	r2, [pc, #356]	@ (80024e0 <HAL_DMA_Init+0x1dc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d01d      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a57      	ldr	r2, [pc, #348]	@ (80024e4 <HAL_DMA_Init+0x1e0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d018      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a56      	ldr	r2, [pc, #344]	@ (80024e8 <HAL_DMA_Init+0x1e4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a54      	ldr	r2, [pc, #336]	@ (80024ec <HAL_DMA_Init+0x1e8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00e      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a53      	ldr	r2, [pc, #332]	@ (80024f0 <HAL_DMA_Init+0x1ec>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a51      	ldr	r2, [pc, #324]	@ (80024f4 <HAL_DMA_Init+0x1f0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d004      	beq.n	80023bc <HAL_DMA_Init+0xb8>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a50      	ldr	r2, [pc, #320]	@ (80024f8 <HAL_DMA_Init+0x1f4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_DMA_Init+0xbc>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_DMA_Init+0xbe>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 813c 	beq.w	8002640 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a37      	ldr	r2, [pc, #220]	@ (80024bc <HAL_DMA_Init+0x1b8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d04a      	beq.n	8002478 <HAL_DMA_Init+0x174>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a36      	ldr	r2, [pc, #216]	@ (80024c0 <HAL_DMA_Init+0x1bc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d045      	beq.n	8002478 <HAL_DMA_Init+0x174>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a34      	ldr	r2, [pc, #208]	@ (80024c4 <HAL_DMA_Init+0x1c0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d040      	beq.n	8002478 <HAL_DMA_Init+0x174>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a33      	ldr	r2, [pc, #204]	@ (80024c8 <HAL_DMA_Init+0x1c4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d03b      	beq.n	8002478 <HAL_DMA_Init+0x174>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a31      	ldr	r2, [pc, #196]	@ (80024cc <HAL_DMA_Init+0x1c8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d036      	beq.n	8002478 <HAL_DMA_Init+0x174>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a30      	ldr	r2, [pc, #192]	@ (80024d0 <HAL_DMA_Init+0x1cc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d031      	beq.n	8002478 <HAL_DMA_Init+0x174>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2e      	ldr	r2, [pc, #184]	@ (80024d4 <HAL_DMA_Init+0x1d0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d02c      	beq.n	8002478 <HAL_DMA_Init+0x174>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2d      	ldr	r2, [pc, #180]	@ (80024d8 <HAL_DMA_Init+0x1d4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d027      	beq.n	8002478 <HAL_DMA_Init+0x174>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2b      	ldr	r2, [pc, #172]	@ (80024dc <HAL_DMA_Init+0x1d8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d022      	beq.n	8002478 <HAL_DMA_Init+0x174>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2a      	ldr	r2, [pc, #168]	@ (80024e0 <HAL_DMA_Init+0x1dc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d01d      	beq.n	8002478 <HAL_DMA_Init+0x174>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a28      	ldr	r2, [pc, #160]	@ (80024e4 <HAL_DMA_Init+0x1e0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d018      	beq.n	8002478 <HAL_DMA_Init+0x174>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a27      	ldr	r2, [pc, #156]	@ (80024e8 <HAL_DMA_Init+0x1e4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <HAL_DMA_Init+0x174>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a25      	ldr	r2, [pc, #148]	@ (80024ec <HAL_DMA_Init+0x1e8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_DMA_Init+0x174>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a24      	ldr	r2, [pc, #144]	@ (80024f0 <HAL_DMA_Init+0x1ec>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_DMA_Init+0x174>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a22      	ldr	r2, [pc, #136]	@ (80024f4 <HAL_DMA_Init+0x1f0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_DMA_Init+0x174>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a21      	ldr	r2, [pc, #132]	@ (80024f8 <HAL_DMA_Init+0x1f4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d108      	bne.n	800248a <HAL_DMA_Init+0x186>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e007      	b.n	800249a <HAL_DMA_Init+0x196>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800249a:	e02f      	b.n	80024fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249c:	f7ff fd96 	bl	8001fcc <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d928      	bls.n	80024fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2203      	movs	r2, #3
 80024b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e242      	b.n	8002942 <HAL_DMA_Init+0x63e>
 80024bc:	40020010 	.word	0x40020010
 80024c0:	40020028 	.word	0x40020028
 80024c4:	40020040 	.word	0x40020040
 80024c8:	40020058 	.word	0x40020058
 80024cc:	40020070 	.word	0x40020070
 80024d0:	40020088 	.word	0x40020088
 80024d4:	400200a0 	.word	0x400200a0
 80024d8:	400200b8 	.word	0x400200b8
 80024dc:	40020410 	.word	0x40020410
 80024e0:	40020428 	.word	0x40020428
 80024e4:	40020440 	.word	0x40020440
 80024e8:	40020458 	.word	0x40020458
 80024ec:	40020470 	.word	0x40020470
 80024f0:	40020488 	.word	0x40020488
 80024f4:	400204a0 	.word	0x400204a0
 80024f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1c8      	bne.n	800249c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4b83      	ldr	r3, [pc, #524]	@ (8002724 <HAL_DMA_Init+0x420>)
 8002516:	4013      	ands	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002522:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	4313      	orrs	r3, r2
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b28      	cmp	r3, #40	@ 0x28
 8002566:	d903      	bls.n	8002570 <HAL_DMA_Init+0x26c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b2e      	cmp	r3, #46	@ 0x2e
 800256e:	d91f      	bls.n	80025b0 <HAL_DMA_Init+0x2ac>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b3e      	cmp	r3, #62	@ 0x3e
 8002576:	d903      	bls.n	8002580 <HAL_DMA_Init+0x27c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b42      	cmp	r3, #66	@ 0x42
 800257e:	d917      	bls.n	80025b0 <HAL_DMA_Init+0x2ac>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b46      	cmp	r3, #70	@ 0x46
 8002586:	d903      	bls.n	8002590 <HAL_DMA_Init+0x28c>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b48      	cmp	r3, #72	@ 0x48
 800258e:	d90f      	bls.n	80025b0 <HAL_DMA_Init+0x2ac>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b4e      	cmp	r3, #78	@ 0x4e
 8002596:	d903      	bls.n	80025a0 <HAL_DMA_Init+0x29c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b52      	cmp	r3, #82	@ 0x52
 800259e:	d907      	bls.n	80025b0 <HAL_DMA_Init+0x2ac>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b73      	cmp	r3, #115	@ 0x73
 80025a6:	d905      	bls.n	80025b4 <HAL_DMA_Init+0x2b0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b77      	cmp	r3, #119	@ 0x77
 80025ae:	d801      	bhi.n	80025b4 <HAL_DMA_Init+0x2b0>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_Init+0x2b2>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025c0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f023 0307 	bic.w	r3, r3, #7
 80025d8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d117      	bne.n	800261c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00e      	beq.n	800261c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f001 fbfa 	bl	8003df8 <DMA_CheckFifoParam>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2240      	movs	r2, #64	@ 0x40
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e192      	b.n	8002942 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f001 fb35 	bl	8003c94 <DMA_CalcBaseAndBitshift>
 800262a:	4603      	mov	r3, r0
 800262c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	223f      	movs	r2, #63	@ 0x3f
 8002638:	409a      	lsls	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	e0c8      	b.n	80027d2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a38      	ldr	r2, [pc, #224]	@ (8002728 <HAL_DMA_Init+0x424>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_Init+0x38c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a37      	ldr	r2, [pc, #220]	@ (800272c <HAL_DMA_Init+0x428>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01d      	beq.n	8002690 <HAL_DMA_Init+0x38c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a35      	ldr	r2, [pc, #212]	@ (8002730 <HAL_DMA_Init+0x42c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_Init+0x38c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a34      	ldr	r2, [pc, #208]	@ (8002734 <HAL_DMA_Init+0x430>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_DMA_Init+0x38c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a32      	ldr	r2, [pc, #200]	@ (8002738 <HAL_DMA_Init+0x434>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_DMA_Init+0x38c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a31      	ldr	r2, [pc, #196]	@ (800273c <HAL_DMA_Init+0x438>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_Init+0x38c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2f      	ldr	r2, [pc, #188]	@ (8002740 <HAL_DMA_Init+0x43c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_DMA_Init+0x38c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2e      	ldr	r2, [pc, #184]	@ (8002744 <HAL_DMA_Init+0x440>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Init+0x390>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_DMA_Init+0x392>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8092 	beq.w	80027c0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a21      	ldr	r2, [pc, #132]	@ (8002728 <HAL_DMA_Init+0x424>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d021      	beq.n	80026ea <HAL_DMA_Init+0x3e6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a20      	ldr	r2, [pc, #128]	@ (800272c <HAL_DMA_Init+0x428>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d01c      	beq.n	80026ea <HAL_DMA_Init+0x3e6>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002730 <HAL_DMA_Init+0x42c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d017      	beq.n	80026ea <HAL_DMA_Init+0x3e6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <HAL_DMA_Init+0x430>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d012      	beq.n	80026ea <HAL_DMA_Init+0x3e6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002738 <HAL_DMA_Init+0x434>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_DMA_Init+0x3e6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1a      	ldr	r2, [pc, #104]	@ (800273c <HAL_DMA_Init+0x438>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d008      	beq.n	80026ea <HAL_DMA_Init+0x3e6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a18      	ldr	r2, [pc, #96]	@ (8002740 <HAL_DMA_Init+0x43c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <HAL_DMA_Init+0x3e6>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <HAL_DMA_Init+0x440>)
 80026e8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_DMA_Init+0x444>)
 8002706:	4013      	ands	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b40      	cmp	r3, #64	@ 0x40
 8002710:	d01c      	beq.n	800274c <HAL_DMA_Init+0x448>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b80      	cmp	r3, #128	@ 0x80
 8002718:	d102      	bne.n	8002720 <HAL_DMA_Init+0x41c>
 800271a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800271e:	e016      	b.n	800274e <HAL_DMA_Init+0x44a>
 8002720:	2300      	movs	r3, #0
 8002722:	e014      	b.n	800274e <HAL_DMA_Init+0x44a>
 8002724:	fe10803f 	.word	0xfe10803f
 8002728:	58025408 	.word	0x58025408
 800272c:	5802541c 	.word	0x5802541c
 8002730:	58025430 	.word	0x58025430
 8002734:	58025444 	.word	0x58025444
 8002738:	58025458 	.word	0x58025458
 800273c:	5802546c 	.word	0x5802546c
 8002740:	58025480 	.word	0x58025480
 8002744:	58025494 	.word	0x58025494
 8002748:	fffe000f 	.word	0xfffe000f
 800274c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800275c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800276c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800277c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b6e      	ldr	r3, [pc, #440]	@ (800294c <HAL_DMA_Init+0x648>)
 8002794:	4413      	add	r3, r2
 8002796:	4a6e      	ldr	r2, [pc, #440]	@ (8002950 <HAL_DMA_Init+0x64c>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	009a      	lsls	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f001 fa75 	bl	8003c94 <DMA_CalcBaseAndBitshift>
 80027aa:	4603      	mov	r3, r0
 80027ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2201      	movs	r2, #1
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e008      	b.n	80027d2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	@ 0x40
 80027c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0b7      	b.n	8002942 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002954 <HAL_DMA_Init+0x650>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d072      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002958 <HAL_DMA_Init+0x654>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d06d      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5c      	ldr	r2, [pc, #368]	@ (800295c <HAL_DMA_Init+0x658>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d068      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002960 <HAL_DMA_Init+0x65c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d063      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a59      	ldr	r2, [pc, #356]	@ (8002964 <HAL_DMA_Init+0x660>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d05e      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a57      	ldr	r2, [pc, #348]	@ (8002968 <HAL_DMA_Init+0x664>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d059      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a56      	ldr	r2, [pc, #344]	@ (800296c <HAL_DMA_Init+0x668>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d054      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	@ (8002970 <HAL_DMA_Init+0x66c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d04f      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a53      	ldr	r2, [pc, #332]	@ (8002974 <HAL_DMA_Init+0x670>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04a      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a51      	ldr	r2, [pc, #324]	@ (8002978 <HAL_DMA_Init+0x674>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d045      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a50      	ldr	r2, [pc, #320]	@ (800297c <HAL_DMA_Init+0x678>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4e      	ldr	r2, [pc, #312]	@ (8002980 <HAL_DMA_Init+0x67c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d03b      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4d      	ldr	r2, [pc, #308]	@ (8002984 <HAL_DMA_Init+0x680>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d036      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4b      	ldr	r2, [pc, #300]	@ (8002988 <HAL_DMA_Init+0x684>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4a      	ldr	r2, [pc, #296]	@ (800298c <HAL_DMA_Init+0x688>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d02c      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a48      	ldr	r2, [pc, #288]	@ (8002990 <HAL_DMA_Init+0x68c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d027      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a47      	ldr	r2, [pc, #284]	@ (8002994 <HAL_DMA_Init+0x690>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a45      	ldr	r2, [pc, #276]	@ (8002998 <HAL_DMA_Init+0x694>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01d      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a44      	ldr	r2, [pc, #272]	@ (800299c <HAL_DMA_Init+0x698>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a42      	ldr	r2, [pc, #264]	@ (80029a0 <HAL_DMA_Init+0x69c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a41      	ldr	r2, [pc, #260]	@ (80029a4 <HAL_DMA_Init+0x6a0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3f      	ldr	r2, [pc, #252]	@ (80029a8 <HAL_DMA_Init+0x6a4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3e      	ldr	r2, [pc, #248]	@ (80029ac <HAL_DMA_Init+0x6a8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Init+0x5be>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a3c      	ldr	r2, [pc, #240]	@ (80029b0 <HAL_DMA_Init+0x6ac>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Init+0x5c2>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_DMA_Init+0x5c4>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f001 fb0f 	bl	8003ef0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b80      	cmp	r3, #128	@ 0x80
 80028d8:	d102      	bne.n	80028e0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_DMA_Init+0x61c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b08      	cmp	r3, #8
 8002904:	d80c      	bhi.n	8002920 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f001 fb8c 	bl	8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e008      	b.n	8002932 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	a7fdabf8 	.word	0xa7fdabf8
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	40020010 	.word	0x40020010
 8002958:	40020028 	.word	0x40020028
 800295c:	40020040 	.word	0x40020040
 8002960:	40020058 	.word	0x40020058
 8002964:	40020070 	.word	0x40020070
 8002968:	40020088 	.word	0x40020088
 800296c:	400200a0 	.word	0x400200a0
 8002970:	400200b8 	.word	0x400200b8
 8002974:	40020410 	.word	0x40020410
 8002978:	40020428 	.word	0x40020428
 800297c:	40020440 	.word	0x40020440
 8002980:	40020458 	.word	0x40020458
 8002984:	40020470 	.word	0x40020470
 8002988:	40020488 	.word	0x40020488
 800298c:	400204a0 	.word	0x400204a0
 8002990:	400204b8 	.word	0x400204b8
 8002994:	58025408 	.word	0x58025408
 8002998:	5802541c 	.word	0x5802541c
 800299c:	58025430 	.word	0x58025430
 80029a0:	58025444 	.word	0x58025444
 80029a4:	58025458 	.word	0x58025458
 80029a8:	5802546c 	.word	0x5802546c
 80029ac:	58025480 	.word	0x58025480
 80029b0:	58025494 	.word	0x58025494

080029b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e237      	b.n	8002e36 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d004      	beq.n	80029dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2280      	movs	r2, #128	@ 0x80
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e22c      	b.n	8002e36 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002b54 <HAL_DMA_Abort_IT+0x1a0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d04a      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002b58 <HAL_DMA_Abort_IT+0x1a4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d045      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a59      	ldr	r2, [pc, #356]	@ (8002b5c <HAL_DMA_Abort_IT+0x1a8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d040      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a58      	ldr	r2, [pc, #352]	@ (8002b60 <HAL_DMA_Abort_IT+0x1ac>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d03b      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a56      	ldr	r2, [pc, #344]	@ (8002b64 <HAL_DMA_Abort_IT+0x1b0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d036      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a55      	ldr	r2, [pc, #340]	@ (8002b68 <HAL_DMA_Abort_IT+0x1b4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d031      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a53      	ldr	r2, [pc, #332]	@ (8002b6c <HAL_DMA_Abort_IT+0x1b8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d02c      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a52      	ldr	r2, [pc, #328]	@ (8002b70 <HAL_DMA_Abort_IT+0x1bc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d027      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a50      	ldr	r2, [pc, #320]	@ (8002b74 <HAL_DMA_Abort_IT+0x1c0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d022      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002b78 <HAL_DMA_Abort_IT+0x1c4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d01d      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a4d      	ldr	r2, [pc, #308]	@ (8002b7c <HAL_DMA_Abort_IT+0x1c8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d018      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b80 <HAL_DMA_Abort_IT+0x1cc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d013      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a4a      	ldr	r2, [pc, #296]	@ (8002b84 <HAL_DMA_Abort_IT+0x1d0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00e      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a49      	ldr	r2, [pc, #292]	@ (8002b88 <HAL_DMA_Abort_IT+0x1d4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a47      	ldr	r2, [pc, #284]	@ (8002b8c <HAL_DMA_Abort_IT+0x1d8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xc8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a46      	ldr	r2, [pc, #280]	@ (8002b90 <HAL_DMA_Abort_IT+0x1dc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d101      	bne.n	8002a80 <HAL_DMA_Abort_IT+0xcc>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_DMA_Abort_IT+0xce>
 8002a80:	2300      	movs	r3, #0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8086 	beq.w	8002b94 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2f      	ldr	r2, [pc, #188]	@ (8002b54 <HAL_DMA_Abort_IT+0x1a0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d04a      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002b58 <HAL_DMA_Abort_IT+0x1a4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d045      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8002b5c <HAL_DMA_Abort_IT+0x1a8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d040      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8002b60 <HAL_DMA_Abort_IT+0x1ac>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d03b      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a29      	ldr	r2, [pc, #164]	@ (8002b64 <HAL_DMA_Abort_IT+0x1b0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d036      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a28      	ldr	r2, [pc, #160]	@ (8002b68 <HAL_DMA_Abort_IT+0x1b4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d031      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a26      	ldr	r2, [pc, #152]	@ (8002b6c <HAL_DMA_Abort_IT+0x1b8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02c      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a25      	ldr	r2, [pc, #148]	@ (8002b70 <HAL_DMA_Abort_IT+0x1bc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d027      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a23      	ldr	r2, [pc, #140]	@ (8002b74 <HAL_DMA_Abort_IT+0x1c0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d022      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a22      	ldr	r2, [pc, #136]	@ (8002b78 <HAL_DMA_Abort_IT+0x1c4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d01d      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a20      	ldr	r2, [pc, #128]	@ (8002b7c <HAL_DMA_Abort_IT+0x1c8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d018      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <HAL_DMA_Abort_IT+0x1cc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b84 <HAL_DMA_Abort_IT+0x1d0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00e      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1c      	ldr	r2, [pc, #112]	@ (8002b88 <HAL_DMA_Abort_IT+0x1d4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1a      	ldr	r2, [pc, #104]	@ (8002b8c <HAL_DMA_Abort_IT+0x1d8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x17c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a19      	ldr	r2, [pc, #100]	@ (8002b90 <HAL_DMA_Abort_IT+0x1dc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d108      	bne.n	8002b42 <HAL_DMA_Abort_IT+0x18e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e178      	b.n	8002e34 <HAL_DMA_Abort_IT+0x480>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e16f      	b.n	8002e34 <HAL_DMA_Abort_IT+0x480>
 8002b54:	40020010 	.word	0x40020010
 8002b58:	40020028 	.word	0x40020028
 8002b5c:	40020040 	.word	0x40020040
 8002b60:	40020058 	.word	0x40020058
 8002b64:	40020070 	.word	0x40020070
 8002b68:	40020088 	.word	0x40020088
 8002b6c:	400200a0 	.word	0x400200a0
 8002b70:	400200b8 	.word	0x400200b8
 8002b74:	40020410 	.word	0x40020410
 8002b78:	40020428 	.word	0x40020428
 8002b7c:	40020440 	.word	0x40020440
 8002b80:	40020458 	.word	0x40020458
 8002b84:	40020470 	.word	0x40020470
 8002b88:	40020488 	.word	0x40020488
 8002b8c:	400204a0 	.word	0x400204a0
 8002b90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 020e 	bic.w	r2, r2, #14
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6c      	ldr	r2, [pc, #432]	@ (8002d5c <HAL_DMA_Abort_IT+0x3a8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d04a      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a6b      	ldr	r2, [pc, #428]	@ (8002d60 <HAL_DMA_Abort_IT+0x3ac>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d045      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a69      	ldr	r2, [pc, #420]	@ (8002d64 <HAL_DMA_Abort_IT+0x3b0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d040      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a68      	ldr	r2, [pc, #416]	@ (8002d68 <HAL_DMA_Abort_IT+0x3b4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d03b      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a66      	ldr	r2, [pc, #408]	@ (8002d6c <HAL_DMA_Abort_IT+0x3b8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d036      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a65      	ldr	r2, [pc, #404]	@ (8002d70 <HAL_DMA_Abort_IT+0x3bc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d031      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a63      	ldr	r2, [pc, #396]	@ (8002d74 <HAL_DMA_Abort_IT+0x3c0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d02c      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a62      	ldr	r2, [pc, #392]	@ (8002d78 <HAL_DMA_Abort_IT+0x3c4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d027      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a60      	ldr	r2, [pc, #384]	@ (8002d7c <HAL_DMA_Abort_IT+0x3c8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d022      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5f      	ldr	r2, [pc, #380]	@ (8002d80 <HAL_DMA_Abort_IT+0x3cc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d01d      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d84 <HAL_DMA_Abort_IT+0x3d0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d018      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5c      	ldr	r2, [pc, #368]	@ (8002d88 <HAL_DMA_Abort_IT+0x3d4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5a      	ldr	r2, [pc, #360]	@ (8002d8c <HAL_DMA_Abort_IT+0x3d8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00e      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a59      	ldr	r2, [pc, #356]	@ (8002d90 <HAL_DMA_Abort_IT+0x3dc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a57      	ldr	r2, [pc, #348]	@ (8002d94 <HAL_DMA_Abort_IT+0x3e0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x290>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a56      	ldr	r2, [pc, #344]	@ (8002d98 <HAL_DMA_Abort_IT+0x3e4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d108      	bne.n	8002c56 <HAL_DMA_Abort_IT+0x2a2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e007      	b.n	8002c66 <HAL_DMA_Abort_IT+0x2b2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d5c <HAL_DMA_Abort_IT+0x3a8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d072      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a3a      	ldr	r2, [pc, #232]	@ (8002d60 <HAL_DMA_Abort_IT+0x3ac>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d06d      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a39      	ldr	r2, [pc, #228]	@ (8002d64 <HAL_DMA_Abort_IT+0x3b0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d068      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a37      	ldr	r2, [pc, #220]	@ (8002d68 <HAL_DMA_Abort_IT+0x3b4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d063      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a36      	ldr	r2, [pc, #216]	@ (8002d6c <HAL_DMA_Abort_IT+0x3b8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d05e      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a34      	ldr	r2, [pc, #208]	@ (8002d70 <HAL_DMA_Abort_IT+0x3bc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d059      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a33      	ldr	r2, [pc, #204]	@ (8002d74 <HAL_DMA_Abort_IT+0x3c0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d054      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a31      	ldr	r2, [pc, #196]	@ (8002d78 <HAL_DMA_Abort_IT+0x3c4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d04f      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a30      	ldr	r2, [pc, #192]	@ (8002d7c <HAL_DMA_Abort_IT+0x3c8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d04a      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d80 <HAL_DMA_Abort_IT+0x3cc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d045      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2d      	ldr	r2, [pc, #180]	@ (8002d84 <HAL_DMA_Abort_IT+0x3d0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d040      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8002d88 <HAL_DMA_Abort_IT+0x3d4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d03b      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d8c <HAL_DMA_Abort_IT+0x3d8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d036      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a28      	ldr	r2, [pc, #160]	@ (8002d90 <HAL_DMA_Abort_IT+0x3dc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d031      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a27      	ldr	r2, [pc, #156]	@ (8002d94 <HAL_DMA_Abort_IT+0x3e0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d02c      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a25      	ldr	r2, [pc, #148]	@ (8002d98 <HAL_DMA_Abort_IT+0x3e4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d027      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a24      	ldr	r2, [pc, #144]	@ (8002d9c <HAL_DMA_Abort_IT+0x3e8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a22      	ldr	r2, [pc, #136]	@ (8002da0 <HAL_DMA_Abort_IT+0x3ec>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01d      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a21      	ldr	r2, [pc, #132]	@ (8002da4 <HAL_DMA_Abort_IT+0x3f0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d018      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1f      	ldr	r2, [pc, #124]	@ (8002da8 <HAL_DMA_Abort_IT+0x3f4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1e      	ldr	r2, [pc, #120]	@ (8002dac <HAL_DMA_Abort_IT+0x3f8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002db0 <HAL_DMA_Abort_IT+0x3fc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1b      	ldr	r2, [pc, #108]	@ (8002db4 <HAL_DMA_Abort_IT+0x400>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x3a2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a19      	ldr	r2, [pc, #100]	@ (8002db8 <HAL_DMA_Abort_IT+0x404>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d132      	bne.n	8002dbc <HAL_DMA_Abort_IT+0x408>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e031      	b.n	8002dbe <HAL_DMA_Abort_IT+0x40a>
 8002d5a:	bf00      	nop
 8002d5c:	40020010 	.word	0x40020010
 8002d60:	40020028 	.word	0x40020028
 8002d64:	40020040 	.word	0x40020040
 8002d68:	40020058 	.word	0x40020058
 8002d6c:	40020070 	.word	0x40020070
 8002d70:	40020088 	.word	0x40020088
 8002d74:	400200a0 	.word	0x400200a0
 8002d78:	400200b8 	.word	0x400200b8
 8002d7c:	40020410 	.word	0x40020410
 8002d80:	40020428 	.word	0x40020428
 8002d84:	40020440 	.word	0x40020440
 8002d88:	40020458 	.word	0x40020458
 8002d8c:	40020470 	.word	0x40020470
 8002d90:	40020488 	.word	0x40020488
 8002d94:	400204a0 	.word	0x400204a0
 8002d98:	400204b8 	.word	0x400204b8
 8002d9c:	58025408 	.word	0x58025408
 8002da0:	5802541c 	.word	0x5802541c
 8002da4:	58025430 	.word	0x58025430
 8002da8:	58025444 	.word	0x58025444
 8002dac:	58025458 	.word	0x58025458
 8002db0:	5802546c 	.word	0x5802546c
 8002db4:	58025480 	.word	0x58025480
 8002db8:	58025494 	.word	0x58025494
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2201      	movs	r2, #1
 8002de2:	409a      	lsls	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002df0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00c      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop

08002e40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e4c:	4b67      	ldr	r3, [pc, #412]	@ (8002fec <HAL_DMA_IRQHandler+0x1ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a67      	ldr	r2, [pc, #412]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1b0>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e64:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a5f      	ldr	r2, [pc, #380]	@ (8002ff4 <HAL_DMA_IRQHandler+0x1b4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d04a      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff8 <HAL_DMA_IRQHandler+0x1b8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d045      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ffc <HAL_DMA_IRQHandler+0x1bc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d040      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a5a      	ldr	r2, [pc, #360]	@ (8003000 <HAL_DMA_IRQHandler+0x1c0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d03b      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a59      	ldr	r2, [pc, #356]	@ (8003004 <HAL_DMA_IRQHandler+0x1c4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d036      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	@ (8003008 <HAL_DMA_IRQHandler+0x1c8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d031      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a56      	ldr	r2, [pc, #344]	@ (800300c <HAL_DMA_IRQHandler+0x1cc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d02c      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a54      	ldr	r2, [pc, #336]	@ (8003010 <HAL_DMA_IRQHandler+0x1d0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d027      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a53      	ldr	r2, [pc, #332]	@ (8003014 <HAL_DMA_IRQHandler+0x1d4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d022      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a51      	ldr	r2, [pc, #324]	@ (8003018 <HAL_DMA_IRQHandler+0x1d8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01d      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a50      	ldr	r2, [pc, #320]	@ (800301c <HAL_DMA_IRQHandler+0x1dc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d018      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8003020 <HAL_DMA_IRQHandler+0x1e0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <HAL_DMA_IRQHandler+0x1e4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00e      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8003028 <HAL_DMA_IRQHandler+0x1e8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d009      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a4a      	ldr	r2, [pc, #296]	@ (800302c <HAL_DMA_IRQHandler+0x1ec>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xd2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a48      	ldr	r2, [pc, #288]	@ (8003030 <HAL_DMA_IRQHandler+0x1f0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_DMA_IRQHandler+0xd6>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_DMA_IRQHandler+0xd8>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 842b 	beq.w	8003774 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	2208      	movs	r2, #8
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80a2 	beq.w	8003078 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff4 <HAL_DMA_IRQHandler+0x1b4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d04a      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff8 <HAL_DMA_IRQHandler+0x1b8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d045      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ffc <HAL_DMA_IRQHandler+0x1bc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d040      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2a      	ldr	r2, [pc, #168]	@ (8003000 <HAL_DMA_IRQHandler+0x1c0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d03b      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a28      	ldr	r2, [pc, #160]	@ (8003004 <HAL_DMA_IRQHandler+0x1c4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d036      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a27      	ldr	r2, [pc, #156]	@ (8003008 <HAL_DMA_IRQHandler+0x1c8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d031      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a25      	ldr	r2, [pc, #148]	@ (800300c <HAL_DMA_IRQHandler+0x1cc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02c      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a24      	ldr	r2, [pc, #144]	@ (8003010 <HAL_DMA_IRQHandler+0x1d0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d027      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a22      	ldr	r2, [pc, #136]	@ (8003014 <HAL_DMA_IRQHandler+0x1d4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d022      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a21      	ldr	r2, [pc, #132]	@ (8003018 <HAL_DMA_IRQHandler+0x1d8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d01d      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800301c <HAL_DMA_IRQHandler+0x1dc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d018      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <HAL_DMA_IRQHandler+0x1e0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d013      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003024 <HAL_DMA_IRQHandler+0x1e4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00e      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <HAL_DMA_IRQHandler+0x1e8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	@ (800302c <HAL_DMA_IRQHandler+0x1ec>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x194>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <HAL_DMA_IRQHandler+0x1f0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d12f      	bne.n	8003034 <HAL_DMA_IRQHandler+0x1f4>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf14      	ite	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	2300      	moveq	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	e02e      	b.n	8003048 <HAL_DMA_IRQHandler+0x208>
 8002fea:	bf00      	nop
 8002fec:	240049c0 	.word	0x240049c0
 8002ff0:	1b4e81b5 	.word	0x1b4e81b5
 8002ff4:	40020010 	.word	0x40020010
 8002ff8:	40020028 	.word	0x40020028
 8002ffc:	40020040 	.word	0x40020040
 8003000:	40020058 	.word	0x40020058
 8003004:	40020070 	.word	0x40020070
 8003008:	40020088 	.word	0x40020088
 800300c:	400200a0 	.word	0x400200a0
 8003010:	400200b8 	.word	0x400200b8
 8003014:	40020410 	.word	0x40020410
 8003018:	40020428 	.word	0x40020428
 800301c:	40020440 	.word	0x40020440
 8003020:	40020458 	.word	0x40020458
 8003024:	40020470 	.word	0x40020470
 8003028:	40020488 	.word	0x40020488
 800302c:	400204a0 	.word	0x400204a0
 8003030:	400204b8 	.word	0x400204b8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d015      	beq.n	8003078 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0204 	bic.w	r2, r2, #4
 800305a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2208      	movs	r2, #8
 8003066:	409a      	lsls	r2, r3
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d06e      	beq.n	800316c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a69      	ldr	r2, [pc, #420]	@ (8003238 <HAL_DMA_IRQHandler+0x3f8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d04a      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a67      	ldr	r2, [pc, #412]	@ (800323c <HAL_DMA_IRQHandler+0x3fc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d045      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a66      	ldr	r2, [pc, #408]	@ (8003240 <HAL_DMA_IRQHandler+0x400>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d040      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a64      	ldr	r2, [pc, #400]	@ (8003244 <HAL_DMA_IRQHandler+0x404>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d03b      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a63      	ldr	r2, [pc, #396]	@ (8003248 <HAL_DMA_IRQHandler+0x408>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d036      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a61      	ldr	r2, [pc, #388]	@ (800324c <HAL_DMA_IRQHandler+0x40c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d031      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a60      	ldr	r2, [pc, #384]	@ (8003250 <HAL_DMA_IRQHandler+0x410>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d02c      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5e      	ldr	r2, [pc, #376]	@ (8003254 <HAL_DMA_IRQHandler+0x414>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d027      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a5d      	ldr	r2, [pc, #372]	@ (8003258 <HAL_DMA_IRQHandler+0x418>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d022      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a5b      	ldr	r2, [pc, #364]	@ (800325c <HAL_DMA_IRQHandler+0x41c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01d      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003260 <HAL_DMA_IRQHandler+0x420>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d018      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_DMA_IRQHandler+0x424>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a57      	ldr	r2, [pc, #348]	@ (8003268 <HAL_DMA_IRQHandler+0x428>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00e      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a55      	ldr	r2, [pc, #340]	@ (800326c <HAL_DMA_IRQHandler+0x42c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a54      	ldr	r2, [pc, #336]	@ (8003270 <HAL_DMA_IRQHandler+0x430>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d004      	beq.n	800312e <HAL_DMA_IRQHandler+0x2ee>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a52      	ldr	r2, [pc, #328]	@ (8003274 <HAL_DMA_IRQHandler+0x434>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10a      	bne.n	8003144 <HAL_DMA_IRQHandler+0x304>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e003      	b.n	800314c <HAL_DMA_IRQHandler+0x30c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	2201      	movs	r2, #1
 800315a:	409a      	lsls	r2, r3
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	f043 0202 	orr.w	r2, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2204      	movs	r2, #4
 8003176:	409a      	lsls	r2, r3
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 808f 	beq.w	80032a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2c      	ldr	r2, [pc, #176]	@ (8003238 <HAL_DMA_IRQHandler+0x3f8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d04a      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2a      	ldr	r2, [pc, #168]	@ (800323c <HAL_DMA_IRQHandler+0x3fc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d045      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a29      	ldr	r2, [pc, #164]	@ (8003240 <HAL_DMA_IRQHandler+0x400>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d040      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a27      	ldr	r2, [pc, #156]	@ (8003244 <HAL_DMA_IRQHandler+0x404>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d03b      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a26      	ldr	r2, [pc, #152]	@ (8003248 <HAL_DMA_IRQHandler+0x408>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d036      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a24      	ldr	r2, [pc, #144]	@ (800324c <HAL_DMA_IRQHandler+0x40c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d031      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a23      	ldr	r2, [pc, #140]	@ (8003250 <HAL_DMA_IRQHandler+0x410>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d02c      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <HAL_DMA_IRQHandler+0x414>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d027      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a20      	ldr	r2, [pc, #128]	@ (8003258 <HAL_DMA_IRQHandler+0x418>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d022      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1e      	ldr	r2, [pc, #120]	@ (800325c <HAL_DMA_IRQHandler+0x41c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01d      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003260 <HAL_DMA_IRQHandler+0x420>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d018      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003264 <HAL_DMA_IRQHandler+0x424>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003268 <HAL_DMA_IRQHandler+0x428>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a18      	ldr	r2, [pc, #96]	@ (800326c <HAL_DMA_IRQHandler+0x42c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a17      	ldr	r2, [pc, #92]	@ (8003270 <HAL_DMA_IRQHandler+0x430>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_DMA_IRQHandler+0x3e2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a15      	ldr	r2, [pc, #84]	@ (8003274 <HAL_DMA_IRQHandler+0x434>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d12a      	bne.n	8003278 <HAL_DMA_IRQHandler+0x438>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e023      	b.n	8003280 <HAL_DMA_IRQHandler+0x440>
 8003238:	40020010 	.word	0x40020010
 800323c:	40020028 	.word	0x40020028
 8003240:	40020040 	.word	0x40020040
 8003244:	40020058 	.word	0x40020058
 8003248:	40020070 	.word	0x40020070
 800324c:	40020088 	.word	0x40020088
 8003250:	400200a0 	.word	0x400200a0
 8003254:	400200b8 	.word	0x400200b8
 8003258:	40020410 	.word	0x40020410
 800325c:	40020428 	.word	0x40020428
 8003260:	40020440 	.word	0x40020440
 8003264:	40020458 	.word	0x40020458
 8003268:	40020470 	.word	0x40020470
 800326c:	40020488 	.word	0x40020488
 8003270:	400204a0 	.word	0x400204a0
 8003274:	400204b8 	.word	0x400204b8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00d      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2204      	movs	r2, #4
 800328e:	409a      	lsls	r2, r3
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003298:	f043 0204 	orr.w	r2, r3, #4
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2210      	movs	r2, #16
 80032aa:	409a      	lsls	r2, r3
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80a6 	beq.w	8003402 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a85      	ldr	r2, [pc, #532]	@ (80034d0 <HAL_DMA_IRQHandler+0x690>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d04a      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a83      	ldr	r2, [pc, #524]	@ (80034d4 <HAL_DMA_IRQHandler+0x694>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d045      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a82      	ldr	r2, [pc, #520]	@ (80034d8 <HAL_DMA_IRQHandler+0x698>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d040      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a80      	ldr	r2, [pc, #512]	@ (80034dc <HAL_DMA_IRQHandler+0x69c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d03b      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7f      	ldr	r2, [pc, #508]	@ (80034e0 <HAL_DMA_IRQHandler+0x6a0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d036      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a7d      	ldr	r2, [pc, #500]	@ (80034e4 <HAL_DMA_IRQHandler+0x6a4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a7c      	ldr	r2, [pc, #496]	@ (80034e8 <HAL_DMA_IRQHandler+0x6a8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d02c      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a7a      	ldr	r2, [pc, #488]	@ (80034ec <HAL_DMA_IRQHandler+0x6ac>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d027      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a79      	ldr	r2, [pc, #484]	@ (80034f0 <HAL_DMA_IRQHandler+0x6b0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a77      	ldr	r2, [pc, #476]	@ (80034f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01d      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a76      	ldr	r2, [pc, #472]	@ (80034f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d018      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a74      	ldr	r2, [pc, #464]	@ (80034fc <HAL_DMA_IRQHandler+0x6bc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a73      	ldr	r2, [pc, #460]	@ (8003500 <HAL_DMA_IRQHandler+0x6c0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a71      	ldr	r2, [pc, #452]	@ (8003504 <HAL_DMA_IRQHandler+0x6c4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a70      	ldr	r2, [pc, #448]	@ (8003508 <HAL_DMA_IRQHandler+0x6c8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_DMA_IRQHandler+0x516>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6e      	ldr	r2, [pc, #440]	@ (800350c <HAL_DMA_IRQHandler+0x6cc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10a      	bne.n	800336c <HAL_DMA_IRQHandler+0x52c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e009      	b.n	8003380 <HAL_DMA_IRQHandler+0x540>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d03e      	beq.n	8003402 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2210      	movs	r2, #16
 800338e:	409a      	lsls	r2, r3
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d018      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d108      	bne.n	80033c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d024      	beq.n	8003402 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e01f      	b.n	8003402 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01b      	beq.n	8003402 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
 80033d2:	e016      	b.n	8003402 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0208 	bic.w	r2, r2, #8
 80033f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	2220      	movs	r2, #32
 800340c:	409a      	lsls	r2, r3
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8110 	beq.w	8003638 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <HAL_DMA_IRQHandler+0x690>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d04a      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2b      	ldr	r2, [pc, #172]	@ (80034d4 <HAL_DMA_IRQHandler+0x694>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d045      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <HAL_DMA_IRQHandler+0x698>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d040      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a28      	ldr	r2, [pc, #160]	@ (80034dc <HAL_DMA_IRQHandler+0x69c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d03b      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a26      	ldr	r2, [pc, #152]	@ (80034e0 <HAL_DMA_IRQHandler+0x6a0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d036      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a25      	ldr	r2, [pc, #148]	@ (80034e4 <HAL_DMA_IRQHandler+0x6a4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d031      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a23      	ldr	r2, [pc, #140]	@ (80034e8 <HAL_DMA_IRQHandler+0x6a8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d02c      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a22      	ldr	r2, [pc, #136]	@ (80034ec <HAL_DMA_IRQHandler+0x6ac>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d027      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <HAL_DMA_IRQHandler+0x6b0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d022      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1f      	ldr	r2, [pc, #124]	@ (80034f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d01d      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d018      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1c      	ldr	r2, [pc, #112]	@ (80034fc <HAL_DMA_IRQHandler+0x6bc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d013      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1a      	ldr	r2, [pc, #104]	@ (8003500 <HAL_DMA_IRQHandler+0x6c0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00e      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a19      	ldr	r2, [pc, #100]	@ (8003504 <HAL_DMA_IRQHandler+0x6c4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d009      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a17      	ldr	r2, [pc, #92]	@ (8003508 <HAL_DMA_IRQHandler+0x6c8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x678>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a16      	ldr	r2, [pc, #88]	@ (800350c <HAL_DMA_IRQHandler+0x6cc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d12b      	bne.n	8003510 <HAL_DMA_IRQHandler+0x6d0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf14      	ite	ne
 80034c6:	2301      	movne	r3, #1
 80034c8:	2300      	moveq	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e02a      	b.n	8003524 <HAL_DMA_IRQHandler+0x6e4>
 80034ce:	bf00      	nop
 80034d0:	40020010 	.word	0x40020010
 80034d4:	40020028 	.word	0x40020028
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40020058 	.word	0x40020058
 80034e0:	40020070 	.word	0x40020070
 80034e4:	40020088 	.word	0x40020088
 80034e8:	400200a0 	.word	0x400200a0
 80034ec:	400200b8 	.word	0x400200b8
 80034f0:	40020410 	.word	0x40020410
 80034f4:	40020428 	.word	0x40020428
 80034f8:	40020440 	.word	0x40020440
 80034fc:	40020458 	.word	0x40020458
 8003500:	40020470 	.word	0x40020470
 8003504:	40020488 	.word	0x40020488
 8003508:	400204a0 	.word	0x400204a0
 800350c:	400204b8 	.word	0x400204b8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8087 	beq.w	8003638 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2220      	movs	r2, #32
 8003534:	409a      	lsls	r2, r3
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b04      	cmp	r3, #4
 8003544:	d139      	bne.n	80035ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0216 	bic.w	r2, r2, #22
 8003554:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003564:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <HAL_DMA_IRQHandler+0x736>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0208 	bic.w	r2, r2, #8
 8003584:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	223f      	movs	r2, #63	@ 0x3f
 8003590:	409a      	lsls	r2, r3
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 834a 	beq.w	8003c44 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
          }
          return;
 80035b8:	e344      	b.n	8003c44 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d018      	beq.n	80035fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02c      	beq.n	8003638 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
 80035e6:	e027      	b.n	8003638 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d023      	beq.n	8003638 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
 80035f8:	e01e      	b.n	8003638 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10f      	bne.n	8003628 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0210 	bic.w	r2, r2, #16
 8003616:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8306 	beq.w	8003c4e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8088 	beq.w	8003760 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2204      	movs	r2, #4
 8003654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a7a      	ldr	r2, [pc, #488]	@ (8003848 <HAL_DMA_IRQHandler+0xa08>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d04a      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a79      	ldr	r2, [pc, #484]	@ (800384c <HAL_DMA_IRQHandler+0xa0c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d045      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a77      	ldr	r2, [pc, #476]	@ (8003850 <HAL_DMA_IRQHandler+0xa10>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d040      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a76      	ldr	r2, [pc, #472]	@ (8003854 <HAL_DMA_IRQHandler+0xa14>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d03b      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a74      	ldr	r2, [pc, #464]	@ (8003858 <HAL_DMA_IRQHandler+0xa18>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d036      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a73      	ldr	r2, [pc, #460]	@ (800385c <HAL_DMA_IRQHandler+0xa1c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d031      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a71      	ldr	r2, [pc, #452]	@ (8003860 <HAL_DMA_IRQHandler+0xa20>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d02c      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a70      	ldr	r2, [pc, #448]	@ (8003864 <HAL_DMA_IRQHandler+0xa24>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d027      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003868 <HAL_DMA_IRQHandler+0xa28>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d022      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a6d      	ldr	r2, [pc, #436]	@ (800386c <HAL_DMA_IRQHandler+0xa2c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d01d      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003870 <HAL_DMA_IRQHandler+0xa30>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d018      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003874 <HAL_DMA_IRQHandler+0xa34>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a68      	ldr	r2, [pc, #416]	@ (8003878 <HAL_DMA_IRQHandler+0xa38>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00e      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a67      	ldr	r2, [pc, #412]	@ (800387c <HAL_DMA_IRQHandler+0xa3c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a65      	ldr	r2, [pc, #404]	@ (8003880 <HAL_DMA_IRQHandler+0xa40>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x8b8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a64      	ldr	r2, [pc, #400]	@ (8003884 <HAL_DMA_IRQHandler+0xa44>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d108      	bne.n	800370a <HAL_DMA_IRQHandler+0x8ca>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e007      	b.n	800371a <HAL_DMA_IRQHandler+0x8da>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003722:	429a      	cmp	r2, r3
 8003724:	d307      	bcc.n	8003736 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f2      	bne.n	800371a <HAL_DMA_IRQHandler+0x8da>
 8003734:	e000      	b.n	8003738 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003736:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2203      	movs	r2, #3
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800374e:	e003      	b.n	8003758 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8272 	beq.w	8003c4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e26c      	b.n	8003c4e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a43      	ldr	r2, [pc, #268]	@ (8003888 <HAL_DMA_IRQHandler+0xa48>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x984>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a42      	ldr	r2, [pc, #264]	@ (800388c <HAL_DMA_IRQHandler+0xa4c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d01d      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x984>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a40      	ldr	r2, [pc, #256]	@ (8003890 <HAL_DMA_IRQHandler+0xa50>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x984>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a3f      	ldr	r2, [pc, #252]	@ (8003894 <HAL_DMA_IRQHandler+0xa54>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x984>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003898 <HAL_DMA_IRQHandler+0xa58>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x984>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a3c      	ldr	r2, [pc, #240]	@ (800389c <HAL_DMA_IRQHandler+0xa5c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x984>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a3a      	ldr	r2, [pc, #232]	@ (80038a0 <HAL_DMA_IRQHandler+0xa60>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x984>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a39      	ldr	r2, [pc, #228]	@ (80038a4 <HAL_DMA_IRQHandler+0xa64>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_DMA_IRQHandler+0x988>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_DMA_IRQHandler+0x98a>
 80037c8:	2300      	movs	r3, #0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 823f 	beq.w	8003c4e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	2204      	movs	r2, #4
 80037e2:	409a      	lsls	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80cd 	beq.w	8003988 <HAL_DMA_IRQHandler+0xb48>
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80c7 	beq.w	8003988 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2204      	movs	r2, #4
 8003804:	409a      	lsls	r2, r3
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d049      	beq.n	80038a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8210 	beq.w	8003c48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003830:	e20a      	b.n	8003c48 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8206 	beq.w	8003c48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003844:	e200      	b.n	8003c48 <HAL_DMA_IRQHandler+0xe08>
 8003846:	bf00      	nop
 8003848:	40020010 	.word	0x40020010
 800384c:	40020028 	.word	0x40020028
 8003850:	40020040 	.word	0x40020040
 8003854:	40020058 	.word	0x40020058
 8003858:	40020070 	.word	0x40020070
 800385c:	40020088 	.word	0x40020088
 8003860:	400200a0 	.word	0x400200a0
 8003864:	400200b8 	.word	0x400200b8
 8003868:	40020410 	.word	0x40020410
 800386c:	40020428 	.word	0x40020428
 8003870:	40020440 	.word	0x40020440
 8003874:	40020458 	.word	0x40020458
 8003878:	40020470 	.word	0x40020470
 800387c:	40020488 	.word	0x40020488
 8003880:	400204a0 	.word	0x400204a0
 8003884:	400204b8 	.word	0x400204b8
 8003888:	58025408 	.word	0x58025408
 800388c:	5802541c 	.word	0x5802541c
 8003890:	58025430 	.word	0x58025430
 8003894:	58025444 	.word	0x58025444
 8003898:	58025458 	.word	0x58025458
 800389c:	5802546c 	.word	0x5802546c
 80038a0:	58025480 	.word	0x58025480
 80038a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d160      	bne.n	8003974 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ab4 <HAL_DMA_IRQHandler+0xc74>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d04a      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a7d      	ldr	r2, [pc, #500]	@ (8003ab8 <HAL_DMA_IRQHandler+0xc78>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d045      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7c      	ldr	r2, [pc, #496]	@ (8003abc <HAL_DMA_IRQHandler+0xc7c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d040      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7a      	ldr	r2, [pc, #488]	@ (8003ac0 <HAL_DMA_IRQHandler+0xc80>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d03b      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a79      	ldr	r2, [pc, #484]	@ (8003ac4 <HAL_DMA_IRQHandler+0xc84>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d036      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a77      	ldr	r2, [pc, #476]	@ (8003ac8 <HAL_DMA_IRQHandler+0xc88>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d031      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a76      	ldr	r2, [pc, #472]	@ (8003acc <HAL_DMA_IRQHandler+0xc8c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d02c      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a74      	ldr	r2, [pc, #464]	@ (8003ad0 <HAL_DMA_IRQHandler+0xc90>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d027      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a73      	ldr	r2, [pc, #460]	@ (8003ad4 <HAL_DMA_IRQHandler+0xc94>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a71      	ldr	r2, [pc, #452]	@ (8003ad8 <HAL_DMA_IRQHandler+0xc98>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01d      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a70      	ldr	r2, [pc, #448]	@ (8003adc <HAL_DMA_IRQHandler+0xc9c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d018      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae0 <HAL_DMA_IRQHandler+0xca0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a6d      	ldr	r2, [pc, #436]	@ (8003ae4 <HAL_DMA_IRQHandler+0xca4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a6b      	ldr	r2, [pc, #428]	@ (8003ae8 <HAL_DMA_IRQHandler+0xca8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d009      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6a      	ldr	r2, [pc, #424]	@ (8003aec <HAL_DMA_IRQHandler+0xcac>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_DMA_IRQHandler+0xb12>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a68      	ldr	r2, [pc, #416]	@ (8003af0 <HAL_DMA_IRQHandler+0xcb0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d108      	bne.n	8003964 <HAL_DMA_IRQHandler+0xb24>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0208 	bic.w	r2, r2, #8
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e007      	b.n	8003974 <HAL_DMA_IRQHandler+0xb34>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8165 	beq.w	8003c48 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003986:	e15f      	b.n	8003c48 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	2202      	movs	r2, #2
 8003992:	409a      	lsls	r2, r3
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80c5 	beq.w	8003b28 <HAL_DMA_IRQHandler+0xce8>
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80bf 	beq.w	8003b28 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2202      	movs	r2, #2
 80039b4:	409a      	lsls	r2, r3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d018      	beq.n	80039f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 813a 	beq.w	8003c4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e0:	e134      	b.n	8003c4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8130 	beq.w	8003c4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f4:	e12a      	b.n	8003c4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f040 8089 	bne.w	8003b14 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab4 <HAL_DMA_IRQHandler+0xc74>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d04a      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a29      	ldr	r2, [pc, #164]	@ (8003ab8 <HAL_DMA_IRQHandler+0xc78>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d045      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a28      	ldr	r2, [pc, #160]	@ (8003abc <HAL_DMA_IRQHandler+0xc7c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d040      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a26      	ldr	r2, [pc, #152]	@ (8003ac0 <HAL_DMA_IRQHandler+0xc80>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d03b      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a25      	ldr	r2, [pc, #148]	@ (8003ac4 <HAL_DMA_IRQHandler+0xc84>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d036      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a23      	ldr	r2, [pc, #140]	@ (8003ac8 <HAL_DMA_IRQHandler+0xc88>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d031      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a22      	ldr	r2, [pc, #136]	@ (8003acc <HAL_DMA_IRQHandler+0xc8c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d02c      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a20      	ldr	r2, [pc, #128]	@ (8003ad0 <HAL_DMA_IRQHandler+0xc90>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d027      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad4 <HAL_DMA_IRQHandler+0xc94>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d022      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <HAL_DMA_IRQHandler+0xc98>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01d      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003adc <HAL_DMA_IRQHandler+0xc9c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d018      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae0 <HAL_DMA_IRQHandler+0xca0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a19      	ldr	r2, [pc, #100]	@ (8003ae4 <HAL_DMA_IRQHandler+0xca4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a17      	ldr	r2, [pc, #92]	@ (8003ae8 <HAL_DMA_IRQHandler+0xca8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a16      	ldr	r2, [pc, #88]	@ (8003aec <HAL_DMA_IRQHandler+0xcac>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xc62>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	@ (8003af0 <HAL_DMA_IRQHandler+0xcb0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d128      	bne.n	8003af4 <HAL_DMA_IRQHandler+0xcb4>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0214 	bic.w	r2, r2, #20
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e027      	b.n	8003b04 <HAL_DMA_IRQHandler+0xcc4>
 8003ab4:	40020010 	.word	0x40020010
 8003ab8:	40020028 	.word	0x40020028
 8003abc:	40020040 	.word	0x40020040
 8003ac0:	40020058 	.word	0x40020058
 8003ac4:	40020070 	.word	0x40020070
 8003ac8:	40020088 	.word	0x40020088
 8003acc:	400200a0 	.word	0x400200a0
 8003ad0:	400200b8 	.word	0x400200b8
 8003ad4:	40020410 	.word	0x40020410
 8003ad8:	40020428 	.word	0x40020428
 8003adc:	40020440 	.word	0x40020440
 8003ae0:	40020458 	.word	0x40020458
 8003ae4:	40020470 	.word	0x40020470
 8003ae8:	40020488 	.word	0x40020488
 8003aec:	400204a0 	.word	0x400204a0
 8003af0:	400204b8 	.word	0x400204b8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 020a 	bic.w	r2, r2, #10
 8003b02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8097 	beq.w	8003c4c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b26:	e091      	b.n	8003c4c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2208      	movs	r2, #8
 8003b32:	409a      	lsls	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8088 	beq.w	8003c4e <HAL_DMA_IRQHandler+0xe0e>
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8082 	beq.w	8003c4e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a41      	ldr	r2, [pc, #260]	@ (8003c54 <HAL_DMA_IRQHandler+0xe14>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d04a      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a3f      	ldr	r2, [pc, #252]	@ (8003c58 <HAL_DMA_IRQHandler+0xe18>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d045      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a3e      	ldr	r2, [pc, #248]	@ (8003c5c <HAL_DMA_IRQHandler+0xe1c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d040      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c60 <HAL_DMA_IRQHandler+0xe20>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d03b      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	@ (8003c64 <HAL_DMA_IRQHandler+0xe24>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d036      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a39      	ldr	r2, [pc, #228]	@ (8003c68 <HAL_DMA_IRQHandler+0xe28>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d031      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a38      	ldr	r2, [pc, #224]	@ (8003c6c <HAL_DMA_IRQHandler+0xe2c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d02c      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a36      	ldr	r2, [pc, #216]	@ (8003c70 <HAL_DMA_IRQHandler+0xe30>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d027      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a35      	ldr	r2, [pc, #212]	@ (8003c74 <HAL_DMA_IRQHandler+0xe34>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d022      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a33      	ldr	r2, [pc, #204]	@ (8003c78 <HAL_DMA_IRQHandler+0xe38>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d01d      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a32      	ldr	r2, [pc, #200]	@ (8003c7c <HAL_DMA_IRQHandler+0xe3c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d018      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a30      	ldr	r2, [pc, #192]	@ (8003c80 <HAL_DMA_IRQHandler+0xe40>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8003c84 <HAL_DMA_IRQHandler+0xe44>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c88 <HAL_DMA_IRQHandler+0xe48>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <HAL_DMA_IRQHandler+0xe4c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_DMA_IRQHandler+0xdaa>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c90 <HAL_DMA_IRQHandler+0xe50>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d108      	bne.n	8003bfc <HAL_DMA_IRQHandler+0xdbc>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 021c 	bic.w	r2, r2, #28
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e007      	b.n	8003c0c <HAL_DMA_IRQHandler+0xdcc>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 020e 	bic.w	r2, r2, #14
 8003c0a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2201      	movs	r2, #1
 8003c16:	409a      	lsls	r2, r3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
 8003c42:	e004      	b.n	8003c4e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c44:	bf00      	nop
 8003c46:	e002      	b.n	8003c4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c48:	bf00      	nop
 8003c4a:	e000      	b.n	8003c4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c4c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c4e:	3728      	adds	r7, #40	@ 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8

08003c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a42      	ldr	r2, [pc, #264]	@ (8003dac <DMA_CalcBaseAndBitshift+0x118>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d04a      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a41      	ldr	r2, [pc, #260]	@ (8003db0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d045      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a3f      	ldr	r2, [pc, #252]	@ (8003db4 <DMA_CalcBaseAndBitshift+0x120>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d040      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a3e      	ldr	r2, [pc, #248]	@ (8003db8 <DMA_CalcBaseAndBitshift+0x124>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d03b      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8003dbc <DMA_CalcBaseAndBitshift+0x128>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d036      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8003dc0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d031      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a39      	ldr	r2, [pc, #228]	@ (8003dc4 <DMA_CalcBaseAndBitshift+0x130>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d02c      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a38      	ldr	r2, [pc, #224]	@ (8003dc8 <DMA_CalcBaseAndBitshift+0x134>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d027      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a36      	ldr	r2, [pc, #216]	@ (8003dcc <DMA_CalcBaseAndBitshift+0x138>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d022      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a35      	ldr	r2, [pc, #212]	@ (8003dd0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d01d      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a33      	ldr	r2, [pc, #204]	@ (8003dd4 <DMA_CalcBaseAndBitshift+0x140>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d018      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a32      	ldr	r2, [pc, #200]	@ (8003dd8 <DMA_CalcBaseAndBitshift+0x144>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d013      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a30      	ldr	r2, [pc, #192]	@ (8003ddc <DMA_CalcBaseAndBitshift+0x148>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00e      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2f      	ldr	r2, [pc, #188]	@ (8003de0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d009      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003de4 <DMA_CalcBaseAndBitshift+0x150>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <DMA_CalcBaseAndBitshift+0xa8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2c      	ldr	r2, [pc, #176]	@ (8003de8 <DMA_CalcBaseAndBitshift+0x154>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d101      	bne.n	8003d40 <DMA_CalcBaseAndBitshift+0xac>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <DMA_CalcBaseAndBitshift+0xae>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d024      	beq.n	8003d90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3b10      	subs	r3, #16
 8003d4e:	4a27      	ldr	r2, [pc, #156]	@ (8003dec <DMA_CalcBaseAndBitshift+0x158>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	4a24      	ldr	r2, [pc, #144]	@ (8003df0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d60:	5cd3      	ldrb	r3, [r2, r3]
 8003d62:	461a      	mov	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d908      	bls.n	8003d80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b1f      	ldr	r3, [pc, #124]	@ (8003df4 <DMA_CalcBaseAndBitshift+0x160>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	1d1a      	adds	r2, r3, #4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d7e:	e00d      	b.n	8003d9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b1b      	ldr	r3, [pc, #108]	@ (8003df4 <DMA_CalcBaseAndBitshift+0x160>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d8e:	e005      	b.n	8003d9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40020010 	.word	0x40020010
 8003db0:	40020028 	.word	0x40020028
 8003db4:	40020040 	.word	0x40020040
 8003db8:	40020058 	.word	0x40020058
 8003dbc:	40020070 	.word	0x40020070
 8003dc0:	40020088 	.word	0x40020088
 8003dc4:	400200a0 	.word	0x400200a0
 8003dc8:	400200b8 	.word	0x400200b8
 8003dcc:	40020410 	.word	0x40020410
 8003dd0:	40020428 	.word	0x40020428
 8003dd4:	40020440 	.word	0x40020440
 8003dd8:	40020458 	.word	0x40020458
 8003ddc:	40020470 	.word	0x40020470
 8003de0:	40020488 	.word	0x40020488
 8003de4:	400204a0 	.word	0x400204a0
 8003de8:	400204b8 	.word	0x400204b8
 8003dec:	aaaaaaab 	.word	0xaaaaaaab
 8003df0:	0801e8dc 	.word	0x0801e8dc
 8003df4:	fffffc00 	.word	0xfffffc00

08003df8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d120      	bne.n	8003e4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d858      	bhi.n	8003ec6 <DMA_CheckFifoParam+0xce>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <DMA_CheckFifoParam+0x24>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e2d 	.word	0x08003e2d
 8003e20:	08003e3f 	.word	0x08003e3f
 8003e24:	08003e2d 	.word	0x08003e2d
 8003e28:	08003ec7 	.word	0x08003ec7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d048      	beq.n	8003eca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e3c:	e045      	b.n	8003eca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e46:	d142      	bne.n	8003ece <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e4c:	e03f      	b.n	8003ece <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e56:	d123      	bne.n	8003ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d838      	bhi.n	8003ed2 <DMA_CheckFifoParam+0xda>
 8003e60:	a201      	add	r2, pc, #4	@ (adr r2, 8003e68 <DMA_CheckFifoParam+0x70>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e7f 	.word	0x08003e7f
 8003e70:	08003e79 	.word	0x08003e79
 8003e74:	08003e91 	.word	0x08003e91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e7c:	e030      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d025      	beq.n	8003ed6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e8e:	e022      	b.n	8003ed6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e98:	d11f      	bne.n	8003eda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e9e:	e01c      	b.n	8003eda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d902      	bls.n	8003eae <DMA_CheckFifoParam+0xb6>
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d003      	beq.n	8003eb4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003eac:	e018      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8003eb2:	e015      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00e      	beq.n	8003ede <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ec4:	e00b      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e00a      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e008      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e006      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e004      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
        break;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
    break;
 8003ede:	bf00      	nop
    }
  }

  return status;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop

08003ef0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a38      	ldr	r2, [pc, #224]	@ (8003fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a36      	ldr	r2, [pc, #216]	@ (8003fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a35      	ldr	r2, [pc, #212]	@ (8003fec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a33      	ldr	r2, [pc, #204]	@ (8003ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a32      	ldr	r2, [pc, #200]	@ (8003ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a30      	ldr	r2, [pc, #192]	@ (8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2d      	ldr	r2, [pc, #180]	@ (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01a      	beq.n	8003f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	3b08      	subs	r3, #8
 8003f60:	4a28      	ldr	r2, [pc, #160]	@ (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	461a      	mov	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a24      	ldr	r2, [pc, #144]	@ (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f7c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2201      	movs	r2, #1
 8003f86:	409a      	lsls	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f8c:	e024      	b.n	8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3b10      	subs	r3, #16
 8003f96:	4a1e      	ldr	r2, [pc, #120]	@ (8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8004014 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d806      	bhi.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4a1b      	ldr	r2, [pc, #108]	@ (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d902      	bls.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4b18      	ldr	r3, [pc, #96]	@ (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a16      	ldr	r2, [pc, #88]	@ (8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003fc8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	58025408 	.word	0x58025408
 8003fe8:	5802541c 	.word	0x5802541c
 8003fec:	58025430 	.word	0x58025430
 8003ff0:	58025444 	.word	0x58025444
 8003ff4:	58025458 	.word	0x58025458
 8003ff8:	5802546c 	.word	0x5802546c
 8003ffc:	58025480 	.word	0x58025480
 8004000:	58025494 	.word	0x58025494
 8004004:	cccccccd 	.word	0xcccccccd
 8004008:	16009600 	.word	0x16009600
 800400c:	58025880 	.word	0x58025880
 8004010:	aaaaaaab 	.word	0xaaaaaaab
 8004014:	400204b8 	.word	0x400204b8
 8004018:	4002040f 	.word	0x4002040f
 800401c:	10008200 	.word	0x10008200
 8004020:	40020880 	.word	0x40020880

08004024 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d04a      	beq.n	80040d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d847      	bhi.n	80040d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a25      	ldr	r2, [pc, #148]	@ (80040dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a24      	ldr	r2, [pc, #144]	@ (80040e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d01d      	beq.n	8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a22      	ldr	r2, [pc, #136]	@ (80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a21      	ldr	r2, [pc, #132]	@ (80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1f      	ldr	r2, [pc, #124]	@ (80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1e      	ldr	r2, [pc, #120]	@ (80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1c      	ldr	r2, [pc, #112]	@ (80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1b      	ldr	r2, [pc, #108]	@ (80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004094:	2300      	movs	r3, #0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4b17      	ldr	r3, [pc, #92]	@ (80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a15      	ldr	r2, [pc, #84]	@ (8004100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80040ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80040ae:	e009      	b.n	80040c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4b14      	ldr	r3, [pc, #80]	@ (8004104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	461a      	mov	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a11      	ldr	r2, [pc, #68]	@ (8004108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80040c2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	58025408 	.word	0x58025408
 80040e0:	5802541c 	.word	0x5802541c
 80040e4:	58025430 	.word	0x58025430
 80040e8:	58025444 	.word	0x58025444
 80040ec:	58025458 	.word	0x58025458
 80040f0:	5802546c 	.word	0x5802546c
 80040f4:	58025480 	.word	0x58025480
 80040f8:	58025494 	.word	0x58025494
 80040fc:	1600963f 	.word	0x1600963f
 8004100:	58025940 	.word	0x58025940
 8004104:	1000823f 	.word	0x1000823f
 8004108:	40020940 	.word	0x40020940

0800410c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0e3      	b.n	80042e6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f007 fd71 	bl	800bc18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004136:	4b6e      	ldr	r3, [pc, #440]	@ (80042f0 <HAL_ETH_Init+0x1e4>)
 8004138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800413c:	4a6c      	ldr	r2, [pc, #432]	@ (80042f0 <HAL_ETH_Init+0x1e4>)
 800413e:	f043 0302 	orr.w	r3, r3, #2
 8004142:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004146:	4b6a      	ldr	r3, [pc, #424]	@ (80042f0 <HAL_ETH_Init+0x1e4>)
 8004148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	7a1b      	ldrb	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d103      	bne.n	8004164 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800415c:	2000      	movs	r0, #0
 800415e:	f7fd ff65 	bl	800202c <HAL_SYSCFG_ETHInterfaceSelect>
 8004162:	e003      	b.n	800416c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004164:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004168:	f7fd ff60 	bl	800202c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800416c:	4b61      	ldr	r3, [pc, #388]	@ (80042f4 <HAL_ETH_Init+0x1e8>)
 800416e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004186:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004188:	f7fd ff20 	bl	8001fcc <HAL_GetTick>
 800418c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800418e:	e011      	b.n	80041b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004190:	f7fd ff1c 	bl	8001fcc <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800419e:	d909      	bls.n	80041b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2204      	movs	r2, #4
 80041a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	22e0      	movs	r2, #224	@ 0xe0
 80041ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e098      	b.n	80042e6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e4      	bne.n	8004190 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 ff7e 	bl	80050c8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80041cc:	f002 fe92 	bl	8006ef4 <HAL_RCC_GetHCLKFreq>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4a49      	ldr	r2, [pc, #292]	@ (80042f8 <HAL_ETH_Init+0x1ec>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	0c9a      	lsrs	r2, r3, #18
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3a01      	subs	r2, #1
 80041e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f001 f97b 	bl	80054e0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041f6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004202:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004206:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	22e0      	movs	r2, #224	@ 0xe0
 8004222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e05d      	b.n	80042e6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004232:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004236:	4b31      	ldr	r3, [pc, #196]	@ (80042fc <HAL_ETH_Init+0x1f0>)
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6952      	ldr	r2, [r2, #20]
 800423e:	0051      	lsls	r1, r2, #1
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	430b      	orrs	r3, r1
 8004246:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800424a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f001 f9e3 	bl	800561a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f001 fa29 	bl	80056ac <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	3305      	adds	r3, #5
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	3304      	adds	r3, #4
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	4619      	mov	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	3303      	adds	r3, #3
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	061a      	lsls	r2, r3, #24
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	3302      	adds	r3, #2
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	3301      	adds	r3, #1
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004298:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80042a6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80042a8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b11      	ldr	r3, [pc, #68]	@ (8004300 <HAL_ETH_Init+0x1f4>)
 80042ba:	430b      	orrs	r3, r1
 80042bc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <HAL_ETH_Init+0x1f8>)
 80042ce:	430b      	orrs	r3, r1
 80042d0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2210      	movs	r2, #16
 80042e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	58024400 	.word	0x58024400
 80042f4:	58000400 	.word	0x58000400
 80042f8:	431bde83 	.word	0x431bde83
 80042fc:	ffff8001 	.word	0xffff8001
 8004300:	0c020060 	.word	0x0c020060
 8004304:	0c20c000 	.word	0x0c20c000

08004308 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004316:	2b10      	cmp	r3, #16
 8004318:	d153      	bne.n	80043c2 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2204      	movs	r2, #4
 8004326:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa49 	bl	80047c0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0202 	orr.w	r2, r2, #2
 800433c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800436a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800437a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004386:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004396:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80043ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043b2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2240      	movs	r2, #64	@ 0x40
 80043ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d165      	bne.n	80044aa <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2204      	movs	r2, #4
 80043f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9e4 	bl	80047c0 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004400:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004410:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800441c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800442c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004438:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8004444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004448:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0202 	orr.w	r2, r2, #2
 800446e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004488:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8004494:	430b      	orrs	r3, r1
 8004496:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800449a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2240      	movs	r2, #64	@ 0x40
 80044a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c2:	2b40      	cmp	r3, #64	@ 0x40
 80044c4:	d165      	bne.n	8004592 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d6:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b30      	ldr	r3, [pc, #192]	@ (80045a0 <HAL_ETH_Stop_IT+0xec>)
 80044e0:	400b      	ands	r3, r1
 80044e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044e6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004502:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800450e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800451e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0201 	bic.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0202 	bic.w	r2, r2, #2
 8004554:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e00e      	b.n	800457a <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	3212      	adds	r2, #18
 8004562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004566:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3301      	adds	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d9ed      	bls.n	800455c <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2210      	movs	r2, #16
 800458a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	ffff2f3e 	.word	0xffff2f3e

080045a4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ba:	f043 0201 	orr.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e03a      	b.n	800463e <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	d134      	bne.n	800463c <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80045da:	2201      	movs	r2, #1
 80045dc:	6839      	ldr	r1, [r7, #0]
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f001 f8c2 	bl	8005768 <ETH_Prepare_Tx_Descriptors>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f043 0202 	orr.w	r2, r3, #2
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e01f      	b.n	800463e <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80045fe:	f3bf 8f4f 	dsb	sy
}
 8004602:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	629a      	str	r2, [r3, #40]	@ 0x28
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004612:	2b03      	cmp	r3, #3
 8004614:	d904      	bls.n	8004620 <HAL_ETH_Transmit_IT+0x7c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	1f1a      	subs	r2, r3, #4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3106      	adds	r1, #6
 800462c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004630:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004634:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e000      	b.n	800463e <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
  }
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b088      	sub	sp, #32
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004664:	f043 0201 	orr.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0a2      	b.n	80047b8 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004678:	2b40      	cmp	r3, #64	@ 0x40
 800467a:	d001      	beq.n	8004680 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e09b      	b.n	80047b8 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004684:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	3212      	adds	r2, #18
 800468c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004690:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004696:	f1c3 0304 	rsb	r3, r3, #4
 800469a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800469c:	e064      	b.n	8004768 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <HAL_ETH_ReadData+0x88>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d03a      	beq.n	8004744 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f007 fc5a 	bl	800bfdc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	441a      	add	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2200      	movs	r2, #0
 8004742:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	3301      	adds	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d902      	bls.n	8004756 <HAL_ETH_ReadData+0x110>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	3b04      	subs	r3, #4
 8004754:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	3212      	adds	r2, #18
 800475c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004760:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	3301      	adds	r3, #1
 8004766:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800476c:	2b00      	cmp	r3, #0
 800476e:	db06      	blt.n	800477e <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	429a      	cmp	r2, r3
 8004776:	d202      	bcs.n	800477e <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d08f      	beq.n	800469e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f814 	bl	80047c0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d108      	bne.n	80047b6 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e000      	b.n	80047b8 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80047cc:	2301      	movs	r3, #1
 80047ce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	3212      	adds	r2, #18
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047e6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80047e8:	e038      	b.n	800485c <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d112      	bne.n	8004818 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4618      	mov	r0, r3
 80047f8:	f007 fbc0 	bl	800bf7c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	74fb      	strb	r3, [r7, #19]
 8004806:	e007      	b.n	8004818 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	461a      	mov	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	461a      	mov	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01e      	beq.n	800485c <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	2b00      	cmp	r3, #0
 8004824:	d004      	beq.n	8004830 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	e003      	b.n	8004838 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8004836:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	3301      	adds	r3, #1
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	2b03      	cmp	r3, #3
 8004842:	d902      	bls.n	800484a <ETH_UpdateDescriptor+0x8a>
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	3b04      	subs	r3, #4
 8004848:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	3212      	adds	r2, #18
 8004850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004854:	617b      	str	r3, [r7, #20]
      desccount--;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3b01      	subs	r3, #1
 800485a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <ETH_UpdateDescriptor+0xa8>
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1c0      	bne.n	80047ea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	429a      	cmp	r2, r3
 8004870:	d01b      	beq.n	80048aa <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3303      	adds	r3, #3
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800487c:	f3bf 8f5f 	dmb	sy
}
 8004880:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6919      	ldr	r1, [r3, #16]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	18ca      	adds	r2, r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800489a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80048aa:	bf00      	nop
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b086      	sub	sp, #24
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3318      	adds	r3, #24
 80048be:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80048d0:	e047      	b.n	8004962 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	3b01      	subs	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	3304      	adds	r3, #4
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3301      	adds	r3, #1
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d902      	bls.n	80048fe <HAL_ETH_ReleaseTxPacket+0x4c>
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	3b04      	subs	r3, #4
 80048fc:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004902:	7bbb      	ldrb	r3, [r7, #14]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d02c      	beq.n	8004962 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68d9      	ldr	r1, [r3, #12]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	440b      	add	r3, r1
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	db1f      	blt.n	800495e <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	3304      	adds	r3, #4
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4618      	mov	r0, r3
 800492c:	f007 fbbe 	bl	800c0ac <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	3304      	adds	r3, #4
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	3301      	adds	r3, #1
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d902      	bls.n	8004950 <HAL_ETH_ReleaseTxPacket+0x9e>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	3b04      	subs	r3, #4
 800494e:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800495c:	e001      	b.n	8004962 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_ETH_ReleaseTxPacket+0xbc>
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1b1      	bne.n	80048d2 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004988:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004992:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004996:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80049a4:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80049a6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b5c <HAL_ETH_IRQHandler+0x1e4>)
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d010      	beq.n	80049d8 <HAL_ETH_IRQHandler+0x60>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049c8:	461a      	mov	r2, r3
 80049ca:	f248 0340 	movw	r3, #32832	@ 0x8040
 80049ce:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f006 fe60 	bl	800b698 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d010      	beq.n	8004a04 <HAL_ETH_IRQHandler+0x8c>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049f4:	461a      	mov	r2, r3
 80049f6:	f248 0301 	movw	r3, #32769	@ 0x8001
 80049fa:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f006 fe5a 	bl	800b6b8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d047      	beq.n	8004a9e <HAL_ETH_IRQHandler+0x126>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d042      	beq.n	8004a9e <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1e:	f043 0208 	orr.w	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01e      	beq.n	8004a70 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a3a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8004a3e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8004a42:	4013      	ands	r3, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a52:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004a5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a62:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	22e0      	movs	r2, #224	@ 0xe0
 8004a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004a6e:	e013      	b.n	8004a98 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a78:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004a7c:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8004a94:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f006 fe1d 	bl	800b6d8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d019      	beq.n	8004ae6 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f043 0210 	orr.w	r2, r3, #16
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	22e0      	movs	r2, #224	@ 0xe0
 8004ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f006 fdfd 	bl	800b6d8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00f      	beq.n	8004b10 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004af8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f82c 	bl	8004b60 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00f      	beq.n	8004b3a <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004b22:	f003 020f 	and.w	r2, r3, #15
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f821 	bl	8004b74 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d006      	beq.n	8004b52 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004b44:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <HAL_ETH_IRQHandler+0x1e4>)
 8004b46:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004b4a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f81b 	bl	8004b88 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	58000080 	.word	0x58000080

08004b60 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e03e      	b.n	8004c3c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004bc6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	055b      	lsls	r3, r3, #21
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f043 030c 	orr.w	r3, r3, #12
 8004bea:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004bfe:	f7fd f9e5 	bl	8001fcc <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004c04:	e009      	b.n	8004c1a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004c06:	f7fd f9e1 	bl	8001fcc <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c14:	d901      	bls.n	8004c1a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e010      	b.n	8004c3c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ed      	bne.n	8004c06 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e03c      	b.n	8004ce0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c6e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	055b      	lsls	r3, r3, #21
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	041b      	lsls	r3, r3, #16
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 030c 	bic.w	r3, r3, #12
 8004c92:	f043 0304 	orr.w	r3, r3, #4
 8004c96:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	4b10      	ldr	r3, [pc, #64]	@ (8004ce8 <HAL_ETH_WritePHYRegister+0xa4>)
 8004ca6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004caa:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce8 <HAL_ETH_WritePHYRegister+0xa4>)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004cb2:	f7fd f98b 	bl	8001fcc <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004cb8:	e009      	b.n	8004cce <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004cba:	f7fd f987 	bl	8001fcc <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cc8:	d901      	bls.n	8004cce <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e008      	b.n	8004ce0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1ed      	bne.n	8004cba <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40028000 	.word	0x40028000

08004cec <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e1c3      	b.n	8005088 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 020c 	and.w	r2, r3, #12
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	bf0c      	ite	eq
 8004d46:	2301      	moveq	r3, #1
 8004d48:	2300      	movne	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bf14      	ite	ne
 8004d96:	2301      	movne	r3, #1
 8004d98:	2300      	moveq	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	bf14      	ite	ne
 8004db0:	2301      	movne	r3, #1
 8004db2:	2300      	moveq	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf14      	ite	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	2300      	moveq	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf14      	ite	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	2300      	moveq	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bf14      	ite	ne
 8004e82:	2301      	movne	r3, #1
 8004e84:	2300      	moveq	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf0c      	ite	eq
 8004ee0:	2301      	moveq	r3, #1
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf14      	ite	ne
 8004efc:	2301      	movne	r3, #1
 8004efe:	2300      	moveq	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004f10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	0e5b      	lsrs	r3, r3, #25
 8004f4a:	f003 021f 	and.w	r2, r3, #31
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	0c1b      	lsrs	r3, r3, #16
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005014:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005024:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	bf14      	ite	ne
 800505a:	2301      	movne	r3, #1
 800505c:	2300      	moveq	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	bf0c      	ite	eq
 8005078:	2301      	moveq	r3, #1
 800507a:	2300      	movne	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e00b      	b.n	80050c0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d105      	bne.n	80050be <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80050b2:	6839      	ldr	r1, [r7, #0]
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f871 	bl	800519c <ETH_SetMACConfig>

    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
  }
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80050e2:	f001 ff07 	bl	8006ef4 <HAL_RCC_GetHCLKFreq>
 80050e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005154 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d804      	bhi.n	80050fa <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e022      	b.n	8005140 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4a16      	ldr	r2, [pc, #88]	@ (8005158 <HAL_ETH_SetMDIOClockRange+0x90>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d204      	bcs.n	800510c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e019      	b.n	8005140 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4a13      	ldr	r2, [pc, #76]	@ (800515c <HAL_ETH_SetMDIOClockRange+0x94>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d915      	bls.n	8005140 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4a12      	ldr	r2, [pc, #72]	@ (8005160 <HAL_ETH_SetMDIOClockRange+0x98>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d804      	bhi.n	8005126 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e00c      	b.n	8005140 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4a0e      	ldr	r2, [pc, #56]	@ (8005164 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d804      	bhi.n	8005138 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e003      	b.n	8005140 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	02160ebf 	.word	0x02160ebf
 8005158:	03938700 	.word	0x03938700
 800515c:	05f5e0ff 	.word	0x05f5e0ff
 8005160:	08f0d17f 	.word	0x08f0d17f
 8005164:	0ee6b27f 	.word	0x0ee6b27f

08005168 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80051ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	791b      	ldrb	r3, [r3, #4]
 80051b4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80051b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	7b1b      	ldrb	r3, [r3, #12]
 80051bc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	7b5b      	ldrb	r3, [r3, #13]
 80051c4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	7b9b      	ldrb	r3, [r3, #14]
 80051cc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	7bdb      	ldrb	r3, [r3, #15]
 80051d4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	7c12      	ldrb	r2, [r2, #16]
 80051dc:	2a00      	cmp	r2, #0
 80051de:	d102      	bne.n	80051e6 <ETH_SetMACConfig+0x4a>
 80051e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80051e4:	e000      	b.n	80051e8 <ETH_SetMACConfig+0x4c>
 80051e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	7c52      	ldrb	r2, [r2, #17]
 80051ee:	2a00      	cmp	r2, #0
 80051f0:	d102      	bne.n	80051f8 <ETH_SetMACConfig+0x5c>
 80051f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051f6:	e000      	b.n	80051fa <ETH_SetMACConfig+0x5e>
 80051f8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	7c9b      	ldrb	r3, [r3, #18]
 8005200:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005202:	431a      	orrs	r2, r3
               macconf->Speed |
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005208:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800520e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	7f1b      	ldrb	r3, [r3, #28]
 8005214:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005216:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	7f5b      	ldrb	r3, [r3, #29]
 800521c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800521e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	7f92      	ldrb	r2, [r2, #30]
 8005224:	2a00      	cmp	r2, #0
 8005226:	d102      	bne.n	800522e <ETH_SetMACConfig+0x92>
 8005228:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800522c:	e000      	b.n	8005230 <ETH_SetMACConfig+0x94>
 800522e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005230:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	7fdb      	ldrb	r3, [r3, #31]
 8005236:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005238:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005240:	2a00      	cmp	r2, #0
 8005242:	d102      	bne.n	800524a <ETH_SetMACConfig+0xae>
 8005244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005248:	e000      	b.n	800524c <ETH_SetMACConfig+0xb0>
 800524a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800524c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005252:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800525a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800525c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b56      	ldr	r3, [pc, #344]	@ (80053c8 <ETH_SetMACConfig+0x22c>)
 800526e:	4013      	ands	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	68f9      	ldr	r1, [r7, #12]
 8005276:	430b      	orrs	r3, r1
 8005278:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005286:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005288:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005290:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005292:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800529a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800529c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80052a4:	2a00      	cmp	r2, #0
 80052a6:	d102      	bne.n	80052ae <ETH_SetMACConfig+0x112>
 80052a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80052ac:	e000      	b.n	80052b0 <ETH_SetMACConfig+0x114>
 80052ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052b0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	4b42      	ldr	r3, [pc, #264]	@ (80053cc <ETH_SetMACConfig+0x230>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	68f9      	ldr	r1, [r7, #12]
 80052ca:	430b      	orrs	r3, r1
 80052cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	4b3a      	ldr	r3, [pc, #232]	@ (80053d0 <ETH_SetMACConfig+0x234>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	68f9      	ldr	r1, [r7, #12]
 80052ee:	430b      	orrs	r3, r1
 80052f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80052f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005306:	2a00      	cmp	r2, #0
 8005308:	d101      	bne.n	800530e <ETH_SetMACConfig+0x172>
 800530a:	2280      	movs	r2, #128	@ 0x80
 800530c:	e000      	b.n	8005310 <ETH_SetMACConfig+0x174>
 800530e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005310:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005316:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005322:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8005326:	4013      	ands	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	430b      	orrs	r3, r1
 8005330:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005338:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005340:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534e:	f023 0103 	bic.w	r1, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	430a      	orrs	r2, r1
 800535a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005366:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8005382:	2a00      	cmp	r2, #0
 8005384:	d101      	bne.n	800538a <ETH_SetMACConfig+0x1ee>
 8005386:	2240      	movs	r2, #64	@ 0x40
 8005388:	e000      	b.n	800538c <ETH_SetMACConfig+0x1f0>
 800538a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800538c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005394:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005396:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800539e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80053ac:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	00048083 	.word	0x00048083
 80053cc:	c0f88000 	.word	0xc0f88000
 80053d0:	fffffef0 	.word	0xfffffef0

080053d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4b38      	ldr	r3, [pc, #224]	@ (80054cc <ETH_SetDMAConfig+0xf8>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	6811      	ldr	r1, [r2, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	430b      	orrs	r3, r1
 80053f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053fa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	791b      	ldrb	r3, [r3, #4]
 8005400:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005406:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	7b1b      	ldrb	r3, [r3, #12]
 800540c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4b2c      	ldr	r3, [pc, #176]	@ (80054d0 <ETH_SetDMAConfig+0xfc>)
 800541e:	4013      	ands	r3, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	430b      	orrs	r3, r1
 8005428:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800542c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	7b5b      	ldrb	r3, [r3, #13]
 8005432:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005444:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005448:	4b22      	ldr	r3, [pc, #136]	@ (80054d4 <ETH_SetDMAConfig+0x100>)
 800544a:	4013      	ands	r3, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	430b      	orrs	r3, r1
 8005454:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005458:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	7d1b      	ldrb	r3, [r3, #20]
 8005464:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005466:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	7f5b      	ldrb	r3, [r3, #29]
 800546c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800547a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800547e:	4b16      	ldr	r3, [pc, #88]	@ (80054d8 <ETH_SetDMAConfig+0x104>)
 8005480:	4013      	ands	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	430b      	orrs	r3, r1
 800548a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800548e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	7f1b      	ldrb	r3, [r3, #28]
 8005496:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054a8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80054ac:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <ETH_SetDMAConfig+0x108>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	68f9      	ldr	r1, [r7, #12]
 80054b6:	430b      	orrs	r3, r1
 80054b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054bc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	ffff87fd 	.word	0xffff87fd
 80054d0:	ffff2ffe 	.word	0xffff2ffe
 80054d4:	fffec000 	.word	0xfffec000
 80054d8:	ffc0efef 	.word	0xffc0efef
 80054dc:	7fc0ffff 	.word	0x7fc0ffff

080054e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b0a4      	sub	sp, #144	@ 0x90
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054ee:	2300      	movs	r3, #0
 80054f0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800551c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005520:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005522:	2300      	movs	r3, #0
 8005524:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005528:	2300      	movs	r3, #0
 800552a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800552c:	2300      	movs	r3, #0
 800552e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005532:	2300      	movs	r3, #0
 8005534:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005538:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800553c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800553e:	2300      	movs	r3, #0
 8005540:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005544:	2300      	movs	r3, #0
 8005546:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800554e:	2300      	movs	r3, #0
 8005550:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800555a:	2300      	movs	r3, #0
 800555c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800555e:	2300      	movs	r3, #0
 8005560:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005562:	2300      	movs	r3, #0
 8005564:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005566:	2300      	movs	r3, #0
 8005568:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800556c:	2300      	movs	r3, #0
 800556e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005578:	2320      	movs	r3, #32
 800557a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005584:	2300      	movs	r3, #0
 8005586:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800558a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800558e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005590:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005594:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005596:	2300      	movs	r3, #0
 8005598:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800559c:	2302      	movs	r3, #2
 800559e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80055ba:	2300      	movs	r3, #0
 80055bc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80055c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fde6 	bl	800519c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80055d0:	2301      	movs	r3, #1
 80055d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80055d4:	2301      	movs	r3, #1
 80055d6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80055d8:	2300      	movs	r3, #0
 80055da:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055ea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80055ee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80055f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80055f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005600:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005604:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fee1 	bl	80053d4 <ETH_SetDMAConfig>
}
 8005612:	bf00      	nop
 8005614:	3790      	adds	r7, #144	@ 0x90
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e01d      	b.n	8005664 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68d9      	ldr	r1, [r3, #12]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	440b      	add	r3, r1
 8005638:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2200      	movs	r2, #0
 8005644:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2200      	movs	r2, #0
 800564a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2200      	movs	r2, #0
 8005650:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	3206      	adds	r2, #6
 800565a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3301      	adds	r3, #1
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b03      	cmp	r3, #3
 8005668:	d9de      	bls.n	8005628 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005678:	461a      	mov	r2, r3
 800567a:	2303      	movs	r3, #3
 800567c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800568c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800569c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	e023      	b.n	8005702 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6919      	ldr	r1, [r3, #16]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4613      	mov	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	440b      	add	r3, r1
 80056ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2200      	movs	r2, #0
 80056d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2200      	movs	r2, #0
 80056e2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2200      	movs	r2, #0
 80056ee:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	3212      	adds	r2, #18
 80056f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b03      	cmp	r3, #3
 8005706:	d9d8      	bls.n	80056ba <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800572e:	461a      	mov	r2, r3
 8005730:	2303      	movs	r3, #3
 8005732:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005742:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005756:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005768:	b480      	push	{r7}
 800576a:	b091      	sub	sp, #68	@ 0x44
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3318      	adds	r3, #24
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005792:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057aa:	d007      	beq.n	80057bc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80057ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b0:	3304      	adds	r3, #4
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80057bc:	2302      	movs	r3, #2
 80057be:	e266      	b.n	8005c8e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d044      	beq.n	8005856 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	4b75      	ldr	r3, [pc, #468]	@ (80059a8 <ETH_Prepare_Tx_Descriptors+0x240>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057d8:	431a      	orrs	r2, r3
 80057da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057dc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80057f8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d027      	beq.n	8005856 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	b29a      	uxth	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	431a      	orrs	r2, r3
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005830:	431a      	orrs	r2, r3
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005844:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005854:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00e      	beq.n	8005880 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	4b51      	ldr	r3, [pc, #324]	@ (80059ac <ETH_Prepare_Tx_Descriptors+0x244>)
 8005868:	4013      	ands	r3, r2
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	6992      	ldr	r2, [r2, #24]
 800586e:	431a      	orrs	r2, r3
 8005870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005872:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d105      	bne.n	8005898 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	d036      	beq.n	8005906 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80058a4:	f3bf 8f5f 	dmb	sy
}
 80058a8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80058b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b8:	3301      	adds	r3, #1
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d902      	bls.n	80058c8 <ETH_Prepare_Tx_Descriptors+0x160>
 80058c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c4:	3b04      	subs	r3, #4
 80058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d0:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80058d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d4:	3301      	adds	r3, #1
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058e4:	d10f      	bne.n	8005906 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80058f0:	f3bf 8f5f 	dmb	sy
}
 80058f4:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005900:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005902:	2302      	movs	r3, #2
 8005904:	e1c3      	b.n	8005c8e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005908:	3301      	adds	r3, #1
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800590c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	4b24      	ldr	r3, [pc, #144]	@ (80059ac <ETH_Prepare_Tx_Descriptors+0x244>)
 800591c:	4013      	ands	r3, r2
 800591e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005920:	6852      	ldr	r2, [r2, #4]
 8005922:	431a      	orrs	r2, r3
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d012      	beq.n	8005956 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8005930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	4b1a      	ldr	r3, [pc, #104]	@ (80059b0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8005946:	4013      	ands	r3, r2
 8005948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800594a:	6852      	ldr	r2, [r2, #4]
 800594c:	0412      	lsls	r2, r2, #16
 800594e:	431a      	orrs	r2, r3
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	e008      	b.n	8005968 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	2200      	movs	r2, #0
 800595a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	4b13      	ldr	r3, [pc, #76]	@ (80059b0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8005962:	4013      	ands	r3, r2
 8005964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005966:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	d021      	beq.n	80059b8 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	04db      	lsls	r3, r3, #19
 8005982:	431a      	orrs	r2, r3
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	4b09      	ldr	r3, [pc, #36]	@ (80059b4 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800598e:	4013      	ands	r3, r2
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	69d2      	ldr	r2, [r2, #28]
 8005994:	431a      	orrs	r2, r3
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	60da      	str	r2, [r3, #12]
 80059a6:	e02e      	b.n	8005a06 <ETH_Prepare_Tx_Descriptors+0x29e>
 80059a8:	ffff0000 	.word	0xffff0000
 80059ac:	ffffc000 	.word	0xffffc000
 80059b0:	c000ffff 	.word	0xc000ffff
 80059b4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	4b7b      	ldr	r3, [pc, #492]	@ (8005bac <ETH_Prepare_Tx_Descriptors+0x444>)
 80059be:	4013      	ands	r3, r2
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	6852      	ldr	r2, [r2, #4]
 80059c4:	431a      	orrs	r2, r3
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80059d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e6:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d008      	beq.n	8005a24 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005a3c:	f3bf 8f5f 	dmb	sy
}
 8005a40:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 80da 	beq.w	8005c10 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005a6e:	e0cf      	b.n	8005c10 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a7e:	3301      	adds	r3, #1
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d902      	bls.n	8005a8e <ETH_Prepare_Tx_Descriptors+0x326>
 8005a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8a:	3b04      	subs	r3, #4
 8005a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a96:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab0:	d007      	beq.n	8005ac2 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d029      	beq.n	8005b16 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ace:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ad4:	e019      	b.n	8005b0a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005ad6:	f3bf 8f5f 	dmb	sy
}
 8005ada:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aea:	3301      	adds	r3, #1
 8005aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d902      	bls.n	8005afa <ETH_Prepare_Tx_Descriptors+0x392>
 8005af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af6:	3b04      	subs	r3, #4
 8005af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b02:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b06:	3301      	adds	r3, #1
 8005b08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d3e1      	bcc.n	8005ad6 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0bb      	b.n	8005c8e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8005b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b18:	3301      	adds	r3, #1
 8005b1a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	4b1f      	ldr	r3, [pc, #124]	@ (8005bb0 <ETH_Prepare_Tx_Descriptors+0x448>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b36:	6852      	ldr	r2, [r2, #4]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d012      	beq.n	8005b6c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	461a      	mov	r2, r3
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	4b16      	ldr	r3, [pc, #88]	@ (8005bb4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b60:	6852      	ldr	r2, [r2, #4]
 8005b62:	0412      	lsls	r2, r2, #16
 8005b64:	431a      	orrs	r2, r3
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	609a      	str	r2, [r3, #8]
 8005b6a:	e008      	b.n	8005b7e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	2200      	movs	r2, #0
 8005b70:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	4b0f      	ldr	r3, [pc, #60]	@ (8005bb4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b7c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d018      	beq.n	8005bbc <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <ETH_Prepare_Tx_Descriptors+0x450>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	69d2      	ldr	r2, [r2, #28]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	60da      	str	r2, [r3, #12]
 8005ba8:	e020      	b.n	8005bec <ETH_Prepare_Tx_Descriptors+0x484>
 8005baa:	bf00      	nop
 8005bac:	ffff8000 	.word	0xffff8000
 8005bb0:	ffffc000 	.word	0xffffc000
 8005bb4:	c000ffff 	.word	0xc000ffff
 8005bb8:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	4b36      	ldr	r3, [pc, #216]	@ (8005c9c <ETH_Prepare_Tx_Descriptors+0x534>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	6852      	ldr	r2, [r2, #4]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	3301      	adds	r3, #1
 8005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005bf2:	f3bf 8f5f 	dmb	sy
}
 8005bf6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c02:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f47f af2b 	bne.w	8005a70 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	e005      	b.n	8005c3a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c44:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c4e:	3304      	adds	r3, #4
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c5a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c60:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c62:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	2301      	movs	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f383 8810 	msr	PRIMASK, r3
}
 8005c70:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c78:	4413      	add	r3, r2
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3744      	adds	r7, #68	@ 0x44
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	ffff8000 	.word	0xffff8000

08005ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	@ 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005cae:	4b86      	ldr	r3, [pc, #536]	@ (8005ec8 <HAL_GPIO_Init+0x228>)
 8005cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cb2:	e18c      	b.n	8005fce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	2101      	movs	r1, #1
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 817e 	beq.w	8005fc8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d005      	beq.n	8005ce4 <HAL_GPIO_Init+0x44>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d130      	bne.n	8005d46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	2203      	movs	r2, #3
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43db      	mvns	r3, r3
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4013      	ands	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	091b      	lsrs	r3, r3, #4
 8005d30:	f003 0201 	and.w	r2, r3, #1
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d017      	beq.n	8005d82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	43db      	mvns	r3, r3
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4013      	ands	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d123      	bne.n	8005dd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	08da      	lsrs	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3208      	adds	r2, #8
 8005d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	220f      	movs	r2, #15
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	08da      	lsrs	r2, r3, #3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3208      	adds	r2, #8
 8005dd0:	69b9      	ldr	r1, [r7, #24]
 8005dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	2203      	movs	r2, #3
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4013      	ands	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f003 0203 	and.w	r2, r3, #3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80d8 	beq.w	8005fc8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e18:	4b2c      	ldr	r3, [pc, #176]	@ (8005ecc <HAL_GPIO_Init+0x22c>)
 8005e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005ecc <HAL_GPIO_Init+0x22c>)
 8005e20:	f043 0302 	orr.w	r3, r3, #2
 8005e24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005e28:	4b28      	ldr	r3, [pc, #160]	@ (8005ecc <HAL_GPIO_Init+0x22c>)
 8005e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e36:	4a26      	ldr	r2, [pc, #152]	@ (8005ed0 <HAL_GPIO_Init+0x230>)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	220f      	movs	r2, #15
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	43db      	mvns	r3, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4013      	ands	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ed4 <HAL_GPIO_Init+0x234>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d04a      	beq.n	8005ef8 <HAL_GPIO_Init+0x258>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed8 <HAL_GPIO_Init+0x238>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d02b      	beq.n	8005ec2 <HAL_GPIO_Init+0x222>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005edc <HAL_GPIO_Init+0x23c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d025      	beq.n	8005ebe <HAL_GPIO_Init+0x21e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee0 <HAL_GPIO_Init+0x240>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01f      	beq.n	8005eba <HAL_GPIO_Init+0x21a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a19      	ldr	r2, [pc, #100]	@ (8005ee4 <HAL_GPIO_Init+0x244>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d019      	beq.n	8005eb6 <HAL_GPIO_Init+0x216>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a18      	ldr	r2, [pc, #96]	@ (8005ee8 <HAL_GPIO_Init+0x248>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <HAL_GPIO_Init+0x212>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a17      	ldr	r2, [pc, #92]	@ (8005eec <HAL_GPIO_Init+0x24c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00d      	beq.n	8005eae <HAL_GPIO_Init+0x20e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a16      	ldr	r2, [pc, #88]	@ (8005ef0 <HAL_GPIO_Init+0x250>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <HAL_GPIO_Init+0x20a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a15      	ldr	r2, [pc, #84]	@ (8005ef4 <HAL_GPIO_Init+0x254>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d101      	bne.n	8005ea6 <HAL_GPIO_Init+0x206>
 8005ea2:	2309      	movs	r3, #9
 8005ea4:	e029      	b.n	8005efa <HAL_GPIO_Init+0x25a>
 8005ea6:	230a      	movs	r3, #10
 8005ea8:	e027      	b.n	8005efa <HAL_GPIO_Init+0x25a>
 8005eaa:	2307      	movs	r3, #7
 8005eac:	e025      	b.n	8005efa <HAL_GPIO_Init+0x25a>
 8005eae:	2306      	movs	r3, #6
 8005eb0:	e023      	b.n	8005efa <HAL_GPIO_Init+0x25a>
 8005eb2:	2305      	movs	r3, #5
 8005eb4:	e021      	b.n	8005efa <HAL_GPIO_Init+0x25a>
 8005eb6:	2304      	movs	r3, #4
 8005eb8:	e01f      	b.n	8005efa <HAL_GPIO_Init+0x25a>
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e01d      	b.n	8005efa <HAL_GPIO_Init+0x25a>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e01b      	b.n	8005efa <HAL_GPIO_Init+0x25a>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e019      	b.n	8005efa <HAL_GPIO_Init+0x25a>
 8005ec6:	bf00      	nop
 8005ec8:	58000080 	.word	0x58000080
 8005ecc:	58024400 	.word	0x58024400
 8005ed0:	58000400 	.word	0x58000400
 8005ed4:	58020000 	.word	0x58020000
 8005ed8:	58020400 	.word	0x58020400
 8005edc:	58020800 	.word	0x58020800
 8005ee0:	58020c00 	.word	0x58020c00
 8005ee4:	58021000 	.word	0x58021000
 8005ee8:	58021400 	.word	0x58021400
 8005eec:	58021800 	.word	0x58021800
 8005ef0:	58021c00 	.word	0x58021c00
 8005ef4:	58022400 	.word	0x58022400
 8005ef8:	2300      	movs	r3, #0
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	f002 0203 	and.w	r2, r2, #3
 8005f00:	0092      	lsls	r2, r2, #2
 8005f02:	4093      	lsls	r3, r2
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f0a:	4938      	ldr	r1, [pc, #224]	@ (8005fec <HAL_GPIO_Init+0x34c>)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	3302      	adds	r3, #2
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4013      	ands	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4013      	ands	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f ae6b 	bne.w	8005cb4 <HAL_GPIO_Init+0x14>
  }
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	3724      	adds	r7, #36	@ 0x24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	58000400 	.word	0x58000400

08005ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	807b      	strh	r3, [r7, #2]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006000:	787b      	ldrb	r3, [r7, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006006:	887a      	ldrh	r2, [r7, #2]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800600c:	e003      	b.n	8006016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	041a      	lsls	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	619a      	str	r2, [r3, #24]
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	4603      	mov	r3, r0
 800602a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800602c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006030:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	4013      	ands	r3, r2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800603c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f804 	bl	8006056 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	4603      	mov	r3, r0
 800605e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006074:	4b19      	ldr	r3, [pc, #100]	@ (80060dc <HAL_PWREx_ConfigSupply+0x70>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b04      	cmp	r3, #4
 800607e:	d00a      	beq.n	8006096 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006080:	4b16      	ldr	r3, [pc, #88]	@ (80060dc <HAL_PWREx_ConfigSupply+0x70>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d001      	beq.n	8006092 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e01f      	b.n	80060d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	e01d      	b.n	80060d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006096:	4b11      	ldr	r3, [pc, #68]	@ (80060dc <HAL_PWREx_ConfigSupply+0x70>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f023 0207 	bic.w	r2, r3, #7
 800609e:	490f      	ldr	r1, [pc, #60]	@ (80060dc <HAL_PWREx_ConfigSupply+0x70>)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80060a6:	f7fb ff91 	bl	8001fcc <HAL_GetTick>
 80060aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060ac:	e009      	b.n	80060c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060ae:	f7fb ff8d 	bl	8001fcc <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060bc:	d901      	bls.n	80060c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e007      	b.n	80060d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060c2:	4b06      	ldr	r3, [pc, #24]	@ (80060dc <HAL_PWREx_ConfigSupply+0x70>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ce:	d1ee      	bne.n	80060ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	58024800 	.word	0x58024800

080060e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08c      	sub	sp, #48	@ 0x30
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e3c8      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 8087 	beq.w	800620e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006100:	4b88      	ldr	r3, [pc, #544]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800610a:	4b86      	ldr	r3, [pc, #536]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 800610c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006112:	2b10      	cmp	r3, #16
 8006114:	d007      	beq.n	8006126 <HAL_RCC_OscConfig+0x46>
 8006116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006118:	2b18      	cmp	r3, #24
 800611a:	d110      	bne.n	800613e <HAL_RCC_OscConfig+0x5e>
 800611c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d10b      	bne.n	800613e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006126:	4b7f      	ldr	r3, [pc, #508]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d06c      	beq.n	800620c <HAL_RCC_OscConfig+0x12c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d168      	bne.n	800620c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e3a2      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006146:	d106      	bne.n	8006156 <HAL_RCC_OscConfig+0x76>
 8006148:	4b76      	ldr	r3, [pc, #472]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a75      	ldr	r2, [pc, #468]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 800614e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e02e      	b.n	80061b4 <HAL_RCC_OscConfig+0xd4>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10c      	bne.n	8006178 <HAL_RCC_OscConfig+0x98>
 800615e:	4b71      	ldr	r3, [pc, #452]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a70      	ldr	r2, [pc, #448]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	4b6e      	ldr	r3, [pc, #440]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a6d      	ldr	r2, [pc, #436]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006170:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e01d      	b.n	80061b4 <HAL_RCC_OscConfig+0xd4>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006180:	d10c      	bne.n	800619c <HAL_RCC_OscConfig+0xbc>
 8006182:	4b68      	ldr	r3, [pc, #416]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a67      	ldr	r2, [pc, #412]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	4b65      	ldr	r3, [pc, #404]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a64      	ldr	r2, [pc, #400]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	e00b      	b.n	80061b4 <HAL_RCC_OscConfig+0xd4>
 800619c:	4b61      	ldr	r3, [pc, #388]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a60      	ldr	r2, [pc, #384]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80061a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	4b5e      	ldr	r3, [pc, #376]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80061ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d013      	beq.n	80061e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061bc:	f7fb ff06 	bl	8001fcc <HAL_GetTick>
 80061c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c4:	f7fb ff02 	bl	8001fcc <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b64      	cmp	r3, #100	@ 0x64
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e356      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061d6:	4b53      	ldr	r3, [pc, #332]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0f0      	beq.n	80061c4 <HAL_RCC_OscConfig+0xe4>
 80061e2:	e014      	b.n	800620e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e4:	f7fb fef2 	bl	8001fcc <HAL_GetTick>
 80061e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ec:	f7fb feee 	bl	8001fcc <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b64      	cmp	r3, #100	@ 0x64
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e342      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061fe:	4b49      	ldr	r3, [pc, #292]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0x10c>
 800620a:	e000      	b.n	800620e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800620c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 808c 	beq.w	8006334 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800621c:	4b41      	ldr	r3, [pc, #260]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006224:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006226:	4b3f      	ldr	r3, [pc, #252]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d007      	beq.n	8006242 <HAL_RCC_OscConfig+0x162>
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2b18      	cmp	r3, #24
 8006236:	d137      	bne.n	80062a8 <HAL_RCC_OscConfig+0x1c8>
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d132      	bne.n	80062a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006242:	4b38      	ldr	r3, [pc, #224]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <HAL_RCC_OscConfig+0x17a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e314      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800625a:	4b32      	ldr	r3, [pc, #200]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f023 0219 	bic.w	r2, r3, #25
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	492f      	ldr	r1, [pc, #188]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006268:	4313      	orrs	r3, r2
 800626a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fb feae 	bl	8001fcc <HAL_GetTick>
 8006270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006274:	f7fb feaa 	bl	8001fcc <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e2fe      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006286:	4b27      	ldr	r3, [pc, #156]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0f0      	beq.n	8006274 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006292:	4b24      	ldr	r3, [pc, #144]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	061b      	lsls	r3, r3, #24
 80062a0:	4920      	ldr	r1, [pc, #128]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062a6:	e045      	b.n	8006334 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d026      	beq.n	80062fe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f023 0219 	bic.w	r2, r3, #25
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4919      	ldr	r1, [pc, #100]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c2:	f7fb fe83 	bl	8001fcc <HAL_GetTick>
 80062c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ca:	f7fb fe7f 	bl	8001fcc <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e2d3      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062dc:	4b11      	ldr	r3, [pc, #68]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0f0      	beq.n	80062ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	061b      	lsls	r3, r3, #24
 80062f6:	490b      	ldr	r1, [pc, #44]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	604b      	str	r3, [r1, #4]
 80062fc:	e01a      	b.n	8006334 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062fe:	4b09      	ldr	r3, [pc, #36]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a08      	ldr	r2, [pc, #32]	@ (8006324 <HAL_RCC_OscConfig+0x244>)
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630a:	f7fb fe5f 	bl	8001fcc <HAL_GetTick>
 800630e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006310:	e00a      	b.n	8006328 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006312:	f7fb fe5b 	bl	8001fcc <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d903      	bls.n	8006328 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e2af      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
 8006324:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006328:	4b96      	ldr	r3, [pc, #600]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1ee      	bne.n	8006312 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	d06a      	beq.n	8006416 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006340:	4b90      	ldr	r3, [pc, #576]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006348:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800634a:	4b8e      	ldr	r3, [pc, #568]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 800634c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b08      	cmp	r3, #8
 8006354:	d007      	beq.n	8006366 <HAL_RCC_OscConfig+0x286>
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b18      	cmp	r3, #24
 800635a:	d11b      	bne.n	8006394 <HAL_RCC_OscConfig+0x2b4>
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b01      	cmp	r3, #1
 8006364:	d116      	bne.n	8006394 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006366:	4b87      	ldr	r3, [pc, #540]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <HAL_RCC_OscConfig+0x29e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	2b80      	cmp	r3, #128	@ 0x80
 8006378:	d001      	beq.n	800637e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e282      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800637e:	4b81      	ldr	r3, [pc, #516]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	061b      	lsls	r3, r3, #24
 800638c:	497d      	ldr	r1, [pc, #500]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 800638e:	4313      	orrs	r3, r2
 8006390:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006392:	e040      	b.n	8006416 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d023      	beq.n	80063e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800639c:	4b79      	ldr	r3, [pc, #484]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a78      	ldr	r2, [pc, #480]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80063a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fb fe10 	bl	8001fcc <HAL_GetTick>
 80063ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063b0:	f7fb fe0c 	bl	8001fcc <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e260      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063c2:	4b70      	ldr	r3, [pc, #448]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	061b      	lsls	r3, r3, #24
 80063dc:	4969      	ldr	r1, [pc, #420]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	60cb      	str	r3, [r1, #12]
 80063e2:	e018      	b.n	8006416 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80063e4:	4b67      	ldr	r3, [pc, #412]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a66      	ldr	r2, [pc, #408]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80063ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f0:	f7fb fdec 	bl	8001fcc <HAL_GetTick>
 80063f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063f8:	f7fb fde8 	bl	8001fcc <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e23c      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800640a:	4b5e      	ldr	r3, [pc, #376]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d036      	beq.n	8006490 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d019      	beq.n	800645e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800642a:	4b56      	ldr	r3, [pc, #344]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 800642c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800642e:	4a55      	ldr	r2, [pc, #340]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006436:	f7fb fdc9 	bl	8001fcc <HAL_GetTick>
 800643a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800643e:	f7fb fdc5 	bl	8001fcc <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e219      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006450:	4b4c      	ldr	r3, [pc, #304]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x35e>
 800645c:	e018      	b.n	8006490 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800645e:	4b49      	ldr	r3, [pc, #292]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006462:	4a48      	ldr	r2, [pc, #288]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006464:	f023 0301 	bic.w	r3, r3, #1
 8006468:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800646a:	f7fb fdaf 	bl	8001fcc <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006472:	f7fb fdab 	bl	8001fcc <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e1ff      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006484:	4b3f      	ldr	r3, [pc, #252]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1f0      	bne.n	8006472 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d036      	beq.n	800650a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d019      	beq.n	80064d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064a4:	4b37      	ldr	r3, [pc, #220]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a36      	ldr	r2, [pc, #216]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80064aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80064ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064b0:	f7fb fd8c 	bl	8001fcc <HAL_GetTick>
 80064b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064b8:	f7fb fd88 	bl	8001fcc <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e1dc      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0x3d8>
 80064d6:	e018      	b.n	800650a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a29      	ldr	r2, [pc, #164]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 80064de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064e4:	f7fb fd72 	bl	8001fcc <HAL_GetTick>
 80064e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064ec:	f7fb fd6e 	bl	8001fcc <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e1c2      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064fe:	4b21      	ldr	r3, [pc, #132]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f0      	bne.n	80064ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 8086 	beq.w	8006624 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006518:	4b1b      	ldr	r3, [pc, #108]	@ (8006588 <HAL_RCC_OscConfig+0x4a8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1a      	ldr	r2, [pc, #104]	@ (8006588 <HAL_RCC_OscConfig+0x4a8>)
 800651e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006524:	f7fb fd52 	bl	8001fcc <HAL_GetTick>
 8006528:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652c:	f7fb fd4e 	bl	8001fcc <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	@ 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e1a2      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800653e:	4b12      	ldr	r3, [pc, #72]	@ (8006588 <HAL_RCC_OscConfig+0x4a8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d106      	bne.n	8006560 <HAL_RCC_OscConfig+0x480>
 8006552:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006556:	4a0b      	ldr	r2, [pc, #44]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	6713      	str	r3, [r2, #112]	@ 0x70
 800655e:	e032      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e6>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d111      	bne.n	800658c <HAL_RCC_OscConfig+0x4ac>
 8006568:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 800656a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656c:	4a05      	ldr	r2, [pc, #20]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 800656e:	f023 0301 	bic.w	r3, r3, #1
 8006572:	6713      	str	r3, [r2, #112]	@ 0x70
 8006574:	4b03      	ldr	r3, [pc, #12]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 8006576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006578:	4a02      	ldr	r2, [pc, #8]	@ (8006584 <HAL_RCC_OscConfig+0x4a4>)
 800657a:	f023 0304 	bic.w	r3, r3, #4
 800657e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006580:	e021      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e6>
 8006582:	bf00      	nop
 8006584:	58024400 	.word	0x58024400
 8006588:	58024800 	.word	0x58024800
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b05      	cmp	r3, #5
 8006592:	d10c      	bne.n	80065ae <HAL_RCC_OscConfig+0x4ce>
 8006594:	4b83      	ldr	r3, [pc, #524]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006598:	4a82      	ldr	r2, [pc, #520]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800659a:	f043 0304 	orr.w	r3, r3, #4
 800659e:	6713      	str	r3, [r2, #112]	@ 0x70
 80065a0:	4b80      	ldr	r3, [pc, #512]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80065a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a4:	4a7f      	ldr	r2, [pc, #508]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ac:	e00b      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e6>
 80065ae:	4b7d      	ldr	r3, [pc, #500]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80065b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b2:	4a7c      	ldr	r2, [pc, #496]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ba:	4b7a      	ldr	r3, [pc, #488]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80065bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065be:	4a79      	ldr	r2, [pc, #484]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80065c0:	f023 0304 	bic.w	r3, r3, #4
 80065c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d015      	beq.n	80065fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ce:	f7fb fcfd 	bl	8001fcc <HAL_GetTick>
 80065d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065d4:	e00a      	b.n	80065ec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d6:	f7fb fcf9 	bl	8001fcc <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e14b      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065ec:	4b6d      	ldr	r3, [pc, #436]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0ee      	beq.n	80065d6 <HAL_RCC_OscConfig+0x4f6>
 80065f8:	e014      	b.n	8006624 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065fa:	f7fb fce7 	bl	8001fcc <HAL_GetTick>
 80065fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006600:	e00a      	b.n	8006618 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006602:	f7fb fce3 	bl	8001fcc <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006610:	4293      	cmp	r3, r2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e135      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006618:	4b62      	ldr	r3, [pc, #392]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1ee      	bne.n	8006602 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 812a 	beq.w	8006882 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800662e:	4b5d      	ldr	r3, [pc, #372]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006636:	2b18      	cmp	r3, #24
 8006638:	f000 80ba 	beq.w	80067b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	2b02      	cmp	r3, #2
 8006642:	f040 8095 	bne.w	8006770 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006646:	4b57      	ldr	r3, [pc, #348]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a56      	ldr	r2, [pc, #344]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800664c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006652:	f7fb fcbb 	bl	8001fcc <HAL_GetTick>
 8006656:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800665a:	f7fb fcb7 	bl	8001fcc <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e10b      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800666c:	4b4d      	ldr	r3, [pc, #308]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1f0      	bne.n	800665a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006678:	4b4a      	ldr	r3, [pc, #296]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800667a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800667c:	4b4a      	ldr	r3, [pc, #296]	@ (80067a8 <HAL_RCC_OscConfig+0x6c8>)
 800667e:	4013      	ands	r3, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006688:	0112      	lsls	r2, r2, #4
 800668a:	430a      	orrs	r2, r1
 800668c:	4945      	ldr	r1, [pc, #276]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800668e:	4313      	orrs	r3, r2
 8006690:	628b      	str	r3, [r1, #40]	@ 0x28
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006696:	3b01      	subs	r3, #1
 8006698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a0:	3b01      	subs	r3, #1
 80066a2:	025b      	lsls	r3, r3, #9
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	3b01      	subs	r3, #1
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ba:	3b01      	subs	r3, #1
 80066bc:	061b      	lsls	r3, r3, #24
 80066be:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80066c2:	4938      	ldr	r1, [pc, #224]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80066c8:	4b36      	ldr	r3, [pc, #216]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	4a35      	ldr	r2, [pc, #212]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066d4:	4b33      	ldr	r3, [pc, #204]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80066d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066d8:	4b34      	ldr	r3, [pc, #208]	@ (80067ac <HAL_RCC_OscConfig+0x6cc>)
 80066da:	4013      	ands	r3, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066e0:	00d2      	lsls	r2, r2, #3
 80066e2:	4930      	ldr	r1, [pc, #192]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066e8:	4b2e      	ldr	r3, [pc, #184]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	f023 020c 	bic.w	r2, r3, #12
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	492b      	ldr	r1, [pc, #172]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066fa:	4b2a      	ldr	r3, [pc, #168]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	f023 0202 	bic.w	r2, r3, #2
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006706:	4927      	ldr	r1, [pc, #156]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006708:	4313      	orrs	r3, r2
 800670a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800670c:	4b25      	ldr	r3, [pc, #148]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	4a24      	ldr	r2, [pc, #144]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006718:	4b22      	ldr	r3, [pc, #136]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671c:	4a21      	ldr	r2, [pc, #132]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800671e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006724:	4b1f      	ldr	r3, [pc, #124]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	4a1e      	ldr	r2, [pc, #120]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800672a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800672e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006730:	4b1c      	ldr	r3, [pc, #112]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800673c:	4b19      	ldr	r3, [pc, #100]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a18      	ldr	r2, [pc, #96]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006748:	f7fb fc40 	bl	8001fcc <HAL_GetTick>
 800674c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006750:	f7fb fc3c 	bl	8001fcc <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e090      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006762:	4b10      	ldr	r3, [pc, #64]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0x670>
 800676e:	e088      	b.n	8006882 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006770:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a0b      	ldr	r2, [pc, #44]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800677a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677c:	f7fb fc26 	bl	8001fcc <HAL_GetTick>
 8006780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006784:	f7fb fc22 	bl	8001fcc <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e076      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006796:	4b03      	ldr	r3, [pc, #12]	@ (80067a4 <HAL_RCC_OscConfig+0x6c4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f0      	bne.n	8006784 <HAL_RCC_OscConfig+0x6a4>
 80067a2:	e06e      	b.n	8006882 <HAL_RCC_OscConfig+0x7a2>
 80067a4:	58024400 	.word	0x58024400
 80067a8:	fffffc0c 	.word	0xfffffc0c
 80067ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067b0:	4b36      	ldr	r3, [pc, #216]	@ (800688c <HAL_RCC_OscConfig+0x7ac>)
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067b6:	4b35      	ldr	r3, [pc, #212]	@ (800688c <HAL_RCC_OscConfig+0x7ac>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d031      	beq.n	8006828 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f003 0203 	and.w	r2, r3, #3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d12a      	bne.n	8006828 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067de:	429a      	cmp	r2, r3
 80067e0:	d122      	bne.n	8006828 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d11a      	bne.n	8006828 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	0a5b      	lsrs	r3, r3, #9
 80067f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006800:	429a      	cmp	r2, r3
 8006802:	d111      	bne.n	8006828 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006810:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006812:	429a      	cmp	r2, r3
 8006814:	d108      	bne.n	8006828 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006822:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e02b      	b.n	8006884 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800682c:	4b17      	ldr	r3, [pc, #92]	@ (800688c <HAL_RCC_OscConfig+0x7ac>)
 800682e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006830:	08db      	lsrs	r3, r3, #3
 8006832:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006836:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	429a      	cmp	r2, r3
 8006840:	d01f      	beq.n	8006882 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006842:	4b12      	ldr	r3, [pc, #72]	@ (800688c <HAL_RCC_OscConfig+0x7ac>)
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	4a11      	ldr	r2, [pc, #68]	@ (800688c <HAL_RCC_OscConfig+0x7ac>)
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800684e:	f7fb fbbd 	bl	8001fcc <HAL_GetTick>
 8006852:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006854:	bf00      	nop
 8006856:	f7fb fbb9 	bl	8001fcc <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685e:	4293      	cmp	r3, r2
 8006860:	d0f9      	beq.n	8006856 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006862:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <HAL_RCC_OscConfig+0x7ac>)
 8006864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006866:	4b0a      	ldr	r3, [pc, #40]	@ (8006890 <HAL_RCC_OscConfig+0x7b0>)
 8006868:	4013      	ands	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800686e:	00d2      	lsls	r2, r2, #3
 8006870:	4906      	ldr	r1, [pc, #24]	@ (800688c <HAL_RCC_OscConfig+0x7ac>)
 8006872:	4313      	orrs	r3, r2
 8006874:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006876:	4b05      	ldr	r3, [pc, #20]	@ (800688c <HAL_RCC_OscConfig+0x7ac>)
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	4a04      	ldr	r2, [pc, #16]	@ (800688c <HAL_RCC_OscConfig+0x7ac>)
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3730      	adds	r7, #48	@ 0x30
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	58024400 	.word	0x58024400
 8006890:	ffff0007 	.word	0xffff0007

08006894 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e19c      	b.n	8006be2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068a8:	4b8a      	ldr	r3, [pc, #552]	@ (8006ad4 <HAL_RCC_ClockConfig+0x240>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d910      	bls.n	80068d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b87      	ldr	r3, [pc, #540]	@ (8006ad4 <HAL_RCC_ClockConfig+0x240>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 020f 	bic.w	r2, r3, #15
 80068be:	4985      	ldr	r1, [pc, #532]	@ (8006ad4 <HAL_RCC_ClockConfig+0x240>)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c6:	4b83      	ldr	r3, [pc, #524]	@ (8006ad4 <HAL_RCC_ClockConfig+0x240>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d001      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e184      	b.n	8006be2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d010      	beq.n	8006906 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	4b7b      	ldr	r3, [pc, #492]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d908      	bls.n	8006906 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068f4:	4b78      	ldr	r3, [pc, #480]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	4975      	ldr	r1, [pc, #468]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006902:	4313      	orrs	r3, r2
 8006904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b00      	cmp	r3, #0
 8006910:	d010      	beq.n	8006934 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	4b70      	ldr	r3, [pc, #448]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800691e:	429a      	cmp	r2, r3
 8006920:	d908      	bls.n	8006934 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006922:	4b6d      	ldr	r3, [pc, #436]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	496a      	ldr	r1, [pc, #424]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006930:	4313      	orrs	r3, r2
 8006932:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b00      	cmp	r3, #0
 800693e:	d010      	beq.n	8006962 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	4b64      	ldr	r3, [pc, #400]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800694c:	429a      	cmp	r2, r3
 800694e:	d908      	bls.n	8006962 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006950:	4b61      	ldr	r3, [pc, #388]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	495e      	ldr	r1, [pc, #376]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 800695e:	4313      	orrs	r3, r2
 8006960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d010      	beq.n	8006990 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	4b59      	ldr	r3, [pc, #356]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800697a:	429a      	cmp	r2, r3
 800697c:	d908      	bls.n	8006990 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800697e:	4b56      	ldr	r3, [pc, #344]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	4953      	ldr	r1, [pc, #332]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 800698c:	4313      	orrs	r3, r2
 800698e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d010      	beq.n	80069be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 030f 	and.w	r3, r3, #15
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d908      	bls.n	80069be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ac:	4b4a      	ldr	r3, [pc, #296]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f023 020f 	bic.w	r2, r3, #15
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4947      	ldr	r1, [pc, #284]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d055      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80069ca:	4b43      	ldr	r3, [pc, #268]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	4940      	ldr	r1, [pc, #256]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d107      	bne.n	80069f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069e4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d121      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0f6      	b.n	8006be2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d107      	bne.n	8006a0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069fc:	4b36      	ldr	r3, [pc, #216]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d115      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0ea      	b.n	8006be2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d107      	bne.n	8006a24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a14:	4b30      	ldr	r3, [pc, #192]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d109      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e0de      	b.n	8006be2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a24:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0d6      	b.n	8006be2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a34:	4b28      	ldr	r3, [pc, #160]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f023 0207 	bic.w	r2, r3, #7
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4925      	ldr	r1, [pc, #148]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a46:	f7fb fac1 	bl	8001fcc <HAL_GetTick>
 8006a4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a4c:	e00a      	b.n	8006a64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a4e:	f7fb fabd 	bl	8001fcc <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e0be      	b.n	8006be2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a64:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d1eb      	bne.n	8006a4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d010      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	4b14      	ldr	r3, [pc, #80]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d208      	bcs.n	8006aa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a92:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f023 020f 	bic.w	r2, r3, #15
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	490e      	ldr	r1, [pc, #56]	@ (8006ad8 <HAL_RCC_ClockConfig+0x244>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <HAL_RCC_ClockConfig+0x240>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d214      	bcs.n	8006adc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab2:	4b08      	ldr	r3, [pc, #32]	@ (8006ad4 <HAL_RCC_ClockConfig+0x240>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f023 020f 	bic.w	r2, r3, #15
 8006aba:	4906      	ldr	r1, [pc, #24]	@ (8006ad4 <HAL_RCC_ClockConfig+0x240>)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac2:	4b04      	ldr	r3, [pc, #16]	@ (8006ad4 <HAL_RCC_ClockConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d005      	beq.n	8006adc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e086      	b.n	8006be2 <HAL_RCC_ClockConfig+0x34e>
 8006ad4:	52002000 	.word	0x52002000
 8006ad8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d010      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	4b3f      	ldr	r3, [pc, #252]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d208      	bcs.n	8006b0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006af8:	4b3c      	ldr	r3, [pc, #240]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	4939      	ldr	r1, [pc, #228]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	695a      	ldr	r2, [r3, #20]
 8006b1a:	4b34      	ldr	r3, [pc, #208]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d208      	bcs.n	8006b38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b26:	4b31      	ldr	r3, [pc, #196]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	492e      	ldr	r1, [pc, #184]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d010      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	4b28      	ldr	r3, [pc, #160]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d208      	bcs.n	8006b66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b54:	4b25      	ldr	r3, [pc, #148]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	4922      	ldr	r1, [pc, #136]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d010      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69da      	ldr	r2, [r3, #28]
 8006b76:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d208      	bcs.n	8006b94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b82:	4b1a      	ldr	r3, [pc, #104]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	4917      	ldr	r1, [pc, #92]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b94:	f000 f834 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	4b14      	ldr	r3, [pc, #80]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	4912      	ldr	r1, [pc, #72]	@ (8006bf0 <HAL_RCC_ClockConfig+0x35c>)
 8006ba6:	5ccb      	ldrb	r3, [r1, r3]
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8006bec <HAL_RCC_ClockConfig+0x358>)
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	4a0d      	ldr	r2, [pc, #52]	@ (8006bf0 <HAL_RCC_ClockConfig+0x35c>)
 8006bbc:	5cd3      	ldrb	r3, [r2, r3]
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8006bf4 <HAL_RCC_ClockConfig+0x360>)
 8006bca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8006bf8 <HAL_RCC_ClockConfig+0x364>)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bfc <HAL_RCC_ClockConfig+0x368>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fa fe3c 	bl	8001854 <HAL_InitTick>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	0801e8cc 	.word	0x0801e8cc
 8006bf4:	240049c4 	.word	0x240049c4
 8006bf8:	240049c0 	.word	0x240049c0
 8006bfc:	240049c8 	.word	0x240049c8

08006c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b089      	sub	sp, #36	@ 0x24
 8006c04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c06:	4bb3      	ldr	r3, [pc, #716]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c0e:	2b18      	cmp	r3, #24
 8006c10:	f200 8155 	bhi.w	8006ebe <HAL_RCC_GetSysClockFreq+0x2be>
 8006c14:	a201      	add	r2, pc, #4	@ (adr r2, 8006c1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c81 	.word	0x08006c81
 8006c20:	08006ebf 	.word	0x08006ebf
 8006c24:	08006ebf 	.word	0x08006ebf
 8006c28:	08006ebf 	.word	0x08006ebf
 8006c2c:	08006ebf 	.word	0x08006ebf
 8006c30:	08006ebf 	.word	0x08006ebf
 8006c34:	08006ebf 	.word	0x08006ebf
 8006c38:	08006ebf 	.word	0x08006ebf
 8006c3c:	08006ca7 	.word	0x08006ca7
 8006c40:	08006ebf 	.word	0x08006ebf
 8006c44:	08006ebf 	.word	0x08006ebf
 8006c48:	08006ebf 	.word	0x08006ebf
 8006c4c:	08006ebf 	.word	0x08006ebf
 8006c50:	08006ebf 	.word	0x08006ebf
 8006c54:	08006ebf 	.word	0x08006ebf
 8006c58:	08006ebf 	.word	0x08006ebf
 8006c5c:	08006cad 	.word	0x08006cad
 8006c60:	08006ebf 	.word	0x08006ebf
 8006c64:	08006ebf 	.word	0x08006ebf
 8006c68:	08006ebf 	.word	0x08006ebf
 8006c6c:	08006ebf 	.word	0x08006ebf
 8006c70:	08006ebf 	.word	0x08006ebf
 8006c74:	08006ebf 	.word	0x08006ebf
 8006c78:	08006ebf 	.word	0x08006ebf
 8006c7c:	08006cb3 	.word	0x08006cb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c80:	4b94      	ldr	r3, [pc, #592]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d009      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c8c:	4b91      	ldr	r3, [pc, #580]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	08db      	lsrs	r3, r3, #3
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	4a90      	ldr	r2, [pc, #576]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006c9e:	e111      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ca0:	4b8d      	ldr	r3, [pc, #564]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ca2:	61bb      	str	r3, [r7, #24]
      break;
 8006ca4:	e10e      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ca6:	4b8d      	ldr	r3, [pc, #564]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ca8:	61bb      	str	r3, [r7, #24]
      break;
 8006caa:	e10b      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006cac:	4b8c      	ldr	r3, [pc, #560]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006cae:	61bb      	str	r3, [r7, #24]
      break;
 8006cb0:	e108      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cb2:	4b88      	ldr	r3, [pc, #544]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006cbc:	4b85      	ldr	r3, [pc, #532]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	091b      	lsrs	r3, r3, #4
 8006cc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cc6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006cc8:	4b82      	ldr	r3, [pc, #520]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006cd2:	4b80      	ldr	r3, [pc, #512]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd6:	08db      	lsrs	r3, r3, #3
 8006cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80e1 	beq.w	8006eb8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	f000 8083 	beq.w	8006e04 <HAL_RCC_GetSysClockFreq+0x204>
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	f200 80a1 	bhi.w	8006e48 <HAL_RCC_GetSysClockFreq+0x248>
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_RCC_GetSysClockFreq+0x114>
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d056      	beq.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006d12:	e099      	b.n	8006e48 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d14:	4b6f      	ldr	r3, [pc, #444]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d02d      	beq.n	8006d7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d20:	4b6c      	ldr	r3, [pc, #432]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	08db      	lsrs	r3, r3, #3
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	4a6b      	ldr	r2, [pc, #428]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4a:	4b62      	ldr	r3, [pc, #392]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006d7a:	e087      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006ee8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d8e:	4b51      	ldr	r3, [pc, #324]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006da2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dbe:	e065      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006eec <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd2:	4b40      	ldr	r3, [pc, #256]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006de6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e02:	e043      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006ef0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e16:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e2a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e46:	e021      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e52:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006eec <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e6e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006e8c:	4b11      	ldr	r3, [pc, #68]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e90:	0a5b      	lsrs	r3, r3, #9
 8006e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e96:	3301      	adds	r3, #1
 8006e98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	ee07 3a90 	vmov	s15, r3
 8006ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb0:	ee17 3a90 	vmov	r3, s15
 8006eb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006eb6:	e005      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61bb      	str	r3, [r7, #24]
      break;
 8006ebc:	e002      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006ebe:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ec0:	61bb      	str	r3, [r7, #24]
      break;
 8006ec2:	bf00      	nop
  }

  return sysclockfreq;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3724      	adds	r7, #36	@ 0x24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	03d09000 	.word	0x03d09000
 8006edc:	003d0900 	.word	0x003d0900
 8006ee0:	007a1200 	.word	0x007a1200
 8006ee4:	46000000 	.word	0x46000000
 8006ee8:	4c742400 	.word	0x4c742400
 8006eec:	4a742400 	.word	0x4a742400
 8006ef0:	4af42400 	.word	0x4af42400

08006ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006efa:	f7ff fe81 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 8006efe:	4602      	mov	r2, r0
 8006f00:	4b10      	ldr	r3, [pc, #64]	@ (8006f44 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	0a1b      	lsrs	r3, r3, #8
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	490f      	ldr	r1, [pc, #60]	@ (8006f48 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f0c:	5ccb      	ldrb	r3, [r1, r3]
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	fa22 f303 	lsr.w	r3, r2, r3
 8006f16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f18:	4b0a      	ldr	r3, [pc, #40]	@ (8006f44 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	4a09      	ldr	r2, [pc, #36]	@ (8006f48 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f22:	5cd3      	ldrb	r3, [r2, r3]
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2e:	4a07      	ldr	r2, [pc, #28]	@ (8006f4c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f32:	4a07      	ldr	r2, [pc, #28]	@ (8006f50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f38:	4b04      	ldr	r3, [pc, #16]	@ (8006f4c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	58024400 	.word	0x58024400
 8006f48:	0801e8cc 	.word	0x0801e8cc
 8006f4c:	240049c4 	.word	0x240049c4
 8006f50:	240049c0 	.word	0x240049c0

08006f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f58:	f7ff ffcc 	bl	8006ef4 <HAL_RCC_GetHCLKFreq>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	4b06      	ldr	r3, [pc, #24]	@ (8006f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	091b      	lsrs	r3, r3, #4
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	4904      	ldr	r1, [pc, #16]	@ (8006f7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f6a:	5ccb      	ldrb	r3, [r1, r3]
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	0801e8cc 	.word	0x0801e8cc

08006f80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	223f      	movs	r2, #63	@ 0x3f
 8006f8e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f90:	4b1a      	ldr	r3, [pc, #104]	@ (8006ffc <HAL_RCC_GetClockConfig+0x7c>)
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	f003 0207 	and.w	r2, r3, #7
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006f9c:	4b17      	ldr	r3, [pc, #92]	@ (8006ffc <HAL_RCC_GetClockConfig+0x7c>)
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006fa8:	4b14      	ldr	r3, [pc, #80]	@ (8006ffc <HAL_RCC_GetClockConfig+0x7c>)
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	f003 020f 	and.w	r2, r3, #15
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006fb4:	4b11      	ldr	r3, [pc, #68]	@ (8006ffc <HAL_RCC_GetClockConfig+0x7c>)
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8006ffc <HAL_RCC_GetClockConfig+0x7c>)
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8006ffc <HAL_RCC_GetClockConfig+0x7c>)
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006fd8:	4b08      	ldr	r3, [pc, #32]	@ (8006ffc <HAL_RCC_GetClockConfig+0x7c>)
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fe4:	4b06      	ldr	r3, [pc, #24]	@ (8007000 <HAL_RCC_GetClockConfig+0x80>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 020f 	and.w	r2, r3, #15
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	601a      	str	r2, [r3, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	58024400 	.word	0x58024400
 8007000:	52002000 	.word	0x52002000

08007004 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007008:	b0c6      	sub	sp, #280	@ 0x118
 800700a:	af00      	add	r7, sp, #0
 800700c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007010:	2300      	movs	r3, #0
 8007012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007016:	2300      	movs	r3, #0
 8007018:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007028:	2500      	movs	r5, #0
 800702a:	ea54 0305 	orrs.w	r3, r4, r5
 800702e:	d049      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007036:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800703a:	d02f      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800703c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007040:	d828      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007042:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007046:	d01a      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007048:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800704c:	d822      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007056:	d007      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007058:	e01c      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705a:	4bab      	ldr	r3, [pc, #684]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	4aaa      	ldr	r2, [pc, #680]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007066:	e01a      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	3308      	adds	r3, #8
 800706e:	2102      	movs	r1, #2
 8007070:	4618      	mov	r0, r3
 8007072:	f001 f967 	bl	8008344 <RCCEx_PLL2_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800707c:	e00f      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007082:	3328      	adds	r3, #40	@ 0x28
 8007084:	2102      	movs	r1, #2
 8007086:	4618      	mov	r0, r3
 8007088:	f001 fa0e 	bl	80084a8 <RCCEx_PLL3_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007092:	e004      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800709a:	e000      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800709c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80070a6:	4b98      	ldr	r3, [pc, #608]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070b4:	4a94      	ldr	r2, [pc, #592]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070b6:	430b      	orrs	r3, r1
 80070b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80070ba:	e003      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80070d0:	f04f 0900 	mov.w	r9, #0
 80070d4:	ea58 0309 	orrs.w	r3, r8, r9
 80070d8:	d047      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d82a      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80070e4:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	08007101 	.word	0x08007101
 80070f0:	0800710f 	.word	0x0800710f
 80070f4:	08007125 	.word	0x08007125
 80070f8:	08007143 	.word	0x08007143
 80070fc:	08007143 	.word	0x08007143
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007100:	4b81      	ldr	r3, [pc, #516]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	4a80      	ldr	r2, [pc, #512]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800710a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800710c:	e01a      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	3308      	adds	r3, #8
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f001 f914 	bl	8008344 <RCCEx_PLL2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007122:	e00f      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007128:	3328      	adds	r3, #40	@ 0x28
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f001 f9bb 	bl	80084a8 <RCCEx_PLL3_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007138:	e004      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007140:	e000      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800714c:	4b6e      	ldr	r3, [pc, #440]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800714e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007150:	f023 0107 	bic.w	r1, r3, #7
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715a:	4a6b      	ldr	r2, [pc, #428]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800715c:	430b      	orrs	r3, r1
 800715e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007160:	e003      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007166:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007176:	f04f 0b00 	mov.w	fp, #0
 800717a:	ea5a 030b 	orrs.w	r3, sl, fp
 800717e:	d05b      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007184:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007188:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800718c:	d03b      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800718e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007192:	d834      	bhi.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007194:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007198:	d037      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800719a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800719e:	d82e      	bhi.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80071a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071a4:	d033      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80071a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071aa:	d828      	bhi.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80071ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071b0:	d01a      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80071b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071b6:	d822      	bhi.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80071bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071c0:	d007      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80071c2:	e01c      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c4:	4b50      	ldr	r3, [pc, #320]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c8:	4a4f      	ldr	r2, [pc, #316]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071d0:	e01e      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d6:	3308      	adds	r3, #8
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 f8b2 	bl	8008344 <RCCEx_PLL2_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071e6:	e013      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ec:	3328      	adds	r3, #40	@ 0x28
 80071ee:	2100      	movs	r1, #0
 80071f0:	4618      	mov	r0, r3
 80071f2:	f001 f959 	bl	80084a8 <RCCEx_PLL3_Config>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071fc:	e008      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007204:	e004      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007206:	bf00      	nop
 8007208:	e002      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800720a:	bf00      	nop
 800720c:	e000      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800720e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007218:	4b3b      	ldr	r3, [pc, #236]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800721a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007228:	4a37      	ldr	r2, [pc, #220]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800722a:	430b      	orrs	r3, r1
 800722c:	6593      	str	r3, [r2, #88]	@ 0x58
 800722e:	e003      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007230:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007234:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007244:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007248:	2300      	movs	r3, #0
 800724a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800724e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007252:	460b      	mov	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	d05d      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007260:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007264:	d03b      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007266:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800726a:	d834      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800726c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007270:	d037      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007272:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007276:	d82e      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007278:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800727c:	d033      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800727e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007282:	d828      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007288:	d01a      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800728a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800728e:	d822      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007298:	d007      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800729a:	e01c      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729c:	4b1a      	ldr	r3, [pc, #104]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	4a19      	ldr	r2, [pc, #100]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072a8:	e01e      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ae:	3308      	adds	r3, #8
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 f846 	bl	8008344 <RCCEx_PLL2_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072be:	e013      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c4:	3328      	adds	r3, #40	@ 0x28
 80072c6:	2100      	movs	r1, #0
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 f8ed 	bl	80084a8 <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072d4:	e008      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072dc:	e004      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072de:	bf00      	nop
 80072e0:	e002      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072e2:	bf00      	nop
 80072e4:	e000      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10d      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072f0:	4b05      	ldr	r3, [pc, #20]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007300:	4a01      	ldr	r2, [pc, #4]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007302:	430b      	orrs	r3, r1
 8007304:	6593      	str	r3, [r2, #88]	@ 0x58
 8007306:	e005      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007308:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007310:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007320:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007324:	2300      	movs	r3, #0
 8007326:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800732a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800732e:	460b      	mov	r3, r1
 8007330:	4313      	orrs	r3, r2
 8007332:	d03a      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800733a:	2b30      	cmp	r3, #48	@ 0x30
 800733c:	d01f      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800733e:	2b30      	cmp	r3, #48	@ 0x30
 8007340:	d819      	bhi.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007342:	2b20      	cmp	r3, #32
 8007344:	d00c      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007346:	2b20      	cmp	r3, #32
 8007348:	d815      	bhi.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d019      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800734e:	2b10      	cmp	r3, #16
 8007350:	d111      	bne.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007352:	4baa      	ldr	r3, [pc, #680]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007356:	4aa9      	ldr	r2, [pc, #676]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800735c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800735e:	e011      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	3308      	adds	r3, #8
 8007366:	2102      	movs	r1, #2
 8007368:	4618      	mov	r0, r3
 800736a:	f000 ffeb 	bl	8008344 <RCCEx_PLL2_Config>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007374:	e006      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800737c:	e002      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800737e:	bf00      	nop
 8007380:	e000      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800738c:	4b9b      	ldr	r3, [pc, #620]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800738e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007390:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800739a:	4a98      	ldr	r2, [pc, #608]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800739c:	430b      	orrs	r3, r1
 800739e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073a0:	e003      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80073b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073ba:	2300      	movs	r3, #0
 80073bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80073c4:	460b      	mov	r3, r1
 80073c6:	4313      	orrs	r3, r2
 80073c8:	d051      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073d4:	d035      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80073d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073da:	d82e      	bhi.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073e0:	d031      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80073e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073e6:	d828      	bhi.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ec:	d01a      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80073ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f2:	d822      	bhi.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80073f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fc:	d007      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80073fe:	e01c      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007400:	4b7e      	ldr	r3, [pc, #504]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	4a7d      	ldr	r2, [pc, #500]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800740a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800740c:	e01c      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007412:	3308      	adds	r3, #8
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f000 ff94 	bl	8008344 <RCCEx_PLL2_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007422:	e011      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	3328      	adds	r3, #40	@ 0x28
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f001 f83b 	bl	80084a8 <RCCEx_PLL3_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007438:	e006      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007440:	e002      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007442:	bf00      	nop
 8007444:	e000      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10a      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007450:	4b6a      	ldr	r3, [pc, #424]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007454:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745e:	4a67      	ldr	r2, [pc, #412]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007460:	430b      	orrs	r3, r1
 8007462:	6513      	str	r3, [r2, #80]	@ 0x50
 8007464:	e003      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800746a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800747a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800747e:	2300      	movs	r3, #0
 8007480:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007484:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007488:	460b      	mov	r3, r1
 800748a:	4313      	orrs	r3, r2
 800748c:	d053      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007498:	d033      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800749a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800749e:	d82c      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074a4:	d02f      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80074a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074aa:	d826      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074b0:	d02b      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80074b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074b6:	d820      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074bc:	d012      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80074be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074c2:	d81a      	bhi.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d022      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074cc:	d115      	bne.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d2:	3308      	adds	r3, #8
 80074d4:	2101      	movs	r1, #1
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 ff34 	bl	8008344 <RCCEx_PLL2_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074e2:	e015      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e8:	3328      	adds	r3, #40	@ 0x28
 80074ea:	2101      	movs	r1, #1
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 ffdb 	bl	80084a8 <RCCEx_PLL3_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074f8:	e00a      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007500:	e006      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007502:	bf00      	nop
 8007504:	e004      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007506:	bf00      	nop
 8007508:	e002      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800750e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007518:	4b38      	ldr	r3, [pc, #224]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800751a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800751c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007526:	4a35      	ldr	r2, [pc, #212]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007528:	430b      	orrs	r3, r1
 800752a:	6513      	str	r3, [r2, #80]	@ 0x50
 800752c:	e003      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007532:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007546:	2300      	movs	r3, #0
 8007548:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800754c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007550:	460b      	mov	r3, r1
 8007552:	4313      	orrs	r3, r2
 8007554:	d058      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800755e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007562:	d033      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007568:	d82c      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756e:	d02f      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007574:	d826      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007576:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800757a:	d02b      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800757c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007580:	d820      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007586:	d012      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800758c:	d81a      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d022      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007596:	d115      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759c:	3308      	adds	r3, #8
 800759e:	2101      	movs	r1, #1
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fecf 	bl	8008344 <RCCEx_PLL2_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075ac:	e015      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	3328      	adds	r3, #40	@ 0x28
 80075b4:	2101      	movs	r1, #1
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 ff76 	bl	80084a8 <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075c2:	e00a      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075ca:	e006      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075cc:	bf00      	nop
 80075ce:	e004      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075d0:	bf00      	nop
 80075d2:	e002      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075d4:	bf00      	nop
 80075d6:	e000      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80075d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10e      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80075e2:	4b06      	ldr	r3, [pc, #24]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075f2:	4a02      	ldr	r2, [pc, #8]	@ (80075fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80075f8:	e006      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80075fa:	bf00      	nop
 80075fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007604:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007618:	2300      	movs	r3, #0
 800761a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800761e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007622:	460b      	mov	r3, r1
 8007624:	4313      	orrs	r3, r2
 8007626:	d037      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800762e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007632:	d00e      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007638:	d816      	bhi.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d018      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800763e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007642:	d111      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007644:	4bc4      	ldr	r3, [pc, #784]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007648:	4ac3      	ldr	r2, [pc, #780]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800764a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800764e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007650:	e00f      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007656:	3308      	adds	r3, #8
 8007658:	2101      	movs	r1, #1
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fe72 	bl	8008344 <RCCEx_PLL2_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007666:	e004      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800766e:	e000      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007672:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800767a:	4bb7      	ldr	r3, [pc, #732]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800767c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800767e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007688:	4ab3      	ldr	r2, [pc, #716]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800768a:	430b      	orrs	r3, r1
 800768c:	6513      	str	r3, [r2, #80]	@ 0x50
 800768e:	e003      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007690:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007694:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80076a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076a8:	2300      	movs	r3, #0
 80076aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80076b2:	460b      	mov	r3, r1
 80076b4:	4313      	orrs	r3, r2
 80076b6:	d039      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80076b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d81c      	bhi.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80076c2:	a201      	add	r2, pc, #4	@ (adr r2, 80076c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	08007705 	.word	0x08007705
 80076cc:	080076d9 	.word	0x080076d9
 80076d0:	080076e7 	.word	0x080076e7
 80076d4:	08007705 	.word	0x08007705
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d8:	4b9f      	ldr	r3, [pc, #636]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076dc:	4a9e      	ldr	r2, [pc, #632]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076e4:	e00f      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ea:	3308      	adds	r3, #8
 80076ec:	2102      	movs	r1, #2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fe28 	bl	8008344 <RCCEx_PLL2_Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076fa:	e004      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007702:	e000      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007706:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800770e:	4b92      	ldr	r3, [pc, #584]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007712:	f023 0103 	bic.w	r1, r3, #3
 8007716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800771c:	4a8e      	ldr	r2, [pc, #568]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800771e:	430b      	orrs	r3, r1
 8007720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007722:	e003      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007728:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800772c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007738:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800773c:	2300      	movs	r3, #0
 800773e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007742:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007746:	460b      	mov	r3, r1
 8007748:	4313      	orrs	r3, r2
 800774a:	f000 8099 	beq.w	8007880 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800774e:	4b83      	ldr	r3, [pc, #524]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a82      	ldr	r2, [pc, #520]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007758:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800775a:	f7fa fc37 	bl	8001fcc <HAL_GetTick>
 800775e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007762:	e00b      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007764:	f7fa fc32 	bl	8001fcc <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b64      	cmp	r3, #100	@ 0x64
 8007772:	d903      	bls.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800777a:	e005      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800777c:	4b77      	ldr	r3, [pc, #476]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0ed      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007788:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800778c:	2b00      	cmp	r3, #0
 800778e:	d173      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007790:	4b71      	ldr	r3, [pc, #452]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007792:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800779c:	4053      	eors	r3, r2
 800779e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d015      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077a6:	4b6c      	ldr	r3, [pc, #432]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077b2:	4b69      	ldr	r3, [pc, #420]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b6:	4a68      	ldr	r2, [pc, #416]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077be:	4b66      	ldr	r3, [pc, #408]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c2:	4a65      	ldr	r2, [pc, #404]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077ca:	4a63      	ldr	r2, [pc, #396]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077de:	d118      	bne.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e0:	f7fa fbf4 	bl	8001fcc <HAL_GetTick>
 80077e4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077e8:	e00d      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ea:	f7fa fbef 	bl	8001fcc <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80077f4:	1ad2      	subs	r2, r2, r3
 80077f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d903      	bls.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007804:	e005      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007806:	4b54      	ldr	r3, [pc, #336]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0eb      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007816:	2b00      	cmp	r3, #0
 8007818:	d129      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800781a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800782a:	d10e      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800782c:	4b4a      	ldr	r3, [pc, #296]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800783c:	091a      	lsrs	r2, r3, #4
 800783e:	4b48      	ldr	r3, [pc, #288]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007840:	4013      	ands	r3, r2
 8007842:	4a45      	ldr	r2, [pc, #276]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007844:	430b      	orrs	r3, r1
 8007846:	6113      	str	r3, [r2, #16]
 8007848:	e005      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800784a:	4b43      	ldr	r3, [pc, #268]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	4a42      	ldr	r2, [pc, #264]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007850:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007854:	6113      	str	r3, [r2, #16]
 8007856:	4b40      	ldr	r3, [pc, #256]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007858:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007866:	4a3c      	ldr	r2, [pc, #240]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007868:	430b      	orrs	r3, r1
 800786a:	6713      	str	r3, [r2, #112]	@ 0x70
 800786c:	e008      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800786e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007872:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007876:	e003      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800787c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f002 0301 	and.w	r3, r2, #1
 800788c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007890:	2300      	movs	r3, #0
 8007892:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007896:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800789a:	460b      	mov	r3, r1
 800789c:	4313      	orrs	r3, r2
 800789e:	f000 808f 	beq.w	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80078a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078a8:	2b28      	cmp	r3, #40	@ 0x28
 80078aa:	d871      	bhi.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80078ac:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	08007999 	.word	0x08007999
 80078b8:	08007991 	.word	0x08007991
 80078bc:	08007991 	.word	0x08007991
 80078c0:	08007991 	.word	0x08007991
 80078c4:	08007991 	.word	0x08007991
 80078c8:	08007991 	.word	0x08007991
 80078cc:	08007991 	.word	0x08007991
 80078d0:	08007991 	.word	0x08007991
 80078d4:	08007965 	.word	0x08007965
 80078d8:	08007991 	.word	0x08007991
 80078dc:	08007991 	.word	0x08007991
 80078e0:	08007991 	.word	0x08007991
 80078e4:	08007991 	.word	0x08007991
 80078e8:	08007991 	.word	0x08007991
 80078ec:	08007991 	.word	0x08007991
 80078f0:	08007991 	.word	0x08007991
 80078f4:	0800797b 	.word	0x0800797b
 80078f8:	08007991 	.word	0x08007991
 80078fc:	08007991 	.word	0x08007991
 8007900:	08007991 	.word	0x08007991
 8007904:	08007991 	.word	0x08007991
 8007908:	08007991 	.word	0x08007991
 800790c:	08007991 	.word	0x08007991
 8007910:	08007991 	.word	0x08007991
 8007914:	08007999 	.word	0x08007999
 8007918:	08007991 	.word	0x08007991
 800791c:	08007991 	.word	0x08007991
 8007920:	08007991 	.word	0x08007991
 8007924:	08007991 	.word	0x08007991
 8007928:	08007991 	.word	0x08007991
 800792c:	08007991 	.word	0x08007991
 8007930:	08007991 	.word	0x08007991
 8007934:	08007999 	.word	0x08007999
 8007938:	08007991 	.word	0x08007991
 800793c:	08007991 	.word	0x08007991
 8007940:	08007991 	.word	0x08007991
 8007944:	08007991 	.word	0x08007991
 8007948:	08007991 	.word	0x08007991
 800794c:	08007991 	.word	0x08007991
 8007950:	08007991 	.word	0x08007991
 8007954:	08007999 	.word	0x08007999
 8007958:	58024400 	.word	0x58024400
 800795c:	58024800 	.word	0x58024800
 8007960:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007968:	3308      	adds	r3, #8
 800796a:	2101      	movs	r1, #1
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fce9 	bl	8008344 <RCCEx_PLL2_Config>
 8007972:	4603      	mov	r3, r0
 8007974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007978:	e00f      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	3328      	adds	r3, #40	@ 0x28
 8007980:	2101      	movs	r1, #1
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fd90 	bl	80084a8 <RCCEx_PLL3_Config>
 8007988:	4603      	mov	r3, r0
 800798a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800798e:	e004      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007996:	e000      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800799a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079a2:	4bbf      	ldr	r3, [pc, #764]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80079aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079b0:	4abb      	ldr	r2, [pc, #748]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079b2:	430b      	orrs	r3, r1
 80079b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80079b6:	e003      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f002 0302 	and.w	r3, r2, #2
 80079cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079d0:	2300      	movs	r3, #0
 80079d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80079da:	460b      	mov	r3, r1
 80079dc:	4313      	orrs	r3, r2
 80079de:	d041      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d824      	bhi.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80079ea:	a201      	add	r2, pc, #4	@ (adr r2, 80079f0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a3d 	.word	0x08007a3d
 80079f4:	08007a09 	.word	0x08007a09
 80079f8:	08007a1f 	.word	0x08007a1f
 80079fc:	08007a3d 	.word	0x08007a3d
 8007a00:	08007a3d 	.word	0x08007a3d
 8007a04:	08007a3d 	.word	0x08007a3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	2101      	movs	r1, #1
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fc97 	bl	8008344 <RCCEx_PLL2_Config>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a1c:	e00f      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a22:	3328      	adds	r3, #40	@ 0x28
 8007a24:	2101      	movs	r1, #1
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 fd3e 	bl	80084a8 <RCCEx_PLL3_Config>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a32:	e004      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a3a:	e000      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a46:	4b96      	ldr	r3, [pc, #600]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4a:	f023 0107 	bic.w	r1, r3, #7
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a54:	4a92      	ldr	r2, [pc, #584]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a56:	430b      	orrs	r3, r1
 8007a58:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a5a:	e003      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f002 0304 	and.w	r3, r2, #4
 8007a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a7a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4313      	orrs	r3, r2
 8007a82:	d044      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a8c:	2b05      	cmp	r3, #5
 8007a8e:	d825      	bhi.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007a90:	a201      	add	r2, pc, #4	@ (adr r2, 8007a98 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007ae5 	.word	0x08007ae5
 8007a9c:	08007ab1 	.word	0x08007ab1
 8007aa0:	08007ac7 	.word	0x08007ac7
 8007aa4:	08007ae5 	.word	0x08007ae5
 8007aa8:	08007ae5 	.word	0x08007ae5
 8007aac:	08007ae5 	.word	0x08007ae5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fc43 	bl	8008344 <RCCEx_PLL2_Config>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ac4:	e00f      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	3328      	adds	r3, #40	@ 0x28
 8007acc:	2101      	movs	r1, #1
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fcea 	bl	80084a8 <RCCEx_PLL3_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ada:	e004      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ae2:	e000      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007aee:	4b6c      	ldr	r3, [pc, #432]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af2:	f023 0107 	bic.w	r1, r3, #7
 8007af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afe:	4a68      	ldr	r2, [pc, #416]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b00:	430b      	orrs	r3, r1
 8007b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b04:	e003      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f002 0320 	and.w	r3, r2, #32
 8007b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	d055      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b3a:	d033      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b40:	d82c      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b46:	d02f      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b4c:	d826      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b52:	d02b      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007b54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b58:	d820      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b5e:	d012      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b64:	d81a      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d022      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b6e:	d115      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b74:	3308      	adds	r3, #8
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fbe3 	bl	8008344 <RCCEx_PLL2_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b84:	e015      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8a:	3328      	adds	r3, #40	@ 0x28
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fc8a 	bl	80084a8 <RCCEx_PLL3_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b9a:	e00a      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ba2:	e006      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007ba4:	bf00      	nop
 8007ba6:	e004      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007ba8:	bf00      	nop
 8007baa:	e002      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007bac:	bf00      	nop
 8007bae:	e000      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bba:	4b39      	ldr	r3, [pc, #228]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bbe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bca:	4a35      	ldr	r2, [pc, #212]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bd0:	e003      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007be6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bea:	2300      	movs	r3, #0
 8007bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bf0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	d058      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c06:	d033      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007c08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c0c:	d82c      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c12:	d02f      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c18:	d826      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c1e:	d02b      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007c20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c24:	d820      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c2a:	d012      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c30:	d81a      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d022      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c3a:	d115      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c40:	3308      	adds	r3, #8
 8007c42:	2100      	movs	r1, #0
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fb7d 	bl	8008344 <RCCEx_PLL2_Config>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c50:	e015      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c56:	3328      	adds	r3, #40	@ 0x28
 8007c58:	2102      	movs	r1, #2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 fc24 	bl	80084a8 <RCCEx_PLL3_Config>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c66:	e00a      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c6e:	e006      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c70:	bf00      	nop
 8007c72:	e004      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10e      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c86:	4b06      	ldr	r3, [pc, #24]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c96:	4a02      	ldr	r2, [pc, #8]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c9c:	e006      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007c9e:	bf00      	nop
 8007ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ca8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007cb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cc2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d055      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cd4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007cd8:	d033      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007cda:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007cde:	d82c      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ce4:	d02f      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cea:	d826      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cf0:	d02b      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007cf2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cf6:	d820      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cfc:	d012      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d02:	d81a      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d022      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d0c:	d115      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d12:	3308      	adds	r3, #8
 8007d14:	2100      	movs	r1, #0
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fb14 	bl	8008344 <RCCEx_PLL2_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d22:	e015      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d28:	3328      	adds	r3, #40	@ 0x28
 8007d2a:	2102      	movs	r1, #2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fbbb 	bl	80084a8 <RCCEx_PLL3_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d38:	e00a      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d40:	e006      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d42:	bf00      	nop
 8007d44:	e004      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d46:	bf00      	nop
 8007d48:	e002      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10b      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d58:	4ba0      	ldr	r3, [pc, #640]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d68:	4a9c      	ldr	r2, [pc, #624]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d6e:	e003      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	f002 0308 	and.w	r3, r2, #8
 8007d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d8e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007d92:	460b      	mov	r3, r1
 8007d94:	4313      	orrs	r3, r2
 8007d96:	d01e      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007da4:	d10c      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007daa:	3328      	adds	r3, #40	@ 0x28
 8007dac:	2102      	movs	r1, #2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fb7a 	bl	80084a8 <RCCEx_PLL3_Config>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007dc0:	4b86      	ldr	r3, [pc, #536]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dd0:	4a82      	ldr	r2, [pc, #520]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f002 0310 	and.w	r3, r2, #16
 8007de2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007de6:	2300      	movs	r3, #0
 8007de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007df0:	460b      	mov	r3, r1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	d01e      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e02:	d10c      	bne.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e08:	3328      	adds	r3, #40	@ 0x28
 8007e0a:	2102      	movs	r1, #2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fb4b 	bl	80084a8 <RCCEx_PLL3_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e2e:	4a6b      	ldr	r2, [pc, #428]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e30:	430b      	orrs	r3, r1
 8007e32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e42:	2300      	movs	r3, #0
 8007e44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	d03e      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e5c:	d022      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e62:	d81b      	bhi.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e6c:	d00b      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007e6e:	e015      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e74:	3308      	adds	r3, #8
 8007e76:	2100      	movs	r1, #0
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fa63 	bl	8008344 <RCCEx_PLL2_Config>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e84:	e00f      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8a:	3328      	adds	r3, #40	@ 0x28
 8007e8c:	2102      	movs	r1, #2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fb0a 	bl	80084a8 <RCCEx_PLL3_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e9a:	e004      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ea2:	e000      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10b      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eae:	4b4b      	ldr	r3, [pc, #300]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ebe:	4a47      	ldr	r2, [pc, #284]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ec4:	e003      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007eda:	673b      	str	r3, [r7, #112]	@ 0x70
 8007edc:	2300      	movs	r3, #0
 8007ede:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ee0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	d03b      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ef6:	d01f      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007ef8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007efc:	d818      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f02:	d003      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007f04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f08:	d007      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007f0a:	e011      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f0c:	4b33      	ldr	r3, [pc, #204]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f10:	4a32      	ldr	r2, [pc, #200]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f18:	e00f      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1e:	3328      	adds	r3, #40	@ 0x28
 8007f20:	2101      	movs	r1, #1
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fac0 	bl	80084a8 <RCCEx_PLL3_Config>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f2e:	e004      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f36:	e000      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10b      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f42:	4b26      	ldr	r3, [pc, #152]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f52:	4a22      	ldr	r2, [pc, #136]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f54:	430b      	orrs	r3, r1
 8007f56:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f58:	e003      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f70:	2300      	movs	r3, #0
 8007f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	d034      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f8c:	d007      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007f8e:	e011      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f90:	4b12      	ldr	r3, [pc, #72]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f94:	4a11      	ldr	r2, [pc, #68]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f9c:	e00e      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	2102      	movs	r1, #2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 f9cc 	bl	8008344 <RCCEx_PLL2_Config>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fb2:	e003      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10d      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fc4:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd2:	4a02      	ldr	r2, [pc, #8]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fd4:	430b      	orrs	r3, r1
 8007fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fd8:	e006      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007fda:	bf00      	nop
 8007fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ffa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ffe:	460b      	mov	r3, r1
 8008000:	4313      	orrs	r3, r2
 8008002:	d00c      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008008:	3328      	adds	r3, #40	@ 0x28
 800800a:	2102      	movs	r1, #2
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fa4b 	bl	80084a8 <RCCEx_PLL3_Config>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800801e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800802a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800802c:	2300      	movs	r3, #0
 800802e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008030:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008034:	460b      	mov	r3, r1
 8008036:	4313      	orrs	r3, r2
 8008038:	d036      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008044:	d018      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800804a:	d811      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800804c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008050:	d014      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008056:	d80b      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d011      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800805c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008060:	d106      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008062:	4bb7      	ldr	r3, [pc, #732]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008066:	4ab6      	ldr	r2, [pc, #728]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800806c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800806e:	e008      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008076:	e004      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008078:	bf00      	nop
 800807a:	e002      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800807c:	bf00      	nop
 800807e:	e000      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10a      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800808a:	4bad      	ldr	r3, [pc, #692]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800808c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008098:	4aa9      	ldr	r2, [pc, #676]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800809a:	430b      	orrs	r3, r1
 800809c:	6553      	str	r3, [r2, #84]	@ 0x54
 800809e:	e003      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80080b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80080b6:	2300      	movs	r3, #0
 80080b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80080ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80080be:	460b      	mov	r3, r1
 80080c0:	4313      	orrs	r3, r2
 80080c2:	d009      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080c4:	4b9e      	ldr	r3, [pc, #632]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80080cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d2:	4a9b      	ldr	r2, [pc, #620]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80080e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080e6:	2300      	movs	r3, #0
 80080e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80080ee:	460b      	mov	r3, r1
 80080f0:	4313      	orrs	r3, r2
 80080f2:	d009      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080f4:	4b92      	ldr	r3, [pc, #584]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80080fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008102:	4a8f      	ldr	r2, [pc, #572]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008104:	430b      	orrs	r3, r1
 8008106:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008114:	643b      	str	r3, [r7, #64]	@ 0x40
 8008116:	2300      	movs	r3, #0
 8008118:	647b      	str	r3, [r7, #68]	@ 0x44
 800811a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d00e      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008124:	4b86      	ldr	r3, [pc, #536]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	4a85      	ldr	r2, [pc, #532]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800812a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800812e:	6113      	str	r3, [r2, #16]
 8008130:	4b83      	ldr	r3, [pc, #524]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008132:	6919      	ldr	r1, [r3, #16]
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800813c:	4a80      	ldr	r2, [pc, #512]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800813e:	430b      	orrs	r3, r1
 8008140:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800814e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008154:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008158:	460b      	mov	r3, r1
 800815a:	4313      	orrs	r3, r2
 800815c:	d009      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800815e:	4b78      	ldr	r3, [pc, #480]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008162:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800816c:	4a74      	ldr	r2, [pc, #464]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800816e:	430b      	orrs	r3, r1
 8008170:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800817e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008180:	2300      	movs	r3, #0
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34
 8008184:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008188:	460b      	mov	r3, r1
 800818a:	4313      	orrs	r3, r2
 800818c:	d00a      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800818e:	4b6c      	ldr	r3, [pc, #432]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008192:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800819e:	4a68      	ldr	r2, [pc, #416]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081a0:	430b      	orrs	r3, r1
 80081a2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	2100      	movs	r1, #0
 80081ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80081ba:	460b      	mov	r3, r1
 80081bc:	4313      	orrs	r3, r2
 80081be:	d011      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c4:	3308      	adds	r3, #8
 80081c6:	2100      	movs	r1, #0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 f8bb 	bl	8008344 <RCCEx_PLL2_Config>
 80081ce:	4603      	mov	r3, r0
 80081d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80081d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	2100      	movs	r1, #0
 80081ee:	6239      	str	r1, [r7, #32]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80081f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80081fa:	460b      	mov	r3, r1
 80081fc:	4313      	orrs	r3, r2
 80081fe:	d011      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008204:	3308      	adds	r3, #8
 8008206:	2101      	movs	r1, #1
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f89b 	bl	8008344 <RCCEx_PLL2_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008220:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	2100      	movs	r1, #0
 800822e:	61b9      	str	r1, [r7, #24]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800823a:	460b      	mov	r3, r1
 800823c:	4313      	orrs	r3, r2
 800823e:	d011      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008244:	3308      	adds	r3, #8
 8008246:	2102      	movs	r1, #2
 8008248:	4618      	mov	r0, r3
 800824a:	f000 f87b 	bl	8008344 <RCCEx_PLL2_Config>
 800824e:	4603      	mov	r3, r0
 8008250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008260:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	2100      	movs	r1, #0
 800826e:	6139      	str	r1, [r7, #16]
 8008270:	f003 0308 	and.w	r3, r3, #8
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800827a:	460b      	mov	r3, r1
 800827c:	4313      	orrs	r3, r2
 800827e:	d011      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008284:	3328      	adds	r3, #40	@ 0x28
 8008286:	2100      	movs	r1, #0
 8008288:	4618      	mov	r0, r3
 800828a:	f000 f90d 	bl	80084a8 <RCCEx_PLL3_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	2100      	movs	r1, #0
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80082ba:	460b      	mov	r3, r1
 80082bc:	4313      	orrs	r3, r2
 80082be:	d011      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c4:	3328      	adds	r3, #40	@ 0x28
 80082c6:	2101      	movs	r1, #1
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f8ed 	bl	80084a8 <RCCEx_PLL3_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80082e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	2100      	movs	r1, #0
 80082ee:	6039      	str	r1, [r7, #0]
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80082fa:	460b      	mov	r3, r1
 80082fc:	4313      	orrs	r3, r2
 80082fe:	d011      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008304:	3328      	adds	r3, #40	@ 0x28
 8008306:	2102      	movs	r1, #2
 8008308:	4618      	mov	r0, r3
 800830a:	f000 f8cd 	bl	80084a8 <RCCEx_PLL3_Config>
 800830e:	4603      	mov	r3, r0
 8008310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008320:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008324:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	e000      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
}
 8008332:	4618      	mov	r0, r3
 8008334:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008338:	46bd      	mov	sp, r7
 800833a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800833e:	bf00      	nop
 8008340:	58024400 	.word	0x58024400

08008344 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008352:	4b53      	ldr	r3, [pc, #332]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	2b03      	cmp	r3, #3
 800835c:	d101      	bne.n	8008362 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e099      	b.n	8008496 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008362:	4b4f      	ldr	r3, [pc, #316]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a4e      	ldr	r2, [pc, #312]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008368:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800836c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800836e:	f7f9 fe2d 	bl	8001fcc <HAL_GetTick>
 8008372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008374:	e008      	b.n	8008388 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008376:	f7f9 fe29 	bl	8001fcc <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d901      	bls.n	8008388 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e086      	b.n	8008496 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008388:	4b45      	ldr	r3, [pc, #276]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f0      	bne.n	8008376 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008394:	4b42      	ldr	r3, [pc, #264]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	031b      	lsls	r3, r3, #12
 80083a2:	493f      	ldr	r1, [pc, #252]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	025b      	lsls	r3, r3, #9
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	431a      	orrs	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	041b      	lsls	r3, r3, #16
 80083c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	061b      	lsls	r3, r3, #24
 80083d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083d8:	4931      	ldr	r1, [pc, #196]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083de:	4b30      	ldr	r3, [pc, #192]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	492d      	ldr	r1, [pc, #180]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083f0:	4b2b      	ldr	r3, [pc, #172]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f4:	f023 0220 	bic.w	r2, r3, #32
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	4928      	ldr	r1, [pc, #160]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008402:	4b27      	ldr	r3, [pc, #156]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008406:	4a26      	ldr	r2, [pc, #152]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008408:	f023 0310 	bic.w	r3, r3, #16
 800840c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800840e:	4b24      	ldr	r3, [pc, #144]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008410:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008412:	4b24      	ldr	r3, [pc, #144]	@ (80084a4 <RCCEx_PLL2_Config+0x160>)
 8008414:	4013      	ands	r3, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	69d2      	ldr	r2, [r2, #28]
 800841a:	00d2      	lsls	r2, r2, #3
 800841c:	4920      	ldr	r1, [pc, #128]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800841e:	4313      	orrs	r3, r2
 8008420:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008422:	4b1f      	ldr	r3, [pc, #124]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008426:	4a1e      	ldr	r2, [pc, #120]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008428:	f043 0310 	orr.w	r3, r3, #16
 800842c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d106      	bne.n	8008442 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008434:	4b1a      	ldr	r3, [pc, #104]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008438:	4a19      	ldr	r2, [pc, #100]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800843a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800843e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008440:	e00f      	b.n	8008462 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d106      	bne.n	8008456 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008448:	4b15      	ldr	r3, [pc, #84]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844c:	4a14      	ldr	r2, [pc, #80]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800844e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008452:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008454:	e005      	b.n	8008462 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008456:	4b12      	ldr	r3, [pc, #72]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845a:	4a11      	ldr	r2, [pc, #68]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800845c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008460:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008462:	4b0f      	ldr	r3, [pc, #60]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a0e      	ldr	r2, [pc, #56]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008468:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800846c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800846e:	f7f9 fdad 	bl	8001fcc <HAL_GetTick>
 8008472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008474:	e008      	b.n	8008488 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008476:	f7f9 fda9 	bl	8001fcc <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d901      	bls.n	8008488 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e006      	b.n	8008496 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008488:	4b05      	ldr	r3, [pc, #20]	@ (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0f0      	beq.n	8008476 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	58024400 	.word	0x58024400
 80084a4:	ffff0007 	.word	0xffff0007

080084a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084b6:	4b53      	ldr	r3, [pc, #332]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d101      	bne.n	80084c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e099      	b.n	80085fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80084c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a4e      	ldr	r2, [pc, #312]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084d2:	f7f9 fd7b 	bl	8001fcc <HAL_GetTick>
 80084d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084d8:	e008      	b.n	80084ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084da:	f7f9 fd77 	bl	8001fcc <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d901      	bls.n	80084ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e086      	b.n	80085fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084ec:	4b45      	ldr	r3, [pc, #276]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f0      	bne.n	80084da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084f8:	4b42      	ldr	r3, [pc, #264]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	051b      	lsls	r3, r3, #20
 8008506:	493f      	ldr	r1, [pc, #252]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008508:	4313      	orrs	r3, r2
 800850a:	628b      	str	r3, [r1, #40]	@ 0x28
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	3b01      	subs	r3, #1
 8008512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	3b01      	subs	r3, #1
 800851c:	025b      	lsls	r3, r3, #9
 800851e:	b29b      	uxth	r3, r3
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	3b01      	subs	r3, #1
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	3b01      	subs	r3, #1
 8008536:	061b      	lsls	r3, r3, #24
 8008538:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800853c:	4931      	ldr	r1, [pc, #196]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 800853e:	4313      	orrs	r3, r2
 8008540:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008542:	4b30      	ldr	r3, [pc, #192]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	492d      	ldr	r1, [pc, #180]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008550:	4313      	orrs	r3, r2
 8008552:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008554:	4b2b      	ldr	r3, [pc, #172]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008558:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	4928      	ldr	r1, [pc, #160]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008562:	4313      	orrs	r3, r2
 8008564:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008566:	4b27      	ldr	r3, [pc, #156]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856a:	4a26      	ldr	r2, [pc, #152]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 800856c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008570:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008572:	4b24      	ldr	r3, [pc, #144]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008576:	4b24      	ldr	r3, [pc, #144]	@ (8008608 <RCCEx_PLL3_Config+0x160>)
 8008578:	4013      	ands	r3, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	69d2      	ldr	r2, [r2, #28]
 800857e:	00d2      	lsls	r2, r2, #3
 8008580:	4920      	ldr	r1, [pc, #128]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008582:	4313      	orrs	r3, r2
 8008584:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008586:	4b1f      	ldr	r3, [pc, #124]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858a:	4a1e      	ldr	r2, [pc, #120]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 800858c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008590:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008598:	4b1a      	ldr	r3, [pc, #104]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 800859a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859c:	4a19      	ldr	r2, [pc, #100]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 800859e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80085a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80085a4:	e00f      	b.n	80085c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d106      	bne.n	80085ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80085ac:	4b15      	ldr	r3, [pc, #84]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b0:	4a14      	ldr	r2, [pc, #80]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80085b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80085b8:	e005      	b.n	80085c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80085ba:	4b12      	ldr	r3, [pc, #72]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085be:	4a11      	ldr	r2, [pc, #68]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80085c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80085c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085d2:	f7f9 fcfb 	bl	8001fcc <HAL_GetTick>
 80085d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085d8:	e008      	b.n	80085ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085da:	f7f9 fcf7 	bl	8001fcc <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d901      	bls.n	80085ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e006      	b.n	80085fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085ec:	4b05      	ldr	r3, [pc, #20]	@ (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0f0      	beq.n	80085da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	58024400 	.word	0x58024400
 8008608:	ffff0007 	.word	0xffff0007

0800860c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e10f      	b.n	800883e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a87      	ldr	r2, [pc, #540]	@ (8008848 <HAL_SPI_Init+0x23c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00f      	beq.n	800864e <HAL_SPI_Init+0x42>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a86      	ldr	r2, [pc, #536]	@ (800884c <HAL_SPI_Init+0x240>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00a      	beq.n	800864e <HAL_SPI_Init+0x42>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a84      	ldr	r2, [pc, #528]	@ (8008850 <HAL_SPI_Init+0x244>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d005      	beq.n	800864e <HAL_SPI_Init+0x42>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	2b0f      	cmp	r3, #15
 8008648:	d901      	bls.n	800864e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e0f7      	b.n	800883e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 fb82 	bl	8009d58 <SPI_GetPacketSize>
 8008654:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a7b      	ldr	r2, [pc, #492]	@ (8008848 <HAL_SPI_Init+0x23c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00c      	beq.n	800867a <HAL_SPI_Init+0x6e>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a79      	ldr	r2, [pc, #484]	@ (800884c <HAL_SPI_Init+0x240>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d007      	beq.n	800867a <HAL_SPI_Init+0x6e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a78      	ldr	r2, [pc, #480]	@ (8008850 <HAL_SPI_Init+0x244>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d002      	beq.n	800867a <HAL_SPI_Init+0x6e>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b08      	cmp	r3, #8
 8008678:	d811      	bhi.n	800869e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800867e:	4a72      	ldr	r2, [pc, #456]	@ (8008848 <HAL_SPI_Init+0x23c>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d009      	beq.n	8008698 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a70      	ldr	r2, [pc, #448]	@ (800884c <HAL_SPI_Init+0x240>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d004      	beq.n	8008698 <HAL_SPI_Init+0x8c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a6f      	ldr	r2, [pc, #444]	@ (8008850 <HAL_SPI_Init+0x244>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d104      	bne.n	80086a2 <HAL_SPI_Init+0x96>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b10      	cmp	r3, #16
 800869c:	d901      	bls.n	80086a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e0cd      	b.n	800883e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d106      	bne.n	80086bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7f8 febc 	bl	8001434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0201 	bic.w	r2, r2, #1
 80086d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80086de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086e8:	d119      	bne.n	800871e <HAL_SPI_Init+0x112>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086f2:	d103      	bne.n	80086fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d008      	beq.n	800870e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10c      	bne.n	800871e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800870c:	d107      	bne.n	800871e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800871c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00f      	beq.n	800874a <HAL_SPI_Init+0x13e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b06      	cmp	r3, #6
 8008730:	d90b      	bls.n	800874a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	e007      	b.n	800875a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008758:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69da      	ldr	r2, [r3, #28]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008762:	431a      	orrs	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800876c:	ea42 0103 	orr.w	r1, r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	431a      	orrs	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	431a      	orrs	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	431a      	orrs	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	431a      	orrs	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	431a      	orrs	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ba:	ea42 0103 	orr.w	r1, r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d113      	bne.n	80087fa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80087f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0201 	bic.w	r2, r2, #1
 8008808:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	40013000 	.word	0x40013000
 800884c:	40003800 	.word	0x40003800
 8008850:	40003c00 	.word	0x40003c00

08008854 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af02      	add	r7, sp, #8
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	4613      	mov	r3, r2
 8008862:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3320      	adds	r3, #32
 800886a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800886c:	f7f9 fbae 	bl	8001fcc <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b01      	cmp	r3, #1
 800887c:	d001      	beq.n	8008882 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800887e:	2302      	movs	r3, #2
 8008880:	e1d1      	b.n	8008c26 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <HAL_SPI_Transmit+0x3a>
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e1c9      	b.n	8008c26 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008898:	2b01      	cmp	r3, #1
 800889a:	d101      	bne.n	80088a0 <HAL_SPI_Transmit+0x4c>
 800889c:	2302      	movs	r3, #2
 800889e:	e1c2      	b.n	8008c26 <HAL_SPI_Transmit+0x3d2>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2203      	movs	r2, #3
 80088ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	88fa      	ldrh	r2, [r7, #6]
 80088c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	88fa      	ldrh	r2, [r7, #6]
 80088ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80088f8:	d108      	bne.n	800890c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	e009      	b.n	8008920 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800891e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	4b96      	ldr	r3, [pc, #600]	@ (8008b80 <HAL_SPI_Transmit+0x32c>)
 8008928:	4013      	ands	r3, r2
 800892a:	88f9      	ldrh	r1, [r7, #6]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	6812      	ldr	r2, [r2, #0]
 8008930:	430b      	orrs	r3, r1
 8008932:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800894c:	d107      	bne.n	800895e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800895c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	2b0f      	cmp	r3, #15
 8008964:	d947      	bls.n	80089f6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008966:	e03f      	b.n	80089e8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b02      	cmp	r3, #2
 8008974:	d114      	bne.n	80089a0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6812      	ldr	r2, [r2, #0]
 8008980:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008986:	1d1a      	adds	r2, r3, #4
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008992:	b29b      	uxth	r3, r3
 8008994:	3b01      	subs	r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800899e:	e023      	b.n	80089e8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089a0:	f7f9 fb14 	bl	8001fcc <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d803      	bhi.n	80089b8 <HAL_SPI_Transmit+0x164>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b6:	d102      	bne.n	80089be <HAL_SPI_Transmit+0x16a>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d114      	bne.n	80089e8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f001 f8fc 	bl	8009bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e11e      	b.n	8008c26 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1b9      	bne.n	8008968 <HAL_SPI_Transmit+0x114>
 80089f4:	e0f1      	b.n	8008bda <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	2b07      	cmp	r3, #7
 80089fc:	f240 80e6 	bls.w	8008bcc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008a00:	e05d      	b.n	8008abe <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d132      	bne.n	8008a76 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d918      	bls.n	8008a4e <HAL_SPI_Transmit+0x1fa>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d014      	beq.n	8008a4e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6812      	ldr	r2, [r2, #0]
 8008a2e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a34:	1d1a      	adds	r2, r3, #4
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	3b02      	subs	r3, #2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008a4c:	e037      	b.n	8008abe <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a52:	881a      	ldrh	r2, [r3, #0]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a5c:	1c9a      	adds	r2, r3, #2
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008a74:	e023      	b.n	8008abe <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a76:	f7f9 faa9 	bl	8001fcc <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d803      	bhi.n	8008a8e <HAL_SPI_Transmit+0x23a>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d102      	bne.n	8008a94 <HAL_SPI_Transmit+0x240>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d114      	bne.n	8008abe <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f001 f891 	bl	8009bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aa0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e0b3      	b.n	8008c26 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d19b      	bne.n	8008a02 <HAL_SPI_Transmit+0x1ae>
 8008aca:	e086      	b.n	8008bda <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d154      	bne.n	8008b84 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d918      	bls.n	8008b18 <HAL_SPI_Transmit+0x2c4>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aea:	2b40      	cmp	r3, #64	@ 0x40
 8008aec:	d914      	bls.n	8008b18 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008afe:	1d1a      	adds	r2, r3, #4
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008b16:	e059      	b.n	8008bcc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d917      	bls.n	8008b54 <HAL_SPI_Transmit+0x300>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d013      	beq.n	8008b54 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b30:	881a      	ldrh	r2, [r3, #0]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b3a:	1c9a      	adds	r2, r3, #2
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	3b02      	subs	r3, #2
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008b52:	e03b      	b.n	8008bcc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3320      	adds	r3, #32
 8008b5e:	7812      	ldrb	r2, [r2, #0]
 8008b60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	3b01      	subs	r3, #1
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008b7e:	e025      	b.n	8008bcc <HAL_SPI_Transmit+0x378>
 8008b80:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b84:	f7f9 fa22 	bl	8001fcc <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d803      	bhi.n	8008b9c <HAL_SPI_Transmit+0x348>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d102      	bne.n	8008ba2 <HAL_SPI_Transmit+0x34e>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d114      	bne.n	8008bcc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f001 f80a 	bl	8009bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e02c      	b.n	8008c26 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f47f af79 	bne.w	8008acc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2200      	movs	r2, #0
 8008be2:	2108      	movs	r1, #8
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f001 f889 	bl	8009cfc <SPI_WaitOnFlagUntilTimeout>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d007      	beq.n	8008c00 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bf6:	f043 0220 	orr.w	r2, r3, #32
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 ffdb 	bl	8009bbc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e000      	b.n	8008c26 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008c24:	2300      	movs	r3, #0
  }
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop

08008c30 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c44:	095b      	lsrs	r3, r3, #5
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3301      	adds	r3, #1
 8008c4a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3330      	adds	r3, #48	@ 0x30
 8008c52:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c54:	f7f9 f9ba 	bl	8001fcc <HAL_GetTick>
 8008c58:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d001      	beq.n	8008c6a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008c66:	2302      	movs	r3, #2
 8008c68:	e250      	b.n	800910c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <HAL_SPI_Receive+0x46>
 8008c70:	88fb      	ldrh	r3, [r7, #6]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e248      	b.n	800910c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_SPI_Receive+0x58>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e241      	b.n	800910c <HAL_SPI_Receive+0x4dc>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2204      	movs	r2, #4
 8008c94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	88fa      	ldrh	r2, [r7, #6]
 8008caa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	88fa      	ldrh	r2, [r7, #6]
 8008cb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008ce0:	d108      	bne.n	8008cf4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	e009      	b.n	8008d08 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008d06:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	4b95      	ldr	r3, [pc, #596]	@ (8008f64 <HAL_SPI_Receive+0x334>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	88f9      	ldrh	r1, [r7, #6]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	6812      	ldr	r2, [r2, #0]
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0201 	orr.w	r2, r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d34:	d107      	bne.n	8008d46 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	2b0f      	cmp	r3, #15
 8008d4c:	d96c      	bls.n	8008e28 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008d4e:	e064      	b.n	8008e1a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d114      	bne.n	8008d90 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d70:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d76:	1d1a      	adds	r2, r3, #4
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	3b01      	subs	r3, #1
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d8e:	e044      	b.n	8008e1a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	8bfa      	ldrh	r2, [r7, #30]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d919      	bls.n	8008dd2 <HAL_SPI_Receive+0x1a2>
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d014      	beq.n	8008dd2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008db0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008db2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008db8:	1d1a      	adds	r2, r3, #4
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008dd0:	e023      	b.n	8008e1a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dd2:	f7f9 f8fb 	bl	8001fcc <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d803      	bhi.n	8008dea <HAL_SPI_Receive+0x1ba>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de8:	d102      	bne.n	8008df0 <HAL_SPI_Receive+0x1c0>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d114      	bne.n	8008e1a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 fee3 	bl	8009bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dfc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e178      	b.n	800910c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d194      	bne.n	8008d50 <HAL_SPI_Receive+0x120>
 8008e26:	e15e      	b.n	80090e6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	2b07      	cmp	r3, #7
 8008e2e:	f240 8153 	bls.w	80090d8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008e32:	e08f      	b.n	8008f54 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d114      	bne.n	8008e74 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	8812      	ldrh	r2, [r2, #0]
 8008e52:	b292      	uxth	r2, r2
 8008e54:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e5a:	1c9a      	adds	r2, r3, #2
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e72:	e06f      	b.n	8008f54 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	8bfa      	ldrh	r2, [r7, #30]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d924      	bls.n	8008ecc <HAL_SPI_Receive+0x29c>
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01f      	beq.n	8008ecc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	8812      	ldrh	r2, [r2, #0]
 8008e94:	b292      	uxth	r2, r2
 8008e96:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e9c:	1c9a      	adds	r2, r3, #2
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	8812      	ldrh	r2, [r2, #0]
 8008eaa:	b292      	uxth	r2, r2
 8008eac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eb2:	1c9a      	adds	r2, r3, #2
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	3b02      	subs	r3, #2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008eca:	e043      	b.n	8008f54 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d119      	bne.n	8008f0c <HAL_SPI_Receive+0x2dc>
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d014      	beq.n	8008f0c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	8812      	ldrh	r2, [r2, #0]
 8008eea:	b292      	uxth	r2, r2
 8008eec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ef2:	1c9a      	adds	r2, r3, #2
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008f0a:	e023      	b.n	8008f54 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f0c:	f7f9 f85e 	bl	8001fcc <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d803      	bhi.n	8008f24 <HAL_SPI_Receive+0x2f4>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f22:	d102      	bne.n	8008f2a <HAL_SPI_Receive+0x2fa>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d114      	bne.n	8008f54 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 fe46 	bl	8009bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e0db      	b.n	800910c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f47f af69 	bne.w	8008e34 <HAL_SPI_Receive+0x204>
 8008f62:	e0c0      	b.n	80090e6 <HAL_SPI_Receive+0x4b6>
 8008f64:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d117      	bne.n	8008fae <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f8a:	7812      	ldrb	r2, [r2, #0]
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008fac:	e094      	b.n	80090d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	8bfa      	ldrh	r2, [r7, #30]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d946      	bls.n	800904a <HAL_SPI_Receive+0x41a>
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d041      	beq.n	800904a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fee:	7812      	ldrb	r2, [r2, #0]
 8008ff0:	b2d2      	uxtb	r2, r2
 8008ff2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800900a:	7812      	ldrb	r2, [r2, #0]
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009026:	7812      	ldrb	r2, [r2, #0]
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800903c:	b29b      	uxth	r3, r3
 800903e:	3b04      	subs	r3, #4
 8009040:	b29a      	uxth	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009048:	e046      	b.n	80090d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009050:	b29b      	uxth	r3, r3
 8009052:	2b03      	cmp	r3, #3
 8009054:	d81c      	bhi.n	8009090 <HAL_SPI_Receive+0x460>
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d017      	beq.n	8009090 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800906c:	7812      	ldrb	r2, [r2, #0]
 800906e:	b2d2      	uxtb	r2, r2
 8009070:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009082:	b29b      	uxth	r3, r3
 8009084:	3b01      	subs	r3, #1
 8009086:	b29a      	uxth	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800908e:	e023      	b.n	80090d8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009090:	f7f8 ff9c 	bl	8001fcc <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d803      	bhi.n	80090a8 <HAL_SPI_Receive+0x478>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a6:	d102      	bne.n	80090ae <HAL_SPI_Receive+0x47e>
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d114      	bne.n	80090d8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fd84 	bl	8009bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e019      	b.n	800910c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090de:	b29b      	uxth	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f47f af41 	bne.w	8008f68 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fd68 	bl	8009bbc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800910a:	2300      	movs	r3, #0
  }
}
 800910c:	4618      	mov	r0, r3
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08e      	sub	sp, #56	@ 0x38
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3320      	adds	r3, #32
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3330      	adds	r3, #48	@ 0x30
 8009130:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009136:	095b      	lsrs	r3, r3, #5
 8009138:	b29b      	uxth	r3, r3
 800913a:	3301      	adds	r3, #1
 800913c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800913e:	f7f8 ff45 	bl	8001fcc <HAL_GetTick>
 8009142:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8009144:	887b      	ldrh	r3, [r7, #2]
 8009146:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8009148:	887b      	ldrh	r3, [r7, #2]
 800914a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b01      	cmp	r3, #1
 8009156:	d001      	beq.n	800915c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8009158:	2302      	movs	r3, #2
 800915a:	e310      	b.n	800977e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <HAL_SPI_TransmitReceive+0x5a>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d002      	beq.n	800916e <HAL_SPI_TransmitReceive+0x5a>
 8009168:	887b      	ldrh	r3, [r7, #2]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e305      	b.n	800977e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009178:	2b01      	cmp	r3, #1
 800917a:	d101      	bne.n	8009180 <HAL_SPI_TransmitReceive+0x6c>
 800917c:	2302      	movs	r3, #2
 800917e:	e2fe      	b.n	800977e <HAL_SPI_TransmitReceive+0x66a>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2205      	movs	r2, #5
 800918c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	887a      	ldrh	r2, [r7, #2]
 80091a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	887a      	ldrh	r2, [r7, #2]
 80091aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	887a      	ldrh	r2, [r7, #2]
 80091b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	887a      	ldrh	r2, [r7, #2]
 80091c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80091de:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a70      	ldr	r2, [pc, #448]	@ (80093a8 <HAL_SPI_TransmitReceive+0x294>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d009      	beq.n	80091fe <HAL_SPI_TransmitReceive+0xea>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a6f      	ldr	r2, [pc, #444]	@ (80093ac <HAL_SPI_TransmitReceive+0x298>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d004      	beq.n	80091fe <HAL_SPI_TransmitReceive+0xea>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a6d      	ldr	r2, [pc, #436]	@ (80093b0 <HAL_SPI_TransmitReceive+0x29c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d102      	bne.n	8009204 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80091fe:	2310      	movs	r3, #16
 8009200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009202:	e001      	b.n	8009208 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8009204:	2308      	movs	r3, #8
 8009206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	4b69      	ldr	r3, [pc, #420]	@ (80093b4 <HAL_SPI_TransmitReceive+0x2a0>)
 8009210:	4013      	ands	r3, r2
 8009212:	8879      	ldrh	r1, [r7, #2]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	6812      	ldr	r2, [r2, #0]
 8009218:	430b      	orrs	r3, r1
 800921a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009234:	d107      	bne.n	8009246 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009244:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b0f      	cmp	r3, #15
 800924c:	f240 80a2 	bls.w	8009394 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009252:	089b      	lsrs	r3, r3, #2
 8009254:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009256:	e094      	b.n	8009382 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b02      	cmp	r3, #2
 8009264:	d120      	bne.n	80092a8 <HAL_SPI_TransmitReceive+0x194>
 8009266:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01d      	beq.n	80092a8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800926c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800926e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009272:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009274:	429a      	cmp	r2, r3
 8009276:	d217      	bcs.n	80092a8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6812      	ldr	r2, [r2, #0]
 8009282:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009288:	1d1a      	adds	r2, r3, #4
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009294:	b29b      	uxth	r3, r3
 8009296:	3b01      	subs	r3, #1
 8009298:	b29a      	uxth	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80092b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d065      	beq.n	8009382 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d118      	bne.n	80092f6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80092ce:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092d4:	1d1a      	adds	r2, r3, #4
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80092f4:	e045      	b.n	8009382 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80092f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80092f8:	8bfb      	ldrh	r3, [r7, #30]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d21d      	bcs.n	800933a <HAL_SPI_TransmitReceive+0x226>
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d018      	beq.n	800933a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009310:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009312:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009318:	1d1a      	adds	r2, r3, #4
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009324:	b29b      	uxth	r3, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	b29a      	uxth	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009336:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009338:	e023      	b.n	8009382 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800933a:	f7f8 fe47 	bl	8001fcc <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009346:	429a      	cmp	r2, r3
 8009348:	d803      	bhi.n	8009352 <HAL_SPI_TransmitReceive+0x23e>
 800934a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009350:	d102      	bne.n	8009358 <HAL_SPI_TransmitReceive+0x244>
 8009352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009354:	2b00      	cmp	r3, #0
 8009356:	d114      	bne.n	8009382 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 fc2f 	bl	8009bbc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009364:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e1fd      	b.n	800977e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009382:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009384:	2b00      	cmp	r3, #0
 8009386:	f47f af67 	bne.w	8009258 <HAL_SPI_TransmitReceive+0x144>
 800938a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800938c:	2b00      	cmp	r3, #0
 800938e:	f47f af63 	bne.w	8009258 <HAL_SPI_TransmitReceive+0x144>
 8009392:	e1ce      	b.n	8009732 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	2b07      	cmp	r3, #7
 800939a:	f240 81c2 	bls.w	8009722 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a0:	085b      	lsrs	r3, r3, #1
 80093a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80093a4:	e0c9      	b.n	800953a <HAL_SPI_TransmitReceive+0x426>
 80093a6:	bf00      	nop
 80093a8:	40013000 	.word	0x40013000
 80093ac:	40003800 	.word	0x40003800
 80093b0:	40003c00 	.word	0x40003c00
 80093b4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d11f      	bne.n	8009406 <HAL_SPI_TransmitReceive+0x2f2>
 80093c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01c      	beq.n	8009406 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80093cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093ce:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80093d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d216      	bcs.n	8009406 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093dc:	881a      	ldrh	r2, [r3, #0]
 80093de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093e6:	1c9a      	adds	r2, r3, #2
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	3b01      	subs	r3, #1
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009404:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800940e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 8092 	beq.w	800953a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b01      	cmp	r3, #1
 8009422:	d118      	bne.n	8009456 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009428:	6a3a      	ldr	r2, [r7, #32]
 800942a:	8812      	ldrh	r2, [r2, #0]
 800942c:	b292      	uxth	r2, r2
 800942e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009434:	1c9a      	adds	r2, r3, #2
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009440:	b29b      	uxth	r3, r3
 8009442:	3b01      	subs	r3, #1
 8009444:	b29a      	uxth	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009452:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009454:	e071      	b.n	800953a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009456:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009458:	8bfb      	ldrh	r3, [r7, #30]
 800945a:	429a      	cmp	r2, r3
 800945c:	d228      	bcs.n	80094b0 <HAL_SPI_TransmitReceive+0x39c>
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d023      	beq.n	80094b0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800946c:	6a3a      	ldr	r2, [r7, #32]
 800946e:	8812      	ldrh	r2, [r2, #0]
 8009470:	b292      	uxth	r2, r2
 8009472:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009478:	1c9a      	adds	r2, r3, #2
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009482:	6a3a      	ldr	r2, [r7, #32]
 8009484:	8812      	ldrh	r2, [r2, #0]
 8009486:	b292      	uxth	r2, r2
 8009488:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800948e:	1c9a      	adds	r2, r3, #2
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800949a:	b29b      	uxth	r3, r3
 800949c:	3b02      	subs	r3, #2
 800949e:	b29a      	uxth	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094ac:	853b      	strh	r3, [r7, #40]	@ 0x28
 80094ae:	e044      	b.n	800953a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80094b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d11d      	bne.n	80094f2 <HAL_SPI_TransmitReceive+0x3de>
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d018      	beq.n	80094f2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094c4:	6a3a      	ldr	r2, [r7, #32]
 80094c6:	8812      	ldrh	r2, [r2, #0]
 80094c8:	b292      	uxth	r2, r2
 80094ca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094d0:	1c9a      	adds	r2, r3, #2
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80094f0:	e023      	b.n	800953a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094f2:	f7f8 fd6b 	bl	8001fcc <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094fe:	429a      	cmp	r2, r3
 8009500:	d803      	bhi.n	800950a <HAL_SPI_TransmitReceive+0x3f6>
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009508:	d102      	bne.n	8009510 <HAL_SPI_TransmitReceive+0x3fc>
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	2b00      	cmp	r3, #0
 800950e:	d114      	bne.n	800953a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 fb53 	bl	8009bbc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800951c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e121      	b.n	800977e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800953a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800953c:	2b00      	cmp	r3, #0
 800953e:	f47f af3b 	bne.w	80093b8 <HAL_SPI_TransmitReceive+0x2a4>
 8009542:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009544:	2b00      	cmp	r3, #0
 8009546:	f47f af37 	bne.w	80093b8 <HAL_SPI_TransmitReceive+0x2a4>
 800954a:	e0f2      	b.n	8009732 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b02      	cmp	r3, #2
 8009558:	d121      	bne.n	800959e <HAL_SPI_TransmitReceive+0x48a>
 800955a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01e      	beq.n	800959e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009560:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009562:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009566:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009568:	429a      	cmp	r2, r3
 800956a:	d218      	bcs.n	800959e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3320      	adds	r3, #32
 8009576:	7812      	ldrb	r2, [r2, #0]
 8009578:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800958a:	b29b      	uxth	r3, r3
 800958c:	3b01      	subs	r3, #1
 800958e:	b29a      	uxth	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800959c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	695b      	ldr	r3, [r3, #20]
 80095a4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80095a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 80ba 	beq.w	8009722 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d11b      	bne.n	80095f4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095c8:	7812      	ldrb	r2, [r2, #0]
 80095ca:	b2d2      	uxtb	r2, r2
 80095cc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095de:	b29b      	uxth	r3, r3
 80095e0:	3b01      	subs	r3, #1
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095f0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80095f2:	e096      	b.n	8009722 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80095f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80095f6:	8bfb      	ldrh	r3, [r7, #30]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d24a      	bcs.n	8009692 <HAL_SPI_TransmitReceive+0x57e>
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d045      	beq.n	8009692 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009612:	7812      	ldrb	r2, [r2, #0]
 8009614:	b2d2      	uxtb	r2, r2
 8009616:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800961c:	1c5a      	adds	r2, r3, #1
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800962e:	7812      	ldrb	r2, [r2, #0]
 8009630:	b2d2      	uxtb	r2, r2
 8009632:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	b2d2      	uxtb	r2, r2
 800964e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009666:	7812      	ldrb	r2, [r2, #0]
 8009668:	b2d2      	uxtb	r2, r2
 800966a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009670:	1c5a      	adds	r2, r3, #1
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b04      	subs	r3, #4
 8009680:	b29a      	uxth	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800968e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009690:	e047      	b.n	8009722 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009692:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009694:	2b03      	cmp	r3, #3
 8009696:	d820      	bhi.n	80096da <HAL_SPI_TransmitReceive+0x5c6>
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d01b      	beq.n	80096da <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096ae:	7812      	ldrb	r2, [r2, #0]
 80096b0:	b2d2      	uxtb	r2, r2
 80096b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80096d8:	e023      	b.n	8009722 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096da:	f7f8 fc77 	bl	8001fcc <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d803      	bhi.n	80096f2 <HAL_SPI_TransmitReceive+0x5de>
 80096ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f0:	d102      	bne.n	80096f8 <HAL_SPI_TransmitReceive+0x5e4>
 80096f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d114      	bne.n	8009722 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 fa5f 	bl	8009bbc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009704:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e02d      	b.n	800977e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009722:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009724:	2b00      	cmp	r3, #0
 8009726:	f47f af11 	bne.w	800954c <HAL_SPI_TransmitReceive+0x438>
 800972a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800972c:	2b00      	cmp	r3, #0
 800972e:	f47f af0d 	bne.w	800954c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	2200      	movs	r2, #0
 800973a:	2108      	movs	r1, #8
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 fadd 	bl	8009cfc <SPI_WaitOnFlagUntilTimeout>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d007      	beq.n	8009758 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800974e:	f043 0220 	orr.w	r2, r3, #32
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 fa2f 	bl	8009bbc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e000      	b.n	800977e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800977c:	2300      	movs	r3, #0
  }
}
 800977e:	4618      	mov	r0, r3
 8009780:	3730      	adds	r7, #48	@ 0x30
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop

08009788 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08a      	sub	sp, #40	@ 0x28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80097a0:	6a3a      	ldr	r2, [r7, #32]
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	4013      	ands	r3, r2
 80097a6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80097ba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3330      	adds	r3, #48	@ 0x30
 80097c2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d010      	beq.n	80097f0 <HAL_SPI_IRQHandler+0x68>
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	f003 0308 	and.w	r3, r3, #8
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	699a      	ldr	r2, [r3, #24]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097e6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f9c3 	bl	8009b74 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80097ee:	e192      	b.n	8009b16 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d113      	bne.n	8009822 <HAL_SPI_IRQHandler+0x9a>
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	f003 0320 	and.w	r3, r3, #32
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10e      	bne.n	8009822 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	4798      	blx	r3
    handled = 1UL;
 800981e:	2301      	movs	r3, #1
 8009820:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10f      	bne.n	800984c <HAL_SPI_IRQHandler+0xc4>
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800983c:	2b00      	cmp	r3, #0
 800983e:	d105      	bne.n	800984c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
    handled = 1UL;
 8009848:	2301      	movs	r3, #1
 800984a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	f003 0320 	and.w	r3, r3, #32
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10f      	bne.n	8009876 <HAL_SPI_IRQHandler+0xee>
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00a      	beq.n	8009876 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009866:	2b00      	cmp	r3, #0
 8009868:	d105      	bne.n	8009876 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	4798      	blx	r3
    handled = 1UL;
 8009872:	2301      	movs	r3, #1
 8009874:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009878:	2b00      	cmp	r3, #0
 800987a:	f040 8147 	bne.w	8009b0c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 808b 	beq.w	80099a0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	699a      	ldr	r2, [r3, #24]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f042 0208 	orr.w	r2, r2, #8
 8009898:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	699a      	ldr	r2, [r3, #24]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f042 0210 	orr.w	r2, r2, #16
 80098a8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	699a      	ldr	r2, [r3, #24]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098b8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	691a      	ldr	r2, [r3, #16]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0208 	bic.w	r2, r2, #8
 80098c8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d13d      	bne.n	8009954 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80098d8:	e036      	b.n	8009948 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	2b0f      	cmp	r3, #15
 80098e0:	d90b      	bls.n	80098fa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80098ec:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098f2:	1d1a      	adds	r2, r3, #4
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	665a      	str	r2, [r3, #100]	@ 0x64
 80098f8:	e01d      	b.n	8009936 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	2b07      	cmp	r3, #7
 8009900:	d90b      	bls.n	800991a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	8812      	ldrh	r2, [r2, #0]
 800990a:	b292      	uxth	r2, r2
 800990c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009912:	1c9a      	adds	r2, r3, #2
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	665a      	str	r2, [r3, #100]	@ 0x64
 8009918:	e00d      	b.n	8009936 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009926:	7812      	ldrb	r2, [r2, #0]
 8009928:	b2d2      	uxtb	r2, r2
 800992a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800993c:	b29b      	uxth	r3, r3
 800993e:	3b01      	subs	r3, #1
 8009940:	b29a      	uxth	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800994e:	b29b      	uxth	r3, r3
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1c2      	bne.n	80098da <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f931 	bl	8009bbc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f8f7 	bl	8009b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009972:	e0d0      	b.n	8009b16 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009974:	7cfb      	ldrb	r3, [r7, #19]
 8009976:	2b05      	cmp	r3, #5
 8009978:	d103      	bne.n	8009982 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f8e6 	bl	8009b4c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009980:	e0c6      	b.n	8009b10 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009982:	7cfb      	ldrb	r3, [r7, #19]
 8009984:	2b04      	cmp	r3, #4
 8009986:	d103      	bne.n	8009990 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f8d5 	bl	8009b38 <HAL_SPI_RxCpltCallback>
    return;
 800998e:	e0bf      	b.n	8009b10 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009990:	7cfb      	ldrb	r3, [r7, #19]
 8009992:	2b03      	cmp	r3, #3
 8009994:	f040 80bc 	bne.w	8009b10 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f8c3 	bl	8009b24 <HAL_SPI_TxCpltCallback>
    return;
 800999e:	e0b7      	b.n	8009b10 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 80b5 	beq.w	8009b16 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00f      	beq.n	80099d6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099bc:	f043 0204 	orr.w	r2, r3, #4
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	699a      	ldr	r2, [r3, #24]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00f      	beq.n	8009a00 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099e6:	f043 0201 	orr.w	r2, r3, #1
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699a      	ldr	r2, [r3, #24]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099fe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00f      	beq.n	8009a2a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a10:	f043 0208 	orr.w	r2, r3, #8
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	699a      	ldr	r2, [r3, #24]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a28:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	f003 0320 	and.w	r3, r3, #32
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00f      	beq.n	8009a54 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699a      	ldr	r2, [r3, #24]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0220 	orr.w	r2, r2, #32
 8009a52:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d05a      	beq.n	8009b14 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f022 0201 	bic.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6919      	ldr	r1, [r3, #16]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	4b28      	ldr	r3, [pc, #160]	@ (8009b1c <HAL_SPI_IRQHandler+0x394>)
 8009a7a:	400b      	ands	r3, r1
 8009a7c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009a84:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a88:	d138      	bne.n	8009afc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009a98:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d013      	beq.n	8009aca <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8009b20 <HAL_SPI_IRQHandler+0x398>)
 8009aa8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7f8 ff80 	bl	80029b4 <HAL_DMA_Abort_IT>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d007      	beq.n	8009aca <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ac0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d020      	beq.n	8009b14 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ad6:	4a12      	ldr	r2, [pc, #72]	@ (8009b20 <HAL_SPI_IRQHandler+0x398>)
 8009ad8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7f8 ff68 	bl	80029b4 <HAL_DMA_Abort_IT>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d014      	beq.n	8009b14 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009af0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009afa:	e00b      	b.n	8009b14 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f82b 	bl	8009b60 <HAL_SPI_ErrorCallback>
    return;
 8009b0a:	e003      	b.n	8009b14 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009b0c:	bf00      	nop
 8009b0e:	e002      	b.n	8009b16 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009b10:	bf00      	nop
 8009b12:	e000      	b.n	8009b16 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009b14:	bf00      	nop
  }
}
 8009b16:	3728      	adds	r7, #40	@ 0x28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	fffffc94 	.word	0xfffffc94
 8009b20:	08009b89 	.word	0x08009b89

08009b24 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff ffd6 	bl	8009b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0208 	orr.w	r2, r2, #8
 8009bda:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0210 	orr.w	r2, r2, #16
 8009bea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 0201 	bic.w	r2, r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6919      	ldr	r1, [r3, #16]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b3c      	ldr	r3, [pc, #240]	@ (8009cf8 <SPI_CloseTransfer+0x13c>)
 8009c08:	400b      	ands	r3, r1
 8009c0a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009c1a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d014      	beq.n	8009c52 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f003 0320 	and.w	r3, r3, #32
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00f      	beq.n	8009c52 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	699a      	ldr	r2, [r3, #24]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f042 0220 	orr.w	r2, r2, #32
 8009c50:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d014      	beq.n	8009c88 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00f      	beq.n	8009c88 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c6e:	f043 0204 	orr.w	r2, r3, #4
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699a      	ldr	r2, [r3, #24]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c86:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00f      	beq.n	8009cb2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c98:	f043 0201 	orr.w	r2, r3, #1
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	699a      	ldr	r2, [r3, #24]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cb0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00f      	beq.n	8009cdc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cc2:	f043 0208 	orr.w	r2, r3, #8
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	699a      	ldr	r2, [r3, #24]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009cda:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009cec:	bf00      	nop
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	fffffc90 	.word	0xfffffc90

08009cfc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d0c:	e010      	b.n	8009d30 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d0e:	f7f8 f95d 	bl	8001fcc <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d803      	bhi.n	8009d26 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d24:	d102      	bne.n	8009d2c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e00f      	b.n	8009d50 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	695a      	ldr	r2, [r3, #20]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	bf0c      	ite	eq
 8009d40:	2301      	moveq	r3, #1
 8009d42:	2300      	movne	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	461a      	mov	r2, r3
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d0df      	beq.n	8009d0e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d64:	095b      	lsrs	r3, r3, #5
 8009d66:	3301      	adds	r3, #1
 8009d68:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	3307      	adds	r3, #7
 8009d76:	08db      	lsrs	r3, r3, #3
 8009d78:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e049      	b.n	8009e34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d106      	bne.n	8009dba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7f7 fcf9 	bl	80017ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	4619      	mov	r1, r3
 8009dcc:	4610      	mov	r0, r2
 8009dce:	f000 fdb1 	bl	800a934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d001      	beq.n	8009e54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e056      	b.n	8009f02 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2202      	movs	r2, #2
 8009e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a2b      	ldr	r2, [pc, #172]	@ (8009f10 <HAL_TIM_Base_Start+0xd4>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d02c      	beq.n	8009ec0 <HAL_TIM_Base_Start+0x84>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e6e:	d027      	beq.n	8009ec0 <HAL_TIM_Base_Start+0x84>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a27      	ldr	r2, [pc, #156]	@ (8009f14 <HAL_TIM_Base_Start+0xd8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d022      	beq.n	8009ec0 <HAL_TIM_Base_Start+0x84>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a26      	ldr	r2, [pc, #152]	@ (8009f18 <HAL_TIM_Base_Start+0xdc>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d01d      	beq.n	8009ec0 <HAL_TIM_Base_Start+0x84>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a24      	ldr	r2, [pc, #144]	@ (8009f1c <HAL_TIM_Base_Start+0xe0>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d018      	beq.n	8009ec0 <HAL_TIM_Base_Start+0x84>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a23      	ldr	r2, [pc, #140]	@ (8009f20 <HAL_TIM_Base_Start+0xe4>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d013      	beq.n	8009ec0 <HAL_TIM_Base_Start+0x84>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a21      	ldr	r2, [pc, #132]	@ (8009f24 <HAL_TIM_Base_Start+0xe8>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d00e      	beq.n	8009ec0 <HAL_TIM_Base_Start+0x84>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a20      	ldr	r2, [pc, #128]	@ (8009f28 <HAL_TIM_Base_Start+0xec>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d009      	beq.n	8009ec0 <HAL_TIM_Base_Start+0x84>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8009f2c <HAL_TIM_Base_Start+0xf0>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d004      	beq.n	8009ec0 <HAL_TIM_Base_Start+0x84>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a1d      	ldr	r2, [pc, #116]	@ (8009f30 <HAL_TIM_Base_Start+0xf4>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d115      	bne.n	8009eec <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689a      	ldr	r2, [r3, #8]
 8009ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8009f34 <HAL_TIM_Base_Start+0xf8>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b06      	cmp	r3, #6
 8009ed0:	d015      	beq.n	8009efe <HAL_TIM_Base_Start+0xc2>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ed8:	d011      	beq.n	8009efe <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f042 0201 	orr.w	r2, r2, #1
 8009ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eea:	e008      	b.n	8009efe <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0201 	orr.w	r2, r2, #1
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	e000      	b.n	8009f00 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	40010000 	.word	0x40010000
 8009f14:	40000400 	.word	0x40000400
 8009f18:	40000800 	.word	0x40000800
 8009f1c:	40000c00 	.word	0x40000c00
 8009f20:	40010400 	.word	0x40010400
 8009f24:	40001800 	.word	0x40001800
 8009f28:	40014000 	.word	0x40014000
 8009f2c:	4000e000 	.word	0x4000e000
 8009f30:	4000e400 	.word	0x4000e400
 8009f34:	00010007 	.word	0x00010007

08009f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d001      	beq.n	8009f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e05e      	b.n	800a00e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f042 0201 	orr.w	r2, r2, #1
 8009f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800a01c <HAL_TIM_Base_Start_IT+0xe4>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d02c      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x94>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f7a:	d027      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x94>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a27      	ldr	r2, [pc, #156]	@ (800a020 <HAL_TIM_Base_Start_IT+0xe8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d022      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x94>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a26      	ldr	r2, [pc, #152]	@ (800a024 <HAL_TIM_Base_Start_IT+0xec>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d01d      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x94>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a24      	ldr	r2, [pc, #144]	@ (800a028 <HAL_TIM_Base_Start_IT+0xf0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d018      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x94>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a23      	ldr	r2, [pc, #140]	@ (800a02c <HAL_TIM_Base_Start_IT+0xf4>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d013      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x94>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a21      	ldr	r2, [pc, #132]	@ (800a030 <HAL_TIM_Base_Start_IT+0xf8>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d00e      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x94>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a20      	ldr	r2, [pc, #128]	@ (800a034 <HAL_TIM_Base_Start_IT+0xfc>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d009      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x94>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a1e      	ldr	r2, [pc, #120]	@ (800a038 <HAL_TIM_Base_Start_IT+0x100>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d004      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x94>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800a03c <HAL_TIM_Base_Start_IT+0x104>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d115      	bne.n	8009ff8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	4b1b      	ldr	r3, [pc, #108]	@ (800a040 <HAL_TIM_Base_Start_IT+0x108>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b06      	cmp	r3, #6
 8009fdc:	d015      	beq.n	800a00a <HAL_TIM_Base_Start_IT+0xd2>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fe4:	d011      	beq.n	800a00a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f042 0201 	orr.w	r2, r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff6:	e008      	b.n	800a00a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	e000      	b.n	800a00c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a00a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	40010000 	.word	0x40010000
 800a020:	40000400 	.word	0x40000400
 800a024:	40000800 	.word	0x40000800
 800a028:	40000c00 	.word	0x40000c00
 800a02c:	40010400 	.word	0x40010400
 800a030:	40001800 	.word	0x40001800
 800a034:	40014000 	.word	0x40014000
 800a038:	4000e000 	.word	0x4000e000
 800a03c:	4000e400 	.word	0x4000e400
 800a040:	00010007 	.word	0x00010007

0800a044 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e049      	b.n	800a0ea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f841 	bl	800a0f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f000 fc56 	bl	800a934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a0fa:	bf00      	nop
 800a0fc:	370c      	adds	r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b082      	sub	sp, #8
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e049      	b.n	800a1ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b00      	cmp	r3, #0
 800a122:	d106      	bne.n	800a132 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f841 	bl	800a1b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2202      	movs	r2, #2
 800a136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	3304      	adds	r3, #4
 800a142:	4619      	mov	r1, r3
 800a144:	4610      	mov	r0, r2
 800a146:	f000 fbf5 	bl	800a934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d020      	beq.n	800a22c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f003 0302 	and.w	r3, r3, #2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01b      	beq.n	800a22c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f06f 0202 	mvn.w	r2, #2
 800a1fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	f003 0303 	and.w	r3, r3, #3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fb70 	bl	800a8f8 <HAL_TIM_IC_CaptureCallback>
 800a218:	e005      	b.n	800a226 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fb62 	bl	800a8e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fb73 	bl	800a90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	2b00      	cmp	r3, #0
 800a234:	d020      	beq.n	800a278 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01b      	beq.n	800a278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f06f 0204 	mvn.w	r2, #4
 800a248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2202      	movs	r2, #2
 800a24e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fb4a 	bl	800a8f8 <HAL_TIM_IC_CaptureCallback>
 800a264:	e005      	b.n	800a272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fb3c 	bl	800a8e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fb4d 	bl	800a90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f003 0308 	and.w	r3, r3, #8
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d020      	beq.n	800a2c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f003 0308 	and.w	r3, r3, #8
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01b      	beq.n	800a2c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f06f 0208 	mvn.w	r2, #8
 800a294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2204      	movs	r2, #4
 800a29a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	f003 0303 	and.w	r3, r3, #3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d003      	beq.n	800a2b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fb24 	bl	800a8f8 <HAL_TIM_IC_CaptureCallback>
 800a2b0:	e005      	b.n	800a2be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fb16 	bl	800a8e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fb27 	bl	800a90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f003 0310 	and.w	r3, r3, #16
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d020      	beq.n	800a310 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d01b      	beq.n	800a310 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f06f 0210 	mvn.w	r2, #16
 800a2e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2208      	movs	r2, #8
 800a2e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fafe 	bl	800a8f8 <HAL_TIM_IC_CaptureCallback>
 800a2fc:	e005      	b.n	800a30a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 faf0 	bl	800a8e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fb01 	bl	800a90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00c      	beq.n	800a334 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d007      	beq.n	800a334 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f06f 0201 	mvn.w	r2, #1
 800a32c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7f7 f84a 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d104      	bne.n	800a348 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00c      	beq.n	800a362 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d007      	beq.n	800a362 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a35a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f001 f83b 	bl	800b3d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00c      	beq.n	800a386 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a372:	2b00      	cmp	r3, #0
 800a374:	d007      	beq.n	800a386 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a37e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 f833 	bl	800b3ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00c      	beq.n	800a3aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a396:	2b00      	cmp	r3, #0
 800a398:	d007      	beq.n	800a3aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a3a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fabb 	bl	800a920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	f003 0320 	and.w	r3, r3, #32
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00c      	beq.n	800a3ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f003 0320 	and.w	r3, r3, #32
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d007      	beq.n	800a3ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f06f 0220 	mvn.w	r2, #32
 800a3c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fffb 	bl	800b3c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
	...

0800a3d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d101      	bne.n	800a3f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	e066      	b.n	800a4c4 <HAL_TIM_OC_ConfigChannel+0xec>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b14      	cmp	r3, #20
 800a402:	d857      	bhi.n	800a4b4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a404:	a201      	add	r2, pc, #4	@ (adr r2, 800a40c <HAL_TIM_OC_ConfigChannel+0x34>)
 800a406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40a:	bf00      	nop
 800a40c:	0800a461 	.word	0x0800a461
 800a410:	0800a4b5 	.word	0x0800a4b5
 800a414:	0800a4b5 	.word	0x0800a4b5
 800a418:	0800a4b5 	.word	0x0800a4b5
 800a41c:	0800a46f 	.word	0x0800a46f
 800a420:	0800a4b5 	.word	0x0800a4b5
 800a424:	0800a4b5 	.word	0x0800a4b5
 800a428:	0800a4b5 	.word	0x0800a4b5
 800a42c:	0800a47d 	.word	0x0800a47d
 800a430:	0800a4b5 	.word	0x0800a4b5
 800a434:	0800a4b5 	.word	0x0800a4b5
 800a438:	0800a4b5 	.word	0x0800a4b5
 800a43c:	0800a48b 	.word	0x0800a48b
 800a440:	0800a4b5 	.word	0x0800a4b5
 800a444:	0800a4b5 	.word	0x0800a4b5
 800a448:	0800a4b5 	.word	0x0800a4b5
 800a44c:	0800a499 	.word	0x0800a499
 800a450:	0800a4b5 	.word	0x0800a4b5
 800a454:	0800a4b5 	.word	0x0800a4b5
 800a458:	0800a4b5 	.word	0x0800a4b5
 800a45c:	0800a4a7 	.word	0x0800a4a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68b9      	ldr	r1, [r7, #8]
 800a466:	4618      	mov	r0, r3
 800a468:	f000 fb10 	bl	800aa8c <TIM_OC1_SetConfig>
      break;
 800a46c:	e025      	b.n	800a4ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68b9      	ldr	r1, [r7, #8]
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fb99 	bl	800abac <TIM_OC2_SetConfig>
      break;
 800a47a:	e01e      	b.n	800a4ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68b9      	ldr	r1, [r7, #8]
 800a482:	4618      	mov	r0, r3
 800a484:	f000 fc1c 	bl	800acc0 <TIM_OC3_SetConfig>
      break;
 800a488:	e017      	b.n	800a4ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	4618      	mov	r0, r3
 800a492:	f000 fc9d 	bl	800add0 <TIM_OC4_SetConfig>
      break;
 800a496:	e010      	b.n	800a4ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68b9      	ldr	r1, [r7, #8]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fd00 	bl	800aea4 <TIM_OC5_SetConfig>
      break;
 800a4a4:	e009      	b.n	800a4ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68b9      	ldr	r1, [r7, #8]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 fd5d 	bl	800af6c <TIM_OC6_SetConfig>
      break;
 800a4b2:	e002      	b.n	800a4ba <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	e0ff      	b.n	800a6ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b14      	cmp	r3, #20
 800a4f6:	f200 80f0 	bhi.w	800a6da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a500:	0800a555 	.word	0x0800a555
 800a504:	0800a6db 	.word	0x0800a6db
 800a508:	0800a6db 	.word	0x0800a6db
 800a50c:	0800a6db 	.word	0x0800a6db
 800a510:	0800a595 	.word	0x0800a595
 800a514:	0800a6db 	.word	0x0800a6db
 800a518:	0800a6db 	.word	0x0800a6db
 800a51c:	0800a6db 	.word	0x0800a6db
 800a520:	0800a5d7 	.word	0x0800a5d7
 800a524:	0800a6db 	.word	0x0800a6db
 800a528:	0800a6db 	.word	0x0800a6db
 800a52c:	0800a6db 	.word	0x0800a6db
 800a530:	0800a617 	.word	0x0800a617
 800a534:	0800a6db 	.word	0x0800a6db
 800a538:	0800a6db 	.word	0x0800a6db
 800a53c:	0800a6db 	.word	0x0800a6db
 800a540:	0800a659 	.word	0x0800a659
 800a544:	0800a6db 	.word	0x0800a6db
 800a548:	0800a6db 	.word	0x0800a6db
 800a54c:	0800a6db 	.word	0x0800a6db
 800a550:	0800a699 	.word	0x0800a699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68b9      	ldr	r1, [r7, #8]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 fa96 	bl	800aa8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	699a      	ldr	r2, [r3, #24]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f042 0208 	orr.w	r2, r2, #8
 800a56e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699a      	ldr	r2, [r3, #24]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 0204 	bic.w	r2, r2, #4
 800a57e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6999      	ldr	r1, [r3, #24]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	691a      	ldr	r2, [r3, #16]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	619a      	str	r2, [r3, #24]
      break;
 800a592:	e0a5      	b.n	800a6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fb06 	bl	800abac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	699a      	ldr	r2, [r3, #24]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6999      	ldr	r1, [r3, #24]
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	021a      	lsls	r2, r3, #8
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	619a      	str	r2, [r3, #24]
      break;
 800a5d4:	e084      	b.n	800a6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 fb6f 	bl	800acc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	69da      	ldr	r2, [r3, #28]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f042 0208 	orr.w	r2, r2, #8
 800a5f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69da      	ldr	r2, [r3, #28]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f022 0204 	bic.w	r2, r2, #4
 800a600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69d9      	ldr	r1, [r3, #28]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	691a      	ldr	r2, [r3, #16]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	61da      	str	r2, [r3, #28]
      break;
 800a614:	e064      	b.n	800a6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fbd7 	bl	800add0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69da      	ldr	r2, [r3, #28]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	69da      	ldr	r2, [r3, #28]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	69d9      	ldr	r1, [r3, #28]
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	021a      	lsls	r2, r3, #8
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	61da      	str	r2, [r3, #28]
      break;
 800a656:	e043      	b.n	800a6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fc20 	bl	800aea4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0208 	orr.w	r2, r2, #8
 800a672:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0204 	bic.w	r2, r2, #4
 800a682:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	691a      	ldr	r2, [r3, #16]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a696:	e023      	b.n	800a6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68b9      	ldr	r1, [r7, #8]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fc64 	bl	800af6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	021a      	lsls	r2, r3, #8
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a6d8:	e002      	b.n	800a6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a6de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop

0800a6f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d101      	bne.n	800a710 <HAL_TIM_ConfigClockSource+0x1c>
 800a70c:	2302      	movs	r3, #2
 800a70e:	e0dc      	b.n	800a8ca <HAL_TIM_ConfigClockSource+0x1d6>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	4b6a      	ldr	r3, [pc, #424]	@ (800a8d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a64      	ldr	r2, [pc, #400]	@ (800a8d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a746:	4293      	cmp	r3, r2
 800a748:	f000 80a9 	beq.w	800a89e <HAL_TIM_ConfigClockSource+0x1aa>
 800a74c:	4a62      	ldr	r2, [pc, #392]	@ (800a8d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	f200 80ae 	bhi.w	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a754:	4a61      	ldr	r2, [pc, #388]	@ (800a8dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800a756:	4293      	cmp	r3, r2
 800a758:	f000 80a1 	beq.w	800a89e <HAL_TIM_ConfigClockSource+0x1aa>
 800a75c:	4a5f      	ldr	r2, [pc, #380]	@ (800a8dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	f200 80a6 	bhi.w	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a764:	4a5e      	ldr	r2, [pc, #376]	@ (800a8e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a766:	4293      	cmp	r3, r2
 800a768:	f000 8099 	beq.w	800a89e <HAL_TIM_ConfigClockSource+0x1aa>
 800a76c:	4a5c      	ldr	r2, [pc, #368]	@ (800a8e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	f200 809e 	bhi.w	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a774:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a778:	f000 8091 	beq.w	800a89e <HAL_TIM_ConfigClockSource+0x1aa>
 800a77c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a780:	f200 8096 	bhi.w	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a788:	f000 8089 	beq.w	800a89e <HAL_TIM_ConfigClockSource+0x1aa>
 800a78c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a790:	f200 808e 	bhi.w	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a798:	d03e      	beq.n	800a818 <HAL_TIM_ConfigClockSource+0x124>
 800a79a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a79e:	f200 8087 	bhi.w	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7a6:	f000 8086 	beq.w	800a8b6 <HAL_TIM_ConfigClockSource+0x1c2>
 800a7aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7ae:	d87f      	bhi.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7b0:	2b70      	cmp	r3, #112	@ 0x70
 800a7b2:	d01a      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0xf6>
 800a7b4:	2b70      	cmp	r3, #112	@ 0x70
 800a7b6:	d87b      	bhi.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7b8:	2b60      	cmp	r3, #96	@ 0x60
 800a7ba:	d050      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x16a>
 800a7bc:	2b60      	cmp	r3, #96	@ 0x60
 800a7be:	d877      	bhi.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7c0:	2b50      	cmp	r3, #80	@ 0x50
 800a7c2:	d03c      	beq.n	800a83e <HAL_TIM_ConfigClockSource+0x14a>
 800a7c4:	2b50      	cmp	r3, #80	@ 0x50
 800a7c6:	d873      	bhi.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7c8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ca:	d058      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x18a>
 800a7cc:	2b40      	cmp	r3, #64	@ 0x40
 800a7ce:	d86f      	bhi.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7d0:	2b30      	cmp	r3, #48	@ 0x30
 800a7d2:	d064      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x1aa>
 800a7d4:	2b30      	cmp	r3, #48	@ 0x30
 800a7d6:	d86b      	bhi.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7d8:	2b20      	cmp	r3, #32
 800a7da:	d060      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x1aa>
 800a7dc:	2b20      	cmp	r3, #32
 800a7de:	d867      	bhi.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d05c      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x1aa>
 800a7e4:	2b10      	cmp	r3, #16
 800a7e6:	d05a      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x1aa>
 800a7e8:	e062      	b.n	800a8b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7fa:	f000 fc9b 	bl	800b134 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a80c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	609a      	str	r2, [r3, #8]
      break;
 800a816:	e04f      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a828:	f000 fc84 	bl	800b134 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	689a      	ldr	r2, [r3, #8]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a83a:	609a      	str	r2, [r3, #8]
      break;
 800a83c:	e03c      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a84a:	461a      	mov	r2, r3
 800a84c:	f000 fbf4 	bl	800b038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2150      	movs	r1, #80	@ 0x50
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fc4e 	bl	800b0f8 <TIM_ITRx_SetConfig>
      break;
 800a85c:	e02c      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a86a:	461a      	mov	r2, r3
 800a86c:	f000 fc13 	bl	800b096 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2160      	movs	r1, #96	@ 0x60
 800a876:	4618      	mov	r0, r3
 800a878:	f000 fc3e 	bl	800b0f8 <TIM_ITRx_SetConfig>
      break;
 800a87c:	e01c      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a88a:	461a      	mov	r2, r3
 800a88c:	f000 fbd4 	bl	800b038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2140      	movs	r1, #64	@ 0x40
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fc2e 	bl	800b0f8 <TIM_ITRx_SetConfig>
      break;
 800a89c:	e00c      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	f000 fc25 	bl	800b0f8 <TIM_ITRx_SetConfig>
      break;
 800a8ae:	e003      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b4:	e000      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a8b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	ffceff88 	.word	0xffceff88
 800a8d8:	00100040 	.word	0x00100040
 800a8dc:	00100030 	.word	0x00100030
 800a8e0:	00100020 	.word	0x00100020

0800a8e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a47      	ldr	r2, [pc, #284]	@ (800aa64 <TIM_Base_SetConfig+0x130>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d013      	beq.n	800a974 <TIM_Base_SetConfig+0x40>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a952:	d00f      	beq.n	800a974 <TIM_Base_SetConfig+0x40>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a44      	ldr	r2, [pc, #272]	@ (800aa68 <TIM_Base_SetConfig+0x134>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d00b      	beq.n	800a974 <TIM_Base_SetConfig+0x40>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a43      	ldr	r2, [pc, #268]	@ (800aa6c <TIM_Base_SetConfig+0x138>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d007      	beq.n	800a974 <TIM_Base_SetConfig+0x40>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a42      	ldr	r2, [pc, #264]	@ (800aa70 <TIM_Base_SetConfig+0x13c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d003      	beq.n	800a974 <TIM_Base_SetConfig+0x40>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a41      	ldr	r2, [pc, #260]	@ (800aa74 <TIM_Base_SetConfig+0x140>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d108      	bne.n	800a986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a97a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	4313      	orrs	r3, r2
 800a984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a36      	ldr	r2, [pc, #216]	@ (800aa64 <TIM_Base_SetConfig+0x130>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d027      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a994:	d023      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a33      	ldr	r2, [pc, #204]	@ (800aa68 <TIM_Base_SetConfig+0x134>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d01f      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a32      	ldr	r2, [pc, #200]	@ (800aa6c <TIM_Base_SetConfig+0x138>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d01b      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a31      	ldr	r2, [pc, #196]	@ (800aa70 <TIM_Base_SetConfig+0x13c>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d017      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a30      	ldr	r2, [pc, #192]	@ (800aa74 <TIM_Base_SetConfig+0x140>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d013      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a2f      	ldr	r2, [pc, #188]	@ (800aa78 <TIM_Base_SetConfig+0x144>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d00f      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a2e      	ldr	r2, [pc, #184]	@ (800aa7c <TIM_Base_SetConfig+0x148>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d00b      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a2d      	ldr	r2, [pc, #180]	@ (800aa80 <TIM_Base_SetConfig+0x14c>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d007      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a2c      	ldr	r2, [pc, #176]	@ (800aa84 <TIM_Base_SetConfig+0x150>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d003      	beq.n	800a9de <TIM_Base_SetConfig+0xaa>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a2b      	ldr	r2, [pc, #172]	@ (800aa88 <TIM_Base_SetConfig+0x154>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d108      	bne.n	800a9f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	689a      	ldr	r2, [r3, #8]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a14      	ldr	r2, [pc, #80]	@ (800aa64 <TIM_Base_SetConfig+0x130>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d00f      	beq.n	800aa36 <TIM_Base_SetConfig+0x102>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a16      	ldr	r2, [pc, #88]	@ (800aa74 <TIM_Base_SetConfig+0x140>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d00b      	beq.n	800aa36 <TIM_Base_SetConfig+0x102>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a15      	ldr	r2, [pc, #84]	@ (800aa78 <TIM_Base_SetConfig+0x144>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d007      	beq.n	800aa36 <TIM_Base_SetConfig+0x102>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a14      	ldr	r2, [pc, #80]	@ (800aa7c <TIM_Base_SetConfig+0x148>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d003      	beq.n	800aa36 <TIM_Base_SetConfig+0x102>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a13      	ldr	r2, [pc, #76]	@ (800aa80 <TIM_Base_SetConfig+0x14c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d103      	bne.n	800aa3e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	691a      	ldr	r2, [r3, #16]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f043 0204 	orr.w	r2, r3, #4
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	601a      	str	r2, [r3, #0]
}
 800aa56:	bf00      	nop
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	40010000 	.word	0x40010000
 800aa68:	40000400 	.word	0x40000400
 800aa6c:	40000800 	.word	0x40000800
 800aa70:	40000c00 	.word	0x40000c00
 800aa74:	40010400 	.word	0x40010400
 800aa78:	40014000 	.word	0x40014000
 800aa7c:	40014400 	.word	0x40014400
 800aa80:	40014800 	.word	0x40014800
 800aa84:	4000e000 	.word	0x4000e000
 800aa88:	4000e400 	.word	0x4000e400

0800aa8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a1b      	ldr	r3, [r3, #32]
 800aaa0:	f023 0201 	bic.w	r2, r3, #1
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4b37      	ldr	r3, [pc, #220]	@ (800ab94 <TIM_OC1_SetConfig+0x108>)
 800aab8:	4013      	ands	r3, r2
 800aaba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f023 0303 	bic.w	r3, r3, #3
 800aac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f023 0302 	bic.w	r3, r3, #2
 800aad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	4313      	orrs	r3, r2
 800aade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a2d      	ldr	r2, [pc, #180]	@ (800ab98 <TIM_OC1_SetConfig+0x10c>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d00f      	beq.n	800ab08 <TIM_OC1_SetConfig+0x7c>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a2c      	ldr	r2, [pc, #176]	@ (800ab9c <TIM_OC1_SetConfig+0x110>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d00b      	beq.n	800ab08 <TIM_OC1_SetConfig+0x7c>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a2b      	ldr	r2, [pc, #172]	@ (800aba0 <TIM_OC1_SetConfig+0x114>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d007      	beq.n	800ab08 <TIM_OC1_SetConfig+0x7c>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a2a      	ldr	r2, [pc, #168]	@ (800aba4 <TIM_OC1_SetConfig+0x118>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d003      	beq.n	800ab08 <TIM_OC1_SetConfig+0x7c>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a29      	ldr	r2, [pc, #164]	@ (800aba8 <TIM_OC1_SetConfig+0x11c>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d10c      	bne.n	800ab22 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	f023 0308 	bic.w	r3, r3, #8
 800ab0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f023 0304 	bic.w	r3, r3, #4
 800ab20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a1c      	ldr	r2, [pc, #112]	@ (800ab98 <TIM_OC1_SetConfig+0x10c>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d00f      	beq.n	800ab4a <TIM_OC1_SetConfig+0xbe>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ab9c <TIM_OC1_SetConfig+0x110>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d00b      	beq.n	800ab4a <TIM_OC1_SetConfig+0xbe>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a1a      	ldr	r2, [pc, #104]	@ (800aba0 <TIM_OC1_SetConfig+0x114>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d007      	beq.n	800ab4a <TIM_OC1_SetConfig+0xbe>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a19      	ldr	r2, [pc, #100]	@ (800aba4 <TIM_OC1_SetConfig+0x118>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d003      	beq.n	800ab4a <TIM_OC1_SetConfig+0xbe>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a18      	ldr	r2, [pc, #96]	@ (800aba8 <TIM_OC1_SetConfig+0x11c>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d111      	bne.n	800ab6e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ab58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	621a      	str	r2, [r3, #32]
}
 800ab88:	bf00      	nop
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	fffeff8f 	.word	0xfffeff8f
 800ab98:	40010000 	.word	0x40010000
 800ab9c:	40010400 	.word	0x40010400
 800aba0:	40014000 	.word	0x40014000
 800aba4:	40014400 	.word	0x40014400
 800aba8:	40014800 	.word	0x40014800

0800abac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	f023 0210 	bic.w	r2, r3, #16
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4b34      	ldr	r3, [pc, #208]	@ (800aca8 <TIM_OC2_SetConfig+0xfc>)
 800abd8:	4013      	ands	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	021b      	lsls	r3, r3, #8
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4313      	orrs	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	f023 0320 	bic.w	r3, r3, #32
 800abf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	011b      	lsls	r3, r3, #4
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a29      	ldr	r2, [pc, #164]	@ (800acac <TIM_OC2_SetConfig+0x100>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d003      	beq.n	800ac14 <TIM_OC2_SetConfig+0x68>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a28      	ldr	r2, [pc, #160]	@ (800acb0 <TIM_OC2_SetConfig+0x104>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d10d      	bne.n	800ac30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	011b      	lsls	r3, r3, #4
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a1e      	ldr	r2, [pc, #120]	@ (800acac <TIM_OC2_SetConfig+0x100>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00f      	beq.n	800ac58 <TIM_OC2_SetConfig+0xac>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a1d      	ldr	r2, [pc, #116]	@ (800acb0 <TIM_OC2_SetConfig+0x104>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d00b      	beq.n	800ac58 <TIM_OC2_SetConfig+0xac>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a1c      	ldr	r2, [pc, #112]	@ (800acb4 <TIM_OC2_SetConfig+0x108>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d007      	beq.n	800ac58 <TIM_OC2_SetConfig+0xac>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a1b      	ldr	r2, [pc, #108]	@ (800acb8 <TIM_OC2_SetConfig+0x10c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d003      	beq.n	800ac58 <TIM_OC2_SetConfig+0xac>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a1a      	ldr	r2, [pc, #104]	@ (800acbc <TIM_OC2_SetConfig+0x110>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d113      	bne.n	800ac80 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	621a      	str	r2, [r3, #32]
}
 800ac9a:	bf00      	nop
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	feff8fff 	.word	0xfeff8fff
 800acac:	40010000 	.word	0x40010000
 800acb0:	40010400 	.word	0x40010400
 800acb4:	40014000 	.word	0x40014000
 800acb8:	40014400 	.word	0x40014400
 800acbc:	40014800 	.word	0x40014800

0800acc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4b33      	ldr	r3, [pc, #204]	@ (800adb8 <TIM_OC3_SetConfig+0xf8>)
 800acec:	4013      	ands	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f023 0303 	bic.w	r3, r3, #3
 800acf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	021b      	lsls	r3, r3, #8
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a28      	ldr	r2, [pc, #160]	@ (800adbc <TIM_OC3_SetConfig+0xfc>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d003      	beq.n	800ad26 <TIM_OC3_SetConfig+0x66>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a27      	ldr	r2, [pc, #156]	@ (800adc0 <TIM_OC3_SetConfig+0x100>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d10d      	bne.n	800ad42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a1d      	ldr	r2, [pc, #116]	@ (800adbc <TIM_OC3_SetConfig+0xfc>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d00f      	beq.n	800ad6a <TIM_OC3_SetConfig+0xaa>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a1c      	ldr	r2, [pc, #112]	@ (800adc0 <TIM_OC3_SetConfig+0x100>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d00b      	beq.n	800ad6a <TIM_OC3_SetConfig+0xaa>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a1b      	ldr	r2, [pc, #108]	@ (800adc4 <TIM_OC3_SetConfig+0x104>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d007      	beq.n	800ad6a <TIM_OC3_SetConfig+0xaa>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a1a      	ldr	r2, [pc, #104]	@ (800adc8 <TIM_OC3_SetConfig+0x108>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d003      	beq.n	800ad6a <TIM_OC3_SetConfig+0xaa>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a19      	ldr	r2, [pc, #100]	@ (800adcc <TIM_OC3_SetConfig+0x10c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d113      	bne.n	800ad92 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	621a      	str	r2, [r3, #32]
}
 800adac:	bf00      	nop
 800adae:	371c      	adds	r7, #28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	fffeff8f 	.word	0xfffeff8f
 800adbc:	40010000 	.word	0x40010000
 800adc0:	40010400 	.word	0x40010400
 800adc4:	40014000 	.word	0x40014000
 800adc8:	40014400 	.word	0x40014400
 800adcc:	40014800 	.word	0x40014800

0800add0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	4b24      	ldr	r3, [pc, #144]	@ (800ae8c <TIM_OC4_SetConfig+0xbc>)
 800adfc:	4013      	ands	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	021b      	lsls	r3, r3, #8
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	031b      	lsls	r3, r3, #12
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a19      	ldr	r2, [pc, #100]	@ (800ae90 <TIM_OC4_SetConfig+0xc0>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00f      	beq.n	800ae50 <TIM_OC4_SetConfig+0x80>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a18      	ldr	r2, [pc, #96]	@ (800ae94 <TIM_OC4_SetConfig+0xc4>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d00b      	beq.n	800ae50 <TIM_OC4_SetConfig+0x80>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a17      	ldr	r2, [pc, #92]	@ (800ae98 <TIM_OC4_SetConfig+0xc8>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d007      	beq.n	800ae50 <TIM_OC4_SetConfig+0x80>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a16      	ldr	r2, [pc, #88]	@ (800ae9c <TIM_OC4_SetConfig+0xcc>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d003      	beq.n	800ae50 <TIM_OC4_SetConfig+0x80>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a15      	ldr	r2, [pc, #84]	@ (800aea0 <TIM_OC4_SetConfig+0xd0>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d109      	bne.n	800ae64 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	019b      	lsls	r3, r3, #6
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	621a      	str	r2, [r3, #32]
}
 800ae7e:	bf00      	nop
 800ae80:	371c      	adds	r7, #28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	feff8fff 	.word	0xfeff8fff
 800ae90:	40010000 	.word	0x40010000
 800ae94:	40010400 	.word	0x40010400
 800ae98:	40014000 	.word	0x40014000
 800ae9c:	40014400 	.word	0x40014400
 800aea0:	40014800 	.word	0x40014800

0800aea4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a1b      	ldr	r3, [r3, #32]
 800aeb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4b21      	ldr	r3, [pc, #132]	@ (800af54 <TIM_OC5_SetConfig+0xb0>)
 800aed0:	4013      	ands	r3, r2
 800aed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aee4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	041b      	lsls	r3, r3, #16
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a18      	ldr	r2, [pc, #96]	@ (800af58 <TIM_OC5_SetConfig+0xb4>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00f      	beq.n	800af1a <TIM_OC5_SetConfig+0x76>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a17      	ldr	r2, [pc, #92]	@ (800af5c <TIM_OC5_SetConfig+0xb8>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00b      	beq.n	800af1a <TIM_OC5_SetConfig+0x76>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a16      	ldr	r2, [pc, #88]	@ (800af60 <TIM_OC5_SetConfig+0xbc>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d007      	beq.n	800af1a <TIM_OC5_SetConfig+0x76>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a15      	ldr	r2, [pc, #84]	@ (800af64 <TIM_OC5_SetConfig+0xc0>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d003      	beq.n	800af1a <TIM_OC5_SetConfig+0x76>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a14      	ldr	r2, [pc, #80]	@ (800af68 <TIM_OC5_SetConfig+0xc4>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d109      	bne.n	800af2e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	021b      	lsls	r3, r3, #8
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	621a      	str	r2, [r3, #32]
}
 800af48:	bf00      	nop
 800af4a:	371c      	adds	r7, #28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	fffeff8f 	.word	0xfffeff8f
 800af58:	40010000 	.word	0x40010000
 800af5c:	40010400 	.word	0x40010400
 800af60:	40014000 	.word	0x40014000
 800af64:	40014400 	.word	0x40014400
 800af68:	40014800 	.word	0x40014800

0800af6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	4b22      	ldr	r3, [pc, #136]	@ (800b020 <TIM_OC6_SetConfig+0xb4>)
 800af98:	4013      	ands	r3, r2
 800af9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	021b      	lsls	r3, r3, #8
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800afae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	051b      	lsls	r3, r3, #20
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	4313      	orrs	r3, r2
 800afba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a19      	ldr	r2, [pc, #100]	@ (800b024 <TIM_OC6_SetConfig+0xb8>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d00f      	beq.n	800afe4 <TIM_OC6_SetConfig+0x78>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a18      	ldr	r2, [pc, #96]	@ (800b028 <TIM_OC6_SetConfig+0xbc>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d00b      	beq.n	800afe4 <TIM_OC6_SetConfig+0x78>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a17      	ldr	r2, [pc, #92]	@ (800b02c <TIM_OC6_SetConfig+0xc0>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d007      	beq.n	800afe4 <TIM_OC6_SetConfig+0x78>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a16      	ldr	r2, [pc, #88]	@ (800b030 <TIM_OC6_SetConfig+0xc4>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d003      	beq.n	800afe4 <TIM_OC6_SetConfig+0x78>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a15      	ldr	r2, [pc, #84]	@ (800b034 <TIM_OC6_SetConfig+0xc8>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d109      	bne.n	800aff8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800afea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	029b      	lsls	r3, r3, #10
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	685a      	ldr	r2, [r3, #4]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	621a      	str	r2, [r3, #32]
}
 800b012:	bf00      	nop
 800b014:	371c      	adds	r7, #28
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	feff8fff 	.word	0xfeff8fff
 800b024:	40010000 	.word	0x40010000
 800b028:	40010400 	.word	0x40010400
 800b02c:	40014000 	.word	0x40014000
 800b030:	40014400 	.word	0x40014400
 800b034:	40014800 	.word	0x40014800

0800b038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	f023 0201 	bic.w	r2, r3, #1
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	011b      	lsls	r3, r3, #4
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f023 030a 	bic.w	r3, r3, #10
 800b074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	621a      	str	r2, [r3, #32]
}
 800b08a:	bf00      	nop
 800b08c:	371c      	adds	r7, #28
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b096:	b480      	push	{r7}
 800b098:	b087      	sub	sp, #28
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	60f8      	str	r0, [r7, #12]
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	f023 0210 	bic.w	r2, r3, #16
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	699b      	ldr	r3, [r3, #24]
 800b0b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b0c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	031b      	lsls	r3, r3, #12
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b0d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	621a      	str	r2, [r3, #32]
}
 800b0ea:	bf00      	nop
 800b0ec:	371c      	adds	r7, #28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
	...

0800b0f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	4b09      	ldr	r3, [pc, #36]	@ (800b130 <TIM_ITRx_SetConfig+0x38>)
 800b10c:	4013      	ands	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b110:	683a      	ldr	r2, [r7, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	f043 0307 	orr.w	r3, r3, #7
 800b11a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	609a      	str	r2, [r3, #8]
}
 800b122:	bf00      	nop
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	ffcfff8f 	.word	0xffcfff8f

0800b134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b14e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	021a      	lsls	r2, r3, #8
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	431a      	orrs	r2, r3
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	4313      	orrs	r3, r2
 800b160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	609a      	str	r2, [r3, #8]
}
 800b168:	bf00      	nop
 800b16a:	371c      	adds	r7, #28
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b184:	2b01      	cmp	r3, #1
 800b186:	d101      	bne.n	800b18c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b188:	2302      	movs	r3, #2
 800b18a:	e077      	b.n	800b27c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a35      	ldr	r2, [pc, #212]	@ (800b288 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d004      	beq.n	800b1c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a34      	ldr	r2, [pc, #208]	@ (800b28c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d108      	bne.n	800b1d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b1c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a25      	ldr	r2, [pc, #148]	@ (800b288 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d02c      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1fe:	d027      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a22      	ldr	r2, [pc, #136]	@ (800b290 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d022      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a21      	ldr	r2, [pc, #132]	@ (800b294 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d01d      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a1f      	ldr	r2, [pc, #124]	@ (800b298 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d018      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a1a      	ldr	r2, [pc, #104]	@ (800b28c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d013      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a1b      	ldr	r2, [pc, #108]	@ (800b29c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d00e      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a1a      	ldr	r2, [pc, #104]	@ (800b2a0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d009      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a18      	ldr	r2, [pc, #96]	@ (800b2a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d004      	beq.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a17      	ldr	r2, [pc, #92]	@ (800b2a8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d10c      	bne.n	800b26a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	4313      	orrs	r3, r2
 800b260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	40010000 	.word	0x40010000
 800b28c:	40010400 	.word	0x40010400
 800b290:	40000400 	.word	0x40000400
 800b294:	40000800 	.word	0x40000800
 800b298:	40000c00 	.word	0x40000c00
 800b29c:	40001800 	.word	0x40001800
 800b2a0:	40014000 	.word	0x40014000
 800b2a4:	4000e000 	.word	0x4000e000
 800b2a8:	4000e400 	.word	0x4000e400

0800b2ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d101      	bne.n	800b2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	e073      	b.n	800b3b0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4313      	orrs	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	4313      	orrs	r3, r2
 800b314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	695b      	ldr	r3, [r3, #20]
 800b320:	4313      	orrs	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	041b      	lsls	r3, r3, #16
 800b33e:	4313      	orrs	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a19      	ldr	r2, [pc, #100]	@ (800b3bc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d004      	beq.n	800b364 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a18      	ldr	r2, [pc, #96]	@ (800b3c0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d11c      	bne.n	800b39e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36e:	051b      	lsls	r3, r3, #20
 800b370:	4313      	orrs	r3, r2
 800b372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	4313      	orrs	r3, r2
 800b380:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38c:	4313      	orrs	r3, r2
 800b38e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	40010000 	.word	0x40010000
 800b3c0:	40010400 	.word	0x40010400

0800b3c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800b406:	4b92      	ldr	r3, [pc, #584]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b408:	220a      	movs	r2, #10
 800b40a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 20;
 800b40c:	4b90      	ldr	r3, [pc, #576]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b40e:	2214      	movs	r2, #20
 800b410:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 3;
 800b412:	4b8f      	ldr	r3, [pc, #572]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b414:	2203      	movs	r2, #3
 800b416:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 800b418:	4b8d      	ldr	r3, [pc, #564]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b41a:	2203      	movs	r2, #3
 800b41c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b41e:	4b8d      	ldr	r3, [pc, #564]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b420:	22ff      	movs	r2, #255	@ 0xff
 800b422:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b424:	4b8b      	ldr	r3, [pc, #556]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b426:	22ff      	movs	r2, #255	@ 0xff
 800b428:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800b42a:	4b8a      	ldr	r3, [pc, #552]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b430:	4b88      	ldr	r3, [pc, #544]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b432:	2200      	movs	r2, #0
 800b434:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800b436:	4b88      	ldr	r3, [pc, #544]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b438:	220a      	movs	r2, #10
 800b43a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 20;
 800b43c:	4b86      	ldr	r3, [pc, #536]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b43e:	2214      	movs	r2, #20
 800b440:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b442:	4b85      	ldr	r3, [pc, #532]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b444:	2201      	movs	r2, #1
 800b446:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 3;
 800b448:	4b83      	ldr	r3, [pc, #524]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b44a:	2203      	movs	r2, #3
 800b44c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b44e:	2100      	movs	r1, #0
 800b450:	2000      	movs	r0, #0
 800b452:	f004 fee1 	bl	8010218 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b456:	4b7e      	ldr	r3, [pc, #504]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	061a      	lsls	r2, r3, #24
 800b45c:	4b7c      	ldr	r3, [pc, #496]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b45e:	785b      	ldrb	r3, [r3, #1]
 800b460:	041b      	lsls	r3, r3, #16
 800b462:	431a      	orrs	r2, r3
 800b464:	4b7a      	ldr	r3, [pc, #488]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b466:	789b      	ldrb	r3, [r3, #2]
 800b468:	021b      	lsls	r3, r3, #8
 800b46a:	4313      	orrs	r3, r2
 800b46c:	4a78      	ldr	r2, [pc, #480]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b46e:	78d2      	ldrb	r2, [r2, #3]
 800b470:	4313      	orrs	r3, r2
 800b472:	061a      	lsls	r2, r3, #24
 800b474:	4b76      	ldr	r3, [pc, #472]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	0619      	lsls	r1, r3, #24
 800b47a:	4b75      	ldr	r3, [pc, #468]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b47c:	785b      	ldrb	r3, [r3, #1]
 800b47e:	041b      	lsls	r3, r3, #16
 800b480:	4319      	orrs	r1, r3
 800b482:	4b73      	ldr	r3, [pc, #460]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b484:	789b      	ldrb	r3, [r3, #2]
 800b486:	021b      	lsls	r3, r3, #8
 800b488:	430b      	orrs	r3, r1
 800b48a:	4971      	ldr	r1, [pc, #452]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b48c:	78c9      	ldrb	r1, [r1, #3]
 800b48e:	430b      	orrs	r3, r1
 800b490:	021b      	lsls	r3, r3, #8
 800b492:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b496:	431a      	orrs	r2, r3
 800b498:	4b6d      	ldr	r3, [pc, #436]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	0619      	lsls	r1, r3, #24
 800b49e:	4b6c      	ldr	r3, [pc, #432]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b4a0:	785b      	ldrb	r3, [r3, #1]
 800b4a2:	041b      	lsls	r3, r3, #16
 800b4a4:	4319      	orrs	r1, r3
 800b4a6:	4b6a      	ldr	r3, [pc, #424]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b4a8:	789b      	ldrb	r3, [r3, #2]
 800b4aa:	021b      	lsls	r3, r3, #8
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	4968      	ldr	r1, [pc, #416]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b4b0:	78c9      	ldrb	r1, [r1, #3]
 800b4b2:	430b      	orrs	r3, r1
 800b4b4:	0a1b      	lsrs	r3, r3, #8
 800b4b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	4b64      	ldr	r3, [pc, #400]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	0619      	lsls	r1, r3, #24
 800b4c2:	4b63      	ldr	r3, [pc, #396]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b4c4:	785b      	ldrb	r3, [r3, #1]
 800b4c6:	041b      	lsls	r3, r3, #16
 800b4c8:	4319      	orrs	r1, r3
 800b4ca:	4b61      	ldr	r3, [pc, #388]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b4cc:	789b      	ldrb	r3, [r3, #2]
 800b4ce:	021b      	lsls	r3, r3, #8
 800b4d0:	430b      	orrs	r3, r1
 800b4d2:	495f      	ldr	r1, [pc, #380]	@ (800b650 <MX_LWIP_Init+0x250>)
 800b4d4:	78c9      	ldrb	r1, [r1, #3]
 800b4d6:	430b      	orrs	r3, r1
 800b4d8:	0e1b      	lsrs	r3, r3, #24
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	4a5f      	ldr	r2, [pc, #380]	@ (800b65c <MX_LWIP_Init+0x25c>)
 800b4de:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b4e0:	4b5c      	ldr	r3, [pc, #368]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	061a      	lsls	r2, r3, #24
 800b4e6:	4b5b      	ldr	r3, [pc, #364]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b4e8:	785b      	ldrb	r3, [r3, #1]
 800b4ea:	041b      	lsls	r3, r3, #16
 800b4ec:	431a      	orrs	r2, r3
 800b4ee:	4b59      	ldr	r3, [pc, #356]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b4f0:	789b      	ldrb	r3, [r3, #2]
 800b4f2:	021b      	lsls	r3, r3, #8
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	4a57      	ldr	r2, [pc, #348]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b4f8:	78d2      	ldrb	r2, [r2, #3]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	061a      	lsls	r2, r3, #24
 800b4fe:	4b55      	ldr	r3, [pc, #340]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	0619      	lsls	r1, r3, #24
 800b504:	4b53      	ldr	r3, [pc, #332]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b506:	785b      	ldrb	r3, [r3, #1]
 800b508:	041b      	lsls	r3, r3, #16
 800b50a:	4319      	orrs	r1, r3
 800b50c:	4b51      	ldr	r3, [pc, #324]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b50e:	789b      	ldrb	r3, [r3, #2]
 800b510:	021b      	lsls	r3, r3, #8
 800b512:	430b      	orrs	r3, r1
 800b514:	494f      	ldr	r1, [pc, #316]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b516:	78c9      	ldrb	r1, [r1, #3]
 800b518:	430b      	orrs	r3, r1
 800b51a:	021b      	lsls	r3, r3, #8
 800b51c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b520:	431a      	orrs	r2, r3
 800b522:	4b4c      	ldr	r3, [pc, #304]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	0619      	lsls	r1, r3, #24
 800b528:	4b4a      	ldr	r3, [pc, #296]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b52a:	785b      	ldrb	r3, [r3, #1]
 800b52c:	041b      	lsls	r3, r3, #16
 800b52e:	4319      	orrs	r1, r3
 800b530:	4b48      	ldr	r3, [pc, #288]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b532:	789b      	ldrb	r3, [r3, #2]
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	430b      	orrs	r3, r1
 800b538:	4946      	ldr	r1, [pc, #280]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b53a:	78c9      	ldrb	r1, [r1, #3]
 800b53c:	430b      	orrs	r3, r1
 800b53e:	0a1b      	lsrs	r3, r3, #8
 800b540:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b544:	431a      	orrs	r2, r3
 800b546:	4b43      	ldr	r3, [pc, #268]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	0619      	lsls	r1, r3, #24
 800b54c:	4b41      	ldr	r3, [pc, #260]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b54e:	785b      	ldrb	r3, [r3, #1]
 800b550:	041b      	lsls	r3, r3, #16
 800b552:	4319      	orrs	r1, r3
 800b554:	4b3f      	ldr	r3, [pc, #252]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b556:	789b      	ldrb	r3, [r3, #2]
 800b558:	021b      	lsls	r3, r3, #8
 800b55a:	430b      	orrs	r3, r1
 800b55c:	493d      	ldr	r1, [pc, #244]	@ (800b654 <MX_LWIP_Init+0x254>)
 800b55e:	78c9      	ldrb	r1, [r1, #3]
 800b560:	430b      	orrs	r3, r1
 800b562:	0e1b      	lsrs	r3, r3, #24
 800b564:	4313      	orrs	r3, r2
 800b566:	4a3e      	ldr	r2, [pc, #248]	@ (800b660 <MX_LWIP_Init+0x260>)
 800b568:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b56a:	4b3b      	ldr	r3, [pc, #236]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	061a      	lsls	r2, r3, #24
 800b570:	4b39      	ldr	r3, [pc, #228]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b572:	785b      	ldrb	r3, [r3, #1]
 800b574:	041b      	lsls	r3, r3, #16
 800b576:	431a      	orrs	r2, r3
 800b578:	4b37      	ldr	r3, [pc, #220]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b57a:	789b      	ldrb	r3, [r3, #2]
 800b57c:	021b      	lsls	r3, r3, #8
 800b57e:	4313      	orrs	r3, r2
 800b580:	4a35      	ldr	r2, [pc, #212]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b582:	78d2      	ldrb	r2, [r2, #3]
 800b584:	4313      	orrs	r3, r2
 800b586:	061a      	lsls	r2, r3, #24
 800b588:	4b33      	ldr	r3, [pc, #204]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	0619      	lsls	r1, r3, #24
 800b58e:	4b32      	ldr	r3, [pc, #200]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	041b      	lsls	r3, r3, #16
 800b594:	4319      	orrs	r1, r3
 800b596:	4b30      	ldr	r3, [pc, #192]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b598:	789b      	ldrb	r3, [r3, #2]
 800b59a:	021b      	lsls	r3, r3, #8
 800b59c:	430b      	orrs	r3, r1
 800b59e:	492e      	ldr	r1, [pc, #184]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b5a0:	78c9      	ldrb	r1, [r1, #3]
 800b5a2:	430b      	orrs	r3, r1
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	4b2a      	ldr	r3, [pc, #168]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	0619      	lsls	r1, r3, #24
 800b5b2:	4b29      	ldr	r3, [pc, #164]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b5b4:	785b      	ldrb	r3, [r3, #1]
 800b5b6:	041b      	lsls	r3, r3, #16
 800b5b8:	4319      	orrs	r1, r3
 800b5ba:	4b27      	ldr	r3, [pc, #156]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b5bc:	789b      	ldrb	r3, [r3, #2]
 800b5be:	021b      	lsls	r3, r3, #8
 800b5c0:	430b      	orrs	r3, r1
 800b5c2:	4925      	ldr	r1, [pc, #148]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b5c4:	78c9      	ldrb	r1, [r1, #3]
 800b5c6:	430b      	orrs	r3, r1
 800b5c8:	0a1b      	lsrs	r3, r3, #8
 800b5ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b5ce:	431a      	orrs	r2, r3
 800b5d0:	4b21      	ldr	r3, [pc, #132]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	0619      	lsls	r1, r3, #24
 800b5d6:	4b20      	ldr	r3, [pc, #128]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b5d8:	785b      	ldrb	r3, [r3, #1]
 800b5da:	041b      	lsls	r3, r3, #16
 800b5dc:	4319      	orrs	r1, r3
 800b5de:	4b1e      	ldr	r3, [pc, #120]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b5e0:	789b      	ldrb	r3, [r3, #2]
 800b5e2:	021b      	lsls	r3, r3, #8
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	491c      	ldr	r1, [pc, #112]	@ (800b658 <MX_LWIP_Init+0x258>)
 800b5e8:	78c9      	ldrb	r1, [r1, #3]
 800b5ea:	430b      	orrs	r3, r1
 800b5ec:	0e1b      	lsrs	r3, r3, #24
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	4a1c      	ldr	r2, [pc, #112]	@ (800b664 <MX_LWIP_Init+0x264>)
 800b5f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b5f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b668 <MX_LWIP_Init+0x268>)
 800b5f6:	9302      	str	r3, [sp, #8]
 800b5f8:	4b1c      	ldr	r3, [pc, #112]	@ (800b66c <MX_LWIP_Init+0x26c>)
 800b5fa:	9301      	str	r3, [sp, #4]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	4b18      	ldr	r3, [pc, #96]	@ (800b664 <MX_LWIP_Init+0x264>)
 800b602:	4a17      	ldr	r2, [pc, #92]	@ (800b660 <MX_LWIP_Init+0x260>)
 800b604:	4915      	ldr	r1, [pc, #84]	@ (800b65c <MX_LWIP_Init+0x25c>)
 800b606:	481a      	ldr	r0, [pc, #104]	@ (800b670 <MX_LWIP_Init+0x270>)
 800b608:	f005 fc88 	bl	8010f1c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b60c:	4818      	ldr	r0, [pc, #96]	@ (800b670 <MX_LWIP_Init+0x270>)
 800b60e:	f005 fe3b 	bl	8011288 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b612:	4817      	ldr	r0, [pc, #92]	@ (800b670 <MX_LWIP_Init+0x270>)
 800b614:	f005 fe48 	bl	80112a8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b618:	4916      	ldr	r1, [pc, #88]	@ (800b674 <MX_LWIP_Init+0x274>)
 800b61a:	4815      	ldr	r0, [pc, #84]	@ (800b670 <MX_LWIP_Init+0x270>)
 800b61c:	f005 ff46 	bl	80114ac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b620:	2224      	movs	r2, #36	@ 0x24
 800b622:	2100      	movs	r1, #0
 800b624:	4814      	ldr	r0, [pc, #80]	@ (800b678 <MX_LWIP_Init+0x278>)
 800b626:	f00f fc2a 	bl	801ae7e <memset>
  attributes.name = "EthLink";
 800b62a:	4b13      	ldr	r3, [pc, #76]	@ (800b678 <MX_LWIP_Init+0x278>)
 800b62c:	4a13      	ldr	r2, [pc, #76]	@ (800b67c <MX_LWIP_Init+0x27c>)
 800b62e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b630:	4b11      	ldr	r3, [pc, #68]	@ (800b678 <MX_LWIP_Init+0x278>)
 800b632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b636:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b638:	4b0f      	ldr	r3, [pc, #60]	@ (800b678 <MX_LWIP_Init+0x278>)
 800b63a:	2210      	movs	r2, #16
 800b63c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800b63e:	4a0e      	ldr	r2, [pc, #56]	@ (800b678 <MX_LWIP_Init+0x278>)
 800b640:	490b      	ldr	r1, [pc, #44]	@ (800b670 <MX_LWIP_Init+0x270>)
 800b642:	480f      	ldr	r0, [pc, #60]	@ (800b680 <MX_LWIP_Init+0x280>)
 800b644:	f000 fde1 	bl	800c20a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b648:	bf00      	nop
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	24005934 	.word	0x24005934
 800b654:	24005938 	.word	0x24005938
 800b658:	2400593c 	.word	0x2400593c
 800b65c:	24005928 	.word	0x24005928
 800b660:	2400592c 	.word	0x2400592c
 800b664:	24005930 	.word	0x24005930
 800b668:	08010155 	.word	0x08010155
 800b66c:	0800bb6d 	.word	0x0800bb6d
 800b670:	240058f4 	.word	0x240058f4
 800b674:	0800b685 	.word	0x0800b685
 800b678:	24005940 	.word	0x24005940
 800b67c:	0801bcb4 	.word	0x0801bcb4
 800b680:	0800be61 	.word	0x0800be61

0800b684 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b6a0:	4b04      	ldr	r3, [pc, #16]	@ (800b6b4 <HAL_ETH_RxCpltCallback+0x1c>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f001 f847 	bl	800c738 <osSemaphoreRelease>
}
 800b6aa:	bf00      	nop
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	2400596c 	.word	0x2400596c

0800b6b8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800b6c0:	4b04      	ldr	r3, [pc, #16]	@ (800b6d4 <HAL_ETH_TxCpltCallback+0x1c>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 f837 	bl	800c738 <osSemaphoreRelease>
}
 800b6ca:	bf00      	nop
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	24005970 	.word	0x24005970

0800b6d8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7f9 fd4e 	bl	8005182 <HAL_ETH_GetDMAError>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6ec:	2b80      	cmp	r3, #128	@ 0x80
 800b6ee:	d104      	bne.n	800b6fa <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800b6f0:	4b04      	ldr	r3, [pc, #16]	@ (800b704 <HAL_ETH_ErrorCallback+0x2c>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f001 f81f 	bl	800c738 <osSemaphoreRelease>
  }
}
 800b6fa:	bf00      	nop
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	2400596c 	.word	0x2400596c

0800b708 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b0aa      	sub	sp, #168	@ 0xa8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800b722:	f107 0310 	add.w	r3, r7, #16
 800b726:	2264      	movs	r2, #100	@ 0x64
 800b728:	2100      	movs	r1, #0
 800b72a:	4618      	mov	r0, r3
 800b72c:	f00f fba7 	bl	801ae7e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b730:	4b89      	ldr	r3, [pc, #548]	@ (800b958 <low_level_init+0x250>)
 800b732:	4a8a      	ldr	r2, [pc, #552]	@ (800b95c <low_level_init+0x254>)
 800b734:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b736:	2300      	movs	r3, #0
 800b738:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b73a:	2380      	movs	r3, #128	@ 0x80
 800b73c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b73e:	23e1      	movs	r3, #225	@ 0xe1
 800b740:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b742:	2300      	movs	r3, #0
 800b744:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b746:	2300      	movs	r3, #0
 800b748:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b74a:	2300      	movs	r3, #0
 800b74c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b74e:	4a82      	ldr	r2, [pc, #520]	@ (800b958 <low_level_init+0x250>)
 800b750:	f107 0308 	add.w	r3, r7, #8
 800b754:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b756:	4b80      	ldr	r3, [pc, #512]	@ (800b958 <low_level_init+0x250>)
 800b758:	2201      	movs	r2, #1
 800b75a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b75c:	4b7e      	ldr	r3, [pc, #504]	@ (800b958 <low_level_init+0x250>)
 800b75e:	4a80      	ldr	r2, [pc, #512]	@ (800b960 <low_level_init+0x258>)
 800b760:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b762:	4b7d      	ldr	r3, [pc, #500]	@ (800b958 <low_level_init+0x250>)
 800b764:	4a7f      	ldr	r2, [pc, #508]	@ (800b964 <low_level_init+0x25c>)
 800b766:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b768:	4b7b      	ldr	r3, [pc, #492]	@ (800b958 <low_level_init+0x250>)
 800b76a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b76e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b770:	4879      	ldr	r0, [pc, #484]	@ (800b958 <low_level_init+0x250>)
 800b772:	f7f8 fccb 	bl	800410c <HAL_ETH_Init>
 800b776:	4603      	mov	r3, r0
 800b778:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b77c:	2238      	movs	r2, #56	@ 0x38
 800b77e:	2100      	movs	r1, #0
 800b780:	4879      	ldr	r0, [pc, #484]	@ (800b968 <low_level_init+0x260>)
 800b782:	f00f fb7c 	bl	801ae7e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b786:	4b78      	ldr	r3, [pc, #480]	@ (800b968 <low_level_init+0x260>)
 800b788:	2221      	movs	r2, #33	@ 0x21
 800b78a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b78c:	4b76      	ldr	r3, [pc, #472]	@ (800b968 <low_level_init+0x260>)
 800b78e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800b792:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b794:	4b74      	ldr	r3, [pc, #464]	@ (800b968 <low_level_init+0x260>)
 800b796:	2200      	movs	r2, #0
 800b798:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b79a:	4874      	ldr	r0, [pc, #464]	@ (800b96c <low_level_init+0x264>)
 800b79c:	f005 fa78 	bl	8010c90 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2206      	movs	r2, #6
 800b7a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b7a8:	4b6b      	ldr	r3, [pc, #428]	@ (800b958 <low_level_init+0x250>)
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	781a      	ldrb	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b7b4:	4b68      	ldr	r3, [pc, #416]	@ (800b958 <low_level_init+0x250>)
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	785a      	ldrb	r2, [r3, #1]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b7c0:	4b65      	ldr	r3, [pc, #404]	@ (800b958 <low_level_init+0x250>)
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	789a      	ldrb	r2, [r3, #2]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b7cc:	4b62      	ldr	r3, [pc, #392]	@ (800b958 <low_level_init+0x250>)
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	78da      	ldrb	r2, [r3, #3]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b7d8:	4b5f      	ldr	r3, [pc, #380]	@ (800b958 <low_level_init+0x250>)
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	791a      	ldrb	r2, [r3, #4]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b7e4:	4b5c      	ldr	r3, [pc, #368]	@ (800b958 <low_level_init+0x250>)
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	795a      	ldrb	r2, [r3, #5]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b7f6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7fe:	f043 030a 	orr.w	r3, r3, #10
 800b802:	b2da      	uxtb	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b80a:	2200      	movs	r2, #0
 800b80c:	2100      	movs	r1, #0
 800b80e:	2001      	movs	r0, #1
 800b810:	f000 feb6 	bl	800c580 <osSemaphoreNew>
 800b814:	4603      	mov	r3, r0
 800b816:	4a56      	ldr	r2, [pc, #344]	@ (800b970 <low_level_init+0x268>)
 800b818:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b81a:	2200      	movs	r2, #0
 800b81c:	2100      	movs	r1, #0
 800b81e:	2001      	movs	r0, #1
 800b820:	f000 feae 	bl	800c580 <osSemaphoreNew>
 800b824:	4603      	mov	r3, r0
 800b826:	4a53      	ldr	r2, [pc, #332]	@ (800b974 <low_level_init+0x26c>)
 800b828:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b82a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b82e:	2224      	movs	r2, #36	@ 0x24
 800b830:	2100      	movs	r1, #0
 800b832:	4618      	mov	r0, r3
 800b834:	f00f fb23 	bl	801ae7e <memset>
  attributes.name = "EthIf";
 800b838:	4b4f      	ldr	r3, [pc, #316]	@ (800b978 <low_level_init+0x270>)
 800b83a:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b83c:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800b840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800b844:	2330      	movs	r3, #48	@ 0x30
 800b846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800b84a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b84e:	461a      	mov	r2, r3
 800b850:	6879      	ldr	r1, [r7, #4]
 800b852:	484a      	ldr	r0, [pc, #296]	@ (800b97c <low_level_init+0x274>)
 800b854:	f000 fcd9 	bl	800c20a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b858:	4949      	ldr	r1, [pc, #292]	@ (800b980 <low_level_init+0x278>)
 800b85a:	484a      	ldr	r0, [pc, #296]	@ (800b984 <low_level_init+0x27c>)
 800b85c:	f7f6 fa5f 	bl	8001d1e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800b860:	4848      	ldr	r0, [pc, #288]	@ (800b984 <low_level_init+0x27c>)
 800b862:	f7f6 fa8e 	bl	8001d82 <LAN8742_Init>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d006      	beq.n	800b87a <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f005 fded 	bl	801144c <netif_set_link_down>
    netif_set_down(netif);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f005 fd84 	bl	8011380 <netif_set_down>
 800b878:	e06b      	b.n	800b952 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800b87a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d165      	bne.n	800b94e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b882:	4840      	ldr	r0, [pc, #256]	@ (800b984 <low_level_init+0x27c>)
 800b884:	f7f6 faca 	bl	8001e1c <LAN8742_GetLinkState>
 800b888:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b88c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b890:	2b01      	cmp	r3, #1
 800b892:	dc06      	bgt.n	800b8a2 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f005 fdd9 	bl	801144c <netif_set_link_down>
      netif_set_down(netif);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f005 fd70 	bl	8011380 <netif_set_down>
 800b8a0:	e057      	b.n	800b952 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800b8a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8a6:	3b02      	subs	r3, #2
 800b8a8:	2b03      	cmp	r3, #3
 800b8aa:	d82b      	bhi.n	800b904 <low_level_init+0x1fc>
 800b8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b4 <low_level_init+0x1ac>)
 800b8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b2:	bf00      	nop
 800b8b4:	0800b8c5 	.word	0x0800b8c5
 800b8b8:	0800b8d7 	.word	0x0800b8d7
 800b8bc:	0800b8e7 	.word	0x0800b8e7
 800b8c0:	0800b8f7 	.word	0x0800b8f7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b8c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b8cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b8d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b8d4:	e01f      	b.n	800b916 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b8dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b8e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b8e4:	e017      	b.n	800b916 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b8e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b8f4:	e00f      	b.n	800b916 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b902:	e008      	b.n	800b916 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800b904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b908:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b90c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b910:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b914:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b916:	f107 0310 	add.w	r3, r7, #16
 800b91a:	4619      	mov	r1, r3
 800b91c:	480e      	ldr	r0, [pc, #56]	@ (800b958 <low_level_init+0x250>)
 800b91e:	f7f9 f9e5 	bl	8004cec <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b926:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800b928:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b92c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b92e:	f107 0310 	add.w	r3, r7, #16
 800b932:	4619      	mov	r1, r3
 800b934:	4808      	ldr	r0, [pc, #32]	@ (800b958 <low_level_init+0x250>)
 800b936:	f7f9 fbad 	bl	8005094 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800b93a:	4807      	ldr	r0, [pc, #28]	@ (800b958 <low_level_init+0x250>)
 800b93c:	f7f8 fd46 	bl	80043cc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f005 fcb1 	bl	80112a8 <netif_set_up>
    netif_set_link_up(netif);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f005 fd4c 	bl	80113e4 <netif_set_link_up>
 800b94c:	e001      	b.n	800b952 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800b94e:	f7f5 fd4d 	bl	80013ec <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b952:	37a8      	adds	r7, #168	@ 0xa8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	24005974 	.word	0x24005974
 800b95c:	40028000 	.word	0x40028000
 800b960:	30000100 	.word	0x30000100
 800b964:	30000000 	.word	0x30000000
 800b968:	24005a24 	.word	0x24005a24
 800b96c:	0801e8e4 	.word	0x0801e8e4
 800b970:	2400596c 	.word	0x2400596c
 800b974:	24005970 	.word	0x24005970
 800b978:	0801bcbc 	.word	0x0801bcbc
 800b97c:	0800bb19 	.word	0x0800bb19
 800b980:	240049d0 	.word	0x240049d0
 800b984:	24005a5c 	.word	0x24005a5c

0800b988 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b092      	sub	sp, #72	@ 0x48
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b996:	2300      	movs	r3, #0
 800b998:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b9a0:	f107 030c 	add.w	r3, r7, #12
 800b9a4:	2230      	movs	r2, #48	@ 0x30
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f00f fa68 	bl	801ae7e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b9ae:	f107 030c 	add.w	r3, r7, #12
 800b9b2:	2230      	movs	r2, #48	@ 0x30
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f00f fa61 	bl	801ae7e <memset>

  for(q = p; q != NULL; q = q->next)
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9c0:	e045      	b.n	800ba4e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b9c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	d902      	bls.n	800b9ce <low_level_output+0x46>
      return ERR_IF;
 800b9c8:	f06f 030b 	mvn.w	r3, #11
 800b9cc:	e07f      	b.n	800bace <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800b9ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9d0:	6859      	ldr	r1, [r3, #4]
 800b9d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	005b      	lsls	r3, r3, #1
 800b9d8:	4413      	add	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	3348      	adds	r3, #72	@ 0x48
 800b9de:	443b      	add	r3, r7
 800b9e0:	3b3c      	subs	r3, #60	@ 0x3c
 800b9e2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b9e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9e6:	895b      	ldrh	r3, [r3, #10]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4413      	add	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	3348      	adds	r3, #72	@ 0x48
 800b9f6:	443b      	add	r3, r7
 800b9f8:	3b38      	subs	r3, #56	@ 0x38
 800b9fa:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b9fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d011      	beq.n	800ba26 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ba02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba04:	1e5a      	subs	r2, r3, #1
 800ba06:	f107 000c 	add.w	r0, r7, #12
 800ba0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	440b      	add	r3, r1
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	18c1      	adds	r1, r0, r3
 800ba16:	4613      	mov	r3, r2
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	4413      	add	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	3348      	adds	r3, #72	@ 0x48
 800ba20:	443b      	add	r3, r7
 800ba22:	3b34      	subs	r3, #52	@ 0x34
 800ba24:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ba26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d109      	bne.n	800ba42 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ba2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba30:	4613      	mov	r3, r2
 800ba32:	005b      	lsls	r3, r3, #1
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	3348      	adds	r3, #72	@ 0x48
 800ba3a:	443b      	add	r3, r7
 800ba3c:	3b34      	subs	r3, #52	@ 0x34
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ba42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba44:	3301      	adds	r3, #1
 800ba46:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800ba48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1b6      	bne.n	800b9c2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	891b      	ldrh	r3, [r3, #8]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4b1f      	ldr	r3, [pc, #124]	@ (800bad8 <low_level_output+0x150>)
 800ba5c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ba5e:	4a1e      	ldr	r2, [pc, #120]	@ (800bad8 <low_level_output+0x150>)
 800ba60:	f107 030c 	add.w	r3, r7, #12
 800ba64:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ba66:	4a1c      	ldr	r2, [pc, #112]	@ (800bad8 <low_level_output+0x150>)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800ba6c:	6838      	ldr	r0, [r7, #0]
 800ba6e:	f006 f975 	bl	8011d5c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800ba72:	4919      	ldr	r1, [pc, #100]	@ (800bad8 <low_level_output+0x150>)
 800ba74:	4819      	ldr	r0, [pc, #100]	@ (800badc <low_level_output+0x154>)
 800ba76:	f7f8 fd95 	bl	80045a4 <HAL_ETH_Transmit_IT>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d103      	bne.n	800ba88 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ba86:	e01b      	b.n	800bac0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800ba88:	4814      	ldr	r0, [pc, #80]	@ (800badc <low_level_output+0x154>)
 800ba8a:	f7f9 fb6d 	bl	8005168 <HAL_ETH_GetError>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f003 0302 	and.w	r3, r3, #2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00d      	beq.n	800bab4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800ba98:	4b11      	ldr	r3, [pc, #68]	@ (800bae0 <low_level_output+0x158>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 fdf7 	bl	800c694 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800baa6:	480d      	ldr	r0, [pc, #52]	@ (800badc <low_level_output+0x154>)
 800baa8:	f7f8 ff03 	bl	80048b2 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800baac:	23fe      	movs	r3, #254	@ 0xfe
 800baae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bab2:	e005      	b.n	800bac0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800bab4:	6838      	ldr	r0, [r7, #0]
 800bab6:	f006 f8ab 	bl	8011c10 <pbuf_free>
        errval =  ERR_IF;
 800baba:	23f4      	movs	r3, #244	@ 0xf4
 800babc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800bac0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bac4:	f113 0f02 	cmn.w	r3, #2
 800bac8:	d0d3      	beq.n	800ba72 <low_level_output+0xea>

  return errval;
 800baca:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3748      	adds	r7, #72	@ 0x48
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	24005a24 	.word	0x24005a24
 800badc:	24005974 	.word	0x24005974
 800bae0:	24005970 	.word	0x24005970

0800bae4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800baec:	2300      	movs	r3, #0
 800baee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800baf0:	4b07      	ldr	r3, [pc, #28]	@ (800bb10 <low_level_input+0x2c>)
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d105      	bne.n	800bb04 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800baf8:	f107 030c 	add.w	r3, r7, #12
 800bafc:	4619      	mov	r1, r3
 800bafe:	4805      	ldr	r0, [pc, #20]	@ (800bb14 <low_level_input+0x30>)
 800bb00:	f7f8 fda1 	bl	8004646 <HAL_ETH_ReadData>
  }

  return p;
 800bb04:	68fb      	ldr	r3, [r7, #12]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	24005968 	.word	0x24005968
 800bb14:	24005974 	.word	0x24005974

0800bb18 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bb20:	2300      	movs	r3, #0
 800bb22:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bb28:	4b0f      	ldr	r3, [pc, #60]	@ (800bb68 <ethernetif_input+0x50>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f04f 31ff 	mov.w	r1, #4294967295
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 fdaf 	bl	800c694 <osSemaphoreAcquire>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1f5      	bne.n	800bb28 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800bb3c:	68b8      	ldr	r0, [r7, #8]
 800bb3e:	f7ff ffd1 	bl	800bae4 <low_level_input>
 800bb42:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00a      	beq.n	800bb60 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	4798      	blx	r3
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f006 f858 	bl	8011c10 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1ea      	bne.n	800bb3c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bb66:	e7df      	b.n	800bb28 <ethernetif_input+0x10>
 800bb68:	2400596c 	.word	0x2400596c

0800bb6c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d106      	bne.n	800bb88 <ethernetif_init+0x1c>
 800bb7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb4 <ethernetif_init+0x48>)
 800bb7c:	f44f 7205 	mov.w	r2, #532	@ 0x214
 800bb80:	490d      	ldr	r1, [pc, #52]	@ (800bbb8 <ethernetif_init+0x4c>)
 800bb82:	480e      	ldr	r0, [pc, #56]	@ (800bbbc <ethernetif_init+0x50>)
 800bb84:	f00f f916 	bl	801adb4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2273      	movs	r2, #115	@ 0x73
 800bb8c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2274      	movs	r2, #116	@ 0x74
 800bb94:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a09      	ldr	r2, [pc, #36]	@ (800bbc0 <ethernetif_init+0x54>)
 800bb9c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a08      	ldr	r2, [pc, #32]	@ (800bbc4 <ethernetif_init+0x58>)
 800bba2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff fdaf 	bl	800b708 <low_level_init>

  return ERR_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	0801bcc4 	.word	0x0801bcc4
 800bbb8:	0801bce0 	.word	0x0801bce0
 800bbbc:	0801bcf0 	.word	0x0801bcf0
 800bbc0:	08018b59 	.word	0x08018b59
 800bbc4:	0800b989 	.word	0x0800b989

0800bbc8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bbd4:	68f9      	ldr	r1, [r7, #12]
 800bbd6:	4809      	ldr	r0, [pc, #36]	@ (800bbfc <pbuf_free_custom+0x34>)
 800bbd8:	f005 f94a 	bl	8010e70 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800bbdc:	4b08      	ldr	r3, [pc, #32]	@ (800bc00 <pbuf_free_custom+0x38>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d107      	bne.n	800bbf4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800bbe4:	4b06      	ldr	r3, [pc, #24]	@ (800bc00 <pbuf_free_custom+0x38>)
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800bbea:	4b06      	ldr	r3, [pc, #24]	@ (800bc04 <pbuf_free_custom+0x3c>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 fda2 	bl	800c738 <osSemaphoreRelease>
  }
}
 800bbf4:	bf00      	nop
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	0801e8e4 	.word	0x0801e8e4
 800bc00:	24005968 	.word	0x24005968
 800bc04:	2400596c 	.word	0x2400596c

0800bc08 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bc0c:	f7f6 f9de 	bl	8001fcc <HAL_GetTick>
 800bc10:	4603      	mov	r3, r0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08e      	sub	sp, #56	@ 0x38
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc24:	2200      	movs	r2, #0
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	605a      	str	r2, [r3, #4]
 800bc2a:	609a      	str	r2, [r3, #8]
 800bc2c:	60da      	str	r2, [r3, #12]
 800bc2e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a5d      	ldr	r2, [pc, #372]	@ (800bdac <HAL_ETH_MspInit+0x194>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	f040 80b3 	bne.w	800bda2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800bc3c:	4b5c      	ldr	r3, [pc, #368]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc42:	4a5b      	ldr	r2, [pc, #364]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bc4c:	4b58      	ldr	r3, [pc, #352]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc56:	623b      	str	r3, [r7, #32]
 800bc58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800bc5a:	4b55      	ldr	r3, [pc, #340]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc60:	4a53      	ldr	r2, [pc, #332]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bc6a:	4b51      	ldr	r3, [pc, #324]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc74:	61fb      	str	r3, [r7, #28]
 800bc76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800bc78:	4b4d      	ldr	r3, [pc, #308]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc7e:	4a4c      	ldr	r2, [pc, #304]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc84:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bc88:	4b49      	ldr	r3, [pc, #292]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc92:	61bb      	str	r3, [r7, #24]
 800bc94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bc96:	4b46      	ldr	r3, [pc, #280]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc9c:	4a44      	ldr	r2, [pc, #272]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bc9e:	f043 0304 	orr.w	r3, r3, #4
 800bca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bca6:	4b42      	ldr	r3, [pc, #264]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	617b      	str	r3, [r7, #20]
 800bcb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bcb4:	4b3e      	ldr	r3, [pc, #248]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bcb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcba:	4a3d      	ldr	r2, [pc, #244]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bcbc:	f043 0301 	orr.w	r3, r3, #1
 800bcc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bcc4:	4b3a      	ldr	r3, [pc, #232]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bcc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	613b      	str	r3, [r7, #16]
 800bcd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bcd2:	4b37      	ldr	r3, [pc, #220]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bcd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcd8:	4a35      	ldr	r2, [pc, #212]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bcda:	f043 0302 	orr.w	r3, r3, #2
 800bcde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bce2:	4b33      	ldr	r3, [pc, #204]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bce8:	f003 0302 	and.w	r3, r3, #2
 800bcec:	60fb      	str	r3, [r7, #12]
 800bcee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bcf0:	4b2f      	ldr	r3, [pc, #188]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bcf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcf6:	4a2e      	ldr	r2, [pc, #184]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bcf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bd00:	4b2b      	ldr	r3, [pc, #172]	@ (800bdb0 <HAL_ETH_MspInit+0x198>)
 800bd02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd0a:	60bb      	str	r3, [r7, #8]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800bd0e:	2332      	movs	r3, #50	@ 0x32
 800bd10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd12:	2302      	movs	r3, #2
 800bd14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd1e:	230b      	movs	r3, #11
 800bd20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd26:	4619      	mov	r1, r3
 800bd28:	4822      	ldr	r0, [pc, #136]	@ (800bdb4 <HAL_ETH_MspInit+0x19c>)
 800bd2a:	f7f9 ffb9 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bd2e:	2386      	movs	r3, #134	@ 0x86
 800bd30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd32:	2302      	movs	r3, #2
 800bd34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd3e:	230b      	movs	r3, #11
 800bd40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd46:	4619      	mov	r1, r3
 800bd48:	481b      	ldr	r0, [pc, #108]	@ (800bdb8 <HAL_ETH_MspInit+0x1a0>)
 800bd4a:	f7f9 ffa9 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800bd4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd54:	2302      	movs	r3, #2
 800bd56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd60:	230b      	movs	r3, #11
 800bd62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4814      	ldr	r0, [pc, #80]	@ (800bdbc <HAL_ETH_MspInit+0x1a4>)
 800bd6c:	f7f9 ff98 	bl	8005ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800bd70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800bd74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd76:	2302      	movs	r3, #2
 800bd78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd82:	230b      	movs	r3, #11
 800bd84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bd86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	480c      	ldr	r0, [pc, #48]	@ (800bdc0 <HAL_ETH_MspInit+0x1a8>)
 800bd8e:	f7f9 ff87 	bl	8005ca0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800bd92:	2200      	movs	r2, #0
 800bd94:	2105      	movs	r1, #5
 800bd96:	203d      	movs	r0, #61	@ 0x3d
 800bd98:	f7f6 fa14 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bd9c:	203d      	movs	r0, #61	@ 0x3d
 800bd9e:	f7f6 fa2b 	bl	80021f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bda2:	bf00      	nop
 800bda4:	3738      	adds	r7, #56	@ 0x38
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	40028000 	.word	0x40028000
 800bdb0:	58024400 	.word	0x58024400
 800bdb4:	58020800 	.word	0x58020800
 800bdb8:	58020000 	.word	0x58020000
 800bdbc:	58020400 	.word	0x58020400
 800bdc0:	58021800 	.word	0x58021800

0800bdc4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800bdc8:	4802      	ldr	r0, [pc, #8]	@ (800bdd4 <ETH_PHY_IO_Init+0x10>)
 800bdca:	f7f9 f97d 	bl	80050c8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	24005974 	.word	0x24005974

0800bdd8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	af00      	add	r7, sp, #0
  return 0;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	68f9      	ldr	r1, [r7, #12]
 800bdfa:	4807      	ldr	r0, [pc, #28]	@ (800be18 <ETH_PHY_IO_ReadReg+0x30>)
 800bdfc:	f7f8 fece 	bl	8004b9c <HAL_ETH_ReadPHYRegister>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800be06:	f04f 33ff 	mov.w	r3, #4294967295
 800be0a:	e000      	b.n	800be0e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	24005974 	.word	0x24005974

0800be1c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	68f9      	ldr	r1, [r7, #12]
 800be2e:	4807      	ldr	r0, [pc, #28]	@ (800be4c <ETH_PHY_IO_WriteReg+0x30>)
 800be30:	f7f8 ff08 	bl	8004c44 <HAL_ETH_WritePHYRegister>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800be3a:	f04f 33ff 	mov.w	r3, #4294967295
 800be3e:	e000      	b.n	800be42 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	24005974 	.word	0x24005974

0800be50 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800be54:	f7f6 f8ba 	bl	8001fcc <HAL_GetTick>
 800be58:	4603      	mov	r3, r0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	bd80      	pop	{r7, pc}
	...

0800be60 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b0a0      	sub	sp, #128	@ 0x80
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800be68:	f107 0308 	add.w	r3, r7, #8
 800be6c:	2264      	movs	r2, #100	@ 0x64
 800be6e:	2100      	movs	r1, #0
 800be70:	4618      	mov	r0, r3
 800be72:	f00f f804 	bl	801ae7e <memset>
  int32_t PHYLinkState = 0;
 800be76:	2300      	movs	r3, #0
 800be78:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800be7a:	2300      	movs	r3, #0
 800be7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800be7e:	2300      	movs	r3, #0
 800be80:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be82:	2300      	movs	r3, #0
 800be84:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800be8a:	483a      	ldr	r0, [pc, #232]	@ (800bf74 <ethernet_link_thread+0x114>)
 800be8c:	f7f5 ffc6 	bl	8001e1c <LAN8742_GetLinkState>
 800be90:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800be92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be98:	089b      	lsrs	r3, r3, #2
 800be9a:	f003 0301 	and.w	r3, r3, #1
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00c      	beq.n	800bebe <ethernet_link_thread+0x5e>
 800bea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	dc09      	bgt.n	800bebe <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800beaa:	4833      	ldr	r0, [pc, #204]	@ (800bf78 <ethernet_link_thread+0x118>)
 800beac:	f7f8 fb02 	bl	80044b4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800beb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800beb2:	f005 fa65 	bl	8011380 <netif_set_down>
    netif_set_link_down(netif);
 800beb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800beb8:	f005 fac8 	bl	801144c <netif_set_link_down>
 800bebc:	e055      	b.n	800bf6a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800bebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bec0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d14e      	bne.n	800bf6a <ethernet_link_thread+0x10a>
 800becc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bece:	2b01      	cmp	r3, #1
 800bed0:	dd4b      	ble.n	800bf6a <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 800bed2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bed4:	3b02      	subs	r3, #2
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d82a      	bhi.n	800bf30 <ethernet_link_thread+0xd0>
 800beda:	a201      	add	r2, pc, #4	@ (adr r2, 800bee0 <ethernet_link_thread+0x80>)
 800bedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee0:	0800bef1 	.word	0x0800bef1
 800bee4:	0800bf03 	.word	0x0800bf03
 800bee8:	0800bf13 	.word	0x0800bf13
 800beec:	0800bf23 	.word	0x0800bf23
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800bef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bef4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bef6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800befa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800befc:	2301      	movs	r3, #1
 800befe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bf00:	e017      	b.n	800bf32 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800bf02:	2300      	movs	r3, #0
 800bf04:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bf06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bf0a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bf10:	e00f      	b.n	800bf32 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800bf12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bf16:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bf20:	e007      	b.n	800bf32 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800bf22:	2300      	movs	r3, #0
 800bf24:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bf26:	2300      	movs	r3, #0
 800bf28:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bf2e:	e000      	b.n	800bf32 <ethernet_link_thread+0xd2>
    default:
      break;
 800bf30:	bf00      	nop
    }

    if(linkchanged)
 800bf32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d018      	beq.n	800bf6a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bf38:	f107 0308 	add.w	r3, r7, #8
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	480e      	ldr	r0, [pc, #56]	@ (800bf78 <ethernet_link_thread+0x118>)
 800bf40:	f7f8 fed4 	bl	8004cec <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800bf44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf46:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800bf48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf4a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bf4c:	f107 0308 	add.w	r3, r7, #8
 800bf50:	4619      	mov	r1, r3
 800bf52:	4809      	ldr	r0, [pc, #36]	@ (800bf78 <ethernet_link_thread+0x118>)
 800bf54:	f7f9 f89e 	bl	8005094 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800bf58:	4807      	ldr	r0, [pc, #28]	@ (800bf78 <ethernet_link_thread+0x118>)
 800bf5a:	f7f8 fa37 	bl	80043cc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800bf5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf60:	f005 f9a2 	bl	80112a8 <netif_set_up>
      netif_set_link_up(netif);
 800bf64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf66:	f005 fa3d 	bl	80113e4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800bf6a:	2064      	movs	r0, #100	@ 0x64
 800bf6c:	f000 f9df 	bl	800c32e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bf70:	e78b      	b.n	800be8a <ethernet_link_thread+0x2a>
 800bf72:	bf00      	nop
 800bf74:	24005a5c 	.word	0x24005a5c
 800bf78:	24005974 	.word	0x24005974

0800bf7c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bf84:	4812      	ldr	r0, [pc, #72]	@ (800bfd0 <HAL_ETH_RxAllocateCallback+0x54>)
 800bf86:	f004 feff 	bl	8010d88 <memp_malloc_pool>
 800bf8a:	60f8      	str	r0, [r7, #12]
  if (p)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d014      	beq.n	800bfbc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f103 0220 	add.w	r2, r3, #32
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4a0d      	ldr	r2, [pc, #52]	@ (800bfd4 <HAL_ETH_RxAllocateCallback+0x58>)
 800bfa0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bfaa:	9201      	str	r2, [sp, #4]
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2241      	movs	r2, #65	@ 0x41
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f005 fc71 	bl	801189c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bfba:	e005      	b.n	800bfc8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bfbc:	4b06      	ldr	r3, [pc, #24]	@ (800bfd8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	601a      	str	r2, [r3, #0]
}
 800bfc8:	bf00      	nop
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	0801e8e4 	.word	0x0801e8e4
 800bfd4:	0800bbc9 	.word	0x0800bbc9
 800bfd8:	24005968 	.word	0x24005968

0800bfdc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b08d      	sub	sp, #52	@ 0x34
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
 800bfe8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800bff2:	2300      	movs	r3, #0
 800bff4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	3b20      	subs	r3, #32
 800bffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800bffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffe:	2200      	movs	r2, #0
 800c000:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c004:	2200      	movs	r2, #0
 800c006:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c00a:	887a      	ldrh	r2, [r7, #2]
 800c00c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d103      	bne.n	800c01e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	e003      	b.n	800c026 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c024:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c02a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c032:	e009      	b.n	800c048 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c036:	891a      	ldrh	r2, [r3, #8]
 800c038:	887b      	ldrh	r3, [r7, #2]
 800c03a:	4413      	add	r3, r2
 800c03c:	b29a      	uxth	r2, r3
 800c03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c040:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1f2      	bne.n	800c034 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c04e:	887b      	ldrh	r3, [r7, #2]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	623a      	str	r2, [r7, #32]
 800c054:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dd1d      	ble.n	800c098 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	f003 021f 	and.w	r2, r3, #31
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	4413      	add	r3, r2
 800c066:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c06c:	f3bf 8f4f 	dsb	sy
}
 800c070:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c072:	4a0d      	ldr	r2, [pc, #52]	@ (800c0a8 <HAL_ETH_RxLinkCallback+0xcc>)
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	3320      	adds	r3, #32
 800c07e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	3b20      	subs	r3, #32
 800c084:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	dcf2      	bgt.n	800c072 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800c08c:	f3bf 8f4f 	dsb	sy
}
 800c090:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c092:	f3bf 8f6f 	isb	sy
}
 800c096:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800c098:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c09a:	bf00      	nop
 800c09c:	3734      	adds	r7, #52	@ 0x34
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	e000ed00 	.word	0xe000ed00

0800c0ac <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f005 fdab 	bl	8011c10 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c0ba:	bf00      	nop
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
	...

0800c0c4 <__NVIC_SetPriority>:
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	6039      	str	r1, [r7, #0]
 800c0ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c0d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	db0a      	blt.n	800c0ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	490c      	ldr	r1, [pc, #48]	@ (800c110 <__NVIC_SetPriority+0x4c>)
 800c0de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0e2:	0112      	lsls	r2, r2, #4
 800c0e4:	b2d2      	uxtb	r2, r2
 800c0e6:	440b      	add	r3, r1
 800c0e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c0ec:	e00a      	b.n	800c104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	4908      	ldr	r1, [pc, #32]	@ (800c114 <__NVIC_SetPriority+0x50>)
 800c0f4:	88fb      	ldrh	r3, [r7, #6]
 800c0f6:	f003 030f 	and.w	r3, r3, #15
 800c0fa:	3b04      	subs	r3, #4
 800c0fc:	0112      	lsls	r2, r2, #4
 800c0fe:	b2d2      	uxtb	r2, r2
 800c100:	440b      	add	r3, r1
 800c102:	761a      	strb	r2, [r3, #24]
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	e000e100 	.word	0xe000e100
 800c114:	e000ed00 	.word	0xe000ed00

0800c118 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c11c:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <SysTick_Handler+0x1c>)
 800c11e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c120:	f002 fcc6 	bl	800eab0 <xTaskGetSchedulerState>
 800c124:	4603      	mov	r3, r0
 800c126:	2b01      	cmp	r3, #1
 800c128:	d001      	beq.n	800c12e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c12a:	f003 fc9d 	bl	800fa68 <xPortSysTickHandler>
  }
}
 800c12e:	bf00      	nop
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	e000e010 	.word	0xe000e010

0800c138 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c138:	b580      	push	{r7, lr}
 800c13a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c13c:	2100      	movs	r1, #0
 800c13e:	f06f 0004 	mvn.w	r0, #4
 800c142:	f7ff ffbf 	bl	800c0c4 <__NVIC_SetPriority>
#endif
}
 800c146:	bf00      	nop
 800c148:	bd80      	pop	{r7, pc}
	...

0800c14c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c152:	f3ef 8305 	mrs	r3, IPSR
 800c156:	603b      	str	r3, [r7, #0]
  return(result);
 800c158:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c15e:	f06f 0305 	mvn.w	r3, #5
 800c162:	607b      	str	r3, [r7, #4]
 800c164:	e00c      	b.n	800c180 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c166:	4b0a      	ldr	r3, [pc, #40]	@ (800c190 <osKernelInitialize+0x44>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d105      	bne.n	800c17a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c16e:	4b08      	ldr	r3, [pc, #32]	@ (800c190 <osKernelInitialize+0x44>)
 800c170:	2201      	movs	r2, #1
 800c172:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c174:	2300      	movs	r3, #0
 800c176:	607b      	str	r3, [r7, #4]
 800c178:	e002      	b.n	800c180 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c17a:	f04f 33ff 	mov.w	r3, #4294967295
 800c17e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c180:	687b      	ldr	r3, [r7, #4]
}
 800c182:	4618      	mov	r0, r3
 800c184:	370c      	adds	r7, #12
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	24005a7c 	.word	0x24005a7c

0800c194 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c19a:	f3ef 8305 	mrs	r3, IPSR
 800c19e:	603b      	str	r3, [r7, #0]
  return(result);
 800c1a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d003      	beq.n	800c1ae <osKernelStart+0x1a>
    stat = osErrorISR;
 800c1a6:	f06f 0305 	mvn.w	r3, #5
 800c1aa:	607b      	str	r3, [r7, #4]
 800c1ac:	e010      	b.n	800c1d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c1ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c1dc <osKernelStart+0x48>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d109      	bne.n	800c1ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c1b6:	f7ff ffbf 	bl	800c138 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c1ba:	4b08      	ldr	r3, [pc, #32]	@ (800c1dc <osKernelStart+0x48>)
 800c1bc:	2202      	movs	r2, #2
 800c1be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c1c0:	f001 fff0 	bl	800e1a4 <vTaskStartScheduler>
      stat = osOK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	607b      	str	r3, [r7, #4]
 800c1c8:	e002      	b.n	800c1d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1d0:	687b      	ldr	r3, [r7, #4]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	24005a7c 	.word	0x24005a7c

0800c1e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1e6:	f3ef 8305 	mrs	r3, IPSR
 800c1ea:	603b      	str	r3, [r7, #0]
  return(result);
 800c1ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c1f2:	f002 f903 	bl	800e3fc <xTaskGetTickCountFromISR>
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	e002      	b.n	800c200 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c1fa:	f002 f8ef 	bl	800e3dc <xTaskGetTickCount>
 800c1fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c200:	687b      	ldr	r3, [r7, #4]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b08e      	sub	sp, #56	@ 0x38
 800c20e:	af04      	add	r7, sp, #16
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c216:	2300      	movs	r3, #0
 800c218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c21a:	f3ef 8305 	mrs	r3, IPSR
 800c21e:	617b      	str	r3, [r7, #20]
  return(result);
 800c220:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c222:	2b00      	cmp	r3, #0
 800c224:	d17e      	bne.n	800c324 <osThreadNew+0x11a>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d07b      	beq.n	800c324 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c22c:	2380      	movs	r3, #128	@ 0x80
 800c22e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c230:	2318      	movs	r3, #24
 800c232:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c234:	2300      	movs	r3, #0
 800c236:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c238:	f04f 33ff 	mov.w	r3, #4294967295
 800c23c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d045      	beq.n	800c2d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <osThreadNew+0x48>
        name = attr->name;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d008      	beq.n	800c278 <osThreadNew+0x6e>
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	2b38      	cmp	r3, #56	@ 0x38
 800c26a:	d805      	bhi.n	800c278 <osThreadNew+0x6e>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	d001      	beq.n	800c27c <osThreadNew+0x72>
        return (NULL);
 800c278:	2300      	movs	r3, #0
 800c27a:	e054      	b.n	800c326 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	695b      	ldr	r3, [r3, #20]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d003      	beq.n	800c28c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	089b      	lsrs	r3, r3, #2
 800c28a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d00e      	beq.n	800c2b2 <osThreadNew+0xa8>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	2ba7      	cmp	r3, #167	@ 0xa7
 800c29a:	d90a      	bls.n	800c2b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d006      	beq.n	800c2b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	695b      	ldr	r3, [r3, #20]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <osThreadNew+0xa8>
        mem = 1;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	61bb      	str	r3, [r7, #24]
 800c2b0:	e010      	b.n	800c2d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10c      	bne.n	800c2d4 <osThreadNew+0xca>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d108      	bne.n	800c2d4 <osThreadNew+0xca>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d104      	bne.n	800c2d4 <osThreadNew+0xca>
          mem = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61bb      	str	r3, [r7, #24]
 800c2ce:	e001      	b.n	800c2d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d110      	bne.n	800c2fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2e2:	9202      	str	r2, [sp, #8]
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	6a3a      	ldr	r2, [r7, #32]
 800c2ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f001 fd63 	bl	800ddbc <xTaskCreateStatic>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	613b      	str	r3, [r7, #16]
 800c2fa:	e013      	b.n	800c324 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d110      	bne.n	800c324 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	b29a      	uxth	r2, r3
 800c306:	f107 0310 	add.w	r3, r7, #16
 800c30a:	9301      	str	r3, [sp, #4]
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f001 fdb1 	bl	800de7c <xTaskCreate>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d001      	beq.n	800c324 <osThreadNew+0x11a>
            hTask = NULL;
 800c320:	2300      	movs	r3, #0
 800c322:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c324:	693b      	ldr	r3, [r7, #16]
}
 800c326:	4618      	mov	r0, r3
 800c328:	3728      	adds	r7, #40	@ 0x28
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c336:	f3ef 8305 	mrs	r3, IPSR
 800c33a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c33c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <osDelay+0x1c>
    stat = osErrorISR;
 800c342:	f06f 0305 	mvn.w	r3, #5
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	e007      	b.n	800c35a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c34a:	2300      	movs	r3, #0
 800c34c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d002      	beq.n	800c35a <osDelay+0x2c>
      vTaskDelay(ticks);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 feef 	bl	800e138 <vTaskDelay>
    }
  }

  return (stat);
 800c35a:	68fb      	ldr	r3, [r7, #12]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c364:	b580      	push	{r7, lr}
 800c366:	b088      	sub	sp, #32
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c36c:	2300      	movs	r3, #0
 800c36e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c370:	f3ef 8305 	mrs	r3, IPSR
 800c374:	60bb      	str	r3, [r7, #8]
  return(result);
 800c376:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d174      	bne.n	800c466 <osMutexNew+0x102>
    if (attr != NULL) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <osMutexNew+0x26>
      type = attr->attr_bits;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	61bb      	str	r3, [r7, #24]
 800c388:	e001      	b.n	800c38e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c38a:	2300      	movs	r3, #0
 800c38c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <osMutexNew+0x3a>
      rmtx = 1U;
 800c398:	2301      	movs	r3, #1
 800c39a:	617b      	str	r3, [r7, #20]
 800c39c:	e001      	b.n	800c3a2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	f003 0308 	and.w	r3, r3, #8
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d15c      	bne.n	800c466 <osMutexNew+0x102>
      mem = -1;
 800c3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d015      	beq.n	800c3e4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d006      	beq.n	800c3ce <osMutexNew+0x6a>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	2b4f      	cmp	r3, #79	@ 0x4f
 800c3c6:	d902      	bls.n	800c3ce <osMutexNew+0x6a>
          mem = 1;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	613b      	str	r3, [r7, #16]
 800c3cc:	e00c      	b.n	800c3e8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d108      	bne.n	800c3e8 <osMutexNew+0x84>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d104      	bne.n	800c3e8 <osMutexNew+0x84>
            mem = 0;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	613b      	str	r3, [r7, #16]
 800c3e2:	e001      	b.n	800c3e8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d112      	bne.n	800c414 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d007      	beq.n	800c404 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	2004      	movs	r0, #4
 800c3fc:	f000 fd71 	bl	800cee2 <xQueueCreateMutexStatic>
 800c400:	61f8      	str	r0, [r7, #28]
 800c402:	e016      	b.n	800c432 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	4619      	mov	r1, r3
 800c40a:	2001      	movs	r0, #1
 800c40c:	f000 fd69 	bl	800cee2 <xQueueCreateMutexStatic>
 800c410:	61f8      	str	r0, [r7, #28]
 800c412:	e00e      	b.n	800c432 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10b      	bne.n	800c432 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d004      	beq.n	800c42a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c420:	2004      	movs	r0, #4
 800c422:	f000 fd46 	bl	800ceb2 <xQueueCreateMutex>
 800c426:	61f8      	str	r0, [r7, #28]
 800c428:	e003      	b.n	800c432 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c42a:	2001      	movs	r0, #1
 800c42c:	f000 fd41 	bl	800ceb2 <xQueueCreateMutex>
 800c430:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00c      	beq.n	800c452 <osMutexNew+0xee>
        if (attr != NULL) {
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d003      	beq.n	800c446 <osMutexNew+0xe2>
          name = attr->name;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	e001      	b.n	800c44a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c446:	2300      	movs	r3, #0
 800c448:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	69f8      	ldr	r0, [r7, #28]
 800c44e:	f001 fc2d 	bl	800dcac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d006      	beq.n	800c466 <osMutexNew+0x102>
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d003      	beq.n	800c466 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	f043 0301 	orr.w	r3, r3, #1
 800c464:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c466:	69fb      	ldr	r3, [r7, #28]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3720      	adds	r7, #32
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f023 0301 	bic.w	r3, r3, #1
 800c480:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f003 0301 	and.w	r3, r3, #1
 800c488:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c48e:	f3ef 8305 	mrs	r3, IPSR
 800c492:	60bb      	str	r3, [r7, #8]
  return(result);
 800c494:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c49a:	f06f 0305 	mvn.w	r3, #5
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	e02c      	b.n	800c4fc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d103      	bne.n	800c4b0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c4a8:	f06f 0303 	mvn.w	r3, #3
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e025      	b.n	800c4fc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d011      	beq.n	800c4da <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6938      	ldr	r0, [r7, #16]
 800c4ba:	f000 fd62 	bl	800cf82 <xQueueTakeMutexRecursive>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d01b      	beq.n	800c4fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d003      	beq.n	800c4d2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c4ca:	f06f 0301 	mvn.w	r3, #1
 800c4ce:	617b      	str	r3, [r7, #20]
 800c4d0:	e014      	b.n	800c4fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c4d2:	f06f 0302 	mvn.w	r3, #2
 800c4d6:	617b      	str	r3, [r7, #20]
 800c4d8:	e010      	b.n	800c4fc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	6938      	ldr	r0, [r7, #16]
 800c4de:	f001 f907 	bl	800d6f0 <xQueueSemaphoreTake>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d009      	beq.n	800c4fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c4ee:	f06f 0301 	mvn.w	r3, #1
 800c4f2:	617b      	str	r3, [r7, #20]
 800c4f4:	e002      	b.n	800c4fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c4f6:	f06f 0302 	mvn.w	r3, #2
 800c4fa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c4fc:	697b      	ldr	r3, [r7, #20]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c506:	b580      	push	{r7, lr}
 800c508:	b086      	sub	sp, #24
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f023 0301 	bic.w	r3, r3, #1
 800c514:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c51e:	2300      	movs	r3, #0
 800c520:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c522:	f3ef 8305 	mrs	r3, IPSR
 800c526:	60bb      	str	r3, [r7, #8]
  return(result);
 800c528:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d003      	beq.n	800c536 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c52e:	f06f 0305 	mvn.w	r3, #5
 800c532:	617b      	str	r3, [r7, #20]
 800c534:	e01f      	b.n	800c576 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d103      	bne.n	800c544 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c53c:	f06f 0303 	mvn.w	r3, #3
 800c540:	617b      	str	r3, [r7, #20]
 800c542:	e018      	b.n	800c576 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d009      	beq.n	800c55e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c54a:	6938      	ldr	r0, [r7, #16]
 800c54c:	f000 fce4 	bl	800cf18 <xQueueGiveMutexRecursive>
 800c550:	4603      	mov	r3, r0
 800c552:	2b01      	cmp	r3, #1
 800c554:	d00f      	beq.n	800c576 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c556:	f06f 0302 	mvn.w	r3, #2
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	e00b      	b.n	800c576 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c55e:	2300      	movs	r3, #0
 800c560:	2200      	movs	r2, #0
 800c562:	2100      	movs	r1, #0
 800c564:	6938      	ldr	r0, [r7, #16]
 800c566:	f000 fdb1 	bl	800d0cc <xQueueGenericSend>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d002      	beq.n	800c576 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c570:	f06f 0302 	mvn.w	r3, #2
 800c574:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c576:	697b      	ldr	r3, [r7, #20]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	@ 0x28
 800c584:	af02      	add	r7, sp, #8
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c58c:	2300      	movs	r3, #0
 800c58e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c590:	f3ef 8305 	mrs	r3, IPSR
 800c594:	613b      	str	r3, [r7, #16]
  return(result);
 800c596:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d175      	bne.n	800c688 <osSemaphoreNew+0x108>
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d072      	beq.n	800c688 <osSemaphoreNew+0x108>
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d86e      	bhi.n	800c688 <osSemaphoreNew+0x108>
    mem = -1;
 800c5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d015      	beq.n	800c5e2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d006      	beq.n	800c5cc <osSemaphoreNew+0x4c>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	2b4f      	cmp	r3, #79	@ 0x4f
 800c5c4:	d902      	bls.n	800c5cc <osSemaphoreNew+0x4c>
        mem = 1;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	61bb      	str	r3, [r7, #24]
 800c5ca:	e00c      	b.n	800c5e6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d108      	bne.n	800c5e6 <osSemaphoreNew+0x66>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d104      	bne.n	800c5e6 <osSemaphoreNew+0x66>
          mem = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	61bb      	str	r3, [r7, #24]
 800c5e0:	e001      	b.n	800c5e6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ec:	d04c      	beq.n	800c688 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d128      	bne.n	800c646 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d10a      	bne.n	800c610 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	2203      	movs	r2, #3
 800c600:	9200      	str	r2, [sp, #0]
 800c602:	2200      	movs	r2, #0
 800c604:	2100      	movs	r1, #0
 800c606:	2001      	movs	r0, #1
 800c608:	f000 fb5e 	bl	800ccc8 <xQueueGenericCreateStatic>
 800c60c:	61f8      	str	r0, [r7, #28]
 800c60e:	e005      	b.n	800c61c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c610:	2203      	movs	r2, #3
 800c612:	2100      	movs	r1, #0
 800c614:	2001      	movs	r0, #1
 800c616:	f000 fbd4 	bl	800cdc2 <xQueueGenericCreate>
 800c61a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d022      	beq.n	800c668 <osSemaphoreNew+0xe8>
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d01f      	beq.n	800c668 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c628:	2300      	movs	r3, #0
 800c62a:	2200      	movs	r2, #0
 800c62c:	2100      	movs	r1, #0
 800c62e:	69f8      	ldr	r0, [r7, #28]
 800c630:	f000 fd4c 	bl	800d0cc <xQueueGenericSend>
 800c634:	4603      	mov	r3, r0
 800c636:	2b01      	cmp	r3, #1
 800c638:	d016      	beq.n	800c668 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c63a:	69f8      	ldr	r0, [r7, #28]
 800c63c:	f001 f9ea 	bl	800da14 <vQueueDelete>
            hSemaphore = NULL;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]
 800c644:	e010      	b.n	800c668 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d108      	bne.n	800c65e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	461a      	mov	r2, r3
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f000 fccb 	bl	800cff0 <xQueueCreateCountingSemaphoreStatic>
 800c65a:	61f8      	str	r0, [r7, #28]
 800c65c:	e004      	b.n	800c668 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c65e:	68b9      	ldr	r1, [r7, #8]
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f000 fcfe 	bl	800d062 <xQueueCreateCountingSemaphore>
 800c666:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00c      	beq.n	800c688 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d003      	beq.n	800c67c <osSemaphoreNew+0xfc>
          name = attr->name;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	e001      	b.n	800c680 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c67c:	2300      	movs	r3, #0
 800c67e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c680:	6979      	ldr	r1, [r7, #20]
 800c682:	69f8      	ldr	r0, [r7, #28]
 800c684:	f001 fb12 	bl	800dcac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c688:	69fb      	ldr	r3, [r7, #28]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3720      	adds	r7, #32
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
	...

0800c694 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d103      	bne.n	800c6b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c6ac:	f06f 0303 	mvn.w	r3, #3
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	e039      	b.n	800c728 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6b4:	f3ef 8305 	mrs	r3, IPSR
 800c6b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d022      	beq.n	800c706 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c6c6:	f06f 0303 	mvn.w	r3, #3
 800c6ca:	617b      	str	r3, [r7, #20]
 800c6cc:	e02c      	b.n	800c728 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c6d2:	f107 0308 	add.w	r3, r7, #8
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	2100      	movs	r1, #0
 800c6da:	6938      	ldr	r0, [r7, #16]
 800c6dc:	f001 f918 	bl	800d910 <xQueueReceiveFromISR>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d003      	beq.n	800c6ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c6e6:	f06f 0302 	mvn.w	r3, #2
 800c6ea:	617b      	str	r3, [r7, #20]
 800c6ec:	e01c      	b.n	800c728 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d019      	beq.n	800c728 <osSemaphoreAcquire+0x94>
 800c6f4:	4b0f      	ldr	r3, [pc, #60]	@ (800c734 <osSemaphoreAcquire+0xa0>)
 800c6f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6fa:	601a      	str	r2, [r3, #0]
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	e010      	b.n	800c728 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	6938      	ldr	r0, [r7, #16]
 800c70a:	f000 fff1 	bl	800d6f0 <xQueueSemaphoreTake>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b01      	cmp	r3, #1
 800c712:	d009      	beq.n	800c728 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d003      	beq.n	800c722 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c71a:	f06f 0301 	mvn.w	r3, #1
 800c71e:	617b      	str	r3, [r7, #20]
 800c720:	e002      	b.n	800c728 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c722:	f06f 0302 	mvn.w	r3, #2
 800c726:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c728:	697b      	ldr	r3, [r7, #20]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3718      	adds	r7, #24
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	e000ed04 	.word	0xe000ed04

0800c738 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c744:	2300      	movs	r3, #0
 800c746:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d103      	bne.n	800c756 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c74e:	f06f 0303 	mvn.w	r3, #3
 800c752:	617b      	str	r3, [r7, #20]
 800c754:	e02c      	b.n	800c7b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c756:	f3ef 8305 	mrs	r3, IPSR
 800c75a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c75c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d01a      	beq.n	800c798 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c762:	2300      	movs	r3, #0
 800c764:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c766:	f107 0308 	add.w	r3, r7, #8
 800c76a:	4619      	mov	r1, r3
 800c76c:	6938      	ldr	r0, [r7, #16]
 800c76e:	f000 fe4d 	bl	800d40c <xQueueGiveFromISR>
 800c772:	4603      	mov	r3, r0
 800c774:	2b01      	cmp	r3, #1
 800c776:	d003      	beq.n	800c780 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c778:	f06f 0302 	mvn.w	r3, #2
 800c77c:	617b      	str	r3, [r7, #20]
 800c77e:	e017      	b.n	800c7b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d014      	beq.n	800c7b0 <osSemaphoreRelease+0x78>
 800c786:	4b0d      	ldr	r3, [pc, #52]	@ (800c7bc <osSemaphoreRelease+0x84>)
 800c788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c78c:	601a      	str	r2, [r3, #0]
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	e00b      	b.n	800c7b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c798:	2300      	movs	r3, #0
 800c79a:	2200      	movs	r2, #0
 800c79c:	2100      	movs	r1, #0
 800c79e:	6938      	ldr	r0, [r7, #16]
 800c7a0:	f000 fc94 	bl	800d0cc <xQueueGenericSend>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d002      	beq.n	800c7b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c7aa:	f06f 0302 	mvn.w	r3, #2
 800c7ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c7b0:	697b      	ldr	r3, [r7, #20]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3718      	adds	r7, #24
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	e000ed04 	.word	0xe000ed04

0800c7c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08a      	sub	sp, #40	@ 0x28
 800c7c4:	af02      	add	r7, sp, #8
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7d0:	f3ef 8305 	mrs	r3, IPSR
 800c7d4:	613b      	str	r3, [r7, #16]
  return(result);
 800c7d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d15f      	bne.n	800c89c <osMessageQueueNew+0xdc>
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d05c      	beq.n	800c89c <osMessageQueueNew+0xdc>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d059      	beq.n	800c89c <osMessageQueueNew+0xdc>
    mem = -1;
 800c7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d029      	beq.n	800c848 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d012      	beq.n	800c822 <osMessageQueueNew+0x62>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	2b4f      	cmp	r3, #79	@ 0x4f
 800c802:	d90e      	bls.n	800c822 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	695a      	ldr	r2, [r3, #20]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	68b9      	ldr	r1, [r7, #8]
 800c814:	fb01 f303 	mul.w	r3, r1, r3
 800c818:	429a      	cmp	r2, r3
 800c81a:	d302      	bcc.n	800c822 <osMessageQueueNew+0x62>
        mem = 1;
 800c81c:	2301      	movs	r3, #1
 800c81e:	61bb      	str	r3, [r7, #24]
 800c820:	e014      	b.n	800c84c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d110      	bne.n	800c84c <osMessageQueueNew+0x8c>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10c      	bne.n	800c84c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c836:	2b00      	cmp	r3, #0
 800c838:	d108      	bne.n	800c84c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d104      	bne.n	800c84c <osMessageQueueNew+0x8c>
          mem = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	61bb      	str	r3, [r7, #24]
 800c846:	e001      	b.n	800c84c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d10b      	bne.n	800c86a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	691a      	ldr	r2, [r3, #16]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	2100      	movs	r1, #0
 800c85c:	9100      	str	r1, [sp, #0]
 800c85e:	68b9      	ldr	r1, [r7, #8]
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f000 fa31 	bl	800ccc8 <xQueueGenericCreateStatic>
 800c866:	61f8      	str	r0, [r7, #28]
 800c868:	e008      	b.n	800c87c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d105      	bne.n	800c87c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c870:	2200      	movs	r2, #0
 800c872:	68b9      	ldr	r1, [r7, #8]
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f000 faa4 	bl	800cdc2 <xQueueGenericCreate>
 800c87a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00c      	beq.n	800c89c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d003      	beq.n	800c890 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	617b      	str	r3, [r7, #20]
 800c88e:	e001      	b.n	800c894 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c890:	2300      	movs	r3, #0
 800c892:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c894:	6979      	ldr	r1, [r7, #20]
 800c896:	69f8      	ldr	r0, [r7, #28]
 800c898:	f001 fa08 	bl	800dcac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c89c:	69fb      	ldr	r3, [r7, #28]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3720      	adds	r7, #32
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
	...

0800c8a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b088      	sub	sp, #32
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	603b      	str	r3, [r7, #0]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8c0:	f3ef 8305 	mrs	r3, IPSR
 800c8c4:	617b      	str	r3, [r7, #20]
  return(result);
 800c8c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d028      	beq.n	800c91e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d005      	beq.n	800c8de <osMessageQueuePut+0x36>
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d002      	beq.n	800c8de <osMessageQueuePut+0x36>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c8de:	f06f 0303 	mvn.w	r3, #3
 800c8e2:	61fb      	str	r3, [r7, #28]
 800c8e4:	e038      	b.n	800c958 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c8ea:	f107 0210 	add.w	r2, r7, #16
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	68b9      	ldr	r1, [r7, #8]
 800c8f2:	69b8      	ldr	r0, [r7, #24]
 800c8f4:	f000 fcec 	bl	800d2d0 <xQueueGenericSendFromISR>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d003      	beq.n	800c906 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c8fe:	f06f 0302 	mvn.w	r3, #2
 800c902:	61fb      	str	r3, [r7, #28]
 800c904:	e028      	b.n	800c958 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d025      	beq.n	800c958 <osMessageQueuePut+0xb0>
 800c90c:	4b15      	ldr	r3, [pc, #84]	@ (800c964 <osMessageQueuePut+0xbc>)
 800c90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	e01c      	b.n	800c958 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d002      	beq.n	800c92a <osMessageQueuePut+0x82>
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d103      	bne.n	800c932 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c92a:	f06f 0303 	mvn.w	r3, #3
 800c92e:	61fb      	str	r3, [r7, #28]
 800c930:	e012      	b.n	800c958 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c932:	2300      	movs	r3, #0
 800c934:	683a      	ldr	r2, [r7, #0]
 800c936:	68b9      	ldr	r1, [r7, #8]
 800c938:	69b8      	ldr	r0, [r7, #24]
 800c93a:	f000 fbc7 	bl	800d0cc <xQueueGenericSend>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b01      	cmp	r3, #1
 800c942:	d009      	beq.n	800c958 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d003      	beq.n	800c952 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c94a:	f06f 0301 	mvn.w	r3, #1
 800c94e:	61fb      	str	r3, [r7, #28]
 800c950:	e002      	b.n	800c958 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c952:	f06f 0302 	mvn.w	r3, #2
 800c956:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c958:	69fb      	ldr	r3, [r7, #28]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3720      	adds	r7, #32
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	e000ed04 	.word	0xe000ed04

0800c968 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c97e:	f3ef 8305 	mrs	r3, IPSR
 800c982:	617b      	str	r3, [r7, #20]
  return(result);
 800c984:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c986:	2b00      	cmp	r3, #0
 800c988:	d028      	beq.n	800c9dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d005      	beq.n	800c99c <osMessageQueueGet+0x34>
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d002      	beq.n	800c99c <osMessageQueueGet+0x34>
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c99c:	f06f 0303 	mvn.w	r3, #3
 800c9a0:	61fb      	str	r3, [r7, #28]
 800c9a2:	e037      	b.n	800ca14 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c9a8:	f107 0310 	add.w	r3, r7, #16
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	68b9      	ldr	r1, [r7, #8]
 800c9b0:	69b8      	ldr	r0, [r7, #24]
 800c9b2:	f000 ffad 	bl	800d910 <xQueueReceiveFromISR>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d003      	beq.n	800c9c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c9bc:	f06f 0302 	mvn.w	r3, #2
 800c9c0:	61fb      	str	r3, [r7, #28]
 800c9c2:	e027      	b.n	800ca14 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d024      	beq.n	800ca14 <osMessageQueueGet+0xac>
 800c9ca:	4b15      	ldr	r3, [pc, #84]	@ (800ca20 <osMessageQueueGet+0xb8>)
 800c9cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9d0:	601a      	str	r2, [r3, #0]
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	e01b      	b.n	800ca14 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <osMessageQueueGet+0x80>
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d103      	bne.n	800c9f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c9e8:	f06f 0303 	mvn.w	r3, #3
 800c9ec:	61fb      	str	r3, [r7, #28]
 800c9ee:	e011      	b.n	800ca14 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c9f0:	683a      	ldr	r2, [r7, #0]
 800c9f2:	68b9      	ldr	r1, [r7, #8]
 800c9f4:	69b8      	ldr	r0, [r7, #24]
 800c9f6:	f000 fd99 	bl	800d52c <xQueueReceive>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d009      	beq.n	800ca14 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d003      	beq.n	800ca0e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ca06:	f06f 0301 	mvn.w	r3, #1
 800ca0a:	61fb      	str	r3, [r7, #28]
 800ca0c:	e002      	b.n	800ca14 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ca0e:	f06f 0302 	mvn.w	r3, #2
 800ca12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ca14:	69fb      	ldr	r3, [r7, #28]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3720      	adds	r7, #32
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	e000ed04 	.word	0xe000ed04

0800ca24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4a07      	ldr	r2, [pc, #28]	@ (800ca50 <vApplicationGetIdleTaskMemory+0x2c>)
 800ca34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	4a06      	ldr	r2, [pc, #24]	@ (800ca54 <vApplicationGetIdleTaskMemory+0x30>)
 800ca3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2280      	movs	r2, #128	@ 0x80
 800ca40:	601a      	str	r2, [r3, #0]
}
 800ca42:	bf00      	nop
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	24005a80 	.word	0x24005a80
 800ca54:	24005b28 	.word	0x24005b28

0800ca58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4a07      	ldr	r2, [pc, #28]	@ (800ca84 <vApplicationGetTimerTaskMemory+0x2c>)
 800ca68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	4a06      	ldr	r2, [pc, #24]	@ (800ca88 <vApplicationGetTimerTaskMemory+0x30>)
 800ca6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca76:	601a      	str	r2, [r3, #0]
}
 800ca78:	bf00      	nop
 800ca7a:	3714      	adds	r7, #20
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	24005d28 	.word	0x24005d28
 800ca88:	24005dd0 	.word	0x24005dd0

0800ca8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f103 0208 	add.w	r2, r3, #8
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f04f 32ff 	mov.w	r2, #4294967295
 800caa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f103 0208 	add.w	r2, r3, #8
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f103 0208 	add.w	r2, r3, #8
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2200      	movs	r2, #0
 800cabe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cac0:	bf00      	nop
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cada:	bf00      	nop
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cae6:	b480      	push	{r7}
 800cae8:	b085      	sub	sp, #20
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	689a      	ldr	r2, [r3, #8]
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	683a      	ldr	r2, [r7, #0]
 800cb0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	683a      	ldr	r2, [r7, #0]
 800cb10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	1c5a      	adds	r2, r3, #1
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	601a      	str	r2, [r3, #0]
}
 800cb22:	bf00      	nop
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b085      	sub	sp, #20
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb44:	d103      	bne.n	800cb4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	e00c      	b.n	800cb68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	3308      	adds	r3, #8
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	e002      	b.n	800cb5c <vListInsert+0x2e>
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	68ba      	ldr	r2, [r7, #8]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d2f6      	bcs.n	800cb56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	683a      	ldr	r2, [r7, #0]
 800cb82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	1c5a      	adds	r2, r3, #1
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	601a      	str	r2, [r3, #0]
}
 800cb94:	bf00      	nop
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	6892      	ldr	r2, [r2, #8]
 800cbb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	6852      	ldr	r2, [r2, #4]
 800cbc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d103      	bne.n	800cbd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	689a      	ldr	r2, [r3, #8]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	1e5a      	subs	r2, r3, #1
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10b      	bne.n	800cc20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc1a:	bf00      	nop
 800cc1c:	bf00      	nop
 800cc1e:	e7fd      	b.n	800cc1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc20:	f002 fe92 	bl	800f948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc2c:	68f9      	ldr	r1, [r7, #12]
 800cc2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc30:	fb01 f303 	mul.w	r3, r1, r3
 800cc34:	441a      	add	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc50:	3b01      	subs	r3, #1
 800cc52:	68f9      	ldr	r1, [r7, #12]
 800cc54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc56:	fb01 f303 	mul.w	r3, r1, r3
 800cc5a:	441a      	add	r2, r3
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	22ff      	movs	r2, #255	@ 0xff
 800cc64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	22ff      	movs	r2, #255	@ 0xff
 800cc6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d114      	bne.n	800cca0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d01a      	beq.n	800ccb4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3310      	adds	r3, #16
 800cc82:	4618      	mov	r0, r3
 800cc84:	f001 fd3e 	bl	800e704 <xTaskRemoveFromEventList>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d012      	beq.n	800ccb4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc4 <xQueueGenericReset+0xd0>)
 800cc90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc94:	601a      	str	r2, [r3, #0]
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	e009      	b.n	800ccb4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	3310      	adds	r3, #16
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7ff fef1 	bl	800ca8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	3324      	adds	r3, #36	@ 0x24
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7ff feec 	bl	800ca8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ccb4:	f002 fe7a 	bl	800f9ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ccb8:	2301      	movs	r3, #1
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	e000ed04 	.word	0xe000ed04

0800ccc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08e      	sub	sp, #56	@ 0x38
 800cccc:	af02      	add	r7, sp, #8
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
 800ccd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10b      	bne.n	800ccf4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ccee:	bf00      	nop
 800ccf0:	bf00      	nop
 800ccf2:	e7fd      	b.n	800ccf0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10b      	bne.n	800cd12 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd0c:	bf00      	nop
 800cd0e:	bf00      	nop
 800cd10:	e7fd      	b.n	800cd0e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <xQueueGenericCreateStatic+0x56>
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <xQueueGenericCreateStatic+0x5a>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e000      	b.n	800cd24 <xQueueGenericCreateStatic+0x5c>
 800cd22:	2300      	movs	r3, #0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10b      	bne.n	800cd40 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	623b      	str	r3, [r7, #32]
}
 800cd3a:	bf00      	nop
 800cd3c:	bf00      	nop
 800cd3e:	e7fd      	b.n	800cd3c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d102      	bne.n	800cd4c <xQueueGenericCreateStatic+0x84>
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d101      	bne.n	800cd50 <xQueueGenericCreateStatic+0x88>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e000      	b.n	800cd52 <xQueueGenericCreateStatic+0x8a>
 800cd50:	2300      	movs	r3, #0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10b      	bne.n	800cd6e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd5a:	f383 8811 	msr	BASEPRI, r3
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	61fb      	str	r3, [r7, #28]
}
 800cd68:	bf00      	nop
 800cd6a:	bf00      	nop
 800cd6c:	e7fd      	b.n	800cd6a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd6e:	2350      	movs	r3, #80	@ 0x50
 800cd70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	2b50      	cmp	r3, #80	@ 0x50
 800cd76:	d00b      	beq.n	800cd90 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	61bb      	str	r3, [r7, #24]
}
 800cd8a:	bf00      	nop
 800cd8c:	bf00      	nop
 800cd8e:	e7fd      	b.n	800cd8c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00d      	beq.n	800cdb8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cda4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	4613      	mov	r3, r2
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	68b9      	ldr	r1, [r7, #8]
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 f840 	bl	800ce38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3730      	adds	r7, #48	@ 0x30
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b08a      	sub	sp, #40	@ 0x28
 800cdc6:	af02      	add	r7, sp, #8
 800cdc8:	60f8      	str	r0, [r7, #12]
 800cdca:	60b9      	str	r1, [r7, #8]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10b      	bne.n	800cdee <xQueueGenericCreate+0x2c>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	613b      	str	r3, [r7, #16]
}
 800cde8:	bf00      	nop
 800cdea:	bf00      	nop
 800cdec:	e7fd      	b.n	800cdea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	fb02 f303 	mul.w	r3, r2, r3
 800cdf6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	3350      	adds	r3, #80	@ 0x50
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f002 fec5 	bl	800fb8c <pvPortMalloc>
 800ce02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d011      	beq.n	800ce2e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	3350      	adds	r3, #80	@ 0x50
 800ce12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce1c:	79fa      	ldrb	r2, [r7, #7]
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	4613      	mov	r3, r2
 800ce24:	697a      	ldr	r2, [r7, #20]
 800ce26:	68b9      	ldr	r1, [r7, #8]
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f000 f805 	bl	800ce38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce2e:	69bb      	ldr	r3, [r7, #24]
	}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3720      	adds	r7, #32
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d103      	bne.n	800ce54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	69ba      	ldr	r2, [r7, #24]
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	e002      	b.n	800ce5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce66:	2101      	movs	r1, #1
 800ce68:	69b8      	ldr	r0, [r7, #24]
 800ce6a:	f7ff fec3 	bl	800cbf4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	78fa      	ldrb	r2, [r7, #3]
 800ce72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce76:	bf00      	nop
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b082      	sub	sp, #8
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00e      	beq.n	800ceaa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ce9e:	2300      	movs	r3, #0
 800cea0:	2200      	movs	r2, #0
 800cea2:	2100      	movs	r1, #0
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f911 	bl	800d0cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ceaa:	bf00      	nop
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b086      	sub	sp, #24
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	4603      	mov	r3, r0
 800ceba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cebc:	2301      	movs	r3, #1
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	2300      	movs	r3, #0
 800cec2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cec4:	79fb      	ldrb	r3, [r7, #7]
 800cec6:	461a      	mov	r2, r3
 800cec8:	6939      	ldr	r1, [r7, #16]
 800ceca:	6978      	ldr	r0, [r7, #20]
 800cecc:	f7ff ff79 	bl	800cdc2 <xQueueGenericCreate>
 800ced0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	f7ff ffd3 	bl	800ce7e <prvInitialiseMutex>

		return xNewQueue;
 800ced8:	68fb      	ldr	r3, [r7, #12]
	}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3718      	adds	r7, #24
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b088      	sub	sp, #32
 800cee6:	af02      	add	r7, sp, #8
 800cee8:	4603      	mov	r3, r0
 800ceea:	6039      	str	r1, [r7, #0]
 800ceec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ceee:	2301      	movs	r3, #1
 800cef0:	617b      	str	r3, [r7, #20]
 800cef2:	2300      	movs	r3, #0
 800cef4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cef6:	79fb      	ldrb	r3, [r7, #7]
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2200      	movs	r2, #0
 800cefe:	6939      	ldr	r1, [r7, #16]
 800cf00:	6978      	ldr	r0, [r7, #20]
 800cf02:	f7ff fee1 	bl	800ccc8 <xQueueGenericCreateStatic>
 800cf06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f7ff ffb8 	bl	800ce7e <prvInitialiseMutex>

		return xNewQueue;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
	}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cf18:	b590      	push	{r4, r7, lr}
 800cf1a:	b087      	sub	sp, #28
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10b      	bne.n	800cf42 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	60fb      	str	r3, [r7, #12]
}
 800cf3c:	bf00      	nop
 800cf3e:	bf00      	nop
 800cf40:	e7fd      	b.n	800cf3e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	689c      	ldr	r4, [r3, #8]
 800cf46:	f001 fda3 	bl	800ea90 <xTaskGetCurrentTaskHandle>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	429c      	cmp	r4, r3
 800cf4e:	d111      	bne.n	800cf74 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	1e5a      	subs	r2, r3, #1
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d105      	bne.n	800cf6e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cf62:	2300      	movs	r3, #0
 800cf64:	2200      	movs	r2, #0
 800cf66:	2100      	movs	r1, #0
 800cf68:	6938      	ldr	r0, [r7, #16]
 800cf6a:	f000 f8af 	bl	800d0cc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	617b      	str	r3, [r7, #20]
 800cf72:	e001      	b.n	800cf78 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cf74:	2300      	movs	r3, #0
 800cf76:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cf78:	697b      	ldr	r3, [r7, #20]
	}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	371c      	adds	r7, #28
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd90      	pop	{r4, r7, pc}

0800cf82 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cf82:	b590      	push	{r4, r7, lr}
 800cf84:	b087      	sub	sp, #28
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10b      	bne.n	800cfae <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800cf96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	60fb      	str	r3, [r7, #12]
}
 800cfa8:	bf00      	nop
 800cfaa:	bf00      	nop
 800cfac:	e7fd      	b.n	800cfaa <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	689c      	ldr	r4, [r3, #8]
 800cfb2:	f001 fd6d 	bl	800ea90 <xTaskGetCurrentTaskHandle>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	429c      	cmp	r4, r3
 800cfba:	d107      	bne.n	800cfcc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	1c5a      	adds	r2, r3, #1
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	e00c      	b.n	800cfe6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6938      	ldr	r0, [r7, #16]
 800cfd0:	f000 fb8e 	bl	800d6f0 <xQueueSemaphoreTake>
 800cfd4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d004      	beq.n	800cfe6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	1c5a      	adds	r2, r3, #1
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cfe6:	697b      	ldr	r3, [r7, #20]
	}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	371c      	adds	r7, #28
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd90      	pop	{r4, r7, pc}

0800cff0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b08a      	sub	sp, #40	@ 0x28
 800cff4:	af02      	add	r7, sp, #8
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10b      	bne.n	800d01a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	61bb      	str	r3, [r7, #24]
}
 800d014:	bf00      	nop
 800d016:	bf00      	nop
 800d018:	e7fd      	b.n	800d016 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d90b      	bls.n	800d03a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d026:	f383 8811 	msr	BASEPRI, r3
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	617b      	str	r3, [r7, #20]
}
 800d034:	bf00      	nop
 800d036:	bf00      	nop
 800d038:	e7fd      	b.n	800d036 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d03a:	2302      	movs	r3, #2
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	2100      	movs	r1, #0
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f7ff fe3f 	bl	800ccc8 <xQueueGenericCreateStatic>
 800d04a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d002      	beq.n	800d058 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d058:	69fb      	ldr	r3, [r7, #28]
	}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3720      	adds	r7, #32
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d062:	b580      	push	{r7, lr}
 800d064:	b086      	sub	sp, #24
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10b      	bne.n	800d08a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	613b      	str	r3, [r7, #16]
}
 800d084:	bf00      	nop
 800d086:	bf00      	nop
 800d088:	e7fd      	b.n	800d086 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d08a:	683a      	ldr	r2, [r7, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d90b      	bls.n	800d0aa <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	60fb      	str	r3, [r7, #12]
}
 800d0a4:	bf00      	nop
 800d0a6:	bf00      	nop
 800d0a8:	e7fd      	b.n	800d0a6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0aa:	2202      	movs	r2, #2
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7ff fe87 	bl	800cdc2 <xQueueGenericCreate>
 800d0b4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d0c2:	697b      	ldr	r3, [r7, #20]
	}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3718      	adds	r7, #24
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b08e      	sub	sp, #56	@ 0x38
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	607a      	str	r2, [r7, #4]
 800d0d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10b      	bne.n	800d100 <xQueueGenericSend+0x34>
	__asm volatile
 800d0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d0fa:	bf00      	nop
 800d0fc:	bf00      	nop
 800d0fe:	e7fd      	b.n	800d0fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d103      	bne.n	800d10e <xQueueGenericSend+0x42>
 800d106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <xQueueGenericSend+0x46>
 800d10e:	2301      	movs	r3, #1
 800d110:	e000      	b.n	800d114 <xQueueGenericSend+0x48>
 800d112:	2300      	movs	r3, #0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10b      	bne.n	800d130 <xQueueGenericSend+0x64>
	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d12a:	bf00      	nop
 800d12c:	bf00      	nop
 800d12e:	e7fd      	b.n	800d12c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2b02      	cmp	r3, #2
 800d134:	d103      	bne.n	800d13e <xQueueGenericSend+0x72>
 800d136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d101      	bne.n	800d142 <xQueueGenericSend+0x76>
 800d13e:	2301      	movs	r3, #1
 800d140:	e000      	b.n	800d144 <xQueueGenericSend+0x78>
 800d142:	2300      	movs	r3, #0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10b      	bne.n	800d160 <xQueueGenericSend+0x94>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	623b      	str	r3, [r7, #32]
}
 800d15a:	bf00      	nop
 800d15c:	bf00      	nop
 800d15e:	e7fd      	b.n	800d15c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d160:	f001 fca6 	bl	800eab0 <xTaskGetSchedulerState>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	d102      	bne.n	800d170 <xQueueGenericSend+0xa4>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d101      	bne.n	800d174 <xQueueGenericSend+0xa8>
 800d170:	2301      	movs	r3, #1
 800d172:	e000      	b.n	800d176 <xQueueGenericSend+0xaa>
 800d174:	2300      	movs	r3, #0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10b      	bne.n	800d192 <xQueueGenericSend+0xc6>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	61fb      	str	r3, [r7, #28]
}
 800d18c:	bf00      	nop
 800d18e:	bf00      	nop
 800d190:	e7fd      	b.n	800d18e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d192:	f002 fbd9 	bl	800f948 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d302      	bcc.n	800d1a8 <xQueueGenericSend+0xdc>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d129      	bne.n	800d1fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	68b9      	ldr	r1, [r7, #8]
 800d1ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1ae:	f000 fc6d 	bl	800da8c <prvCopyDataToQueue>
 800d1b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d010      	beq.n	800d1de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1be:	3324      	adds	r3, #36	@ 0x24
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f001 fa9f 	bl	800e704 <xTaskRemoveFromEventList>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d013      	beq.n	800d1f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1cc:	4b3f      	ldr	r3, [pc, #252]	@ (800d2cc <xQueueGenericSend+0x200>)
 800d1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	e00a      	b.n	800d1f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d1e4:	4b39      	ldr	r3, [pc, #228]	@ (800d2cc <xQueueGenericSend+0x200>)
 800d1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d1f4:	f002 fbda 	bl	800f9ac <vPortExitCritical>
				return pdPASS;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e063      	b.n	800d2c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d103      	bne.n	800d20a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d202:	f002 fbd3 	bl	800f9ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d206:	2300      	movs	r3, #0
 800d208:	e05c      	b.n	800d2c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d106      	bne.n	800d21e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d210:	f107 0314 	add.w	r3, r7, #20
 800d214:	4618      	mov	r0, r3
 800d216:	f001 fad9 	bl	800e7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d21a:	2301      	movs	r3, #1
 800d21c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d21e:	f002 fbc5 	bl	800f9ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d222:	f001 f82f 	bl	800e284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d226:	f002 fb8f 	bl	800f948 <vPortEnterCritical>
 800d22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d22c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d230:	b25b      	sxtb	r3, r3
 800d232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d236:	d103      	bne.n	800d240 <xQueueGenericSend+0x174>
 800d238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d242:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d246:	b25b      	sxtb	r3, r3
 800d248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24c:	d103      	bne.n	800d256 <xQueueGenericSend+0x18a>
 800d24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d250:	2200      	movs	r2, #0
 800d252:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d256:	f002 fba9 	bl	800f9ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d25a:	1d3a      	adds	r2, r7, #4
 800d25c:	f107 0314 	add.w	r3, r7, #20
 800d260:	4611      	mov	r1, r2
 800d262:	4618      	mov	r0, r3
 800d264:	f001 fac8 	bl	800e7f8 <xTaskCheckForTimeOut>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d124      	bne.n	800d2b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d26e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d270:	f000 fd04 	bl	800dc7c <prvIsQueueFull>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d018      	beq.n	800d2ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27c:	3310      	adds	r3, #16
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	4611      	mov	r1, r2
 800d282:	4618      	mov	r0, r3
 800d284:	f001 f9ec 	bl	800e660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d28a:	f000 fc8f 	bl	800dbac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d28e:	f001 f807 	bl	800e2a0 <xTaskResumeAll>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	f47f af7c 	bne.w	800d192 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d29a:	4b0c      	ldr	r3, [pc, #48]	@ (800d2cc <xQueueGenericSend+0x200>)
 800d29c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	e772      	b.n	800d192 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2ae:	f000 fc7d 	bl	800dbac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2b2:	f000 fff5 	bl	800e2a0 <xTaskResumeAll>
 800d2b6:	e76c      	b.n	800d192 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2ba:	f000 fc77 	bl	800dbac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2be:	f000 ffef 	bl	800e2a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3738      	adds	r7, #56	@ 0x38
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	e000ed04 	.word	0xe000ed04

0800d2d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b090      	sub	sp, #64	@ 0x40
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10b      	bne.n	800d300 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d2fa:	bf00      	nop
 800d2fc:	bf00      	nop
 800d2fe:	e7fd      	b.n	800d2fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d103      	bne.n	800d30e <xQueueGenericSendFromISR+0x3e>
 800d306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <xQueueGenericSendFromISR+0x42>
 800d30e:	2301      	movs	r3, #1
 800d310:	e000      	b.n	800d314 <xQueueGenericSendFromISR+0x44>
 800d312:	2300      	movs	r3, #0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10b      	bne.n	800d330 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d32a:	bf00      	nop
 800d32c:	bf00      	nop
 800d32e:	e7fd      	b.n	800d32c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2b02      	cmp	r3, #2
 800d334:	d103      	bne.n	800d33e <xQueueGenericSendFromISR+0x6e>
 800d336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d101      	bne.n	800d342 <xQueueGenericSendFromISR+0x72>
 800d33e:	2301      	movs	r3, #1
 800d340:	e000      	b.n	800d344 <xQueueGenericSendFromISR+0x74>
 800d342:	2300      	movs	r3, #0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10b      	bne.n	800d360 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	623b      	str	r3, [r7, #32]
}
 800d35a:	bf00      	nop
 800d35c:	bf00      	nop
 800d35e:	e7fd      	b.n	800d35c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d360:	f002 fbd2 	bl	800fb08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d364:	f3ef 8211 	mrs	r2, BASEPRI
 800d368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	61fa      	str	r2, [r7, #28]
 800d37a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d37c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d37e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d388:	429a      	cmp	r2, r3
 800d38a:	d302      	bcc.n	800d392 <xQueueGenericSendFromISR+0xc2>
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d12f      	bne.n	800d3f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d394:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d398:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	68b9      	ldr	r1, [r7, #8]
 800d3a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3a8:	f000 fb70 	bl	800da8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b4:	d112      	bne.n	800d3dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d016      	beq.n	800d3ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c0:	3324      	adds	r3, #36	@ 0x24
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f001 f99e 	bl	800e704 <xTaskRemoveFromEventList>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00e      	beq.n	800d3ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00b      	beq.n	800d3ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	601a      	str	r2, [r3, #0]
 800d3da:	e007      	b.n	800d3ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	b25a      	sxtb	r2, r3
 800d3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d3f0:	e001      	b.n	800d3f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d400:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d404:	4618      	mov	r0, r3
 800d406:	3740      	adds	r7, #64	@ 0x40
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b08e      	sub	sp, #56	@ 0x38
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10b      	bne.n	800d438 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d424:	f383 8811 	msr	BASEPRI, r3
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	623b      	str	r3, [r7, #32]
}
 800d432:	bf00      	nop
 800d434:	bf00      	nop
 800d436:	e7fd      	b.n	800d434 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	61fb      	str	r3, [r7, #28]
}
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	e7fd      	b.n	800d454 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d103      	bne.n	800d468 <xQueueGiveFromISR+0x5c>
 800d460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <xQueueGiveFromISR+0x60>
 800d468:	2301      	movs	r3, #1
 800d46a:	e000      	b.n	800d46e <xQueueGiveFromISR+0x62>
 800d46c:	2300      	movs	r3, #0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d10b      	bne.n	800d48a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d476:	f383 8811 	msr	BASEPRI, r3
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	61bb      	str	r3, [r7, #24]
}
 800d484:	bf00      	nop
 800d486:	bf00      	nop
 800d488:	e7fd      	b.n	800d486 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d48a:	f002 fb3d 	bl	800fb08 <vPortValidateInterruptPriority>
	__asm volatile
 800d48e:	f3ef 8211 	mrs	r2, BASEPRI
 800d492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	617a      	str	r2, [r7, #20]
 800d4a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d4a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d22b      	bcs.n	800d512 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d4cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d4:	d112      	bne.n	800d4fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d016      	beq.n	800d50c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e0:	3324      	adds	r3, #36	@ 0x24
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f001 f90e 	bl	800e704 <xTaskRemoveFromEventList>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00e      	beq.n	800d50c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00b      	beq.n	800d50c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	e007      	b.n	800d50c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d500:	3301      	adds	r3, #1
 800d502:	b2db      	uxtb	r3, r3
 800d504:	b25a      	sxtb	r2, r3
 800d506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d50c:	2301      	movs	r3, #1
 800d50e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d510:	e001      	b.n	800d516 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d512:	2300      	movs	r3, #0
 800d514:	637b      	str	r3, [r7, #52]	@ 0x34
 800d516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d518:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f383 8811 	msr	BASEPRI, r3
}
 800d520:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d524:	4618      	mov	r0, r3
 800d526:	3738      	adds	r7, #56	@ 0x38
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b08c      	sub	sp, #48	@ 0x30
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d538:	2300      	movs	r3, #0
 800d53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10b      	bne.n	800d55e <xQueueReceive+0x32>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	623b      	str	r3, [r7, #32]
}
 800d558:	bf00      	nop
 800d55a:	bf00      	nop
 800d55c:	e7fd      	b.n	800d55a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d103      	bne.n	800d56c <xQueueReceive+0x40>
 800d564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d101      	bne.n	800d570 <xQueueReceive+0x44>
 800d56c:	2301      	movs	r3, #1
 800d56e:	e000      	b.n	800d572 <xQueueReceive+0x46>
 800d570:	2300      	movs	r3, #0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10b      	bne.n	800d58e <xQueueReceive+0x62>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	61fb      	str	r3, [r7, #28]
}
 800d588:	bf00      	nop
 800d58a:	bf00      	nop
 800d58c:	e7fd      	b.n	800d58a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d58e:	f001 fa8f 	bl	800eab0 <xTaskGetSchedulerState>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <xQueueReceive+0x72>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <xQueueReceive+0x76>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e000      	b.n	800d5a4 <xQueueReceive+0x78>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10b      	bne.n	800d5c0 <xQueueReceive+0x94>
	__asm volatile
 800d5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	61bb      	str	r3, [r7, #24]
}
 800d5ba:	bf00      	nop
 800d5bc:	bf00      	nop
 800d5be:	e7fd      	b.n	800d5bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5c0:	f002 f9c2 	bl	800f948 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d01f      	beq.n	800d610 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5d0:	68b9      	ldr	r1, [r7, #8]
 800d5d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5d4:	f000 fac4 	bl	800db60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5da:	1e5a      	subs	r2, r3, #1
 800d5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00f      	beq.n	800d608 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ea:	3310      	adds	r3, #16
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f001 f889 	bl	800e704 <xTaskRemoveFromEventList>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d007      	beq.n	800d608 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d5f8:	4b3c      	ldr	r3, [pc, #240]	@ (800d6ec <xQueueReceive+0x1c0>)
 800d5fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5fe:	601a      	str	r2, [r3, #0]
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d608:	f002 f9d0 	bl	800f9ac <vPortExitCritical>
				return pdPASS;
 800d60c:	2301      	movs	r3, #1
 800d60e:	e069      	b.n	800d6e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d103      	bne.n	800d61e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d616:	f002 f9c9 	bl	800f9ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d61a:	2300      	movs	r3, #0
 800d61c:	e062      	b.n	800d6e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d620:	2b00      	cmp	r3, #0
 800d622:	d106      	bne.n	800d632 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d624:	f107 0310 	add.w	r3, r7, #16
 800d628:	4618      	mov	r0, r3
 800d62a:	f001 f8cf 	bl	800e7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d62e:	2301      	movs	r3, #1
 800d630:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d632:	f002 f9bb 	bl	800f9ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d636:	f000 fe25 	bl	800e284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d63a:	f002 f985 	bl	800f948 <vPortEnterCritical>
 800d63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d644:	b25b      	sxtb	r3, r3
 800d646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64a:	d103      	bne.n	800d654 <xQueueReceive+0x128>
 800d64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d656:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d65a:	b25b      	sxtb	r3, r3
 800d65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d660:	d103      	bne.n	800d66a <xQueueReceive+0x13e>
 800d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d664:	2200      	movs	r2, #0
 800d666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d66a:	f002 f99f 	bl	800f9ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d66e:	1d3a      	adds	r2, r7, #4
 800d670:	f107 0310 	add.w	r3, r7, #16
 800d674:	4611      	mov	r1, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f001 f8be 	bl	800e7f8 <xTaskCheckForTimeOut>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d123      	bne.n	800d6ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d684:	f000 fae4 	bl	800dc50 <prvIsQueueEmpty>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d017      	beq.n	800d6be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d690:	3324      	adds	r3, #36	@ 0x24
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	4611      	mov	r1, r2
 800d696:	4618      	mov	r0, r3
 800d698:	f000 ffe2 	bl	800e660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d69c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d69e:	f000 fa85 	bl	800dbac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6a2:	f000 fdfd 	bl	800e2a0 <xTaskResumeAll>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d189      	bne.n	800d5c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d6ac:	4b0f      	ldr	r3, [pc, #60]	@ (800d6ec <xQueueReceive+0x1c0>)
 800d6ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	e780      	b.n	800d5c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d6be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6c0:	f000 fa74 	bl	800dbac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6c4:	f000 fdec 	bl	800e2a0 <xTaskResumeAll>
 800d6c8:	e77a      	b.n	800d5c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6cc:	f000 fa6e 	bl	800dbac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6d0:	f000 fde6 	bl	800e2a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6d6:	f000 fabb 	bl	800dc50 <prvIsQueueEmpty>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f43f af6f 	beq.w	800d5c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d6e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3730      	adds	r7, #48	@ 0x30
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	e000ed04 	.word	0xe000ed04

0800d6f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08e      	sub	sp, #56	@ 0x38
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d702:	2300      	movs	r3, #0
 800d704:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10b      	bne.n	800d724 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	623b      	str	r3, [r7, #32]
}
 800d71e:	bf00      	nop
 800d720:	bf00      	nop
 800d722:	e7fd      	b.n	800d720 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00b      	beq.n	800d744 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	61fb      	str	r3, [r7, #28]
}
 800d73e:	bf00      	nop
 800d740:	bf00      	nop
 800d742:	e7fd      	b.n	800d740 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d744:	f001 f9b4 	bl	800eab0 <xTaskGetSchedulerState>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d102      	bne.n	800d754 <xQueueSemaphoreTake+0x64>
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d101      	bne.n	800d758 <xQueueSemaphoreTake+0x68>
 800d754:	2301      	movs	r3, #1
 800d756:	e000      	b.n	800d75a <xQueueSemaphoreTake+0x6a>
 800d758:	2300      	movs	r3, #0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d10b      	bne.n	800d776 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	61bb      	str	r3, [r7, #24]
}
 800d770:	bf00      	nop
 800d772:	bf00      	nop
 800d774:	e7fd      	b.n	800d772 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d776:	f002 f8e7 	bl	800f948 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d77e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d782:	2b00      	cmp	r3, #0
 800d784:	d024      	beq.n	800d7d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d788:	1e5a      	subs	r2, r3, #1
 800d78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d104      	bne.n	800d7a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d796:	f001 fb05 	bl	800eda4 <pvTaskIncrementMutexHeldCount>
 800d79a:	4602      	mov	r2, r0
 800d79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a2:	691b      	ldr	r3, [r3, #16]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00f      	beq.n	800d7c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7aa:	3310      	adds	r3, #16
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f000 ffa9 	bl	800e704 <xTaskRemoveFromEventList>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d007      	beq.n	800d7c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7b8:	4b54      	ldr	r3, [pc, #336]	@ (800d90c <xQueueSemaphoreTake+0x21c>)
 800d7ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7be:	601a      	str	r2, [r3, #0]
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7c8:	f002 f8f0 	bl	800f9ac <vPortExitCritical>
				return pdPASS;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e098      	b.n	800d902 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d112      	bne.n	800d7fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00b      	beq.n	800d7f4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e0:	f383 8811 	msr	BASEPRI, r3
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	617b      	str	r3, [r7, #20]
}
 800d7ee:	bf00      	nop
 800d7f0:	bf00      	nop
 800d7f2:	e7fd      	b.n	800d7f0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d7f4:	f002 f8da 	bl	800f9ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	e082      	b.n	800d902 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d106      	bne.n	800d810 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d802:	f107 030c 	add.w	r3, r7, #12
 800d806:	4618      	mov	r0, r3
 800d808:	f000 ffe0 	bl	800e7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d80c:	2301      	movs	r3, #1
 800d80e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d810:	f002 f8cc 	bl	800f9ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d814:	f000 fd36 	bl	800e284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d818:	f002 f896 	bl	800f948 <vPortEnterCritical>
 800d81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d822:	b25b      	sxtb	r3, r3
 800d824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d828:	d103      	bne.n	800d832 <xQueueSemaphoreTake+0x142>
 800d82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d834:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d838:	b25b      	sxtb	r3, r3
 800d83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83e:	d103      	bne.n	800d848 <xQueueSemaphoreTake+0x158>
 800d840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d842:	2200      	movs	r2, #0
 800d844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d848:	f002 f8b0 	bl	800f9ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d84c:	463a      	mov	r2, r7
 800d84e:	f107 030c 	add.w	r3, r7, #12
 800d852:	4611      	mov	r1, r2
 800d854:	4618      	mov	r0, r3
 800d856:	f000 ffcf 	bl	800e7f8 <xTaskCheckForTimeOut>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d132      	bne.n	800d8c6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d860:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d862:	f000 f9f5 	bl	800dc50 <prvIsQueueEmpty>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d026      	beq.n	800d8ba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d109      	bne.n	800d888 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d874:	f002 f868 	bl	800f948 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	4618      	mov	r0, r3
 800d87e:	f001 f935 	bl	800eaec <xTaskPriorityInherit>
 800d882:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d884:	f002 f892 	bl	800f9ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88a:	3324      	adds	r3, #36	@ 0x24
 800d88c:	683a      	ldr	r2, [r7, #0]
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fee5 	bl	800e660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d896:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d898:	f000 f988 	bl	800dbac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d89c:	f000 fd00 	bl	800e2a0 <xTaskResumeAll>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f47f af67 	bne.w	800d776 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d8a8:	4b18      	ldr	r3, [pc, #96]	@ (800d90c <xQueueSemaphoreTake+0x21c>)
 800d8aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	e75d      	b.n	800d776 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d8ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8bc:	f000 f976 	bl	800dbac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8c0:	f000 fcee 	bl	800e2a0 <xTaskResumeAll>
 800d8c4:	e757      	b.n	800d776 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d8c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8c8:	f000 f970 	bl	800dbac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8cc:	f000 fce8 	bl	800e2a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8d2:	f000 f9bd 	bl	800dc50 <prvIsQueueEmpty>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f43f af4c 	beq.w	800d776 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00d      	beq.n	800d900 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d8e4:	f002 f830 	bl	800f948 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d8e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8ea:	f000 f8b7 	bl	800da5c <prvGetDisinheritPriorityAfterTimeout>
 800d8ee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f001 f9d0 	bl	800ec9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d8fc:	f002 f856 	bl	800f9ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d900:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d902:	4618      	mov	r0, r3
 800d904:	3738      	adds	r7, #56	@ 0x38
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	e000ed04 	.word	0xe000ed04

0800d910 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b08e      	sub	sp, #56	@ 0x38
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10b      	bne.n	800d93e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	623b      	str	r3, [r7, #32]
}
 800d938:	bf00      	nop
 800d93a:	bf00      	nop
 800d93c:	e7fd      	b.n	800d93a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d103      	bne.n	800d94c <xQueueReceiveFromISR+0x3c>
 800d944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d101      	bne.n	800d950 <xQueueReceiveFromISR+0x40>
 800d94c:	2301      	movs	r3, #1
 800d94e:	e000      	b.n	800d952 <xQueueReceiveFromISR+0x42>
 800d950:	2300      	movs	r3, #0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d10b      	bne.n	800d96e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d95a:	f383 8811 	msr	BASEPRI, r3
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	61fb      	str	r3, [r7, #28]
}
 800d968:	bf00      	nop
 800d96a:	bf00      	nop
 800d96c:	e7fd      	b.n	800d96a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d96e:	f002 f8cb 	bl	800fb08 <vPortValidateInterruptPriority>
	__asm volatile
 800d972:	f3ef 8211 	mrs	r2, BASEPRI
 800d976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	61ba      	str	r2, [r7, #24]
 800d988:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d98a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d98c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d992:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d996:	2b00      	cmp	r3, #0
 800d998:	d02f      	beq.n	800d9fa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9a4:	68b9      	ldr	r1, [r7, #8]
 800d9a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9a8:	f000 f8da 	bl	800db60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ae:	1e5a      	subs	r2, r3, #1
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d9b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9bc:	d112      	bne.n	800d9e4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d016      	beq.n	800d9f4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c8:	3310      	adds	r3, #16
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f000 fe9a 	bl	800e704 <xTaskRemoveFromEventList>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00e      	beq.n	800d9f4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00b      	beq.n	800d9f4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	601a      	str	r2, [r3, #0]
 800d9e2:	e007      	b.n	800d9f4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	b25a      	sxtb	r2, r3
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f8:	e001      	b.n	800d9fe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da00:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f383 8811 	msr	BASEPRI, r3
}
 800da08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3738      	adds	r7, #56	@ 0x38
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d10b      	bne.n	800da3e <vQueueDelete+0x2a>
	__asm volatile
 800da26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2a:	f383 8811 	msr	BASEPRI, r3
 800da2e:	f3bf 8f6f 	isb	sy
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	60bb      	str	r3, [r7, #8]
}
 800da38:	bf00      	nop
 800da3a:	bf00      	nop
 800da3c:	e7fd      	b.n	800da3a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f000 f95e 	bl	800dd00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d102      	bne.n	800da54 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f002 f96a 	bl	800fd28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800da54:	bf00      	nop
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d006      	beq.n	800da7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800da76:	60fb      	str	r3, [r7, #12]
 800da78:	e001      	b.n	800da7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800da7a:	2300      	movs	r3, #0
 800da7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da7e:	68fb      	ldr	r3, [r7, #12]
	}
 800da80:	4618      	mov	r0, r3
 800da82:	3714      	adds	r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da98:	2300      	movs	r3, #0
 800da9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d10d      	bne.n	800dac6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d14d      	bne.n	800db4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f001 f880 	bl	800ebbc <xTaskPriorityDisinherit>
 800dabc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2200      	movs	r2, #0
 800dac2:	609a      	str	r2, [r3, #8]
 800dac4:	e043      	b.n	800db4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d119      	bne.n	800db00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6858      	ldr	r0, [r3, #4]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dad4:	461a      	mov	r2, r3
 800dad6:	68b9      	ldr	r1, [r7, #8]
 800dad8:	f00d faa5 	bl	801b026 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	685a      	ldr	r2, [r3, #4]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dae4:	441a      	add	r2, r3
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d32b      	bcc.n	800db4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	605a      	str	r2, [r3, #4]
 800dafe:	e026      	b.n	800db4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	68d8      	ldr	r0, [r3, #12]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db08:	461a      	mov	r2, r3
 800db0a:	68b9      	ldr	r1, [r7, #8]
 800db0c:	f00d fa8b 	bl	801b026 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	68da      	ldr	r2, [r3, #12]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db18:	425b      	negs	r3, r3
 800db1a:	441a      	add	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	68da      	ldr	r2, [r3, #12]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d207      	bcs.n	800db3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	689a      	ldr	r2, [r3, #8]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db34:	425b      	negs	r3, r3
 800db36:	441a      	add	r2, r3
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d105      	bne.n	800db4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800db56:	697b      	ldr	r3, [r7, #20]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d018      	beq.n	800dba4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	68da      	ldr	r2, [r3, #12]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db7a:	441a      	add	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	68da      	ldr	r2, [r3, #12]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d303      	bcc.n	800db94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	68d9      	ldr	r1, [r3, #12]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db9c:	461a      	mov	r2, r3
 800db9e:	6838      	ldr	r0, [r7, #0]
 800dba0:	f00d fa41 	bl	801b026 <memcpy>
	}
}
 800dba4:	bf00      	nop
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbb4:	f001 fec8 	bl	800f948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbc0:	e011      	b.n	800dbe6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d012      	beq.n	800dbf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	3324      	adds	r3, #36	@ 0x24
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f000 fd98 	bl	800e704 <xTaskRemoveFromEventList>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d001      	beq.n	800dbde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dbda:	f000 fe71 	bl	800e8c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	dce9      	bgt.n	800dbc2 <prvUnlockQueue+0x16>
 800dbee:	e000      	b.n	800dbf2 <prvUnlockQueue+0x46>
					break;
 800dbf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	22ff      	movs	r2, #255	@ 0xff
 800dbf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dbfa:	f001 fed7 	bl	800f9ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dbfe:	f001 fea3 	bl	800f948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc0a:	e011      	b.n	800dc30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	691b      	ldr	r3, [r3, #16]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d012      	beq.n	800dc3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	3310      	adds	r3, #16
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 fd73 	bl	800e704 <xTaskRemoveFromEventList>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc24:	f000 fe4c 	bl	800e8c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	dce9      	bgt.n	800dc0c <prvUnlockQueue+0x60>
 800dc38:	e000      	b.n	800dc3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	22ff      	movs	r2, #255	@ 0xff
 800dc40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dc44:	f001 feb2 	bl	800f9ac <vPortExitCritical>
}
 800dc48:	bf00      	nop
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc58:	f001 fe76 	bl	800f948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d102      	bne.n	800dc6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc64:	2301      	movs	r3, #1
 800dc66:	60fb      	str	r3, [r7, #12]
 800dc68:	e001      	b.n	800dc6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc6e:	f001 fe9d 	bl	800f9ac <vPortExitCritical>

	return xReturn;
 800dc72:	68fb      	ldr	r3, [r7, #12]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc84:	f001 fe60 	bl	800f948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d102      	bne.n	800dc9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc94:	2301      	movs	r3, #1
 800dc96:	60fb      	str	r3, [r7, #12]
 800dc98:	e001      	b.n	800dc9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc9e:	f001 fe85 	bl	800f9ac <vPortExitCritical>

	return xReturn;
 800dca2:	68fb      	ldr	r3, [r7, #12]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dcac:	b480      	push	{r7}
 800dcae:	b085      	sub	sp, #20
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	60fb      	str	r3, [r7, #12]
 800dcba:	e014      	b.n	800dce6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dcbc:	4a0f      	ldr	r2, [pc, #60]	@ (800dcfc <vQueueAddToRegistry+0x50>)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10b      	bne.n	800dce0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dcc8:	490c      	ldr	r1, [pc, #48]	@ (800dcfc <vQueueAddToRegistry+0x50>)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dcd2:	4a0a      	ldr	r2, [pc, #40]	@ (800dcfc <vQueueAddToRegistry+0x50>)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	4413      	add	r3, r2
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dcde:	e006      	b.n	800dcee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	3301      	adds	r3, #1
 800dce4:	60fb      	str	r3, [r7, #12]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2b07      	cmp	r3, #7
 800dcea:	d9e7      	bls.n	800dcbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dcec:	bf00      	nop
 800dcee:	bf00      	nop
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	240061d0 	.word	0x240061d0

0800dd00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd08:	2300      	movs	r3, #0
 800dd0a:	60fb      	str	r3, [r7, #12]
 800dd0c:	e016      	b.n	800dd3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dd0e:	4a10      	ldr	r2, [pc, #64]	@ (800dd50 <vQueueUnregisterQueue+0x50>)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	00db      	lsls	r3, r3, #3
 800dd14:	4413      	add	r3, r2
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d10b      	bne.n	800dd36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dd1e:	4a0c      	ldr	r2, [pc, #48]	@ (800dd50 <vQueueUnregisterQueue+0x50>)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2100      	movs	r1, #0
 800dd24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dd28:	4a09      	ldr	r2, [pc, #36]	@ (800dd50 <vQueueUnregisterQueue+0x50>)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	4413      	add	r3, r2
 800dd30:	2200      	movs	r2, #0
 800dd32:	605a      	str	r2, [r3, #4]
				break;
 800dd34:	e006      	b.n	800dd44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	60fb      	str	r3, [r7, #12]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2b07      	cmp	r3, #7
 800dd40:	d9e5      	bls.n	800dd0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dd42:	bf00      	nop
 800dd44:	bf00      	nop
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr
 800dd50:	240061d0 	.word	0x240061d0

0800dd54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd64:	f001 fdf0 	bl	800f948 <vPortEnterCritical>
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd6e:	b25b      	sxtb	r3, r3
 800dd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd74:	d103      	bne.n	800dd7e <vQueueWaitForMessageRestricted+0x2a>
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd84:	b25b      	sxtb	r3, r3
 800dd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8a:	d103      	bne.n	800dd94 <vQueueWaitForMessageRestricted+0x40>
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd94:	f001 fe0a 	bl	800f9ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d106      	bne.n	800ddae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	3324      	adds	r3, #36	@ 0x24
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	68b9      	ldr	r1, [r7, #8]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 fc7f 	bl	800e6ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ddae:	6978      	ldr	r0, [r7, #20]
 800ddb0:	f7ff fefc 	bl	800dbac <prvUnlockQueue>
	}
 800ddb4:	bf00      	nop
 800ddb6:	3718      	adds	r7, #24
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08e      	sub	sp, #56	@ 0x38
 800ddc0:	af04      	add	r7, sp, #16
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	607a      	str	r2, [r7, #4]
 800ddc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10b      	bne.n	800dde8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	623b      	str	r3, [r7, #32]
}
 800dde2:	bf00      	nop
 800dde4:	bf00      	nop
 800dde6:	e7fd      	b.n	800dde4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10b      	bne.n	800de06 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ddee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	61fb      	str	r3, [r7, #28]
}
 800de00:	bf00      	nop
 800de02:	bf00      	nop
 800de04:	e7fd      	b.n	800de02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de06:	23a8      	movs	r3, #168	@ 0xa8
 800de08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2ba8      	cmp	r3, #168	@ 0xa8
 800de0e:	d00b      	beq.n	800de28 <xTaskCreateStatic+0x6c>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	61bb      	str	r3, [r7, #24]
}
 800de22:	bf00      	nop
 800de24:	bf00      	nop
 800de26:	e7fd      	b.n	800de24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d01e      	beq.n	800de6e <xTaskCreateStatic+0xb2>
 800de30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de32:	2b00      	cmp	r3, #0
 800de34:	d01b      	beq.n	800de6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de42:	2202      	movs	r2, #2
 800de44:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de48:	2300      	movs	r3, #0
 800de4a:	9303      	str	r3, [sp, #12]
 800de4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4e:	9302      	str	r3, [sp, #8]
 800de50:	f107 0314 	add.w	r3, r7, #20
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	68b9      	ldr	r1, [r7, #8]
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 f851 	bl	800df08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de68:	f000 f8f6 	bl	800e058 <prvAddNewTaskToReadyList>
 800de6c:	e001      	b.n	800de72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800de6e:	2300      	movs	r3, #0
 800de70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de72:	697b      	ldr	r3, [r7, #20]
	}
 800de74:	4618      	mov	r0, r3
 800de76:	3728      	adds	r7, #40	@ 0x28
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08c      	sub	sp, #48	@ 0x30
 800de80:	af04      	add	r7, sp, #16
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	4613      	mov	r3, r2
 800de8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de8c:	88fb      	ldrh	r3, [r7, #6]
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4618      	mov	r0, r3
 800de92:	f001 fe7b 	bl	800fb8c <pvPortMalloc>
 800de96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00e      	beq.n	800debc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de9e:	20a8      	movs	r0, #168	@ 0xa8
 800dea0:	f001 fe74 	bl	800fb8c <pvPortMalloc>
 800dea4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d003      	beq.n	800deb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	697a      	ldr	r2, [r7, #20]
 800deb0:	631a      	str	r2, [r3, #48]	@ 0x30
 800deb2:	e005      	b.n	800dec0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800deb4:	6978      	ldr	r0, [r7, #20]
 800deb6:	f001 ff37 	bl	800fd28 <vPortFree>
 800deba:	e001      	b.n	800dec0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800debc:	2300      	movs	r3, #0
 800debe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d017      	beq.n	800def6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	2200      	movs	r2, #0
 800deca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dece:	88fa      	ldrh	r2, [r7, #6]
 800ded0:	2300      	movs	r3, #0
 800ded2:	9303      	str	r3, [sp, #12]
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	9302      	str	r3, [sp, #8]
 800ded8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deda:	9301      	str	r3, [sp, #4]
 800dedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 f80f 	bl	800df08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800deea:	69f8      	ldr	r0, [r7, #28]
 800deec:	f000 f8b4 	bl	800e058 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800def0:	2301      	movs	r3, #1
 800def2:	61bb      	str	r3, [r7, #24]
 800def4:	e002      	b.n	800defc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800def6:	f04f 33ff 	mov.w	r3, #4294967295
 800defa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800defc:	69bb      	ldr	r3, [r7, #24]
	}
 800defe:	4618      	mov	r0, r3
 800df00:	3720      	adds	r7, #32
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
	...

0800df08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b088      	sub	sp, #32
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	461a      	mov	r2, r3
 800df20:	21a5      	movs	r1, #165	@ 0xa5
 800df22:	f00c ffac 	bl	801ae7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df2a:	6879      	ldr	r1, [r7, #4]
 800df2c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800df30:	440b      	add	r3, r1
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	f023 0307 	bic.w	r3, r3, #7
 800df3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	f003 0307 	and.w	r3, r3, #7
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00b      	beq.n	800df62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800df4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	617b      	str	r3, [r7, #20]
}
 800df5c:	bf00      	nop
 800df5e:	bf00      	nop
 800df60:	e7fd      	b.n	800df5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d01f      	beq.n	800dfa8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df68:	2300      	movs	r3, #0
 800df6a:	61fb      	str	r3, [r7, #28]
 800df6c:	e012      	b.n	800df94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	4413      	add	r3, r2
 800df74:	7819      	ldrb	r1, [r3, #0]
 800df76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	4413      	add	r3, r2
 800df7c:	3334      	adds	r3, #52	@ 0x34
 800df7e:	460a      	mov	r2, r1
 800df80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	4413      	add	r3, r2
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d006      	beq.n	800df9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df8e:	69fb      	ldr	r3, [r7, #28]
 800df90:	3301      	adds	r3, #1
 800df92:	61fb      	str	r3, [r7, #28]
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	2b0f      	cmp	r3, #15
 800df98:	d9e9      	bls.n	800df6e <prvInitialiseNewTask+0x66>
 800df9a:	e000      	b.n	800df9e <prvInitialiseNewTask+0x96>
			{
				break;
 800df9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dfa6:	e003      	b.n	800dfb0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb2:	2b37      	cmp	r3, #55	@ 0x37
 800dfb4:	d901      	bls.n	800dfba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfb6:	2337      	movs	r3, #55	@ 0x37
 800dfb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc8:	2200      	movs	r2, #0
 800dfca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfce:	3304      	adds	r3, #4
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fe fd7b 	bl	800cacc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd8:	3318      	adds	r3, #24
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fe fd76 	bl	800cacc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfe4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dff4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff8:	2200      	movs	r2, #0
 800dffa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e000:	2200      	movs	r2, #0
 800e002:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e008:	3354      	adds	r3, #84	@ 0x54
 800e00a:	224c      	movs	r2, #76	@ 0x4c
 800e00c:	2100      	movs	r1, #0
 800e00e:	4618      	mov	r0, r3
 800e010:	f00c ff35 	bl	801ae7e <memset>
 800e014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e016:	4a0d      	ldr	r2, [pc, #52]	@ (800e04c <prvInitialiseNewTask+0x144>)
 800e018:	659a      	str	r2, [r3, #88]	@ 0x58
 800e01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01c:	4a0c      	ldr	r2, [pc, #48]	@ (800e050 <prvInitialiseNewTask+0x148>)
 800e01e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e022:	4a0c      	ldr	r2, [pc, #48]	@ (800e054 <prvInitialiseNewTask+0x14c>)
 800e024:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e026:	683a      	ldr	r2, [r7, #0]
 800e028:	68f9      	ldr	r1, [r7, #12]
 800e02a:	69b8      	ldr	r0, [r7, #24]
 800e02c:	f001 fb5e 	bl	800f6ec <pxPortInitialiseStack>
 800e030:	4602      	mov	r2, r0
 800e032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e034:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e042:	bf00      	nop
 800e044:	3720      	adds	r7, #32
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	24014d20 	.word	0x24014d20
 800e050:	24014d88 	.word	0x24014d88
 800e054:	24014df0 	.word	0x24014df0

0800e058 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e060:	f001 fc72 	bl	800f948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e064:	4b2d      	ldr	r3, [pc, #180]	@ (800e11c <prvAddNewTaskToReadyList+0xc4>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3301      	adds	r3, #1
 800e06a:	4a2c      	ldr	r2, [pc, #176]	@ (800e11c <prvAddNewTaskToReadyList+0xc4>)
 800e06c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e06e:	4b2c      	ldr	r3, [pc, #176]	@ (800e120 <prvAddNewTaskToReadyList+0xc8>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d109      	bne.n	800e08a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e076:	4a2a      	ldr	r2, [pc, #168]	@ (800e120 <prvAddNewTaskToReadyList+0xc8>)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e07c:	4b27      	ldr	r3, [pc, #156]	@ (800e11c <prvAddNewTaskToReadyList+0xc4>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d110      	bne.n	800e0a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e084:	f000 fc40 	bl	800e908 <prvInitialiseTaskLists>
 800e088:	e00d      	b.n	800e0a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e08a:	4b26      	ldr	r3, [pc, #152]	@ (800e124 <prvAddNewTaskToReadyList+0xcc>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d109      	bne.n	800e0a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e092:	4b23      	ldr	r3, [pc, #140]	@ (800e120 <prvAddNewTaskToReadyList+0xc8>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d802      	bhi.n	800e0a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e0a0:	4a1f      	ldr	r2, [pc, #124]	@ (800e120 <prvAddNewTaskToReadyList+0xc8>)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e0a6:	4b20      	ldr	r3, [pc, #128]	@ (800e128 <prvAddNewTaskToReadyList+0xd0>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	4a1e      	ldr	r2, [pc, #120]	@ (800e128 <prvAddNewTaskToReadyList+0xd0>)
 800e0ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e0b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e128 <prvAddNewTaskToReadyList+0xd0>)
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0bc:	4b1b      	ldr	r3, [pc, #108]	@ (800e12c <prvAddNewTaskToReadyList+0xd4>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d903      	bls.n	800e0cc <prvAddNewTaskToReadyList+0x74>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c8:	4a18      	ldr	r2, [pc, #96]	@ (800e12c <prvAddNewTaskToReadyList+0xd4>)
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4a15      	ldr	r2, [pc, #84]	@ (800e130 <prvAddNewTaskToReadyList+0xd8>)
 800e0da:	441a      	add	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	3304      	adds	r3, #4
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f7fe fcff 	bl	800cae6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0e8:	f001 fc60 	bl	800f9ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e124 <prvAddNewTaskToReadyList+0xcc>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00e      	beq.n	800e112 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e120 <prvAddNewTaskToReadyList+0xc8>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d207      	bcs.n	800e112 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e102:	4b0c      	ldr	r3, [pc, #48]	@ (800e134 <prvAddNewTaskToReadyList+0xdc>)
 800e104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e108:	601a      	str	r2, [r3, #0]
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e112:	bf00      	nop
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	240066e4 	.word	0x240066e4
 800e120:	24006210 	.word	0x24006210
 800e124:	240066f0 	.word	0x240066f0
 800e128:	24006700 	.word	0x24006700
 800e12c:	240066ec 	.word	0x240066ec
 800e130:	24006214 	.word	0x24006214
 800e134:	e000ed04 	.word	0xe000ed04

0800e138 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e140:	2300      	movs	r3, #0
 800e142:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d018      	beq.n	800e17c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e14a:	4b14      	ldr	r3, [pc, #80]	@ (800e19c <vTaskDelay+0x64>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d00b      	beq.n	800e16a <vTaskDelay+0x32>
	__asm volatile
 800e152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	60bb      	str	r3, [r7, #8]
}
 800e164:	bf00      	nop
 800e166:	bf00      	nop
 800e168:	e7fd      	b.n	800e166 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e16a:	f000 f88b 	bl	800e284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e16e:	2100      	movs	r1, #0
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 ff0d 	bl	800ef90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e176:	f000 f893 	bl	800e2a0 <xTaskResumeAll>
 800e17a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d107      	bne.n	800e192 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e182:	4b07      	ldr	r3, [pc, #28]	@ (800e1a0 <vTaskDelay+0x68>)
 800e184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e188:	601a      	str	r2, [r3, #0]
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e192:	bf00      	nop
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	2400670c 	.word	0x2400670c
 800e1a0:	e000ed04 	.word	0xe000ed04

0800e1a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b08a      	sub	sp, #40	@ 0x28
 800e1a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1b2:	463a      	mov	r2, r7
 800e1b4:	1d39      	adds	r1, r7, #4
 800e1b6:	f107 0308 	add.w	r3, r7, #8
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe fc32 	bl	800ca24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1c0:	6839      	ldr	r1, [r7, #0]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	9202      	str	r2, [sp, #8]
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	460a      	mov	r2, r1
 800e1d2:	4924      	ldr	r1, [pc, #144]	@ (800e264 <vTaskStartScheduler+0xc0>)
 800e1d4:	4824      	ldr	r0, [pc, #144]	@ (800e268 <vTaskStartScheduler+0xc4>)
 800e1d6:	f7ff fdf1 	bl	800ddbc <xTaskCreateStatic>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	4a23      	ldr	r2, [pc, #140]	@ (800e26c <vTaskStartScheduler+0xc8>)
 800e1de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1e0:	4b22      	ldr	r3, [pc, #136]	@ (800e26c <vTaskStartScheduler+0xc8>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d002      	beq.n	800e1ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	617b      	str	r3, [r7, #20]
 800e1ec:	e001      	b.n	800e1f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d102      	bne.n	800e1fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1f8:	f000 ff1e 	bl	800f038 <xTimerCreateTimerTask>
 800e1fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d11b      	bne.n	800e23c <vTaskStartScheduler+0x98>
	__asm volatile
 800e204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e208:	f383 8811 	msr	BASEPRI, r3
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	613b      	str	r3, [r7, #16]
}
 800e216:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e218:	4b15      	ldr	r3, [pc, #84]	@ (800e270 <vTaskStartScheduler+0xcc>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	3354      	adds	r3, #84	@ 0x54
 800e21e:	4a15      	ldr	r2, [pc, #84]	@ (800e274 <vTaskStartScheduler+0xd0>)
 800e220:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e222:	4b15      	ldr	r3, [pc, #84]	@ (800e278 <vTaskStartScheduler+0xd4>)
 800e224:	f04f 32ff 	mov.w	r2, #4294967295
 800e228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e22a:	4b14      	ldr	r3, [pc, #80]	@ (800e27c <vTaskStartScheduler+0xd8>)
 800e22c:	2201      	movs	r2, #1
 800e22e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e230:	4b13      	ldr	r3, [pc, #76]	@ (800e280 <vTaskStartScheduler+0xdc>)
 800e232:	2200      	movs	r2, #0
 800e234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e236:	f001 fae3 	bl	800f800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e23a:	e00f      	b.n	800e25c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e242:	d10b      	bne.n	800e25c <vTaskStartScheduler+0xb8>
	__asm volatile
 800e244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e248:	f383 8811 	msr	BASEPRI, r3
 800e24c:	f3bf 8f6f 	isb	sy
 800e250:	f3bf 8f4f 	dsb	sy
 800e254:	60fb      	str	r3, [r7, #12]
}
 800e256:	bf00      	nop
 800e258:	bf00      	nop
 800e25a:	e7fd      	b.n	800e258 <vTaskStartScheduler+0xb4>
}
 800e25c:	bf00      	nop
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	0801bd18 	.word	0x0801bd18
 800e268:	0800e8d9 	.word	0x0800e8d9
 800e26c:	24006708 	.word	0x24006708
 800e270:	24006210 	.word	0x24006210
 800e274:	24004a00 	.word	0x24004a00
 800e278:	24006704 	.word	0x24006704
 800e27c:	240066f0 	.word	0x240066f0
 800e280:	240066e8 	.word	0x240066e8

0800e284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e284:	b480      	push	{r7}
 800e286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e288:	4b04      	ldr	r3, [pc, #16]	@ (800e29c <vTaskSuspendAll+0x18>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3301      	adds	r3, #1
 800e28e:	4a03      	ldr	r2, [pc, #12]	@ (800e29c <vTaskSuspendAll+0x18>)
 800e290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e292:	bf00      	nop
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	2400670c 	.word	0x2400670c

0800e2a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e2ae:	4b42      	ldr	r3, [pc, #264]	@ (800e3b8 <xTaskResumeAll+0x118>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d10b      	bne.n	800e2ce <xTaskResumeAll+0x2e>
	__asm volatile
 800e2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	603b      	str	r3, [r7, #0]
}
 800e2c8:	bf00      	nop
 800e2ca:	bf00      	nop
 800e2cc:	e7fd      	b.n	800e2ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2ce:	f001 fb3b 	bl	800f948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2d2:	4b39      	ldr	r3, [pc, #228]	@ (800e3b8 <xTaskResumeAll+0x118>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	4a37      	ldr	r2, [pc, #220]	@ (800e3b8 <xTaskResumeAll+0x118>)
 800e2da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2dc:	4b36      	ldr	r3, [pc, #216]	@ (800e3b8 <xTaskResumeAll+0x118>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d162      	bne.n	800e3aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2e4:	4b35      	ldr	r3, [pc, #212]	@ (800e3bc <xTaskResumeAll+0x11c>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d05e      	beq.n	800e3aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2ec:	e02f      	b.n	800e34e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ee:	4b34      	ldr	r3, [pc, #208]	@ (800e3c0 <xTaskResumeAll+0x120>)
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	3318      	adds	r3, #24
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fe fc50 	bl	800cba0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	3304      	adds	r3, #4
 800e304:	4618      	mov	r0, r3
 800e306:	f7fe fc4b 	bl	800cba0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e30e:	4b2d      	ldr	r3, [pc, #180]	@ (800e3c4 <xTaskResumeAll+0x124>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	429a      	cmp	r2, r3
 800e314:	d903      	bls.n	800e31e <xTaskResumeAll+0x7e>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e31a:	4a2a      	ldr	r2, [pc, #168]	@ (800e3c4 <xTaskResumeAll+0x124>)
 800e31c:	6013      	str	r3, [r2, #0]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e322:	4613      	mov	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	4a27      	ldr	r2, [pc, #156]	@ (800e3c8 <xTaskResumeAll+0x128>)
 800e32c:	441a      	add	r2, r3
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	3304      	adds	r3, #4
 800e332:	4619      	mov	r1, r3
 800e334:	4610      	mov	r0, r2
 800e336:	f7fe fbd6 	bl	800cae6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e33e:	4b23      	ldr	r3, [pc, #140]	@ (800e3cc <xTaskResumeAll+0x12c>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e344:	429a      	cmp	r2, r3
 800e346:	d302      	bcc.n	800e34e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e348:	4b21      	ldr	r3, [pc, #132]	@ (800e3d0 <xTaskResumeAll+0x130>)
 800e34a:	2201      	movs	r2, #1
 800e34c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e34e:	4b1c      	ldr	r3, [pc, #112]	@ (800e3c0 <xTaskResumeAll+0x120>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1cb      	bne.n	800e2ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d001      	beq.n	800e360 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e35c:	f000 fb78 	bl	800ea50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e360:	4b1c      	ldr	r3, [pc, #112]	@ (800e3d4 <xTaskResumeAll+0x134>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d010      	beq.n	800e38e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e36c:	f000 f858 	bl	800e420 <xTaskIncrementTick>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e376:	4b16      	ldr	r3, [pc, #88]	@ (800e3d0 <xTaskResumeAll+0x130>)
 800e378:	2201      	movs	r2, #1
 800e37a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3b01      	subs	r3, #1
 800e380:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1f1      	bne.n	800e36c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e388:	4b12      	ldr	r3, [pc, #72]	@ (800e3d4 <xTaskResumeAll+0x134>)
 800e38a:	2200      	movs	r2, #0
 800e38c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e38e:	4b10      	ldr	r3, [pc, #64]	@ (800e3d0 <xTaskResumeAll+0x130>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d009      	beq.n	800e3aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e396:	2301      	movs	r3, #1
 800e398:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e39a:	4b0f      	ldr	r3, [pc, #60]	@ (800e3d8 <xTaskResumeAll+0x138>)
 800e39c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3a0:	601a      	str	r2, [r3, #0]
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3aa:	f001 faff 	bl	800f9ac <vPortExitCritical>

	return xAlreadyYielded;
 800e3ae:	68bb      	ldr	r3, [r7, #8]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	2400670c 	.word	0x2400670c
 800e3bc:	240066e4 	.word	0x240066e4
 800e3c0:	240066a4 	.word	0x240066a4
 800e3c4:	240066ec 	.word	0x240066ec
 800e3c8:	24006214 	.word	0x24006214
 800e3cc:	24006210 	.word	0x24006210
 800e3d0:	240066f8 	.word	0x240066f8
 800e3d4:	240066f4 	.word	0x240066f4
 800e3d8:	e000ed04 	.word	0xe000ed04

0800e3dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e3e2:	4b05      	ldr	r3, [pc, #20]	@ (800e3f8 <xTaskGetTickCount+0x1c>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e3e8:	687b      	ldr	r3, [r7, #4]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	370c      	adds	r7, #12
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop
 800e3f8:	240066e8 	.word	0x240066e8

0800e3fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e402:	f001 fb81 	bl	800fb08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e406:	2300      	movs	r3, #0
 800e408:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e40a:	4b04      	ldr	r3, [pc, #16]	@ (800e41c <xTaskGetTickCountFromISR+0x20>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e410:	683b      	ldr	r3, [r7, #0]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	240066e8 	.word	0x240066e8

0800e420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e426:	2300      	movs	r3, #0
 800e428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e42a:	4b4f      	ldr	r3, [pc, #316]	@ (800e568 <xTaskIncrementTick+0x148>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f040 8090 	bne.w	800e554 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e434:	4b4d      	ldr	r3, [pc, #308]	@ (800e56c <xTaskIncrementTick+0x14c>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	3301      	adds	r3, #1
 800e43a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e43c:	4a4b      	ldr	r2, [pc, #300]	@ (800e56c <xTaskIncrementTick+0x14c>)
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d121      	bne.n	800e48c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e448:	4b49      	ldr	r3, [pc, #292]	@ (800e570 <xTaskIncrementTick+0x150>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00b      	beq.n	800e46a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	603b      	str	r3, [r7, #0]
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop
 800e468:	e7fd      	b.n	800e466 <xTaskIncrementTick+0x46>
 800e46a:	4b41      	ldr	r3, [pc, #260]	@ (800e570 <xTaskIncrementTick+0x150>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	60fb      	str	r3, [r7, #12]
 800e470:	4b40      	ldr	r3, [pc, #256]	@ (800e574 <xTaskIncrementTick+0x154>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a3e      	ldr	r2, [pc, #248]	@ (800e570 <xTaskIncrementTick+0x150>)
 800e476:	6013      	str	r3, [r2, #0]
 800e478:	4a3e      	ldr	r2, [pc, #248]	@ (800e574 <xTaskIncrementTick+0x154>)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6013      	str	r3, [r2, #0]
 800e47e:	4b3e      	ldr	r3, [pc, #248]	@ (800e578 <xTaskIncrementTick+0x158>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	3301      	adds	r3, #1
 800e484:	4a3c      	ldr	r2, [pc, #240]	@ (800e578 <xTaskIncrementTick+0x158>)
 800e486:	6013      	str	r3, [r2, #0]
 800e488:	f000 fae2 	bl	800ea50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e48c:	4b3b      	ldr	r3, [pc, #236]	@ (800e57c <xTaskIncrementTick+0x15c>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	693a      	ldr	r2, [r7, #16]
 800e492:	429a      	cmp	r2, r3
 800e494:	d349      	bcc.n	800e52a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e496:	4b36      	ldr	r3, [pc, #216]	@ (800e570 <xTaskIncrementTick+0x150>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d104      	bne.n	800e4aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4a0:	4b36      	ldr	r3, [pc, #216]	@ (800e57c <xTaskIncrementTick+0x15c>)
 800e4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4a6:	601a      	str	r2, [r3, #0]
					break;
 800e4a8:	e03f      	b.n	800e52a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4aa:	4b31      	ldr	r3, [pc, #196]	@ (800e570 <xTaskIncrementTick+0x150>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4ba:	693a      	ldr	r2, [r7, #16]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d203      	bcs.n	800e4ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e4c2:	4a2e      	ldr	r2, [pc, #184]	@ (800e57c <xTaskIncrementTick+0x15c>)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e4c8:	e02f      	b.n	800e52a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7fe fb66 	bl	800cba0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d004      	beq.n	800e4e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	3318      	adds	r3, #24
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fe fb5d 	bl	800cba0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ea:	4b25      	ldr	r3, [pc, #148]	@ (800e580 <xTaskIncrementTick+0x160>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d903      	bls.n	800e4fa <xTaskIncrementTick+0xda>
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f6:	4a22      	ldr	r2, [pc, #136]	@ (800e580 <xTaskIncrementTick+0x160>)
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4fe:	4613      	mov	r3, r2
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	4413      	add	r3, r2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	4a1f      	ldr	r2, [pc, #124]	@ (800e584 <xTaskIncrementTick+0x164>)
 800e508:	441a      	add	r2, r3
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	3304      	adds	r3, #4
 800e50e:	4619      	mov	r1, r3
 800e510:	4610      	mov	r0, r2
 800e512:	f7fe fae8 	bl	800cae6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e51a:	4b1b      	ldr	r3, [pc, #108]	@ (800e588 <xTaskIncrementTick+0x168>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e520:	429a      	cmp	r2, r3
 800e522:	d3b8      	bcc.n	800e496 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e524:	2301      	movs	r3, #1
 800e526:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e528:	e7b5      	b.n	800e496 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e52a:	4b17      	ldr	r3, [pc, #92]	@ (800e588 <xTaskIncrementTick+0x168>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e530:	4914      	ldr	r1, [pc, #80]	@ (800e584 <xTaskIncrementTick+0x164>)
 800e532:	4613      	mov	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4413      	add	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	440b      	add	r3, r1
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d901      	bls.n	800e546 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e542:	2301      	movs	r3, #1
 800e544:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e546:	4b11      	ldr	r3, [pc, #68]	@ (800e58c <xTaskIncrementTick+0x16c>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d007      	beq.n	800e55e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e54e:	2301      	movs	r3, #1
 800e550:	617b      	str	r3, [r7, #20]
 800e552:	e004      	b.n	800e55e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e554:	4b0e      	ldr	r3, [pc, #56]	@ (800e590 <xTaskIncrementTick+0x170>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3301      	adds	r3, #1
 800e55a:	4a0d      	ldr	r2, [pc, #52]	@ (800e590 <xTaskIncrementTick+0x170>)
 800e55c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e55e:	697b      	ldr	r3, [r7, #20]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3718      	adds	r7, #24
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	2400670c 	.word	0x2400670c
 800e56c:	240066e8 	.word	0x240066e8
 800e570:	2400669c 	.word	0x2400669c
 800e574:	240066a0 	.word	0x240066a0
 800e578:	240066fc 	.word	0x240066fc
 800e57c:	24006704 	.word	0x24006704
 800e580:	240066ec 	.word	0x240066ec
 800e584:	24006214 	.word	0x24006214
 800e588:	24006210 	.word	0x24006210
 800e58c:	240066f8 	.word	0x240066f8
 800e590:	240066f4 	.word	0x240066f4

0800e594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e594:	b480      	push	{r7}
 800e596:	b085      	sub	sp, #20
 800e598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e59a:	4b2b      	ldr	r3, [pc, #172]	@ (800e648 <vTaskSwitchContext+0xb4>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d003      	beq.n	800e5aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5a2:	4b2a      	ldr	r3, [pc, #168]	@ (800e64c <vTaskSwitchContext+0xb8>)
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5a8:	e047      	b.n	800e63a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e5aa:	4b28      	ldr	r3, [pc, #160]	@ (800e64c <vTaskSwitchContext+0xb8>)
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5b0:	4b27      	ldr	r3, [pc, #156]	@ (800e650 <vTaskSwitchContext+0xbc>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	60fb      	str	r3, [r7, #12]
 800e5b6:	e011      	b.n	800e5dc <vTaskSwitchContext+0x48>
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d10b      	bne.n	800e5d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c2:	f383 8811 	msr	BASEPRI, r3
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	607b      	str	r3, [r7, #4]
}
 800e5d0:	bf00      	nop
 800e5d2:	bf00      	nop
 800e5d4:	e7fd      	b.n	800e5d2 <vTaskSwitchContext+0x3e>
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	60fb      	str	r3, [r7, #12]
 800e5dc:	491d      	ldr	r1, [pc, #116]	@ (800e654 <vTaskSwitchContext+0xc0>)
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	4413      	add	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	440b      	add	r3, r1
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d0e3      	beq.n	800e5b8 <vTaskSwitchContext+0x24>
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4413      	add	r3, r2
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	4a16      	ldr	r2, [pc, #88]	@ (800e654 <vTaskSwitchContext+0xc0>)
 800e5fc:	4413      	add	r3, r2
 800e5fe:	60bb      	str	r3, [r7, #8]
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	605a      	str	r2, [r3, #4]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	685a      	ldr	r2, [r3, #4]
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	3308      	adds	r3, #8
 800e612:	429a      	cmp	r2, r3
 800e614:	d104      	bne.n	800e620 <vTaskSwitchContext+0x8c>
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	685a      	ldr	r2, [r3, #4]
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	605a      	str	r2, [r3, #4]
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	68db      	ldr	r3, [r3, #12]
 800e626:	4a0c      	ldr	r2, [pc, #48]	@ (800e658 <vTaskSwitchContext+0xc4>)
 800e628:	6013      	str	r3, [r2, #0]
 800e62a:	4a09      	ldr	r2, [pc, #36]	@ (800e650 <vTaskSwitchContext+0xbc>)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e630:	4b09      	ldr	r3, [pc, #36]	@ (800e658 <vTaskSwitchContext+0xc4>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3354      	adds	r3, #84	@ 0x54
 800e636:	4a09      	ldr	r2, [pc, #36]	@ (800e65c <vTaskSwitchContext+0xc8>)
 800e638:	6013      	str	r3, [r2, #0]
}
 800e63a:	bf00      	nop
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	2400670c 	.word	0x2400670c
 800e64c:	240066f8 	.word	0x240066f8
 800e650:	240066ec 	.word	0x240066ec
 800e654:	24006214 	.word	0x24006214
 800e658:	24006210 	.word	0x24006210
 800e65c:	24004a00 	.word	0x24004a00

0800e660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10b      	bne.n	800e688 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	60fb      	str	r3, [r7, #12]
}
 800e682:	bf00      	nop
 800e684:	bf00      	nop
 800e686:	e7fd      	b.n	800e684 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e688:	4b07      	ldr	r3, [pc, #28]	@ (800e6a8 <vTaskPlaceOnEventList+0x48>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	3318      	adds	r3, #24
 800e68e:	4619      	mov	r1, r3
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7fe fa4c 	bl	800cb2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e696:	2101      	movs	r1, #1
 800e698:	6838      	ldr	r0, [r7, #0]
 800e69a:	f000 fc79 	bl	800ef90 <prvAddCurrentTaskToDelayedList>
}
 800e69e:	bf00      	nop
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	24006210 	.word	0x24006210

0800e6ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b086      	sub	sp, #24
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10b      	bne.n	800e6d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	617b      	str	r3, [r7, #20]
}
 800e6d0:	bf00      	nop
 800e6d2:	bf00      	nop
 800e6d4:	e7fd      	b.n	800e6d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6d6:	4b0a      	ldr	r3, [pc, #40]	@ (800e700 <vTaskPlaceOnEventListRestricted+0x54>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	3318      	adds	r3, #24
 800e6dc:	4619      	mov	r1, r3
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f7fe fa01 	bl	800cae6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d002      	beq.n	800e6f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e6ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6f0:	6879      	ldr	r1, [r7, #4]
 800e6f2:	68b8      	ldr	r0, [r7, #8]
 800e6f4:	f000 fc4c 	bl	800ef90 <prvAddCurrentTaskToDelayedList>
	}
 800e6f8:	bf00      	nop
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	24006210 	.word	0x24006210

0800e704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b086      	sub	sp, #24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d10b      	bne.n	800e732 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e71e:	f383 8811 	msr	BASEPRI, r3
 800e722:	f3bf 8f6f 	isb	sy
 800e726:	f3bf 8f4f 	dsb	sy
 800e72a:	60fb      	str	r3, [r7, #12]
}
 800e72c:	bf00      	nop
 800e72e:	bf00      	nop
 800e730:	e7fd      	b.n	800e72e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	3318      	adds	r3, #24
 800e736:	4618      	mov	r0, r3
 800e738:	f7fe fa32 	bl	800cba0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e73c:	4b1d      	ldr	r3, [pc, #116]	@ (800e7b4 <xTaskRemoveFromEventList+0xb0>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d11d      	bne.n	800e780 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	3304      	adds	r3, #4
 800e748:	4618      	mov	r0, r3
 800e74a:	f7fe fa29 	bl	800cba0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e752:	4b19      	ldr	r3, [pc, #100]	@ (800e7b8 <xTaskRemoveFromEventList+0xb4>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	429a      	cmp	r2, r3
 800e758:	d903      	bls.n	800e762 <xTaskRemoveFromEventList+0x5e>
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e75e:	4a16      	ldr	r2, [pc, #88]	@ (800e7b8 <xTaskRemoveFromEventList+0xb4>)
 800e760:	6013      	str	r3, [r2, #0]
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e766:	4613      	mov	r3, r2
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	4413      	add	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	4a13      	ldr	r2, [pc, #76]	@ (800e7bc <xTaskRemoveFromEventList+0xb8>)
 800e770:	441a      	add	r2, r3
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	3304      	adds	r3, #4
 800e776:	4619      	mov	r1, r3
 800e778:	4610      	mov	r0, r2
 800e77a:	f7fe f9b4 	bl	800cae6 <vListInsertEnd>
 800e77e:	e005      	b.n	800e78c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	3318      	adds	r3, #24
 800e784:	4619      	mov	r1, r3
 800e786:	480e      	ldr	r0, [pc, #56]	@ (800e7c0 <xTaskRemoveFromEventList+0xbc>)
 800e788:	f7fe f9ad 	bl	800cae6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e790:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c4 <xTaskRemoveFromEventList+0xc0>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e796:	429a      	cmp	r2, r3
 800e798:	d905      	bls.n	800e7a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e79a:	2301      	movs	r3, #1
 800e79c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e79e:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c8 <xTaskRemoveFromEventList+0xc4>)
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	e001      	b.n	800e7aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e7aa:	697b      	ldr	r3, [r7, #20]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	2400670c 	.word	0x2400670c
 800e7b8:	240066ec 	.word	0x240066ec
 800e7bc:	24006214 	.word	0x24006214
 800e7c0:	240066a4 	.word	0x240066a4
 800e7c4:	24006210 	.word	0x24006210
 800e7c8:	240066f8 	.word	0x240066f8

0800e7cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7d4:	4b06      	ldr	r3, [pc, #24]	@ (800e7f0 <vTaskInternalSetTimeOutState+0x24>)
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7dc:	4b05      	ldr	r3, [pc, #20]	@ (800e7f4 <vTaskInternalSetTimeOutState+0x28>)
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	605a      	str	r2, [r3, #4]
}
 800e7e4:	bf00      	nop
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr
 800e7f0:	240066fc 	.word	0x240066fc
 800e7f4:	240066e8 	.word	0x240066e8

0800e7f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b088      	sub	sp, #32
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d10b      	bne.n	800e820 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	613b      	str	r3, [r7, #16]
}
 800e81a:	bf00      	nop
 800e81c:	bf00      	nop
 800e81e:	e7fd      	b.n	800e81c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d10b      	bne.n	800e83e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	60fb      	str	r3, [r7, #12]
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	e7fd      	b.n	800e83a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e83e:	f001 f883 	bl	800f948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e842:	4b1d      	ldr	r3, [pc, #116]	@ (800e8b8 <xTaskCheckForTimeOut+0xc0>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	69ba      	ldr	r2, [r7, #24]
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e85a:	d102      	bne.n	800e862 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e85c:	2300      	movs	r3, #0
 800e85e:	61fb      	str	r3, [r7, #28]
 800e860:	e023      	b.n	800e8aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	4b15      	ldr	r3, [pc, #84]	@ (800e8bc <xTaskCheckForTimeOut+0xc4>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d007      	beq.n	800e87e <xTaskCheckForTimeOut+0x86>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	69ba      	ldr	r2, [r7, #24]
 800e874:	429a      	cmp	r2, r3
 800e876:	d302      	bcc.n	800e87e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e878:	2301      	movs	r3, #1
 800e87a:	61fb      	str	r3, [r7, #28]
 800e87c:	e015      	b.n	800e8aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	429a      	cmp	r2, r3
 800e886:	d20b      	bcs.n	800e8a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	1ad2      	subs	r2, r2, r3
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff ff99 	bl	800e7cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e89a:	2300      	movs	r3, #0
 800e89c:	61fb      	str	r3, [r7, #28]
 800e89e:	e004      	b.n	800e8aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e8aa:	f001 f87f 	bl	800f9ac <vPortExitCritical>

	return xReturn;
 800e8ae:	69fb      	ldr	r3, [r7, #28]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3720      	adds	r7, #32
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	240066e8 	.word	0x240066e8
 800e8bc:	240066fc 	.word	0x240066fc

0800e8c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e8c4:	4b03      	ldr	r3, [pc, #12]	@ (800e8d4 <vTaskMissedYield+0x14>)
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	601a      	str	r2, [r3, #0]
}
 800e8ca:	bf00      	nop
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr
 800e8d4:	240066f8 	.word	0x240066f8

0800e8d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e8e0:	f000 f852 	bl	800e988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8e4:	4b06      	ldr	r3, [pc, #24]	@ (800e900 <prvIdleTask+0x28>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d9f9      	bls.n	800e8e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e8ec:	4b05      	ldr	r3, [pc, #20]	@ (800e904 <prvIdleTask+0x2c>)
 800e8ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8fc:	e7f0      	b.n	800e8e0 <prvIdleTask+0x8>
 800e8fe:	bf00      	nop
 800e900:	24006214 	.word	0x24006214
 800e904:	e000ed04 	.word	0xe000ed04

0800e908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e90e:	2300      	movs	r3, #0
 800e910:	607b      	str	r3, [r7, #4]
 800e912:	e00c      	b.n	800e92e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	4613      	mov	r3, r2
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	4413      	add	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4a12      	ldr	r2, [pc, #72]	@ (800e968 <prvInitialiseTaskLists+0x60>)
 800e920:	4413      	add	r3, r2
 800e922:	4618      	mov	r0, r3
 800e924:	f7fe f8b2 	bl	800ca8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	3301      	adds	r3, #1
 800e92c:	607b      	str	r3, [r7, #4]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2b37      	cmp	r3, #55	@ 0x37
 800e932:	d9ef      	bls.n	800e914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e934:	480d      	ldr	r0, [pc, #52]	@ (800e96c <prvInitialiseTaskLists+0x64>)
 800e936:	f7fe f8a9 	bl	800ca8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e93a:	480d      	ldr	r0, [pc, #52]	@ (800e970 <prvInitialiseTaskLists+0x68>)
 800e93c:	f7fe f8a6 	bl	800ca8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e940:	480c      	ldr	r0, [pc, #48]	@ (800e974 <prvInitialiseTaskLists+0x6c>)
 800e942:	f7fe f8a3 	bl	800ca8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e946:	480c      	ldr	r0, [pc, #48]	@ (800e978 <prvInitialiseTaskLists+0x70>)
 800e948:	f7fe f8a0 	bl	800ca8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e94c:	480b      	ldr	r0, [pc, #44]	@ (800e97c <prvInitialiseTaskLists+0x74>)
 800e94e:	f7fe f89d 	bl	800ca8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e952:	4b0b      	ldr	r3, [pc, #44]	@ (800e980 <prvInitialiseTaskLists+0x78>)
 800e954:	4a05      	ldr	r2, [pc, #20]	@ (800e96c <prvInitialiseTaskLists+0x64>)
 800e956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e958:	4b0a      	ldr	r3, [pc, #40]	@ (800e984 <prvInitialiseTaskLists+0x7c>)
 800e95a:	4a05      	ldr	r2, [pc, #20]	@ (800e970 <prvInitialiseTaskLists+0x68>)
 800e95c:	601a      	str	r2, [r3, #0]
}
 800e95e:	bf00      	nop
 800e960:	3708      	adds	r7, #8
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	24006214 	.word	0x24006214
 800e96c:	24006674 	.word	0x24006674
 800e970:	24006688 	.word	0x24006688
 800e974:	240066a4 	.word	0x240066a4
 800e978:	240066b8 	.word	0x240066b8
 800e97c:	240066d0 	.word	0x240066d0
 800e980:	2400669c 	.word	0x2400669c
 800e984:	240066a0 	.word	0x240066a0

0800e988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e98e:	e019      	b.n	800e9c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e990:	f000 ffda 	bl	800f948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e994:	4b10      	ldr	r3, [pc, #64]	@ (800e9d8 <prvCheckTasksWaitingTermination+0x50>)
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	3304      	adds	r3, #4
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7fe f8fd 	bl	800cba0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e9dc <prvCheckTasksWaitingTermination+0x54>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	3b01      	subs	r3, #1
 800e9ac:	4a0b      	ldr	r2, [pc, #44]	@ (800e9dc <prvCheckTasksWaitingTermination+0x54>)
 800e9ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e9e0 <prvCheckTasksWaitingTermination+0x58>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	4a0a      	ldr	r2, [pc, #40]	@ (800e9e0 <prvCheckTasksWaitingTermination+0x58>)
 800e9b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e9ba:	f000 fff7 	bl	800f9ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 f810 	bl	800e9e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9c4:	4b06      	ldr	r3, [pc, #24]	@ (800e9e0 <prvCheckTasksWaitingTermination+0x58>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1e1      	bne.n	800e990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e9cc:	bf00      	nop
 800e9ce:	bf00      	nop
 800e9d0:	3708      	adds	r7, #8
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	240066b8 	.word	0x240066b8
 800e9dc:	240066e4 	.word	0x240066e4
 800e9e0:	240066cc 	.word	0x240066cc

0800e9e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	3354      	adds	r3, #84	@ 0x54
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f00c fa5d 	bl	801aeb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d108      	bne.n	800ea12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea04:	4618      	mov	r0, r3
 800ea06:	f001 f98f 	bl	800fd28 <vPortFree>
				vPortFree( pxTCB );
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f001 f98c 	bl	800fd28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea10:	e019      	b.n	800ea46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d103      	bne.n	800ea24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f001 f983 	bl	800fd28 <vPortFree>
	}
 800ea22:	e010      	b.n	800ea46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d00b      	beq.n	800ea46 <prvDeleteTCB+0x62>
	__asm volatile
 800ea2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea32:	f383 8811 	msr	BASEPRI, r3
 800ea36:	f3bf 8f6f 	isb	sy
 800ea3a:	f3bf 8f4f 	dsb	sy
 800ea3e:	60fb      	str	r3, [r7, #12]
}
 800ea40:	bf00      	nop
 800ea42:	bf00      	nop
 800ea44:	e7fd      	b.n	800ea42 <prvDeleteTCB+0x5e>
	}
 800ea46:	bf00      	nop
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
	...

0800ea50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea56:	4b0c      	ldr	r3, [pc, #48]	@ (800ea88 <prvResetNextTaskUnblockTime+0x38>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d104      	bne.n	800ea6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea60:	4b0a      	ldr	r3, [pc, #40]	@ (800ea8c <prvResetNextTaskUnblockTime+0x3c>)
 800ea62:	f04f 32ff 	mov.w	r2, #4294967295
 800ea66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea68:	e008      	b.n	800ea7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea6a:	4b07      	ldr	r3, [pc, #28]	@ (800ea88 <prvResetNextTaskUnblockTime+0x38>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	4a04      	ldr	r2, [pc, #16]	@ (800ea8c <prvResetNextTaskUnblockTime+0x3c>)
 800ea7a:	6013      	str	r3, [r2, #0]
}
 800ea7c:	bf00      	nop
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr
 800ea88:	2400669c 	.word	0x2400669c
 800ea8c:	24006704 	.word	0x24006704

0800ea90 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ea96:	4b05      	ldr	r3, [pc, #20]	@ (800eaac <xTaskGetCurrentTaskHandle+0x1c>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ea9c:	687b      	ldr	r3, [r7, #4]
	}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	370c      	adds	r7, #12
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	24006210 	.word	0x24006210

0800eab0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eab6:	4b0b      	ldr	r3, [pc, #44]	@ (800eae4 <xTaskGetSchedulerState+0x34>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d102      	bne.n	800eac4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eabe:	2301      	movs	r3, #1
 800eac0:	607b      	str	r3, [r7, #4]
 800eac2:	e008      	b.n	800ead6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eac4:	4b08      	ldr	r3, [pc, #32]	@ (800eae8 <xTaskGetSchedulerState+0x38>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d102      	bne.n	800ead2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eacc:	2302      	movs	r3, #2
 800eace:	607b      	str	r3, [r7, #4]
 800ead0:	e001      	b.n	800ead6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ead2:	2300      	movs	r3, #0
 800ead4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ead6:	687b      	ldr	r3, [r7, #4]
	}
 800ead8:	4618      	mov	r0, r3
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr
 800eae4:	240066f0 	.word	0x240066f0
 800eae8:	2400670c 	.word	0x2400670c

0800eaec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d051      	beq.n	800eba6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb06:	4b2a      	ldr	r3, [pc, #168]	@ (800ebb0 <xTaskPriorityInherit+0xc4>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d241      	bcs.n	800eb94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	699b      	ldr	r3, [r3, #24]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	db06      	blt.n	800eb26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb18:	4b25      	ldr	r3, [pc, #148]	@ (800ebb0 <xTaskPriorityInherit+0xc4>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	6959      	ldr	r1, [r3, #20]
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb2e:	4613      	mov	r3, r2
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	4413      	add	r3, r2
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	4a1f      	ldr	r2, [pc, #124]	@ (800ebb4 <xTaskPriorityInherit+0xc8>)
 800eb38:	4413      	add	r3, r2
 800eb3a:	4299      	cmp	r1, r3
 800eb3c:	d122      	bne.n	800eb84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	3304      	adds	r3, #4
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe f82c 	bl	800cba0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb48:	4b19      	ldr	r3, [pc, #100]	@ (800ebb0 <xTaskPriorityInherit+0xc4>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb56:	4b18      	ldr	r3, [pc, #96]	@ (800ebb8 <xTaskPriorityInherit+0xcc>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d903      	bls.n	800eb66 <xTaskPriorityInherit+0x7a>
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb62:	4a15      	ldr	r2, [pc, #84]	@ (800ebb8 <xTaskPriorityInherit+0xcc>)
 800eb64:	6013      	str	r3, [r2, #0]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	4413      	add	r3, r2
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	4a10      	ldr	r2, [pc, #64]	@ (800ebb4 <xTaskPriorityInherit+0xc8>)
 800eb74:	441a      	add	r2, r3
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	3304      	adds	r3, #4
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	f7fd ffb2 	bl	800cae6 <vListInsertEnd>
 800eb82:	e004      	b.n	800eb8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb84:	4b0a      	ldr	r3, [pc, #40]	@ (800ebb0 <xTaskPriorityInherit+0xc4>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	60fb      	str	r3, [r7, #12]
 800eb92:	e008      	b.n	800eba6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eb98:	4b05      	ldr	r3, [pc, #20]	@ (800ebb0 <xTaskPriorityInherit+0xc4>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d201      	bcs.n	800eba6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eba2:	2301      	movs	r3, #1
 800eba4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eba6:	68fb      	ldr	r3, [r7, #12]
	}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3710      	adds	r7, #16
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	24006210 	.word	0x24006210
 800ebb4:	24006214 	.word	0x24006214
 800ebb8:	240066ec 	.word	0x240066ec

0800ebbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b086      	sub	sp, #24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d058      	beq.n	800ec84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ebd2:	4b2f      	ldr	r3, [pc, #188]	@ (800ec90 <xTaskPriorityDisinherit+0xd4>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	693a      	ldr	r2, [r7, #16]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d00b      	beq.n	800ebf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ebdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebe0:	f383 8811 	msr	BASEPRI, r3
 800ebe4:	f3bf 8f6f 	isb	sy
 800ebe8:	f3bf 8f4f 	dsb	sy
 800ebec:	60fb      	str	r3, [r7, #12]
}
 800ebee:	bf00      	nop
 800ebf0:	bf00      	nop
 800ebf2:	e7fd      	b.n	800ebf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d10b      	bne.n	800ec14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ebfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec00:	f383 8811 	msr	BASEPRI, r3
 800ec04:	f3bf 8f6f 	isb	sy
 800ec08:	f3bf 8f4f 	dsb	sy
 800ec0c:	60bb      	str	r3, [r7, #8]
}
 800ec0e:	bf00      	nop
 800ec10:	bf00      	nop
 800ec12:	e7fd      	b.n	800ec10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec18:	1e5a      	subs	r2, r3, #1
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d02c      	beq.n	800ec84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d128      	bne.n	800ec84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	3304      	adds	r3, #4
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fd ffb2 	bl	800cba0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec54:	4b0f      	ldr	r3, [pc, #60]	@ (800ec94 <xTaskPriorityDisinherit+0xd8>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d903      	bls.n	800ec64 <xTaskPriorityDisinherit+0xa8>
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec60:	4a0c      	ldr	r2, [pc, #48]	@ (800ec94 <xTaskPriorityDisinherit+0xd8>)
 800ec62:	6013      	str	r3, [r2, #0]
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec68:	4613      	mov	r3, r2
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	4413      	add	r3, r2
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	4a09      	ldr	r2, [pc, #36]	@ (800ec98 <xTaskPriorityDisinherit+0xdc>)
 800ec72:	441a      	add	r2, r3
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	3304      	adds	r3, #4
 800ec78:	4619      	mov	r1, r3
 800ec7a:	4610      	mov	r0, r2
 800ec7c:	f7fd ff33 	bl	800cae6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec80:	2301      	movs	r3, #1
 800ec82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec84:	697b      	ldr	r3, [r7, #20]
	}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3718      	adds	r7, #24
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	24006210 	.word	0x24006210
 800ec94:	240066ec 	.word	0x240066ec
 800ec98:	24006214 	.word	0x24006214

0800ec9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b088      	sub	sp, #32
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d06c      	beq.n	800ed8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d10b      	bne.n	800ecd4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ecbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc0:	f383 8811 	msr	BASEPRI, r3
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	f3bf 8f4f 	dsb	sy
 800eccc:	60fb      	str	r3, [r7, #12]
}
 800ecce:	bf00      	nop
 800ecd0:	bf00      	nop
 800ecd2:	e7fd      	b.n	800ecd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecd8:	683a      	ldr	r2, [r7, #0]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d902      	bls.n	800ece4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	61fb      	str	r3, [r7, #28]
 800ece2:	e002      	b.n	800ecea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ece8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecee:	69fa      	ldr	r2, [r7, #28]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d04c      	beq.n	800ed8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecf8:	697a      	ldr	r2, [r7, #20]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d147      	bne.n	800ed8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ecfe:	4b26      	ldr	r3, [pc, #152]	@ (800ed98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	69ba      	ldr	r2, [r7, #24]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d10b      	bne.n	800ed20 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ed08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed0c:	f383 8811 	msr	BASEPRI, r3
 800ed10:	f3bf 8f6f 	isb	sy
 800ed14:	f3bf 8f4f 	dsb	sy
 800ed18:	60bb      	str	r3, [r7, #8]
}
 800ed1a:	bf00      	nop
 800ed1c:	bf00      	nop
 800ed1e:	e7fd      	b.n	800ed1c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	69fa      	ldr	r2, [r7, #28]
 800ed2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	699b      	ldr	r3, [r3, #24]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	db04      	blt.n	800ed3e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	6959      	ldr	r1, [r3, #20]
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	4613      	mov	r3, r2
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	4413      	add	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4a13      	ldr	r2, [pc, #76]	@ (800ed9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed4e:	4413      	add	r3, r2
 800ed50:	4299      	cmp	r1, r3
 800ed52:	d11c      	bne.n	800ed8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	3304      	adds	r3, #4
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fd ff21 	bl	800cba0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed62:	4b0f      	ldr	r3, [pc, #60]	@ (800eda0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d903      	bls.n	800ed72 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed6e:	4a0c      	ldr	r2, [pc, #48]	@ (800eda0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ed70:	6013      	str	r3, [r2, #0]
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed76:	4613      	mov	r3, r2
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	4413      	add	r3, r2
 800ed7c:	009b      	lsls	r3, r3, #2
 800ed7e:	4a07      	ldr	r2, [pc, #28]	@ (800ed9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed80:	441a      	add	r2, r3
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	3304      	adds	r3, #4
 800ed86:	4619      	mov	r1, r3
 800ed88:	4610      	mov	r0, r2
 800ed8a:	f7fd feac 	bl	800cae6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed8e:	bf00      	nop
 800ed90:	3720      	adds	r7, #32
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	24006210 	.word	0x24006210
 800ed9c:	24006214 	.word	0x24006214
 800eda0:	240066ec 	.word	0x240066ec

0800eda4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eda4:	b480      	push	{r7}
 800eda6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eda8:	4b07      	ldr	r3, [pc, #28]	@ (800edc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d004      	beq.n	800edba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800edb0:	4b05      	ldr	r3, [pc, #20]	@ (800edc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edb6:	3201      	adds	r2, #1
 800edb8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800edba:	4b03      	ldr	r3, [pc, #12]	@ (800edc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800edbc:	681b      	ldr	r3, [r3, #0]
	}
 800edbe:	4618      	mov	r0, r3
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr
 800edc8:	24006210 	.word	0x24006210

0800edcc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800edd6:	f000 fdb7 	bl	800f948 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800edda:	4b20      	ldr	r3, [pc, #128]	@ (800ee5c <ulTaskNotifyTake+0x90>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d113      	bne.n	800ee0e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ede6:	4b1d      	ldr	r3, [pc, #116]	@ (800ee5c <ulTaskNotifyTake+0x90>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00b      	beq.n	800ee0e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800edf6:	2101      	movs	r1, #1
 800edf8:	6838      	ldr	r0, [r7, #0]
 800edfa:	f000 f8c9 	bl	800ef90 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800edfe:	4b18      	ldr	r3, [pc, #96]	@ (800ee60 <ulTaskNotifyTake+0x94>)
 800ee00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee0e:	f000 fdcd 	bl	800f9ac <vPortExitCritical>

		taskENTER_CRITICAL();
 800ee12:	f000 fd99 	bl	800f948 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ee16:	4b11      	ldr	r3, [pc, #68]	@ (800ee5c <ulTaskNotifyTake+0x90>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee1e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00e      	beq.n	800ee44 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d005      	beq.n	800ee38 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ee2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ee5c <ulTaskNotifyTake+0x90>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2200      	movs	r2, #0
 800ee32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800ee36:	e005      	b.n	800ee44 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ee38:	4b08      	ldr	r3, [pc, #32]	@ (800ee5c <ulTaskNotifyTake+0x90>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	3a01      	subs	r2, #1
 800ee40:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee44:	4b05      	ldr	r3, [pc, #20]	@ (800ee5c <ulTaskNotifyTake+0x90>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ee4e:	f000 fdad 	bl	800f9ac <vPortExitCritical>

		return ulReturn;
 800ee52:	68fb      	ldr	r3, [r7, #12]
	}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3710      	adds	r7, #16
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	24006210 	.word	0x24006210
 800ee60:	e000ed04 	.word	0xe000ed04

0800ee64 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b08a      	sub	sp, #40	@ 0x28
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10b      	bne.n	800ee8c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800ee74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee78:	f383 8811 	msr	BASEPRI, r3
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	61bb      	str	r3, [r7, #24]
}
 800ee86:	bf00      	nop
 800ee88:	bf00      	nop
 800ee8a:	e7fd      	b.n	800ee88 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee8c:	f000 fe3c 	bl	800fb08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800ee94:	f3ef 8211 	mrs	r2, BASEPRI
 800ee98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee9c:	f383 8811 	msr	BASEPRI, r3
 800eea0:	f3bf 8f6f 	isb	sy
 800eea4:	f3bf 8f4f 	dsb	sy
 800eea8:	617a      	str	r2, [r7, #20]
 800eeaa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800eeac:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eeae:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800eeb6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeba:	2202      	movs	r2, #2
 800eebc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800eec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800eece:	7ffb      	ldrb	r3, [r7, #31]
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d147      	bne.n	800ef64 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800eed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d00b      	beq.n	800eef4 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800eedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	60fb      	str	r3, [r7, #12]
}
 800eeee:	bf00      	nop
 800eef0:	bf00      	nop
 800eef2:	e7fd      	b.n	800eef0 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eef4:	4b20      	ldr	r3, [pc, #128]	@ (800ef78 <vTaskNotifyGiveFromISR+0x114>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d11d      	bne.n	800ef38 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eefe:	3304      	adds	r3, #4
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fd fe4d 	bl	800cba0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef0a:	4b1c      	ldr	r3, [pc, #112]	@ (800ef7c <vTaskNotifyGiveFromISR+0x118>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d903      	bls.n	800ef1a <vTaskNotifyGiveFromISR+0xb6>
 800ef12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef16:	4a19      	ldr	r2, [pc, #100]	@ (800ef7c <vTaskNotifyGiveFromISR+0x118>)
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef1e:	4613      	mov	r3, r2
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	4413      	add	r3, r2
 800ef24:	009b      	lsls	r3, r3, #2
 800ef26:	4a16      	ldr	r2, [pc, #88]	@ (800ef80 <vTaskNotifyGiveFromISR+0x11c>)
 800ef28:	441a      	add	r2, r3
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2c:	3304      	adds	r3, #4
 800ef2e:	4619      	mov	r1, r3
 800ef30:	4610      	mov	r0, r2
 800ef32:	f7fd fdd8 	bl	800cae6 <vListInsertEnd>
 800ef36:	e005      	b.n	800ef44 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ef38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3a:	3318      	adds	r3, #24
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	4811      	ldr	r0, [pc, #68]	@ (800ef84 <vTaskNotifyGiveFromISR+0x120>)
 800ef40:	f7fd fdd1 	bl	800cae6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef48:	4b0f      	ldr	r3, [pc, #60]	@ (800ef88 <vTaskNotifyGiveFromISR+0x124>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d908      	bls.n	800ef64 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d002      	beq.n	800ef5e <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ef5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ef8c <vTaskNotifyGiveFromISR+0x128>)
 800ef60:	2201      	movs	r2, #1
 800ef62:	601a      	str	r2, [r3, #0]
 800ef64:	6a3b      	ldr	r3, [r7, #32]
 800ef66:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	f383 8811 	msr	BASEPRI, r3
}
 800ef6e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800ef70:	bf00      	nop
 800ef72:	3728      	adds	r7, #40	@ 0x28
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	2400670c 	.word	0x2400670c
 800ef7c:	240066ec 	.word	0x240066ec
 800ef80:	24006214 	.word	0x24006214
 800ef84:	240066a4 	.word	0x240066a4
 800ef88:	24006210 	.word	0x24006210
 800ef8c:	240066f8 	.word	0x240066f8

0800ef90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef9a:	4b21      	ldr	r3, [pc, #132]	@ (800f020 <prvAddCurrentTaskToDelayedList+0x90>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efa0:	4b20      	ldr	r3, [pc, #128]	@ (800f024 <prvAddCurrentTaskToDelayedList+0x94>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	3304      	adds	r3, #4
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fd fdfa 	bl	800cba0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb2:	d10a      	bne.n	800efca <prvAddCurrentTaskToDelayedList+0x3a>
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d007      	beq.n	800efca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efba:	4b1a      	ldr	r3, [pc, #104]	@ (800f024 <prvAddCurrentTaskToDelayedList+0x94>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3304      	adds	r3, #4
 800efc0:	4619      	mov	r1, r3
 800efc2:	4819      	ldr	r0, [pc, #100]	@ (800f028 <prvAddCurrentTaskToDelayedList+0x98>)
 800efc4:	f7fd fd8f 	bl	800cae6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800efc8:	e026      	b.n	800f018 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4413      	add	r3, r2
 800efd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800efd2:	4b14      	ldr	r3, [pc, #80]	@ (800f024 <prvAddCurrentTaskToDelayedList+0x94>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68ba      	ldr	r2, [r7, #8]
 800efd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800efda:	68ba      	ldr	r2, [r7, #8]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d209      	bcs.n	800eff6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efe2:	4b12      	ldr	r3, [pc, #72]	@ (800f02c <prvAddCurrentTaskToDelayedList+0x9c>)
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	4b0f      	ldr	r3, [pc, #60]	@ (800f024 <prvAddCurrentTaskToDelayedList+0x94>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	3304      	adds	r3, #4
 800efec:	4619      	mov	r1, r3
 800efee:	4610      	mov	r0, r2
 800eff0:	f7fd fd9d 	bl	800cb2e <vListInsert>
}
 800eff4:	e010      	b.n	800f018 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eff6:	4b0e      	ldr	r3, [pc, #56]	@ (800f030 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	4b0a      	ldr	r3, [pc, #40]	@ (800f024 <prvAddCurrentTaskToDelayedList+0x94>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	3304      	adds	r3, #4
 800f000:	4619      	mov	r1, r3
 800f002:	4610      	mov	r0, r2
 800f004:	f7fd fd93 	bl	800cb2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f008:	4b0a      	ldr	r3, [pc, #40]	@ (800f034 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d202      	bcs.n	800f018 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f012:	4a08      	ldr	r2, [pc, #32]	@ (800f034 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	6013      	str	r3, [r2, #0]
}
 800f018:	bf00      	nop
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	240066e8 	.word	0x240066e8
 800f024:	24006210 	.word	0x24006210
 800f028:	240066d0 	.word	0x240066d0
 800f02c:	240066a0 	.word	0x240066a0
 800f030:	2400669c 	.word	0x2400669c
 800f034:	24006704 	.word	0x24006704

0800f038 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b08a      	sub	sp, #40	@ 0x28
 800f03c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f03e:	2300      	movs	r3, #0
 800f040:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f042:	f000 fb13 	bl	800f66c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f046:	4b1d      	ldr	r3, [pc, #116]	@ (800f0bc <xTimerCreateTimerTask+0x84>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d021      	beq.n	800f092 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f04e:	2300      	movs	r3, #0
 800f050:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f052:	2300      	movs	r3, #0
 800f054:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f056:	1d3a      	adds	r2, r7, #4
 800f058:	f107 0108 	add.w	r1, r7, #8
 800f05c:	f107 030c 	add.w	r3, r7, #12
 800f060:	4618      	mov	r0, r3
 800f062:	f7fd fcf9 	bl	800ca58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f066:	6879      	ldr	r1, [r7, #4]
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	9202      	str	r2, [sp, #8]
 800f06e:	9301      	str	r3, [sp, #4]
 800f070:	2302      	movs	r3, #2
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	2300      	movs	r3, #0
 800f076:	460a      	mov	r2, r1
 800f078:	4911      	ldr	r1, [pc, #68]	@ (800f0c0 <xTimerCreateTimerTask+0x88>)
 800f07a:	4812      	ldr	r0, [pc, #72]	@ (800f0c4 <xTimerCreateTimerTask+0x8c>)
 800f07c:	f7fe fe9e 	bl	800ddbc <xTaskCreateStatic>
 800f080:	4603      	mov	r3, r0
 800f082:	4a11      	ldr	r2, [pc, #68]	@ (800f0c8 <xTimerCreateTimerTask+0x90>)
 800f084:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f086:	4b10      	ldr	r3, [pc, #64]	@ (800f0c8 <xTimerCreateTimerTask+0x90>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d001      	beq.n	800f092 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f08e:	2301      	movs	r3, #1
 800f090:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d10b      	bne.n	800f0b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f09c:	f383 8811 	msr	BASEPRI, r3
 800f0a0:	f3bf 8f6f 	isb	sy
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	613b      	str	r3, [r7, #16]
}
 800f0aa:	bf00      	nop
 800f0ac:	bf00      	nop
 800f0ae:	e7fd      	b.n	800f0ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f0b0:	697b      	ldr	r3, [r7, #20]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	24006740 	.word	0x24006740
 800f0c0:	0801bd20 	.word	0x0801bd20
 800f0c4:	0800f205 	.word	0x0800f205
 800f0c8:	24006744 	.word	0x24006744

0800f0cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b08a      	sub	sp, #40	@ 0x28
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
 800f0d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d10b      	bne.n	800f0fc <xTimerGenericCommand+0x30>
	__asm volatile
 800f0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e8:	f383 8811 	msr	BASEPRI, r3
 800f0ec:	f3bf 8f6f 	isb	sy
 800f0f0:	f3bf 8f4f 	dsb	sy
 800f0f4:	623b      	str	r3, [r7, #32]
}
 800f0f6:	bf00      	nop
 800f0f8:	bf00      	nop
 800f0fa:	e7fd      	b.n	800f0f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f0fc:	4b19      	ldr	r3, [pc, #100]	@ (800f164 <xTimerGenericCommand+0x98>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d02a      	beq.n	800f15a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	2b05      	cmp	r3, #5
 800f114:	dc18      	bgt.n	800f148 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f116:	f7ff fccb 	bl	800eab0 <xTaskGetSchedulerState>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d109      	bne.n	800f134 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f120:	4b10      	ldr	r3, [pc, #64]	@ (800f164 <xTimerGenericCommand+0x98>)
 800f122:	6818      	ldr	r0, [r3, #0]
 800f124:	f107 0110 	add.w	r1, r7, #16
 800f128:	2300      	movs	r3, #0
 800f12a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f12c:	f7fd ffce 	bl	800d0cc <xQueueGenericSend>
 800f130:	6278      	str	r0, [r7, #36]	@ 0x24
 800f132:	e012      	b.n	800f15a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f134:	4b0b      	ldr	r3, [pc, #44]	@ (800f164 <xTimerGenericCommand+0x98>)
 800f136:	6818      	ldr	r0, [r3, #0]
 800f138:	f107 0110 	add.w	r1, r7, #16
 800f13c:	2300      	movs	r3, #0
 800f13e:	2200      	movs	r2, #0
 800f140:	f7fd ffc4 	bl	800d0cc <xQueueGenericSend>
 800f144:	6278      	str	r0, [r7, #36]	@ 0x24
 800f146:	e008      	b.n	800f15a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f148:	4b06      	ldr	r3, [pc, #24]	@ (800f164 <xTimerGenericCommand+0x98>)
 800f14a:	6818      	ldr	r0, [r3, #0]
 800f14c:	f107 0110 	add.w	r1, r7, #16
 800f150:	2300      	movs	r3, #0
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	f7fe f8bc 	bl	800d2d0 <xQueueGenericSendFromISR>
 800f158:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3728      	adds	r7, #40	@ 0x28
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	24006740 	.word	0x24006740

0800f168 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b088      	sub	sp, #32
 800f16c:	af02      	add	r7, sp, #8
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f172:	4b23      	ldr	r3, [pc, #140]	@ (800f200 <prvProcessExpiredTimer+0x98>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	3304      	adds	r3, #4
 800f180:	4618      	mov	r0, r3
 800f182:	f7fd fd0d 	bl	800cba0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f18c:	f003 0304 	and.w	r3, r3, #4
 800f190:	2b00      	cmp	r3, #0
 800f192:	d023      	beq.n	800f1dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	699a      	ldr	r2, [r3, #24]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	18d1      	adds	r1, r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	683a      	ldr	r2, [r7, #0]
 800f1a0:	6978      	ldr	r0, [r7, #20]
 800f1a2:	f000 f8d5 	bl	800f350 <prvInsertTimerInActiveList>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d020      	beq.n	800f1ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	9300      	str	r3, [sp, #0]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	6978      	ldr	r0, [r7, #20]
 800f1b8:	f7ff ff88 	bl	800f0cc <xTimerGenericCommand>
 800f1bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d114      	bne.n	800f1ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c8:	f383 8811 	msr	BASEPRI, r3
 800f1cc:	f3bf 8f6f 	isb	sy
 800f1d0:	f3bf 8f4f 	dsb	sy
 800f1d4:	60fb      	str	r3, [r7, #12]
}
 800f1d6:	bf00      	nop
 800f1d8:	bf00      	nop
 800f1da:	e7fd      	b.n	800f1d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1e2:	f023 0301 	bic.w	r3, r3, #1
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	6a1b      	ldr	r3, [r3, #32]
 800f1f2:	6978      	ldr	r0, [r7, #20]
 800f1f4:	4798      	blx	r3
}
 800f1f6:	bf00      	nop
 800f1f8:	3718      	adds	r7, #24
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	24006738 	.word	0x24006738

0800f204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f20c:	f107 0308 	add.w	r3, r7, #8
 800f210:	4618      	mov	r0, r3
 800f212:	f000 f859 	bl	800f2c8 <prvGetNextExpireTime>
 800f216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	4619      	mov	r1, r3
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 f805 	bl	800f22c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f222:	f000 f8d7 	bl	800f3d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f226:	bf00      	nop
 800f228:	e7f0      	b.n	800f20c <prvTimerTask+0x8>
	...

0800f22c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f236:	f7ff f825 	bl	800e284 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f23a:	f107 0308 	add.w	r3, r7, #8
 800f23e:	4618      	mov	r0, r3
 800f240:	f000 f866 	bl	800f310 <prvSampleTimeNow>
 800f244:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d130      	bne.n	800f2ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d10a      	bne.n	800f268 <prvProcessTimerOrBlockTask+0x3c>
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	429a      	cmp	r2, r3
 800f258:	d806      	bhi.n	800f268 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f25a:	f7ff f821 	bl	800e2a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f25e:	68f9      	ldr	r1, [r7, #12]
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7ff ff81 	bl	800f168 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f266:	e024      	b.n	800f2b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d008      	beq.n	800f280 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f26e:	4b13      	ldr	r3, [pc, #76]	@ (800f2bc <prvProcessTimerOrBlockTask+0x90>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d101      	bne.n	800f27c <prvProcessTimerOrBlockTask+0x50>
 800f278:	2301      	movs	r3, #1
 800f27a:	e000      	b.n	800f27e <prvProcessTimerOrBlockTask+0x52>
 800f27c:	2300      	movs	r3, #0
 800f27e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f280:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c0 <prvProcessTimerOrBlockTask+0x94>)
 800f282:	6818      	ldr	r0, [r3, #0]
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	683a      	ldr	r2, [r7, #0]
 800f28c:	4619      	mov	r1, r3
 800f28e:	f7fe fd61 	bl	800dd54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f292:	f7ff f805 	bl	800e2a0 <xTaskResumeAll>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10a      	bne.n	800f2b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f29c:	4b09      	ldr	r3, [pc, #36]	@ (800f2c4 <prvProcessTimerOrBlockTask+0x98>)
 800f29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2a2:	601a      	str	r2, [r3, #0]
 800f2a4:	f3bf 8f4f 	dsb	sy
 800f2a8:	f3bf 8f6f 	isb	sy
}
 800f2ac:	e001      	b.n	800f2b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2ae:	f7fe fff7 	bl	800e2a0 <xTaskResumeAll>
}
 800f2b2:	bf00      	nop
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	2400673c 	.word	0x2400673c
 800f2c0:	24006740 	.word	0x24006740
 800f2c4:	e000ed04 	.word	0xe000ed04

0800f2c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f2d0:	4b0e      	ldr	r3, [pc, #56]	@ (800f30c <prvGetNextExpireTime+0x44>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <prvGetNextExpireTime+0x16>
 800f2da:	2201      	movs	r2, #1
 800f2dc:	e000      	b.n	800f2e0 <prvGetNextExpireTime+0x18>
 800f2de:	2200      	movs	r2, #0
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d105      	bne.n	800f2f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2ec:	4b07      	ldr	r3, [pc, #28]	@ (800f30c <prvGetNextExpireTime+0x44>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	60fb      	str	r3, [r7, #12]
 800f2f6:	e001      	b.n	800f2fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	24006738 	.word	0x24006738

0800f310 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f318:	f7ff f860 	bl	800e3dc <xTaskGetTickCount>
 800f31c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f31e:	4b0b      	ldr	r3, [pc, #44]	@ (800f34c <prvSampleTimeNow+0x3c>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	429a      	cmp	r2, r3
 800f326:	d205      	bcs.n	800f334 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f328:	f000 f93a 	bl	800f5a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	601a      	str	r2, [r3, #0]
 800f332:	e002      	b.n	800f33a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f33a:	4a04      	ldr	r2, [pc, #16]	@ (800f34c <prvSampleTimeNow+0x3c>)
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f340:	68fb      	ldr	r3, [r7, #12]
}
 800f342:	4618      	mov	r0, r3
 800f344:	3710      	adds	r7, #16
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	24006748 	.word	0x24006748

0800f350 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b086      	sub	sp, #24
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
 800f35c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f35e:	2300      	movs	r3, #0
 800f360:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	68ba      	ldr	r2, [r7, #8]
 800f366:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	68fa      	ldr	r2, [r7, #12]
 800f36c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f36e:	68ba      	ldr	r2, [r7, #8]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	429a      	cmp	r2, r3
 800f374:	d812      	bhi.n	800f39c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	1ad2      	subs	r2, r2, r3
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	699b      	ldr	r3, [r3, #24]
 800f380:	429a      	cmp	r2, r3
 800f382:	d302      	bcc.n	800f38a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f384:	2301      	movs	r3, #1
 800f386:	617b      	str	r3, [r7, #20]
 800f388:	e01b      	b.n	800f3c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f38a:	4b10      	ldr	r3, [pc, #64]	@ (800f3cc <prvInsertTimerInActiveList+0x7c>)
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	3304      	adds	r3, #4
 800f392:	4619      	mov	r1, r3
 800f394:	4610      	mov	r0, r2
 800f396:	f7fd fbca 	bl	800cb2e <vListInsert>
 800f39a:	e012      	b.n	800f3c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d206      	bcs.n	800f3b2 <prvInsertTimerInActiveList+0x62>
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d302      	bcc.n	800f3b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	617b      	str	r3, [r7, #20]
 800f3b0:	e007      	b.n	800f3c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3b2:	4b07      	ldr	r3, [pc, #28]	@ (800f3d0 <prvInsertTimerInActiveList+0x80>)
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	4610      	mov	r0, r2
 800f3be:	f7fd fbb6 	bl	800cb2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f3c2:	697b      	ldr	r3, [r7, #20]
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3718      	adds	r7, #24
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	2400673c 	.word	0x2400673c
 800f3d0:	24006738 	.word	0x24006738

0800f3d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b08e      	sub	sp, #56	@ 0x38
 800f3d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3da:	e0ce      	b.n	800f57a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	da19      	bge.n	800f416 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f3e2:	1d3b      	adds	r3, r7, #4
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d10b      	bne.n	800f406 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f2:	f383 8811 	msr	BASEPRI, r3
 800f3f6:	f3bf 8f6f 	isb	sy
 800f3fa:	f3bf 8f4f 	dsb	sy
 800f3fe:	61fb      	str	r3, [r7, #28]
}
 800f400:	bf00      	nop
 800f402:	bf00      	nop
 800f404:	e7fd      	b.n	800f402 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f40c:	6850      	ldr	r0, [r2, #4]
 800f40e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f410:	6892      	ldr	r2, [r2, #8]
 800f412:	4611      	mov	r1, r2
 800f414:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f2c0 80ae 	blt.w	800f57a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f424:	695b      	ldr	r3, [r3, #20]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d004      	beq.n	800f434 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42c:	3304      	adds	r3, #4
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fd fbb6 	bl	800cba0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f434:	463b      	mov	r3, r7
 800f436:	4618      	mov	r0, r3
 800f438:	f7ff ff6a 	bl	800f310 <prvSampleTimeNow>
 800f43c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b09      	cmp	r3, #9
 800f442:	f200 8097 	bhi.w	800f574 <prvProcessReceivedCommands+0x1a0>
 800f446:	a201      	add	r2, pc, #4	@ (adr r2, 800f44c <prvProcessReceivedCommands+0x78>)
 800f448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f44c:	0800f475 	.word	0x0800f475
 800f450:	0800f475 	.word	0x0800f475
 800f454:	0800f475 	.word	0x0800f475
 800f458:	0800f4eb 	.word	0x0800f4eb
 800f45c:	0800f4ff 	.word	0x0800f4ff
 800f460:	0800f54b 	.word	0x0800f54b
 800f464:	0800f475 	.word	0x0800f475
 800f468:	0800f475 	.word	0x0800f475
 800f46c:	0800f4eb 	.word	0x0800f4eb
 800f470:	0800f4ff 	.word	0x0800f4ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f476:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f47a:	f043 0301 	orr.w	r3, r3, #1
 800f47e:	b2da      	uxtb	r2, r3
 800f480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f482:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f48a:	699b      	ldr	r3, [r3, #24]
 800f48c:	18d1      	adds	r1, r2, r3
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f494:	f7ff ff5c 	bl	800f350 <prvInsertTimerInActiveList>
 800f498:	4603      	mov	r3, r0
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d06c      	beq.n	800f578 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a0:	6a1b      	ldr	r3, [r3, #32]
 800f4a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4ac:	f003 0304 	and.w	r3, r3, #4
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d061      	beq.n	800f578 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b8:	699b      	ldr	r3, [r3, #24]
 800f4ba:	441a      	add	r2, r3
 800f4bc:	2300      	movs	r3, #0
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4c6:	f7ff fe01 	bl	800f0cc <xTimerGenericCommand>
 800f4ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d152      	bne.n	800f578 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	61bb      	str	r3, [r7, #24]
}
 800f4e4:	bf00      	nop
 800f4e6:	bf00      	nop
 800f4e8:	e7fd      	b.n	800f4e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4f0:	f023 0301 	bic.w	r3, r3, #1
 800f4f4:	b2da      	uxtb	r2, r3
 800f4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f4fc:	e03d      	b.n	800f57a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f500:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f504:	f043 0301 	orr.w	r3, r3, #1
 800f508:	b2da      	uxtb	r2, r3
 800f50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f50c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f510:	68ba      	ldr	r2, [r7, #8]
 800f512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f514:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f518:	699b      	ldr	r3, [r3, #24]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10b      	bne.n	800f536 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	617b      	str	r3, [r7, #20]
}
 800f530:	bf00      	nop
 800f532:	bf00      	nop
 800f534:	e7fd      	b.n	800f532 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f538:	699a      	ldr	r2, [r3, #24]
 800f53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f53c:	18d1      	adds	r1, r2, r3
 800f53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f544:	f7ff ff04 	bl	800f350 <prvInsertTimerInActiveList>
					break;
 800f548:	e017      	b.n	800f57a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f54c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f550:	f003 0302 	and.w	r3, r3, #2
 800f554:	2b00      	cmp	r3, #0
 800f556:	d103      	bne.n	800f560 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f55a:	f000 fbe5 	bl	800fd28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f55e:	e00c      	b.n	800f57a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f562:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f566:	f023 0301 	bic.w	r3, r3, #1
 800f56a:	b2da      	uxtb	r2, r3
 800f56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f572:	e002      	b.n	800f57a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f574:	bf00      	nop
 800f576:	e000      	b.n	800f57a <prvProcessReceivedCommands+0x1a6>
					break;
 800f578:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f57a:	4b08      	ldr	r3, [pc, #32]	@ (800f59c <prvProcessReceivedCommands+0x1c8>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	1d39      	adds	r1, r7, #4
 800f580:	2200      	movs	r2, #0
 800f582:	4618      	mov	r0, r3
 800f584:	f7fd ffd2 	bl	800d52c <xQueueReceive>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f47f af26 	bne.w	800f3dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f590:	bf00      	nop
 800f592:	bf00      	nop
 800f594:	3730      	adds	r7, #48	@ 0x30
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	24006740 	.word	0x24006740

0800f5a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b088      	sub	sp, #32
 800f5a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5a6:	e049      	b.n	800f63c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5a8:	4b2e      	ldr	r3, [pc, #184]	@ (800f664 <prvSwitchTimerLists+0xc4>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5b2:	4b2c      	ldr	r3, [pc, #176]	@ (800f664 <prvSwitchTimerLists+0xc4>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	68db      	ldr	r3, [r3, #12]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	3304      	adds	r3, #4
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fd faed 	bl	800cba0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6a1b      	ldr	r3, [r3, #32]
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5d4:	f003 0304 	and.w	r3, r3, #4
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d02f      	beq.n	800f63c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	699b      	ldr	r3, [r3, #24]
 800f5e0:	693a      	ldr	r2, [r7, #16]
 800f5e2:	4413      	add	r3, r2
 800f5e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f5e6:	68ba      	ldr	r2, [r7, #8]
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d90e      	bls.n	800f60c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5fa:	4b1a      	ldr	r3, [pc, #104]	@ (800f664 <prvSwitchTimerLists+0xc4>)
 800f5fc:	681a      	ldr	r2, [r3, #0]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3304      	adds	r3, #4
 800f602:	4619      	mov	r1, r3
 800f604:	4610      	mov	r0, r2
 800f606:	f7fd fa92 	bl	800cb2e <vListInsert>
 800f60a:	e017      	b.n	800f63c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f60c:	2300      	movs	r3, #0
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	2300      	movs	r3, #0
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	2100      	movs	r1, #0
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f7ff fd58 	bl	800f0cc <xTimerGenericCommand>
 800f61c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d10b      	bne.n	800f63c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f628:	f383 8811 	msr	BASEPRI, r3
 800f62c:	f3bf 8f6f 	isb	sy
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	603b      	str	r3, [r7, #0]
}
 800f636:	bf00      	nop
 800f638:	bf00      	nop
 800f63a:	e7fd      	b.n	800f638 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f63c:	4b09      	ldr	r3, [pc, #36]	@ (800f664 <prvSwitchTimerLists+0xc4>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1b0      	bne.n	800f5a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f646:	4b07      	ldr	r3, [pc, #28]	@ (800f664 <prvSwitchTimerLists+0xc4>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f64c:	4b06      	ldr	r3, [pc, #24]	@ (800f668 <prvSwitchTimerLists+0xc8>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a04      	ldr	r2, [pc, #16]	@ (800f664 <prvSwitchTimerLists+0xc4>)
 800f652:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f654:	4a04      	ldr	r2, [pc, #16]	@ (800f668 <prvSwitchTimerLists+0xc8>)
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	6013      	str	r3, [r2, #0]
}
 800f65a:	bf00      	nop
 800f65c:	3718      	adds	r7, #24
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	24006738 	.word	0x24006738
 800f668:	2400673c 	.word	0x2400673c

0800f66c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f672:	f000 f969 	bl	800f948 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f676:	4b15      	ldr	r3, [pc, #84]	@ (800f6cc <prvCheckForValidListAndQueue+0x60>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d120      	bne.n	800f6c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f67e:	4814      	ldr	r0, [pc, #80]	@ (800f6d0 <prvCheckForValidListAndQueue+0x64>)
 800f680:	f7fd fa04 	bl	800ca8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f684:	4813      	ldr	r0, [pc, #76]	@ (800f6d4 <prvCheckForValidListAndQueue+0x68>)
 800f686:	f7fd fa01 	bl	800ca8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f68a:	4b13      	ldr	r3, [pc, #76]	@ (800f6d8 <prvCheckForValidListAndQueue+0x6c>)
 800f68c:	4a10      	ldr	r2, [pc, #64]	@ (800f6d0 <prvCheckForValidListAndQueue+0x64>)
 800f68e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f690:	4b12      	ldr	r3, [pc, #72]	@ (800f6dc <prvCheckForValidListAndQueue+0x70>)
 800f692:	4a10      	ldr	r2, [pc, #64]	@ (800f6d4 <prvCheckForValidListAndQueue+0x68>)
 800f694:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f696:	2300      	movs	r3, #0
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	4b11      	ldr	r3, [pc, #68]	@ (800f6e0 <prvCheckForValidListAndQueue+0x74>)
 800f69c:	4a11      	ldr	r2, [pc, #68]	@ (800f6e4 <prvCheckForValidListAndQueue+0x78>)
 800f69e:	2110      	movs	r1, #16
 800f6a0:	200a      	movs	r0, #10
 800f6a2:	f7fd fb11 	bl	800ccc8 <xQueueGenericCreateStatic>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	4a08      	ldr	r2, [pc, #32]	@ (800f6cc <prvCheckForValidListAndQueue+0x60>)
 800f6aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f6ac:	4b07      	ldr	r3, [pc, #28]	@ (800f6cc <prvCheckForValidListAndQueue+0x60>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d005      	beq.n	800f6c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f6b4:	4b05      	ldr	r3, [pc, #20]	@ (800f6cc <prvCheckForValidListAndQueue+0x60>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	490b      	ldr	r1, [pc, #44]	@ (800f6e8 <prvCheckForValidListAndQueue+0x7c>)
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fe faf6 	bl	800dcac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6c0:	f000 f974 	bl	800f9ac <vPortExitCritical>
}
 800f6c4:	bf00      	nop
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	24006740 	.word	0x24006740
 800f6d0:	24006710 	.word	0x24006710
 800f6d4:	24006724 	.word	0x24006724
 800f6d8:	24006738 	.word	0x24006738
 800f6dc:	2400673c 	.word	0x2400673c
 800f6e0:	240067ec 	.word	0x240067ec
 800f6e4:	2400674c 	.word	0x2400674c
 800f6e8:	0801bd28 	.word	0x0801bd28

0800f6ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b085      	sub	sp, #20
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	3b04      	subs	r3, #4
 800f6fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3b04      	subs	r3, #4
 800f70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	f023 0201 	bic.w	r2, r3, #1
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	3b04      	subs	r3, #4
 800f71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f71c:	4a0c      	ldr	r2, [pc, #48]	@ (800f750 <pxPortInitialiseStack+0x64>)
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3b14      	subs	r3, #20
 800f726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	3b04      	subs	r3, #4
 800f732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f06f 0202 	mvn.w	r2, #2
 800f73a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	3b20      	subs	r3, #32
 800f740:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f742:	68fb      	ldr	r3, [r7, #12]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3714      	adds	r7, #20
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr
 800f750:	0800f755 	.word	0x0800f755

0800f754 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f75a:	2300      	movs	r3, #0
 800f75c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f75e:	4b13      	ldr	r3, [pc, #76]	@ (800f7ac <prvTaskExitError+0x58>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f766:	d00b      	beq.n	800f780 <prvTaskExitError+0x2c>
	__asm volatile
 800f768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f76c:	f383 8811 	msr	BASEPRI, r3
 800f770:	f3bf 8f6f 	isb	sy
 800f774:	f3bf 8f4f 	dsb	sy
 800f778:	60fb      	str	r3, [r7, #12]
}
 800f77a:	bf00      	nop
 800f77c:	bf00      	nop
 800f77e:	e7fd      	b.n	800f77c <prvTaskExitError+0x28>
	__asm volatile
 800f780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f784:	f383 8811 	msr	BASEPRI, r3
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	f3bf 8f4f 	dsb	sy
 800f790:	60bb      	str	r3, [r7, #8]
}
 800f792:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f794:	bf00      	nop
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d0fc      	beq.n	800f796 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f79c:	bf00      	nop
 800f79e:	bf00      	nop
 800f7a0:	3714      	adds	r7, #20
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	240049e4 	.word	0x240049e4

0800f7b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f7b0:	4b07      	ldr	r3, [pc, #28]	@ (800f7d0 <pxCurrentTCBConst2>)
 800f7b2:	6819      	ldr	r1, [r3, #0]
 800f7b4:	6808      	ldr	r0, [r1, #0]
 800f7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ba:	f380 8809 	msr	PSP, r0
 800f7be:	f3bf 8f6f 	isb	sy
 800f7c2:	f04f 0000 	mov.w	r0, #0
 800f7c6:	f380 8811 	msr	BASEPRI, r0
 800f7ca:	4770      	bx	lr
 800f7cc:	f3af 8000 	nop.w

0800f7d0 <pxCurrentTCBConst2>:
 800f7d0:	24006210 	.word	0x24006210
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop

0800f7d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7d8:	4808      	ldr	r0, [pc, #32]	@ (800f7fc <prvPortStartFirstTask+0x24>)
 800f7da:	6800      	ldr	r0, [r0, #0]
 800f7dc:	6800      	ldr	r0, [r0, #0]
 800f7de:	f380 8808 	msr	MSP, r0
 800f7e2:	f04f 0000 	mov.w	r0, #0
 800f7e6:	f380 8814 	msr	CONTROL, r0
 800f7ea:	b662      	cpsie	i
 800f7ec:	b661      	cpsie	f
 800f7ee:	f3bf 8f4f 	dsb	sy
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	df00      	svc	0
 800f7f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7fa:	bf00      	nop
 800f7fc:	e000ed08 	.word	0xe000ed08

0800f800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b086      	sub	sp, #24
 800f804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f806:	4b47      	ldr	r3, [pc, #284]	@ (800f924 <xPortStartScheduler+0x124>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a47      	ldr	r2, [pc, #284]	@ (800f928 <xPortStartScheduler+0x128>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d10b      	bne.n	800f828 <xPortStartScheduler+0x28>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	60fb      	str	r3, [r7, #12]
}
 800f822:	bf00      	nop
 800f824:	bf00      	nop
 800f826:	e7fd      	b.n	800f824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f828:	4b3e      	ldr	r3, [pc, #248]	@ (800f924 <xPortStartScheduler+0x124>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	4a3f      	ldr	r2, [pc, #252]	@ (800f92c <xPortStartScheduler+0x12c>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d10b      	bne.n	800f84a <xPortStartScheduler+0x4a>
	__asm volatile
 800f832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f836:	f383 8811 	msr	BASEPRI, r3
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	613b      	str	r3, [r7, #16]
}
 800f844:	bf00      	nop
 800f846:	bf00      	nop
 800f848:	e7fd      	b.n	800f846 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f84a:	4b39      	ldr	r3, [pc, #228]	@ (800f930 <xPortStartScheduler+0x130>)
 800f84c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	b2db      	uxtb	r3, r3
 800f854:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	22ff      	movs	r2, #255	@ 0xff
 800f85a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	b2db      	uxtb	r3, r3
 800f862:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f864:	78fb      	ldrb	r3, [r7, #3]
 800f866:	b2db      	uxtb	r3, r3
 800f868:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f86c:	b2da      	uxtb	r2, r3
 800f86e:	4b31      	ldr	r3, [pc, #196]	@ (800f934 <xPortStartScheduler+0x134>)
 800f870:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f872:	4b31      	ldr	r3, [pc, #196]	@ (800f938 <xPortStartScheduler+0x138>)
 800f874:	2207      	movs	r2, #7
 800f876:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f878:	e009      	b.n	800f88e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f87a:	4b2f      	ldr	r3, [pc, #188]	@ (800f938 <xPortStartScheduler+0x138>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	3b01      	subs	r3, #1
 800f880:	4a2d      	ldr	r2, [pc, #180]	@ (800f938 <xPortStartScheduler+0x138>)
 800f882:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f884:	78fb      	ldrb	r3, [r7, #3]
 800f886:	b2db      	uxtb	r3, r3
 800f888:	005b      	lsls	r3, r3, #1
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f88e:	78fb      	ldrb	r3, [r7, #3]
 800f890:	b2db      	uxtb	r3, r3
 800f892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f896:	2b80      	cmp	r3, #128	@ 0x80
 800f898:	d0ef      	beq.n	800f87a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f89a:	4b27      	ldr	r3, [pc, #156]	@ (800f938 <xPortStartScheduler+0x138>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f1c3 0307 	rsb	r3, r3, #7
 800f8a2:	2b04      	cmp	r3, #4
 800f8a4:	d00b      	beq.n	800f8be <xPortStartScheduler+0xbe>
	__asm volatile
 800f8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8aa:	f383 8811 	msr	BASEPRI, r3
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f3bf 8f4f 	dsb	sy
 800f8b6:	60bb      	str	r3, [r7, #8]
}
 800f8b8:	bf00      	nop
 800f8ba:	bf00      	nop
 800f8bc:	e7fd      	b.n	800f8ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f8be:	4b1e      	ldr	r3, [pc, #120]	@ (800f938 <xPortStartScheduler+0x138>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	021b      	lsls	r3, r3, #8
 800f8c4:	4a1c      	ldr	r2, [pc, #112]	@ (800f938 <xPortStartScheduler+0x138>)
 800f8c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8c8:	4b1b      	ldr	r3, [pc, #108]	@ (800f938 <xPortStartScheduler+0x138>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f8d0:	4a19      	ldr	r2, [pc, #100]	@ (800f938 <xPortStartScheduler+0x138>)
 800f8d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f8dc:	4b17      	ldr	r3, [pc, #92]	@ (800f93c <xPortStartScheduler+0x13c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a16      	ldr	r2, [pc, #88]	@ (800f93c <xPortStartScheduler+0x13c>)
 800f8e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f8e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f8e8:	4b14      	ldr	r3, [pc, #80]	@ (800f93c <xPortStartScheduler+0x13c>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a13      	ldr	r2, [pc, #76]	@ (800f93c <xPortStartScheduler+0x13c>)
 800f8ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f8f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f8f4:	f000 f8da 	bl	800faac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f8f8:	4b11      	ldr	r3, [pc, #68]	@ (800f940 <xPortStartScheduler+0x140>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f8fe:	f000 f8f9 	bl	800faf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f902:	4b10      	ldr	r3, [pc, #64]	@ (800f944 <xPortStartScheduler+0x144>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4a0f      	ldr	r2, [pc, #60]	@ (800f944 <xPortStartScheduler+0x144>)
 800f908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f90c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f90e:	f7ff ff63 	bl	800f7d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f912:	f7fe fe3f 	bl	800e594 <vTaskSwitchContext>
	prvTaskExitError();
 800f916:	f7ff ff1d 	bl	800f754 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f91a:	2300      	movs	r3, #0
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3718      	adds	r7, #24
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	e000ed00 	.word	0xe000ed00
 800f928:	410fc271 	.word	0x410fc271
 800f92c:	410fc270 	.word	0x410fc270
 800f930:	e000e400 	.word	0xe000e400
 800f934:	2400683c 	.word	0x2400683c
 800f938:	24006840 	.word	0x24006840
 800f93c:	e000ed20 	.word	0xe000ed20
 800f940:	240049e4 	.word	0x240049e4
 800f944:	e000ef34 	.word	0xe000ef34

0800f948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	607b      	str	r3, [r7, #4]
}
 800f960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f962:	4b10      	ldr	r3, [pc, #64]	@ (800f9a4 <vPortEnterCritical+0x5c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	3301      	adds	r3, #1
 800f968:	4a0e      	ldr	r2, [pc, #56]	@ (800f9a4 <vPortEnterCritical+0x5c>)
 800f96a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f96c:	4b0d      	ldr	r3, [pc, #52]	@ (800f9a4 <vPortEnterCritical+0x5c>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b01      	cmp	r3, #1
 800f972:	d110      	bne.n	800f996 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f974:	4b0c      	ldr	r3, [pc, #48]	@ (800f9a8 <vPortEnterCritical+0x60>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00b      	beq.n	800f996 <vPortEnterCritical+0x4e>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	603b      	str	r3, [r7, #0]
}
 800f990:	bf00      	nop
 800f992:	bf00      	nop
 800f994:	e7fd      	b.n	800f992 <vPortEnterCritical+0x4a>
	}
}
 800f996:	bf00      	nop
 800f998:	370c      	adds	r7, #12
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	240049e4 	.word	0x240049e4
 800f9a8:	e000ed04 	.word	0xe000ed04

0800f9ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f9b2:	4b12      	ldr	r3, [pc, #72]	@ (800f9fc <vPortExitCritical+0x50>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d10b      	bne.n	800f9d2 <vPortExitCritical+0x26>
	__asm volatile
 800f9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	607b      	str	r3, [r7, #4]
}
 800f9cc:	bf00      	nop
 800f9ce:	bf00      	nop
 800f9d0:	e7fd      	b.n	800f9ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f9fc <vPortExitCritical+0x50>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	3b01      	subs	r3, #1
 800f9d8:	4a08      	ldr	r2, [pc, #32]	@ (800f9fc <vPortExitCritical+0x50>)
 800f9da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f9dc:	4b07      	ldr	r3, [pc, #28]	@ (800f9fc <vPortExitCritical+0x50>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d105      	bne.n	800f9f0 <vPortExitCritical+0x44>
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	f383 8811 	msr	BASEPRI, r3
}
 800f9ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f9f0:	bf00      	nop
 800f9f2:	370c      	adds	r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr
 800f9fc:	240049e4 	.word	0x240049e4

0800fa00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa00:	f3ef 8009 	mrs	r0, PSP
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	4b15      	ldr	r3, [pc, #84]	@ (800fa60 <pxCurrentTCBConst>)
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	f01e 0f10 	tst.w	lr, #16
 800fa10:	bf08      	it	eq
 800fa12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1a:	6010      	str	r0, [r2, #0]
 800fa1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fa24:	f380 8811 	msr	BASEPRI, r0
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	f3bf 8f6f 	isb	sy
 800fa30:	f7fe fdb0 	bl	800e594 <vTaskSwitchContext>
 800fa34:	f04f 0000 	mov.w	r0, #0
 800fa38:	f380 8811 	msr	BASEPRI, r0
 800fa3c:	bc09      	pop	{r0, r3}
 800fa3e:	6819      	ldr	r1, [r3, #0]
 800fa40:	6808      	ldr	r0, [r1, #0]
 800fa42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa46:	f01e 0f10 	tst.w	lr, #16
 800fa4a:	bf08      	it	eq
 800fa4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa50:	f380 8809 	msr	PSP, r0
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop
 800fa5c:	f3af 8000 	nop.w

0800fa60 <pxCurrentTCBConst>:
 800fa60:	24006210 	.word	0x24006210
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa64:	bf00      	nop
 800fa66:	bf00      	nop

0800fa68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa72:	f383 8811 	msr	BASEPRI, r3
 800fa76:	f3bf 8f6f 	isb	sy
 800fa7a:	f3bf 8f4f 	dsb	sy
 800fa7e:	607b      	str	r3, [r7, #4]
}
 800fa80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa82:	f7fe fccd 	bl	800e420 <xTaskIncrementTick>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d003      	beq.n	800fa94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa8c:	4b06      	ldr	r3, [pc, #24]	@ (800faa8 <xPortSysTickHandler+0x40>)
 800fa8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa92:	601a      	str	r2, [r3, #0]
 800fa94:	2300      	movs	r3, #0
 800fa96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	f383 8811 	msr	BASEPRI, r3
}
 800fa9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800faa0:	bf00      	nop
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	e000ed04 	.word	0xe000ed04

0800faac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800faac:	b480      	push	{r7}
 800faae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fab0:	4b0b      	ldr	r3, [pc, #44]	@ (800fae0 <vPortSetupTimerInterrupt+0x34>)
 800fab2:	2200      	movs	r2, #0
 800fab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fab6:	4b0b      	ldr	r3, [pc, #44]	@ (800fae4 <vPortSetupTimerInterrupt+0x38>)
 800fab8:	2200      	movs	r2, #0
 800faba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fabc:	4b0a      	ldr	r3, [pc, #40]	@ (800fae8 <vPortSetupTimerInterrupt+0x3c>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4a0a      	ldr	r2, [pc, #40]	@ (800faec <vPortSetupTimerInterrupt+0x40>)
 800fac2:	fba2 2303 	umull	r2, r3, r2, r3
 800fac6:	099b      	lsrs	r3, r3, #6
 800fac8:	4a09      	ldr	r2, [pc, #36]	@ (800faf0 <vPortSetupTimerInterrupt+0x44>)
 800faca:	3b01      	subs	r3, #1
 800facc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800face:	4b04      	ldr	r3, [pc, #16]	@ (800fae0 <vPortSetupTimerInterrupt+0x34>)
 800fad0:	2207      	movs	r2, #7
 800fad2:	601a      	str	r2, [r3, #0]
}
 800fad4:	bf00      	nop
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop
 800fae0:	e000e010 	.word	0xe000e010
 800fae4:	e000e018 	.word	0xe000e018
 800fae8:	240049c0 	.word	0x240049c0
 800faec:	10624dd3 	.word	0x10624dd3
 800faf0:	e000e014 	.word	0xe000e014

0800faf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800faf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fb04 <vPortEnableVFP+0x10>
 800faf8:	6801      	ldr	r1, [r0, #0]
 800fafa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fafe:	6001      	str	r1, [r0, #0]
 800fb00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb02:	bf00      	nop
 800fb04:	e000ed88 	.word	0xe000ed88

0800fb08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb0e:	f3ef 8305 	mrs	r3, IPSR
 800fb12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2b0f      	cmp	r3, #15
 800fb18:	d915      	bls.n	800fb46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb1a:	4a18      	ldr	r2, [pc, #96]	@ (800fb7c <vPortValidateInterruptPriority+0x74>)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	4413      	add	r3, r2
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb24:	4b16      	ldr	r3, [pc, #88]	@ (800fb80 <vPortValidateInterruptPriority+0x78>)
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	7afa      	ldrb	r2, [r7, #11]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d20b      	bcs.n	800fb46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb32:	f383 8811 	msr	BASEPRI, r3
 800fb36:	f3bf 8f6f 	isb	sy
 800fb3a:	f3bf 8f4f 	dsb	sy
 800fb3e:	607b      	str	r3, [r7, #4]
}
 800fb40:	bf00      	nop
 800fb42:	bf00      	nop
 800fb44:	e7fd      	b.n	800fb42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb46:	4b0f      	ldr	r3, [pc, #60]	@ (800fb84 <vPortValidateInterruptPriority+0x7c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fb4e:	4b0e      	ldr	r3, [pc, #56]	@ (800fb88 <vPortValidateInterruptPriority+0x80>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d90b      	bls.n	800fb6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	603b      	str	r3, [r7, #0]
}
 800fb68:	bf00      	nop
 800fb6a:	bf00      	nop
 800fb6c:	e7fd      	b.n	800fb6a <vPortValidateInterruptPriority+0x62>
	}
 800fb6e:	bf00      	nop
 800fb70:	3714      	adds	r7, #20
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	e000e3f0 	.word	0xe000e3f0
 800fb80:	2400683c 	.word	0x2400683c
 800fb84:	e000ed0c 	.word	0xe000ed0c
 800fb88:	24006840 	.word	0x24006840

0800fb8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b08a      	sub	sp, #40	@ 0x28
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb94:	2300      	movs	r3, #0
 800fb96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb98:	f7fe fb74 	bl	800e284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb9c:	4b5c      	ldr	r3, [pc, #368]	@ (800fd10 <pvPortMalloc+0x184>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fba4:	f000 f924 	bl	800fdf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fba8:	4b5a      	ldr	r3, [pc, #360]	@ (800fd14 <pvPortMalloc+0x188>)
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4013      	ands	r3, r2
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f040 8095 	bne.w	800fce0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d01e      	beq.n	800fbfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fbbc:	2208      	movs	r2, #8
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f003 0307 	and.w	r3, r3, #7
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d015      	beq.n	800fbfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f023 0307 	bic.w	r3, r3, #7
 800fbd4:	3308      	adds	r3, #8
 800fbd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f003 0307 	and.w	r3, r3, #7
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00b      	beq.n	800fbfa <pvPortMalloc+0x6e>
	__asm volatile
 800fbe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe6:	f383 8811 	msr	BASEPRI, r3
 800fbea:	f3bf 8f6f 	isb	sy
 800fbee:	f3bf 8f4f 	dsb	sy
 800fbf2:	617b      	str	r3, [r7, #20]
}
 800fbf4:	bf00      	nop
 800fbf6:	bf00      	nop
 800fbf8:	e7fd      	b.n	800fbf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d06f      	beq.n	800fce0 <pvPortMalloc+0x154>
 800fc00:	4b45      	ldr	r3, [pc, #276]	@ (800fd18 <pvPortMalloc+0x18c>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d86a      	bhi.n	800fce0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc0a:	4b44      	ldr	r3, [pc, #272]	@ (800fd1c <pvPortMalloc+0x190>)
 800fc0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc0e:	4b43      	ldr	r3, [pc, #268]	@ (800fd1c <pvPortMalloc+0x190>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc14:	e004      	b.n	800fc20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d903      	bls.n	800fc32 <pvPortMalloc+0xa6>
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1f1      	bne.n	800fc16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc32:	4b37      	ldr	r3, [pc, #220]	@ (800fd10 <pvPortMalloc+0x184>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d051      	beq.n	800fce0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc3c:	6a3b      	ldr	r3, [r7, #32]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2208      	movs	r2, #8
 800fc42:	4413      	add	r3, r2
 800fc44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	6a3b      	ldr	r3, [r7, #32]
 800fc4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc50:	685a      	ldr	r2, [r3, #4]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	1ad2      	subs	r2, r2, r3
 800fc56:	2308      	movs	r3, #8
 800fc58:	005b      	lsls	r3, r3, #1
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d920      	bls.n	800fca0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4413      	add	r3, r2
 800fc64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	f003 0307 	and.w	r3, r3, #7
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d00b      	beq.n	800fc88 <pvPortMalloc+0xfc>
	__asm volatile
 800fc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc74:	f383 8811 	msr	BASEPRI, r3
 800fc78:	f3bf 8f6f 	isb	sy
 800fc7c:	f3bf 8f4f 	dsb	sy
 800fc80:	613b      	str	r3, [r7, #16]
}
 800fc82:	bf00      	nop
 800fc84:	bf00      	nop
 800fc86:	e7fd      	b.n	800fc84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc8a:	685a      	ldr	r2, [r3, #4]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	1ad2      	subs	r2, r2, r3
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc9a:	69b8      	ldr	r0, [r7, #24]
 800fc9c:	f000 f90a 	bl	800feb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fca0:	4b1d      	ldr	r3, [pc, #116]	@ (800fd18 <pvPortMalloc+0x18c>)
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	4a1b      	ldr	r2, [pc, #108]	@ (800fd18 <pvPortMalloc+0x18c>)
 800fcac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fcae:	4b1a      	ldr	r3, [pc, #104]	@ (800fd18 <pvPortMalloc+0x18c>)
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	4b1b      	ldr	r3, [pc, #108]	@ (800fd20 <pvPortMalloc+0x194>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d203      	bcs.n	800fcc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fcba:	4b17      	ldr	r3, [pc, #92]	@ (800fd18 <pvPortMalloc+0x18c>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4a18      	ldr	r2, [pc, #96]	@ (800fd20 <pvPortMalloc+0x194>)
 800fcc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc4:	685a      	ldr	r2, [r3, #4]
 800fcc6:	4b13      	ldr	r3, [pc, #76]	@ (800fd14 <pvPortMalloc+0x188>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	431a      	orrs	r2, r3
 800fccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fcd6:	4b13      	ldr	r3, [pc, #76]	@ (800fd24 <pvPortMalloc+0x198>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	4a11      	ldr	r2, [pc, #68]	@ (800fd24 <pvPortMalloc+0x198>)
 800fcde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fce0:	f7fe fade 	bl	800e2a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	f003 0307 	and.w	r3, r3, #7
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d00b      	beq.n	800fd06 <pvPortMalloc+0x17a>
	__asm volatile
 800fcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	60fb      	str	r3, [r7, #12]
}
 800fd00:	bf00      	nop
 800fd02:	bf00      	nop
 800fd04:	e7fd      	b.n	800fd02 <pvPortMalloc+0x176>
	return pvReturn;
 800fd06:	69fb      	ldr	r3, [r7, #28]
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3728      	adds	r7, #40	@ 0x28
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	2400e04c 	.word	0x2400e04c
 800fd14:	2400e060 	.word	0x2400e060
 800fd18:	2400e050 	.word	0x2400e050
 800fd1c:	2400e044 	.word	0x2400e044
 800fd20:	2400e054 	.word	0x2400e054
 800fd24:	2400e058 	.word	0x2400e058

0800fd28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d04f      	beq.n	800fdda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd3a:	2308      	movs	r3, #8
 800fd3c:	425b      	negs	r3, r3
 800fd3e:	697a      	ldr	r2, [r7, #20]
 800fd40:	4413      	add	r3, r2
 800fd42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	4b25      	ldr	r3, [pc, #148]	@ (800fde4 <vPortFree+0xbc>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4013      	ands	r3, r2
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d10b      	bne.n	800fd6e <vPortFree+0x46>
	__asm volatile
 800fd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd5a:	f383 8811 	msr	BASEPRI, r3
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	f3bf 8f4f 	dsb	sy
 800fd66:	60fb      	str	r3, [r7, #12]
}
 800fd68:	bf00      	nop
 800fd6a:	bf00      	nop
 800fd6c:	e7fd      	b.n	800fd6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d00b      	beq.n	800fd8e <vPortFree+0x66>
	__asm volatile
 800fd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd7a:	f383 8811 	msr	BASEPRI, r3
 800fd7e:	f3bf 8f6f 	isb	sy
 800fd82:	f3bf 8f4f 	dsb	sy
 800fd86:	60bb      	str	r3, [r7, #8]
}
 800fd88:	bf00      	nop
 800fd8a:	bf00      	nop
 800fd8c:	e7fd      	b.n	800fd8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	4b14      	ldr	r3, [pc, #80]	@ (800fde4 <vPortFree+0xbc>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4013      	ands	r3, r2
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d01e      	beq.n	800fdda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d11a      	bne.n	800fdda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	685a      	ldr	r2, [r3, #4]
 800fda8:	4b0e      	ldr	r3, [pc, #56]	@ (800fde4 <vPortFree+0xbc>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	43db      	mvns	r3, r3
 800fdae:	401a      	ands	r2, r3
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fdb4:	f7fe fa66 	bl	800e284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	685a      	ldr	r2, [r3, #4]
 800fdbc:	4b0a      	ldr	r3, [pc, #40]	@ (800fde8 <vPortFree+0xc0>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	4a09      	ldr	r2, [pc, #36]	@ (800fde8 <vPortFree+0xc0>)
 800fdc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fdc6:	6938      	ldr	r0, [r7, #16]
 800fdc8:	f000 f874 	bl	800feb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fdcc:	4b07      	ldr	r3, [pc, #28]	@ (800fdec <vPortFree+0xc4>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	4a06      	ldr	r2, [pc, #24]	@ (800fdec <vPortFree+0xc4>)
 800fdd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fdd6:	f7fe fa63 	bl	800e2a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fdda:	bf00      	nop
 800fddc:	3718      	adds	r7, #24
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	2400e060 	.word	0x2400e060
 800fde8:	2400e050 	.word	0x2400e050
 800fdec:	2400e05c 	.word	0x2400e05c

0800fdf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b085      	sub	sp, #20
 800fdf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fdf6:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800fdfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fdfc:	4b27      	ldr	r3, [pc, #156]	@ (800fe9c <prvHeapInit+0xac>)
 800fdfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f003 0307 	and.w	r3, r3, #7
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d00c      	beq.n	800fe24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	3307      	adds	r3, #7
 800fe0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f023 0307 	bic.w	r3, r3, #7
 800fe16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fe18:	68ba      	ldr	r2, [r7, #8]
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	4a1f      	ldr	r2, [pc, #124]	@ (800fe9c <prvHeapInit+0xac>)
 800fe20:	4413      	add	r3, r2
 800fe22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fe28:	4a1d      	ldr	r2, [pc, #116]	@ (800fea0 <prvHeapInit+0xb0>)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe2e:	4b1c      	ldr	r3, [pc, #112]	@ (800fea0 <prvHeapInit+0xb0>)
 800fe30:	2200      	movs	r2, #0
 800fe32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	68ba      	ldr	r2, [r7, #8]
 800fe38:	4413      	add	r3, r2
 800fe3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe3c:	2208      	movs	r2, #8
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	1a9b      	subs	r3, r3, r2
 800fe42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f023 0307 	bic.w	r3, r3, #7
 800fe4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	4a15      	ldr	r2, [pc, #84]	@ (800fea4 <prvHeapInit+0xb4>)
 800fe50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe52:	4b14      	ldr	r3, [pc, #80]	@ (800fea4 <prvHeapInit+0xb4>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	2200      	movs	r2, #0
 800fe58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe5a:	4b12      	ldr	r3, [pc, #72]	@ (800fea4 <prvHeapInit+0xb4>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	1ad2      	subs	r2, r2, r3
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe70:	4b0c      	ldr	r3, [pc, #48]	@ (800fea4 <prvHeapInit+0xb4>)
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	4a0a      	ldr	r2, [pc, #40]	@ (800fea8 <prvHeapInit+0xb8>)
 800fe7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	4a09      	ldr	r2, [pc, #36]	@ (800feac <prvHeapInit+0xbc>)
 800fe86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe88:	4b09      	ldr	r3, [pc, #36]	@ (800feb0 <prvHeapInit+0xc0>)
 800fe8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fe8e:	601a      	str	r2, [r3, #0]
}
 800fe90:	bf00      	nop
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	24006844 	.word	0x24006844
 800fea0:	2400e044 	.word	0x2400e044
 800fea4:	2400e04c 	.word	0x2400e04c
 800fea8:	2400e054 	.word	0x2400e054
 800feac:	2400e050 	.word	0x2400e050
 800feb0:	2400e060 	.word	0x2400e060

0800feb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800feb4:	b480      	push	{r7}
 800feb6:	b085      	sub	sp, #20
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800febc:	4b28      	ldr	r3, [pc, #160]	@ (800ff60 <prvInsertBlockIntoFreeList+0xac>)
 800febe:	60fb      	str	r3, [r7, #12]
 800fec0:	e002      	b.n	800fec8 <prvInsertBlockIntoFreeList+0x14>
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	60fb      	str	r3, [r7, #12]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d8f7      	bhi.n	800fec2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	4413      	add	r3, r2
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d108      	bne.n	800fef6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	685a      	ldr	r2, [r3, #4]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	441a      	add	r2, r3
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	68ba      	ldr	r2, [r7, #8]
 800ff00:	441a      	add	r2, r3
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d118      	bne.n	800ff3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	4b15      	ldr	r3, [pc, #84]	@ (800ff64 <prvInsertBlockIntoFreeList+0xb0>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d00d      	beq.n	800ff32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	685a      	ldr	r2, [r3, #4]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	441a      	add	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	601a      	str	r2, [r3, #0]
 800ff30:	e008      	b.n	800ff44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff32:	4b0c      	ldr	r3, [pc, #48]	@ (800ff64 <prvInsertBlockIntoFreeList+0xb0>)
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	601a      	str	r2, [r3, #0]
 800ff3a:	e003      	b.n	800ff44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff44:	68fa      	ldr	r2, [r7, #12]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d002      	beq.n	800ff52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff52:	bf00      	nop
 800ff54:	3714      	adds	r7, #20
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	2400e044 	.word	0x2400e044
 800ff64:	2400e04c 	.word	0x2400e04c

0800ff68 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ff72:	f007 fc83 	bl	801787c <sys_timeouts_sleeptime>
 800ff76:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff7e:	d10b      	bne.n	800ff98 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ff80:	4813      	ldr	r0, [pc, #76]	@ (800ffd0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ff82:	f00a fdcc 	bl	801ab1e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ff86:	2200      	movs	r2, #0
 800ff88:	6839      	ldr	r1, [r7, #0]
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f00a fd54 	bl	801aa38 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ff90:	480f      	ldr	r0, [pc, #60]	@ (800ffd0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ff92:	f00a fdb5 	bl	801ab00 <sys_mutex_lock>
    return;
 800ff96:	e018      	b.n	800ffca <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d102      	bne.n	800ffa4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ff9e:	f007 fc33 	bl	8017808 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ffa2:	e7e6      	b.n	800ff72 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ffa4:	480a      	ldr	r0, [pc, #40]	@ (800ffd0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ffa6:	f00a fdba 	bl	801ab1e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ffaa:	68fa      	ldr	r2, [r7, #12]
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f00a fd42 	bl	801aa38 <sys_arch_mbox_fetch>
 800ffb4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ffb6:	4806      	ldr	r0, [pc, #24]	@ (800ffd0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ffb8:	f00a fda2 	bl	801ab00 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc2:	d102      	bne.n	800ffca <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ffc4:	f007 fc20 	bl	8017808 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ffc8:	e7d3      	b.n	800ff72 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	2400e070 	.word	0x2400e070

0800ffd4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ffdc:	4810      	ldr	r0, [pc, #64]	@ (8010020 <tcpip_thread+0x4c>)
 800ffde:	f00a fd8f 	bl	801ab00 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ffe2:	4b10      	ldr	r3, [pc, #64]	@ (8010024 <tcpip_thread+0x50>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d005      	beq.n	800fff6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ffea:	4b0e      	ldr	r3, [pc, #56]	@ (8010024 <tcpip_thread+0x50>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4a0e      	ldr	r2, [pc, #56]	@ (8010028 <tcpip_thread+0x54>)
 800fff0:	6812      	ldr	r2, [r2, #0]
 800fff2:	4610      	mov	r0, r2
 800fff4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fff6:	f107 030c 	add.w	r3, r7, #12
 800fffa:	4619      	mov	r1, r3
 800fffc:	480b      	ldr	r0, [pc, #44]	@ (801002c <tcpip_thread+0x58>)
 800fffe:	f7ff ffb3 	bl	800ff68 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d106      	bne.n	8010016 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010008:	4b09      	ldr	r3, [pc, #36]	@ (8010030 <tcpip_thread+0x5c>)
 801000a:	2291      	movs	r2, #145	@ 0x91
 801000c:	4909      	ldr	r1, [pc, #36]	@ (8010034 <tcpip_thread+0x60>)
 801000e:	480a      	ldr	r0, [pc, #40]	@ (8010038 <tcpip_thread+0x64>)
 8010010:	f00a fed0 	bl	801adb4 <iprintf>
      continue;
 8010014:	e003      	b.n	801001e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	4618      	mov	r0, r3
 801001a:	f000 f80f 	bl	801003c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801001e:	e7ea      	b.n	800fff6 <tcpip_thread+0x22>
 8010020:	2400e070 	.word	0x2400e070
 8010024:	2400e064 	.word	0x2400e064
 8010028:	2400e068 	.word	0x2400e068
 801002c:	2400e06c 	.word	0x2400e06c
 8010030:	0801bd30 	.word	0x0801bd30
 8010034:	0801bd60 	.word	0x0801bd60
 8010038:	0801bd80 	.word	0x0801bd80

0801003c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	2b02      	cmp	r3, #2
 801004a:	d026      	beq.n	801009a <tcpip_thread_handle_msg+0x5e>
 801004c:	2b02      	cmp	r3, #2
 801004e:	dc2b      	bgt.n	80100a8 <tcpip_thread_handle_msg+0x6c>
 8010050:	2b00      	cmp	r3, #0
 8010052:	d002      	beq.n	801005a <tcpip_thread_handle_msg+0x1e>
 8010054:	2b01      	cmp	r3, #1
 8010056:	d015      	beq.n	8010084 <tcpip_thread_handle_msg+0x48>
 8010058:	e026      	b.n	80100a8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	6850      	ldr	r0, [r2, #4]
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	6892      	ldr	r2, [r2, #8]
 8010066:	4611      	mov	r1, r2
 8010068:	4798      	blx	r3
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d004      	beq.n	801007a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	f001 fdcb 	bl	8011c10 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801007a:	6879      	ldr	r1, [r7, #4]
 801007c:	200a      	movs	r0, #10
 801007e:	f000 ff1b 	bl	8010eb8 <memp_free>
      break;
 8010082:	e018      	b.n	80100b6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	6892      	ldr	r2, [r2, #8]
 801008c:	4610      	mov	r0, r2
 801008e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010090:	6879      	ldr	r1, [r7, #4]
 8010092:	2009      	movs	r0, #9
 8010094:	f000 ff10 	bl	8010eb8 <memp_free>
      break;
 8010098:	e00d      	b.n	80100b6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	6892      	ldr	r2, [r2, #8]
 80100a2:	4610      	mov	r0, r2
 80100a4:	4798      	blx	r3
      break;
 80100a6:	e006      	b.n	80100b6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80100a8:	4b05      	ldr	r3, [pc, #20]	@ (80100c0 <tcpip_thread_handle_msg+0x84>)
 80100aa:	22cf      	movs	r2, #207	@ 0xcf
 80100ac:	4905      	ldr	r1, [pc, #20]	@ (80100c4 <tcpip_thread_handle_msg+0x88>)
 80100ae:	4806      	ldr	r0, [pc, #24]	@ (80100c8 <tcpip_thread_handle_msg+0x8c>)
 80100b0:	f00a fe80 	bl	801adb4 <iprintf>
      break;
 80100b4:	bf00      	nop
  }
}
 80100b6:	bf00      	nop
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	0801bd30 	.word	0x0801bd30
 80100c4:	0801bd60 	.word	0x0801bd60
 80100c8:	0801bd80 	.word	0x0801bd80

080100cc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80100d8:	481a      	ldr	r0, [pc, #104]	@ (8010144 <tcpip_inpkt+0x78>)
 80100da:	f00a fcde 	bl	801aa9a <sys_mbox_valid>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d105      	bne.n	80100f0 <tcpip_inpkt+0x24>
 80100e4:	4b18      	ldr	r3, [pc, #96]	@ (8010148 <tcpip_inpkt+0x7c>)
 80100e6:	22fc      	movs	r2, #252	@ 0xfc
 80100e8:	4918      	ldr	r1, [pc, #96]	@ (801014c <tcpip_inpkt+0x80>)
 80100ea:	4819      	ldr	r0, [pc, #100]	@ (8010150 <tcpip_inpkt+0x84>)
 80100ec:	f00a fe62 	bl	801adb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80100f0:	200a      	movs	r0, #10
 80100f2:	f000 fe6b 	bl	8010dcc <memp_malloc>
 80100f6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d102      	bne.n	8010104 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80100fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010102:	e01a      	b.n	801013a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	2200      	movs	r2, #0
 8010108:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	68fa      	ldr	r2, [r7, #12]
 801010e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	68ba      	ldr	r2, [r7, #8]
 8010114:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801011c:	6979      	ldr	r1, [r7, #20]
 801011e:	4809      	ldr	r0, [pc, #36]	@ (8010144 <tcpip_inpkt+0x78>)
 8010120:	f00a fc70 	bl	801aa04 <sys_mbox_trypost>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d006      	beq.n	8010138 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801012a:	6979      	ldr	r1, [r7, #20]
 801012c:	200a      	movs	r0, #10
 801012e:	f000 fec3 	bl	8010eb8 <memp_free>
    return ERR_MEM;
 8010132:	f04f 33ff 	mov.w	r3, #4294967295
 8010136:	e000      	b.n	801013a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010138:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801013a:	4618      	mov	r0, r3
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	2400e06c 	.word	0x2400e06c
 8010148:	0801bd30 	.word	0x0801bd30
 801014c:	0801bda8 	.word	0x0801bda8
 8010150:	0801bd80 	.word	0x0801bd80

08010154 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010164:	f003 0318 	and.w	r3, r3, #24
 8010168:	2b00      	cmp	r3, #0
 801016a:	d006      	beq.n	801017a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801016c:	4a08      	ldr	r2, [pc, #32]	@ (8010190 <tcpip_input+0x3c>)
 801016e:	6839      	ldr	r1, [r7, #0]
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f7ff ffab 	bl	80100cc <tcpip_inpkt>
 8010176:	4603      	mov	r3, r0
 8010178:	e005      	b.n	8010186 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801017a:	4a06      	ldr	r2, [pc, #24]	@ (8010194 <tcpip_input+0x40>)
 801017c:	6839      	ldr	r1, [r7, #0]
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7ff ffa4 	bl	80100cc <tcpip_inpkt>
 8010184:	4603      	mov	r3, r0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	0801a825 	.word	0x0801a825
 8010194:	080195f5 	.word	0x080195f5

08010198 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80101a2:	4819      	ldr	r0, [pc, #100]	@ (8010208 <tcpip_try_callback+0x70>)
 80101a4:	f00a fc79 	bl	801aa9a <sys_mbox_valid>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d106      	bne.n	80101bc <tcpip_try_callback+0x24>
 80101ae:	4b17      	ldr	r3, [pc, #92]	@ (801020c <tcpip_try_callback+0x74>)
 80101b0:	f240 125d 	movw	r2, #349	@ 0x15d
 80101b4:	4916      	ldr	r1, [pc, #88]	@ (8010210 <tcpip_try_callback+0x78>)
 80101b6:	4817      	ldr	r0, [pc, #92]	@ (8010214 <tcpip_try_callback+0x7c>)
 80101b8:	f00a fdfc 	bl	801adb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80101bc:	2009      	movs	r0, #9
 80101be:	f000 fe05 	bl	8010dcc <memp_malloc>
 80101c2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d102      	bne.n	80101d0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80101ca:	f04f 33ff 	mov.w	r3, #4294967295
 80101ce:	e017      	b.n	8010200 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2201      	movs	r2, #1
 80101d4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	683a      	ldr	r2, [r7, #0]
 80101e0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80101e2:	68f9      	ldr	r1, [r7, #12]
 80101e4:	4808      	ldr	r0, [pc, #32]	@ (8010208 <tcpip_try_callback+0x70>)
 80101e6:	f00a fc0d 	bl	801aa04 <sys_mbox_trypost>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d006      	beq.n	80101fe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80101f0:	68f9      	ldr	r1, [r7, #12]
 80101f2:	2009      	movs	r0, #9
 80101f4:	f000 fe60 	bl	8010eb8 <memp_free>
    return ERR_MEM;
 80101f8:	f04f 33ff 	mov.w	r3, #4294967295
 80101fc:	e000      	b.n	8010200 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	2400e06c 	.word	0x2400e06c
 801020c:	0801bd30 	.word	0x0801bd30
 8010210:	0801bda8 	.word	0x0801bda8
 8010214:	0801bd80 	.word	0x0801bd80

08010218 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af02      	add	r7, sp, #8
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010222:	f000 f92e 	bl	8010482 <lwip_init>

  tcpip_init_done = initfunc;
 8010226:	4a17      	ldr	r2, [pc, #92]	@ (8010284 <tcpip_init+0x6c>)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801022c:	4a16      	ldr	r2, [pc, #88]	@ (8010288 <tcpip_init+0x70>)
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010232:	2106      	movs	r1, #6
 8010234:	4815      	ldr	r0, [pc, #84]	@ (801028c <tcpip_init+0x74>)
 8010236:	f00a fbcb 	bl	801a9d0 <sys_mbox_new>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d006      	beq.n	801024e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010240:	4b13      	ldr	r3, [pc, #76]	@ (8010290 <tcpip_init+0x78>)
 8010242:	f240 2261 	movw	r2, #609	@ 0x261
 8010246:	4913      	ldr	r1, [pc, #76]	@ (8010294 <tcpip_init+0x7c>)
 8010248:	4813      	ldr	r0, [pc, #76]	@ (8010298 <tcpip_init+0x80>)
 801024a:	f00a fdb3 	bl	801adb4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801024e:	4813      	ldr	r0, [pc, #76]	@ (801029c <tcpip_init+0x84>)
 8010250:	f00a fc40 	bl	801aad4 <sys_mutex_new>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d006      	beq.n	8010268 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801025a:	4b0d      	ldr	r3, [pc, #52]	@ (8010290 <tcpip_init+0x78>)
 801025c:	f240 2265 	movw	r2, #613	@ 0x265
 8010260:	490f      	ldr	r1, [pc, #60]	@ (80102a0 <tcpip_init+0x88>)
 8010262:	480d      	ldr	r0, [pc, #52]	@ (8010298 <tcpip_init+0x80>)
 8010264:	f00a fda6 	bl	801adb4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010268:	2318      	movs	r3, #24
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010270:	2200      	movs	r2, #0
 8010272:	490c      	ldr	r1, [pc, #48]	@ (80102a4 <tcpip_init+0x8c>)
 8010274:	480c      	ldr	r0, [pc, #48]	@ (80102a8 <tcpip_init+0x90>)
 8010276:	f00a fc5f 	bl	801ab38 <sys_thread_new>
}
 801027a:	bf00      	nop
 801027c:	3708      	adds	r7, #8
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	2400e064 	.word	0x2400e064
 8010288:	2400e068 	.word	0x2400e068
 801028c:	2400e06c 	.word	0x2400e06c
 8010290:	0801bd30 	.word	0x0801bd30
 8010294:	0801bdb8 	.word	0x0801bdb8
 8010298:	0801bd80 	.word	0x0801bd80
 801029c:	2400e070 	.word	0x2400e070
 80102a0:	0801bddc 	.word	0x0801bddc
 80102a4:	0800ffd5 	.word	0x0800ffd5
 80102a8:	0801be00 	.word	0x0801be00

080102ac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	4603      	mov	r3, r0
 80102b4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80102b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80102ba:	021b      	lsls	r3, r3, #8
 80102bc:	b21a      	sxth	r2, r3
 80102be:	88fb      	ldrh	r3, [r7, #6]
 80102c0:	0a1b      	lsrs	r3, r3, #8
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	b21b      	sxth	r3, r3
 80102c6:	4313      	orrs	r3, r2
 80102c8:	b21b      	sxth	r3, r3
 80102ca:	b29b      	uxth	r3, r3
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	370c      	adds	r7, #12
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	061a      	lsls	r2, r3, #24
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	021b      	lsls	r3, r3, #8
 80102e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80102ec:	431a      	orrs	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	0a1b      	lsrs	r3, r3, #8
 80102f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80102f6:	431a      	orrs	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	0e1b      	lsrs	r3, r3, #24
 80102fc:	4313      	orrs	r3, r2
}
 80102fe:	4618      	mov	r0, r3
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr

0801030a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801030a:	b480      	push	{r7}
 801030c:	b089      	sub	sp, #36	@ 0x24
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
 8010312:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8010318:	2300      	movs	r3, #0
 801031a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801031c:	2300      	movs	r3, #0
 801031e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	f003 0301 	and.w	r3, r3, #1
 8010326:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00d      	beq.n	801034a <lwip_standard_chksum+0x40>
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	dd0a      	ble.n	801034a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8010334:	69fa      	ldr	r2, [r7, #28]
 8010336:	1c53      	adds	r3, r2, #1
 8010338:	61fb      	str	r3, [r7, #28]
 801033a:	f107 030e 	add.w	r3, r7, #14
 801033e:	3301      	adds	r3, #1
 8010340:	7812      	ldrb	r2, [r2, #0]
 8010342:	701a      	strb	r2, [r3, #0]
    len--;
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	3b01      	subs	r3, #1
 8010348:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801034e:	e00a      	b.n	8010366 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	1c9a      	adds	r2, r3, #2
 8010354:	61ba      	str	r2, [r7, #24]
 8010356:	881b      	ldrh	r3, [r3, #0]
 8010358:	461a      	mov	r2, r3
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	4413      	add	r3, r2
 801035e:	617b      	str	r3, [r7, #20]
    len -= 2;
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	3b02      	subs	r3, #2
 8010364:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	2b01      	cmp	r3, #1
 801036a:	dcf1      	bgt.n	8010350 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	dd04      	ble.n	801037c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010372:	f107 030e 	add.w	r3, r7, #14
 8010376:	69ba      	ldr	r2, [r7, #24]
 8010378:	7812      	ldrb	r2, [r2, #0]
 801037a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801037c:	89fb      	ldrh	r3, [r7, #14]
 801037e:	461a      	mov	r2, r3
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	4413      	add	r3, r2
 8010384:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	0c1a      	lsrs	r2, r3, #16
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	b29b      	uxth	r3, r3
 801038e:	4413      	add	r3, r2
 8010390:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	0c1a      	lsrs	r2, r3, #16
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	b29b      	uxth	r3, r3
 801039a:	4413      	add	r3, r2
 801039c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d007      	beq.n	80103b4 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	021b      	lsls	r3, r3, #8
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	0a1b      	lsrs	r3, r3, #8
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	4313      	orrs	r3, r2
 80103b2:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	b29b      	uxth	r3, r3
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3724      	adds	r7, #36	@ 0x24
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	460b      	mov	r3, r1
 80103ce:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80103d0:	887b      	ldrh	r3, [r7, #2]
 80103d2:	4619      	mov	r1, r3
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f7ff ff98 	bl	801030a <lwip_standard_chksum>
 80103da:	4603      	mov	r3, r0
 80103dc:	43db      	mvns	r3, r3
 80103de:	b29b      	uxth	r3, r3
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b086      	sub	sp, #24
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80103f0:	2300      	movs	r3, #0
 80103f2:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80103f4:	2300      	movs	r3, #0
 80103f6:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	613b      	str	r3, [r7, #16]
 80103fc:	e02b      	b.n	8010456 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	685a      	ldr	r2, [r3, #4]
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	895b      	ldrh	r3, [r3, #10]
 8010406:	4619      	mov	r1, r3
 8010408:	4610      	mov	r0, r2
 801040a:	f7ff ff7e 	bl	801030a <lwip_standard_chksum>
 801040e:	4603      	mov	r3, r0
 8010410:	461a      	mov	r2, r3
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	4413      	add	r3, r2
 8010416:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	0c1a      	lsrs	r2, r3, #16
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	b29b      	uxth	r3, r3
 8010420:	4413      	add	r3, r2
 8010422:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	895b      	ldrh	r3, [r3, #10]
 8010428:	f003 0301 	and.w	r3, r3, #1
 801042c:	b29b      	uxth	r3, r3
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00e      	beq.n	8010450 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2b00      	cmp	r3, #0
 8010436:	bf0c      	ite	eq
 8010438:	2301      	moveq	r3, #1
 801043a:	2300      	movne	r3, #0
 801043c:	b2db      	uxtb	r3, r3
 801043e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	021b      	lsls	r3, r3, #8
 8010444:	b29a      	uxth	r2, r3
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	0a1b      	lsrs	r3, r3, #8
 801044a:	b2db      	uxtb	r3, r3
 801044c:	4313      	orrs	r3, r2
 801044e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	613b      	str	r3, [r7, #16]
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1d0      	bne.n	80103fe <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d007      	beq.n	8010472 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	021b      	lsls	r3, r3, #8
 8010466:	b29a      	uxth	r2, r3
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	0a1b      	lsrs	r3, r3, #8
 801046c:	b2db      	uxtb	r3, r3
 801046e:	4313      	orrs	r3, r2
 8010470:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	b29b      	uxth	r3, r3
 8010476:	43db      	mvns	r3, r3
 8010478:	b29b      	uxth	r3, r3
}
 801047a:	4618      	mov	r0, r3
 801047c:	3718      	adds	r7, #24
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010482:	b580      	push	{r7, lr}
 8010484:	b082      	sub	sp, #8
 8010486:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010488:	2300      	movs	r3, #0
 801048a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801048c:	f00a fb16 	bl	801aabc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010490:	f000 f8d4 	bl	801063c <mem_init>
  memp_init();
 8010494:	f000 fc2c 	bl	8010cf0 <memp_init>
  pbuf_init();
  netif_init();
 8010498:	f000 fd38 	bl	8010f0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801049c:	f007 fa26 	bl	80178ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80104a0:	f001 ff4c 	bl	801233c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80104a4:	f007 f968 	bl	8017778 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80104a8:	bf00      	nop
 80104aa:	3708      	adds	r7, #8
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	4603      	mov	r3, r0
 80104b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80104ba:	4b05      	ldr	r3, [pc, #20]	@ (80104d0 <ptr_to_mem+0x20>)
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	88fb      	ldrh	r3, [r7, #6]
 80104c0:	4413      	add	r3, r2
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	370c      	adds	r7, #12
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	2400e08c 	.word	0x2400e08c

080104d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80104dc:	4b05      	ldr	r3, [pc, #20]	@ (80104f4 <mem_to_ptr+0x20>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	1ad3      	subs	r3, r2, r3
 80104e4:	b29b      	uxth	r3, r3
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	370c      	adds	r7, #12
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop
 80104f4:	2400e08c 	.word	0x2400e08c

080104f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80104f8:	b590      	push	{r4, r7, lr}
 80104fa:	b085      	sub	sp, #20
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010500:	4b45      	ldr	r3, [pc, #276]	@ (8010618 <plug_holes+0x120>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	429a      	cmp	r2, r3
 8010508:	d206      	bcs.n	8010518 <plug_holes+0x20>
 801050a:	4b44      	ldr	r3, [pc, #272]	@ (801061c <plug_holes+0x124>)
 801050c:	f240 12df 	movw	r2, #479	@ 0x1df
 8010510:	4943      	ldr	r1, [pc, #268]	@ (8010620 <plug_holes+0x128>)
 8010512:	4844      	ldr	r0, [pc, #272]	@ (8010624 <plug_holes+0x12c>)
 8010514:	f00a fc4e 	bl	801adb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010518:	4b43      	ldr	r3, [pc, #268]	@ (8010628 <plug_holes+0x130>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	429a      	cmp	r2, r3
 8010520:	d306      	bcc.n	8010530 <plug_holes+0x38>
 8010522:	4b3e      	ldr	r3, [pc, #248]	@ (801061c <plug_holes+0x124>)
 8010524:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010528:	4940      	ldr	r1, [pc, #256]	@ (801062c <plug_holes+0x134>)
 801052a:	483e      	ldr	r0, [pc, #248]	@ (8010624 <plug_holes+0x12c>)
 801052c:	f00a fc42 	bl	801adb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	791b      	ldrb	r3, [r3, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d006      	beq.n	8010546 <plug_holes+0x4e>
 8010538:	4b38      	ldr	r3, [pc, #224]	@ (801061c <plug_holes+0x124>)
 801053a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801053e:	493c      	ldr	r1, [pc, #240]	@ (8010630 <plug_holes+0x138>)
 8010540:	4838      	ldr	r0, [pc, #224]	@ (8010624 <plug_holes+0x12c>)
 8010542:	f00a fc37 	bl	801adb4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	881b      	ldrh	r3, [r3, #0]
 801054a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801054e:	d906      	bls.n	801055e <plug_holes+0x66>
 8010550:	4b32      	ldr	r3, [pc, #200]	@ (801061c <plug_holes+0x124>)
 8010552:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010556:	4937      	ldr	r1, [pc, #220]	@ (8010634 <plug_holes+0x13c>)
 8010558:	4832      	ldr	r0, [pc, #200]	@ (8010624 <plug_holes+0x12c>)
 801055a:	f00a fc2b 	bl	801adb4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	881b      	ldrh	r3, [r3, #0]
 8010562:	4618      	mov	r0, r3
 8010564:	f7ff ffa4 	bl	80104b0 <ptr_to_mem>
 8010568:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	429a      	cmp	r2, r3
 8010570:	d024      	beq.n	80105bc <plug_holes+0xc4>
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	791b      	ldrb	r3, [r3, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d120      	bne.n	80105bc <plug_holes+0xc4>
 801057a:	4b2b      	ldr	r3, [pc, #172]	@ (8010628 <plug_holes+0x130>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	429a      	cmp	r2, r3
 8010582:	d01b      	beq.n	80105bc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010584:	4b2c      	ldr	r3, [pc, #176]	@ (8010638 <plug_holes+0x140>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	429a      	cmp	r2, r3
 801058c:	d102      	bne.n	8010594 <plug_holes+0x9c>
      lfree = mem;
 801058e:	4a2a      	ldr	r2, [pc, #168]	@ (8010638 <plug_holes+0x140>)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	881a      	ldrh	r2, [r3, #0]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	881b      	ldrh	r3, [r3, #0]
 80105a0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80105a4:	d00a      	beq.n	80105bc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff ff80 	bl	80104b0 <ptr_to_mem>
 80105b0:	4604      	mov	r4, r0
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f7ff ff8e 	bl	80104d4 <mem_to_ptr>
 80105b8:	4603      	mov	r3, r0
 80105ba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	885b      	ldrh	r3, [r3, #2]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7ff ff75 	bl	80104b0 <ptr_to_mem>
 80105c6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80105c8:	68ba      	ldr	r2, [r7, #8]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d01f      	beq.n	8010610 <plug_holes+0x118>
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	791b      	ldrb	r3, [r3, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d11b      	bne.n	8010610 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80105d8:	4b17      	ldr	r3, [pc, #92]	@ (8010638 <plug_holes+0x140>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d102      	bne.n	80105e8 <plug_holes+0xf0>
      lfree = pmem;
 80105e2:	4a15      	ldr	r2, [pc, #84]	@ (8010638 <plug_holes+0x140>)
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	881a      	ldrh	r2, [r3, #0]
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	881b      	ldrh	r3, [r3, #0]
 80105f4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80105f8:	d00a      	beq.n	8010610 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	881b      	ldrh	r3, [r3, #0]
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff ff56 	bl	80104b0 <ptr_to_mem>
 8010604:	4604      	mov	r4, r0
 8010606:	68b8      	ldr	r0, [r7, #8]
 8010608:	f7ff ff64 	bl	80104d4 <mem_to_ptr>
 801060c:	4603      	mov	r3, r0
 801060e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010610:	bf00      	nop
 8010612:	3714      	adds	r7, #20
 8010614:	46bd      	mov	sp, r7
 8010616:	bd90      	pop	{r4, r7, pc}
 8010618:	2400e08c 	.word	0x2400e08c
 801061c:	0801be10 	.word	0x0801be10
 8010620:	0801be40 	.word	0x0801be40
 8010624:	0801be58 	.word	0x0801be58
 8010628:	2400e090 	.word	0x2400e090
 801062c:	0801be80 	.word	0x0801be80
 8010630:	0801be9c 	.word	0x0801be9c
 8010634:	0801beb8 	.word	0x0801beb8
 8010638:	2400e098 	.word	0x2400e098

0801063c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010642:	4b1d      	ldr	r3, [pc, #116]	@ (80106b8 <mem_init+0x7c>)
 8010644:	4a1d      	ldr	r2, [pc, #116]	@ (80106bc <mem_init+0x80>)
 8010646:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010648:	4b1b      	ldr	r3, [pc, #108]	@ (80106b8 <mem_init+0x7c>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010654:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2200      	movs	r2, #0
 8010660:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010662:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8010666:	f7ff ff23 	bl	80104b0 <ptr_to_mem>
 801066a:	4603      	mov	r3, r0
 801066c:	4a14      	ldr	r2, [pc, #80]	@ (80106c0 <mem_init+0x84>)
 801066e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010670:	4b13      	ldr	r3, [pc, #76]	@ (80106c0 <mem_init+0x84>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2201      	movs	r2, #1
 8010676:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010678:	4b11      	ldr	r3, [pc, #68]	@ (80106c0 <mem_init+0x84>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010680:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010682:	4b0f      	ldr	r3, [pc, #60]	@ (80106c0 <mem_init+0x84>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 801068a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801068c:	4b0a      	ldr	r3, [pc, #40]	@ (80106b8 <mem_init+0x7c>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4a0c      	ldr	r2, [pc, #48]	@ (80106c4 <mem_init+0x88>)
 8010692:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010694:	480c      	ldr	r0, [pc, #48]	@ (80106c8 <mem_init+0x8c>)
 8010696:	f00a fa1d 	bl	801aad4 <sys_mutex_new>
 801069a:	4603      	mov	r3, r0
 801069c:	2b00      	cmp	r3, #0
 801069e:	d006      	beq.n	80106ae <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80106a0:	4b0a      	ldr	r3, [pc, #40]	@ (80106cc <mem_init+0x90>)
 80106a2:	f240 221f 	movw	r2, #543	@ 0x21f
 80106a6:	490a      	ldr	r1, [pc, #40]	@ (80106d0 <mem_init+0x94>)
 80106a8:	480a      	ldr	r0, [pc, #40]	@ (80106d4 <mem_init+0x98>)
 80106aa:	f00a fb83 	bl	801adb4 <iprintf>
  }
}
 80106ae:	bf00      	nop
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	2400e08c 	.word	0x2400e08c
 80106bc:	30000200 	.word	0x30000200
 80106c0:	2400e090 	.word	0x2400e090
 80106c4:	2400e098 	.word	0x2400e098
 80106c8:	2400e094 	.word	0x2400e094
 80106cc:	0801be10 	.word	0x0801be10
 80106d0:	0801bee4 	.word	0x0801bee4
 80106d4:	0801be58 	.word	0x0801be58

080106d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b086      	sub	sp, #24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7ff fef7 	bl	80104d4 <mem_to_ptr>
 80106e6:	4603      	mov	r3, r0
 80106e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7ff fede 	bl	80104b0 <ptr_to_mem>
 80106f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	885b      	ldrh	r3, [r3, #2]
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7ff fed8 	bl	80104b0 <ptr_to_mem>
 8010700:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	881b      	ldrh	r3, [r3, #0]
 8010706:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801070a:	d818      	bhi.n	801073e <mem_link_valid+0x66>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	885b      	ldrh	r3, [r3, #2]
 8010710:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010714:	d813      	bhi.n	801073e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801071a:	8afa      	ldrh	r2, [r7, #22]
 801071c:	429a      	cmp	r2, r3
 801071e:	d004      	beq.n	801072a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	881b      	ldrh	r3, [r3, #0]
 8010724:	8afa      	ldrh	r2, [r7, #22]
 8010726:	429a      	cmp	r2, r3
 8010728:	d109      	bne.n	801073e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801072a:	4b08      	ldr	r3, [pc, #32]	@ (801074c <mem_link_valid+0x74>)
 801072c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801072e:	693a      	ldr	r2, [r7, #16]
 8010730:	429a      	cmp	r2, r3
 8010732:	d006      	beq.n	8010742 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	885b      	ldrh	r3, [r3, #2]
 8010738:	8afa      	ldrh	r2, [r7, #22]
 801073a:	429a      	cmp	r2, r3
 801073c:	d001      	beq.n	8010742 <mem_link_valid+0x6a>
    return 0;
 801073e:	2300      	movs	r3, #0
 8010740:	e000      	b.n	8010744 <mem_link_valid+0x6c>
  }
  return 1;
 8010742:	2301      	movs	r3, #1
}
 8010744:	4618      	mov	r0, r3
 8010746:	3718      	adds	r7, #24
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}
 801074c:	2400e090 	.word	0x2400e090

08010750 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b088      	sub	sp, #32
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d070      	beq.n	8010840 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f003 0303 	and.w	r3, r3, #3
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00d      	beq.n	8010784 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010768:	4b37      	ldr	r3, [pc, #220]	@ (8010848 <mem_free+0xf8>)
 801076a:	f240 2273 	movw	r2, #627	@ 0x273
 801076e:	4937      	ldr	r1, [pc, #220]	@ (801084c <mem_free+0xfc>)
 8010770:	4837      	ldr	r0, [pc, #220]	@ (8010850 <mem_free+0x100>)
 8010772:	f00a fb1f 	bl	801adb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010776:	f00a f9ff 	bl	801ab78 <sys_arch_protect>
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	68f8      	ldr	r0, [r7, #12]
 801077e:	f00a fa09 	bl	801ab94 <sys_arch_unprotect>
    return;
 8010782:	e05e      	b.n	8010842 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	3b08      	subs	r3, #8
 8010788:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801078a:	4b32      	ldr	r3, [pc, #200]	@ (8010854 <mem_free+0x104>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	69fa      	ldr	r2, [r7, #28]
 8010790:	429a      	cmp	r2, r3
 8010792:	d306      	bcc.n	80107a2 <mem_free+0x52>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f103 020c 	add.w	r2, r3, #12
 801079a:	4b2f      	ldr	r3, [pc, #188]	@ (8010858 <mem_free+0x108>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d90d      	bls.n	80107be <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80107a2:	4b29      	ldr	r3, [pc, #164]	@ (8010848 <mem_free+0xf8>)
 80107a4:	f240 227f 	movw	r2, #639	@ 0x27f
 80107a8:	492c      	ldr	r1, [pc, #176]	@ (801085c <mem_free+0x10c>)
 80107aa:	4829      	ldr	r0, [pc, #164]	@ (8010850 <mem_free+0x100>)
 80107ac:	f00a fb02 	bl	801adb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80107b0:	f00a f9e2 	bl	801ab78 <sys_arch_protect>
 80107b4:	6138      	str	r0, [r7, #16]
 80107b6:	6938      	ldr	r0, [r7, #16]
 80107b8:	f00a f9ec 	bl	801ab94 <sys_arch_unprotect>
    return;
 80107bc:	e041      	b.n	8010842 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80107be:	4828      	ldr	r0, [pc, #160]	@ (8010860 <mem_free+0x110>)
 80107c0:	f00a f99e 	bl	801ab00 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	791b      	ldrb	r3, [r3, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d110      	bne.n	80107ee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80107cc:	4b1e      	ldr	r3, [pc, #120]	@ (8010848 <mem_free+0xf8>)
 80107ce:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80107d2:	4924      	ldr	r1, [pc, #144]	@ (8010864 <mem_free+0x114>)
 80107d4:	481e      	ldr	r0, [pc, #120]	@ (8010850 <mem_free+0x100>)
 80107d6:	f00a faed 	bl	801adb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80107da:	4821      	ldr	r0, [pc, #132]	@ (8010860 <mem_free+0x110>)
 80107dc:	f00a f99f 	bl	801ab1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80107e0:	f00a f9ca 	bl	801ab78 <sys_arch_protect>
 80107e4:	6178      	str	r0, [r7, #20]
 80107e6:	6978      	ldr	r0, [r7, #20]
 80107e8:	f00a f9d4 	bl	801ab94 <sys_arch_unprotect>
    return;
 80107ec:	e029      	b.n	8010842 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80107ee:	69f8      	ldr	r0, [r7, #28]
 80107f0:	f7ff ff72 	bl	80106d8 <mem_link_valid>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d110      	bne.n	801081c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80107fa:	4b13      	ldr	r3, [pc, #76]	@ (8010848 <mem_free+0xf8>)
 80107fc:	f240 2295 	movw	r2, #661	@ 0x295
 8010800:	4919      	ldr	r1, [pc, #100]	@ (8010868 <mem_free+0x118>)
 8010802:	4813      	ldr	r0, [pc, #76]	@ (8010850 <mem_free+0x100>)
 8010804:	f00a fad6 	bl	801adb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010808:	4815      	ldr	r0, [pc, #84]	@ (8010860 <mem_free+0x110>)
 801080a:	f00a f988 	bl	801ab1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801080e:	f00a f9b3 	bl	801ab78 <sys_arch_protect>
 8010812:	61b8      	str	r0, [r7, #24]
 8010814:	69b8      	ldr	r0, [r7, #24]
 8010816:	f00a f9bd 	bl	801ab94 <sys_arch_unprotect>
    return;
 801081a:	e012      	b.n	8010842 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	2200      	movs	r2, #0
 8010820:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010822:	4b12      	ldr	r3, [pc, #72]	@ (801086c <mem_free+0x11c>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	69fa      	ldr	r2, [r7, #28]
 8010828:	429a      	cmp	r2, r3
 801082a:	d202      	bcs.n	8010832 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801082c:	4a0f      	ldr	r2, [pc, #60]	@ (801086c <mem_free+0x11c>)
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010832:	69f8      	ldr	r0, [r7, #28]
 8010834:	f7ff fe60 	bl	80104f8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010838:	4809      	ldr	r0, [pc, #36]	@ (8010860 <mem_free+0x110>)
 801083a:	f00a f970 	bl	801ab1e <sys_mutex_unlock>
 801083e:	e000      	b.n	8010842 <mem_free+0xf2>
    return;
 8010840:	bf00      	nop
}
 8010842:	3720      	adds	r7, #32
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	0801be10 	.word	0x0801be10
 801084c:	0801bf00 	.word	0x0801bf00
 8010850:	0801be58 	.word	0x0801be58
 8010854:	2400e08c 	.word	0x2400e08c
 8010858:	2400e090 	.word	0x2400e090
 801085c:	0801bf24 	.word	0x0801bf24
 8010860:	2400e094 	.word	0x2400e094
 8010864:	0801bf40 	.word	0x0801bf40
 8010868:	0801bf68 	.word	0x0801bf68
 801086c:	2400e098 	.word	0x2400e098

08010870 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b088      	sub	sp, #32
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	460b      	mov	r3, r1
 801087a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801087c:	887b      	ldrh	r3, [r7, #2]
 801087e:	3303      	adds	r3, #3
 8010880:	b29b      	uxth	r3, r3
 8010882:	f023 0303 	bic.w	r3, r3, #3
 8010886:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010888:	8bfb      	ldrh	r3, [r7, #30]
 801088a:	2b0b      	cmp	r3, #11
 801088c:	d801      	bhi.n	8010892 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801088e:	230c      	movs	r3, #12
 8010890:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010892:	8bfb      	ldrh	r3, [r7, #30]
 8010894:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010898:	d803      	bhi.n	80108a2 <mem_trim+0x32>
 801089a:	8bfa      	ldrh	r2, [r7, #30]
 801089c:	887b      	ldrh	r3, [r7, #2]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d201      	bcs.n	80108a6 <mem_trim+0x36>
    return NULL;
 80108a2:	2300      	movs	r3, #0
 80108a4:	e0d8      	b.n	8010a58 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80108a6:	4b6e      	ldr	r3, [pc, #440]	@ (8010a60 <mem_trim+0x1f0>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d304      	bcc.n	80108ba <mem_trim+0x4a>
 80108b0:	4b6c      	ldr	r3, [pc, #432]	@ (8010a64 <mem_trim+0x1f4>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d306      	bcc.n	80108c8 <mem_trim+0x58>
 80108ba:	4b6b      	ldr	r3, [pc, #428]	@ (8010a68 <mem_trim+0x1f8>)
 80108bc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80108c0:	496a      	ldr	r1, [pc, #424]	@ (8010a6c <mem_trim+0x1fc>)
 80108c2:	486b      	ldr	r0, [pc, #428]	@ (8010a70 <mem_trim+0x200>)
 80108c4:	f00a fa76 	bl	801adb4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80108c8:	4b65      	ldr	r3, [pc, #404]	@ (8010a60 <mem_trim+0x1f0>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d304      	bcc.n	80108dc <mem_trim+0x6c>
 80108d2:	4b64      	ldr	r3, [pc, #400]	@ (8010a64 <mem_trim+0x1f4>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	687a      	ldr	r2, [r7, #4]
 80108d8:	429a      	cmp	r2, r3
 80108da:	d307      	bcc.n	80108ec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80108dc:	f00a f94c 	bl	801ab78 <sys_arch_protect>
 80108e0:	60b8      	str	r0, [r7, #8]
 80108e2:	68b8      	ldr	r0, [r7, #8]
 80108e4:	f00a f956 	bl	801ab94 <sys_arch_unprotect>
    return rmem;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	e0b5      	b.n	8010a58 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	3b08      	subs	r3, #8
 80108f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80108f2:	69b8      	ldr	r0, [r7, #24]
 80108f4:	f7ff fdee 	bl	80104d4 <mem_to_ptr>
 80108f8:	4603      	mov	r3, r0
 80108fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	881a      	ldrh	r2, [r3, #0]
 8010900:	8afb      	ldrh	r3, [r7, #22]
 8010902:	1ad3      	subs	r3, r2, r3
 8010904:	b29b      	uxth	r3, r3
 8010906:	3b08      	subs	r3, #8
 8010908:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801090a:	8bfa      	ldrh	r2, [r7, #30]
 801090c:	8abb      	ldrh	r3, [r7, #20]
 801090e:	429a      	cmp	r2, r3
 8010910:	d906      	bls.n	8010920 <mem_trim+0xb0>
 8010912:	4b55      	ldr	r3, [pc, #340]	@ (8010a68 <mem_trim+0x1f8>)
 8010914:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8010918:	4956      	ldr	r1, [pc, #344]	@ (8010a74 <mem_trim+0x204>)
 801091a:	4855      	ldr	r0, [pc, #340]	@ (8010a70 <mem_trim+0x200>)
 801091c:	f00a fa4a 	bl	801adb4 <iprintf>
  if (newsize > size) {
 8010920:	8bfa      	ldrh	r2, [r7, #30]
 8010922:	8abb      	ldrh	r3, [r7, #20]
 8010924:	429a      	cmp	r2, r3
 8010926:	d901      	bls.n	801092c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010928:	2300      	movs	r3, #0
 801092a:	e095      	b.n	8010a58 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801092c:	8bfa      	ldrh	r2, [r7, #30]
 801092e:	8abb      	ldrh	r3, [r7, #20]
 8010930:	429a      	cmp	r2, r3
 8010932:	d101      	bne.n	8010938 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	e08f      	b.n	8010a58 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010938:	484f      	ldr	r0, [pc, #316]	@ (8010a78 <mem_trim+0x208>)
 801093a:	f00a f8e1 	bl	801ab00 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	4618      	mov	r0, r3
 8010944:	f7ff fdb4 	bl	80104b0 <ptr_to_mem>
 8010948:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	791b      	ldrb	r3, [r3, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d13f      	bne.n	80109d2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801095a:	d106      	bne.n	801096a <mem_trim+0xfa>
 801095c:	4b42      	ldr	r3, [pc, #264]	@ (8010a68 <mem_trim+0x1f8>)
 801095e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8010962:	4946      	ldr	r1, [pc, #280]	@ (8010a7c <mem_trim+0x20c>)
 8010964:	4842      	ldr	r0, [pc, #264]	@ (8010a70 <mem_trim+0x200>)
 8010966:	f00a fa25 	bl	801adb4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	881b      	ldrh	r3, [r3, #0]
 801096e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010970:	8afa      	ldrh	r2, [r7, #22]
 8010972:	8bfb      	ldrh	r3, [r7, #30]
 8010974:	4413      	add	r3, r2
 8010976:	b29b      	uxth	r3, r3
 8010978:	3308      	adds	r3, #8
 801097a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801097c:	4b40      	ldr	r3, [pc, #256]	@ (8010a80 <mem_trim+0x210>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	693a      	ldr	r2, [r7, #16]
 8010982:	429a      	cmp	r2, r3
 8010984:	d106      	bne.n	8010994 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010986:	89fb      	ldrh	r3, [r7, #14]
 8010988:	4618      	mov	r0, r3
 801098a:	f7ff fd91 	bl	80104b0 <ptr_to_mem>
 801098e:	4603      	mov	r3, r0
 8010990:	4a3b      	ldr	r2, [pc, #236]	@ (8010a80 <mem_trim+0x210>)
 8010992:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010994:	89fb      	ldrh	r3, [r7, #14]
 8010996:	4618      	mov	r0, r3
 8010998:	f7ff fd8a 	bl	80104b0 <ptr_to_mem>
 801099c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	2200      	movs	r2, #0
 80109a2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	89ba      	ldrh	r2, [r7, #12]
 80109a8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	8afa      	ldrh	r2, [r7, #22]
 80109ae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80109b0:	69bb      	ldr	r3, [r7, #24]
 80109b2:	89fa      	ldrh	r2, [r7, #14]
 80109b4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80109be:	d047      	beq.n	8010a50 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	881b      	ldrh	r3, [r3, #0]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7ff fd73 	bl	80104b0 <ptr_to_mem>
 80109ca:	4602      	mov	r2, r0
 80109cc:	89fb      	ldrh	r3, [r7, #14]
 80109ce:	8053      	strh	r3, [r2, #2]
 80109d0:	e03e      	b.n	8010a50 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80109d2:	8bfb      	ldrh	r3, [r7, #30]
 80109d4:	f103 0214 	add.w	r2, r3, #20
 80109d8:	8abb      	ldrh	r3, [r7, #20]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d838      	bhi.n	8010a50 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80109de:	8afa      	ldrh	r2, [r7, #22]
 80109e0:	8bfb      	ldrh	r3, [r7, #30]
 80109e2:	4413      	add	r3, r2
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	3308      	adds	r3, #8
 80109e8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80109ea:	69bb      	ldr	r3, [r7, #24]
 80109ec:	881b      	ldrh	r3, [r3, #0]
 80109ee:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80109f2:	d106      	bne.n	8010a02 <mem_trim+0x192>
 80109f4:	4b1c      	ldr	r3, [pc, #112]	@ (8010a68 <mem_trim+0x1f8>)
 80109f6:	f240 3216 	movw	r2, #790	@ 0x316
 80109fa:	4920      	ldr	r1, [pc, #128]	@ (8010a7c <mem_trim+0x20c>)
 80109fc:	481c      	ldr	r0, [pc, #112]	@ (8010a70 <mem_trim+0x200>)
 80109fe:	f00a f9d9 	bl	801adb4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010a02:	89fb      	ldrh	r3, [r7, #14]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7ff fd53 	bl	80104b0 <ptr_to_mem>
 8010a0a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8010a80 <mem_trim+0x210>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	693a      	ldr	r2, [r7, #16]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d202      	bcs.n	8010a1c <mem_trim+0x1ac>
      lfree = mem2;
 8010a16:	4a1a      	ldr	r2, [pc, #104]	@ (8010a80 <mem_trim+0x210>)
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010a22:	69bb      	ldr	r3, [r7, #24]
 8010a24:	881a      	ldrh	r2, [r3, #0]
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	8afa      	ldrh	r2, [r7, #22]
 8010a2e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	89fa      	ldrh	r2, [r7, #14]
 8010a34:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	881b      	ldrh	r3, [r3, #0]
 8010a3a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010a3e:	d007      	beq.n	8010a50 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7ff fd33 	bl	80104b0 <ptr_to_mem>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	89fb      	ldrh	r3, [r7, #14]
 8010a4e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010a50:	4809      	ldr	r0, [pc, #36]	@ (8010a78 <mem_trim+0x208>)
 8010a52:	f00a f864 	bl	801ab1e <sys_mutex_unlock>
  return rmem;
 8010a56:	687b      	ldr	r3, [r7, #4]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3720      	adds	r7, #32
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	2400e08c 	.word	0x2400e08c
 8010a64:	2400e090 	.word	0x2400e090
 8010a68:	0801be10 	.word	0x0801be10
 8010a6c:	0801bf9c 	.word	0x0801bf9c
 8010a70:	0801be58 	.word	0x0801be58
 8010a74:	0801bfb4 	.word	0x0801bfb4
 8010a78:	2400e094 	.word	0x2400e094
 8010a7c:	0801bfd4 	.word	0x0801bfd4
 8010a80:	2400e098 	.word	0x2400e098

08010a84 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b088      	sub	sp, #32
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010a8e:	88fb      	ldrh	r3, [r7, #6]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d101      	bne.n	8010a98 <mem_malloc+0x14>
    return NULL;
 8010a94:	2300      	movs	r3, #0
 8010a96:	e0e2      	b.n	8010c5e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010a98:	88fb      	ldrh	r3, [r7, #6]
 8010a9a:	3303      	adds	r3, #3
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	f023 0303 	bic.w	r3, r3, #3
 8010aa2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010aa4:	8bbb      	ldrh	r3, [r7, #28]
 8010aa6:	2b0b      	cmp	r3, #11
 8010aa8:	d801      	bhi.n	8010aae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010aaa:	230c      	movs	r3, #12
 8010aac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010aae:	8bbb      	ldrh	r3, [r7, #28]
 8010ab0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010ab4:	d803      	bhi.n	8010abe <mem_malloc+0x3a>
 8010ab6:	8bba      	ldrh	r2, [r7, #28]
 8010ab8:	88fb      	ldrh	r3, [r7, #6]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d201      	bcs.n	8010ac2 <mem_malloc+0x3e>
    return NULL;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	e0cd      	b.n	8010c5e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010ac2:	4869      	ldr	r0, [pc, #420]	@ (8010c68 <mem_malloc+0x1e4>)
 8010ac4:	f00a f81c 	bl	801ab00 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010ac8:	4b68      	ldr	r3, [pc, #416]	@ (8010c6c <mem_malloc+0x1e8>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7ff fd01 	bl	80104d4 <mem_to_ptr>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	83fb      	strh	r3, [r7, #30]
 8010ad6:	e0b7      	b.n	8010c48 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010ad8:	8bfb      	ldrh	r3, [r7, #30]
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7ff fce8 	bl	80104b0 <ptr_to_mem>
 8010ae0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	791b      	ldrb	r3, [r3, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f040 80a7 	bne.w	8010c3a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	881b      	ldrh	r3, [r3, #0]
 8010af0:	461a      	mov	r2, r3
 8010af2:	8bfb      	ldrh	r3, [r7, #30]
 8010af4:	1ad3      	subs	r3, r2, r3
 8010af6:	f1a3 0208 	sub.w	r2, r3, #8
 8010afa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010afc:	429a      	cmp	r2, r3
 8010afe:	f0c0 809c 	bcc.w	8010c3a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	881b      	ldrh	r3, [r3, #0]
 8010b06:	461a      	mov	r2, r3
 8010b08:	8bfb      	ldrh	r3, [r7, #30]
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	f1a3 0208 	sub.w	r2, r3, #8
 8010b10:	8bbb      	ldrh	r3, [r7, #28]
 8010b12:	3314      	adds	r3, #20
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d333      	bcc.n	8010b80 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010b18:	8bfa      	ldrh	r2, [r7, #30]
 8010b1a:	8bbb      	ldrh	r3, [r7, #28]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	3308      	adds	r3, #8
 8010b22:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010b24:	8a7b      	ldrh	r3, [r7, #18]
 8010b26:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010b2a:	d106      	bne.n	8010b3a <mem_malloc+0xb6>
 8010b2c:	4b50      	ldr	r3, [pc, #320]	@ (8010c70 <mem_malloc+0x1ec>)
 8010b2e:	f240 3287 	movw	r2, #903	@ 0x387
 8010b32:	4950      	ldr	r1, [pc, #320]	@ (8010c74 <mem_malloc+0x1f0>)
 8010b34:	4850      	ldr	r0, [pc, #320]	@ (8010c78 <mem_malloc+0x1f4>)
 8010b36:	f00a f93d 	bl	801adb4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010b3a:	8a7b      	ldrh	r3, [r7, #18]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7ff fcb7 	bl	80104b0 <ptr_to_mem>
 8010b42:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2200      	movs	r2, #0
 8010b48:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	881a      	ldrh	r2, [r3, #0]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	8bfa      	ldrh	r2, [r7, #30]
 8010b56:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	8a7a      	ldrh	r2, [r7, #18]
 8010b5c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	2201      	movs	r2, #1
 8010b62:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	881b      	ldrh	r3, [r3, #0]
 8010b68:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010b6c:	d00b      	beq.n	8010b86 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	881b      	ldrh	r3, [r3, #0]
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7ff fc9c 	bl	80104b0 <ptr_to_mem>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	8a7b      	ldrh	r3, [r7, #18]
 8010b7c:	8053      	strh	r3, [r2, #2]
 8010b7e:	e002      	b.n	8010b86 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	2201      	movs	r2, #1
 8010b84:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010b86:	4b39      	ldr	r3, [pc, #228]	@ (8010c6c <mem_malloc+0x1e8>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	697a      	ldr	r2, [r7, #20]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d127      	bne.n	8010be0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010b90:	4b36      	ldr	r3, [pc, #216]	@ (8010c6c <mem_malloc+0x1e8>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010b96:	e005      	b.n	8010ba4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7ff fc87 	bl	80104b0 <ptr_to_mem>
 8010ba2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	791b      	ldrb	r3, [r3, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d004      	beq.n	8010bb6 <mem_malloc+0x132>
 8010bac:	4b33      	ldr	r3, [pc, #204]	@ (8010c7c <mem_malloc+0x1f8>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	69ba      	ldr	r2, [r7, #24]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d1f0      	bne.n	8010b98 <mem_malloc+0x114>
          }
          lfree = cur;
 8010bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8010c6c <mem_malloc+0x1e8>)
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8010c6c <mem_malloc+0x1e8>)
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8010c7c <mem_malloc+0x1f8>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d00b      	beq.n	8010be0 <mem_malloc+0x15c>
 8010bc8:	4b28      	ldr	r3, [pc, #160]	@ (8010c6c <mem_malloc+0x1e8>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	791b      	ldrb	r3, [r3, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d006      	beq.n	8010be0 <mem_malloc+0x15c>
 8010bd2:	4b27      	ldr	r3, [pc, #156]	@ (8010c70 <mem_malloc+0x1ec>)
 8010bd4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8010bd8:	4929      	ldr	r1, [pc, #164]	@ (8010c80 <mem_malloc+0x1fc>)
 8010bda:	4827      	ldr	r0, [pc, #156]	@ (8010c78 <mem_malloc+0x1f4>)
 8010bdc:	f00a f8ea 	bl	801adb4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010be0:	4821      	ldr	r0, [pc, #132]	@ (8010c68 <mem_malloc+0x1e4>)
 8010be2:	f009 ff9c 	bl	801ab1e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010be6:	8bba      	ldrh	r2, [r7, #28]
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	4413      	add	r3, r2
 8010bec:	3308      	adds	r3, #8
 8010bee:	4a23      	ldr	r2, [pc, #140]	@ (8010c7c <mem_malloc+0x1f8>)
 8010bf0:	6812      	ldr	r2, [r2, #0]
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d906      	bls.n	8010c04 <mem_malloc+0x180>
 8010bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8010c70 <mem_malloc+0x1ec>)
 8010bf8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8010bfc:	4921      	ldr	r1, [pc, #132]	@ (8010c84 <mem_malloc+0x200>)
 8010bfe:	481e      	ldr	r0, [pc, #120]	@ (8010c78 <mem_malloc+0x1f4>)
 8010c00:	f00a f8d8 	bl	801adb4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	f003 0303 	and.w	r3, r3, #3
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d006      	beq.n	8010c1c <mem_malloc+0x198>
 8010c0e:	4b18      	ldr	r3, [pc, #96]	@ (8010c70 <mem_malloc+0x1ec>)
 8010c10:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8010c14:	491c      	ldr	r1, [pc, #112]	@ (8010c88 <mem_malloc+0x204>)
 8010c16:	4818      	ldr	r0, [pc, #96]	@ (8010c78 <mem_malloc+0x1f4>)
 8010c18:	f00a f8cc 	bl	801adb4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	f003 0303 	and.w	r3, r3, #3
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d006      	beq.n	8010c34 <mem_malloc+0x1b0>
 8010c26:	4b12      	ldr	r3, [pc, #72]	@ (8010c70 <mem_malloc+0x1ec>)
 8010c28:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8010c2c:	4917      	ldr	r1, [pc, #92]	@ (8010c8c <mem_malloc+0x208>)
 8010c2e:	4812      	ldr	r0, [pc, #72]	@ (8010c78 <mem_malloc+0x1f4>)
 8010c30:	f00a f8c0 	bl	801adb4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	3308      	adds	r3, #8
 8010c38:	e011      	b.n	8010c5e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010c3a:	8bfb      	ldrh	r3, [r7, #30]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7ff fc37 	bl	80104b0 <ptr_to_mem>
 8010c42:	4603      	mov	r3, r0
 8010c44:	881b      	ldrh	r3, [r3, #0]
 8010c46:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010c48:	8bfa      	ldrh	r2, [r7, #30]
 8010c4a:	8bbb      	ldrh	r3, [r7, #28]
 8010c4c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8010c50:	429a      	cmp	r2, r3
 8010c52:	f4ff af41 	bcc.w	8010ad8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010c56:	4804      	ldr	r0, [pc, #16]	@ (8010c68 <mem_malloc+0x1e4>)
 8010c58:	f009 ff61 	bl	801ab1e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010c5c:	2300      	movs	r3, #0
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3720      	adds	r7, #32
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	2400e094 	.word	0x2400e094
 8010c6c:	2400e098 	.word	0x2400e098
 8010c70:	0801be10 	.word	0x0801be10
 8010c74:	0801bfd4 	.word	0x0801bfd4
 8010c78:	0801be58 	.word	0x0801be58
 8010c7c:	2400e090 	.word	0x2400e090
 8010c80:	0801bfe8 	.word	0x0801bfe8
 8010c84:	0801c004 	.word	0x0801c004
 8010c88:	0801c034 	.word	0x0801c034
 8010c8c:	0801c064 	.word	0x0801c064

08010c90 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b085      	sub	sp, #20
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	689b      	ldr	r3, [r3, #8]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	3303      	adds	r3, #3
 8010ca6:	f023 0303 	bic.w	r3, r3, #3
 8010caa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010cac:	2300      	movs	r3, #0
 8010cae:	60fb      	str	r3, [r7, #12]
 8010cb0:	e011      	b.n	8010cd6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	689b      	ldr	r3, [r3, #8]
 8010cc0:	68ba      	ldr	r2, [r7, #8]
 8010cc2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	881b      	ldrh	r3, [r3, #0]
 8010cc8:	461a      	mov	r2, r3
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	4413      	add	r3, r2
 8010cce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	60fb      	str	r3, [r7, #12]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	885b      	ldrh	r3, [r3, #2]
 8010cda:	461a      	mov	r2, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	dbe7      	blt.n	8010cb2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010ce2:	bf00      	nop
 8010ce4:	bf00      	nop
 8010ce6:	3714      	adds	r7, #20
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr

08010cf0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	80fb      	strh	r3, [r7, #6]
 8010cfa:	e009      	b.n	8010d10 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010cfc:	88fb      	ldrh	r3, [r7, #6]
 8010cfe:	4a08      	ldr	r2, [pc, #32]	@ (8010d20 <memp_init+0x30>)
 8010d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7ff ffc3 	bl	8010c90 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010d0a:	88fb      	ldrh	r3, [r7, #6]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	80fb      	strh	r3, [r7, #6]
 8010d10:	88fb      	ldrh	r3, [r7, #6]
 8010d12:	2b0d      	cmp	r3, #13
 8010d14:	d9f2      	bls.n	8010cfc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010d16:	bf00      	nop
 8010d18:	bf00      	nop
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	0801e998 	.word	0x0801e998

08010d24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010d2c:	f009 ff24 	bl	801ab78 <sys_arch_protect>
 8010d30:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	689b      	ldr	r3, [r3, #8]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d015      	beq.n	8010d6c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	689b      	ldr	r3, [r3, #8]
 8010d44:	68ba      	ldr	r2, [r7, #8]
 8010d46:	6812      	ldr	r2, [r2, #0]
 8010d48:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	f003 0303 	and.w	r3, r3, #3
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d006      	beq.n	8010d62 <do_memp_malloc_pool+0x3e>
 8010d54:	4b09      	ldr	r3, [pc, #36]	@ (8010d7c <do_memp_malloc_pool+0x58>)
 8010d56:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8010d5a:	4909      	ldr	r1, [pc, #36]	@ (8010d80 <do_memp_malloc_pool+0x5c>)
 8010d5c:	4809      	ldr	r0, [pc, #36]	@ (8010d84 <do_memp_malloc_pool+0x60>)
 8010d5e:	f00a f829 	bl	801adb4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	f009 ff16 	bl	801ab94 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	e003      	b.n	8010d74 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f009 ff11 	bl	801ab94 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010d72:	2300      	movs	r3, #0
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3710      	adds	r7, #16
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	0801c088 	.word	0x0801c088
 8010d80:	0801c0b8 	.word	0x0801c0b8
 8010d84:	0801c0dc 	.word	0x0801c0dc

08010d88 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d106      	bne.n	8010da4 <memp_malloc_pool+0x1c>
 8010d96:	4b0a      	ldr	r3, [pc, #40]	@ (8010dc0 <memp_malloc_pool+0x38>)
 8010d98:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8010d9c:	4909      	ldr	r1, [pc, #36]	@ (8010dc4 <memp_malloc_pool+0x3c>)
 8010d9e:	480a      	ldr	r0, [pc, #40]	@ (8010dc8 <memp_malloc_pool+0x40>)
 8010da0:	f00a f808 	bl	801adb4 <iprintf>
  if (desc == NULL) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d101      	bne.n	8010dae <memp_malloc_pool+0x26>
    return NULL;
 8010daa:	2300      	movs	r3, #0
 8010dac:	e003      	b.n	8010db6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7ff ffb8 	bl	8010d24 <do_memp_malloc_pool>
 8010db4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	0801c088 	.word	0x0801c088
 8010dc4:	0801c104 	.word	0x0801c104
 8010dc8:	0801c0dc 	.word	0x0801c0dc

08010dcc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010dd6:	79fb      	ldrb	r3, [r7, #7]
 8010dd8:	2b0d      	cmp	r3, #13
 8010dda:	d908      	bls.n	8010dee <memp_malloc+0x22>
 8010ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8010e08 <memp_malloc+0x3c>)
 8010dde:	f240 1257 	movw	r2, #343	@ 0x157
 8010de2:	490a      	ldr	r1, [pc, #40]	@ (8010e0c <memp_malloc+0x40>)
 8010de4:	480a      	ldr	r0, [pc, #40]	@ (8010e10 <memp_malloc+0x44>)
 8010de6:	f009 ffe5 	bl	801adb4 <iprintf>
 8010dea:	2300      	movs	r3, #0
 8010dec:	e008      	b.n	8010e00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010dee:	79fb      	ldrb	r3, [r7, #7]
 8010df0:	4a08      	ldr	r2, [pc, #32]	@ (8010e14 <memp_malloc+0x48>)
 8010df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7ff ff94 	bl	8010d24 <do_memp_malloc_pool>
 8010dfc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3710      	adds	r7, #16
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	0801c088 	.word	0x0801c088
 8010e0c:	0801c118 	.word	0x0801c118
 8010e10:	0801c0dc 	.word	0x0801c0dc
 8010e14:	0801e998 	.word	0x0801e998

08010e18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	f003 0303 	and.w	r3, r3, #3
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d006      	beq.n	8010e3a <do_memp_free_pool+0x22>
 8010e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8010e64 <do_memp_free_pool+0x4c>)
 8010e2e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8010e32:	490d      	ldr	r1, [pc, #52]	@ (8010e68 <do_memp_free_pool+0x50>)
 8010e34:	480d      	ldr	r0, [pc, #52]	@ (8010e6c <do_memp_free_pool+0x54>)
 8010e36:	f009 ffbd 	bl	801adb4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010e3e:	f009 fe9b 	bl	801ab78 <sys_arch_protect>
 8010e42:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	689b      	ldr	r3, [r3, #8]
 8010e52:	68fa      	ldr	r2, [r7, #12]
 8010e54:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010e56:	68b8      	ldr	r0, [r7, #8]
 8010e58:	f009 fe9c 	bl	801ab94 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010e5c:	bf00      	nop
 8010e5e:	3710      	adds	r7, #16
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	0801c088 	.word	0x0801c088
 8010e68:	0801c138 	.word	0x0801c138
 8010e6c:	0801c0dc 	.word	0x0801c0dc

08010e70 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d106      	bne.n	8010e8e <memp_free_pool+0x1e>
 8010e80:	4b0a      	ldr	r3, [pc, #40]	@ (8010eac <memp_free_pool+0x3c>)
 8010e82:	f240 1295 	movw	r2, #405	@ 0x195
 8010e86:	490a      	ldr	r1, [pc, #40]	@ (8010eb0 <memp_free_pool+0x40>)
 8010e88:	480a      	ldr	r0, [pc, #40]	@ (8010eb4 <memp_free_pool+0x44>)
 8010e8a:	f009 ff93 	bl	801adb4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d007      	beq.n	8010ea4 <memp_free_pool+0x34>
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d004      	beq.n	8010ea4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010e9a:	6839      	ldr	r1, [r7, #0]
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f7ff ffbb 	bl	8010e18 <do_memp_free_pool>
 8010ea2:	e000      	b.n	8010ea6 <memp_free_pool+0x36>
    return;
 8010ea4:	bf00      	nop
}
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	0801c088 	.word	0x0801c088
 8010eb0:	0801c104 	.word	0x0801c104
 8010eb4:	0801c0dc 	.word	0x0801c0dc

08010eb8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	6039      	str	r1, [r7, #0]
 8010ec2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010ec4:	79fb      	ldrb	r3, [r7, #7]
 8010ec6:	2b0d      	cmp	r3, #13
 8010ec8:	d907      	bls.n	8010eda <memp_free+0x22>
 8010eca:	4b0c      	ldr	r3, [pc, #48]	@ (8010efc <memp_free+0x44>)
 8010ecc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8010ed0:	490b      	ldr	r1, [pc, #44]	@ (8010f00 <memp_free+0x48>)
 8010ed2:	480c      	ldr	r0, [pc, #48]	@ (8010f04 <memp_free+0x4c>)
 8010ed4:	f009 ff6e 	bl	801adb4 <iprintf>
 8010ed8:	e00c      	b.n	8010ef4 <memp_free+0x3c>

  if (mem == NULL) {
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d008      	beq.n	8010ef2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010ee0:	79fb      	ldrb	r3, [r7, #7]
 8010ee2:	4a09      	ldr	r2, [pc, #36]	@ (8010f08 <memp_free+0x50>)
 8010ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ee8:	6839      	ldr	r1, [r7, #0]
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7ff ff94 	bl	8010e18 <do_memp_free_pool>
 8010ef0:	e000      	b.n	8010ef4 <memp_free+0x3c>
    return;
 8010ef2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010ef4:	3708      	adds	r7, #8
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	0801c088 	.word	0x0801c088
 8010f00:	0801c158 	.word	0x0801c158
 8010f04:	0801c0dc 	.word	0x0801c0dc
 8010f08:	0801e998 	.word	0x0801e998

08010f0c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010f10:	bf00      	nop
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr
	...

08010f1c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b086      	sub	sp, #24
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	60f8      	str	r0, [r7, #12]
 8010f24:	60b9      	str	r1, [r7, #8]
 8010f26:	607a      	str	r2, [r7, #4]
 8010f28:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d108      	bne.n	8010f42 <netif_add+0x26>
 8010f30:	4b57      	ldr	r3, [pc, #348]	@ (8011090 <netif_add+0x174>)
 8010f32:	f240 1227 	movw	r2, #295	@ 0x127
 8010f36:	4957      	ldr	r1, [pc, #348]	@ (8011094 <netif_add+0x178>)
 8010f38:	4857      	ldr	r0, [pc, #348]	@ (8011098 <netif_add+0x17c>)
 8010f3a:	f009 ff3b 	bl	801adb4 <iprintf>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	e0a2      	b.n	8011088 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d108      	bne.n	8010f5a <netif_add+0x3e>
 8010f48:	4b51      	ldr	r3, [pc, #324]	@ (8011090 <netif_add+0x174>)
 8010f4a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8010f4e:	4953      	ldr	r1, [pc, #332]	@ (801109c <netif_add+0x180>)
 8010f50:	4851      	ldr	r0, [pc, #324]	@ (8011098 <netif_add+0x17c>)
 8010f52:	f009 ff2f 	bl	801adb4 <iprintf>
 8010f56:	2300      	movs	r3, #0
 8010f58:	e096      	b.n	8011088 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d101      	bne.n	8010f64 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010f60:	4b4f      	ldr	r3, [pc, #316]	@ (80110a0 <netif_add+0x184>)
 8010f62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d101      	bne.n	8010f6e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010f6a:	4b4d      	ldr	r3, [pc, #308]	@ (80110a0 <netif_add+0x184>)
 8010f6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d101      	bne.n	8010f78 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010f74:	4b4a      	ldr	r3, [pc, #296]	@ (80110a0 <netif_add+0x184>)
 8010f76:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2200      	movs	r2, #0
 8010f82:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2200      	movs	r2, #0
 8010f88:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	4a45      	ldr	r2, [pc, #276]	@ (80110a4 <netif_add+0x188>)
 8010f8e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2200      	movs	r2, #0
 8010f94:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	6a3a      	ldr	r2, [r7, #32]
 8010fa8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010faa:	4b3f      	ldr	r3, [pc, #252]	@ (80110a8 <netif_add+0x18c>)
 8010fac:	781a      	ldrb	r2, [r3, #0]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010fb8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	68b9      	ldr	r1, [r7, #8]
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f000 f917 	bl	80111f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc8:	68f8      	ldr	r0, [r7, #12]
 8010fca:	4798      	blx	r3
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d001      	beq.n	8010fd6 <netif_add+0xba>
    return NULL;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	e058      	b.n	8011088 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010fdc:	2bff      	cmp	r3, #255	@ 0xff
 8010fde:	d103      	bne.n	8010fe8 <netif_add+0xcc>
        netif->num = 0;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010fec:	4b2f      	ldr	r3, [pc, #188]	@ (80110ac <netif_add+0x190>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	617b      	str	r3, [r7, #20]
 8010ff2:	e02b      	b.n	801104c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010ff4:	697a      	ldr	r2, [r7, #20]
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d106      	bne.n	801100a <netif_add+0xee>
 8010ffc:	4b24      	ldr	r3, [pc, #144]	@ (8011090 <netif_add+0x174>)
 8010ffe:	f240 128b 	movw	r2, #395	@ 0x18b
 8011002:	492b      	ldr	r1, [pc, #172]	@ (80110b0 <netif_add+0x194>)
 8011004:	4824      	ldr	r0, [pc, #144]	@ (8011098 <netif_add+0x17c>)
 8011006:	f009 fed5 	bl	801adb4 <iprintf>
        num_netifs++;
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	3301      	adds	r3, #1
 801100e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	2bff      	cmp	r3, #255	@ 0xff
 8011014:	dd06      	ble.n	8011024 <netif_add+0x108>
 8011016:	4b1e      	ldr	r3, [pc, #120]	@ (8011090 <netif_add+0x174>)
 8011018:	f240 128d 	movw	r2, #397	@ 0x18d
 801101c:	4925      	ldr	r1, [pc, #148]	@ (80110b4 <netif_add+0x198>)
 801101e:	481e      	ldr	r0, [pc, #120]	@ (8011098 <netif_add+0x17c>)
 8011020:	f009 fec8 	bl	801adb4 <iprintf>
        if (netif2->num == netif->num) {
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011030:	429a      	cmp	r2, r3
 8011032:	d108      	bne.n	8011046 <netif_add+0x12a>
          netif->num++;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801103a:	3301      	adds	r3, #1
 801103c:	b2da      	uxtb	r2, r3
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8011044:	e005      	b.n	8011052 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	617b      	str	r3, [r7, #20]
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d1d0      	bne.n	8010ff4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1be      	bne.n	8010fd6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801105e:	2bfe      	cmp	r3, #254	@ 0xfe
 8011060:	d103      	bne.n	801106a <netif_add+0x14e>
    netif_num = 0;
 8011062:	4b11      	ldr	r3, [pc, #68]	@ (80110a8 <netif_add+0x18c>)
 8011064:	2200      	movs	r2, #0
 8011066:	701a      	strb	r2, [r3, #0]
 8011068:	e006      	b.n	8011078 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011070:	3301      	adds	r3, #1
 8011072:	b2da      	uxtb	r2, r3
 8011074:	4b0c      	ldr	r3, [pc, #48]	@ (80110a8 <netif_add+0x18c>)
 8011076:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011078:	4b0c      	ldr	r3, [pc, #48]	@ (80110ac <netif_add+0x190>)
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011080:	4a0a      	ldr	r2, [pc, #40]	@ (80110ac <netif_add+0x190>)
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011086:	68fb      	ldr	r3, [r7, #12]
}
 8011088:	4618      	mov	r0, r3
 801108a:	3718      	adds	r7, #24
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	0801c174 	.word	0x0801c174
 8011094:	0801c208 	.word	0x0801c208
 8011098:	0801c1c4 	.word	0x0801c1c4
 801109c:	0801c224 	.word	0x0801c224
 80110a0:	0801ea10 	.word	0x0801ea10
 80110a4:	080114cf 	.word	0x080114cf
 80110a8:	24014ba8 	.word	0x24014ba8
 80110ac:	24014ba0 	.word	0x24014ba0
 80110b0:	0801c248 	.word	0x0801c248
 80110b4:	0801c25c 	.word	0x0801c25c

080110b8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80110c2:	6839      	ldr	r1, [r7, #0]
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f002 fc87 	bl	80139d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f007 f8c7 	bl	8018260 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 80110d2:	6839      	ldr	r1, [r7, #0]
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f001 f901 	bl	80122dc <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 80110da:	bf00      	nop
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
	...

080110e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d106      	bne.n	8011104 <netif_do_set_ipaddr+0x20>
 80110f6:	4b1d      	ldr	r3, [pc, #116]	@ (801116c <netif_do_set_ipaddr+0x88>)
 80110f8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80110fc:	491c      	ldr	r1, [pc, #112]	@ (8011170 <netif_do_set_ipaddr+0x8c>)
 80110fe:	481d      	ldr	r0, [pc, #116]	@ (8011174 <netif_do_set_ipaddr+0x90>)
 8011100:	f009 fe58 	bl	801adb4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d106      	bne.n	8011118 <netif_do_set_ipaddr+0x34>
 801110a:	4b18      	ldr	r3, [pc, #96]	@ (801116c <netif_do_set_ipaddr+0x88>)
 801110c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8011110:	4917      	ldr	r1, [pc, #92]	@ (8011170 <netif_do_set_ipaddr+0x8c>)
 8011112:	4818      	ldr	r0, [pc, #96]	@ (8011174 <netif_do_set_ipaddr+0x90>)
 8011114:	f009 fe4e 	bl	801adb4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	3304      	adds	r3, #4
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	429a      	cmp	r2, r3
 8011124:	d01c      	beq.n	8011160 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	3304      	adds	r3, #4
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011136:	f107 0314 	add.w	r3, r7, #20
 801113a:	4619      	mov	r1, r3
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f7ff ffbb 	bl	80110b8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d002      	beq.n	801114e <netif_do_set_ipaddr+0x6a>
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	e000      	b.n	8011150 <netif_do_set_ipaddr+0x6c>
 801114e:	2300      	movs	r3, #0
 8011150:	68fa      	ldr	r2, [r7, #12]
 8011152:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011154:	2101      	movs	r1, #1
 8011156:	68f8      	ldr	r0, [r7, #12]
 8011158:	f000 f8d2 	bl	8011300 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801115c:	2301      	movs	r3, #1
 801115e:	e000      	b.n	8011162 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011160:	2300      	movs	r3, #0
}
 8011162:	4618      	mov	r0, r3
 8011164:	3718      	adds	r7, #24
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	0801c174 	.word	0x0801c174
 8011170:	0801c28c 	.word	0x0801c28c
 8011174:	0801c1c4 	.word	0x0801c1c4

08011178 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011178:	b480      	push	{r7}
 801117a:	b085      	sub	sp, #20
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	60b9      	str	r1, [r7, #8]
 8011182:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	681a      	ldr	r2, [r3, #0]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	3308      	adds	r3, #8
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	429a      	cmp	r2, r3
 8011190:	d00a      	beq.n	80111a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d002      	beq.n	801119e <netif_do_set_netmask+0x26>
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	e000      	b.n	80111a0 <netif_do_set_netmask+0x28>
 801119e:	2300      	movs	r3, #0
 80111a0:	68fa      	ldr	r2, [r7, #12]
 80111a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80111a4:	2301      	movs	r3, #1
 80111a6:	e000      	b.n	80111aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80111a8:	2300      	movs	r3, #0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3714      	adds	r7, #20
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr

080111b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80111b6:	b480      	push	{r7}
 80111b8:	b085      	sub	sp, #20
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	60f8      	str	r0, [r7, #12]
 80111be:	60b9      	str	r1, [r7, #8]
 80111c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	330c      	adds	r3, #12
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d00a      	beq.n	80111e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d002      	beq.n	80111dc <netif_do_set_gw+0x26>
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	e000      	b.n	80111de <netif_do_set_gw+0x28>
 80111dc:	2300      	movs	r3, #0
 80111de:	68fa      	ldr	r2, [r7, #12]
 80111e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80111e2:	2301      	movs	r3, #1
 80111e4:	e000      	b.n	80111e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80111e6:	2300      	movs	r3, #0
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3714      	adds	r7, #20
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b088      	sub	sp, #32
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
 8011200:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011202:	2300      	movs	r3, #0
 8011204:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011206:	2300      	movs	r3, #0
 8011208:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d101      	bne.n	8011214 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011210:	4b1c      	ldr	r3, [pc, #112]	@ (8011284 <netif_set_addr+0x90>)
 8011212:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d101      	bne.n	801121e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801121a:	4b1a      	ldr	r3, [pc, #104]	@ (8011284 <netif_set_addr+0x90>)
 801121c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d101      	bne.n	8011228 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011224:	4b17      	ldr	r3, [pc, #92]	@ (8011284 <netif_set_addr+0x90>)
 8011226:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d003      	beq.n	8011236 <netif_set_addr+0x42>
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d101      	bne.n	801123a <netif_set_addr+0x46>
 8011236:	2301      	movs	r3, #1
 8011238:	e000      	b.n	801123c <netif_set_addr+0x48>
 801123a:	2300      	movs	r3, #0
 801123c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d006      	beq.n	8011252 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011244:	f107 0310 	add.w	r3, r7, #16
 8011248:	461a      	mov	r2, r3
 801124a:	68b9      	ldr	r1, [r7, #8]
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f7ff ff49 	bl	80110e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011252:	69fa      	ldr	r2, [r7, #28]
 8011254:	6879      	ldr	r1, [r7, #4]
 8011256:	68f8      	ldr	r0, [r7, #12]
 8011258:	f7ff ff8e 	bl	8011178 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801125c:	69ba      	ldr	r2, [r7, #24]
 801125e:	6839      	ldr	r1, [r7, #0]
 8011260:	68f8      	ldr	r0, [r7, #12]
 8011262:	f7ff ffa8 	bl	80111b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d106      	bne.n	801127a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801126c:	f107 0310 	add.w	r3, r7, #16
 8011270:	461a      	mov	r2, r3
 8011272:	68b9      	ldr	r1, [r7, #8]
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	f7ff ff35 	bl	80110e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801127a:	bf00      	nop
 801127c:	3720      	adds	r7, #32
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}
 8011282:	bf00      	nop
 8011284:	0801ea10 	.word	0x0801ea10

08011288 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011290:	4a04      	ldr	r2, [pc, #16]	@ (80112a4 <netif_set_default+0x1c>)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011296:	bf00      	nop
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	24014ba4 	.word	0x24014ba4

080112a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d107      	bne.n	80112c6 <netif_set_up+0x1e>
 80112b6:	4b0f      	ldr	r3, [pc, #60]	@ (80112f4 <netif_set_up+0x4c>)
 80112b8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80112bc:	490e      	ldr	r1, [pc, #56]	@ (80112f8 <netif_set_up+0x50>)
 80112be:	480f      	ldr	r0, [pc, #60]	@ (80112fc <netif_set_up+0x54>)
 80112c0:	f009 fd78 	bl	801adb4 <iprintf>
 80112c4:	e013      	b.n	80112ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80112cc:	f003 0301 	and.w	r3, r3, #1
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d10c      	bne.n	80112ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80112da:	f043 0301 	orr.w	r3, r3, #1
 80112de:	b2da      	uxtb	r2, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80112e6:	2103      	movs	r1, #3
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f000 f809 	bl	8011300 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	0801c174 	.word	0x0801c174
 80112f8:	0801c2fc 	.word	0x0801c2fc
 80112fc:	0801c1c4 	.word	0x0801c1c4

08011300 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	460b      	mov	r3, r1
 801130a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d106      	bne.n	8011320 <netif_issue_reports+0x20>
 8011312:	4b18      	ldr	r3, [pc, #96]	@ (8011374 <netif_issue_reports+0x74>)
 8011314:	f240 326d 	movw	r2, #877	@ 0x36d
 8011318:	4917      	ldr	r1, [pc, #92]	@ (8011378 <netif_issue_reports+0x78>)
 801131a:	4818      	ldr	r0, [pc, #96]	@ (801137c <netif_issue_reports+0x7c>)
 801131c:	f009 fd4a 	bl	801adb4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011326:	f003 0304 	and.w	r3, r3, #4
 801132a:	2b00      	cmp	r3, #0
 801132c:	d01e      	beq.n	801136c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011334:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011338:	2b00      	cmp	r3, #0
 801133a:	d017      	beq.n	801136c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801133c:	78fb      	ldrb	r3, [r7, #3]
 801133e:	f003 0301 	and.w	r3, r3, #1
 8011342:	2b00      	cmp	r3, #0
 8011344:	d013      	beq.n	801136e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	3304      	adds	r3, #4
 801134a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801134c:	2b00      	cmp	r3, #0
 801134e:	d00e      	beq.n	801136e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011356:	f003 0308 	and.w	r3, r3, #8
 801135a:	2b00      	cmp	r3, #0
 801135c:	d007      	beq.n	801136e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	3304      	adds	r3, #4
 8011362:	4619      	mov	r1, r3
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f007 fee5 	bl	8019134 <etharp_request>
 801136a:	e000      	b.n	801136e <netif_issue_reports+0x6e>
    return;
 801136c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801136e:	3708      	adds	r7, #8
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}
 8011374:	0801c174 	.word	0x0801c174
 8011378:	0801c318 	.word	0x0801c318
 801137c:	0801c1c4 	.word	0x0801c1c4

08011380 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d107      	bne.n	801139e <netif_set_down+0x1e>
 801138e:	4b12      	ldr	r3, [pc, #72]	@ (80113d8 <netif_set_down+0x58>)
 8011390:	f240 329b 	movw	r2, #923	@ 0x39b
 8011394:	4911      	ldr	r1, [pc, #68]	@ (80113dc <netif_set_down+0x5c>)
 8011396:	4812      	ldr	r0, [pc, #72]	@ (80113e0 <netif_set_down+0x60>)
 8011398:	f009 fd0c 	bl	801adb4 <iprintf>
 801139c:	e019      	b.n	80113d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80113a4:	f003 0301 	and.w	r3, r3, #1
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d012      	beq.n	80113d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80113b2:	f023 0301 	bic.w	r3, r3, #1
 80113b6:	b2da      	uxtb	r2, r3
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80113c4:	f003 0308 	and.w	r3, r3, #8
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d002      	beq.n	80113d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f007 fa6f 	bl	80188b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	0801c174 	.word	0x0801c174
 80113dc:	0801c33c 	.word	0x0801c33c
 80113e0:	0801c1c4 	.word	0x0801c1c4

080113e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d107      	bne.n	8011402 <netif_set_link_up+0x1e>
 80113f2:	4b13      	ldr	r3, [pc, #76]	@ (8011440 <netif_set_link_up+0x5c>)
 80113f4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80113f8:	4912      	ldr	r1, [pc, #72]	@ (8011444 <netif_set_link_up+0x60>)
 80113fa:	4813      	ldr	r0, [pc, #76]	@ (8011448 <netif_set_link_up+0x64>)
 80113fc:	f009 fcda 	bl	801adb4 <iprintf>
 8011400:	e01b      	b.n	801143a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011408:	f003 0304 	and.w	r3, r3, #4
 801140c:	2b00      	cmp	r3, #0
 801140e:	d114      	bne.n	801143a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011416:	f043 0304 	orr.w	r3, r3, #4
 801141a:	b2da      	uxtb	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011422:	2103      	movs	r1, #3
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7ff ff6b 	bl	8011300 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	69db      	ldr	r3, [r3, #28]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d003      	beq.n	801143a <netif_set_link_up+0x56>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	69db      	ldr	r3, [r3, #28]
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801143a:	3708      	adds	r7, #8
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}
 8011440:	0801c174 	.word	0x0801c174
 8011444:	0801c35c 	.word	0x0801c35c
 8011448:	0801c1c4 	.word	0x0801c1c4

0801144c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d107      	bne.n	801146a <netif_set_link_down+0x1e>
 801145a:	4b11      	ldr	r3, [pc, #68]	@ (80114a0 <netif_set_link_down+0x54>)
 801145c:	f240 4206 	movw	r2, #1030	@ 0x406
 8011460:	4910      	ldr	r1, [pc, #64]	@ (80114a4 <netif_set_link_down+0x58>)
 8011462:	4811      	ldr	r0, [pc, #68]	@ (80114a8 <netif_set_link_down+0x5c>)
 8011464:	f009 fca6 	bl	801adb4 <iprintf>
 8011468:	e017      	b.n	801149a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011470:	f003 0304 	and.w	r3, r3, #4
 8011474:	2b00      	cmp	r3, #0
 8011476:	d010      	beq.n	801149a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801147e:	f023 0304 	bic.w	r3, r3, #4
 8011482:	b2da      	uxtb	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	69db      	ldr	r3, [r3, #28]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d003      	beq.n	801149a <netif_set_link_down+0x4e>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	69db      	ldr	r3, [r3, #28]
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	0801c174 	.word	0x0801c174
 80114a4:	0801c380 	.word	0x0801c380
 80114a8:	0801c1c4 	.word	0x0801c1c4

080114ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d002      	beq.n	80114c2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	683a      	ldr	r2, [r7, #0]
 80114c0:	61da      	str	r2, [r3, #28]
  }
}
 80114c2:	bf00      	nop
 80114c4:	370c      	adds	r7, #12
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr

080114ce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80114ce:	b480      	push	{r7}
 80114d0:	b085      	sub	sp, #20
 80114d2:	af00      	add	r7, sp, #0
 80114d4:	60f8      	str	r0, [r7, #12]
 80114d6:	60b9      	str	r1, [r7, #8]
 80114d8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80114da:	f06f 030b 	mvn.w	r3, #11
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3714      	adds	r7, #20
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
	...

080114ec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b085      	sub	sp, #20
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80114f6:	79fb      	ldrb	r3, [r7, #7]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d013      	beq.n	8011524 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80114fc:	4b0d      	ldr	r3, [pc, #52]	@ (8011534 <netif_get_by_index+0x48>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	60fb      	str	r3, [r7, #12]
 8011502:	e00c      	b.n	801151e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801150a:	3301      	adds	r3, #1
 801150c:	b2db      	uxtb	r3, r3
 801150e:	79fa      	ldrb	r2, [r7, #7]
 8011510:	429a      	cmp	r2, r3
 8011512:	d101      	bne.n	8011518 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	e006      	b.n	8011526 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	60fb      	str	r3, [r7, #12]
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d1ef      	bne.n	8011504 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	3714      	adds	r7, #20
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	24014ba0 	.word	0x24014ba0

08011538 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801153e:	f009 fb1b 	bl	801ab78 <sys_arch_protect>
 8011542:	6038      	str	r0, [r7, #0]
 8011544:	4b0d      	ldr	r3, [pc, #52]	@ (801157c <pbuf_free_ooseq+0x44>)
 8011546:	2200      	movs	r2, #0
 8011548:	701a      	strb	r2, [r3, #0]
 801154a:	6838      	ldr	r0, [r7, #0]
 801154c:	f009 fb22 	bl	801ab94 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011550:	4b0b      	ldr	r3, [pc, #44]	@ (8011580 <pbuf_free_ooseq+0x48>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	607b      	str	r3, [r7, #4]
 8011556:	e00a      	b.n	801156e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801155c:	2b00      	cmp	r3, #0
 801155e:	d003      	beq.n	8011568 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f002 fa77 	bl	8013a54 <tcp_free_ooseq>
      return;
 8011566:	e005      	b.n	8011574 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	607b      	str	r3, [r7, #4]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d1f1      	bne.n	8011558 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	24014ba9 	.word	0x24014ba9
 8011580:	24014bbc 	.word	0x24014bbc

08011584 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801158c:	f7ff ffd4 	bl	8011538 <pbuf_free_ooseq>
}
 8011590:	bf00      	nop
 8011592:	3708      	adds	r7, #8
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}

08011598 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801159e:	f009 faeb 	bl	801ab78 <sys_arch_protect>
 80115a2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80115a4:	4b0f      	ldr	r3, [pc, #60]	@ (80115e4 <pbuf_pool_is_empty+0x4c>)
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80115aa:	4b0e      	ldr	r3, [pc, #56]	@ (80115e4 <pbuf_pool_is_empty+0x4c>)
 80115ac:	2201      	movs	r2, #1
 80115ae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f009 faef 	bl	801ab94 <sys_arch_unprotect>

  if (!queued) {
 80115b6:	78fb      	ldrb	r3, [r7, #3]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d10f      	bne.n	80115dc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80115bc:	2100      	movs	r1, #0
 80115be:	480a      	ldr	r0, [pc, #40]	@ (80115e8 <pbuf_pool_is_empty+0x50>)
 80115c0:	f7fe fdea 	bl	8010198 <tcpip_try_callback>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d008      	beq.n	80115dc <pbuf_pool_is_empty+0x44>
 80115ca:	f009 fad5 	bl	801ab78 <sys_arch_protect>
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	4b04      	ldr	r3, [pc, #16]	@ (80115e4 <pbuf_pool_is_empty+0x4c>)
 80115d2:	2200      	movs	r2, #0
 80115d4:	701a      	strb	r2, [r3, #0]
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f009 fadc 	bl	801ab94 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80115dc:	bf00      	nop
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	24014ba9 	.word	0x24014ba9
 80115e8:	08011585 	.word	0x08011585

080115ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b085      	sub	sp, #20
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	4611      	mov	r1, r2
 80115f8:	461a      	mov	r2, r3
 80115fa:	460b      	mov	r3, r1
 80115fc:	80fb      	strh	r3, [r7, #6]
 80115fe:	4613      	mov	r3, r2
 8011600:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2200      	movs	r2, #0
 8011606:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	68ba      	ldr	r2, [r7, #8]
 801160c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	88fa      	ldrh	r2, [r7, #6]
 8011612:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	88ba      	ldrh	r2, [r7, #4]
 8011618:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801161a:	8b3b      	ldrh	r3, [r7, #24]
 801161c:	b2da      	uxtb	r2, r3
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	7f3a      	ldrb	r2, [r7, #28]
 8011626:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2201      	movs	r2, #1
 801162c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2200      	movs	r2, #0
 8011632:	73da      	strb	r2, [r3, #15]
}
 8011634:	bf00      	nop
 8011636:	3714      	adds	r7, #20
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b08c      	sub	sp, #48	@ 0x30
 8011644:	af02      	add	r7, sp, #8
 8011646:	4603      	mov	r3, r0
 8011648:	71fb      	strb	r3, [r7, #7]
 801164a:	460b      	mov	r3, r1
 801164c:	80bb      	strh	r3, [r7, #4]
 801164e:	4613      	mov	r3, r2
 8011650:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011652:	79fb      	ldrb	r3, [r7, #7]
 8011654:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011656:	887b      	ldrh	r3, [r7, #2]
 8011658:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801165c:	f000 8082 	beq.w	8011764 <pbuf_alloc+0x124>
 8011660:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011664:	f300 80ca 	bgt.w	80117fc <pbuf_alloc+0x1bc>
 8011668:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801166c:	d010      	beq.n	8011690 <pbuf_alloc+0x50>
 801166e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011672:	f300 80c3 	bgt.w	80117fc <pbuf_alloc+0x1bc>
 8011676:	2b01      	cmp	r3, #1
 8011678:	d002      	beq.n	8011680 <pbuf_alloc+0x40>
 801167a:	2b41      	cmp	r3, #65	@ 0x41
 801167c:	f040 80be 	bne.w	80117fc <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011680:	887a      	ldrh	r2, [r7, #2]
 8011682:	88bb      	ldrh	r3, [r7, #4]
 8011684:	4619      	mov	r1, r3
 8011686:	2000      	movs	r0, #0
 8011688:	f000 f8d4 	bl	8011834 <pbuf_alloc_reference>
 801168c:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801168e:	e0bf      	b.n	8011810 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011690:	2300      	movs	r3, #0
 8011692:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011694:	2300      	movs	r3, #0
 8011696:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011698:	88bb      	ldrh	r3, [r7, #4]
 801169a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801169c:	200d      	movs	r0, #13
 801169e:	f7ff fb95 	bl	8010dcc <memp_malloc>
 80116a2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d109      	bne.n	80116be <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 80116aa:	f7ff ff75 	bl	8011598 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80116ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d002      	beq.n	80116ba <pbuf_alloc+0x7a>
            pbuf_free(p);
 80116b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80116b6:	f000 faab 	bl	8011c10 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80116ba:	2300      	movs	r3, #0
 80116bc:	e0a9      	b.n	8011812 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80116be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80116c0:	3303      	adds	r3, #3
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	f023 0303 	bic.w	r3, r3, #3
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 80116ce:	1a9b      	subs	r3, r3, r2
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	8b7a      	ldrh	r2, [r7, #26]
 80116d4:	4293      	cmp	r3, r2
 80116d6:	bf28      	it	cs
 80116d8:	4613      	movcs	r3, r2
 80116da:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80116dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80116de:	3310      	adds	r3, #16
 80116e0:	693a      	ldr	r2, [r7, #16]
 80116e2:	4413      	add	r3, r2
 80116e4:	3303      	adds	r3, #3
 80116e6:	f023 0303 	bic.w	r3, r3, #3
 80116ea:	4618      	mov	r0, r3
 80116ec:	89f9      	ldrh	r1, [r7, #14]
 80116ee:	8b7a      	ldrh	r2, [r7, #26]
 80116f0:	2300      	movs	r3, #0
 80116f2:	9301      	str	r3, [sp, #4]
 80116f4:	887b      	ldrh	r3, [r7, #2]
 80116f6:	9300      	str	r3, [sp, #0]
 80116f8:	460b      	mov	r3, r1
 80116fa:	4601      	mov	r1, r0
 80116fc:	6938      	ldr	r0, [r7, #16]
 80116fe:	f7ff ff75 	bl	80115ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	f003 0303 	and.w	r3, r3, #3
 801170a:	2b00      	cmp	r3, #0
 801170c:	d006      	beq.n	801171c <pbuf_alloc+0xdc>
 801170e:	4b43      	ldr	r3, [pc, #268]	@ (801181c <pbuf_alloc+0x1dc>)
 8011710:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011714:	4942      	ldr	r1, [pc, #264]	@ (8011820 <pbuf_alloc+0x1e0>)
 8011716:	4843      	ldr	r0, [pc, #268]	@ (8011824 <pbuf_alloc+0x1e4>)
 8011718:	f009 fb4c 	bl	801adb4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801171c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801171e:	3303      	adds	r3, #3
 8011720:	f023 0303 	bic.w	r3, r3, #3
 8011724:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 8011728:	4293      	cmp	r3, r2
 801172a:	d106      	bne.n	801173a <pbuf_alloc+0xfa>
 801172c:	4b3b      	ldr	r3, [pc, #236]	@ (801181c <pbuf_alloc+0x1dc>)
 801172e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011732:	493d      	ldr	r1, [pc, #244]	@ (8011828 <pbuf_alloc+0x1e8>)
 8011734:	483b      	ldr	r0, [pc, #236]	@ (8011824 <pbuf_alloc+0x1e4>)
 8011736:	f009 fb3d 	bl	801adb4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801173c:	2b00      	cmp	r3, #0
 801173e:	d102      	bne.n	8011746 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	627b      	str	r3, [r7, #36]	@ 0x24
 8011744:	e002      	b.n	801174c <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	693a      	ldr	r2, [r7, #16]
 801174a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011750:	8b7a      	ldrh	r2, [r7, #26]
 8011752:	89fb      	ldrh	r3, [r7, #14]
 8011754:	1ad3      	subs	r3, r2, r3
 8011756:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011758:	2300      	movs	r3, #0
 801175a:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801175c:	8b7b      	ldrh	r3, [r7, #26]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d19c      	bne.n	801169c <pbuf_alloc+0x5c>
      break;
 8011762:	e055      	b.n	8011810 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011764:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011766:	3303      	adds	r3, #3
 8011768:	b29b      	uxth	r3, r3
 801176a:	f023 0303 	bic.w	r3, r3, #3
 801176e:	b29a      	uxth	r2, r3
 8011770:	88bb      	ldrh	r3, [r7, #4]
 8011772:	3303      	adds	r3, #3
 8011774:	b29b      	uxth	r3, r3
 8011776:	f023 0303 	bic.w	r3, r3, #3
 801177a:	b29b      	uxth	r3, r3
 801177c:	4413      	add	r3, r2
 801177e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011780:	8b3b      	ldrh	r3, [r7, #24]
 8011782:	3310      	adds	r3, #16
 8011784:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011786:	8b3a      	ldrh	r2, [r7, #24]
 8011788:	88bb      	ldrh	r3, [r7, #4]
 801178a:	3303      	adds	r3, #3
 801178c:	f023 0303 	bic.w	r3, r3, #3
 8011790:	429a      	cmp	r2, r3
 8011792:	d306      	bcc.n	80117a2 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011794:	8afa      	ldrh	r2, [r7, #22]
 8011796:	88bb      	ldrh	r3, [r7, #4]
 8011798:	3303      	adds	r3, #3
 801179a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801179e:	429a      	cmp	r2, r3
 80117a0:	d201      	bcs.n	80117a6 <pbuf_alloc+0x166>
        return NULL;
 80117a2:	2300      	movs	r3, #0
 80117a4:	e035      	b.n	8011812 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80117a6:	8afb      	ldrh	r3, [r7, #22]
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7ff f96b 	bl	8010a84 <mem_malloc>
 80117ae:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80117b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d101      	bne.n	80117ba <pbuf_alloc+0x17a>
        return NULL;
 80117b6:	2300      	movs	r3, #0
 80117b8:	e02b      	b.n	8011812 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80117ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80117bc:	3310      	adds	r3, #16
 80117be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117c0:	4413      	add	r3, r2
 80117c2:	3303      	adds	r3, #3
 80117c4:	f023 0303 	bic.w	r3, r3, #3
 80117c8:	4618      	mov	r0, r3
 80117ca:	88b9      	ldrh	r1, [r7, #4]
 80117cc:	88ba      	ldrh	r2, [r7, #4]
 80117ce:	2300      	movs	r3, #0
 80117d0:	9301      	str	r3, [sp, #4]
 80117d2:	887b      	ldrh	r3, [r7, #2]
 80117d4:	9300      	str	r3, [sp, #0]
 80117d6:	460b      	mov	r3, r1
 80117d8:	4601      	mov	r1, r0
 80117da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117dc:	f7ff ff06 	bl	80115ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80117e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	f003 0303 	and.w	r3, r3, #3
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d010      	beq.n	801180e <pbuf_alloc+0x1ce>
 80117ec:	4b0b      	ldr	r3, [pc, #44]	@ (801181c <pbuf_alloc+0x1dc>)
 80117ee:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80117f2:	490e      	ldr	r1, [pc, #56]	@ (801182c <pbuf_alloc+0x1ec>)
 80117f4:	480b      	ldr	r0, [pc, #44]	@ (8011824 <pbuf_alloc+0x1e4>)
 80117f6:	f009 fadd 	bl	801adb4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80117fa:	e008      	b.n	801180e <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80117fc:	4b07      	ldr	r3, [pc, #28]	@ (801181c <pbuf_alloc+0x1dc>)
 80117fe:	f240 1227 	movw	r2, #295	@ 0x127
 8011802:	490b      	ldr	r1, [pc, #44]	@ (8011830 <pbuf_alloc+0x1f0>)
 8011804:	4807      	ldr	r0, [pc, #28]	@ (8011824 <pbuf_alloc+0x1e4>)
 8011806:	f009 fad5 	bl	801adb4 <iprintf>
      return NULL;
 801180a:	2300      	movs	r3, #0
 801180c:	e001      	b.n	8011812 <pbuf_alloc+0x1d2>
      break;
 801180e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011812:	4618      	mov	r0, r3
 8011814:	3728      	adds	r7, #40	@ 0x28
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	0801c3a4 	.word	0x0801c3a4
 8011820:	0801c3d4 	.word	0x0801c3d4
 8011824:	0801c404 	.word	0x0801c404
 8011828:	0801c42c 	.word	0x0801c42c
 801182c:	0801c460 	.word	0x0801c460
 8011830:	0801c48c 	.word	0x0801c48c

08011834 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b086      	sub	sp, #24
 8011838:	af02      	add	r7, sp, #8
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	460b      	mov	r3, r1
 801183e:	807b      	strh	r3, [r7, #2]
 8011840:	4613      	mov	r3, r2
 8011842:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011844:	883b      	ldrh	r3, [r7, #0]
 8011846:	2b41      	cmp	r3, #65	@ 0x41
 8011848:	d009      	beq.n	801185e <pbuf_alloc_reference+0x2a>
 801184a:	883b      	ldrh	r3, [r7, #0]
 801184c:	2b01      	cmp	r3, #1
 801184e:	d006      	beq.n	801185e <pbuf_alloc_reference+0x2a>
 8011850:	4b0f      	ldr	r3, [pc, #60]	@ (8011890 <pbuf_alloc_reference+0x5c>)
 8011852:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8011856:	490f      	ldr	r1, [pc, #60]	@ (8011894 <pbuf_alloc_reference+0x60>)
 8011858:	480f      	ldr	r0, [pc, #60]	@ (8011898 <pbuf_alloc_reference+0x64>)
 801185a:	f009 faab 	bl	801adb4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801185e:	200c      	movs	r0, #12
 8011860:	f7ff fab4 	bl	8010dcc <memp_malloc>
 8011864:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d101      	bne.n	8011870 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801186c:	2300      	movs	r3, #0
 801186e:	e00b      	b.n	8011888 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011870:	8879      	ldrh	r1, [r7, #2]
 8011872:	887a      	ldrh	r2, [r7, #2]
 8011874:	2300      	movs	r3, #0
 8011876:	9301      	str	r3, [sp, #4]
 8011878:	883b      	ldrh	r3, [r7, #0]
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	460b      	mov	r3, r1
 801187e:	6879      	ldr	r1, [r7, #4]
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f7ff feb3 	bl	80115ec <pbuf_init_alloced_pbuf>
  return p;
 8011886:	68fb      	ldr	r3, [r7, #12]
}
 8011888:	4618      	mov	r0, r3
 801188a:	3710      	adds	r7, #16
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	0801c3a4 	.word	0x0801c3a4
 8011894:	0801c4a8 	.word	0x0801c4a8
 8011898:	0801c404 	.word	0x0801c404

0801189c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b088      	sub	sp, #32
 80118a0:	af02      	add	r7, sp, #8
 80118a2:	607b      	str	r3, [r7, #4]
 80118a4:	4603      	mov	r3, r0
 80118a6:	73fb      	strb	r3, [r7, #15]
 80118a8:	460b      	mov	r3, r1
 80118aa:	81bb      	strh	r3, [r7, #12]
 80118ac:	4613      	mov	r3, r2
 80118ae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80118b0:	7bfb      	ldrb	r3, [r7, #15]
 80118b2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80118b4:	8a7b      	ldrh	r3, [r7, #18]
 80118b6:	3303      	adds	r3, #3
 80118b8:	f023 0203 	bic.w	r2, r3, #3
 80118bc:	89bb      	ldrh	r3, [r7, #12]
 80118be:	441a      	add	r2, r3
 80118c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d901      	bls.n	80118ca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80118c6:	2300      	movs	r3, #0
 80118c8:	e018      	b.n	80118fc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80118ca:	6a3b      	ldr	r3, [r7, #32]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d007      	beq.n	80118e0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80118d0:	8a7b      	ldrh	r3, [r7, #18]
 80118d2:	3303      	adds	r3, #3
 80118d4:	f023 0303 	bic.w	r3, r3, #3
 80118d8:	6a3a      	ldr	r2, [r7, #32]
 80118da:	4413      	add	r3, r2
 80118dc:	617b      	str	r3, [r7, #20]
 80118de:	e001      	b.n	80118e4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80118e0:	2300      	movs	r3, #0
 80118e2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	89b9      	ldrh	r1, [r7, #12]
 80118e8:	89ba      	ldrh	r2, [r7, #12]
 80118ea:	2302      	movs	r3, #2
 80118ec:	9301      	str	r3, [sp, #4]
 80118ee:	897b      	ldrh	r3, [r7, #10]
 80118f0:	9300      	str	r3, [sp, #0]
 80118f2:	460b      	mov	r3, r1
 80118f4:	6979      	ldr	r1, [r7, #20]
 80118f6:	f7ff fe79 	bl	80115ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80118fa:	687b      	ldr	r3, [r7, #4]
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3718      	adds	r7, #24
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}

08011904 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	460b      	mov	r3, r1
 801190e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d106      	bne.n	8011924 <pbuf_realloc+0x20>
 8011916:	4b3a      	ldr	r3, [pc, #232]	@ (8011a00 <pbuf_realloc+0xfc>)
 8011918:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801191c:	4939      	ldr	r1, [pc, #228]	@ (8011a04 <pbuf_realloc+0x100>)
 801191e:	483a      	ldr	r0, [pc, #232]	@ (8011a08 <pbuf_realloc+0x104>)
 8011920:	f009 fa48 	bl	801adb4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	891b      	ldrh	r3, [r3, #8]
 8011928:	887a      	ldrh	r2, [r7, #2]
 801192a:	429a      	cmp	r2, r3
 801192c:	d263      	bcs.n	80119f6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	891a      	ldrh	r2, [r3, #8]
 8011932:	887b      	ldrh	r3, [r7, #2]
 8011934:	1ad3      	subs	r3, r2, r3
 8011936:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011938:	887b      	ldrh	r3, [r7, #2]
 801193a:	817b      	strh	r3, [r7, #10]
  q = p;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011940:	e018      	b.n	8011974 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	895b      	ldrh	r3, [r3, #10]
 8011946:	897a      	ldrh	r2, [r7, #10]
 8011948:	1ad3      	subs	r3, r2, r3
 801194a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	891a      	ldrh	r2, [r3, #8]
 8011950:	893b      	ldrh	r3, [r7, #8]
 8011952:	1ad3      	subs	r3, r2, r3
 8011954:	b29a      	uxth	r2, r3
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d106      	bne.n	8011974 <pbuf_realloc+0x70>
 8011966:	4b26      	ldr	r3, [pc, #152]	@ (8011a00 <pbuf_realloc+0xfc>)
 8011968:	f240 12af 	movw	r2, #431	@ 0x1af
 801196c:	4927      	ldr	r1, [pc, #156]	@ (8011a0c <pbuf_realloc+0x108>)
 801196e:	4826      	ldr	r0, [pc, #152]	@ (8011a08 <pbuf_realloc+0x104>)
 8011970:	f009 fa20 	bl	801adb4 <iprintf>
  while (rem_len > q->len) {
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	895b      	ldrh	r3, [r3, #10]
 8011978:	897a      	ldrh	r2, [r7, #10]
 801197a:	429a      	cmp	r2, r3
 801197c:	d8e1      	bhi.n	8011942 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	7b1b      	ldrb	r3, [r3, #12]
 8011982:	f003 030f 	and.w	r3, r3, #15
 8011986:	2b00      	cmp	r3, #0
 8011988:	d121      	bne.n	80119ce <pbuf_realloc+0xca>
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	895b      	ldrh	r3, [r3, #10]
 801198e:	897a      	ldrh	r2, [r7, #10]
 8011990:	429a      	cmp	r2, r3
 8011992:	d01c      	beq.n	80119ce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	7b5b      	ldrb	r3, [r3, #13]
 8011998:	f003 0302 	and.w	r3, r3, #2
 801199c:	2b00      	cmp	r3, #0
 801199e:	d116      	bne.n	80119ce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	685a      	ldr	r2, [r3, #4]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	897b      	ldrh	r3, [r7, #10]
 80119ac:	4413      	add	r3, r2
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	4619      	mov	r1, r3
 80119b2:	68f8      	ldr	r0, [r7, #12]
 80119b4:	f7fe ff5c 	bl	8010870 <mem_trim>
 80119b8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d106      	bne.n	80119ce <pbuf_realloc+0xca>
 80119c0:	4b0f      	ldr	r3, [pc, #60]	@ (8011a00 <pbuf_realloc+0xfc>)
 80119c2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80119c6:	4912      	ldr	r1, [pc, #72]	@ (8011a10 <pbuf_realloc+0x10c>)
 80119c8:	480f      	ldr	r0, [pc, #60]	@ (8011a08 <pbuf_realloc+0x104>)
 80119ca:	f009 f9f3 	bl	801adb4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	897a      	ldrh	r2, [r7, #10]
 80119d2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	895a      	ldrh	r2, [r3, #10]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d004      	beq.n	80119ee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	4618      	mov	r0, r3
 80119ea:	f000 f911 	bl	8011c10 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2200      	movs	r2, #0
 80119f2:	601a      	str	r2, [r3, #0]
 80119f4:	e000      	b.n	80119f8 <pbuf_realloc+0xf4>
    return;
 80119f6:	bf00      	nop

}
 80119f8:	3710      	adds	r7, #16
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	0801c3a4 	.word	0x0801c3a4
 8011a04:	0801c4bc 	.word	0x0801c4bc
 8011a08:	0801c404 	.word	0x0801c404
 8011a0c:	0801c4d4 	.word	0x0801c4d4
 8011a10:	0801c4ec 	.word	0x0801c4ec

08011a14 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b086      	sub	sp, #24
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	4613      	mov	r3, r2
 8011a20:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d106      	bne.n	8011a36 <pbuf_add_header_impl+0x22>
 8011a28:	4b2b      	ldr	r3, [pc, #172]	@ (8011ad8 <pbuf_add_header_impl+0xc4>)
 8011a2a:	f240 12df 	movw	r2, #479	@ 0x1df
 8011a2e:	492b      	ldr	r1, [pc, #172]	@ (8011adc <pbuf_add_header_impl+0xc8>)
 8011a30:	482b      	ldr	r0, [pc, #172]	@ (8011ae0 <pbuf_add_header_impl+0xcc>)
 8011a32:	f009 f9bf 	bl	801adb4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d003      	beq.n	8011a44 <pbuf_add_header_impl+0x30>
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011a42:	d301      	bcc.n	8011a48 <pbuf_add_header_impl+0x34>
    return 1;
 8011a44:	2301      	movs	r3, #1
 8011a46:	e043      	b.n	8011ad0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d101      	bne.n	8011a52 <pbuf_add_header_impl+0x3e>
    return 0;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	e03e      	b.n	8011ad0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	891a      	ldrh	r2, [r3, #8]
 8011a5a:	8a7b      	ldrh	r3, [r7, #18]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	8a7a      	ldrh	r2, [r7, #18]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d901      	bls.n	8011a6a <pbuf_add_header_impl+0x56>
    return 1;
 8011a66:	2301      	movs	r3, #1
 8011a68:	e032      	b.n	8011ad0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	7b1b      	ldrb	r3, [r3, #12]
 8011a6e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011a70:	8a3b      	ldrh	r3, [r7, #16]
 8011a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00c      	beq.n	8011a94 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	685a      	ldr	r2, [r3, #4]
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	425b      	negs	r3, r3
 8011a82:	4413      	add	r3, r2
 8011a84:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	3310      	adds	r3, #16
 8011a8a:	697a      	ldr	r2, [r7, #20]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d20d      	bcs.n	8011aac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011a90:	2301      	movs	r3, #1
 8011a92:	e01d      	b.n	8011ad0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011a94:	79fb      	ldrb	r3, [r7, #7]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d006      	beq.n	8011aa8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	685a      	ldr	r2, [r3, #4]
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	425b      	negs	r3, r3
 8011aa2:	4413      	add	r3, r2
 8011aa4:	617b      	str	r3, [r7, #20]
 8011aa6:	e001      	b.n	8011aac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e011      	b.n	8011ad0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	697a      	ldr	r2, [r7, #20]
 8011ab0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	895a      	ldrh	r2, [r3, #10]
 8011ab6:	8a7b      	ldrh	r3, [r7, #18]
 8011ab8:	4413      	add	r3, r2
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	891a      	ldrh	r2, [r3, #8]
 8011ac4:	8a7b      	ldrh	r3, [r7, #18]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	b29a      	uxth	r2, r3
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	811a      	strh	r2, [r3, #8]


  return 0;
 8011ace:	2300      	movs	r3, #0
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3718      	adds	r7, #24
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}
 8011ad8:	0801c3a4 	.word	0x0801c3a4
 8011adc:	0801c508 	.word	0x0801c508
 8011ae0:	0801c404 	.word	0x0801c404

08011ae4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011aee:	2200      	movs	r2, #0
 8011af0:	6839      	ldr	r1, [r7, #0]
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f7ff ff8e 	bl	8011a14 <pbuf_add_header_impl>
 8011af8:	4603      	mov	r3, r0
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3708      	adds	r7, #8
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
	...

08011b04 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b084      	sub	sp, #16
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d106      	bne.n	8011b22 <pbuf_remove_header+0x1e>
 8011b14:	4b20      	ldr	r3, [pc, #128]	@ (8011b98 <pbuf_remove_header+0x94>)
 8011b16:	f240 224b 	movw	r2, #587	@ 0x24b
 8011b1a:	4920      	ldr	r1, [pc, #128]	@ (8011b9c <pbuf_remove_header+0x98>)
 8011b1c:	4820      	ldr	r0, [pc, #128]	@ (8011ba0 <pbuf_remove_header+0x9c>)
 8011b1e:	f009 f949 	bl	801adb4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d003      	beq.n	8011b30 <pbuf_remove_header+0x2c>
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011b2e:	d301      	bcc.n	8011b34 <pbuf_remove_header+0x30>
    return 1;
 8011b30:	2301      	movs	r3, #1
 8011b32:	e02c      	b.n	8011b8e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d101      	bne.n	8011b3e <pbuf_remove_header+0x3a>
    return 0;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	e027      	b.n	8011b8e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	895b      	ldrh	r3, [r3, #10]
 8011b46:	89fa      	ldrh	r2, [r7, #14]
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d908      	bls.n	8011b5e <pbuf_remove_header+0x5a>
 8011b4c:	4b12      	ldr	r3, [pc, #72]	@ (8011b98 <pbuf_remove_header+0x94>)
 8011b4e:	f240 2255 	movw	r2, #597	@ 0x255
 8011b52:	4914      	ldr	r1, [pc, #80]	@ (8011ba4 <pbuf_remove_header+0xa0>)
 8011b54:	4812      	ldr	r0, [pc, #72]	@ (8011ba0 <pbuf_remove_header+0x9c>)
 8011b56:	f009 f92d 	bl	801adb4 <iprintf>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e017      	b.n	8011b8e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	685a      	ldr	r2, [r3, #4]
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	441a      	add	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	895a      	ldrh	r2, [r3, #10]
 8011b74:	89fb      	ldrh	r3, [r7, #14]
 8011b76:	1ad3      	subs	r3, r2, r3
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	891a      	ldrh	r2, [r3, #8]
 8011b82:	89fb      	ldrh	r3, [r7, #14]
 8011b84:	1ad3      	subs	r3, r2, r3
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011b8c:	2300      	movs	r3, #0
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3710      	adds	r7, #16
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}
 8011b96:	bf00      	nop
 8011b98:	0801c3a4 	.word	0x0801c3a4
 8011b9c:	0801c508 	.word	0x0801c508
 8011ba0:	0801c404 	.word	0x0801c404
 8011ba4:	0801c514 	.word	0x0801c514

08011ba8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	807b      	strh	r3, [r7, #2]
 8011bb4:	4613      	mov	r3, r2
 8011bb6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011bb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	da08      	bge.n	8011bd2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011bc4:	425b      	negs	r3, r3
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f7ff ff9b 	bl	8011b04 <pbuf_remove_header>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	e007      	b.n	8011be2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011bd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011bd6:	787a      	ldrb	r2, [r7, #1]
 8011bd8:	4619      	mov	r1, r3
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7ff ff1a 	bl	8011a14 <pbuf_add_header_impl>
 8011be0:	4603      	mov	r3, r0
  }
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b082      	sub	sp, #8
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011bf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011bfa:	2201      	movs	r2, #1
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7ff ffd2 	bl	8011ba8 <pbuf_header_impl>
 8011c04:	4603      	mov	r3, r0
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3708      	adds	r7, #8
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
	...

08011c10 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b088      	sub	sp, #32
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d10b      	bne.n	8011c36 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d106      	bne.n	8011c32 <pbuf_free+0x22>
 8011c24:	4b3b      	ldr	r3, [pc, #236]	@ (8011d14 <pbuf_free+0x104>)
 8011c26:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8011c2a:	493b      	ldr	r1, [pc, #236]	@ (8011d18 <pbuf_free+0x108>)
 8011c2c:	483b      	ldr	r0, [pc, #236]	@ (8011d1c <pbuf_free+0x10c>)
 8011c2e:	f009 f8c1 	bl	801adb4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011c32:	2300      	movs	r3, #0
 8011c34:	e069      	b.n	8011d0a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011c36:	2300      	movs	r3, #0
 8011c38:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011c3a:	e062      	b.n	8011d02 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011c3c:	f008 ff9c 	bl	801ab78 <sys_arch_protect>
 8011c40:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	7b9b      	ldrb	r3, [r3, #14]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d106      	bne.n	8011c58 <pbuf_free+0x48>
 8011c4a:	4b32      	ldr	r3, [pc, #200]	@ (8011d14 <pbuf_free+0x104>)
 8011c4c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8011c50:	4933      	ldr	r1, [pc, #204]	@ (8011d20 <pbuf_free+0x110>)
 8011c52:	4832      	ldr	r0, [pc, #200]	@ (8011d1c <pbuf_free+0x10c>)
 8011c54:	f009 f8ae 	bl	801adb4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	7b9b      	ldrb	r3, [r3, #14]
 8011c5c:	3b01      	subs	r3, #1
 8011c5e:	b2da      	uxtb	r2, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	739a      	strb	r2, [r3, #14]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	7b9b      	ldrb	r3, [r3, #14]
 8011c68:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011c6a:	69b8      	ldr	r0, [r7, #24]
 8011c6c:	f008 ff92 	bl	801ab94 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011c70:	7dfb      	ldrb	r3, [r7, #23]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d143      	bne.n	8011cfe <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	7b1b      	ldrb	r3, [r3, #12]
 8011c80:	f003 030f 	and.w	r3, r3, #15
 8011c84:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	7b5b      	ldrb	r3, [r3, #13]
 8011c8a:	f003 0302 	and.w	r3, r3, #2
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d011      	beq.n	8011cb6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	691b      	ldr	r3, [r3, #16]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d106      	bne.n	8011cac <pbuf_free+0x9c>
 8011c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8011d14 <pbuf_free+0x104>)
 8011ca0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8011ca4:	491f      	ldr	r1, [pc, #124]	@ (8011d24 <pbuf_free+0x114>)
 8011ca6:	481d      	ldr	r0, [pc, #116]	@ (8011d1c <pbuf_free+0x10c>)
 8011ca8:	f009 f884 	bl	801adb4 <iprintf>
        pc->custom_free_function(p);
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	691b      	ldr	r3, [r3, #16]
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	4798      	blx	r3
 8011cb4:	e01d      	b.n	8011cf2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011cb6:	7bfb      	ldrb	r3, [r7, #15]
 8011cb8:	2b02      	cmp	r3, #2
 8011cba:	d104      	bne.n	8011cc6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011cbc:	6879      	ldr	r1, [r7, #4]
 8011cbe:	200d      	movs	r0, #13
 8011cc0:	f7ff f8fa 	bl	8010eb8 <memp_free>
 8011cc4:	e015      	b.n	8011cf2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011cc6:	7bfb      	ldrb	r3, [r7, #15]
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d104      	bne.n	8011cd6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011ccc:	6879      	ldr	r1, [r7, #4]
 8011cce:	200c      	movs	r0, #12
 8011cd0:	f7ff f8f2 	bl	8010eb8 <memp_free>
 8011cd4:	e00d      	b.n	8011cf2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d103      	bne.n	8011ce4 <pbuf_free+0xd4>
          mem_free(p);
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f7fe fd37 	bl	8010750 <mem_free>
 8011ce2:	e006      	b.n	8011cf2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8011d14 <pbuf_free+0x104>)
 8011ce6:	f240 320f 	movw	r2, #783	@ 0x30f
 8011cea:	490f      	ldr	r1, [pc, #60]	@ (8011d28 <pbuf_free+0x118>)
 8011cec:	480b      	ldr	r0, [pc, #44]	@ (8011d1c <pbuf_free+0x10c>)
 8011cee:	f009 f861 	bl	801adb4 <iprintf>
        }
      }
      count++;
 8011cf2:	7ffb      	ldrb	r3, [r7, #31]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	607b      	str	r3, [r7, #4]
 8011cfc:	e001      	b.n	8011d02 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d199      	bne.n	8011c3c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3720      	adds	r7, #32
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	0801c3a4 	.word	0x0801c3a4
 8011d18:	0801c508 	.word	0x0801c508
 8011d1c:	0801c404 	.word	0x0801c404
 8011d20:	0801c534 	.word	0x0801c534
 8011d24:	0801c54c 	.word	0x0801c54c
 8011d28:	0801c570 	.word	0x0801c570

08011d2c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b085      	sub	sp, #20
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011d34:	2300      	movs	r3, #0
 8011d36:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011d38:	e005      	b.n	8011d46 <pbuf_clen+0x1a>
    ++len;
 8011d3a:	89fb      	ldrh	r3, [r7, #14]
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d1f6      	bne.n	8011d3a <pbuf_clen+0xe>
  }
  return len;
 8011d4c:	89fb      	ldrh	r3, [r7, #14]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3714      	adds	r7, #20
 8011d52:	46bd      	mov	sp, r7
 8011d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d58:	4770      	bx	lr
	...

08011d5c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b084      	sub	sp, #16
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d016      	beq.n	8011d98 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011d6a:	f008 ff05 	bl	801ab78 <sys_arch_protect>
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	7b9b      	ldrb	r3, [r3, #14]
 8011d74:	3301      	adds	r3, #1
 8011d76:	b2da      	uxtb	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	739a      	strb	r2, [r3, #14]
 8011d7c:	68f8      	ldr	r0, [r7, #12]
 8011d7e:	f008 ff09 	bl	801ab94 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	7b9b      	ldrb	r3, [r3, #14]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d106      	bne.n	8011d98 <pbuf_ref+0x3c>
 8011d8a:	4b05      	ldr	r3, [pc, #20]	@ (8011da0 <pbuf_ref+0x44>)
 8011d8c:	f240 3242 	movw	r2, #834	@ 0x342
 8011d90:	4904      	ldr	r1, [pc, #16]	@ (8011da4 <pbuf_ref+0x48>)
 8011d92:	4805      	ldr	r0, [pc, #20]	@ (8011da8 <pbuf_ref+0x4c>)
 8011d94:	f009 f80e 	bl	801adb4 <iprintf>
  }
}
 8011d98:	bf00      	nop
 8011d9a:	3710      	adds	r7, #16
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}
 8011da0:	0801c3a4 	.word	0x0801c3a4
 8011da4:	0801c584 	.word	0x0801c584
 8011da8:	0801c404 	.word	0x0801c404

08011dac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d002      	beq.n	8011dc2 <pbuf_cat+0x16>
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d107      	bne.n	8011dd2 <pbuf_cat+0x26>
 8011dc2:	4b20      	ldr	r3, [pc, #128]	@ (8011e44 <pbuf_cat+0x98>)
 8011dc4:	f240 3259 	movw	r2, #857	@ 0x359
 8011dc8:	491f      	ldr	r1, [pc, #124]	@ (8011e48 <pbuf_cat+0x9c>)
 8011dca:	4820      	ldr	r0, [pc, #128]	@ (8011e4c <pbuf_cat+0xa0>)
 8011dcc:	f008 fff2 	bl	801adb4 <iprintf>
 8011dd0:	e034      	b.n	8011e3c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	60fb      	str	r3, [r7, #12]
 8011dd6:	e00a      	b.n	8011dee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	891a      	ldrh	r2, [r3, #8]
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	891b      	ldrh	r3, [r3, #8]
 8011de0:	4413      	add	r3, r2
 8011de2:	b29a      	uxth	r2, r3
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	60fb      	str	r3, [r7, #12]
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1f0      	bne.n	8011dd8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	891a      	ldrh	r2, [r3, #8]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	895b      	ldrh	r3, [r3, #10]
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d006      	beq.n	8011e10 <pbuf_cat+0x64>
 8011e02:	4b10      	ldr	r3, [pc, #64]	@ (8011e44 <pbuf_cat+0x98>)
 8011e04:	f240 3262 	movw	r2, #866	@ 0x362
 8011e08:	4911      	ldr	r1, [pc, #68]	@ (8011e50 <pbuf_cat+0xa4>)
 8011e0a:	4810      	ldr	r0, [pc, #64]	@ (8011e4c <pbuf_cat+0xa0>)
 8011e0c:	f008 ffd2 	bl	801adb4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d006      	beq.n	8011e26 <pbuf_cat+0x7a>
 8011e18:	4b0a      	ldr	r3, [pc, #40]	@ (8011e44 <pbuf_cat+0x98>)
 8011e1a:	f240 3263 	movw	r2, #867	@ 0x363
 8011e1e:	490d      	ldr	r1, [pc, #52]	@ (8011e54 <pbuf_cat+0xa8>)
 8011e20:	480a      	ldr	r0, [pc, #40]	@ (8011e4c <pbuf_cat+0xa0>)
 8011e22:	f008 ffc7 	bl	801adb4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	891a      	ldrh	r2, [r3, #8]
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	891b      	ldrh	r3, [r3, #8]
 8011e2e:	4413      	add	r3, r2
 8011e30:	b29a      	uxth	r2, r3
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	683a      	ldr	r2, [r7, #0]
 8011e3a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011e3c:	3710      	adds	r7, #16
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	0801c3a4 	.word	0x0801c3a4
 8011e48:	0801c598 	.word	0x0801c598
 8011e4c:	0801c404 	.word	0x0801c404
 8011e50:	0801c5d0 	.word	0x0801c5d0
 8011e54:	0801c600 	.word	0x0801c600

08011e58 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011e62:	6839      	ldr	r1, [r7, #0]
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f7ff ffa1 	bl	8011dac <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011e6a:	6838      	ldr	r0, [r7, #0]
 8011e6c:	f7ff ff76 	bl	8011d5c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011e70:	bf00      	nop
 8011e72:	3708      	adds	r7, #8
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b086      	sub	sp, #24
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011e82:	2300      	movs	r3, #0
 8011e84:	617b      	str	r3, [r7, #20]
 8011e86:	2300      	movs	r3, #0
 8011e88:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d008      	beq.n	8011ea2 <pbuf_copy+0x2a>
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d005      	beq.n	8011ea2 <pbuf_copy+0x2a>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	891a      	ldrh	r2, [r3, #8]
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	891b      	ldrh	r3, [r3, #8]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d209      	bcs.n	8011eb6 <pbuf_copy+0x3e>
 8011ea2:	4b57      	ldr	r3, [pc, #348]	@ (8012000 <pbuf_copy+0x188>)
 8011ea4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8011ea8:	4956      	ldr	r1, [pc, #344]	@ (8012004 <pbuf_copy+0x18c>)
 8011eaa:	4857      	ldr	r0, [pc, #348]	@ (8012008 <pbuf_copy+0x190>)
 8011eac:	f008 ff82 	bl	801adb4 <iprintf>
 8011eb0:	f06f 030f 	mvn.w	r3, #15
 8011eb4:	e09f      	b.n	8011ff6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	895b      	ldrh	r3, [r3, #10]
 8011eba:	461a      	mov	r2, r3
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	1ad2      	subs	r2, r2, r3
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	895b      	ldrh	r3, [r3, #10]
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	1acb      	subs	r3, r1, r3
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d306      	bcc.n	8011edc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	895b      	ldrh	r3, [r3, #10]
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	1ad3      	subs	r3, r2, r3
 8011ed8:	60fb      	str	r3, [r7, #12]
 8011eda:	e005      	b.n	8011ee8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	895b      	ldrh	r3, [r3, #10]
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	685a      	ldr	r2, [r3, #4]
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	18d0      	adds	r0, r2, r3
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	685a      	ldr	r2, [r3, #4]
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	68fa      	ldr	r2, [r7, #12]
 8011efa:	4619      	mov	r1, r3
 8011efc:	f009 f893 	bl	801b026 <memcpy>
    offset_to += len;
 8011f00:	697a      	ldr	r2, [r7, #20]
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	4413      	add	r3, r2
 8011f06:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011f08:	693a      	ldr	r2, [r7, #16]
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	4413      	add	r3, r2
 8011f0e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	895b      	ldrh	r3, [r3, #10]
 8011f14:	461a      	mov	r2, r3
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	4293      	cmp	r3, r2
 8011f1a:	d906      	bls.n	8011f2a <pbuf_copy+0xb2>
 8011f1c:	4b38      	ldr	r3, [pc, #224]	@ (8012000 <pbuf_copy+0x188>)
 8011f1e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8011f22:	493a      	ldr	r1, [pc, #232]	@ (801200c <pbuf_copy+0x194>)
 8011f24:	4838      	ldr	r0, [pc, #224]	@ (8012008 <pbuf_copy+0x190>)
 8011f26:	f008 ff45 	bl	801adb4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	895b      	ldrh	r3, [r3, #10]
 8011f2e:	461a      	mov	r2, r3
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d906      	bls.n	8011f44 <pbuf_copy+0xcc>
 8011f36:	4b32      	ldr	r3, [pc, #200]	@ (8012000 <pbuf_copy+0x188>)
 8011f38:	f240 32da 	movw	r2, #986	@ 0x3da
 8011f3c:	4934      	ldr	r1, [pc, #208]	@ (8012010 <pbuf_copy+0x198>)
 8011f3e:	4832      	ldr	r0, [pc, #200]	@ (8012008 <pbuf_copy+0x190>)
 8011f40:	f008 ff38 	bl	801adb4 <iprintf>
    if (offset_from >= p_from->len) {
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	895b      	ldrh	r3, [r3, #10]
 8011f48:	461a      	mov	r2, r3
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	d304      	bcc.n	8011f5a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011f50:	2300      	movs	r3, #0
 8011f52:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	895b      	ldrh	r3, [r3, #10]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d114      	bne.n	8011f90 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011f66:	2300      	movs	r3, #0
 8011f68:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d10c      	bne.n	8011f90 <pbuf_copy+0x118>
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d009      	beq.n	8011f90 <pbuf_copy+0x118>
 8011f7c:	4b20      	ldr	r3, [pc, #128]	@ (8012000 <pbuf_copy+0x188>)
 8011f7e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8011f82:	4924      	ldr	r1, [pc, #144]	@ (8012014 <pbuf_copy+0x19c>)
 8011f84:	4820      	ldr	r0, [pc, #128]	@ (8012008 <pbuf_copy+0x190>)
 8011f86:	f008 ff15 	bl	801adb4 <iprintf>
 8011f8a:	f06f 030f 	mvn.w	r3, #15
 8011f8e:	e032      	b.n	8011ff6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d013      	beq.n	8011fbe <pbuf_copy+0x146>
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	895a      	ldrh	r2, [r3, #10]
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	891b      	ldrh	r3, [r3, #8]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d10d      	bne.n	8011fbe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d009      	beq.n	8011fbe <pbuf_copy+0x146>
 8011faa:	4b15      	ldr	r3, [pc, #84]	@ (8012000 <pbuf_copy+0x188>)
 8011fac:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8011fb0:	4919      	ldr	r1, [pc, #100]	@ (8012018 <pbuf_copy+0x1a0>)
 8011fb2:	4815      	ldr	r0, [pc, #84]	@ (8012008 <pbuf_copy+0x190>)
 8011fb4:	f008 fefe 	bl	801adb4 <iprintf>
 8011fb8:	f06f 0305 	mvn.w	r3, #5
 8011fbc:	e01b      	b.n	8011ff6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d013      	beq.n	8011fec <pbuf_copy+0x174>
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	895a      	ldrh	r2, [r3, #10]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	891b      	ldrh	r3, [r3, #8]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d10d      	bne.n	8011fec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d009      	beq.n	8011fec <pbuf_copy+0x174>
 8011fd8:	4b09      	ldr	r3, [pc, #36]	@ (8012000 <pbuf_copy+0x188>)
 8011fda:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8011fde:	490e      	ldr	r1, [pc, #56]	@ (8012018 <pbuf_copy+0x1a0>)
 8011fe0:	4809      	ldr	r0, [pc, #36]	@ (8012008 <pbuf_copy+0x190>)
 8011fe2:	f008 fee7 	bl	801adb4 <iprintf>
 8011fe6:	f06f 0305 	mvn.w	r3, #5
 8011fea:	e004      	b.n	8011ff6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f47f af61 	bne.w	8011eb6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011ff4:	2300      	movs	r3, #0
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3718      	adds	r7, #24
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	0801c3a4 	.word	0x0801c3a4
 8012004:	0801c64c 	.word	0x0801c64c
 8012008:	0801c404 	.word	0x0801c404
 801200c:	0801c67c 	.word	0x0801c67c
 8012010:	0801c694 	.word	0x0801c694
 8012014:	0801c6b0 	.word	0x0801c6b0
 8012018:	0801c6c0 	.word	0x0801c6c0

0801201c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b088      	sub	sp, #32
 8012020:	af00      	add	r7, sp, #0
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	4611      	mov	r1, r2
 8012028:	461a      	mov	r2, r3
 801202a:	460b      	mov	r3, r1
 801202c:	80fb      	strh	r3, [r7, #6]
 801202e:	4613      	mov	r3, r2
 8012030:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012032:	2300      	movs	r3, #0
 8012034:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012036:	2300      	movs	r3, #0
 8012038:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d108      	bne.n	8012052 <pbuf_copy_partial+0x36>
 8012040:	4b2b      	ldr	r3, [pc, #172]	@ (80120f0 <pbuf_copy_partial+0xd4>)
 8012042:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012046:	492b      	ldr	r1, [pc, #172]	@ (80120f4 <pbuf_copy_partial+0xd8>)
 8012048:	482b      	ldr	r0, [pc, #172]	@ (80120f8 <pbuf_copy_partial+0xdc>)
 801204a:	f008 feb3 	bl	801adb4 <iprintf>
 801204e:	2300      	movs	r3, #0
 8012050:	e04a      	b.n	80120e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d108      	bne.n	801206a <pbuf_copy_partial+0x4e>
 8012058:	4b25      	ldr	r3, [pc, #148]	@ (80120f0 <pbuf_copy_partial+0xd4>)
 801205a:	f240 420b 	movw	r2, #1035	@ 0x40b
 801205e:	4927      	ldr	r1, [pc, #156]	@ (80120fc <pbuf_copy_partial+0xe0>)
 8012060:	4825      	ldr	r0, [pc, #148]	@ (80120f8 <pbuf_copy_partial+0xdc>)
 8012062:	f008 fea7 	bl	801adb4 <iprintf>
 8012066:	2300      	movs	r3, #0
 8012068:	e03e      	b.n	80120e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	61fb      	str	r3, [r7, #28]
 801206e:	e034      	b.n	80120da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012070:	88bb      	ldrh	r3, [r7, #4]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d00a      	beq.n	801208c <pbuf_copy_partial+0x70>
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	895b      	ldrh	r3, [r3, #10]
 801207a:	88ba      	ldrh	r2, [r7, #4]
 801207c:	429a      	cmp	r2, r3
 801207e:	d305      	bcc.n	801208c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	895b      	ldrh	r3, [r3, #10]
 8012084:	88ba      	ldrh	r2, [r7, #4]
 8012086:	1ad3      	subs	r3, r2, r3
 8012088:	80bb      	strh	r3, [r7, #4]
 801208a:	e023      	b.n	80120d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	895a      	ldrh	r2, [r3, #10]
 8012090:	88bb      	ldrh	r3, [r7, #4]
 8012092:	1ad3      	subs	r3, r2, r3
 8012094:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012096:	8b3a      	ldrh	r2, [r7, #24]
 8012098:	88fb      	ldrh	r3, [r7, #6]
 801209a:	429a      	cmp	r2, r3
 801209c:	d901      	bls.n	80120a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801209e:	88fb      	ldrh	r3, [r7, #6]
 80120a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80120a2:	8b7b      	ldrh	r3, [r7, #26]
 80120a4:	68ba      	ldr	r2, [r7, #8]
 80120a6:	18d0      	adds	r0, r2, r3
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	685a      	ldr	r2, [r3, #4]
 80120ac:	88bb      	ldrh	r3, [r7, #4]
 80120ae:	4413      	add	r3, r2
 80120b0:	8b3a      	ldrh	r2, [r7, #24]
 80120b2:	4619      	mov	r1, r3
 80120b4:	f008 ffb7 	bl	801b026 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80120b8:	8afa      	ldrh	r2, [r7, #22]
 80120ba:	8b3b      	ldrh	r3, [r7, #24]
 80120bc:	4413      	add	r3, r2
 80120be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80120c0:	8b7a      	ldrh	r2, [r7, #26]
 80120c2:	8b3b      	ldrh	r3, [r7, #24]
 80120c4:	4413      	add	r3, r2
 80120c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80120c8:	88fa      	ldrh	r2, [r7, #6]
 80120ca:	8b3b      	ldrh	r3, [r7, #24]
 80120cc:	1ad3      	subs	r3, r2, r3
 80120ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80120d0:	2300      	movs	r3, #0
 80120d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80120d4:	69fb      	ldr	r3, [r7, #28]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	61fb      	str	r3, [r7, #28]
 80120da:	88fb      	ldrh	r3, [r7, #6]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d002      	beq.n	80120e6 <pbuf_copy_partial+0xca>
 80120e0:	69fb      	ldr	r3, [r7, #28]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d1c4      	bne.n	8012070 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80120e6:	8afb      	ldrh	r3, [r7, #22]
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3720      	adds	r7, #32
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	0801c3a4 	.word	0x0801c3a4
 80120f4:	0801c6ec 	.word	0x0801c6ec
 80120f8:	0801c404 	.word	0x0801c404
 80120fc:	0801c70c 	.word	0x0801c70c

08012100 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b084      	sub	sp, #16
 8012104:	af00      	add	r7, sp, #0
 8012106:	4603      	mov	r3, r0
 8012108:	603a      	str	r2, [r7, #0]
 801210a:	71fb      	strb	r3, [r7, #7]
 801210c:	460b      	mov	r3, r1
 801210e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	8919      	ldrh	r1, [r3, #8]
 8012114:	88ba      	ldrh	r2, [r7, #4]
 8012116:	79fb      	ldrb	r3, [r7, #7]
 8012118:	4618      	mov	r0, r3
 801211a:	f7ff fa91 	bl	8011640 <pbuf_alloc>
 801211e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d101      	bne.n	801212a <pbuf_clone+0x2a>
    return NULL;
 8012126:	2300      	movs	r3, #0
 8012128:	e011      	b.n	801214e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801212a:	6839      	ldr	r1, [r7, #0]
 801212c:	68f8      	ldr	r0, [r7, #12]
 801212e:	f7ff fea3 	bl	8011e78 <pbuf_copy>
 8012132:	4603      	mov	r3, r0
 8012134:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012136:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d006      	beq.n	801214c <pbuf_clone+0x4c>
 801213e:	4b06      	ldr	r3, [pc, #24]	@ (8012158 <pbuf_clone+0x58>)
 8012140:	f240 5224 	movw	r2, #1316	@ 0x524
 8012144:	4905      	ldr	r1, [pc, #20]	@ (801215c <pbuf_clone+0x5c>)
 8012146:	4806      	ldr	r0, [pc, #24]	@ (8012160 <pbuf_clone+0x60>)
 8012148:	f008 fe34 	bl	801adb4 <iprintf>
  return q;
 801214c:	68fb      	ldr	r3, [r7, #12]
}
 801214e:	4618      	mov	r0, r3
 8012150:	3710      	adds	r7, #16
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
 8012156:	bf00      	nop
 8012158:	0801c3a4 	.word	0x0801c3a4
 801215c:	0801c818 	.word	0x0801c818
 8012160:	0801c404 	.word	0x0801c404

08012164 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8012164:	b480      	push	{r7}
 8012166:	b083      	sub	sp, #12
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	460b      	mov	r3, r1
 801216e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	7a1b      	ldrb	r3, [r3, #8]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00b      	beq.n	8012190 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	7a1a      	ldrb	r2, [r3, #8]
 801217c:	4b15      	ldr	r3, [pc, #84]	@ (80121d4 <raw_input_local_match+0x70>)
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012184:	3301      	adds	r3, #1
 8012186:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012188:	429a      	cmp	r2, r3
 801218a:	d001      	beq.n	8012190 <raw_input_local_match+0x2c>
    return 0;
 801218c:	2300      	movs	r3, #0
 801218e:	e01b      	b.n	80121c8 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012190:	78fb      	ldrb	r3, [r7, #3]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d008      	beq.n	80121a8 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d003      	beq.n	80121a4 <raw_input_local_match+0x40>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d110      	bne.n	80121c6 <raw_input_local_match+0x62>
          return 1;
 80121a4:	2301      	movs	r3, #1
 80121a6:	e00f      	b.n	80121c8 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d009      	beq.n	80121c2 <raw_input_local_match+0x5e>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d005      	beq.n	80121c2 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681a      	ldr	r2, [r3, #0]
 80121ba:	4b06      	ldr	r3, [pc, #24]	@ (80121d4 <raw_input_local_match+0x70>)
 80121bc:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 80121be:	429a      	cmp	r2, r3
 80121c0:	d101      	bne.n	80121c6 <raw_input_local_match+0x62>
        return 1;
 80121c2:	2301      	movs	r3, #1
 80121c4:	e000      	b.n	80121c8 <raw_input_local_match+0x64>
      }
  }

  return 0;
 80121c6:	2300      	movs	r3, #0
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	370c      	adds	r7, #12
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr
 80121d4:	2400e074 	.word	0x2400e074

080121d8 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80121d8:	b590      	push	{r4, r7, lr}
 80121da:	b089      	sub	sp, #36	@ 0x24
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 80121e2:	2300      	movs	r3, #0
 80121e4:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80121e6:	4b37      	ldr	r3, [pc, #220]	@ (80122c4 <raw_input+0xec>)
 80121e8:	695b      	ldr	r3, [r3, #20]
 80121ea:	4a36      	ldr	r2, [pc, #216]	@ (80122c4 <raw_input+0xec>)
 80121ec:	6812      	ldr	r2, [r2, #0]
 80121ee:	4611      	mov	r1, r2
 80121f0:	4618      	mov	r0, r3
 80121f2:	f007 fc07 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 80121f6:	4603      	mov	r3, r0
 80121f8:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	7a5b      	ldrb	r3, [r3, #9]
 8012200:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 8012202:	2300      	movs	r3, #0
 8012204:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8012206:	4b30      	ldr	r3, [pc, #192]	@ (80122c8 <raw_input+0xf0>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801220c:	e052      	b.n	80122b4 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801220e:	69fb      	ldr	r3, [r7, #28]
 8012210:	7c1b      	ldrb	r3, [r3, #16]
 8012212:	461a      	mov	r2, r3
 8012214:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012218:	429a      	cmp	r2, r3
 801221a:	d146      	bne.n	80122aa <raw_input+0xd2>
 801221c:	7dbb      	ldrb	r3, [r7, #22]
 801221e:	4619      	mov	r1, r3
 8012220:	69f8      	ldr	r0, [r7, #28]
 8012222:	f7ff ff9f 	bl	8012164 <raw_input_local_match>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d03e      	beq.n	80122aa <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	7c5b      	ldrb	r3, [r3, #17]
 8012230:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8012234:	2b00      	cmp	r3, #0
 8012236:	d005      	beq.n	8012244 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	685a      	ldr	r2, [r3, #4]
 801223c:	4b21      	ldr	r3, [pc, #132]	@ (80122c4 <raw_input+0xec>)
 801223e:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8012240:	429a      	cmp	r2, r3
 8012242:	d132      	bne.n	80122aa <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	695b      	ldr	r3, [r3, #20]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d02e      	beq.n	80122aa <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	685b      	ldr	r3, [r3, #4]
 8012250:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 8012252:	2302      	movs	r3, #2
 8012254:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	695c      	ldr	r4, [r3, #20]
 801225a:	69fb      	ldr	r3, [r7, #28]
 801225c:	6998      	ldr	r0, [r3, #24]
 801225e:	4b1b      	ldr	r3, [pc, #108]	@ (80122cc <raw_input+0xf4>)
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	69f9      	ldr	r1, [r7, #28]
 8012264:	47a0      	blx	r4
 8012266:	4603      	mov	r3, r0
 8012268:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 801226a:	7bfb      	ldrb	r3, [r7, #15]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d011      	beq.n	8012294 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 8012270:	2300      	movs	r3, #0
 8012272:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8012274:	69bb      	ldr	r3, [r7, #24]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00a      	beq.n	8012290 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	68da      	ldr	r2, [r3, #12]
 801227e:	69bb      	ldr	r3, [r7, #24]
 8012280:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8012282:	4b11      	ldr	r3, [pc, #68]	@ (80122c8 <raw_input+0xf0>)
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 801228a:	4a0f      	ldr	r2, [pc, #60]	@ (80122c8 <raw_input+0xf0>)
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8012290:	2301      	movs	r3, #1
 8012292:	e013      	b.n	80122bc <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	693a      	ldr	r2, [r7, #16]
 801229a:	429a      	cmp	r2, r3
 801229c:	d005      	beq.n	80122aa <raw_input+0xd2>
 801229e:	4b0c      	ldr	r3, [pc, #48]	@ (80122d0 <raw_input+0xf8>)
 80122a0:	22c0      	movs	r2, #192	@ 0xc0
 80122a2:	490c      	ldr	r1, [pc, #48]	@ (80122d4 <raw_input+0xfc>)
 80122a4:	480c      	ldr	r0, [pc, #48]	@ (80122d8 <raw_input+0x100>)
 80122a6:	f008 fd85 	bl	801adb4 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 80122ae:	69fb      	ldr	r3, [r7, #28]
 80122b0:	68db      	ldr	r3, [r3, #12]
 80122b2:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80122b4:	69fb      	ldr	r3, [r7, #28]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d1a9      	bne.n	801220e <raw_input+0x36>
  }
  return ret;
 80122ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3724      	adds	r7, #36	@ 0x24
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd90      	pop	{r4, r7, pc}
 80122c4:	2400e074 	.word	0x2400e074
 80122c8:	24014bac 	.word	0x24014bac
 80122cc:	2400e084 	.word	0x2400e084
 80122d0:	0801c82c 	.word	0x0801c82c
 80122d4:	0801c85c 	.word	0x0801c85c
 80122d8:	0801c8a8 	.word	0x0801c8a8

080122dc <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80122dc:	b480      	push	{r7}
 80122de:	b085      	sub	sp, #20
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d01e      	beq.n	801232a <raw_netif_ip_addr_changed+0x4e>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d01a      	beq.n	801232a <raw_netif_ip_addr_changed+0x4e>
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d017      	beq.n	801232a <raw_netif_ip_addr_changed+0x4e>
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d013      	beq.n	801232a <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8012302:	4b0d      	ldr	r3, [pc, #52]	@ (8012338 <raw_netif_ip_addr_changed+0x5c>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	60fb      	str	r3, [r7, #12]
 8012308:	e00c      	b.n	8012324 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	429a      	cmp	r2, r3
 8012314:	d103      	bne.n	801231e <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	681a      	ldr	r2, [r3, #0]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	68db      	ldr	r3, [r3, #12]
 8012322:	60fb      	str	r3, [r7, #12]
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d1ef      	bne.n	801230a <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801232a:	bf00      	nop
 801232c:	3714      	adds	r7, #20
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr
 8012336:	bf00      	nop
 8012338:	24014bac 	.word	0x24014bac

0801233c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012340:	f008 fc38 	bl	801abb4 <rand>
 8012344:	4603      	mov	r3, r0
 8012346:	b29b      	uxth	r3, r3
 8012348:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801234c:	b29b      	uxth	r3, r3
 801234e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012352:	b29a      	uxth	r2, r3
 8012354:	4b01      	ldr	r3, [pc, #4]	@ (801235c <tcp_init+0x20>)
 8012356:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012358:	bf00      	nop
 801235a:	bd80      	pop	{r7, pc}
 801235c:	240049e8 	.word	0x240049e8

08012360 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b082      	sub	sp, #8
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	7d1b      	ldrb	r3, [r3, #20]
 801236c:	2b01      	cmp	r3, #1
 801236e:	d105      	bne.n	801237c <tcp_free+0x1c>
 8012370:	4b06      	ldr	r3, [pc, #24]	@ (801238c <tcp_free+0x2c>)
 8012372:	22d4      	movs	r2, #212	@ 0xd4
 8012374:	4906      	ldr	r1, [pc, #24]	@ (8012390 <tcp_free+0x30>)
 8012376:	4807      	ldr	r0, [pc, #28]	@ (8012394 <tcp_free+0x34>)
 8012378:	f008 fd1c 	bl	801adb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801237c:	6879      	ldr	r1, [r7, #4]
 801237e:	2002      	movs	r0, #2
 8012380:	f7fe fd9a 	bl	8010eb8 <memp_free>
}
 8012384:	bf00      	nop
 8012386:	3708      	adds	r7, #8
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	0801c970 	.word	0x0801c970
 8012390:	0801c9a0 	.word	0x0801c9a0
 8012394:	0801c9b4 	.word	0x0801c9b4

08012398 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	7d1b      	ldrb	r3, [r3, #20]
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d105      	bne.n	80123b4 <tcp_free_listen+0x1c>
 80123a8:	4b06      	ldr	r3, [pc, #24]	@ (80123c4 <tcp_free_listen+0x2c>)
 80123aa:	22df      	movs	r2, #223	@ 0xdf
 80123ac:	4906      	ldr	r1, [pc, #24]	@ (80123c8 <tcp_free_listen+0x30>)
 80123ae:	4807      	ldr	r0, [pc, #28]	@ (80123cc <tcp_free_listen+0x34>)
 80123b0:	f008 fd00 	bl	801adb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80123b4:	6879      	ldr	r1, [r7, #4]
 80123b6:	2003      	movs	r0, #3
 80123b8:	f7fe fd7e 	bl	8010eb8 <memp_free>
}
 80123bc:	bf00      	nop
 80123be:	3708      	adds	r7, #8
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}
 80123c4:	0801c970 	.word	0x0801c970
 80123c8:	0801c9dc 	.word	0x0801c9dc
 80123cc:	0801c9b4 	.word	0x0801c9b4

080123d0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80123d4:	f000 fea6 	bl	8013124 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80123d8:	4b07      	ldr	r3, [pc, #28]	@ (80123f8 <tcp_tmr+0x28>)
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	3301      	adds	r3, #1
 80123de:	b2da      	uxtb	r2, r3
 80123e0:	4b05      	ldr	r3, [pc, #20]	@ (80123f8 <tcp_tmr+0x28>)
 80123e2:	701a      	strb	r2, [r3, #0]
 80123e4:	4b04      	ldr	r3, [pc, #16]	@ (80123f8 <tcp_tmr+0x28>)
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	f003 0301 	and.w	r3, r3, #1
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d001      	beq.n	80123f4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80123f0:	f000 fb56 	bl	8012aa0 <tcp_slowtmr>
  }
}
 80123f4:	bf00      	nop
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	24014bc5 	.word	0x24014bc5

080123fc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b084      	sub	sp, #16
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d105      	bne.n	8012418 <tcp_remove_listener+0x1c>
 801240c:	4b0d      	ldr	r3, [pc, #52]	@ (8012444 <tcp_remove_listener+0x48>)
 801240e:	22ff      	movs	r2, #255	@ 0xff
 8012410:	490d      	ldr	r1, [pc, #52]	@ (8012448 <tcp_remove_listener+0x4c>)
 8012412:	480e      	ldr	r0, [pc, #56]	@ (801244c <tcp_remove_listener+0x50>)
 8012414:	f008 fcce 	bl	801adb4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	60fb      	str	r3, [r7, #12]
 801241c:	e00a      	b.n	8012434 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012422:	683a      	ldr	r2, [r7, #0]
 8012424:	429a      	cmp	r2, r3
 8012426:	d102      	bne.n	801242e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2200      	movs	r2, #0
 801242c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	68db      	ldr	r3, [r3, #12]
 8012432:	60fb      	str	r3, [r7, #12]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d1f1      	bne.n	801241e <tcp_remove_listener+0x22>
    }
  }
}
 801243a:	bf00      	nop
 801243c:	bf00      	nop
 801243e:	3710      	adds	r7, #16
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}
 8012444:	0801c970 	.word	0x0801c970
 8012448:	0801c9f8 	.word	0x0801c9f8
 801244c:	0801c9b4 	.word	0x0801c9b4

08012450 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b084      	sub	sp, #16
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d106      	bne.n	801246c <tcp_listen_closed+0x1c>
 801245e:	4b14      	ldr	r3, [pc, #80]	@ (80124b0 <tcp_listen_closed+0x60>)
 8012460:	f240 1211 	movw	r2, #273	@ 0x111
 8012464:	4913      	ldr	r1, [pc, #76]	@ (80124b4 <tcp_listen_closed+0x64>)
 8012466:	4814      	ldr	r0, [pc, #80]	@ (80124b8 <tcp_listen_closed+0x68>)
 8012468:	f008 fca4 	bl	801adb4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	7d1b      	ldrb	r3, [r3, #20]
 8012470:	2b01      	cmp	r3, #1
 8012472:	d006      	beq.n	8012482 <tcp_listen_closed+0x32>
 8012474:	4b0e      	ldr	r3, [pc, #56]	@ (80124b0 <tcp_listen_closed+0x60>)
 8012476:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801247a:	4910      	ldr	r1, [pc, #64]	@ (80124bc <tcp_listen_closed+0x6c>)
 801247c:	480e      	ldr	r0, [pc, #56]	@ (80124b8 <tcp_listen_closed+0x68>)
 801247e:	f008 fc99 	bl	801adb4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012482:	2301      	movs	r3, #1
 8012484:	60fb      	str	r3, [r7, #12]
 8012486:	e00b      	b.n	80124a0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012488:	4a0d      	ldr	r2, [pc, #52]	@ (80124c0 <tcp_listen_closed+0x70>)
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	6879      	ldr	r1, [r7, #4]
 8012494:	4618      	mov	r0, r3
 8012496:	f7ff ffb1 	bl	80123fc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	3301      	adds	r3, #1
 801249e:	60fb      	str	r3, [r7, #12]
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2b03      	cmp	r3, #3
 80124a4:	d9f0      	bls.n	8012488 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80124a6:	bf00      	nop
 80124a8:	bf00      	nop
 80124aa:	3710      	adds	r7, #16
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	0801c970 	.word	0x0801c970
 80124b4:	0801ca20 	.word	0x0801ca20
 80124b8:	0801c9b4 	.word	0x0801c9b4
 80124bc:	0801ca2c 	.word	0x0801ca2c
 80124c0:	0801e9e8 	.word	0x0801e9e8

080124c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80124c4:	b5b0      	push	{r4, r5, r7, lr}
 80124c6:	b088      	sub	sp, #32
 80124c8:	af04      	add	r7, sp, #16
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	460b      	mov	r3, r1
 80124ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d106      	bne.n	80124e4 <tcp_close_shutdown+0x20>
 80124d6:	4b63      	ldr	r3, [pc, #396]	@ (8012664 <tcp_close_shutdown+0x1a0>)
 80124d8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80124dc:	4962      	ldr	r1, [pc, #392]	@ (8012668 <tcp_close_shutdown+0x1a4>)
 80124de:	4863      	ldr	r0, [pc, #396]	@ (801266c <tcp_close_shutdown+0x1a8>)
 80124e0:	f008 fc68 	bl	801adb4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80124e4:	78fb      	ldrb	r3, [r7, #3]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d067      	beq.n	80125ba <tcp_close_shutdown+0xf6>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	7d1b      	ldrb	r3, [r3, #20]
 80124ee:	2b04      	cmp	r3, #4
 80124f0:	d003      	beq.n	80124fa <tcp_close_shutdown+0x36>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	7d1b      	ldrb	r3, [r3, #20]
 80124f6:	2b07      	cmp	r3, #7
 80124f8:	d15f      	bne.n	80125ba <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d105      	bne.n	801250e <tcp_close_shutdown+0x4a>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012506:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801250a:	4293      	cmp	r3, r2
 801250c:	d055      	beq.n	80125ba <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	8b5b      	ldrh	r3, [r3, #26]
 8012512:	f003 0310 	and.w	r3, r3, #16
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <tcp_close_shutdown+0x64>
 801251a:	4b52      	ldr	r3, [pc, #328]	@ (8012664 <tcp_close_shutdown+0x1a0>)
 801251c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012520:	4953      	ldr	r1, [pc, #332]	@ (8012670 <tcp_close_shutdown+0x1ac>)
 8012522:	4852      	ldr	r0, [pc, #328]	@ (801266c <tcp_close_shutdown+0x1a8>)
 8012524:	f008 fc46 	bl	801adb4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012530:	687d      	ldr	r5, [r7, #4]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	3304      	adds	r3, #4
 8012536:	687a      	ldr	r2, [r7, #4]
 8012538:	8ad2      	ldrh	r2, [r2, #22]
 801253a:	6879      	ldr	r1, [r7, #4]
 801253c:	8b09      	ldrh	r1, [r1, #24]
 801253e:	9102      	str	r1, [sp, #8]
 8012540:	9201      	str	r2, [sp, #4]
 8012542:	9300      	str	r3, [sp, #0]
 8012544:	462b      	mov	r3, r5
 8012546:	4622      	mov	r2, r4
 8012548:	4601      	mov	r1, r0
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f004 fe92 	bl	8017274 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f001 f8cb 	bl	80136ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012556:	4b47      	ldr	r3, [pc, #284]	@ (8012674 <tcp_close_shutdown+0x1b0>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	429a      	cmp	r2, r3
 801255e:	d105      	bne.n	801256c <tcp_close_shutdown+0xa8>
 8012560:	4b44      	ldr	r3, [pc, #272]	@ (8012674 <tcp_close_shutdown+0x1b0>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	4a43      	ldr	r2, [pc, #268]	@ (8012674 <tcp_close_shutdown+0x1b0>)
 8012568:	6013      	str	r3, [r2, #0]
 801256a:	e013      	b.n	8012594 <tcp_close_shutdown+0xd0>
 801256c:	4b41      	ldr	r3, [pc, #260]	@ (8012674 <tcp_close_shutdown+0x1b0>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	60fb      	str	r3, [r7, #12]
 8012572:	e00c      	b.n	801258e <tcp_close_shutdown+0xca>
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	68db      	ldr	r3, [r3, #12]
 8012578:	687a      	ldr	r2, [r7, #4]
 801257a:	429a      	cmp	r2, r3
 801257c:	d104      	bne.n	8012588 <tcp_close_shutdown+0xc4>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	68da      	ldr	r2, [r3, #12]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	60da      	str	r2, [r3, #12]
 8012586:	e005      	b.n	8012594 <tcp_close_shutdown+0xd0>
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	68db      	ldr	r3, [r3, #12]
 801258c:	60fb      	str	r3, [r7, #12]
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d1ef      	bne.n	8012574 <tcp_close_shutdown+0xb0>
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2200      	movs	r2, #0
 8012598:	60da      	str	r2, [r3, #12]
 801259a:	4b37      	ldr	r3, [pc, #220]	@ (8012678 <tcp_close_shutdown+0x1b4>)
 801259c:	2201      	movs	r2, #1
 801259e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80125a0:	4b36      	ldr	r3, [pc, #216]	@ (801267c <tcp_close_shutdown+0x1b8>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d102      	bne.n	80125b0 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80125aa:	f003 fd61 	bl	8016070 <tcp_trigger_input_pcb_close>
 80125ae:	e002      	b.n	80125b6 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f7ff fed5 	bl	8012360 <tcp_free>
      }
      return ERR_OK;
 80125b6:	2300      	movs	r3, #0
 80125b8:	e050      	b.n	801265c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	7d1b      	ldrb	r3, [r3, #20]
 80125be:	2b02      	cmp	r3, #2
 80125c0:	d03b      	beq.n	801263a <tcp_close_shutdown+0x176>
 80125c2:	2b02      	cmp	r3, #2
 80125c4:	dc44      	bgt.n	8012650 <tcp_close_shutdown+0x18c>
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d002      	beq.n	80125d0 <tcp_close_shutdown+0x10c>
 80125ca:	2b01      	cmp	r3, #1
 80125cc:	d02a      	beq.n	8012624 <tcp_close_shutdown+0x160>
 80125ce:	e03f      	b.n	8012650 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	8adb      	ldrh	r3, [r3, #22]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d021      	beq.n	801261c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80125d8:	4b29      	ldr	r3, [pc, #164]	@ (8012680 <tcp_close_shutdown+0x1bc>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	429a      	cmp	r2, r3
 80125e0:	d105      	bne.n	80125ee <tcp_close_shutdown+0x12a>
 80125e2:	4b27      	ldr	r3, [pc, #156]	@ (8012680 <tcp_close_shutdown+0x1bc>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	68db      	ldr	r3, [r3, #12]
 80125e8:	4a25      	ldr	r2, [pc, #148]	@ (8012680 <tcp_close_shutdown+0x1bc>)
 80125ea:	6013      	str	r3, [r2, #0]
 80125ec:	e013      	b.n	8012616 <tcp_close_shutdown+0x152>
 80125ee:	4b24      	ldr	r3, [pc, #144]	@ (8012680 <tcp_close_shutdown+0x1bc>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	60bb      	str	r3, [r7, #8]
 80125f4:	e00c      	b.n	8012610 <tcp_close_shutdown+0x14c>
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	68db      	ldr	r3, [r3, #12]
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d104      	bne.n	801260a <tcp_close_shutdown+0x146>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	68da      	ldr	r2, [r3, #12]
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	60da      	str	r2, [r3, #12]
 8012608:	e005      	b.n	8012616 <tcp_close_shutdown+0x152>
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	60bb      	str	r3, [r7, #8]
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1ef      	bne.n	80125f6 <tcp_close_shutdown+0x132>
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f7ff fe9f 	bl	8012360 <tcp_free>
      break;
 8012622:	e01a      	b.n	801265a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f7ff ff13 	bl	8012450 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801262a:	6879      	ldr	r1, [r7, #4]
 801262c:	4815      	ldr	r0, [pc, #84]	@ (8012684 <tcp_close_shutdown+0x1c0>)
 801262e:	f001 f8ad 	bl	801378c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f7ff feb0 	bl	8012398 <tcp_free_listen>
      break;
 8012638:	e00f      	b.n	801265a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801263a:	6879      	ldr	r1, [r7, #4]
 801263c:	480d      	ldr	r0, [pc, #52]	@ (8012674 <tcp_close_shutdown+0x1b0>)
 801263e:	f001 f8a5 	bl	801378c <tcp_pcb_remove>
 8012642:	4b0d      	ldr	r3, [pc, #52]	@ (8012678 <tcp_close_shutdown+0x1b4>)
 8012644:	2201      	movs	r2, #1
 8012646:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7ff fe89 	bl	8012360 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801264e:	e004      	b.n	801265a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f000 f819 	bl	8012688 <tcp_close_shutdown_fin>
 8012656:	4603      	mov	r3, r0
 8012658:	e000      	b.n	801265c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801265a:	2300      	movs	r3, #0
}
 801265c:	4618      	mov	r0, r3
 801265e:	3710      	adds	r7, #16
 8012660:	46bd      	mov	sp, r7
 8012662:	bdb0      	pop	{r4, r5, r7, pc}
 8012664:	0801c970 	.word	0x0801c970
 8012668:	0801ca44 	.word	0x0801ca44
 801266c:	0801c9b4 	.word	0x0801c9b4
 8012670:	0801ca64 	.word	0x0801ca64
 8012674:	24014bbc 	.word	0x24014bbc
 8012678:	24014bc4 	.word	0x24014bc4
 801267c:	24014bfc 	.word	0x24014bfc
 8012680:	24014bb4 	.word	0x24014bb4
 8012684:	24014bb8 	.word	0x24014bb8

08012688 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d106      	bne.n	80126a4 <tcp_close_shutdown_fin+0x1c>
 8012696:	4b2e      	ldr	r3, [pc, #184]	@ (8012750 <tcp_close_shutdown_fin+0xc8>)
 8012698:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801269c:	492d      	ldr	r1, [pc, #180]	@ (8012754 <tcp_close_shutdown_fin+0xcc>)
 801269e:	482e      	ldr	r0, [pc, #184]	@ (8012758 <tcp_close_shutdown_fin+0xd0>)
 80126a0:	f008 fb88 	bl	801adb4 <iprintf>

  switch (pcb->state) {
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	7d1b      	ldrb	r3, [r3, #20]
 80126a8:	2b07      	cmp	r3, #7
 80126aa:	d020      	beq.n	80126ee <tcp_close_shutdown_fin+0x66>
 80126ac:	2b07      	cmp	r3, #7
 80126ae:	dc2b      	bgt.n	8012708 <tcp_close_shutdown_fin+0x80>
 80126b0:	2b03      	cmp	r3, #3
 80126b2:	d002      	beq.n	80126ba <tcp_close_shutdown_fin+0x32>
 80126b4:	2b04      	cmp	r3, #4
 80126b6:	d00d      	beq.n	80126d4 <tcp_close_shutdown_fin+0x4c>
 80126b8:	e026      	b.n	8012708 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f003 fee8 	bl	8016490 <tcp_send_fin>
 80126c0:	4603      	mov	r3, r0
 80126c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80126c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d11f      	bne.n	801270c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2205      	movs	r2, #5
 80126d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80126d2:	e01b      	b.n	801270c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f003 fedb 	bl	8016490 <tcp_send_fin>
 80126da:	4603      	mov	r3, r0
 80126dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80126de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d114      	bne.n	8012710 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2205      	movs	r2, #5
 80126ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80126ec:	e010      	b.n	8012710 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f003 fece 	bl	8016490 <tcp_send_fin>
 80126f4:	4603      	mov	r3, r0
 80126f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80126f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d109      	bne.n	8012714 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2209      	movs	r2, #9
 8012704:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012706:	e005      	b.n	8012714 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012708:	2300      	movs	r3, #0
 801270a:	e01c      	b.n	8012746 <tcp_close_shutdown_fin+0xbe>
      break;
 801270c:	bf00      	nop
 801270e:	e002      	b.n	8012716 <tcp_close_shutdown_fin+0x8e>
      break;
 8012710:	bf00      	nop
 8012712:	e000      	b.n	8012716 <tcp_close_shutdown_fin+0x8e>
      break;
 8012714:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d103      	bne.n	8012726 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f003 fff4 	bl	801670c <tcp_output>
 8012724:	e00d      	b.n	8012742 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272e:	d108      	bne.n	8012742 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	8b5b      	ldrh	r3, [r3, #26]
 8012734:	f043 0308 	orr.w	r3, r3, #8
 8012738:	b29a      	uxth	r2, r3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801273e:	2300      	movs	r3, #0
 8012740:	e001      	b.n	8012746 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3710      	adds	r7, #16
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	0801c970 	.word	0x0801c970
 8012754:	0801ca20 	.word	0x0801ca20
 8012758:	0801c9b4 	.word	0x0801c9b4

0801275c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d109      	bne.n	801277e <tcp_close+0x22>
 801276a:	4b0f      	ldr	r3, [pc, #60]	@ (80127a8 <tcp_close+0x4c>)
 801276c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012770:	490e      	ldr	r1, [pc, #56]	@ (80127ac <tcp_close+0x50>)
 8012772:	480f      	ldr	r0, [pc, #60]	@ (80127b0 <tcp_close+0x54>)
 8012774:	f008 fb1e 	bl	801adb4 <iprintf>
 8012778:	f06f 030f 	mvn.w	r3, #15
 801277c:	e00f      	b.n	801279e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	7d1b      	ldrb	r3, [r3, #20]
 8012782:	2b01      	cmp	r3, #1
 8012784:	d006      	beq.n	8012794 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	8b5b      	ldrh	r3, [r3, #26]
 801278a:	f043 0310 	orr.w	r3, r3, #16
 801278e:	b29a      	uxth	r2, r3
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012794:	2101      	movs	r1, #1
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f7ff fe94 	bl	80124c4 <tcp_close_shutdown>
 801279c:	4603      	mov	r3, r0
}
 801279e:	4618      	mov	r0, r3
 80127a0:	3708      	adds	r7, #8
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	bf00      	nop
 80127a8:	0801c970 	.word	0x0801c970
 80127ac:	0801ca80 	.word	0x0801ca80
 80127b0:	0801c9b4 	.word	0x0801c9b4

080127b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b08e      	sub	sp, #56	@ 0x38
 80127b8:	af04      	add	r7, sp, #16
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d107      	bne.n	80127d4 <tcp_abandon+0x20>
 80127c4:	4b52      	ldr	r3, [pc, #328]	@ (8012910 <tcp_abandon+0x15c>)
 80127c6:	f240 223d 	movw	r2, #573	@ 0x23d
 80127ca:	4952      	ldr	r1, [pc, #328]	@ (8012914 <tcp_abandon+0x160>)
 80127cc:	4852      	ldr	r0, [pc, #328]	@ (8012918 <tcp_abandon+0x164>)
 80127ce:	f008 faf1 	bl	801adb4 <iprintf>
 80127d2:	e099      	b.n	8012908 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	7d1b      	ldrb	r3, [r3, #20]
 80127d8:	2b01      	cmp	r3, #1
 80127da:	d106      	bne.n	80127ea <tcp_abandon+0x36>
 80127dc:	4b4c      	ldr	r3, [pc, #304]	@ (8012910 <tcp_abandon+0x15c>)
 80127de:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80127e2:	494e      	ldr	r1, [pc, #312]	@ (801291c <tcp_abandon+0x168>)
 80127e4:	484c      	ldr	r0, [pc, #304]	@ (8012918 <tcp_abandon+0x164>)
 80127e6:	f008 fae5 	bl	801adb4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	7d1b      	ldrb	r3, [r3, #20]
 80127ee:	2b0a      	cmp	r3, #10
 80127f0:	d107      	bne.n	8012802 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80127f2:	6879      	ldr	r1, [r7, #4]
 80127f4:	484a      	ldr	r0, [pc, #296]	@ (8012920 <tcp_abandon+0x16c>)
 80127f6:	f000 ffc9 	bl	801378c <tcp_pcb_remove>
    tcp_free(pcb);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f7ff fdb0 	bl	8012360 <tcp_free>
 8012800:	e082      	b.n	8012908 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012802:	2300      	movs	r3, #0
 8012804:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8012806:	2300      	movs	r3, #0
 8012808:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801280e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012814:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801281c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	691b      	ldr	r3, [r3, #16]
 8012822:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	7d1b      	ldrb	r3, [r3, #20]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d126      	bne.n	801287a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	8adb      	ldrh	r3, [r3, #22]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d02e      	beq.n	8012892 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012834:	4b3b      	ldr	r3, [pc, #236]	@ (8012924 <tcp_abandon+0x170>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	687a      	ldr	r2, [r7, #4]
 801283a:	429a      	cmp	r2, r3
 801283c:	d105      	bne.n	801284a <tcp_abandon+0x96>
 801283e:	4b39      	ldr	r3, [pc, #228]	@ (8012924 <tcp_abandon+0x170>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	4a37      	ldr	r2, [pc, #220]	@ (8012924 <tcp_abandon+0x170>)
 8012846:	6013      	str	r3, [r2, #0]
 8012848:	e013      	b.n	8012872 <tcp_abandon+0xbe>
 801284a:	4b36      	ldr	r3, [pc, #216]	@ (8012924 <tcp_abandon+0x170>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	61fb      	str	r3, [r7, #28]
 8012850:	e00c      	b.n	801286c <tcp_abandon+0xb8>
 8012852:	69fb      	ldr	r3, [r7, #28]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	429a      	cmp	r2, r3
 801285a:	d104      	bne.n	8012866 <tcp_abandon+0xb2>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	68da      	ldr	r2, [r3, #12]
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	60da      	str	r2, [r3, #12]
 8012864:	e005      	b.n	8012872 <tcp_abandon+0xbe>
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	61fb      	str	r3, [r7, #28]
 801286c:	69fb      	ldr	r3, [r7, #28]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1ef      	bne.n	8012852 <tcp_abandon+0x9e>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2200      	movs	r2, #0
 8012876:	60da      	str	r2, [r3, #12]
 8012878:	e00b      	b.n	8012892 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	8adb      	ldrh	r3, [r3, #22]
 8012882:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012884:	6879      	ldr	r1, [r7, #4]
 8012886:	4828      	ldr	r0, [pc, #160]	@ (8012928 <tcp_abandon+0x174>)
 8012888:	f000 ff80 	bl	801378c <tcp_pcb_remove>
 801288c:	4b27      	ldr	r3, [pc, #156]	@ (801292c <tcp_abandon+0x178>)
 801288e:	2201      	movs	r2, #1
 8012890:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012896:	2b00      	cmp	r3, #0
 8012898:	d004      	beq.n	80128a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801289e:	4618      	mov	r0, r3
 80128a0:	f000 fd22 	bl	80132e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d004      	beq.n	80128b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128b0:	4618      	mov	r0, r3
 80128b2:	f000 fd19 	bl	80132e8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d004      	beq.n	80128c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128c2:	4618      	mov	r0, r3
 80128c4:	f000 fd10 	bl	80132e8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80128c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00e      	beq.n	80128ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80128ce:	6879      	ldr	r1, [r7, #4]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	3304      	adds	r3, #4
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	8b12      	ldrh	r2, [r2, #24]
 80128d8:	9202      	str	r2, [sp, #8]
 80128da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80128dc:	9201      	str	r2, [sp, #4]
 80128de:	9300      	str	r3, [sp, #0]
 80128e0:	460b      	mov	r3, r1
 80128e2:	697a      	ldr	r2, [r7, #20]
 80128e4:	69b9      	ldr	r1, [r7, #24]
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f004 fcc4 	bl	8017274 <tcp_rst>
    }
    last_state = pcb->state;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	7d1b      	ldrb	r3, [r3, #20]
 80128f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f7ff fd34 	bl	8012360 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d004      	beq.n	8012908 <tcp_abandon+0x154>
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	f06f 010c 	mvn.w	r1, #12
 8012904:	68f8      	ldr	r0, [r7, #12]
 8012906:	4798      	blx	r3
  }
}
 8012908:	3728      	adds	r7, #40	@ 0x28
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	0801c970 	.word	0x0801c970
 8012914:	0801cab4 	.word	0x0801cab4
 8012918:	0801c9b4 	.word	0x0801c9b4
 801291c:	0801cad0 	.word	0x0801cad0
 8012920:	24014bc0 	.word	0x24014bc0
 8012924:	24014bb4 	.word	0x24014bb4
 8012928:	24014bbc 	.word	0x24014bbc
 801292c:	24014bc4 	.word	0x24014bc4

08012930 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012938:	2101      	movs	r1, #1
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7ff ff3a 	bl	80127b4 <tcp_abandon>
}
 8012940:	bf00      	nop
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b084      	sub	sp, #16
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d106      	bne.n	8012964 <tcp_update_rcv_ann_wnd+0x1c>
 8012956:	4b25      	ldr	r3, [pc, #148]	@ (80129ec <tcp_update_rcv_ann_wnd+0xa4>)
 8012958:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801295c:	4924      	ldr	r1, [pc, #144]	@ (80129f0 <tcp_update_rcv_ann_wnd+0xa8>)
 801295e:	4825      	ldr	r0, [pc, #148]	@ (80129f4 <tcp_update_rcv_ann_wnd+0xac>)
 8012960:	f008 fa28 	bl	801adb4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801296c:	4413      	add	r3, r2
 801296e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012978:	f640 3168 	movw	r1, #2920	@ 0xb68
 801297c:	428a      	cmp	r2, r1
 801297e:	bf28      	it	cs
 8012980:	460a      	movcs	r2, r1
 8012982:	b292      	uxth	r2, r2
 8012984:	4413      	add	r3, r2
 8012986:	68fa      	ldr	r2, [r7, #12]
 8012988:	1ad3      	subs	r3, r2, r3
 801298a:	2b00      	cmp	r3, #0
 801298c:	db08      	blt.n	80129a0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801299a:	68fa      	ldr	r2, [r7, #12]
 801299c:	1ad3      	subs	r3, r2, r3
 801299e:	e020      	b.n	80129e2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129a8:	1ad3      	subs	r3, r2, r3
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	dd03      	ble.n	80129b6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2200      	movs	r2, #0
 80129b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80129b4:	e014      	b.n	80129e0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129c8:	d306      	bcc.n	80129d8 <tcp_update_rcv_ann_wnd+0x90>
 80129ca:	4b08      	ldr	r3, [pc, #32]	@ (80129ec <tcp_update_rcv_ann_wnd+0xa4>)
 80129cc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80129d0:	4909      	ldr	r1, [pc, #36]	@ (80129f8 <tcp_update_rcv_ann_wnd+0xb0>)
 80129d2:	4808      	ldr	r0, [pc, #32]	@ (80129f4 <tcp_update_rcv_ann_wnd+0xac>)
 80129d4:	f008 f9ee 	bl	801adb4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	b29a      	uxth	r2, r3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80129e0:	2300      	movs	r3, #0
  }
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3710      	adds	r7, #16
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	0801c970 	.word	0x0801c970
 80129f0:	0801cbcc 	.word	0x0801cbcc
 80129f4:	0801c9b4 	.word	0x0801c9b4
 80129f8:	0801cbf0 	.word	0x0801cbf0

080129fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	460b      	mov	r3, r1
 8012a06:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d107      	bne.n	8012a1e <tcp_recved+0x22>
 8012a0e:	4b20      	ldr	r3, [pc, #128]	@ (8012a90 <tcp_recved+0x94>)
 8012a10:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012a14:	491f      	ldr	r1, [pc, #124]	@ (8012a94 <tcp_recved+0x98>)
 8012a16:	4820      	ldr	r0, [pc, #128]	@ (8012a98 <tcp_recved+0x9c>)
 8012a18:	f008 f9cc 	bl	801adb4 <iprintf>
 8012a1c:	e034      	b.n	8012a88 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	7d1b      	ldrb	r3, [r3, #20]
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d106      	bne.n	8012a34 <tcp_recved+0x38>
 8012a26:	4b1a      	ldr	r3, [pc, #104]	@ (8012a90 <tcp_recved+0x94>)
 8012a28:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8012a2c:	491b      	ldr	r1, [pc, #108]	@ (8012a9c <tcp_recved+0xa0>)
 8012a2e:	481a      	ldr	r0, [pc, #104]	@ (8012a98 <tcp_recved+0x9c>)
 8012a30:	f008 f9c0 	bl	801adb4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012a38:	887b      	ldrh	r3, [r7, #2]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012a3e:	89fb      	ldrh	r3, [r7, #14]
 8012a40:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012a44:	4293      	cmp	r3, r2
 8012a46:	d804      	bhi.n	8012a52 <tcp_recved+0x56>
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a4c:	89fa      	ldrh	r2, [r7, #14]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d204      	bcs.n	8012a5c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012a58:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012a5a:	e002      	b.n	8012a62 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	89fa      	ldrh	r2, [r7, #14]
 8012a60:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7ff ff70 	bl	8012948 <tcp_update_rcv_ann_wnd>
 8012a68:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d909      	bls.n	8012a88 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	8b5b      	ldrh	r3, [r3, #26]
 8012a78:	f043 0302 	orr.w	r3, r3, #2
 8012a7c:	b29a      	uxth	r2, r3
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f003 fe42 	bl	801670c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012a88:	3710      	adds	r7, #16
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	0801c970 	.word	0x0801c970
 8012a94:	0801cc0c 	.word	0x0801cc0c
 8012a98:	0801c9b4 	.word	0x0801c9b4
 8012a9c:	0801cc24 	.word	0x0801cc24

08012aa0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012aa0:	b5b0      	push	{r4, r5, r7, lr}
 8012aa2:	b090      	sub	sp, #64	@ 0x40
 8012aa4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8012aac:	4b95      	ldr	r3, [pc, #596]	@ (8012d04 <tcp_slowtmr+0x264>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	4a94      	ldr	r2, [pc, #592]	@ (8012d04 <tcp_slowtmr+0x264>)
 8012ab4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012ab6:	4b94      	ldr	r3, [pc, #592]	@ (8012d08 <tcp_slowtmr+0x268>)
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	3301      	adds	r3, #1
 8012abc:	b2da      	uxtb	r2, r3
 8012abe:	4b92      	ldr	r3, [pc, #584]	@ (8012d08 <tcp_slowtmr+0x268>)
 8012ac0:	701a      	strb	r2, [r3, #0]
 8012ac2:	e000      	b.n	8012ac6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8012ac4:	bf00      	nop
  prev = NULL;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8012aca:	4b90      	ldr	r3, [pc, #576]	@ (8012d0c <tcp_slowtmr+0x26c>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012ad0:	e29d      	b.n	801300e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad4:	7d1b      	ldrb	r3, [r3, #20]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d106      	bne.n	8012ae8 <tcp_slowtmr+0x48>
 8012ada:	4b8d      	ldr	r3, [pc, #564]	@ (8012d10 <tcp_slowtmr+0x270>)
 8012adc:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012ae0:	498c      	ldr	r1, [pc, #560]	@ (8012d14 <tcp_slowtmr+0x274>)
 8012ae2:	488d      	ldr	r0, [pc, #564]	@ (8012d18 <tcp_slowtmr+0x278>)
 8012ae4:	f008 f966 	bl	801adb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aea:	7d1b      	ldrb	r3, [r3, #20]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d106      	bne.n	8012afe <tcp_slowtmr+0x5e>
 8012af0:	4b87      	ldr	r3, [pc, #540]	@ (8012d10 <tcp_slowtmr+0x270>)
 8012af2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8012af6:	4989      	ldr	r1, [pc, #548]	@ (8012d1c <tcp_slowtmr+0x27c>)
 8012af8:	4887      	ldr	r0, [pc, #540]	@ (8012d18 <tcp_slowtmr+0x278>)
 8012afa:	f008 f95b 	bl	801adb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b00:	7d1b      	ldrb	r3, [r3, #20]
 8012b02:	2b0a      	cmp	r3, #10
 8012b04:	d106      	bne.n	8012b14 <tcp_slowtmr+0x74>
 8012b06:	4b82      	ldr	r3, [pc, #520]	@ (8012d10 <tcp_slowtmr+0x270>)
 8012b08:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012b0c:	4984      	ldr	r1, [pc, #528]	@ (8012d20 <tcp_slowtmr+0x280>)
 8012b0e:	4882      	ldr	r0, [pc, #520]	@ (8012d18 <tcp_slowtmr+0x278>)
 8012b10:	f008 f950 	bl	801adb4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b16:	7f9a      	ldrb	r2, [r3, #30]
 8012b18:	4b7b      	ldr	r3, [pc, #492]	@ (8012d08 <tcp_slowtmr+0x268>)
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d105      	bne.n	8012b2c <tcp_slowtmr+0x8c>
      prev = pcb;
 8012b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b22:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8012b2a:	e270      	b.n	801300e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8012b2c:	4b76      	ldr	r3, [pc, #472]	@ (8012d08 <tcp_slowtmr+0x268>)
 8012b2e:	781a      	ldrb	r2, [r3, #0]
 8012b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b32:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012b34:	2300      	movs	r3, #0
 8012b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b42:	7d1b      	ldrb	r3, [r3, #20]
 8012b44:	2b02      	cmp	r3, #2
 8012b46:	d10a      	bne.n	8012b5e <tcp_slowtmr+0xbe>
 8012b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012b4e:	2b05      	cmp	r3, #5
 8012b50:	d905      	bls.n	8012b5e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b56:	3301      	adds	r3, #1
 8012b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012b5c:	e11e      	b.n	8012d9c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012b64:	2b0b      	cmp	r3, #11
 8012b66:	d905      	bls.n	8012b74 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8012b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b6c:	3301      	adds	r3, #1
 8012b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012b72:	e113      	b.n	8012d9c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8012b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b76:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d075      	beq.n	8012c6a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d006      	beq.n	8012b94 <tcp_slowtmr+0xf4>
 8012b86:	4b62      	ldr	r3, [pc, #392]	@ (8012d10 <tcp_slowtmr+0x270>)
 8012b88:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8012b8c:	4965      	ldr	r1, [pc, #404]	@ (8012d24 <tcp_slowtmr+0x284>)
 8012b8e:	4862      	ldr	r0, [pc, #392]	@ (8012d18 <tcp_slowtmr+0x278>)
 8012b90:	f008 f910 	bl	801adb4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d106      	bne.n	8012baa <tcp_slowtmr+0x10a>
 8012b9c:	4b5c      	ldr	r3, [pc, #368]	@ (8012d10 <tcp_slowtmr+0x270>)
 8012b9e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8012ba2:	4961      	ldr	r1, [pc, #388]	@ (8012d28 <tcp_slowtmr+0x288>)
 8012ba4:	485c      	ldr	r0, [pc, #368]	@ (8012d18 <tcp_slowtmr+0x278>)
 8012ba6:	f008 f905 	bl	801adb4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bac:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012bb0:	2b0b      	cmp	r3, #11
 8012bb2:	d905      	bls.n	8012bc0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8012bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012bb8:	3301      	adds	r3, #1
 8012bba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012bbe:	e0ed      	b.n	8012d9c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bc2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012bc6:	3b01      	subs	r3, #1
 8012bc8:	4a58      	ldr	r2, [pc, #352]	@ (8012d2c <tcp_slowtmr+0x28c>)
 8012bca:	5cd3      	ldrb	r3, [r2, r3]
 8012bcc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bd0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012bd4:	7c7a      	ldrb	r2, [r7, #17]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d907      	bls.n	8012bea <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8012bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bdc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012be0:	3301      	adds	r3, #1
 8012be2:	b2da      	uxtb	r2, r3
 8012be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012be6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8012bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012bf0:	7c7a      	ldrb	r2, [r7, #17]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	f200 80d2 	bhi.w	8012d9c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8012bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d108      	bne.n	8012c18 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012c06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c08:	f004 fc28 	bl	801745c <tcp_zero_window_probe>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d014      	beq.n	8012c3c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012c12:	2300      	movs	r3, #0
 8012c14:	623b      	str	r3, [r7, #32]
 8012c16:	e011      	b.n	8012c3c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012c1e:	4619      	mov	r1, r3
 8012c20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c22:	f003 faed 	bl	8016200 <tcp_split_unsent_seg>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d107      	bne.n	8012c3c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012c2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c2e:	f003 fd6d 	bl	801670c <tcp_output>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d101      	bne.n	8012c3c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012c3c:	6a3b      	ldr	r3, [r7, #32]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f000 80ac 	beq.w	8012d9c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c46:	2200      	movs	r2, #0
 8012c48:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c4e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012c52:	2b06      	cmp	r3, #6
 8012c54:	f200 80a2 	bhi.w	8012d9c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8012c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c5a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012c5e:	3301      	adds	r3, #1
 8012c60:	b2da      	uxtb	r2, r3
 8012c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c64:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8012c68:	e098      	b.n	8012d9c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	db0f      	blt.n	8012c94 <tcp_slowtmr+0x1f4>
 8012c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012c7a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	d008      	beq.n	8012c94 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8012c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	b21a      	sxth	r2, r3
 8012c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c92:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8012c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c96:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8012c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c9c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	db7b      	blt.n	8012d9c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012ca4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ca6:	f004 f825 	bl	8016cf4 <tcp_rexmit_rto_prepare>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d007      	beq.n	8012cc0 <tcp_slowtmr+0x220>
 8012cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d171      	bne.n	8012d9c <tcp_slowtmr+0x2fc>
 8012cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d06d      	beq.n	8012d9c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8012cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cc2:	7d1b      	ldrb	r3, [r3, #20]
 8012cc4:	2b02      	cmp	r3, #2
 8012cc6:	d03a      	beq.n	8012d3e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012cce:	2b0c      	cmp	r3, #12
 8012cd0:	bf28      	it	cs
 8012cd2:	230c      	movcs	r3, #12
 8012cd4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012cdc:	10db      	asrs	r3, r3, #3
 8012cde:	b21b      	sxth	r3, r3
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ce4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012ce8:	4413      	add	r3, r2
 8012cea:	7efa      	ldrb	r2, [r7, #27]
 8012cec:	4910      	ldr	r1, [pc, #64]	@ (8012d30 <tcp_slowtmr+0x290>)
 8012cee:	5c8a      	ldrb	r2, [r1, r2]
 8012cf0:	4093      	lsls	r3, r2
 8012cf2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012cfa:	4293      	cmp	r3, r2
 8012cfc:	dc1a      	bgt.n	8012d34 <tcp_slowtmr+0x294>
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	b21a      	sxth	r2, r3
 8012d02:	e019      	b.n	8012d38 <tcp_slowtmr+0x298>
 8012d04:	24014bb0 	.word	0x24014bb0
 8012d08:	24014bc6 	.word	0x24014bc6
 8012d0c:	24014bbc 	.word	0x24014bbc
 8012d10:	0801c970 	.word	0x0801c970
 8012d14:	0801ccb4 	.word	0x0801ccb4
 8012d18:	0801c9b4 	.word	0x0801c9b4
 8012d1c:	0801cce0 	.word	0x0801cce0
 8012d20:	0801cd0c 	.word	0x0801cd0c
 8012d24:	0801cd3c 	.word	0x0801cd3c
 8012d28:	0801cd70 	.word	0x0801cd70
 8012d2c:	0801e9e0 	.word	0x0801e9e0
 8012d30:	0801e9d0 	.word	0x0801e9d0
 8012d34:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d40:	2200      	movs	r2, #0
 8012d42:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012d50:	4293      	cmp	r3, r2
 8012d52:	bf28      	it	cs
 8012d54:	4613      	movcs	r3, r2
 8012d56:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012d58:	8a7b      	ldrh	r3, [r7, #18]
 8012d5a:	085b      	lsrs	r3, r3, #1
 8012d5c:	b29a      	uxth	r2, r3
 8012d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d60:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d6e:	005b      	lsls	r3, r3, #1
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d206      	bcs.n	8012d84 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d7a:	005b      	lsls	r3, r3, #1
 8012d7c:	b29a      	uxth	r2, r3
 8012d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d80:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8012d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d86:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8012d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8012d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d90:	2200      	movs	r2, #0
 8012d92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8012d96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012d98:	f004 f81c 	bl	8016dd4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8012d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d9e:	7d1b      	ldrb	r3, [r3, #20]
 8012da0:	2b06      	cmp	r3, #6
 8012da2:	d111      	bne.n	8012dc8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8012da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012da6:	8b5b      	ldrh	r3, [r3, #26]
 8012da8:	f003 0310 	and.w	r3, r3, #16
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d00b      	beq.n	8012dc8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012db0:	4b9c      	ldr	r3, [pc, #624]	@ (8013024 <tcp_slowtmr+0x584>)
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012db6:	6a1b      	ldr	r3, [r3, #32]
 8012db8:	1ad3      	subs	r3, r2, r3
 8012dba:	2b28      	cmp	r3, #40	@ 0x28
 8012dbc:	d904      	bls.n	8012dc8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8012dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dca:	7a5b      	ldrb	r3, [r3, #9]
 8012dcc:	f003 0308 	and.w	r3, r3, #8
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d04a      	beq.n	8012e6a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dd6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012dd8:	2b04      	cmp	r3, #4
 8012dda:	d003      	beq.n	8012de4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dde:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012de0:	2b07      	cmp	r3, #7
 8012de2:	d142      	bne.n	8012e6a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012de4:	4b8f      	ldr	r3, [pc, #572]	@ (8013024 <tcp_slowtmr+0x584>)
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dea:	6a1b      	ldr	r3, [r3, #32]
 8012dec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012df0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012df4:	4b8c      	ldr	r3, [pc, #560]	@ (8013028 <tcp_slowtmr+0x588>)
 8012df6:	440b      	add	r3, r1
 8012df8:	498c      	ldr	r1, [pc, #560]	@ (801302c <tcp_slowtmr+0x58c>)
 8012dfa:	fba1 1303 	umull	r1, r3, r1, r3
 8012dfe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d90a      	bls.n	8012e1a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8012e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e08:	3301      	adds	r3, #1
 8012e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012e12:	3301      	adds	r3, #1
 8012e14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012e18:	e027      	b.n	8012e6a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012e1a:	4b82      	ldr	r3, [pc, #520]	@ (8013024 <tcp_slowtmr+0x584>)
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e20:	6a1b      	ldr	r3, [r3, #32]
 8012e22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e26:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e2c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012e30:	4618      	mov	r0, r3
 8012e32:	4b7f      	ldr	r3, [pc, #508]	@ (8013030 <tcp_slowtmr+0x590>)
 8012e34:	fb00 f303 	mul.w	r3, r0, r3
 8012e38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012e3a:	497c      	ldr	r1, [pc, #496]	@ (801302c <tcp_slowtmr+0x58c>)
 8012e3c:	fba1 1303 	umull	r1, r3, r1, r3
 8012e40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d911      	bls.n	8012e6a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8012e46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012e48:	f004 fac8 	bl	80173dc <tcp_keepalive>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8012e52:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d107      	bne.n	8012e6a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8012e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e5c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012e60:	3301      	adds	r3, #1
 8012e62:	b2da      	uxtb	r2, r3
 8012e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e66:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8012e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d011      	beq.n	8012e96 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012e72:	4b6c      	ldr	r3, [pc, #432]	@ (8013024 <tcp_slowtmr+0x584>)
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e78:	6a1b      	ldr	r3, [r3, #32]
 8012e7a:	1ad2      	subs	r2, r2, r3
 8012e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012e82:	4619      	mov	r1, r3
 8012e84:	460b      	mov	r3, r1
 8012e86:	005b      	lsls	r3, r3, #1
 8012e88:	440b      	add	r3, r1
 8012e8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d302      	bcc.n	8012e96 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8012e90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012e92:	f000 fddf 	bl	8013a54 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8012e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e98:	7d1b      	ldrb	r3, [r3, #20]
 8012e9a:	2b03      	cmp	r3, #3
 8012e9c:	d10b      	bne.n	8012eb6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012e9e:	4b61      	ldr	r3, [pc, #388]	@ (8013024 <tcp_slowtmr+0x584>)
 8012ea0:	681a      	ldr	r2, [r3, #0]
 8012ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ea4:	6a1b      	ldr	r3, [r3, #32]
 8012ea6:	1ad3      	subs	r3, r2, r3
 8012ea8:	2b28      	cmp	r3, #40	@ 0x28
 8012eaa:	d904      	bls.n	8012eb6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8012eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8012eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eb8:	7d1b      	ldrb	r3, [r3, #20]
 8012eba:	2b09      	cmp	r3, #9
 8012ebc:	d10b      	bne.n	8012ed6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012ebe:	4b59      	ldr	r3, [pc, #356]	@ (8013024 <tcp_slowtmr+0x584>)
 8012ec0:	681a      	ldr	r2, [r3, #0]
 8012ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec4:	6a1b      	ldr	r3, [r3, #32]
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	2bf0      	cmp	r3, #240	@ 0xf0
 8012eca:	d904      	bls.n	8012ed6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ed0:	3301      	adds	r3, #1
 8012ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8012ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d060      	beq.n	8012fa0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8012ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ee4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8012ee6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ee8:	f000 fc00 	bl	80136ec <tcp_pcb_purge>
      if (prev != NULL) {
 8012eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d010      	beq.n	8012f14 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012ef2:	4b50      	ldr	r3, [pc, #320]	@ (8013034 <tcp_slowtmr+0x594>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d106      	bne.n	8012f0a <tcp_slowtmr+0x46a>
 8012efc:	4b4e      	ldr	r3, [pc, #312]	@ (8013038 <tcp_slowtmr+0x598>)
 8012efe:	f240 526d 	movw	r2, #1389	@ 0x56d
 8012f02:	494e      	ldr	r1, [pc, #312]	@ (801303c <tcp_slowtmr+0x59c>)
 8012f04:	484e      	ldr	r0, [pc, #312]	@ (8013040 <tcp_slowtmr+0x5a0>)
 8012f06:	f007 ff55 	bl	801adb4 <iprintf>
        prev->next = pcb->next;
 8012f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f0c:	68da      	ldr	r2, [r3, #12]
 8012f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f10:	60da      	str	r2, [r3, #12]
 8012f12:	e00f      	b.n	8012f34 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012f14:	4b47      	ldr	r3, [pc, #284]	@ (8013034 <tcp_slowtmr+0x594>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d006      	beq.n	8012f2c <tcp_slowtmr+0x48c>
 8012f1e:	4b46      	ldr	r3, [pc, #280]	@ (8013038 <tcp_slowtmr+0x598>)
 8012f20:	f240 5271 	movw	r2, #1393	@ 0x571
 8012f24:	4947      	ldr	r1, [pc, #284]	@ (8013044 <tcp_slowtmr+0x5a4>)
 8012f26:	4846      	ldr	r0, [pc, #280]	@ (8013040 <tcp_slowtmr+0x5a0>)
 8012f28:	f007 ff44 	bl	801adb4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f2e:	68db      	ldr	r3, [r3, #12]
 8012f30:	4a40      	ldr	r2, [pc, #256]	@ (8013034 <tcp_slowtmr+0x594>)
 8012f32:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8012f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d013      	beq.n	8012f64 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f3e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f42:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012f44:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8012f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f48:	3304      	adds	r3, #4
 8012f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f4c:	8ad2      	ldrh	r2, [r2, #22]
 8012f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012f50:	8b09      	ldrh	r1, [r1, #24]
 8012f52:	9102      	str	r1, [sp, #8]
 8012f54:	9201      	str	r2, [sp, #4]
 8012f56:	9300      	str	r3, [sp, #0]
 8012f58:	462b      	mov	r3, r5
 8012f5a:	4622      	mov	r2, r4
 8012f5c:	4601      	mov	r1, r0
 8012f5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012f60:	f004 f988 	bl	8017274 <tcp_rst>
      err_arg = pcb->callback_arg;
 8012f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f66:	691b      	ldr	r3, [r3, #16]
 8012f68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f6c:	7d1b      	ldrb	r3, [r3, #20]
 8012f6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f76:	68db      	ldr	r3, [r3, #12]
 8012f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012f7a:	6838      	ldr	r0, [r7, #0]
 8012f7c:	f7ff f9f0 	bl	8012360 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8012f80:	4b31      	ldr	r3, [pc, #196]	@ (8013048 <tcp_slowtmr+0x5a8>)
 8012f82:	2200      	movs	r2, #0
 8012f84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d004      	beq.n	8012f96 <tcp_slowtmr+0x4f6>
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	f06f 010c 	mvn.w	r1, #12
 8012f92:	68b8      	ldr	r0, [r7, #8]
 8012f94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012f96:	4b2c      	ldr	r3, [pc, #176]	@ (8013048 <tcp_slowtmr+0x5a8>)
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d037      	beq.n	801300e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8012f9e:	e592      	b.n	8012ac6 <tcp_slowtmr+0x26>
      prev = pcb;
 8012fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8012faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fac:	7f1b      	ldrb	r3, [r3, #28]
 8012fae:	3301      	adds	r3, #1
 8012fb0:	b2da      	uxtb	r2, r3
 8012fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fb4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fb8:	7f1a      	ldrb	r2, [r3, #28]
 8012fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fbc:	7f5b      	ldrb	r3, [r3, #29]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d325      	bcc.n	801300e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8012fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8013048 <tcp_slowtmr+0x5a8>)
 8012fca:	2200      	movs	r2, #0
 8012fcc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d00b      	beq.n	8012ff0 <tcp_slowtmr+0x550>
 8012fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012fe0:	6912      	ldr	r2, [r2, #16]
 8012fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012fe4:	4610      	mov	r0, r2
 8012fe6:	4798      	blx	r3
 8012fe8:	4603      	mov	r3, r0
 8012fea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8012fee:	e002      	b.n	8012ff6 <tcp_slowtmr+0x556>
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8012ff6:	4b14      	ldr	r3, [pc, #80]	@ (8013048 <tcp_slowtmr+0x5a8>)
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	f47f ad62 	bne.w	8012ac4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013000:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013004:	2b00      	cmp	r3, #0
 8013006:	d102      	bne.n	801300e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801300a:	f003 fb7f 	bl	801670c <tcp_output>
  while (pcb != NULL) {
 801300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013010:	2b00      	cmp	r3, #0
 8013012:	f47f ad5e 	bne.w	8012ad2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013016:	2300      	movs	r3, #0
 8013018:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801301a:	4b0c      	ldr	r3, [pc, #48]	@ (801304c <tcp_slowtmr+0x5ac>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013020:	e069      	b.n	80130f6 <tcp_slowtmr+0x656>
 8013022:	bf00      	nop
 8013024:	24014bb0 	.word	0x24014bb0
 8013028:	000a4cb8 	.word	0x000a4cb8
 801302c:	10624dd3 	.word	0x10624dd3
 8013030:	000124f8 	.word	0x000124f8
 8013034:	24014bbc 	.word	0x24014bbc
 8013038:	0801c970 	.word	0x0801c970
 801303c:	0801cda8 	.word	0x0801cda8
 8013040:	0801c9b4 	.word	0x0801c9b4
 8013044:	0801cdd4 	.word	0x0801cdd4
 8013048:	24014bc4 	.word	0x24014bc4
 801304c:	24014bc0 	.word	0x24014bc0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013052:	7d1b      	ldrb	r3, [r3, #20]
 8013054:	2b0a      	cmp	r3, #10
 8013056:	d006      	beq.n	8013066 <tcp_slowtmr+0x5c6>
 8013058:	4b2b      	ldr	r3, [pc, #172]	@ (8013108 <tcp_slowtmr+0x668>)
 801305a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801305e:	492b      	ldr	r1, [pc, #172]	@ (801310c <tcp_slowtmr+0x66c>)
 8013060:	482b      	ldr	r0, [pc, #172]	@ (8013110 <tcp_slowtmr+0x670>)
 8013062:	f007 fea7 	bl	801adb4 <iprintf>
    pcb_remove = 0;
 8013066:	2300      	movs	r3, #0
 8013068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801306c:	4b29      	ldr	r3, [pc, #164]	@ (8013114 <tcp_slowtmr+0x674>)
 801306e:	681a      	ldr	r2, [r3, #0]
 8013070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013072:	6a1b      	ldr	r3, [r3, #32]
 8013074:	1ad3      	subs	r3, r2, r3
 8013076:	2bf0      	cmp	r3, #240	@ 0xf0
 8013078:	d904      	bls.n	8013084 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801307a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801307e:	3301      	adds	r3, #1
 8013080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013088:	2b00      	cmp	r3, #0
 801308a:	d02f      	beq.n	80130ec <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801308c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801308e:	f000 fb2d 	bl	80136ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013094:	2b00      	cmp	r3, #0
 8013096:	d010      	beq.n	80130ba <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013098:	4b1f      	ldr	r3, [pc, #124]	@ (8013118 <tcp_slowtmr+0x678>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801309e:	429a      	cmp	r2, r3
 80130a0:	d106      	bne.n	80130b0 <tcp_slowtmr+0x610>
 80130a2:	4b19      	ldr	r3, [pc, #100]	@ (8013108 <tcp_slowtmr+0x668>)
 80130a4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80130a8:	491c      	ldr	r1, [pc, #112]	@ (801311c <tcp_slowtmr+0x67c>)
 80130aa:	4819      	ldr	r0, [pc, #100]	@ (8013110 <tcp_slowtmr+0x670>)
 80130ac:	f007 fe82 	bl	801adb4 <iprintf>
        prev->next = pcb->next;
 80130b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130b2:	68da      	ldr	r2, [r3, #12]
 80130b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130b6:	60da      	str	r2, [r3, #12]
 80130b8:	e00f      	b.n	80130da <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80130ba:	4b17      	ldr	r3, [pc, #92]	@ (8013118 <tcp_slowtmr+0x678>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d006      	beq.n	80130d2 <tcp_slowtmr+0x632>
 80130c4:	4b10      	ldr	r3, [pc, #64]	@ (8013108 <tcp_slowtmr+0x668>)
 80130c6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80130ca:	4915      	ldr	r1, [pc, #84]	@ (8013120 <tcp_slowtmr+0x680>)
 80130cc:	4810      	ldr	r0, [pc, #64]	@ (8013110 <tcp_slowtmr+0x670>)
 80130ce:	f007 fe71 	bl	801adb4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80130d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130d4:	68db      	ldr	r3, [r3, #12]
 80130d6:	4a10      	ldr	r2, [pc, #64]	@ (8013118 <tcp_slowtmr+0x678>)
 80130d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80130da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80130de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80130e4:	69f8      	ldr	r0, [r7, #28]
 80130e6:	f7ff f93b 	bl	8012360 <tcp_free>
 80130ea:	e004      	b.n	80130f6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80130ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80130f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80130f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d1a9      	bne.n	8013050 <tcp_slowtmr+0x5b0>
    }
  }
}
 80130fc:	bf00      	nop
 80130fe:	bf00      	nop
 8013100:	3730      	adds	r7, #48	@ 0x30
 8013102:	46bd      	mov	sp, r7
 8013104:	bdb0      	pop	{r4, r5, r7, pc}
 8013106:	bf00      	nop
 8013108:	0801c970 	.word	0x0801c970
 801310c:	0801ce00 	.word	0x0801ce00
 8013110:	0801c9b4 	.word	0x0801c9b4
 8013114:	24014bb0 	.word	0x24014bb0
 8013118:	24014bc0 	.word	0x24014bc0
 801311c:	0801ce30 	.word	0x0801ce30
 8013120:	0801ce58 	.word	0x0801ce58

08013124 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801312a:	4b2d      	ldr	r3, [pc, #180]	@ (80131e0 <tcp_fasttmr+0xbc>)
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	3301      	adds	r3, #1
 8013130:	b2da      	uxtb	r2, r3
 8013132:	4b2b      	ldr	r3, [pc, #172]	@ (80131e0 <tcp_fasttmr+0xbc>)
 8013134:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013136:	4b2b      	ldr	r3, [pc, #172]	@ (80131e4 <tcp_fasttmr+0xc0>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801313c:	e048      	b.n	80131d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	7f9a      	ldrb	r2, [r3, #30]
 8013142:	4b27      	ldr	r3, [pc, #156]	@ (80131e0 <tcp_fasttmr+0xbc>)
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	429a      	cmp	r2, r3
 8013148:	d03f      	beq.n	80131ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801314a:	4b25      	ldr	r3, [pc, #148]	@ (80131e0 <tcp_fasttmr+0xbc>)
 801314c:	781a      	ldrb	r2, [r3, #0]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	8b5b      	ldrh	r3, [r3, #26]
 8013156:	f003 0301 	and.w	r3, r3, #1
 801315a:	2b00      	cmp	r3, #0
 801315c:	d010      	beq.n	8013180 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	8b5b      	ldrh	r3, [r3, #26]
 8013162:	f043 0302 	orr.w	r3, r3, #2
 8013166:	b29a      	uxth	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f003 facd 	bl	801670c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	8b5b      	ldrh	r3, [r3, #26]
 8013176:	f023 0303 	bic.w	r3, r3, #3
 801317a:	b29a      	uxth	r2, r3
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	8b5b      	ldrh	r3, [r3, #26]
 8013184:	f003 0308 	and.w	r3, r3, #8
 8013188:	2b00      	cmp	r3, #0
 801318a:	d009      	beq.n	80131a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	8b5b      	ldrh	r3, [r3, #26]
 8013190:	f023 0308 	bic.w	r3, r3, #8
 8013194:	b29a      	uxth	r2, r3
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7ff fa74 	bl	8012688 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d00a      	beq.n	80131c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80131ae:	4b0e      	ldr	r3, [pc, #56]	@ (80131e8 <tcp_fasttmr+0xc4>)
 80131b0:	2200      	movs	r2, #0
 80131b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f000 f819 	bl	80131ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80131ba:	4b0b      	ldr	r3, [pc, #44]	@ (80131e8 <tcp_fasttmr+0xc4>)
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d000      	beq.n	80131c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80131c2:	e7b8      	b.n	8013136 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	607b      	str	r3, [r7, #4]
 80131c8:	e002      	b.n	80131d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	68db      	ldr	r3, [r3, #12]
 80131ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d1b3      	bne.n	801313e <tcp_fasttmr+0x1a>
    }
  }
}
 80131d6:	bf00      	nop
 80131d8:	bf00      	nop
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	24014bc6 	.word	0x24014bc6
 80131e4:	24014bbc 	.word	0x24014bbc
 80131e8:	24014bc4 	.word	0x24014bc4

080131ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80131ec:	b590      	push	{r4, r7, lr}
 80131ee:	b085      	sub	sp, #20
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d109      	bne.n	801320e <tcp_process_refused_data+0x22>
 80131fa:	4b38      	ldr	r3, [pc, #224]	@ (80132dc <tcp_process_refused_data+0xf0>)
 80131fc:	f240 6209 	movw	r2, #1545	@ 0x609
 8013200:	4937      	ldr	r1, [pc, #220]	@ (80132e0 <tcp_process_refused_data+0xf4>)
 8013202:	4838      	ldr	r0, [pc, #224]	@ (80132e4 <tcp_process_refused_data+0xf8>)
 8013204:	f007 fdd6 	bl	801adb4 <iprintf>
 8013208:	f06f 030f 	mvn.w	r3, #15
 801320c:	e061      	b.n	80132d2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013212:	7b5b      	ldrb	r3, [r3, #13]
 8013214:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801321a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2200      	movs	r2, #0
 8013220:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013228:	2b00      	cmp	r3, #0
 801322a:	d00b      	beq.n	8013244 <tcp_process_refused_data+0x58>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	6918      	ldr	r0, [r3, #16]
 8013236:	2300      	movs	r3, #0
 8013238:	68ba      	ldr	r2, [r7, #8]
 801323a:	6879      	ldr	r1, [r7, #4]
 801323c:	47a0      	blx	r4
 801323e:	4603      	mov	r3, r0
 8013240:	73fb      	strb	r3, [r7, #15]
 8013242:	e007      	b.n	8013254 <tcp_process_refused_data+0x68>
 8013244:	2300      	movs	r3, #0
 8013246:	68ba      	ldr	r2, [r7, #8]
 8013248:	6879      	ldr	r1, [r7, #4]
 801324a:	2000      	movs	r0, #0
 801324c:	f000 f8a6 	bl	801339c <tcp_recv_null>
 8013250:	4603      	mov	r3, r0
 8013252:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d12b      	bne.n	80132b4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801325c:	7bbb      	ldrb	r3, [r7, #14]
 801325e:	f003 0320 	and.w	r3, r3, #32
 8013262:	2b00      	cmp	r3, #0
 8013264:	d034      	beq.n	80132d0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801326a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801326e:	4293      	cmp	r3, r2
 8013270:	d005      	beq.n	801327e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013276:	3301      	adds	r3, #1
 8013278:	b29a      	uxth	r2, r3
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013284:	2b00      	cmp	r3, #0
 8013286:	d00b      	beq.n	80132a0 <tcp_process_refused_data+0xb4>
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6918      	ldr	r0, [r3, #16]
 8013292:	2300      	movs	r3, #0
 8013294:	2200      	movs	r2, #0
 8013296:	6879      	ldr	r1, [r7, #4]
 8013298:	47a0      	blx	r4
 801329a:	4603      	mov	r3, r0
 801329c:	73fb      	strb	r3, [r7, #15]
 801329e:	e001      	b.n	80132a4 <tcp_process_refused_data+0xb8>
 80132a0:	2300      	movs	r3, #0
 80132a2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80132a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132a8:	f113 0f0d 	cmn.w	r3, #13
 80132ac:	d110      	bne.n	80132d0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80132ae:	f06f 030c 	mvn.w	r3, #12
 80132b2:	e00e      	b.n	80132d2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80132b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132b8:	f113 0f0d 	cmn.w	r3, #13
 80132bc:	d102      	bne.n	80132c4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80132be:	f06f 030c 	mvn.w	r3, #12
 80132c2:	e006      	b.n	80132d2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	68ba      	ldr	r2, [r7, #8]
 80132c8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80132ca:	f06f 0304 	mvn.w	r3, #4
 80132ce:	e000      	b.n	80132d2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80132d0:	2300      	movs	r3, #0
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3714      	adds	r7, #20
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd90      	pop	{r4, r7, pc}
 80132da:	bf00      	nop
 80132dc:	0801c970 	.word	0x0801c970
 80132e0:	0801ce80 	.word	0x0801ce80
 80132e4:	0801c9b4 	.word	0x0801c9b4

080132e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80132f0:	e007      	b.n	8013302 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f000 f80a 	bl	8013312 <tcp_seg_free>
    seg = next;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d1f4      	bne.n	80132f2 <tcp_segs_free+0xa>
  }
}
 8013308:	bf00      	nop
 801330a:	bf00      	nop
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}

08013312 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013312:	b580      	push	{r7, lr}
 8013314:	b082      	sub	sp, #8
 8013316:	af00      	add	r7, sp, #0
 8013318:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00c      	beq.n	801333a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	685b      	ldr	r3, [r3, #4]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d004      	beq.n	8013332 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	685b      	ldr	r3, [r3, #4]
 801332c:	4618      	mov	r0, r3
 801332e:	f7fe fc6f 	bl	8011c10 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013332:	6879      	ldr	r1, [r7, #4]
 8013334:	2004      	movs	r0, #4
 8013336:	f7fd fdbf 	bl	8010eb8 <memp_free>
  }
}
 801333a:	bf00      	nop
 801333c:	3708      	adds	r7, #8
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
	...

08013344 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d106      	bne.n	8013360 <tcp_seg_copy+0x1c>
 8013352:	4b0f      	ldr	r3, [pc, #60]	@ (8013390 <tcp_seg_copy+0x4c>)
 8013354:	f240 6282 	movw	r2, #1666	@ 0x682
 8013358:	490e      	ldr	r1, [pc, #56]	@ (8013394 <tcp_seg_copy+0x50>)
 801335a:	480f      	ldr	r0, [pc, #60]	@ (8013398 <tcp_seg_copy+0x54>)
 801335c:	f007 fd2a 	bl	801adb4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013360:	2004      	movs	r0, #4
 8013362:	f7fd fd33 	bl	8010dcc <memp_malloc>
 8013366:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d101      	bne.n	8013372 <tcp_seg_copy+0x2e>
    return NULL;
 801336e:	2300      	movs	r3, #0
 8013370:	e00a      	b.n	8013388 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013372:	2210      	movs	r2, #16
 8013374:	6879      	ldr	r1, [r7, #4]
 8013376:	68f8      	ldr	r0, [r7, #12]
 8013378:	f007 fe55 	bl	801b026 <memcpy>
  pbuf_ref(cseg->p);
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	4618      	mov	r0, r3
 8013382:	f7fe fceb 	bl	8011d5c <pbuf_ref>
  return cseg;
 8013386:	68fb      	ldr	r3, [r7, #12]
}
 8013388:	4618      	mov	r0, r3
 801338a:	3710      	adds	r7, #16
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	0801c970 	.word	0x0801c970
 8013394:	0801cec4 	.word	0x0801cec4
 8013398:	0801c9b4 	.word	0x0801c9b4

0801339c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b084      	sub	sp, #16
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	607a      	str	r2, [r7, #4]
 80133a8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d109      	bne.n	80133c4 <tcp_recv_null+0x28>
 80133b0:	4b12      	ldr	r3, [pc, #72]	@ (80133fc <tcp_recv_null+0x60>)
 80133b2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80133b6:	4912      	ldr	r1, [pc, #72]	@ (8013400 <tcp_recv_null+0x64>)
 80133b8:	4812      	ldr	r0, [pc, #72]	@ (8013404 <tcp_recv_null+0x68>)
 80133ba:	f007 fcfb 	bl	801adb4 <iprintf>
 80133be:	f06f 030f 	mvn.w	r3, #15
 80133c2:	e016      	b.n	80133f2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d009      	beq.n	80133de <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	891b      	ldrh	r3, [r3, #8]
 80133ce:	4619      	mov	r1, r3
 80133d0:	68b8      	ldr	r0, [r7, #8]
 80133d2:	f7ff fb13 	bl	80129fc <tcp_recved>
    pbuf_free(p);
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	f7fe fc1a 	bl	8011c10 <pbuf_free>
 80133dc:	e008      	b.n	80133f0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80133de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d104      	bne.n	80133f0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80133e6:	68b8      	ldr	r0, [r7, #8]
 80133e8:	f7ff f9b8 	bl	801275c <tcp_close>
 80133ec:	4603      	mov	r3, r0
 80133ee:	e000      	b.n	80133f2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80133f0:	2300      	movs	r3, #0
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3710      	adds	r7, #16
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	0801c970 	.word	0x0801c970
 8013400:	0801cee0 	.word	0x0801cee0
 8013404:	0801c9b4 	.word	0x0801c9b4

08013408 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b086      	sub	sp, #24
 801340c:	af00      	add	r7, sp, #0
 801340e:	4603      	mov	r3, r0
 8013410:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013416:	2b00      	cmp	r3, #0
 8013418:	db01      	blt.n	801341e <tcp_kill_prio+0x16>
 801341a:	79fb      	ldrb	r3, [r7, #7]
 801341c:	e000      	b.n	8013420 <tcp_kill_prio+0x18>
 801341e:	237f      	movs	r3, #127	@ 0x7f
 8013420:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013422:	7afb      	ldrb	r3, [r7, #11]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d034      	beq.n	8013492 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013428:	7afb      	ldrb	r3, [r7, #11]
 801342a:	3b01      	subs	r3, #1
 801342c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801342e:	2300      	movs	r3, #0
 8013430:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013432:	2300      	movs	r3, #0
 8013434:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013436:	4b19      	ldr	r3, [pc, #100]	@ (801349c <tcp_kill_prio+0x94>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	617b      	str	r3, [r7, #20]
 801343c:	e01f      	b.n	801347e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	7d5b      	ldrb	r3, [r3, #21]
 8013442:	7afa      	ldrb	r2, [r7, #11]
 8013444:	429a      	cmp	r2, r3
 8013446:	d80c      	bhi.n	8013462 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801344c:	7afa      	ldrb	r2, [r7, #11]
 801344e:	429a      	cmp	r2, r3
 8013450:	d112      	bne.n	8013478 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013452:	4b13      	ldr	r3, [pc, #76]	@ (80134a0 <tcp_kill_prio+0x98>)
 8013454:	681a      	ldr	r2, [r3, #0]
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	6a1b      	ldr	r3, [r3, #32]
 801345a:	1ad3      	subs	r3, r2, r3
 801345c:	68fa      	ldr	r2, [r7, #12]
 801345e:	429a      	cmp	r2, r3
 8013460:	d80a      	bhi.n	8013478 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013462:	4b0f      	ldr	r3, [pc, #60]	@ (80134a0 <tcp_kill_prio+0x98>)
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	6a1b      	ldr	r3, [r3, #32]
 801346a:	1ad3      	subs	r3, r2, r3
 801346c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	7d5b      	ldrb	r3, [r3, #21]
 8013476:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	617b      	str	r3, [r7, #20]
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d1dc      	bne.n	801343e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d004      	beq.n	8013494 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801348a:	6938      	ldr	r0, [r7, #16]
 801348c:	f7ff fa50 	bl	8012930 <tcp_abort>
 8013490:	e000      	b.n	8013494 <tcp_kill_prio+0x8c>
    return;
 8013492:	bf00      	nop
  }
}
 8013494:	3718      	adds	r7, #24
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
 801349a:	bf00      	nop
 801349c:	24014bbc 	.word	0x24014bbc
 80134a0:	24014bb0 	.word	0x24014bb0

080134a4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b086      	sub	sp, #24
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	4603      	mov	r3, r0
 80134ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80134ae:	79fb      	ldrb	r3, [r7, #7]
 80134b0:	2b08      	cmp	r3, #8
 80134b2:	d009      	beq.n	80134c8 <tcp_kill_state+0x24>
 80134b4:	79fb      	ldrb	r3, [r7, #7]
 80134b6:	2b09      	cmp	r3, #9
 80134b8:	d006      	beq.n	80134c8 <tcp_kill_state+0x24>
 80134ba:	4b1a      	ldr	r3, [pc, #104]	@ (8013524 <tcp_kill_state+0x80>)
 80134bc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80134c0:	4919      	ldr	r1, [pc, #100]	@ (8013528 <tcp_kill_state+0x84>)
 80134c2:	481a      	ldr	r0, [pc, #104]	@ (801352c <tcp_kill_state+0x88>)
 80134c4:	f007 fc76 	bl	801adb4 <iprintf>

  inactivity = 0;
 80134c8:	2300      	movs	r3, #0
 80134ca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80134cc:	2300      	movs	r3, #0
 80134ce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80134d0:	4b17      	ldr	r3, [pc, #92]	@ (8013530 <tcp_kill_state+0x8c>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	617b      	str	r3, [r7, #20]
 80134d6:	e017      	b.n	8013508 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	7d1b      	ldrb	r3, [r3, #20]
 80134dc:	79fa      	ldrb	r2, [r7, #7]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d10f      	bne.n	8013502 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80134e2:	4b14      	ldr	r3, [pc, #80]	@ (8013534 <tcp_kill_state+0x90>)
 80134e4:	681a      	ldr	r2, [r3, #0]
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	6a1b      	ldr	r3, [r3, #32]
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d807      	bhi.n	8013502 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80134f2:	4b10      	ldr	r3, [pc, #64]	@ (8013534 <tcp_kill_state+0x90>)
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	697b      	ldr	r3, [r7, #20]
 80134f8:	6a1b      	ldr	r3, [r3, #32]
 80134fa:	1ad3      	subs	r3, r2, r3
 80134fc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	617b      	str	r3, [r7, #20]
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d1e4      	bne.n	80134d8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d003      	beq.n	801351c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013514:	2100      	movs	r1, #0
 8013516:	6938      	ldr	r0, [r7, #16]
 8013518:	f7ff f94c 	bl	80127b4 <tcp_abandon>
  }
}
 801351c:	bf00      	nop
 801351e:	3718      	adds	r7, #24
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	0801c970 	.word	0x0801c970
 8013528:	0801cefc 	.word	0x0801cefc
 801352c:	0801c9b4 	.word	0x0801c9b4
 8013530:	24014bbc 	.word	0x24014bbc
 8013534:	24014bb0 	.word	0x24014bb0

08013538 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801353e:	2300      	movs	r3, #0
 8013540:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013542:	2300      	movs	r3, #0
 8013544:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013546:	4b12      	ldr	r3, [pc, #72]	@ (8013590 <tcp_kill_timewait+0x58>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	60fb      	str	r3, [r7, #12]
 801354c:	e012      	b.n	8013574 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801354e:	4b11      	ldr	r3, [pc, #68]	@ (8013594 <tcp_kill_timewait+0x5c>)
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	6a1b      	ldr	r3, [r3, #32]
 8013556:	1ad3      	subs	r3, r2, r3
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	429a      	cmp	r2, r3
 801355c:	d807      	bhi.n	801356e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801355e:	4b0d      	ldr	r3, [pc, #52]	@ (8013594 <tcp_kill_timewait+0x5c>)
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	6a1b      	ldr	r3, [r3, #32]
 8013566:	1ad3      	subs	r3, r2, r3
 8013568:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	68db      	ldr	r3, [r3, #12]
 8013572:	60fb      	str	r3, [r7, #12]
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d1e9      	bne.n	801354e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d002      	beq.n	8013586 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013580:	68b8      	ldr	r0, [r7, #8]
 8013582:	f7ff f9d5 	bl	8012930 <tcp_abort>
  }
}
 8013586:	bf00      	nop
 8013588:	3710      	adds	r7, #16
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	24014bc0 	.word	0x24014bc0
 8013594:	24014bb0 	.word	0x24014bb0

08013598 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801359e:	4b10      	ldr	r3, [pc, #64]	@ (80135e0 <tcp_handle_closepend+0x48>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80135a4:	e014      	b.n	80135d0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	68db      	ldr	r3, [r3, #12]
 80135aa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	8b5b      	ldrh	r3, [r3, #26]
 80135b0:	f003 0308 	and.w	r3, r3, #8
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d009      	beq.n	80135cc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	8b5b      	ldrh	r3, [r3, #26]
 80135bc:	f023 0308 	bic.w	r3, r3, #8
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f7ff f85e 	bl	8012688 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d1e7      	bne.n	80135a6 <tcp_handle_closepend+0xe>
  }
}
 80135d6:	bf00      	nop
 80135d8:	bf00      	nop
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	24014bbc 	.word	0x24014bbc

080135e4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b084      	sub	sp, #16
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	4603      	mov	r3, r0
 80135ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80135ee:	2002      	movs	r0, #2
 80135f0:	f7fd fbec 	bl	8010dcc <memp_malloc>
 80135f4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d126      	bne.n	801364a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80135fc:	f7ff ffcc 	bl	8013598 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013600:	f7ff ff9a 	bl	8013538 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013604:	2002      	movs	r0, #2
 8013606:	f7fd fbe1 	bl	8010dcc <memp_malloc>
 801360a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d11b      	bne.n	801364a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013612:	2009      	movs	r0, #9
 8013614:	f7ff ff46 	bl	80134a4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013618:	2002      	movs	r0, #2
 801361a:	f7fd fbd7 	bl	8010dcc <memp_malloc>
 801361e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d111      	bne.n	801364a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013626:	2008      	movs	r0, #8
 8013628:	f7ff ff3c 	bl	80134a4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801362c:	2002      	movs	r0, #2
 801362e:	f7fd fbcd 	bl	8010dcc <memp_malloc>
 8013632:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d107      	bne.n	801364a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801363a:	79fb      	ldrb	r3, [r7, #7]
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff fee3 	bl	8013408 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013642:	2002      	movs	r0, #2
 8013644:	f7fd fbc2 	bl	8010dcc <memp_malloc>
 8013648:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d03f      	beq.n	80136d0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013650:	229c      	movs	r2, #156	@ 0x9c
 8013652:	2100      	movs	r1, #0
 8013654:	68f8      	ldr	r0, [r7, #12]
 8013656:	f007 fc12 	bl	801ae7e <memset>
    pcb->prio = prio;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	79fa      	ldrb	r2, [r7, #7]
 801365e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8013666:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8013670:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	22ff      	movs	r2, #255	@ 0xff
 801367e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013686:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2206      	movs	r2, #6
 801368c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2206      	movs	r2, #6
 8013694:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801369c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	2201      	movs	r2, #1
 80136a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80136a6:	4b0d      	ldr	r3, [pc, #52]	@ (80136dc <tcp_alloc+0xf8>)
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80136ae:	4b0c      	ldr	r3, [pc, #48]	@ (80136e0 <tcp_alloc+0xfc>)
 80136b0:	781a      	ldrb	r2, [r3, #0]
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80136bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	4a08      	ldr	r2, [pc, #32]	@ (80136e4 <tcp_alloc+0x100>)
 80136c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	4a07      	ldr	r2, [pc, #28]	@ (80136e8 <tcp_alloc+0x104>)
 80136cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80136d0:	68fb      	ldr	r3, [r7, #12]
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3710      	adds	r7, #16
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	24014bb0 	.word	0x24014bb0
 80136e0:	24014bc6 	.word	0x24014bc6
 80136e4:	0801339d 	.word	0x0801339d
 80136e8:	006ddd00 	.word	0x006ddd00

080136ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d107      	bne.n	801370a <tcp_pcb_purge+0x1e>
 80136fa:	4b21      	ldr	r3, [pc, #132]	@ (8013780 <tcp_pcb_purge+0x94>)
 80136fc:	f640 0251 	movw	r2, #2129	@ 0x851
 8013700:	4920      	ldr	r1, [pc, #128]	@ (8013784 <tcp_pcb_purge+0x98>)
 8013702:	4821      	ldr	r0, [pc, #132]	@ (8013788 <tcp_pcb_purge+0x9c>)
 8013704:	f007 fb56 	bl	801adb4 <iprintf>
 8013708:	e037      	b.n	801377a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	7d1b      	ldrb	r3, [r3, #20]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d033      	beq.n	801377a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013716:	2b0a      	cmp	r3, #10
 8013718:	d02f      	beq.n	801377a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801371e:	2b01      	cmp	r3, #1
 8013720:	d02b      	beq.n	801377a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013726:	2b00      	cmp	r3, #0
 8013728:	d007      	beq.n	801373a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801372e:	4618      	mov	r0, r3
 8013730:	f7fe fa6e 	bl	8011c10 <pbuf_free>
      pcb->refused_data = NULL;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2200      	movs	r2, #0
 8013738:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801373e:	2b00      	cmp	r3, #0
 8013740:	d002      	beq.n	8013748 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f000 f986 	bl	8013a54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801374e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013754:	4618      	mov	r0, r3
 8013756:	f7ff fdc7 	bl	80132e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801375e:	4618      	mov	r0, r3
 8013760:	f7ff fdc2 	bl	80132e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2200      	movs	r2, #0
 8013768:	66da      	str	r2, [r3, #108]	@ 0x6c
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2200      	movs	r2, #0
 8013776:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801377a:	3708      	adds	r7, #8
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}
 8013780:	0801c970 	.word	0x0801c970
 8013784:	0801cfbc 	.word	0x0801cfbc
 8013788:	0801c9b4 	.word	0x0801c9b4

0801378c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b084      	sub	sp, #16
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d106      	bne.n	80137aa <tcp_pcb_remove+0x1e>
 801379c:	4b3e      	ldr	r3, [pc, #248]	@ (8013898 <tcp_pcb_remove+0x10c>)
 801379e:	f640 0283 	movw	r2, #2179	@ 0x883
 80137a2:	493e      	ldr	r1, [pc, #248]	@ (801389c <tcp_pcb_remove+0x110>)
 80137a4:	483e      	ldr	r0, [pc, #248]	@ (80138a0 <tcp_pcb_remove+0x114>)
 80137a6:	f007 fb05 	bl	801adb4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d106      	bne.n	80137be <tcp_pcb_remove+0x32>
 80137b0:	4b39      	ldr	r3, [pc, #228]	@ (8013898 <tcp_pcb_remove+0x10c>)
 80137b2:	f640 0284 	movw	r2, #2180	@ 0x884
 80137b6:	493b      	ldr	r1, [pc, #236]	@ (80138a4 <tcp_pcb_remove+0x118>)
 80137b8:	4839      	ldr	r0, [pc, #228]	@ (80138a0 <tcp_pcb_remove+0x114>)
 80137ba:	f007 fafb 	bl	801adb4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	683a      	ldr	r2, [r7, #0]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d105      	bne.n	80137d4 <tcp_pcb_remove+0x48>
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	68da      	ldr	r2, [r3, #12]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	601a      	str	r2, [r3, #0]
 80137d2:	e013      	b.n	80137fc <tcp_pcb_remove+0x70>
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	60fb      	str	r3, [r7, #12]
 80137da:	e00c      	b.n	80137f6 <tcp_pcb_remove+0x6a>
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	68db      	ldr	r3, [r3, #12]
 80137e0:	683a      	ldr	r2, [r7, #0]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d104      	bne.n	80137f0 <tcp_pcb_remove+0x64>
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	68da      	ldr	r2, [r3, #12]
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	60da      	str	r2, [r3, #12]
 80137ee:	e005      	b.n	80137fc <tcp_pcb_remove+0x70>
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	60fb      	str	r3, [r7, #12]
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d1ef      	bne.n	80137dc <tcp_pcb_remove+0x50>
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	2200      	movs	r2, #0
 8013800:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013802:	6838      	ldr	r0, [r7, #0]
 8013804:	f7ff ff72 	bl	80136ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	7d1b      	ldrb	r3, [r3, #20]
 801380c:	2b0a      	cmp	r3, #10
 801380e:	d013      	beq.n	8013838 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013814:	2b01      	cmp	r3, #1
 8013816:	d00f      	beq.n	8013838 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	8b5b      	ldrh	r3, [r3, #26]
 801381c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013820:	2b00      	cmp	r3, #0
 8013822:	d009      	beq.n	8013838 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	8b5b      	ldrh	r3, [r3, #26]
 8013828:	f043 0302 	orr.w	r3, r3, #2
 801382c:	b29a      	uxth	r2, r3
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013832:	6838      	ldr	r0, [r7, #0]
 8013834:	f002 ff6a 	bl	801670c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	7d1b      	ldrb	r3, [r3, #20]
 801383c:	2b01      	cmp	r3, #1
 801383e:	d020      	beq.n	8013882 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013844:	2b00      	cmp	r3, #0
 8013846:	d006      	beq.n	8013856 <tcp_pcb_remove+0xca>
 8013848:	4b13      	ldr	r3, [pc, #76]	@ (8013898 <tcp_pcb_remove+0x10c>)
 801384a:	f640 0293 	movw	r2, #2195	@ 0x893
 801384e:	4916      	ldr	r1, [pc, #88]	@ (80138a8 <tcp_pcb_remove+0x11c>)
 8013850:	4813      	ldr	r0, [pc, #76]	@ (80138a0 <tcp_pcb_remove+0x114>)
 8013852:	f007 faaf 	bl	801adb4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801385a:	2b00      	cmp	r3, #0
 801385c:	d006      	beq.n	801386c <tcp_pcb_remove+0xe0>
 801385e:	4b0e      	ldr	r3, [pc, #56]	@ (8013898 <tcp_pcb_remove+0x10c>)
 8013860:	f640 0294 	movw	r2, #2196	@ 0x894
 8013864:	4911      	ldr	r1, [pc, #68]	@ (80138ac <tcp_pcb_remove+0x120>)
 8013866:	480e      	ldr	r0, [pc, #56]	@ (80138a0 <tcp_pcb_remove+0x114>)
 8013868:	f007 faa4 	bl	801adb4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013870:	2b00      	cmp	r3, #0
 8013872:	d006      	beq.n	8013882 <tcp_pcb_remove+0xf6>
 8013874:	4b08      	ldr	r3, [pc, #32]	@ (8013898 <tcp_pcb_remove+0x10c>)
 8013876:	f640 0296 	movw	r2, #2198	@ 0x896
 801387a:	490d      	ldr	r1, [pc, #52]	@ (80138b0 <tcp_pcb_remove+0x124>)
 801387c:	4808      	ldr	r0, [pc, #32]	@ (80138a0 <tcp_pcb_remove+0x114>)
 801387e:	f007 fa99 	bl	801adb4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	2200      	movs	r2, #0
 8013886:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	2200      	movs	r2, #0
 801388c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801388e:	bf00      	nop
 8013890:	3710      	adds	r7, #16
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	0801c970 	.word	0x0801c970
 801389c:	0801cfd8 	.word	0x0801cfd8
 80138a0:	0801c9b4 	.word	0x0801c9b4
 80138a4:	0801cff4 	.word	0x0801cff4
 80138a8:	0801d014 	.word	0x0801d014
 80138ac:	0801d02c 	.word	0x0801d02c
 80138b0:	0801d048 	.word	0x0801d048

080138b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d106      	bne.n	80138d0 <tcp_next_iss+0x1c>
 80138c2:	4b0a      	ldr	r3, [pc, #40]	@ (80138ec <tcp_next_iss+0x38>)
 80138c4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80138c8:	4909      	ldr	r1, [pc, #36]	@ (80138f0 <tcp_next_iss+0x3c>)
 80138ca:	480a      	ldr	r0, [pc, #40]	@ (80138f4 <tcp_next_iss+0x40>)
 80138cc:	f007 fa72 	bl	801adb4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80138d0:	4b09      	ldr	r3, [pc, #36]	@ (80138f8 <tcp_next_iss+0x44>)
 80138d2:	681a      	ldr	r2, [r3, #0]
 80138d4:	4b09      	ldr	r3, [pc, #36]	@ (80138fc <tcp_next_iss+0x48>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	4413      	add	r3, r2
 80138da:	4a07      	ldr	r2, [pc, #28]	@ (80138f8 <tcp_next_iss+0x44>)
 80138dc:	6013      	str	r3, [r2, #0]
  return iss;
 80138de:	4b06      	ldr	r3, [pc, #24]	@ (80138f8 <tcp_next_iss+0x44>)
 80138e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	3708      	adds	r7, #8
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	0801c970 	.word	0x0801c970
 80138f0:	0801d060 	.word	0x0801d060
 80138f4:	0801c9b4 	.word	0x0801c9b4
 80138f8:	240049ec 	.word	0x240049ec
 80138fc:	24014bb0 	.word	0x24014bb0

08013900 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b086      	sub	sp, #24
 8013904:	af00      	add	r7, sp, #0
 8013906:	4603      	mov	r3, r0
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	607a      	str	r2, [r7, #4]
 801390c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d106      	bne.n	8013922 <tcp_eff_send_mss_netif+0x22>
 8013914:	4b14      	ldr	r3, [pc, #80]	@ (8013968 <tcp_eff_send_mss_netif+0x68>)
 8013916:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801391a:	4914      	ldr	r1, [pc, #80]	@ (801396c <tcp_eff_send_mss_netif+0x6c>)
 801391c:	4814      	ldr	r0, [pc, #80]	@ (8013970 <tcp_eff_send_mss_netif+0x70>)
 801391e:	f007 fa49 	bl	801adb4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d101      	bne.n	801392c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013928:	89fb      	ldrh	r3, [r7, #14]
 801392a:	e019      	b.n	8013960 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013930:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013932:	8afb      	ldrh	r3, [r7, #22]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d012      	beq.n	801395e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013938:	2328      	movs	r3, #40	@ 0x28
 801393a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801393c:	8afa      	ldrh	r2, [r7, #22]
 801393e:	8abb      	ldrh	r3, [r7, #20]
 8013940:	429a      	cmp	r2, r3
 8013942:	d904      	bls.n	801394e <tcp_eff_send_mss_netif+0x4e>
 8013944:	8afa      	ldrh	r2, [r7, #22]
 8013946:	8abb      	ldrh	r3, [r7, #20]
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	b29b      	uxth	r3, r3
 801394c:	e000      	b.n	8013950 <tcp_eff_send_mss_netif+0x50>
 801394e:	2300      	movs	r3, #0
 8013950:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013952:	8a7a      	ldrh	r2, [r7, #18]
 8013954:	89fb      	ldrh	r3, [r7, #14]
 8013956:	4293      	cmp	r3, r2
 8013958:	bf28      	it	cs
 801395a:	4613      	movcs	r3, r2
 801395c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801395e:	89fb      	ldrh	r3, [r7, #14]
}
 8013960:	4618      	mov	r0, r3
 8013962:	3718      	adds	r7, #24
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}
 8013968:	0801c970 	.word	0x0801c970
 801396c:	0801d07c 	.word	0x0801d07c
 8013970:	0801c9b4 	.word	0x0801c9b4

08013974 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d119      	bne.n	80139bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013988:	4b10      	ldr	r3, [pc, #64]	@ (80139cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801398a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801398e:	4910      	ldr	r1, [pc, #64]	@ (80139d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013990:	4810      	ldr	r0, [pc, #64]	@ (80139d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013992:	f007 fa0f 	bl	801adb4 <iprintf>

  while (pcb != NULL) {
 8013996:	e011      	b.n	80139bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	681a      	ldr	r2, [r3, #0]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d108      	bne.n	80139b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	68db      	ldr	r3, [r3, #12]
 80139a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80139aa:	68f8      	ldr	r0, [r7, #12]
 80139ac:	f7fe ffc0 	bl	8012930 <tcp_abort>
      pcb = next;
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	60fb      	str	r3, [r7, #12]
 80139b4:	e002      	b.n	80139bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	68db      	ldr	r3, [r3, #12]
 80139ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d1ea      	bne.n	8013998 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80139c2:	bf00      	nop
 80139c4:	bf00      	nop
 80139c6:	3710      	adds	r7, #16
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	0801c970 	.word	0x0801c970
 80139d0:	0801d0a4 	.word	0x0801d0a4
 80139d4:	0801c9b4 	.word	0x0801c9b4

080139d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b084      	sub	sp, #16
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
 80139e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d02a      	beq.n	8013a3e <tcp_netif_ip_addr_changed+0x66>
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d026      	beq.n	8013a3e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80139f0:	4b15      	ldr	r3, [pc, #84]	@ (8013a48 <tcp_netif_ip_addr_changed+0x70>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4619      	mov	r1, r3
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f7ff ffbc 	bl	8013974 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80139fc:	4b13      	ldr	r3, [pc, #76]	@ (8013a4c <tcp_netif_ip_addr_changed+0x74>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	4619      	mov	r1, r3
 8013a02:	6878      	ldr	r0, [r7, #4]
 8013a04:	f7ff ffb6 	bl	8013974 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d017      	beq.n	8013a3e <tcp_netif_ip_addr_changed+0x66>
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d013      	beq.n	8013a3e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a16:	4b0e      	ldr	r3, [pc, #56]	@ (8013a50 <tcp_netif_ip_addr_changed+0x78>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	60fb      	str	r3, [r7, #12]
 8013a1c:	e00c      	b.n	8013a38 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d103      	bne.n	8013a32 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	68db      	ldr	r3, [r3, #12]
 8013a36:	60fb      	str	r3, [r7, #12]
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d1ef      	bne.n	8013a1e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013a3e:	bf00      	nop
 8013a40:	3710      	adds	r7, #16
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	24014bbc 	.word	0x24014bbc
 8013a4c:	24014bb4 	.word	0x24014bb4
 8013a50:	24014bb8 	.word	0x24014bb8

08013a54 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b082      	sub	sp, #8
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d007      	beq.n	8013a74 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7ff fc3d 	bl	80132e8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2200      	movs	r2, #0
 8013a72:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013a74:	bf00      	nop
 8013a76:	3708      	adds	r7, #8
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}

08013a7c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013a7c:	b590      	push	{r4, r7, lr}
 8013a7e:	b08d      	sub	sp, #52	@ 0x34
 8013a80:	af04      	add	r7, sp, #16
 8013a82:	6078      	str	r0, [r7, #4]
 8013a84:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d105      	bne.n	8013a98 <tcp_input+0x1c>
 8013a8c:	4b9b      	ldr	r3, [pc, #620]	@ (8013cfc <tcp_input+0x280>)
 8013a8e:	2283      	movs	r2, #131	@ 0x83
 8013a90:	499b      	ldr	r1, [pc, #620]	@ (8013d00 <tcp_input+0x284>)
 8013a92:	489c      	ldr	r0, [pc, #624]	@ (8013d04 <tcp_input+0x288>)
 8013a94:	f007 f98e 	bl	801adb4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	685b      	ldr	r3, [r3, #4]
 8013a9c:	4a9a      	ldr	r2, [pc, #616]	@ (8013d08 <tcp_input+0x28c>)
 8013a9e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	895b      	ldrh	r3, [r3, #10]
 8013aa4:	2b13      	cmp	r3, #19
 8013aa6:	f240 83d1 	bls.w	801424c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013aaa:	4b98      	ldr	r3, [pc, #608]	@ (8013d0c <tcp_input+0x290>)
 8013aac:	695b      	ldr	r3, [r3, #20]
 8013aae:	4a97      	ldr	r2, [pc, #604]	@ (8013d0c <tcp_input+0x290>)
 8013ab0:	6812      	ldr	r2, [r2, #0]
 8013ab2:	4611      	mov	r1, r2
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f005 ffa5 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 8013aba:	4603      	mov	r3, r0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	f040 83c7 	bne.w	8014250 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013ac2:	4b92      	ldr	r3, [pc, #584]	@ (8013d0c <tcp_input+0x290>)
 8013ac4:	695b      	ldr	r3, [r3, #20]
 8013ac6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013aca:	2be0      	cmp	r3, #224	@ 0xe0
 8013acc:	f000 83c0 	beq.w	8014250 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013ad0:	4b8d      	ldr	r3, [pc, #564]	@ (8013d08 <tcp_input+0x28c>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	899b      	ldrh	r3, [r3, #12]
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7fc fbe7 	bl	80102ac <lwip_htons>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	0b1b      	lsrs	r3, r3, #12
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	009b      	lsls	r3, r3, #2
 8013ae8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013aea:	7cbb      	ldrb	r3, [r7, #18]
 8013aec:	2b13      	cmp	r3, #19
 8013aee:	f240 83b1 	bls.w	8014254 <tcp_input+0x7d8>
 8013af2:	7cbb      	ldrb	r3, [r7, #18]
 8013af4:	b29a      	uxth	r2, r3
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	891b      	ldrh	r3, [r3, #8]
 8013afa:	429a      	cmp	r2, r3
 8013afc:	f200 83aa 	bhi.w	8014254 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013b00:	7cbb      	ldrb	r3, [r7, #18]
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	3b14      	subs	r3, #20
 8013b06:	b29a      	uxth	r2, r3
 8013b08:	4b81      	ldr	r3, [pc, #516]	@ (8013d10 <tcp_input+0x294>)
 8013b0a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013b0c:	4b81      	ldr	r3, [pc, #516]	@ (8013d14 <tcp_input+0x298>)
 8013b0e:	2200      	movs	r2, #0
 8013b10:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	895a      	ldrh	r2, [r3, #10]
 8013b16:	7cbb      	ldrb	r3, [r7, #18]
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d309      	bcc.n	8013b32 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8013d10 <tcp_input+0x294>)
 8013b20:	881a      	ldrh	r2, [r3, #0]
 8013b22:	4b7d      	ldr	r3, [pc, #500]	@ (8013d18 <tcp_input+0x29c>)
 8013b24:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013b26:	7cbb      	ldrb	r3, [r7, #18]
 8013b28:	4619      	mov	r1, r3
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7fd ffea 	bl	8011b04 <pbuf_remove_header>
 8013b30:	e04e      	b.n	8013bd0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d105      	bne.n	8013b46 <tcp_input+0xca>
 8013b3a:	4b70      	ldr	r3, [pc, #448]	@ (8013cfc <tcp_input+0x280>)
 8013b3c:	22c2      	movs	r2, #194	@ 0xc2
 8013b3e:	4977      	ldr	r1, [pc, #476]	@ (8013d1c <tcp_input+0x2a0>)
 8013b40:	4870      	ldr	r0, [pc, #448]	@ (8013d04 <tcp_input+0x288>)
 8013b42:	f007 f937 	bl	801adb4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013b46:	2114      	movs	r1, #20
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f7fd ffdb 	bl	8011b04 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	895a      	ldrh	r2, [r3, #10]
 8013b52:	4b71      	ldr	r3, [pc, #452]	@ (8013d18 <tcp_input+0x29c>)
 8013b54:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013b56:	4b6e      	ldr	r3, [pc, #440]	@ (8013d10 <tcp_input+0x294>)
 8013b58:	881a      	ldrh	r2, [r3, #0]
 8013b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8013d18 <tcp_input+0x29c>)
 8013b5c:	881b      	ldrh	r3, [r3, #0]
 8013b5e:	1ad3      	subs	r3, r2, r3
 8013b60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013b62:	4b6d      	ldr	r3, [pc, #436]	@ (8013d18 <tcp_input+0x29c>)
 8013b64:	881b      	ldrh	r3, [r3, #0]
 8013b66:	4619      	mov	r1, r3
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f7fd ffcb 	bl	8011b04 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	895b      	ldrh	r3, [r3, #10]
 8013b74:	8a3a      	ldrh	r2, [r7, #16]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	f200 836e 	bhi.w	8014258 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	4a64      	ldr	r2, [pc, #400]	@ (8013d14 <tcp_input+0x298>)
 8013b84:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	8a3a      	ldrh	r2, [r7, #16]
 8013b8c:	4611      	mov	r1, r2
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f7fd ffb8 	bl	8011b04 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	891a      	ldrh	r2, [r3, #8]
 8013b98:	8a3b      	ldrh	r3, [r7, #16]
 8013b9a:	1ad3      	subs	r3, r2, r3
 8013b9c:	b29a      	uxth	r2, r3
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	895b      	ldrh	r3, [r3, #10]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d005      	beq.n	8013bb6 <tcp_input+0x13a>
 8013baa:	4b54      	ldr	r3, [pc, #336]	@ (8013cfc <tcp_input+0x280>)
 8013bac:	22df      	movs	r2, #223	@ 0xdf
 8013bae:	495c      	ldr	r1, [pc, #368]	@ (8013d20 <tcp_input+0x2a4>)
 8013bb0:	4854      	ldr	r0, [pc, #336]	@ (8013d04 <tcp_input+0x288>)
 8013bb2:	f007 f8ff 	bl	801adb4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	891a      	ldrh	r2, [r3, #8]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	891b      	ldrh	r3, [r3, #8]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d005      	beq.n	8013bd0 <tcp_input+0x154>
 8013bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8013cfc <tcp_input+0x280>)
 8013bc6:	22e0      	movs	r2, #224	@ 0xe0
 8013bc8:	4956      	ldr	r1, [pc, #344]	@ (8013d24 <tcp_input+0x2a8>)
 8013bca:	484e      	ldr	r0, [pc, #312]	@ (8013d04 <tcp_input+0x288>)
 8013bcc:	f007 f8f2 	bl	801adb4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8013d08 <tcp_input+0x28c>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	881b      	ldrh	r3, [r3, #0]
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8013d08 <tcp_input+0x28c>)
 8013bda:	6814      	ldr	r4, [r2, #0]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7fc fb65 	bl	80102ac <lwip_htons>
 8013be2:	4603      	mov	r3, r0
 8013be4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013be6:	4b48      	ldr	r3, [pc, #288]	@ (8013d08 <tcp_input+0x28c>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	885b      	ldrh	r3, [r3, #2]
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	4a46      	ldr	r2, [pc, #280]	@ (8013d08 <tcp_input+0x28c>)
 8013bf0:	6814      	ldr	r4, [r2, #0]
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7fc fb5a 	bl	80102ac <lwip_htons>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013bfc:	4b42      	ldr	r3, [pc, #264]	@ (8013d08 <tcp_input+0x28c>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	4a41      	ldr	r2, [pc, #260]	@ (8013d08 <tcp_input+0x28c>)
 8013c04:	6814      	ldr	r4, [r2, #0]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7fc fb66 	bl	80102d8 <lwip_htonl>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	6063      	str	r3, [r4, #4]
 8013c10:	6863      	ldr	r3, [r4, #4]
 8013c12:	4a45      	ldr	r2, [pc, #276]	@ (8013d28 <tcp_input+0x2ac>)
 8013c14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013c16:	4b3c      	ldr	r3, [pc, #240]	@ (8013d08 <tcp_input+0x28c>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	689b      	ldr	r3, [r3, #8]
 8013c1c:	4a3a      	ldr	r2, [pc, #232]	@ (8013d08 <tcp_input+0x28c>)
 8013c1e:	6814      	ldr	r4, [r2, #0]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fc fb59 	bl	80102d8 <lwip_htonl>
 8013c26:	4603      	mov	r3, r0
 8013c28:	60a3      	str	r3, [r4, #8]
 8013c2a:	68a3      	ldr	r3, [r4, #8]
 8013c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8013d2c <tcp_input+0x2b0>)
 8013c2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013c30:	4b35      	ldr	r3, [pc, #212]	@ (8013d08 <tcp_input+0x28c>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	89db      	ldrh	r3, [r3, #14]
 8013c36:	b29b      	uxth	r3, r3
 8013c38:	4a33      	ldr	r2, [pc, #204]	@ (8013d08 <tcp_input+0x28c>)
 8013c3a:	6814      	ldr	r4, [r2, #0]
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7fc fb35 	bl	80102ac <lwip_htons>
 8013c42:	4603      	mov	r3, r0
 8013c44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013c46:	4b30      	ldr	r3, [pc, #192]	@ (8013d08 <tcp_input+0x28c>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	899b      	ldrh	r3, [r3, #12]
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7fc fb2c 	bl	80102ac <lwip_htons>
 8013c54:	4603      	mov	r3, r0
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013c5c:	b2da      	uxtb	r2, r3
 8013c5e:	4b34      	ldr	r3, [pc, #208]	@ (8013d30 <tcp_input+0x2b4>)
 8013c60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	891a      	ldrh	r2, [r3, #8]
 8013c66:	4b33      	ldr	r3, [pc, #204]	@ (8013d34 <tcp_input+0x2b8>)
 8013c68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013c6a:	4b31      	ldr	r3, [pc, #196]	@ (8013d30 <tcp_input+0x2b4>)
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	f003 0303 	and.w	r3, r3, #3
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d00c      	beq.n	8013c90 <tcp_input+0x214>
    tcplen++;
 8013c76:	4b2f      	ldr	r3, [pc, #188]	@ (8013d34 <tcp_input+0x2b8>)
 8013c78:	881b      	ldrh	r3, [r3, #0]
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	b29a      	uxth	r2, r3
 8013c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8013d34 <tcp_input+0x2b8>)
 8013c80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	891a      	ldrh	r2, [r3, #8]
 8013c86:	4b2b      	ldr	r3, [pc, #172]	@ (8013d34 <tcp_input+0x2b8>)
 8013c88:	881b      	ldrh	r3, [r3, #0]
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	f200 82e6 	bhi.w	801425c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013c90:	2300      	movs	r3, #0
 8013c92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c94:	4b28      	ldr	r3, [pc, #160]	@ (8013d38 <tcp_input+0x2bc>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	61fb      	str	r3, [r7, #28]
 8013c9a:	e09d      	b.n	8013dd8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013c9c:	69fb      	ldr	r3, [r7, #28]
 8013c9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d105      	bne.n	8013cb0 <tcp_input+0x234>
 8013ca4:	4b15      	ldr	r3, [pc, #84]	@ (8013cfc <tcp_input+0x280>)
 8013ca6:	22fb      	movs	r2, #251	@ 0xfb
 8013ca8:	4924      	ldr	r1, [pc, #144]	@ (8013d3c <tcp_input+0x2c0>)
 8013caa:	4816      	ldr	r0, [pc, #88]	@ (8013d04 <tcp_input+0x288>)
 8013cac:	f007 f882 	bl	801adb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	7d1b      	ldrb	r3, [r3, #20]
 8013cb4:	2b0a      	cmp	r3, #10
 8013cb6:	d105      	bne.n	8013cc4 <tcp_input+0x248>
 8013cb8:	4b10      	ldr	r3, [pc, #64]	@ (8013cfc <tcp_input+0x280>)
 8013cba:	22fc      	movs	r2, #252	@ 0xfc
 8013cbc:	4920      	ldr	r1, [pc, #128]	@ (8013d40 <tcp_input+0x2c4>)
 8013cbe:	4811      	ldr	r0, [pc, #68]	@ (8013d04 <tcp_input+0x288>)
 8013cc0:	f007 f878 	bl	801adb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	7d1b      	ldrb	r3, [r3, #20]
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d105      	bne.n	8013cd8 <tcp_input+0x25c>
 8013ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8013cfc <tcp_input+0x280>)
 8013cce:	22fd      	movs	r2, #253	@ 0xfd
 8013cd0:	491c      	ldr	r1, [pc, #112]	@ (8013d44 <tcp_input+0x2c8>)
 8013cd2:	480c      	ldr	r0, [pc, #48]	@ (8013d04 <tcp_input+0x288>)
 8013cd4:	f007 f86e 	bl	801adb4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013cd8:	69fb      	ldr	r3, [r7, #28]
 8013cda:	7a1b      	ldrb	r3, [r3, #8]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d033      	beq.n	8013d48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ce0:	69fb      	ldr	r3, [r7, #28]
 8013ce2:	7a1a      	ldrb	r2, [r3, #8]
 8013ce4:	4b09      	ldr	r3, [pc, #36]	@ (8013d0c <tcp_input+0x290>)
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013cec:	3301      	adds	r3, #1
 8013cee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d029      	beq.n	8013d48 <tcp_input+0x2cc>
      prev = pcb;
 8013cf4:	69fb      	ldr	r3, [r7, #28]
 8013cf6:	61bb      	str	r3, [r7, #24]
      continue;
 8013cf8:	e06b      	b.n	8013dd2 <tcp_input+0x356>
 8013cfa:	bf00      	nop
 8013cfc:	0801d0d8 	.word	0x0801d0d8
 8013d00:	0801d10c 	.word	0x0801d10c
 8013d04:	0801d124 	.word	0x0801d124
 8013d08:	24014bd8 	.word	0x24014bd8
 8013d0c:	2400e074 	.word	0x2400e074
 8013d10:	24014bdc 	.word	0x24014bdc
 8013d14:	24014be0 	.word	0x24014be0
 8013d18:	24014bde 	.word	0x24014bde
 8013d1c:	0801d14c 	.word	0x0801d14c
 8013d20:	0801d15c 	.word	0x0801d15c
 8013d24:	0801d168 	.word	0x0801d168
 8013d28:	24014be8 	.word	0x24014be8
 8013d2c:	24014bec 	.word	0x24014bec
 8013d30:	24014bf4 	.word	0x24014bf4
 8013d34:	24014bf2 	.word	0x24014bf2
 8013d38:	24014bbc 	.word	0x24014bbc
 8013d3c:	0801d188 	.word	0x0801d188
 8013d40:	0801d1b0 	.word	0x0801d1b0
 8013d44:	0801d1dc 	.word	0x0801d1dc
    }

    if (pcb->remote_port == tcphdr->src &&
 8013d48:	69fb      	ldr	r3, [r7, #28]
 8013d4a:	8b1a      	ldrh	r2, [r3, #24]
 8013d4c:	4b72      	ldr	r3, [pc, #456]	@ (8013f18 <tcp_input+0x49c>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	881b      	ldrh	r3, [r3, #0]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d13a      	bne.n	8013dce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	8ada      	ldrh	r2, [r3, #22]
 8013d5c:	4b6e      	ldr	r3, [pc, #440]	@ (8013f18 <tcp_input+0x49c>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	885b      	ldrh	r3, [r3, #2]
 8013d62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d132      	bne.n	8013dce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d68:	69fb      	ldr	r3, [r7, #28]
 8013d6a:	685a      	ldr	r2, [r3, #4]
 8013d6c:	4b6b      	ldr	r3, [pc, #428]	@ (8013f1c <tcp_input+0x4a0>)
 8013d6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d12c      	bne.n	8013dce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	681a      	ldr	r2, [r3, #0]
 8013d78:	4b68      	ldr	r3, [pc, #416]	@ (8013f1c <tcp_input+0x4a0>)
 8013d7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	d126      	bne.n	8013dce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013d80:	69fb      	ldr	r3, [r7, #28]
 8013d82:	68db      	ldr	r3, [r3, #12]
 8013d84:	69fa      	ldr	r2, [r7, #28]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d106      	bne.n	8013d98 <tcp_input+0x31c>
 8013d8a:	4b65      	ldr	r3, [pc, #404]	@ (8013f20 <tcp_input+0x4a4>)
 8013d8c:	f240 120d 	movw	r2, #269	@ 0x10d
 8013d90:	4964      	ldr	r1, [pc, #400]	@ (8013f24 <tcp_input+0x4a8>)
 8013d92:	4865      	ldr	r0, [pc, #404]	@ (8013f28 <tcp_input+0x4ac>)
 8013d94:	f007 f80e 	bl	801adb4 <iprintf>
      if (prev != NULL) {
 8013d98:	69bb      	ldr	r3, [r7, #24]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d00a      	beq.n	8013db4 <tcp_input+0x338>
        prev->next = pcb->next;
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	68da      	ldr	r2, [r3, #12]
 8013da2:	69bb      	ldr	r3, [r7, #24]
 8013da4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013da6:	4b61      	ldr	r3, [pc, #388]	@ (8013f2c <tcp_input+0x4b0>)
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013dae:	4a5f      	ldr	r2, [pc, #380]	@ (8013f2c <tcp_input+0x4b0>)
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013db4:	69fb      	ldr	r3, [r7, #28]
 8013db6:	68db      	ldr	r3, [r3, #12]
 8013db8:	69fa      	ldr	r2, [r7, #28]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d111      	bne.n	8013de2 <tcp_input+0x366>
 8013dbe:	4b58      	ldr	r3, [pc, #352]	@ (8013f20 <tcp_input+0x4a4>)
 8013dc0:	f240 1215 	movw	r2, #277	@ 0x115
 8013dc4:	495a      	ldr	r1, [pc, #360]	@ (8013f30 <tcp_input+0x4b4>)
 8013dc6:	4858      	ldr	r0, [pc, #352]	@ (8013f28 <tcp_input+0x4ac>)
 8013dc8:	f006 fff4 	bl	801adb4 <iprintf>
      break;
 8013dcc:	e009      	b.n	8013de2 <tcp_input+0x366>
    }
    prev = pcb;
 8013dce:	69fb      	ldr	r3, [r7, #28]
 8013dd0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dd2:	69fb      	ldr	r3, [r7, #28]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	61fb      	str	r3, [r7, #28]
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	f47f af5e 	bne.w	8013c9c <tcp_input+0x220>
 8013de0:	e000      	b.n	8013de4 <tcp_input+0x368>
      break;
 8013de2:	bf00      	nop
  }

  if (pcb == NULL) {
 8013de4:	69fb      	ldr	r3, [r7, #28]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	f040 80aa 	bne.w	8013f40 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dec:	4b51      	ldr	r3, [pc, #324]	@ (8013f34 <tcp_input+0x4b8>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	61fb      	str	r3, [r7, #28]
 8013df2:	e03f      	b.n	8013e74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	7d1b      	ldrb	r3, [r3, #20]
 8013df8:	2b0a      	cmp	r3, #10
 8013dfa:	d006      	beq.n	8013e0a <tcp_input+0x38e>
 8013dfc:	4b48      	ldr	r3, [pc, #288]	@ (8013f20 <tcp_input+0x4a4>)
 8013dfe:	f240 121f 	movw	r2, #287	@ 0x11f
 8013e02:	494d      	ldr	r1, [pc, #308]	@ (8013f38 <tcp_input+0x4bc>)
 8013e04:	4848      	ldr	r0, [pc, #288]	@ (8013f28 <tcp_input+0x4ac>)
 8013e06:	f006 ffd5 	bl	801adb4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013e0a:	69fb      	ldr	r3, [r7, #28]
 8013e0c:	7a1b      	ldrb	r3, [r3, #8]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d009      	beq.n	8013e26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013e12:	69fb      	ldr	r3, [r7, #28]
 8013e14:	7a1a      	ldrb	r2, [r3, #8]
 8013e16:	4b41      	ldr	r3, [pc, #260]	@ (8013f1c <tcp_input+0x4a0>)
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013e1e:	3301      	adds	r3, #1
 8013e20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013e22:	429a      	cmp	r2, r3
 8013e24:	d122      	bne.n	8013e6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013e26:	69fb      	ldr	r3, [r7, #28]
 8013e28:	8b1a      	ldrh	r2, [r3, #24]
 8013e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8013f18 <tcp_input+0x49c>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	881b      	ldrh	r3, [r3, #0]
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d11b      	bne.n	8013e6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013e36:	69fb      	ldr	r3, [r7, #28]
 8013e38:	8ada      	ldrh	r2, [r3, #22]
 8013e3a:	4b37      	ldr	r3, [pc, #220]	@ (8013f18 <tcp_input+0x49c>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	885b      	ldrh	r3, [r3, #2]
 8013e40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d113      	bne.n	8013e6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013e46:	69fb      	ldr	r3, [r7, #28]
 8013e48:	685a      	ldr	r2, [r3, #4]
 8013e4a:	4b34      	ldr	r3, [pc, #208]	@ (8013f1c <tcp_input+0x4a0>)
 8013e4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d10d      	bne.n	8013e6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	681a      	ldr	r2, [r3, #0]
 8013e56:	4b31      	ldr	r3, [pc, #196]	@ (8013f1c <tcp_input+0x4a0>)
 8013e58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d107      	bne.n	8013e6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013e5e:	69f8      	ldr	r0, [r7, #28]
 8013e60:	f000 fb56 	bl	8014510 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f7fd fed3 	bl	8011c10 <pbuf_free>
        return;
 8013e6a:	e1fd      	b.n	8014268 <tcp_input+0x7ec>
        continue;
 8013e6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	68db      	ldr	r3, [r3, #12]
 8013e72:	61fb      	str	r3, [r7, #28]
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d1bc      	bne.n	8013df4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8013f3c <tcp_input+0x4c0>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	617b      	str	r3, [r7, #20]
 8013e84:	e02a      	b.n	8013edc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013e86:	697b      	ldr	r3, [r7, #20]
 8013e88:	7a1b      	ldrb	r3, [r3, #8]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d00c      	beq.n	8013ea8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	7a1a      	ldrb	r2, [r3, #8]
 8013e92:	4b22      	ldr	r3, [pc, #136]	@ (8013f1c <tcp_input+0x4a0>)
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d002      	beq.n	8013ea8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	61bb      	str	r3, [r7, #24]
        continue;
 8013ea6:	e016      	b.n	8013ed6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	8ada      	ldrh	r2, [r3, #22]
 8013eac:	4b1a      	ldr	r3, [pc, #104]	@ (8013f18 <tcp_input+0x49c>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	885b      	ldrh	r3, [r3, #2]
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d10c      	bne.n	8013ed2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	4b17      	ldr	r3, [pc, #92]	@ (8013f1c <tcp_input+0x4a0>)
 8013ebe:	695b      	ldr	r3, [r3, #20]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d00f      	beq.n	8013ee4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d00d      	beq.n	8013ee6 <tcp_input+0x46a>
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d009      	beq.n	8013ee6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	68db      	ldr	r3, [r3, #12]
 8013eda:	617b      	str	r3, [r7, #20]
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d1d1      	bne.n	8013e86 <tcp_input+0x40a>
 8013ee2:	e000      	b.n	8013ee6 <tcp_input+0x46a>
            break;
 8013ee4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d029      	beq.n	8013f40 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013eec:	69bb      	ldr	r3, [r7, #24]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d00a      	beq.n	8013f08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	68da      	ldr	r2, [r3, #12]
 8013ef6:	69bb      	ldr	r3, [r7, #24]
 8013ef8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013efa:	4b10      	ldr	r3, [pc, #64]	@ (8013f3c <tcp_input+0x4c0>)
 8013efc:	681a      	ldr	r2, [r3, #0]
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013f02:	4a0e      	ldr	r2, [pc, #56]	@ (8013f3c <tcp_input+0x4c0>)
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013f08:	6978      	ldr	r0, [r7, #20]
 8013f0a:	f000 fa03 	bl	8014314 <tcp_listen_input>
      }
      pbuf_free(p);
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7fd fe7e 	bl	8011c10 <pbuf_free>
      return;
 8013f14:	e1a8      	b.n	8014268 <tcp_input+0x7ec>
 8013f16:	bf00      	nop
 8013f18:	24014bd8 	.word	0x24014bd8
 8013f1c:	2400e074 	.word	0x2400e074
 8013f20:	0801d0d8 	.word	0x0801d0d8
 8013f24:	0801d204 	.word	0x0801d204
 8013f28:	0801d124 	.word	0x0801d124
 8013f2c:	24014bbc 	.word	0x24014bbc
 8013f30:	0801d230 	.word	0x0801d230
 8013f34:	24014bc0 	.word	0x24014bc0
 8013f38:	0801d25c 	.word	0x0801d25c
 8013f3c:	24014bb8 	.word	0x24014bb8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	f000 8158 	beq.w	80141f8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013f48:	4b95      	ldr	r3, [pc, #596]	@ (80141a0 <tcp_input+0x724>)
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	891a      	ldrh	r2, [r3, #8]
 8013f52:	4b93      	ldr	r3, [pc, #588]	@ (80141a0 <tcp_input+0x724>)
 8013f54:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013f56:	4a92      	ldr	r2, [pc, #584]	@ (80141a0 <tcp_input+0x724>)
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013f5c:	4b91      	ldr	r3, [pc, #580]	@ (80141a4 <tcp_input+0x728>)
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	4a8f      	ldr	r2, [pc, #572]	@ (80141a0 <tcp_input+0x724>)
 8013f62:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013f64:	4b90      	ldr	r3, [pc, #576]	@ (80141a8 <tcp_input+0x72c>)
 8013f66:	2200      	movs	r2, #0
 8013f68:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013f6a:	4b90      	ldr	r3, [pc, #576]	@ (80141ac <tcp_input+0x730>)
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013f70:	4b8f      	ldr	r3, [pc, #572]	@ (80141b0 <tcp_input+0x734>)
 8013f72:	2200      	movs	r2, #0
 8013f74:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013f76:	4b8f      	ldr	r3, [pc, #572]	@ (80141b4 <tcp_input+0x738>)
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	f003 0308 	and.w	r3, r3, #8
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d006      	beq.n	8013f90 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	7b5b      	ldrb	r3, [r3, #13]
 8013f86:	f043 0301 	orr.w	r3, r3, #1
 8013f8a:	b2da      	uxtb	r2, r3
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013f90:	69fb      	ldr	r3, [r7, #28]
 8013f92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d017      	beq.n	8013fc8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013f98:	69f8      	ldr	r0, [r7, #28]
 8013f9a:	f7ff f927 	bl	80131ec <tcp_process_refused_data>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	f113 0f0d 	cmn.w	r3, #13
 8013fa4:	d007      	beq.n	8013fb6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013fa6:	69fb      	ldr	r3, [r7, #28]
 8013fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00c      	beq.n	8013fc8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013fae:	4b82      	ldr	r3, [pc, #520]	@ (80141b8 <tcp_input+0x73c>)
 8013fb0:	881b      	ldrh	r3, [r3, #0]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d008      	beq.n	8013fc8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013fb6:	69fb      	ldr	r3, [r7, #28]
 8013fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	f040 80e4 	bne.w	8014188 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013fc0:	69f8      	ldr	r0, [r7, #28]
 8013fc2:	f003 f9a9 	bl	8017318 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013fc6:	e0df      	b.n	8014188 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013fc8:	4a7c      	ldr	r2, [pc, #496]	@ (80141bc <tcp_input+0x740>)
 8013fca:	69fb      	ldr	r3, [r7, #28]
 8013fcc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013fce:	69f8      	ldr	r0, [r7, #28]
 8013fd0:	f000 fb18 	bl	8014604 <tcp_process>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013fd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013fdc:	f113 0f0d 	cmn.w	r3, #13
 8013fe0:	f000 80d4 	beq.w	801418c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013fe4:	4b71      	ldr	r3, [pc, #452]	@ (80141ac <tcp_input+0x730>)
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	f003 0308 	and.w	r3, r3, #8
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d015      	beq.n	801401c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013ff0:	69fb      	ldr	r3, [r7, #28]
 8013ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d008      	beq.n	801400c <tcp_input+0x590>
 8013ffa:	69fb      	ldr	r3, [r7, #28]
 8013ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014000:	69fa      	ldr	r2, [r7, #28]
 8014002:	6912      	ldr	r2, [r2, #16]
 8014004:	f06f 010d 	mvn.w	r1, #13
 8014008:	4610      	mov	r0, r2
 801400a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801400c:	69f9      	ldr	r1, [r7, #28]
 801400e:	486c      	ldr	r0, [pc, #432]	@ (80141c0 <tcp_input+0x744>)
 8014010:	f7ff fbbc 	bl	801378c <tcp_pcb_remove>
        tcp_free(pcb);
 8014014:	69f8      	ldr	r0, [r7, #28]
 8014016:	f7fe f9a3 	bl	8012360 <tcp_free>
 801401a:	e0da      	b.n	80141d2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801401c:	2300      	movs	r3, #0
 801401e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014020:	4b63      	ldr	r3, [pc, #396]	@ (80141b0 <tcp_input+0x734>)
 8014022:	881b      	ldrh	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d01d      	beq.n	8014064 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014028:	4b61      	ldr	r3, [pc, #388]	@ (80141b0 <tcp_input+0x734>)
 801402a:	881b      	ldrh	r3, [r3, #0]
 801402c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801402e:	69fb      	ldr	r3, [r7, #28]
 8014030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014034:	2b00      	cmp	r3, #0
 8014036:	d00a      	beq.n	801404e <tcp_input+0x5d2>
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801403e:	69fa      	ldr	r2, [r7, #28]
 8014040:	6910      	ldr	r0, [r2, #16]
 8014042:	89fa      	ldrh	r2, [r7, #14]
 8014044:	69f9      	ldr	r1, [r7, #28]
 8014046:	4798      	blx	r3
 8014048:	4603      	mov	r3, r0
 801404a:	74fb      	strb	r3, [r7, #19]
 801404c:	e001      	b.n	8014052 <tcp_input+0x5d6>
 801404e:	2300      	movs	r3, #0
 8014050:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014052:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014056:	f113 0f0d 	cmn.w	r3, #13
 801405a:	f000 8099 	beq.w	8014190 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801405e:	4b54      	ldr	r3, [pc, #336]	@ (80141b0 <tcp_input+0x734>)
 8014060:	2200      	movs	r2, #0
 8014062:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014064:	69f8      	ldr	r0, [r7, #28]
 8014066:	f000 f915 	bl	8014294 <tcp_input_delayed_close>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	f040 8091 	bne.w	8014194 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014072:	4b4d      	ldr	r3, [pc, #308]	@ (80141a8 <tcp_input+0x72c>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d041      	beq.n	80140fe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801407a:	69fb      	ldr	r3, [r7, #28]
 801407c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801407e:	2b00      	cmp	r3, #0
 8014080:	d006      	beq.n	8014090 <tcp_input+0x614>
 8014082:	4b50      	ldr	r3, [pc, #320]	@ (80141c4 <tcp_input+0x748>)
 8014084:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014088:	494f      	ldr	r1, [pc, #316]	@ (80141c8 <tcp_input+0x74c>)
 801408a:	4850      	ldr	r0, [pc, #320]	@ (80141cc <tcp_input+0x750>)
 801408c:	f006 fe92 	bl	801adb4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014090:	69fb      	ldr	r3, [r7, #28]
 8014092:	8b5b      	ldrh	r3, [r3, #26]
 8014094:	f003 0310 	and.w	r3, r3, #16
 8014098:	2b00      	cmp	r3, #0
 801409a:	d008      	beq.n	80140ae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801409c:	4b42      	ldr	r3, [pc, #264]	@ (80141a8 <tcp_input+0x72c>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7fd fdb5 	bl	8011c10 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80140a6:	69f8      	ldr	r0, [r7, #28]
 80140a8:	f7fe fc42 	bl	8012930 <tcp_abort>
            goto aborted;
 80140ac:	e091      	b.n	80141d2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d00c      	beq.n	80140d2 <tcp_input+0x656>
 80140b8:	69fb      	ldr	r3, [r7, #28]
 80140ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	6918      	ldr	r0, [r3, #16]
 80140c2:	4b39      	ldr	r3, [pc, #228]	@ (80141a8 <tcp_input+0x72c>)
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	2300      	movs	r3, #0
 80140c8:	69f9      	ldr	r1, [r7, #28]
 80140ca:	47a0      	blx	r4
 80140cc:	4603      	mov	r3, r0
 80140ce:	74fb      	strb	r3, [r7, #19]
 80140d0:	e008      	b.n	80140e4 <tcp_input+0x668>
 80140d2:	4b35      	ldr	r3, [pc, #212]	@ (80141a8 <tcp_input+0x72c>)
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	2300      	movs	r3, #0
 80140d8:	69f9      	ldr	r1, [r7, #28]
 80140da:	2000      	movs	r0, #0
 80140dc:	f7ff f95e 	bl	801339c <tcp_recv_null>
 80140e0:	4603      	mov	r3, r0
 80140e2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80140e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140e8:	f113 0f0d 	cmn.w	r3, #13
 80140ec:	d054      	beq.n	8014198 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80140ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d003      	beq.n	80140fe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80140f6:	4b2c      	ldr	r3, [pc, #176]	@ (80141a8 <tcp_input+0x72c>)
 80140f8:	681a      	ldr	r2, [r3, #0]
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80140fe:	4b2b      	ldr	r3, [pc, #172]	@ (80141ac <tcp_input+0x730>)
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	f003 0320 	and.w	r3, r3, #32
 8014106:	2b00      	cmp	r3, #0
 8014108:	d031      	beq.n	801416e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801410e:	2b00      	cmp	r3, #0
 8014110:	d009      	beq.n	8014126 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014116:	7b5a      	ldrb	r2, [r3, #13]
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801411c:	f042 0220 	orr.w	r2, r2, #32
 8014120:	b2d2      	uxtb	r2, r2
 8014122:	735a      	strb	r2, [r3, #13]
 8014124:	e023      	b.n	801416e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014126:	69fb      	ldr	r3, [r7, #28]
 8014128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801412a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801412e:	4293      	cmp	r3, r2
 8014130:	d005      	beq.n	801413e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014136:	3301      	adds	r3, #1
 8014138:	b29a      	uxth	r2, r3
 801413a:	69fb      	ldr	r3, [r7, #28]
 801413c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801413e:	69fb      	ldr	r3, [r7, #28]
 8014140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014144:	2b00      	cmp	r3, #0
 8014146:	d00b      	beq.n	8014160 <tcp_input+0x6e4>
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801414e:	69fb      	ldr	r3, [r7, #28]
 8014150:	6918      	ldr	r0, [r3, #16]
 8014152:	2300      	movs	r3, #0
 8014154:	2200      	movs	r2, #0
 8014156:	69f9      	ldr	r1, [r7, #28]
 8014158:	47a0      	blx	r4
 801415a:	4603      	mov	r3, r0
 801415c:	74fb      	strb	r3, [r7, #19]
 801415e:	e001      	b.n	8014164 <tcp_input+0x6e8>
 8014160:	2300      	movs	r3, #0
 8014162:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014164:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014168:	f113 0f0d 	cmn.w	r3, #13
 801416c:	d016      	beq.n	801419c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801416e:	4b13      	ldr	r3, [pc, #76]	@ (80141bc <tcp_input+0x740>)
 8014170:	2200      	movs	r2, #0
 8014172:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014174:	69f8      	ldr	r0, [r7, #28]
 8014176:	f000 f88d 	bl	8014294 <tcp_input_delayed_close>
 801417a:	4603      	mov	r3, r0
 801417c:	2b00      	cmp	r3, #0
 801417e:	d127      	bne.n	80141d0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014180:	69f8      	ldr	r0, [r7, #28]
 8014182:	f002 fac3 	bl	801670c <tcp_output>
 8014186:	e024      	b.n	80141d2 <tcp_input+0x756>
        goto aborted;
 8014188:	bf00      	nop
 801418a:	e022      	b.n	80141d2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801418c:	bf00      	nop
 801418e:	e020      	b.n	80141d2 <tcp_input+0x756>
              goto aborted;
 8014190:	bf00      	nop
 8014192:	e01e      	b.n	80141d2 <tcp_input+0x756>
          goto aborted;
 8014194:	bf00      	nop
 8014196:	e01c      	b.n	80141d2 <tcp_input+0x756>
            goto aborted;
 8014198:	bf00      	nop
 801419a:	e01a      	b.n	80141d2 <tcp_input+0x756>
              goto aborted;
 801419c:	bf00      	nop
 801419e:	e018      	b.n	80141d2 <tcp_input+0x756>
 80141a0:	24014bc8 	.word	0x24014bc8
 80141a4:	24014bd8 	.word	0x24014bd8
 80141a8:	24014bf8 	.word	0x24014bf8
 80141ac:	24014bf5 	.word	0x24014bf5
 80141b0:	24014bf0 	.word	0x24014bf0
 80141b4:	24014bf4 	.word	0x24014bf4
 80141b8:	24014bf2 	.word	0x24014bf2
 80141bc:	24014bfc 	.word	0x24014bfc
 80141c0:	24014bbc 	.word	0x24014bbc
 80141c4:	0801d0d8 	.word	0x0801d0d8
 80141c8:	0801d28c 	.word	0x0801d28c
 80141cc:	0801d124 	.word	0x0801d124
          goto aborted;
 80141d0:	bf00      	nop
    tcp_input_pcb = NULL;
 80141d2:	4b27      	ldr	r3, [pc, #156]	@ (8014270 <tcp_input+0x7f4>)
 80141d4:	2200      	movs	r2, #0
 80141d6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80141d8:	4b26      	ldr	r3, [pc, #152]	@ (8014274 <tcp_input+0x7f8>)
 80141da:	2200      	movs	r2, #0
 80141dc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80141de:	4b26      	ldr	r3, [pc, #152]	@ (8014278 <tcp_input+0x7fc>)
 80141e0:	685b      	ldr	r3, [r3, #4]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d03f      	beq.n	8014266 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80141e6:	4b24      	ldr	r3, [pc, #144]	@ (8014278 <tcp_input+0x7fc>)
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7fd fd10 	bl	8011c10 <pbuf_free>
      inseg.p = NULL;
 80141f0:	4b21      	ldr	r3, [pc, #132]	@ (8014278 <tcp_input+0x7fc>)
 80141f2:	2200      	movs	r2, #0
 80141f4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80141f6:	e036      	b.n	8014266 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80141f8:	4b20      	ldr	r3, [pc, #128]	@ (801427c <tcp_input+0x800>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	899b      	ldrh	r3, [r3, #12]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	4618      	mov	r0, r3
 8014202:	f7fc f853 	bl	80102ac <lwip_htons>
 8014206:	4603      	mov	r3, r0
 8014208:	b2db      	uxtb	r3, r3
 801420a:	f003 0304 	and.w	r3, r3, #4
 801420e:	2b00      	cmp	r3, #0
 8014210:	d118      	bne.n	8014244 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014212:	4b1b      	ldr	r3, [pc, #108]	@ (8014280 <tcp_input+0x804>)
 8014214:	6819      	ldr	r1, [r3, #0]
 8014216:	4b1b      	ldr	r3, [pc, #108]	@ (8014284 <tcp_input+0x808>)
 8014218:	881b      	ldrh	r3, [r3, #0]
 801421a:	461a      	mov	r2, r3
 801421c:	4b1a      	ldr	r3, [pc, #104]	@ (8014288 <tcp_input+0x80c>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014222:	4b16      	ldr	r3, [pc, #88]	@ (801427c <tcp_input+0x800>)
 8014224:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014226:	885b      	ldrh	r3, [r3, #2]
 8014228:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801422a:	4a14      	ldr	r2, [pc, #80]	@ (801427c <tcp_input+0x800>)
 801422c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801422e:	8812      	ldrh	r2, [r2, #0]
 8014230:	b292      	uxth	r2, r2
 8014232:	9202      	str	r2, [sp, #8]
 8014234:	9301      	str	r3, [sp, #4]
 8014236:	4b15      	ldr	r3, [pc, #84]	@ (801428c <tcp_input+0x810>)
 8014238:	9300      	str	r3, [sp, #0]
 801423a:	4b15      	ldr	r3, [pc, #84]	@ (8014290 <tcp_input+0x814>)
 801423c:	4602      	mov	r2, r0
 801423e:	2000      	movs	r0, #0
 8014240:	f003 f818 	bl	8017274 <tcp_rst>
    pbuf_free(p);
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f7fd fce3 	bl	8011c10 <pbuf_free>
  return;
 801424a:	e00c      	b.n	8014266 <tcp_input+0x7ea>
    goto dropped;
 801424c:	bf00      	nop
 801424e:	e006      	b.n	801425e <tcp_input+0x7e2>
    goto dropped;
 8014250:	bf00      	nop
 8014252:	e004      	b.n	801425e <tcp_input+0x7e2>
    goto dropped;
 8014254:	bf00      	nop
 8014256:	e002      	b.n	801425e <tcp_input+0x7e2>
      goto dropped;
 8014258:	bf00      	nop
 801425a:	e000      	b.n	801425e <tcp_input+0x7e2>
      goto dropped;
 801425c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f7fd fcd6 	bl	8011c10 <pbuf_free>
 8014264:	e000      	b.n	8014268 <tcp_input+0x7ec>
  return;
 8014266:	bf00      	nop
}
 8014268:	3724      	adds	r7, #36	@ 0x24
 801426a:	46bd      	mov	sp, r7
 801426c:	bd90      	pop	{r4, r7, pc}
 801426e:	bf00      	nop
 8014270:	24014bfc 	.word	0x24014bfc
 8014274:	24014bf8 	.word	0x24014bf8
 8014278:	24014bc8 	.word	0x24014bc8
 801427c:	24014bd8 	.word	0x24014bd8
 8014280:	24014bec 	.word	0x24014bec
 8014284:	24014bf2 	.word	0x24014bf2
 8014288:	24014be8 	.word	0x24014be8
 801428c:	2400e084 	.word	0x2400e084
 8014290:	2400e088 	.word	0x2400e088

08014294 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d106      	bne.n	80142b0 <tcp_input_delayed_close+0x1c>
 80142a2:	4b17      	ldr	r3, [pc, #92]	@ (8014300 <tcp_input_delayed_close+0x6c>)
 80142a4:	f240 225a 	movw	r2, #602	@ 0x25a
 80142a8:	4916      	ldr	r1, [pc, #88]	@ (8014304 <tcp_input_delayed_close+0x70>)
 80142aa:	4817      	ldr	r0, [pc, #92]	@ (8014308 <tcp_input_delayed_close+0x74>)
 80142ac:	f006 fd82 	bl	801adb4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80142b0:	4b16      	ldr	r3, [pc, #88]	@ (801430c <tcp_input_delayed_close+0x78>)
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	f003 0310 	and.w	r3, r3, #16
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d01c      	beq.n	80142f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	8b5b      	ldrh	r3, [r3, #26]
 80142c0:	f003 0310 	and.w	r3, r3, #16
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d10d      	bne.n	80142e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d008      	beq.n	80142e4 <tcp_input_delayed_close+0x50>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80142d8:	687a      	ldr	r2, [r7, #4]
 80142da:	6912      	ldr	r2, [r2, #16]
 80142dc:	f06f 010e 	mvn.w	r1, #14
 80142e0:	4610      	mov	r0, r2
 80142e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80142e4:	6879      	ldr	r1, [r7, #4]
 80142e6:	480a      	ldr	r0, [pc, #40]	@ (8014310 <tcp_input_delayed_close+0x7c>)
 80142e8:	f7ff fa50 	bl	801378c <tcp_pcb_remove>
    tcp_free(pcb);
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7fe f837 	bl	8012360 <tcp_free>
    return 1;
 80142f2:	2301      	movs	r3, #1
 80142f4:	e000      	b.n	80142f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80142f6:	2300      	movs	r3, #0
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3708      	adds	r7, #8
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}
 8014300:	0801d0d8 	.word	0x0801d0d8
 8014304:	0801d2a8 	.word	0x0801d2a8
 8014308:	0801d124 	.word	0x0801d124
 801430c:	24014bf5 	.word	0x24014bf5
 8014310:	24014bbc 	.word	0x24014bbc

08014314 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014314:	b590      	push	{r4, r7, lr}
 8014316:	b08b      	sub	sp, #44	@ 0x2c
 8014318:	af04      	add	r7, sp, #16
 801431a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801431c:	4b6f      	ldr	r3, [pc, #444]	@ (80144dc <tcp_listen_input+0x1c8>)
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	f003 0304 	and.w	r3, r3, #4
 8014324:	2b00      	cmp	r3, #0
 8014326:	f040 80d2 	bne.w	80144ce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d106      	bne.n	801433e <tcp_listen_input+0x2a>
 8014330:	4b6b      	ldr	r3, [pc, #428]	@ (80144e0 <tcp_listen_input+0x1cc>)
 8014332:	f240 2281 	movw	r2, #641	@ 0x281
 8014336:	496b      	ldr	r1, [pc, #428]	@ (80144e4 <tcp_listen_input+0x1d0>)
 8014338:	486b      	ldr	r0, [pc, #428]	@ (80144e8 <tcp_listen_input+0x1d4>)
 801433a:	f006 fd3b 	bl	801adb4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801433e:	4b67      	ldr	r3, [pc, #412]	@ (80144dc <tcp_listen_input+0x1c8>)
 8014340:	781b      	ldrb	r3, [r3, #0]
 8014342:	f003 0310 	and.w	r3, r3, #16
 8014346:	2b00      	cmp	r3, #0
 8014348:	d019      	beq.n	801437e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801434a:	4b68      	ldr	r3, [pc, #416]	@ (80144ec <tcp_listen_input+0x1d8>)
 801434c:	6819      	ldr	r1, [r3, #0]
 801434e:	4b68      	ldr	r3, [pc, #416]	@ (80144f0 <tcp_listen_input+0x1dc>)
 8014350:	881b      	ldrh	r3, [r3, #0]
 8014352:	461a      	mov	r2, r3
 8014354:	4b67      	ldr	r3, [pc, #412]	@ (80144f4 <tcp_listen_input+0x1e0>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801435a:	4b67      	ldr	r3, [pc, #412]	@ (80144f8 <tcp_listen_input+0x1e4>)
 801435c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801435e:	885b      	ldrh	r3, [r3, #2]
 8014360:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014362:	4a65      	ldr	r2, [pc, #404]	@ (80144f8 <tcp_listen_input+0x1e4>)
 8014364:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014366:	8812      	ldrh	r2, [r2, #0]
 8014368:	b292      	uxth	r2, r2
 801436a:	9202      	str	r2, [sp, #8]
 801436c:	9301      	str	r3, [sp, #4]
 801436e:	4b63      	ldr	r3, [pc, #396]	@ (80144fc <tcp_listen_input+0x1e8>)
 8014370:	9300      	str	r3, [sp, #0]
 8014372:	4b63      	ldr	r3, [pc, #396]	@ (8014500 <tcp_listen_input+0x1ec>)
 8014374:	4602      	mov	r2, r0
 8014376:	6878      	ldr	r0, [r7, #4]
 8014378:	f002 ff7c 	bl	8017274 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801437c:	e0a9      	b.n	80144d2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801437e:	4b57      	ldr	r3, [pc, #348]	@ (80144dc <tcp_listen_input+0x1c8>)
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	f003 0302 	and.w	r3, r3, #2
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 80a3 	beq.w	80144d2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	7d5b      	ldrb	r3, [r3, #21]
 8014390:	4618      	mov	r0, r3
 8014392:	f7ff f927 	bl	80135e4 <tcp_alloc>
 8014396:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d111      	bne.n	80143c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	699b      	ldr	r3, [r3, #24]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d00a      	beq.n	80143bc <tcp_listen_input+0xa8>
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	699b      	ldr	r3, [r3, #24]
 80143aa:	687a      	ldr	r2, [r7, #4]
 80143ac:	6910      	ldr	r0, [r2, #16]
 80143ae:	f04f 32ff 	mov.w	r2, #4294967295
 80143b2:	2100      	movs	r1, #0
 80143b4:	4798      	blx	r3
 80143b6:	4603      	mov	r3, r0
 80143b8:	73bb      	strb	r3, [r7, #14]
      return;
 80143ba:	e08b      	b.n	80144d4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80143bc:	23f0      	movs	r3, #240	@ 0xf0
 80143be:	73bb      	strb	r3, [r7, #14]
      return;
 80143c0:	e088      	b.n	80144d4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80143c2:	4b50      	ldr	r3, [pc, #320]	@ (8014504 <tcp_listen_input+0x1f0>)
 80143c4:	695a      	ldr	r2, [r3, #20]
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80143ca:	4b4e      	ldr	r3, [pc, #312]	@ (8014504 <tcp_listen_input+0x1f0>)
 80143cc:	691a      	ldr	r2, [r3, #16]
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	8ada      	ldrh	r2, [r3, #22]
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80143da:	4b47      	ldr	r3, [pc, #284]	@ (80144f8 <tcp_listen_input+0x1e4>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	881b      	ldrh	r3, [r3, #0]
 80143e0:	b29a      	uxth	r2, r3
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80143e6:	697b      	ldr	r3, [r7, #20]
 80143e8:	2203      	movs	r2, #3
 80143ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80143ec:	4b41      	ldr	r3, [pc, #260]	@ (80144f4 <tcp_listen_input+0x1e0>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	1c5a      	adds	r2, r3, #1
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80143fe:	6978      	ldr	r0, [r7, #20]
 8014400:	f7ff fa58 	bl	80138b4 <tcp_next_iss>
 8014404:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	693a      	ldr	r2, [r7, #16]
 801440a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	693a      	ldr	r2, [r7, #16]
 8014410:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	693a      	ldr	r2, [r7, #16]
 8014416:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	693a      	ldr	r2, [r7, #16]
 801441c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801441e:	4b35      	ldr	r3, [pc, #212]	@ (80144f4 <tcp_listen_input+0x1e0>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	1e5a      	subs	r2, r3, #1
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	691a      	ldr	r2, [r3, #16]
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	687a      	ldr	r2, [r7, #4]
 8014434:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	7a5b      	ldrb	r3, [r3, #9]
 801443a:	f003 030c 	and.w	r3, r3, #12
 801443e:	b2da      	uxtb	r2, r3
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	7a1a      	ldrb	r2, [r3, #8]
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801444c:	4b2e      	ldr	r3, [pc, #184]	@ (8014508 <tcp_listen_input+0x1f4>)
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	60da      	str	r2, [r3, #12]
 8014454:	4a2c      	ldr	r2, [pc, #176]	@ (8014508 <tcp_listen_input+0x1f4>)
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	6013      	str	r3, [r2, #0]
 801445a:	f003 f8cd 	bl	80175f8 <tcp_timer_needed>
 801445e:	4b2b      	ldr	r3, [pc, #172]	@ (801450c <tcp_listen_input+0x1f8>)
 8014460:	2201      	movs	r2, #1
 8014462:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014464:	6978      	ldr	r0, [r7, #20]
 8014466:	f001 fd8b 	bl	8015f80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801446a:	4b23      	ldr	r3, [pc, #140]	@ (80144f8 <tcp_listen_input+0x1e4>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	89db      	ldrh	r3, [r3, #14]
 8014470:	b29a      	uxth	r2, r3
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	3304      	adds	r3, #4
 801448c:	4618      	mov	r0, r3
 801448e:	f005 f817 	bl	80194c0 <ip4_route>
 8014492:	4601      	mov	r1, r0
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	3304      	adds	r3, #4
 8014498:	461a      	mov	r2, r3
 801449a:	4620      	mov	r0, r4
 801449c:	f7ff fa30 	bl	8013900 <tcp_eff_send_mss_netif>
 80144a0:	4603      	mov	r3, r0
 80144a2:	461a      	mov	r2, r3
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80144a8:	2112      	movs	r1, #18
 80144aa:	6978      	ldr	r0, [r7, #20]
 80144ac:	f002 f840 	bl	8016530 <tcp_enqueue_flags>
 80144b0:	4603      	mov	r3, r0
 80144b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80144b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d004      	beq.n	80144c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80144bc:	2100      	movs	r1, #0
 80144be:	6978      	ldr	r0, [r7, #20]
 80144c0:	f7fe f978 	bl	80127b4 <tcp_abandon>
      return;
 80144c4:	e006      	b.n	80144d4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80144c6:	6978      	ldr	r0, [r7, #20]
 80144c8:	f002 f920 	bl	801670c <tcp_output>
  return;
 80144cc:	e001      	b.n	80144d2 <tcp_listen_input+0x1be>
    return;
 80144ce:	bf00      	nop
 80144d0:	e000      	b.n	80144d4 <tcp_listen_input+0x1c0>
  return;
 80144d2:	bf00      	nop
}
 80144d4:	371c      	adds	r7, #28
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd90      	pop	{r4, r7, pc}
 80144da:	bf00      	nop
 80144dc:	24014bf4 	.word	0x24014bf4
 80144e0:	0801d0d8 	.word	0x0801d0d8
 80144e4:	0801d2d0 	.word	0x0801d2d0
 80144e8:	0801d124 	.word	0x0801d124
 80144ec:	24014bec 	.word	0x24014bec
 80144f0:	24014bf2 	.word	0x24014bf2
 80144f4:	24014be8 	.word	0x24014be8
 80144f8:	24014bd8 	.word	0x24014bd8
 80144fc:	2400e084 	.word	0x2400e084
 8014500:	2400e088 	.word	0x2400e088
 8014504:	2400e074 	.word	0x2400e074
 8014508:	24014bbc 	.word	0x24014bbc
 801450c:	24014bc4 	.word	0x24014bc4

08014510 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b086      	sub	sp, #24
 8014514:	af04      	add	r7, sp, #16
 8014516:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014518:	4b2f      	ldr	r3, [pc, #188]	@ (80145d8 <tcp_timewait_input+0xc8>)
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	f003 0304 	and.w	r3, r3, #4
 8014520:	2b00      	cmp	r3, #0
 8014522:	d153      	bne.n	80145cc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d106      	bne.n	8014538 <tcp_timewait_input+0x28>
 801452a:	4b2c      	ldr	r3, [pc, #176]	@ (80145dc <tcp_timewait_input+0xcc>)
 801452c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014530:	492b      	ldr	r1, [pc, #172]	@ (80145e0 <tcp_timewait_input+0xd0>)
 8014532:	482c      	ldr	r0, [pc, #176]	@ (80145e4 <tcp_timewait_input+0xd4>)
 8014534:	f006 fc3e 	bl	801adb4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014538:	4b27      	ldr	r3, [pc, #156]	@ (80145d8 <tcp_timewait_input+0xc8>)
 801453a:	781b      	ldrb	r3, [r3, #0]
 801453c:	f003 0302 	and.w	r3, r3, #2
 8014540:	2b00      	cmp	r3, #0
 8014542:	d02a      	beq.n	801459a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014544:	4b28      	ldr	r3, [pc, #160]	@ (80145e8 <tcp_timewait_input+0xd8>)
 8014546:	681a      	ldr	r2, [r3, #0]
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801454c:	1ad3      	subs	r3, r2, r3
 801454e:	2b00      	cmp	r3, #0
 8014550:	db2d      	blt.n	80145ae <tcp_timewait_input+0x9e>
 8014552:	4b25      	ldr	r3, [pc, #148]	@ (80145e8 <tcp_timewait_input+0xd8>)
 8014554:	681a      	ldr	r2, [r3, #0]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801455a:	6879      	ldr	r1, [r7, #4]
 801455c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801455e:	440b      	add	r3, r1
 8014560:	1ad3      	subs	r3, r2, r3
 8014562:	2b00      	cmp	r3, #0
 8014564:	dc23      	bgt.n	80145ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014566:	4b21      	ldr	r3, [pc, #132]	@ (80145ec <tcp_timewait_input+0xdc>)
 8014568:	6819      	ldr	r1, [r3, #0]
 801456a:	4b21      	ldr	r3, [pc, #132]	@ (80145f0 <tcp_timewait_input+0xe0>)
 801456c:	881b      	ldrh	r3, [r3, #0]
 801456e:	461a      	mov	r2, r3
 8014570:	4b1d      	ldr	r3, [pc, #116]	@ (80145e8 <tcp_timewait_input+0xd8>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014576:	4b1f      	ldr	r3, [pc, #124]	@ (80145f4 <tcp_timewait_input+0xe4>)
 8014578:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801457a:	885b      	ldrh	r3, [r3, #2]
 801457c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801457e:	4a1d      	ldr	r2, [pc, #116]	@ (80145f4 <tcp_timewait_input+0xe4>)
 8014580:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014582:	8812      	ldrh	r2, [r2, #0]
 8014584:	b292      	uxth	r2, r2
 8014586:	9202      	str	r2, [sp, #8]
 8014588:	9301      	str	r3, [sp, #4]
 801458a:	4b1b      	ldr	r3, [pc, #108]	@ (80145f8 <tcp_timewait_input+0xe8>)
 801458c:	9300      	str	r3, [sp, #0]
 801458e:	4b1b      	ldr	r3, [pc, #108]	@ (80145fc <tcp_timewait_input+0xec>)
 8014590:	4602      	mov	r2, r0
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f002 fe6e 	bl	8017274 <tcp_rst>
      return;
 8014598:	e01b      	b.n	80145d2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801459a:	4b0f      	ldr	r3, [pc, #60]	@ (80145d8 <tcp_timewait_input+0xc8>)
 801459c:	781b      	ldrb	r3, [r3, #0]
 801459e:	f003 0301 	and.w	r3, r3, #1
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d003      	beq.n	80145ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80145a6:	4b16      	ldr	r3, [pc, #88]	@ (8014600 <tcp_timewait_input+0xf0>)
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80145ae:	4b10      	ldr	r3, [pc, #64]	@ (80145f0 <tcp_timewait_input+0xe0>)
 80145b0:	881b      	ldrh	r3, [r3, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d00c      	beq.n	80145d0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	8b5b      	ldrh	r3, [r3, #26]
 80145ba:	f043 0302 	orr.w	r3, r3, #2
 80145be:	b29a      	uxth	r2, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f002 f8a1 	bl	801670c <tcp_output>
  }
  return;
 80145ca:	e001      	b.n	80145d0 <tcp_timewait_input+0xc0>
    return;
 80145cc:	bf00      	nop
 80145ce:	e000      	b.n	80145d2 <tcp_timewait_input+0xc2>
  return;
 80145d0:	bf00      	nop
}
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}
 80145d8:	24014bf4 	.word	0x24014bf4
 80145dc:	0801d0d8 	.word	0x0801d0d8
 80145e0:	0801d2f0 	.word	0x0801d2f0
 80145e4:	0801d124 	.word	0x0801d124
 80145e8:	24014be8 	.word	0x24014be8
 80145ec:	24014bec 	.word	0x24014bec
 80145f0:	24014bf2 	.word	0x24014bf2
 80145f4:	24014bd8 	.word	0x24014bd8
 80145f8:	2400e084 	.word	0x2400e084
 80145fc:	2400e088 	.word	0x2400e088
 8014600:	24014bb0 	.word	0x24014bb0

08014604 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014604:	b590      	push	{r4, r7, lr}
 8014606:	b08d      	sub	sp, #52	@ 0x34
 8014608:	af04      	add	r7, sp, #16
 801460a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801460c:	2300      	movs	r3, #0
 801460e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014610:	2300      	movs	r3, #0
 8014612:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d106      	bne.n	8014628 <tcp_process+0x24>
 801461a:	4b9d      	ldr	r3, [pc, #628]	@ (8014890 <tcp_process+0x28c>)
 801461c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014620:	499c      	ldr	r1, [pc, #624]	@ (8014894 <tcp_process+0x290>)
 8014622:	489d      	ldr	r0, [pc, #628]	@ (8014898 <tcp_process+0x294>)
 8014624:	f006 fbc6 	bl	801adb4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014628:	4b9c      	ldr	r3, [pc, #624]	@ (801489c <tcp_process+0x298>)
 801462a:	781b      	ldrb	r3, [r3, #0]
 801462c:	f003 0304 	and.w	r3, r3, #4
 8014630:	2b00      	cmp	r3, #0
 8014632:	d04e      	beq.n	80146d2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	7d1b      	ldrb	r3, [r3, #20]
 8014638:	2b02      	cmp	r3, #2
 801463a:	d108      	bne.n	801464e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014640:	4b97      	ldr	r3, [pc, #604]	@ (80148a0 <tcp_process+0x29c>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	429a      	cmp	r2, r3
 8014646:	d123      	bne.n	8014690 <tcp_process+0x8c>
        acceptable = 1;
 8014648:	2301      	movs	r3, #1
 801464a:	76fb      	strb	r3, [r7, #27]
 801464c:	e020      	b.n	8014690 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014652:	4b94      	ldr	r3, [pc, #592]	@ (80148a4 <tcp_process+0x2a0>)
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	429a      	cmp	r2, r3
 8014658:	d102      	bne.n	8014660 <tcp_process+0x5c>
        acceptable = 1;
 801465a:	2301      	movs	r3, #1
 801465c:	76fb      	strb	r3, [r7, #27]
 801465e:	e017      	b.n	8014690 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014660:	4b90      	ldr	r3, [pc, #576]	@ (80148a4 <tcp_process+0x2a0>)
 8014662:	681a      	ldr	r2, [r3, #0]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014668:	1ad3      	subs	r3, r2, r3
 801466a:	2b00      	cmp	r3, #0
 801466c:	db10      	blt.n	8014690 <tcp_process+0x8c>
 801466e:	4b8d      	ldr	r3, [pc, #564]	@ (80148a4 <tcp_process+0x2a0>)
 8014670:	681a      	ldr	r2, [r3, #0]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014676:	6879      	ldr	r1, [r7, #4]
 8014678:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801467a:	440b      	add	r3, r1
 801467c:	1ad3      	subs	r3, r2, r3
 801467e:	2b00      	cmp	r3, #0
 8014680:	dc06      	bgt.n	8014690 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	8b5b      	ldrh	r3, [r3, #26]
 8014686:	f043 0302 	orr.w	r3, r3, #2
 801468a:	b29a      	uxth	r2, r3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014690:	7efb      	ldrb	r3, [r7, #27]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d01b      	beq.n	80146ce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	7d1b      	ldrb	r3, [r3, #20]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d106      	bne.n	80146ac <tcp_process+0xa8>
 801469e:	4b7c      	ldr	r3, [pc, #496]	@ (8014890 <tcp_process+0x28c>)
 80146a0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80146a4:	4980      	ldr	r1, [pc, #512]	@ (80148a8 <tcp_process+0x2a4>)
 80146a6:	487c      	ldr	r0, [pc, #496]	@ (8014898 <tcp_process+0x294>)
 80146a8:	f006 fb84 	bl	801adb4 <iprintf>
      recv_flags |= TF_RESET;
 80146ac:	4b7f      	ldr	r3, [pc, #508]	@ (80148ac <tcp_process+0x2a8>)
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	f043 0308 	orr.w	r3, r3, #8
 80146b4:	b2da      	uxtb	r2, r3
 80146b6:	4b7d      	ldr	r3, [pc, #500]	@ (80148ac <tcp_process+0x2a8>)
 80146b8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	8b5b      	ldrh	r3, [r3, #26]
 80146be:	f023 0301 	bic.w	r3, r3, #1
 80146c2:	b29a      	uxth	r2, r3
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80146c8:	f06f 030d 	mvn.w	r3, #13
 80146cc:	e37a      	b.n	8014dc4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80146ce:	2300      	movs	r3, #0
 80146d0:	e378      	b.n	8014dc4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80146d2:	4b72      	ldr	r3, [pc, #456]	@ (801489c <tcp_process+0x298>)
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	f003 0302 	and.w	r3, r3, #2
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d010      	beq.n	8014700 <tcp_process+0xfc>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	7d1b      	ldrb	r3, [r3, #20]
 80146e2:	2b02      	cmp	r3, #2
 80146e4:	d00c      	beq.n	8014700 <tcp_process+0xfc>
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	7d1b      	ldrb	r3, [r3, #20]
 80146ea:	2b03      	cmp	r3, #3
 80146ec:	d008      	beq.n	8014700 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	8b5b      	ldrh	r3, [r3, #26]
 80146f2:	f043 0302 	orr.w	r3, r3, #2
 80146f6:	b29a      	uxth	r2, r3
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80146fc:	2300      	movs	r3, #0
 80146fe:	e361      	b.n	8014dc4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	8b5b      	ldrh	r3, [r3, #26]
 8014704:	f003 0310 	and.w	r3, r3, #16
 8014708:	2b00      	cmp	r3, #0
 801470a:	d103      	bne.n	8014714 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801470c:	4b68      	ldr	r3, [pc, #416]	@ (80148b0 <tcp_process+0x2ac>)
 801470e:	681a      	ldr	r2, [r3, #0]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2200      	movs	r2, #0
 8014718:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2200      	movs	r2, #0
 8014720:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f001 fc2b 	bl	8015f80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	7d1b      	ldrb	r3, [r3, #20]
 801472e:	3b02      	subs	r3, #2
 8014730:	2b07      	cmp	r3, #7
 8014732:	f200 8337 	bhi.w	8014da4 <tcp_process+0x7a0>
 8014736:	a201      	add	r2, pc, #4	@ (adr r2, 801473c <tcp_process+0x138>)
 8014738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801473c:	0801475d 	.word	0x0801475d
 8014740:	0801498d 	.word	0x0801498d
 8014744:	08014b05 	.word	0x08014b05
 8014748:	08014b2f 	.word	0x08014b2f
 801474c:	08014c53 	.word	0x08014c53
 8014750:	08014b05 	.word	0x08014b05
 8014754:	08014cdf 	.word	0x08014cdf
 8014758:	08014d6f 	.word	0x08014d6f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801475c:	4b4f      	ldr	r3, [pc, #316]	@ (801489c <tcp_process+0x298>)
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	f003 0310 	and.w	r3, r3, #16
 8014764:	2b00      	cmp	r3, #0
 8014766:	f000 80e4 	beq.w	8014932 <tcp_process+0x32e>
 801476a:	4b4c      	ldr	r3, [pc, #304]	@ (801489c <tcp_process+0x298>)
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	f003 0302 	and.w	r3, r3, #2
 8014772:	2b00      	cmp	r3, #0
 8014774:	f000 80dd 	beq.w	8014932 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801477c:	1c5a      	adds	r2, r3, #1
 801477e:	4b48      	ldr	r3, [pc, #288]	@ (80148a0 <tcp_process+0x29c>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	429a      	cmp	r2, r3
 8014784:	f040 80d5 	bne.w	8014932 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014788:	4b46      	ldr	r3, [pc, #280]	@ (80148a4 <tcp_process+0x2a0>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	1c5a      	adds	r2, r3, #1
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801479a:	4b41      	ldr	r3, [pc, #260]	@ (80148a0 <tcp_process+0x29c>)
 801479c:	681a      	ldr	r2, [r3, #0]
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80147a2:	4b44      	ldr	r3, [pc, #272]	@ (80148b4 <tcp_process+0x2b0>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	89db      	ldrh	r3, [r3, #14]
 80147a8:	b29a      	uxth	r2, r3
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80147bc:	4b39      	ldr	r3, [pc, #228]	@ (80148a4 <tcp_process+0x2a0>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	1e5a      	subs	r2, r3, #1
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2204      	movs	r2, #4
 80147ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	3304      	adds	r3, #4
 80147d4:	4618      	mov	r0, r3
 80147d6:	f004 fe73 	bl	80194c0 <ip4_route>
 80147da:	4601      	mov	r1, r0
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	3304      	adds	r3, #4
 80147e0:	461a      	mov	r2, r3
 80147e2:	4620      	mov	r0, r4
 80147e4:	f7ff f88c 	bl	8013900 <tcp_eff_send_mss_netif>
 80147e8:	4603      	mov	r3, r0
 80147ea:	461a      	mov	r2, r3
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80147f4:	009a      	lsls	r2, r3, #2
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80147fa:	005b      	lsls	r3, r3, #1
 80147fc:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014800:	428b      	cmp	r3, r1
 8014802:	bf38      	it	cc
 8014804:	460b      	movcc	r3, r1
 8014806:	429a      	cmp	r2, r3
 8014808:	d204      	bcs.n	8014814 <tcp_process+0x210>
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801480e:	009b      	lsls	r3, r3, #2
 8014810:	b29b      	uxth	r3, r3
 8014812:	e00d      	b.n	8014830 <tcp_process+0x22c>
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801481e:	4293      	cmp	r3, r2
 8014820:	d904      	bls.n	801482c <tcp_process+0x228>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014826:	005b      	lsls	r3, r3, #1
 8014828:	b29b      	uxth	r3, r3
 801482a:	e001      	b.n	8014830 <tcp_process+0x22c>
 801482c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014830:	687a      	ldr	r2, [r7, #4]
 8014832:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801483c:	2b00      	cmp	r3, #0
 801483e:	d106      	bne.n	801484e <tcp_process+0x24a>
 8014840:	4b13      	ldr	r3, [pc, #76]	@ (8014890 <tcp_process+0x28c>)
 8014842:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014846:	491c      	ldr	r1, [pc, #112]	@ (80148b8 <tcp_process+0x2b4>)
 8014848:	4813      	ldr	r0, [pc, #76]	@ (8014898 <tcp_process+0x294>)
 801484a:	f006 fab3 	bl	801adb4 <iprintf>
        --pcb->snd_queuelen;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014854:	3b01      	subs	r3, #1
 8014856:	b29a      	uxth	r2, r3
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014862:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014864:	69fb      	ldr	r3, [r7, #28]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d12a      	bne.n	80148c0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801486e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d106      	bne.n	8014884 <tcp_process+0x280>
 8014876:	4b06      	ldr	r3, [pc, #24]	@ (8014890 <tcp_process+0x28c>)
 8014878:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801487c:	490f      	ldr	r1, [pc, #60]	@ (80148bc <tcp_process+0x2b8>)
 801487e:	4806      	ldr	r0, [pc, #24]	@ (8014898 <tcp_process+0x294>)
 8014880:	f006 fa98 	bl	801adb4 <iprintf>
          pcb->unsent = rseg->next;
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	681a      	ldr	r2, [r3, #0]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801488c:	e01c      	b.n	80148c8 <tcp_process+0x2c4>
 801488e:	bf00      	nop
 8014890:	0801d0d8 	.word	0x0801d0d8
 8014894:	0801d310 	.word	0x0801d310
 8014898:	0801d124 	.word	0x0801d124
 801489c:	24014bf4 	.word	0x24014bf4
 80148a0:	24014bec 	.word	0x24014bec
 80148a4:	24014be8 	.word	0x24014be8
 80148a8:	0801d32c 	.word	0x0801d32c
 80148ac:	24014bf5 	.word	0x24014bf5
 80148b0:	24014bb0 	.word	0x24014bb0
 80148b4:	24014bd8 	.word	0x24014bd8
 80148b8:	0801d34c 	.word	0x0801d34c
 80148bc:	0801d364 	.word	0x0801d364
        } else {
          pcb->unacked = rseg->next;
 80148c0:	69fb      	ldr	r3, [r7, #28]
 80148c2:	681a      	ldr	r2, [r3, #0]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80148c8:	69f8      	ldr	r0, [r7, #28]
 80148ca:	f7fe fd22 	bl	8013312 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d104      	bne.n	80148e0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80148dc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80148de:	e006      	b.n	80148ee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2200      	movs	r2, #0
 80148e4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2200      	movs	r2, #0
 80148ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d00a      	beq.n	801490e <tcp_process+0x30a>
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	6910      	ldr	r0, [r2, #16]
 8014902:	2200      	movs	r2, #0
 8014904:	6879      	ldr	r1, [r7, #4]
 8014906:	4798      	blx	r3
 8014908:	4603      	mov	r3, r0
 801490a:	76bb      	strb	r3, [r7, #26]
 801490c:	e001      	b.n	8014912 <tcp_process+0x30e>
 801490e:	2300      	movs	r3, #0
 8014910:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014912:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014916:	f113 0f0d 	cmn.w	r3, #13
 801491a:	d102      	bne.n	8014922 <tcp_process+0x31e>
          return ERR_ABRT;
 801491c:	f06f 030c 	mvn.w	r3, #12
 8014920:	e250      	b.n	8014dc4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	8b5b      	ldrh	r3, [r3, #26]
 8014926:	f043 0302 	orr.w	r3, r3, #2
 801492a:	b29a      	uxth	r2, r3
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014930:	e23a      	b.n	8014da8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014932:	4b98      	ldr	r3, [pc, #608]	@ (8014b94 <tcp_process+0x590>)
 8014934:	781b      	ldrb	r3, [r3, #0]
 8014936:	f003 0310 	and.w	r3, r3, #16
 801493a:	2b00      	cmp	r3, #0
 801493c:	f000 8234 	beq.w	8014da8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014940:	4b95      	ldr	r3, [pc, #596]	@ (8014b98 <tcp_process+0x594>)
 8014942:	6819      	ldr	r1, [r3, #0]
 8014944:	4b95      	ldr	r3, [pc, #596]	@ (8014b9c <tcp_process+0x598>)
 8014946:	881b      	ldrh	r3, [r3, #0]
 8014948:	461a      	mov	r2, r3
 801494a:	4b95      	ldr	r3, [pc, #596]	@ (8014ba0 <tcp_process+0x59c>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014950:	4b94      	ldr	r3, [pc, #592]	@ (8014ba4 <tcp_process+0x5a0>)
 8014952:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014954:	885b      	ldrh	r3, [r3, #2]
 8014956:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014958:	4a92      	ldr	r2, [pc, #584]	@ (8014ba4 <tcp_process+0x5a0>)
 801495a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801495c:	8812      	ldrh	r2, [r2, #0]
 801495e:	b292      	uxth	r2, r2
 8014960:	9202      	str	r2, [sp, #8]
 8014962:	9301      	str	r3, [sp, #4]
 8014964:	4b90      	ldr	r3, [pc, #576]	@ (8014ba8 <tcp_process+0x5a4>)
 8014966:	9300      	str	r3, [sp, #0]
 8014968:	4b90      	ldr	r3, [pc, #576]	@ (8014bac <tcp_process+0x5a8>)
 801496a:	4602      	mov	r2, r0
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f002 fc81 	bl	8017274 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014978:	2b05      	cmp	r3, #5
 801497a:	f200 8215 	bhi.w	8014da8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	2200      	movs	r2, #0
 8014982:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f002 fa4d 	bl	8016e24 <tcp_rexmit_rto>
      break;
 801498a:	e20d      	b.n	8014da8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801498c:	4b81      	ldr	r3, [pc, #516]	@ (8014b94 <tcp_process+0x590>)
 801498e:	781b      	ldrb	r3, [r3, #0]
 8014990:	f003 0310 	and.w	r3, r3, #16
 8014994:	2b00      	cmp	r3, #0
 8014996:	f000 80a1 	beq.w	8014adc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801499a:	4b7f      	ldr	r3, [pc, #508]	@ (8014b98 <tcp_process+0x594>)
 801499c:	681a      	ldr	r2, [r3, #0]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149a2:	1ad3      	subs	r3, r2, r3
 80149a4:	3b01      	subs	r3, #1
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	db7e      	blt.n	8014aa8 <tcp_process+0x4a4>
 80149aa:	4b7b      	ldr	r3, [pc, #492]	@ (8014b98 <tcp_process+0x594>)
 80149ac:	681a      	ldr	r2, [r3, #0]
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80149b2:	1ad3      	subs	r3, r2, r3
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	dc77      	bgt.n	8014aa8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2204      	movs	r2, #4
 80149bc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d102      	bne.n	80149cc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80149c6:	23fa      	movs	r3, #250	@ 0xfa
 80149c8:	76bb      	strb	r3, [r7, #26]
 80149ca:	e01d      	b.n	8014a08 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149d0:	699b      	ldr	r3, [r3, #24]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d106      	bne.n	80149e4 <tcp_process+0x3e0>
 80149d6:	4b76      	ldr	r3, [pc, #472]	@ (8014bb0 <tcp_process+0x5ac>)
 80149d8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80149dc:	4975      	ldr	r1, [pc, #468]	@ (8014bb4 <tcp_process+0x5b0>)
 80149de:	4876      	ldr	r0, [pc, #472]	@ (8014bb8 <tcp_process+0x5b4>)
 80149e0:	f006 f9e8 	bl	801adb4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149e8:	699b      	ldr	r3, [r3, #24]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d00a      	beq.n	8014a04 <tcp_process+0x400>
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149f2:	699b      	ldr	r3, [r3, #24]
 80149f4:	687a      	ldr	r2, [r7, #4]
 80149f6:	6910      	ldr	r0, [r2, #16]
 80149f8:	2200      	movs	r2, #0
 80149fa:	6879      	ldr	r1, [r7, #4]
 80149fc:	4798      	blx	r3
 80149fe:	4603      	mov	r3, r0
 8014a00:	76bb      	strb	r3, [r7, #26]
 8014a02:	e001      	b.n	8014a08 <tcp_process+0x404>
 8014a04:	23f0      	movs	r3, #240	@ 0xf0
 8014a06:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014a08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d00a      	beq.n	8014a26 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014a10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014a14:	f113 0f0d 	cmn.w	r3, #13
 8014a18:	d002      	beq.n	8014a20 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f7fd ff88 	bl	8012930 <tcp_abort>
            }
            return ERR_ABRT;
 8014a20:	f06f 030c 	mvn.w	r3, #12
 8014a24:	e1ce      	b.n	8014dc4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f000 fae0 	bl	8014fec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014a2c:	4b63      	ldr	r3, [pc, #396]	@ (8014bbc <tcp_process+0x5b8>)
 8014a2e:	881b      	ldrh	r3, [r3, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d005      	beq.n	8014a40 <tcp_process+0x43c>
            recv_acked--;
 8014a34:	4b61      	ldr	r3, [pc, #388]	@ (8014bbc <tcp_process+0x5b8>)
 8014a36:	881b      	ldrh	r3, [r3, #0]
 8014a38:	3b01      	subs	r3, #1
 8014a3a:	b29a      	uxth	r2, r3
 8014a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8014bbc <tcp_process+0x5b8>)
 8014a3e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a44:	009a      	lsls	r2, r3, #2
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a4a:	005b      	lsls	r3, r3, #1
 8014a4c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014a50:	428b      	cmp	r3, r1
 8014a52:	bf38      	it	cc
 8014a54:	460b      	movcc	r3, r1
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d204      	bcs.n	8014a64 <tcp_process+0x460>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	e00d      	b.n	8014a80 <tcp_process+0x47c>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a68:	005b      	lsls	r3, r3, #1
 8014a6a:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014a6e:	4293      	cmp	r3, r2
 8014a70:	d904      	bls.n	8014a7c <tcp_process+0x478>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a76:	005b      	lsls	r3, r3, #1
 8014a78:	b29b      	uxth	r3, r3
 8014a7a:	e001      	b.n	8014a80 <tcp_process+0x47c>
 8014a7c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014a80:	687a      	ldr	r2, [r7, #4]
 8014a82:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014a86:	4b4e      	ldr	r3, [pc, #312]	@ (8014bc0 <tcp_process+0x5bc>)
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	f003 0320 	and.w	r3, r3, #32
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d037      	beq.n	8014b02 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	8b5b      	ldrh	r3, [r3, #26]
 8014a96:	f043 0302 	orr.w	r3, r3, #2
 8014a9a:	b29a      	uxth	r2, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2207      	movs	r2, #7
 8014aa4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014aa6:	e02c      	b.n	8014b02 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8014b98 <tcp_process+0x594>)
 8014aaa:	6819      	ldr	r1, [r3, #0]
 8014aac:	4b3b      	ldr	r3, [pc, #236]	@ (8014b9c <tcp_process+0x598>)
 8014aae:	881b      	ldrh	r3, [r3, #0]
 8014ab0:	461a      	mov	r2, r3
 8014ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8014ba0 <tcp_process+0x59c>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8014ba4 <tcp_process+0x5a0>)
 8014aba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014abc:	885b      	ldrh	r3, [r3, #2]
 8014abe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ac0:	4a38      	ldr	r2, [pc, #224]	@ (8014ba4 <tcp_process+0x5a0>)
 8014ac2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ac4:	8812      	ldrh	r2, [r2, #0]
 8014ac6:	b292      	uxth	r2, r2
 8014ac8:	9202      	str	r2, [sp, #8]
 8014aca:	9301      	str	r3, [sp, #4]
 8014acc:	4b36      	ldr	r3, [pc, #216]	@ (8014ba8 <tcp_process+0x5a4>)
 8014ace:	9300      	str	r3, [sp, #0]
 8014ad0:	4b36      	ldr	r3, [pc, #216]	@ (8014bac <tcp_process+0x5a8>)
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f002 fbcd 	bl	8017274 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014ada:	e167      	b.n	8014dac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014adc:	4b2d      	ldr	r3, [pc, #180]	@ (8014b94 <tcp_process+0x590>)
 8014ade:	781b      	ldrb	r3, [r3, #0]
 8014ae0:	f003 0302 	and.w	r3, r3, #2
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	f000 8161 	beq.w	8014dac <tcp_process+0x7a8>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aee:	1e5a      	subs	r2, r3, #1
 8014af0:	4b2b      	ldr	r3, [pc, #172]	@ (8014ba0 <tcp_process+0x59c>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	f040 8159 	bne.w	8014dac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f002 f9b4 	bl	8016e68 <tcp_rexmit>
      break;
 8014b00:	e154      	b.n	8014dac <tcp_process+0x7a8>
 8014b02:	e153      	b.n	8014dac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f000 fa71 	bl	8014fec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8014bc0 <tcp_process+0x5bc>)
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	f003 0320 	and.w	r3, r3, #32
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	f000 814c 	beq.w	8014db0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	8b5b      	ldrh	r3, [r3, #26]
 8014b1c:	f043 0302 	orr.w	r3, r3, #2
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	2207      	movs	r2, #7
 8014b2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014b2c:	e140      	b.n	8014db0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f000 fa5c 	bl	8014fec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014b34:	4b22      	ldr	r3, [pc, #136]	@ (8014bc0 <tcp_process+0x5bc>)
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	f003 0320 	and.w	r3, r3, #32
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d071      	beq.n	8014c24 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b40:	4b14      	ldr	r3, [pc, #80]	@ (8014b94 <tcp_process+0x590>)
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	f003 0310 	and.w	r3, r3, #16
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d060      	beq.n	8014c0e <tcp_process+0x60a>
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b50:	4b11      	ldr	r3, [pc, #68]	@ (8014b98 <tcp_process+0x594>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d15a      	bne.n	8014c0e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d156      	bne.n	8014c0e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	8b5b      	ldrh	r3, [r3, #26]
 8014b64:	f043 0302 	orr.w	r3, r3, #2
 8014b68:	b29a      	uxth	r2, r3
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f7fe fdbc 	bl	80136ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014b74:	4b13      	ldr	r3, [pc, #76]	@ (8014bc4 <tcp_process+0x5c0>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	d105      	bne.n	8014b8a <tcp_process+0x586>
 8014b7e:	4b11      	ldr	r3, [pc, #68]	@ (8014bc4 <tcp_process+0x5c0>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	68db      	ldr	r3, [r3, #12]
 8014b84:	4a0f      	ldr	r2, [pc, #60]	@ (8014bc4 <tcp_process+0x5c0>)
 8014b86:	6013      	str	r3, [r2, #0]
 8014b88:	e02e      	b.n	8014be8 <tcp_process+0x5e4>
 8014b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8014bc4 <tcp_process+0x5c0>)
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	617b      	str	r3, [r7, #20]
 8014b90:	e027      	b.n	8014be2 <tcp_process+0x5de>
 8014b92:	bf00      	nop
 8014b94:	24014bf4 	.word	0x24014bf4
 8014b98:	24014bec 	.word	0x24014bec
 8014b9c:	24014bf2 	.word	0x24014bf2
 8014ba0:	24014be8 	.word	0x24014be8
 8014ba4:	24014bd8 	.word	0x24014bd8
 8014ba8:	2400e084 	.word	0x2400e084
 8014bac:	2400e088 	.word	0x2400e088
 8014bb0:	0801d0d8 	.word	0x0801d0d8
 8014bb4:	0801d378 	.word	0x0801d378
 8014bb8:	0801d124 	.word	0x0801d124
 8014bbc:	24014bf0 	.word	0x24014bf0
 8014bc0:	24014bf5 	.word	0x24014bf5
 8014bc4:	24014bbc 	.word	0x24014bbc
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	68db      	ldr	r3, [r3, #12]
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d104      	bne.n	8014bdc <tcp_process+0x5d8>
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	68da      	ldr	r2, [r3, #12]
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	60da      	str	r2, [r3, #12]
 8014bda:	e005      	b.n	8014be8 <tcp_process+0x5e4>
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	617b      	str	r3, [r7, #20]
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d1ef      	bne.n	8014bc8 <tcp_process+0x5c4>
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2200      	movs	r2, #0
 8014bec:	60da      	str	r2, [r3, #12]
 8014bee:	4b77      	ldr	r3, [pc, #476]	@ (8014dcc <tcp_process+0x7c8>)
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	220a      	movs	r2, #10
 8014bf8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014bfa:	4b75      	ldr	r3, [pc, #468]	@ (8014dd0 <tcp_process+0x7cc>)
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	60da      	str	r2, [r3, #12]
 8014c02:	4a73      	ldr	r2, [pc, #460]	@ (8014dd0 <tcp_process+0x7cc>)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6013      	str	r3, [r2, #0]
 8014c08:	f002 fcf6 	bl	80175f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014c0c:	e0d2      	b.n	8014db4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	8b5b      	ldrh	r3, [r3, #26]
 8014c12:	f043 0302 	orr.w	r3, r3, #2
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2208      	movs	r2, #8
 8014c20:	751a      	strb	r2, [r3, #20]
      break;
 8014c22:	e0c7      	b.n	8014db4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014c24:	4b6b      	ldr	r3, [pc, #428]	@ (8014dd4 <tcp_process+0x7d0>)
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	f003 0310 	and.w	r3, r3, #16
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	f000 80c1 	beq.w	8014db4 <tcp_process+0x7b0>
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014c36:	4b68      	ldr	r3, [pc, #416]	@ (8014dd8 <tcp_process+0x7d4>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	f040 80ba 	bne.w	8014db4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f040 80b5 	bne.w	8014db4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2206      	movs	r2, #6
 8014c4e:	751a      	strb	r2, [r3, #20]
      break;
 8014c50:	e0b0      	b.n	8014db4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f000 f9ca 	bl	8014fec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014c58:	4b60      	ldr	r3, [pc, #384]	@ (8014ddc <tcp_process+0x7d8>)
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	f003 0320 	and.w	r3, r3, #32
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	f000 80a9 	beq.w	8014db8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	8b5b      	ldrh	r3, [r3, #26]
 8014c6a:	f043 0302 	orr.w	r3, r3, #2
 8014c6e:	b29a      	uxth	r2, r3
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f7fe fd39 	bl	80136ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014c7a:	4b59      	ldr	r3, [pc, #356]	@ (8014de0 <tcp_process+0x7dc>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	687a      	ldr	r2, [r7, #4]
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d105      	bne.n	8014c90 <tcp_process+0x68c>
 8014c84:	4b56      	ldr	r3, [pc, #344]	@ (8014de0 <tcp_process+0x7dc>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	68db      	ldr	r3, [r3, #12]
 8014c8a:	4a55      	ldr	r2, [pc, #340]	@ (8014de0 <tcp_process+0x7dc>)
 8014c8c:	6013      	str	r3, [r2, #0]
 8014c8e:	e013      	b.n	8014cb8 <tcp_process+0x6b4>
 8014c90:	4b53      	ldr	r3, [pc, #332]	@ (8014de0 <tcp_process+0x7dc>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	613b      	str	r3, [r7, #16]
 8014c96:	e00c      	b.n	8014cb2 <tcp_process+0x6ae>
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	687a      	ldr	r2, [r7, #4]
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d104      	bne.n	8014cac <tcp_process+0x6a8>
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	68da      	ldr	r2, [r3, #12]
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	60da      	str	r2, [r3, #12]
 8014caa:	e005      	b.n	8014cb8 <tcp_process+0x6b4>
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	68db      	ldr	r3, [r3, #12]
 8014cb0:	613b      	str	r3, [r7, #16]
 8014cb2:	693b      	ldr	r3, [r7, #16]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d1ef      	bne.n	8014c98 <tcp_process+0x694>
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	60da      	str	r2, [r3, #12]
 8014cbe:	4b43      	ldr	r3, [pc, #268]	@ (8014dcc <tcp_process+0x7c8>)
 8014cc0:	2201      	movs	r2, #1
 8014cc2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	220a      	movs	r2, #10
 8014cc8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014cca:	4b41      	ldr	r3, [pc, #260]	@ (8014dd0 <tcp_process+0x7cc>)
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	60da      	str	r2, [r3, #12]
 8014cd2:	4a3f      	ldr	r2, [pc, #252]	@ (8014dd0 <tcp_process+0x7cc>)
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	6013      	str	r3, [r2, #0]
 8014cd8:	f002 fc8e 	bl	80175f8 <tcp_timer_needed>
      }
      break;
 8014cdc:	e06c      	b.n	8014db8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f000 f984 	bl	8014fec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8014dd4 <tcp_process+0x7d0>)
 8014ce6:	781b      	ldrb	r3, [r3, #0]
 8014ce8:	f003 0310 	and.w	r3, r3, #16
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d065      	beq.n	8014dbc <tcp_process+0x7b8>
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014cf4:	4b38      	ldr	r3, [pc, #224]	@ (8014dd8 <tcp_process+0x7d4>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d15f      	bne.n	8014dbc <tcp_process+0x7b8>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d15b      	bne.n	8014dbc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f7fe fcf1 	bl	80136ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014d0a:	4b35      	ldr	r3, [pc, #212]	@ (8014de0 <tcp_process+0x7dc>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d105      	bne.n	8014d20 <tcp_process+0x71c>
 8014d14:	4b32      	ldr	r3, [pc, #200]	@ (8014de0 <tcp_process+0x7dc>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	4a31      	ldr	r2, [pc, #196]	@ (8014de0 <tcp_process+0x7dc>)
 8014d1c:	6013      	str	r3, [r2, #0]
 8014d1e:	e013      	b.n	8014d48 <tcp_process+0x744>
 8014d20:	4b2f      	ldr	r3, [pc, #188]	@ (8014de0 <tcp_process+0x7dc>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	60fb      	str	r3, [r7, #12]
 8014d26:	e00c      	b.n	8014d42 <tcp_process+0x73e>
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	68db      	ldr	r3, [r3, #12]
 8014d2c:	687a      	ldr	r2, [r7, #4]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d104      	bne.n	8014d3c <tcp_process+0x738>
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	68da      	ldr	r2, [r3, #12]
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	60da      	str	r2, [r3, #12]
 8014d3a:	e005      	b.n	8014d48 <tcp_process+0x744>
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	68db      	ldr	r3, [r3, #12]
 8014d40:	60fb      	str	r3, [r7, #12]
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d1ef      	bne.n	8014d28 <tcp_process+0x724>
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	60da      	str	r2, [r3, #12]
 8014d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8014dcc <tcp_process+0x7c8>)
 8014d50:	2201      	movs	r2, #1
 8014d52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	220a      	movs	r2, #10
 8014d58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8014dd0 <tcp_process+0x7cc>)
 8014d5c:	681a      	ldr	r2, [r3, #0]
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	60da      	str	r2, [r3, #12]
 8014d62:	4a1b      	ldr	r2, [pc, #108]	@ (8014dd0 <tcp_process+0x7cc>)
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6013      	str	r3, [r2, #0]
 8014d68:	f002 fc46 	bl	80175f8 <tcp_timer_needed>
      }
      break;
 8014d6c:	e026      	b.n	8014dbc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014d6e:	6878      	ldr	r0, [r7, #4]
 8014d70:	f000 f93c 	bl	8014fec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014d74:	4b17      	ldr	r3, [pc, #92]	@ (8014dd4 <tcp_process+0x7d0>)
 8014d76:	781b      	ldrb	r3, [r3, #0]
 8014d78:	f003 0310 	and.w	r3, r3, #16
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d01f      	beq.n	8014dc0 <tcp_process+0x7bc>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014d84:	4b14      	ldr	r3, [pc, #80]	@ (8014dd8 <tcp_process+0x7d4>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d119      	bne.n	8014dc0 <tcp_process+0x7bc>
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d115      	bne.n	8014dc0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014d94:	4b11      	ldr	r3, [pc, #68]	@ (8014ddc <tcp_process+0x7d8>)
 8014d96:	781b      	ldrb	r3, [r3, #0]
 8014d98:	f043 0310 	orr.w	r3, r3, #16
 8014d9c:	b2da      	uxtb	r2, r3
 8014d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8014ddc <tcp_process+0x7d8>)
 8014da0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014da2:	e00d      	b.n	8014dc0 <tcp_process+0x7bc>
    default:
      break;
 8014da4:	bf00      	nop
 8014da6:	e00c      	b.n	8014dc2 <tcp_process+0x7be>
      break;
 8014da8:	bf00      	nop
 8014daa:	e00a      	b.n	8014dc2 <tcp_process+0x7be>
      break;
 8014dac:	bf00      	nop
 8014dae:	e008      	b.n	8014dc2 <tcp_process+0x7be>
      break;
 8014db0:	bf00      	nop
 8014db2:	e006      	b.n	8014dc2 <tcp_process+0x7be>
      break;
 8014db4:	bf00      	nop
 8014db6:	e004      	b.n	8014dc2 <tcp_process+0x7be>
      break;
 8014db8:	bf00      	nop
 8014dba:	e002      	b.n	8014dc2 <tcp_process+0x7be>
      break;
 8014dbc:	bf00      	nop
 8014dbe:	e000      	b.n	8014dc2 <tcp_process+0x7be>
      break;
 8014dc0:	bf00      	nop
  }
  return ERR_OK;
 8014dc2:	2300      	movs	r3, #0
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3724      	adds	r7, #36	@ 0x24
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd90      	pop	{r4, r7, pc}
 8014dcc:	24014bc4 	.word	0x24014bc4
 8014dd0:	24014bc0 	.word	0x24014bc0
 8014dd4:	24014bf4 	.word	0x24014bf4
 8014dd8:	24014bec 	.word	0x24014bec
 8014ddc:	24014bf5 	.word	0x24014bf5
 8014de0:	24014bbc 	.word	0x24014bbc

08014de4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014de4:	b590      	push	{r4, r7, lr}
 8014de6:	b085      	sub	sp, #20
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d106      	bne.n	8014e02 <tcp_oos_insert_segment+0x1e>
 8014df4:	4b3b      	ldr	r3, [pc, #236]	@ (8014ee4 <tcp_oos_insert_segment+0x100>)
 8014df6:	f240 421f 	movw	r2, #1055	@ 0x41f
 8014dfa:	493b      	ldr	r1, [pc, #236]	@ (8014ee8 <tcp_oos_insert_segment+0x104>)
 8014dfc:	483b      	ldr	r0, [pc, #236]	@ (8014eec <tcp_oos_insert_segment+0x108>)
 8014dfe:	f005 ffd9 	bl	801adb4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	68db      	ldr	r3, [r3, #12]
 8014e06:	899b      	ldrh	r3, [r3, #12]
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fb fa4e 	bl	80102ac <lwip_htons>
 8014e10:	4603      	mov	r3, r0
 8014e12:	b2db      	uxtb	r3, r3
 8014e14:	f003 0301 	and.w	r3, r3, #1
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d028      	beq.n	8014e6e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014e1c:	6838      	ldr	r0, [r7, #0]
 8014e1e:	f7fe fa63 	bl	80132e8 <tcp_segs_free>
    next = NULL;
 8014e22:	2300      	movs	r3, #0
 8014e24:	603b      	str	r3, [r7, #0]
 8014e26:	e056      	b.n	8014ed6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	68db      	ldr	r3, [r3, #12]
 8014e2c:	899b      	ldrh	r3, [r3, #12]
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7fb fa3b 	bl	80102ac <lwip_htons>
 8014e36:	4603      	mov	r3, r0
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	f003 0301 	and.w	r3, r3, #1
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d00d      	beq.n	8014e5e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	899b      	ldrh	r3, [r3, #12]
 8014e48:	b29c      	uxth	r4, r3
 8014e4a:	2001      	movs	r0, #1
 8014e4c:	f7fb fa2e 	bl	80102ac <lwip_htons>
 8014e50:	4603      	mov	r3, r0
 8014e52:	461a      	mov	r2, r3
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	4322      	orrs	r2, r4
 8014e5a:	b292      	uxth	r2, r2
 8014e5c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014e68:	68f8      	ldr	r0, [r7, #12]
 8014e6a:	f7fe fa52 	bl	8013312 <tcp_seg_free>
    while (next &&
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d00e      	beq.n	8014e92 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	891b      	ldrh	r3, [r3, #8]
 8014e78:	461a      	mov	r2, r3
 8014e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8014ef0 <tcp_oos_insert_segment+0x10c>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	441a      	add	r2, r3
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	68db      	ldr	r3, [r3, #12]
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	6839      	ldr	r1, [r7, #0]
 8014e88:	8909      	ldrh	r1, [r1, #8]
 8014e8a:	440b      	add	r3, r1
 8014e8c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	daca      	bge.n	8014e28 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d01e      	beq.n	8014ed6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	891b      	ldrh	r3, [r3, #8]
 8014e9c:	461a      	mov	r2, r3
 8014e9e:	4b14      	ldr	r3, [pc, #80]	@ (8014ef0 <tcp_oos_insert_segment+0x10c>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	441a      	add	r2, r3
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	68db      	ldr	r3, [r3, #12]
 8014ea8:	685b      	ldr	r3, [r3, #4]
 8014eaa:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	dd12      	ble.n	8014ed6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	68db      	ldr	r3, [r3, #12]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	b29a      	uxth	r2, r3
 8014eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8014ef0 <tcp_oos_insert_segment+0x10c>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	b29b      	uxth	r3, r3
 8014ebe:	1ad3      	subs	r3, r2, r3
 8014ec0:	b29a      	uxth	r2, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	685a      	ldr	r2, [r3, #4]
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	891b      	ldrh	r3, [r3, #8]
 8014ece:	4619      	mov	r1, r3
 8014ed0:	4610      	mov	r0, r2
 8014ed2:	f7fc fd17 	bl	8011904 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	683a      	ldr	r2, [r7, #0]
 8014eda:	601a      	str	r2, [r3, #0]
}
 8014edc:	bf00      	nop
 8014ede:	3714      	adds	r7, #20
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd90      	pop	{r4, r7, pc}
 8014ee4:	0801d0d8 	.word	0x0801d0d8
 8014ee8:	0801d398 	.word	0x0801d398
 8014eec:	0801d124 	.word	0x0801d124
 8014ef0:	24014be8 	.word	0x24014be8

08014ef4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014ef4:	b5b0      	push	{r4, r5, r7, lr}
 8014ef6:	b086      	sub	sp, #24
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	60f8      	str	r0, [r7, #12]
 8014efc:	60b9      	str	r1, [r7, #8]
 8014efe:	607a      	str	r2, [r7, #4]
 8014f00:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014f02:	e03e      	b.n	8014f82 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7fc ff0a 	bl	8011d2c <pbuf_clen>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f22:	8a7a      	ldrh	r2, [r7, #18]
 8014f24:	429a      	cmp	r2, r3
 8014f26:	d906      	bls.n	8014f36 <tcp_free_acked_segments+0x42>
 8014f28:	4b2a      	ldr	r3, [pc, #168]	@ (8014fd4 <tcp_free_acked_segments+0xe0>)
 8014f2a:	f240 4257 	movw	r2, #1111	@ 0x457
 8014f2e:	492a      	ldr	r1, [pc, #168]	@ (8014fd8 <tcp_free_acked_segments+0xe4>)
 8014f30:	482a      	ldr	r0, [pc, #168]	@ (8014fdc <tcp_free_acked_segments+0xe8>)
 8014f32:	f005 ff3f 	bl	801adb4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8014f3c:	8a7b      	ldrh	r3, [r7, #18]
 8014f3e:	1ad3      	subs	r3, r2, r3
 8014f40:	b29a      	uxth	r2, r3
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	891a      	ldrh	r2, [r3, #8]
 8014f4c:	4b24      	ldr	r3, [pc, #144]	@ (8014fe0 <tcp_free_acked_segments+0xec>)
 8014f4e:	881b      	ldrh	r3, [r3, #0]
 8014f50:	4413      	add	r3, r2
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	4b22      	ldr	r3, [pc, #136]	@ (8014fe0 <tcp_free_acked_segments+0xec>)
 8014f56:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014f58:	6978      	ldr	r0, [r7, #20]
 8014f5a:	f7fe f9da 	bl	8013312 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d00c      	beq.n	8014f82 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d109      	bne.n	8014f82 <tcp_free_acked_segments+0x8e>
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d106      	bne.n	8014f82 <tcp_free_acked_segments+0x8e>
 8014f74:	4b17      	ldr	r3, [pc, #92]	@ (8014fd4 <tcp_free_acked_segments+0xe0>)
 8014f76:	f240 4261 	movw	r2, #1121	@ 0x461
 8014f7a:	491a      	ldr	r1, [pc, #104]	@ (8014fe4 <tcp_free_acked_segments+0xf0>)
 8014f7c:	4817      	ldr	r0, [pc, #92]	@ (8014fdc <tcp_free_acked_segments+0xe8>)
 8014f7e:	f005 ff19 	bl	801adb4 <iprintf>
  while (seg_list != NULL &&
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d020      	beq.n	8014fca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7fb f9a2 	bl	80102d8 <lwip_htonl>
 8014f94:	4604      	mov	r4, r0
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	891b      	ldrh	r3, [r3, #8]
 8014f9a:	461d      	mov	r5, r3
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	899b      	ldrh	r3, [r3, #12]
 8014fa2:	b29b      	uxth	r3, r3
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7fb f981 	bl	80102ac <lwip_htons>
 8014faa:	4603      	mov	r3, r0
 8014fac:	b2db      	uxtb	r3, r3
 8014fae:	f003 0303 	and.w	r3, r3, #3
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d001      	beq.n	8014fba <tcp_free_acked_segments+0xc6>
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	e000      	b.n	8014fbc <tcp_free_acked_segments+0xc8>
 8014fba:	2300      	movs	r3, #0
 8014fbc:	442b      	add	r3, r5
 8014fbe:	18e2      	adds	r2, r4, r3
 8014fc0:	4b09      	ldr	r3, [pc, #36]	@ (8014fe8 <tcp_free_acked_segments+0xf4>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	dd9c      	ble.n	8014f04 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014fca:	68bb      	ldr	r3, [r7, #8]
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3718      	adds	r7, #24
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8014fd4:	0801d0d8 	.word	0x0801d0d8
 8014fd8:	0801d3c0 	.word	0x0801d3c0
 8014fdc:	0801d124 	.word	0x0801d124
 8014fe0:	24014bf0 	.word	0x24014bf0
 8014fe4:	0801d3e8 	.word	0x0801d3e8
 8014fe8:	24014bec 	.word	0x24014bec

08014fec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014fec:	b5b0      	push	{r4, r5, r7, lr}
 8014fee:	b094      	sub	sp, #80	@ 0x50
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d106      	bne.n	801500c <tcp_receive+0x20>
 8014ffe:	4b91      	ldr	r3, [pc, #580]	@ (8015244 <tcp_receive+0x258>)
 8015000:	f240 427b 	movw	r2, #1147	@ 0x47b
 8015004:	4990      	ldr	r1, [pc, #576]	@ (8015248 <tcp_receive+0x25c>)
 8015006:	4891      	ldr	r0, [pc, #580]	@ (801524c <tcp_receive+0x260>)
 8015008:	f005 fed4 	bl	801adb4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	7d1b      	ldrb	r3, [r3, #20]
 8015010:	2b03      	cmp	r3, #3
 8015012:	d806      	bhi.n	8015022 <tcp_receive+0x36>
 8015014:	4b8b      	ldr	r3, [pc, #556]	@ (8015244 <tcp_receive+0x258>)
 8015016:	f240 427c 	movw	r2, #1148	@ 0x47c
 801501a:	498d      	ldr	r1, [pc, #564]	@ (8015250 <tcp_receive+0x264>)
 801501c:	488b      	ldr	r0, [pc, #556]	@ (801524c <tcp_receive+0x260>)
 801501e:	f005 fec9 	bl	801adb4 <iprintf>

  if (flags & TCP_ACK) {
 8015022:	4b8c      	ldr	r3, [pc, #560]	@ (8015254 <tcp_receive+0x268>)
 8015024:	781b      	ldrb	r3, [r3, #0]
 8015026:	f003 0310 	and.w	r3, r3, #16
 801502a:	2b00      	cmp	r3, #0
 801502c:	f000 8264 	beq.w	80154f8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015036:	461a      	mov	r2, r3
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801503c:	4413      	add	r3, r2
 801503e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015044:	4b84      	ldr	r3, [pc, #528]	@ (8015258 <tcp_receive+0x26c>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	1ad3      	subs	r3, r2, r3
 801504a:	2b00      	cmp	r3, #0
 801504c:	db1b      	blt.n	8015086 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015052:	4b81      	ldr	r3, [pc, #516]	@ (8015258 <tcp_receive+0x26c>)
 8015054:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015056:	429a      	cmp	r2, r3
 8015058:	d106      	bne.n	8015068 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801505e:	4b7f      	ldr	r3, [pc, #508]	@ (801525c <tcp_receive+0x270>)
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	1ad3      	subs	r3, r2, r3
 8015064:	2b00      	cmp	r3, #0
 8015066:	db0e      	blt.n	8015086 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801506c:	4b7b      	ldr	r3, [pc, #492]	@ (801525c <tcp_receive+0x270>)
 801506e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015070:	429a      	cmp	r2, r3
 8015072:	d125      	bne.n	80150c0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015074:	4b7a      	ldr	r3, [pc, #488]	@ (8015260 <tcp_receive+0x274>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	89db      	ldrh	r3, [r3, #14]
 801507a:	b29a      	uxth	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015082:	429a      	cmp	r2, r3
 8015084:	d91c      	bls.n	80150c0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015086:	4b76      	ldr	r3, [pc, #472]	@ (8015260 <tcp_receive+0x274>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	89db      	ldrh	r3, [r3, #14]
 801508c:	b29a      	uxth	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d205      	bcs.n	80150b0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80150b0:	4b69      	ldr	r3, [pc, #420]	@ (8015258 <tcp_receive+0x26c>)
 80150b2:	681a      	ldr	r2, [r3, #0]
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80150b8:	4b68      	ldr	r3, [pc, #416]	@ (801525c <tcp_receive+0x270>)
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80150c0:	4b66      	ldr	r3, [pc, #408]	@ (801525c <tcp_receive+0x270>)
 80150c2:	681a      	ldr	r2, [r3, #0]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150c8:	1ad3      	subs	r3, r2, r3
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	dc58      	bgt.n	8015180 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80150ce:	4b65      	ldr	r3, [pc, #404]	@ (8015264 <tcp_receive+0x278>)
 80150d0:	881b      	ldrh	r3, [r3, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d14b      	bne.n	801516e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80150da:	687a      	ldr	r2, [r7, #4]
 80150dc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80150e0:	4413      	add	r3, r2
 80150e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d142      	bne.n	801516e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	db3d      	blt.n	801516e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80150f6:	4b59      	ldr	r3, [pc, #356]	@ (801525c <tcp_receive+0x270>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d137      	bne.n	801516e <tcp_receive+0x182>
              found_dupack = 1;
 80150fe:	2301      	movs	r3, #1
 8015100:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015108:	2bff      	cmp	r3, #255	@ 0xff
 801510a:	d007      	beq.n	801511c <tcp_receive+0x130>
                ++pcb->dupacks;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015112:	3301      	adds	r3, #1
 8015114:	b2da      	uxtb	r2, r3
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015122:	2b03      	cmp	r3, #3
 8015124:	d91b      	bls.n	801515e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015130:	4413      	add	r3, r2
 8015132:	b29a      	uxth	r2, r3
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801513a:	429a      	cmp	r2, r3
 801513c:	d30a      	bcc.n	8015154 <tcp_receive+0x168>
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015148:	4413      	add	r3, r2
 801514a:	b29a      	uxth	r2, r3
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015152:	e004      	b.n	801515e <tcp_receive+0x172>
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801515a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015164:	2b02      	cmp	r3, #2
 8015166:	d902      	bls.n	801516e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f001 fee9 	bl	8016f40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801516e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015170:	2b00      	cmp	r3, #0
 8015172:	f040 8161 	bne.w	8015438 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2200      	movs	r2, #0
 801517a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801517e:	e15b      	b.n	8015438 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015180:	4b36      	ldr	r3, [pc, #216]	@ (801525c <tcp_receive+0x270>)
 8015182:	681a      	ldr	r2, [r3, #0]
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015188:	1ad3      	subs	r3, r2, r3
 801518a:	3b01      	subs	r3, #1
 801518c:	2b00      	cmp	r3, #0
 801518e:	f2c0 814e 	blt.w	801542e <tcp_receive+0x442>
 8015192:	4b32      	ldr	r3, [pc, #200]	@ (801525c <tcp_receive+0x270>)
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801519a:	1ad3      	subs	r3, r2, r3
 801519c:	2b00      	cmp	r3, #0
 801519e:	f300 8146 	bgt.w	801542e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	8b5b      	ldrh	r3, [r3, #26]
 80151a6:	f003 0304 	and.w	r3, r3, #4
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d010      	beq.n	80151d0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	8b5b      	ldrh	r3, [r3, #26]
 80151b2:	f023 0304 	bic.w	r3, r3, #4
 80151b6:	b29a      	uxth	r2, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2200      	movs	r2, #0
 80151cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2200      	movs	r2, #0
 80151d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80151de:	10db      	asrs	r3, r3, #3
 80151e0:	b21b      	sxth	r3, r3
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	4413      	add	r3, r2
 80151ee:	b29b      	uxth	r3, r3
 80151f0:	b21a      	sxth	r2, r3
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80151f8:	4b18      	ldr	r3, [pc, #96]	@ (801525c <tcp_receive+0x270>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015202:	b29b      	uxth	r3, r3
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2200      	movs	r2, #0
 801520c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015210:	4b12      	ldr	r3, [pc, #72]	@ (801525c <tcp_receive+0x270>)
 8015212:	681a      	ldr	r2, [r3, #0]
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	7d1b      	ldrb	r3, [r3, #20]
 801521c:	2b03      	cmp	r3, #3
 801521e:	f240 8097 	bls.w	8015350 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801522e:	429a      	cmp	r2, r3
 8015230:	d245      	bcs.n	80152be <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	8b5b      	ldrh	r3, [r3, #26]
 8015236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801523a:	2b00      	cmp	r3, #0
 801523c:	d014      	beq.n	8015268 <tcp_receive+0x27c>
 801523e:	2301      	movs	r3, #1
 8015240:	e013      	b.n	801526a <tcp_receive+0x27e>
 8015242:	bf00      	nop
 8015244:	0801d0d8 	.word	0x0801d0d8
 8015248:	0801d408 	.word	0x0801d408
 801524c:	0801d124 	.word	0x0801d124
 8015250:	0801d424 	.word	0x0801d424
 8015254:	24014bf4 	.word	0x24014bf4
 8015258:	24014be8 	.word	0x24014be8
 801525c:	24014bec 	.word	0x24014bec
 8015260:	24014bd8 	.word	0x24014bd8
 8015264:	24014bf2 	.word	0x24014bf2
 8015268:	2302      	movs	r3, #2
 801526a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801526e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015272:	b29a      	uxth	r2, r3
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015278:	fb12 f303 	smulbb	r3, r2, r3
 801527c:	b29b      	uxth	r3, r3
 801527e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015280:	4293      	cmp	r3, r2
 8015282:	bf28      	it	cs
 8015284:	4613      	movcs	r3, r2
 8015286:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801528e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015290:	4413      	add	r3, r2
 8015292:	b29a      	uxth	r2, r3
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801529a:	429a      	cmp	r2, r3
 801529c:	d309      	bcc.n	80152b2 <tcp_receive+0x2c6>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80152a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80152a6:	4413      	add	r3, r2
 80152a8:	b29a      	uxth	r2, r3
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80152b0:	e04e      	b.n	8015350 <tcp_receive+0x364>
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80152b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80152bc:	e048      	b.n	8015350 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80152c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80152c6:	4413      	add	r3, r2
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d309      	bcc.n	80152e8 <tcp_receive+0x2fc>
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80152da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80152dc:	4413      	add	r3, r2
 80152de:	b29a      	uxth	r2, r3
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152e6:	e004      	b.n	80152f2 <tcp_receive+0x306>
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80152ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80152fe:	429a      	cmp	r2, r3
 8015300:	d326      	bcc.n	8015350 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801530e:	1ad3      	subs	r3, r2, r3
 8015310:	b29a      	uxth	r2, r3
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015322:	4413      	add	r3, r2
 8015324:	b29a      	uxth	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801532c:	429a      	cmp	r2, r3
 801532e:	d30a      	bcc.n	8015346 <tcp_receive+0x35a>
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801533a:	4413      	add	r3, r2
 801533c:	b29a      	uxth	r2, r3
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015344:	e004      	b.n	8015350 <tcp_receive+0x364>
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801534c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015358:	4a98      	ldr	r2, [pc, #608]	@ (80155bc <tcp_receive+0x5d0>)
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f7ff fdca 	bl	8014ef4 <tcp_free_acked_segments>
 8015360:	4602      	mov	r2, r0
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801536e:	4a94      	ldr	r2, [pc, #592]	@ (80155c0 <tcp_receive+0x5d4>)
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f7ff fdbf 	bl	8014ef4 <tcp_free_acked_segments>
 8015376:	4602      	mov	r2, r0
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015380:	2b00      	cmp	r3, #0
 8015382:	d104      	bne.n	801538e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801538a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801538c:	e002      	b.n	8015394 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2200      	movs	r2, #0
 8015392:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2200      	movs	r2, #0
 8015398:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d103      	bne.n	80153aa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2200      	movs	r2, #0
 80153a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80153b0:	4b84      	ldr	r3, [pc, #528]	@ (80155c4 <tcp_receive+0x5d8>)
 80153b2:	881b      	ldrh	r3, [r3, #0]
 80153b4:	4413      	add	r3, r2
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	8b5b      	ldrh	r3, [r3, #26]
 80153c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d035      	beq.n	8015436 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d118      	bne.n	8015404 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d00c      	beq.n	80153f4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153e2:	68db      	ldr	r3, [r3, #12]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fa ff76 	bl	80102d8 <lwip_htonl>
 80153ec:	4603      	mov	r3, r0
 80153ee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	dc20      	bgt.n	8015436 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	8b5b      	ldrh	r3, [r3, #26]
 80153f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80153fc:	b29a      	uxth	r2, r3
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015402:	e018      	b.n	8015436 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	4618      	mov	r0, r3
 8015412:	f7fa ff61 	bl	80102d8 <lwip_htonl>
 8015416:	4603      	mov	r3, r0
 8015418:	1ae3      	subs	r3, r4, r3
 801541a:	2b00      	cmp	r3, #0
 801541c:	dc0b      	bgt.n	8015436 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	8b5b      	ldrh	r3, [r3, #26]
 8015422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015426:	b29a      	uxth	r2, r3
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801542c:	e003      	b.n	8015436 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f001 ff72 	bl	8017318 <tcp_send_empty_ack>
 8015434:	e000      	b.n	8015438 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015436:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801543c:	2b00      	cmp	r3, #0
 801543e:	d05b      	beq.n	80154f8 <tcp_receive+0x50c>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015444:	4b60      	ldr	r3, [pc, #384]	@ (80155c8 <tcp_receive+0x5dc>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	1ad3      	subs	r3, r2, r3
 801544a:	2b00      	cmp	r3, #0
 801544c:	da54      	bge.n	80154f8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801544e:	4b5f      	ldr	r3, [pc, #380]	@ (80155cc <tcp_receive+0x5e0>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	b29a      	uxth	r2, r3
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015458:	b29b      	uxth	r3, r3
 801545a:	1ad3      	subs	r3, r2, r3
 801545c:	b29b      	uxth	r3, r3
 801545e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015462:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801546c:	10db      	asrs	r3, r3, #3
 801546e:	b21b      	sxth	r3, r3
 8015470:	b29b      	uxth	r3, r3
 8015472:	1ad3      	subs	r3, r2, r3
 8015474:	b29b      	uxth	r3, r3
 8015476:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015480:	b29a      	uxth	r2, r3
 8015482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015486:	4413      	add	r3, r2
 8015488:	b29b      	uxth	r3, r3
 801548a:	b21a      	sxth	r2, r3
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015490:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015494:	2b00      	cmp	r3, #0
 8015496:	da05      	bge.n	80154a4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015498:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801549c:	425b      	negs	r3, r3
 801549e:	b29b      	uxth	r3, r3
 80154a0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80154a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80154ae:	109b      	asrs	r3, r3, #2
 80154b0:	b21b      	sxth	r3, r3
 80154b2:	b29b      	uxth	r3, r3
 80154b4:	1ad3      	subs	r3, r2, r3
 80154b6:	b29b      	uxth	r3, r3
 80154b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80154c2:	b29a      	uxth	r2, r3
 80154c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80154c8:	4413      	add	r3, r2
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	b21a      	sxth	r2, r3
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80154d8:	10db      	asrs	r3, r3, #3
 80154da:	b21b      	sxth	r3, r3
 80154dc:	b29a      	uxth	r2, r3
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	4413      	add	r3, r2
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	b21a      	sxth	r2, r3
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2200      	movs	r2, #0
 80154f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80154f8:	4b35      	ldr	r3, [pc, #212]	@ (80155d0 <tcp_receive+0x5e4>)
 80154fa:	881b      	ldrh	r3, [r3, #0]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	f000 84df 	beq.w	8015ec0 <tcp_receive+0xed4>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	7d1b      	ldrb	r3, [r3, #20]
 8015506:	2b06      	cmp	r3, #6
 8015508:	f200 84da 	bhi.w	8015ec0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015510:	4b30      	ldr	r3, [pc, #192]	@ (80155d4 <tcp_receive+0x5e8>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	1ad3      	subs	r3, r2, r3
 8015516:	3b01      	subs	r3, #1
 8015518:	2b00      	cmp	r3, #0
 801551a:	f2c0 808f 	blt.w	801563c <tcp_receive+0x650>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015522:	4b2b      	ldr	r3, [pc, #172]	@ (80155d0 <tcp_receive+0x5e4>)
 8015524:	881b      	ldrh	r3, [r3, #0]
 8015526:	4619      	mov	r1, r3
 8015528:	4b2a      	ldr	r3, [pc, #168]	@ (80155d4 <tcp_receive+0x5e8>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	440b      	add	r3, r1
 801552e:	1ad3      	subs	r3, r2, r3
 8015530:	3301      	adds	r3, #1
 8015532:	2b00      	cmp	r3, #0
 8015534:	f300 8082 	bgt.w	801563c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015538:	4b27      	ldr	r3, [pc, #156]	@ (80155d8 <tcp_receive+0x5ec>)
 801553a:	685b      	ldr	r3, [r3, #4]
 801553c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015542:	4b24      	ldr	r3, [pc, #144]	@ (80155d4 <tcp_receive+0x5e8>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	1ad3      	subs	r3, r2, r3
 8015548:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801554a:	4b23      	ldr	r3, [pc, #140]	@ (80155d8 <tcp_receive+0x5ec>)
 801554c:	685b      	ldr	r3, [r3, #4]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d106      	bne.n	8015560 <tcp_receive+0x574>
 8015552:	4b22      	ldr	r3, [pc, #136]	@ (80155dc <tcp_receive+0x5f0>)
 8015554:	f240 5294 	movw	r2, #1428	@ 0x594
 8015558:	4921      	ldr	r1, [pc, #132]	@ (80155e0 <tcp_receive+0x5f4>)
 801555a:	4822      	ldr	r0, [pc, #136]	@ (80155e4 <tcp_receive+0x5f8>)
 801555c:	f005 fc2a 	bl	801adb4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015562:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015566:	4293      	cmp	r3, r2
 8015568:	d906      	bls.n	8015578 <tcp_receive+0x58c>
 801556a:	4b1c      	ldr	r3, [pc, #112]	@ (80155dc <tcp_receive+0x5f0>)
 801556c:	f240 5295 	movw	r2, #1429	@ 0x595
 8015570:	491d      	ldr	r1, [pc, #116]	@ (80155e8 <tcp_receive+0x5fc>)
 8015572:	481c      	ldr	r0, [pc, #112]	@ (80155e4 <tcp_receive+0x5f8>)
 8015574:	f005 fc1e 	bl	801adb4 <iprintf>
      off = (u16_t)off32;
 8015578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801557a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801557e:	4b16      	ldr	r3, [pc, #88]	@ (80155d8 <tcp_receive+0x5ec>)
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	891b      	ldrh	r3, [r3, #8]
 8015584:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015588:	429a      	cmp	r2, r3
 801558a:	d906      	bls.n	801559a <tcp_receive+0x5ae>
 801558c:	4b13      	ldr	r3, [pc, #76]	@ (80155dc <tcp_receive+0x5f0>)
 801558e:	f240 5297 	movw	r2, #1431	@ 0x597
 8015592:	4916      	ldr	r1, [pc, #88]	@ (80155ec <tcp_receive+0x600>)
 8015594:	4813      	ldr	r0, [pc, #76]	@ (80155e4 <tcp_receive+0x5f8>)
 8015596:	f005 fc0d 	bl	801adb4 <iprintf>
      inseg.len -= off;
 801559a:	4b0f      	ldr	r3, [pc, #60]	@ (80155d8 <tcp_receive+0x5ec>)
 801559c:	891a      	ldrh	r2, [r3, #8]
 801559e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80155a2:	1ad3      	subs	r3, r2, r3
 80155a4:	b29a      	uxth	r2, r3
 80155a6:	4b0c      	ldr	r3, [pc, #48]	@ (80155d8 <tcp_receive+0x5ec>)
 80155a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80155aa:	4b0b      	ldr	r3, [pc, #44]	@ (80155d8 <tcp_receive+0x5ec>)
 80155ac:	685b      	ldr	r3, [r3, #4]
 80155ae:	891a      	ldrh	r2, [r3, #8]
 80155b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80155b4:	1ad3      	subs	r3, r2, r3
 80155b6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80155b8:	e02a      	b.n	8015610 <tcp_receive+0x624>
 80155ba:	bf00      	nop
 80155bc:	0801d440 	.word	0x0801d440
 80155c0:	0801d448 	.word	0x0801d448
 80155c4:	24014bf0 	.word	0x24014bf0
 80155c8:	24014bec 	.word	0x24014bec
 80155cc:	24014bb0 	.word	0x24014bb0
 80155d0:	24014bf2 	.word	0x24014bf2
 80155d4:	24014be8 	.word	0x24014be8
 80155d8:	24014bc8 	.word	0x24014bc8
 80155dc:	0801d0d8 	.word	0x0801d0d8
 80155e0:	0801d450 	.word	0x0801d450
 80155e4:	0801d124 	.word	0x0801d124
 80155e8:	0801d460 	.word	0x0801d460
 80155ec:	0801d470 	.word	0x0801d470
        off -= p->len;
 80155f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155f2:	895b      	ldrh	r3, [r3, #10]
 80155f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80155f8:	1ad3      	subs	r3, r2, r3
 80155fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80155fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015600:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015602:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015606:	2200      	movs	r2, #0
 8015608:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801560a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015612:	895b      	ldrh	r3, [r3, #10]
 8015614:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015618:	429a      	cmp	r2, r3
 801561a:	d8e9      	bhi.n	80155f0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801561c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015620:	4619      	mov	r1, r3
 8015622:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015624:	f7fc fa6e 	bl	8011b04 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801562c:	4a90      	ldr	r2, [pc, #576]	@ (8015870 <tcp_receive+0x884>)
 801562e:	6013      	str	r3, [r2, #0]
 8015630:	4b90      	ldr	r3, [pc, #576]	@ (8015874 <tcp_receive+0x888>)
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	4a8e      	ldr	r2, [pc, #568]	@ (8015870 <tcp_receive+0x884>)
 8015636:	6812      	ldr	r2, [r2, #0]
 8015638:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801563a:	e00d      	b.n	8015658 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801563c:	4b8c      	ldr	r3, [pc, #560]	@ (8015870 <tcp_receive+0x884>)
 801563e:	681a      	ldr	r2, [r3, #0]
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015644:	1ad3      	subs	r3, r2, r3
 8015646:	2b00      	cmp	r3, #0
 8015648:	da06      	bge.n	8015658 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	8b5b      	ldrh	r3, [r3, #26]
 801564e:	f043 0302 	orr.w	r3, r3, #2
 8015652:	b29a      	uxth	r2, r3
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015658:	4b85      	ldr	r3, [pc, #532]	@ (8015870 <tcp_receive+0x884>)
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015660:	1ad3      	subs	r3, r2, r3
 8015662:	2b00      	cmp	r3, #0
 8015664:	f2c0 8427 	blt.w	8015eb6 <tcp_receive+0xeca>
 8015668:	4b81      	ldr	r3, [pc, #516]	@ (8015870 <tcp_receive+0x884>)
 801566a:	681a      	ldr	r2, [r3, #0]
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015670:	6879      	ldr	r1, [r7, #4]
 8015672:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015674:	440b      	add	r3, r1
 8015676:	1ad3      	subs	r3, r2, r3
 8015678:	3301      	adds	r3, #1
 801567a:	2b00      	cmp	r3, #0
 801567c:	f300 841b 	bgt.w	8015eb6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015684:	4b7a      	ldr	r3, [pc, #488]	@ (8015870 <tcp_receive+0x884>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	429a      	cmp	r2, r3
 801568a:	f040 8298 	bne.w	8015bbe <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801568e:	4b79      	ldr	r3, [pc, #484]	@ (8015874 <tcp_receive+0x888>)
 8015690:	891c      	ldrh	r4, [r3, #8]
 8015692:	4b78      	ldr	r3, [pc, #480]	@ (8015874 <tcp_receive+0x888>)
 8015694:	68db      	ldr	r3, [r3, #12]
 8015696:	899b      	ldrh	r3, [r3, #12]
 8015698:	b29b      	uxth	r3, r3
 801569a:	4618      	mov	r0, r3
 801569c:	f7fa fe06 	bl	80102ac <lwip_htons>
 80156a0:	4603      	mov	r3, r0
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	f003 0303 	and.w	r3, r3, #3
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d001      	beq.n	80156b0 <tcp_receive+0x6c4>
 80156ac:	2301      	movs	r3, #1
 80156ae:	e000      	b.n	80156b2 <tcp_receive+0x6c6>
 80156b0:	2300      	movs	r3, #0
 80156b2:	4423      	add	r3, r4
 80156b4:	b29a      	uxth	r2, r3
 80156b6:	4b70      	ldr	r3, [pc, #448]	@ (8015878 <tcp_receive+0x88c>)
 80156b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80156be:	4b6e      	ldr	r3, [pc, #440]	@ (8015878 <tcp_receive+0x88c>)
 80156c0:	881b      	ldrh	r3, [r3, #0]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d274      	bcs.n	80157b0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80156c6:	4b6b      	ldr	r3, [pc, #428]	@ (8015874 <tcp_receive+0x888>)
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	899b      	ldrh	r3, [r3, #12]
 80156cc:	b29b      	uxth	r3, r3
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fa fdec 	bl	80102ac <lwip_htons>
 80156d4:	4603      	mov	r3, r0
 80156d6:	b2db      	uxtb	r3, r3
 80156d8:	f003 0301 	and.w	r3, r3, #1
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d01e      	beq.n	801571e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80156e0:	4b64      	ldr	r3, [pc, #400]	@ (8015874 <tcp_receive+0x888>)
 80156e2:	68db      	ldr	r3, [r3, #12]
 80156e4:	899b      	ldrh	r3, [r3, #12]
 80156e6:	b29b      	uxth	r3, r3
 80156e8:	b21b      	sxth	r3, r3
 80156ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80156ee:	b21c      	sxth	r4, r3
 80156f0:	4b60      	ldr	r3, [pc, #384]	@ (8015874 <tcp_receive+0x888>)
 80156f2:	68db      	ldr	r3, [r3, #12]
 80156f4:	899b      	ldrh	r3, [r3, #12]
 80156f6:	b29b      	uxth	r3, r3
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7fa fdd7 	bl	80102ac <lwip_htons>
 80156fe:	4603      	mov	r3, r0
 8015700:	b2db      	uxtb	r3, r3
 8015702:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015706:	b29b      	uxth	r3, r3
 8015708:	4618      	mov	r0, r3
 801570a:	f7fa fdcf 	bl	80102ac <lwip_htons>
 801570e:	4603      	mov	r3, r0
 8015710:	b21b      	sxth	r3, r3
 8015712:	4323      	orrs	r3, r4
 8015714:	b21a      	sxth	r2, r3
 8015716:	4b57      	ldr	r3, [pc, #348]	@ (8015874 <tcp_receive+0x888>)
 8015718:	68db      	ldr	r3, [r3, #12]
 801571a:	b292      	uxth	r2, r2
 801571c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015722:	4b54      	ldr	r3, [pc, #336]	@ (8015874 <tcp_receive+0x888>)
 8015724:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015726:	4b53      	ldr	r3, [pc, #332]	@ (8015874 <tcp_receive+0x888>)
 8015728:	68db      	ldr	r3, [r3, #12]
 801572a:	899b      	ldrh	r3, [r3, #12]
 801572c:	b29b      	uxth	r3, r3
 801572e:	4618      	mov	r0, r3
 8015730:	f7fa fdbc 	bl	80102ac <lwip_htons>
 8015734:	4603      	mov	r3, r0
 8015736:	b2db      	uxtb	r3, r3
 8015738:	f003 0302 	and.w	r3, r3, #2
 801573c:	2b00      	cmp	r3, #0
 801573e:	d005      	beq.n	801574c <tcp_receive+0x760>
            inseg.len -= 1;
 8015740:	4b4c      	ldr	r3, [pc, #304]	@ (8015874 <tcp_receive+0x888>)
 8015742:	891b      	ldrh	r3, [r3, #8]
 8015744:	3b01      	subs	r3, #1
 8015746:	b29a      	uxth	r2, r3
 8015748:	4b4a      	ldr	r3, [pc, #296]	@ (8015874 <tcp_receive+0x888>)
 801574a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801574c:	4b49      	ldr	r3, [pc, #292]	@ (8015874 <tcp_receive+0x888>)
 801574e:	685b      	ldr	r3, [r3, #4]
 8015750:	4a48      	ldr	r2, [pc, #288]	@ (8015874 <tcp_receive+0x888>)
 8015752:	8912      	ldrh	r2, [r2, #8]
 8015754:	4611      	mov	r1, r2
 8015756:	4618      	mov	r0, r3
 8015758:	f7fc f8d4 	bl	8011904 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801575c:	4b45      	ldr	r3, [pc, #276]	@ (8015874 <tcp_receive+0x888>)
 801575e:	891c      	ldrh	r4, [r3, #8]
 8015760:	4b44      	ldr	r3, [pc, #272]	@ (8015874 <tcp_receive+0x888>)
 8015762:	68db      	ldr	r3, [r3, #12]
 8015764:	899b      	ldrh	r3, [r3, #12]
 8015766:	b29b      	uxth	r3, r3
 8015768:	4618      	mov	r0, r3
 801576a:	f7fa fd9f 	bl	80102ac <lwip_htons>
 801576e:	4603      	mov	r3, r0
 8015770:	b2db      	uxtb	r3, r3
 8015772:	f003 0303 	and.w	r3, r3, #3
 8015776:	2b00      	cmp	r3, #0
 8015778:	d001      	beq.n	801577e <tcp_receive+0x792>
 801577a:	2301      	movs	r3, #1
 801577c:	e000      	b.n	8015780 <tcp_receive+0x794>
 801577e:	2300      	movs	r3, #0
 8015780:	4423      	add	r3, r4
 8015782:	b29a      	uxth	r2, r3
 8015784:	4b3c      	ldr	r3, [pc, #240]	@ (8015878 <tcp_receive+0x88c>)
 8015786:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015788:	4b3b      	ldr	r3, [pc, #236]	@ (8015878 <tcp_receive+0x88c>)
 801578a:	881b      	ldrh	r3, [r3, #0]
 801578c:	461a      	mov	r2, r3
 801578e:	4b38      	ldr	r3, [pc, #224]	@ (8015870 <tcp_receive+0x884>)
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	441a      	add	r2, r3
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015798:	6879      	ldr	r1, [r7, #4]
 801579a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801579c:	440b      	add	r3, r1
 801579e:	429a      	cmp	r2, r3
 80157a0:	d006      	beq.n	80157b0 <tcp_receive+0x7c4>
 80157a2:	4b36      	ldr	r3, [pc, #216]	@ (801587c <tcp_receive+0x890>)
 80157a4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80157a8:	4935      	ldr	r1, [pc, #212]	@ (8015880 <tcp_receive+0x894>)
 80157aa:	4836      	ldr	r0, [pc, #216]	@ (8015884 <tcp_receive+0x898>)
 80157ac:	f005 fb02 	bl	801adb4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	f000 80e6 	beq.w	8015986 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80157ba:	4b2e      	ldr	r3, [pc, #184]	@ (8015874 <tcp_receive+0x888>)
 80157bc:	68db      	ldr	r3, [r3, #12]
 80157be:	899b      	ldrh	r3, [r3, #12]
 80157c0:	b29b      	uxth	r3, r3
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7fa fd72 	bl	80102ac <lwip_htons>
 80157c8:	4603      	mov	r3, r0
 80157ca:	b2db      	uxtb	r3, r3
 80157cc:	f003 0301 	and.w	r3, r3, #1
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d010      	beq.n	80157f6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80157d4:	e00a      	b.n	80157ec <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157da:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157e0:	681a      	ldr	r2, [r3, #0]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80157e6:	68f8      	ldr	r0, [r7, #12]
 80157e8:	f7fd fd93 	bl	8013312 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d1f0      	bne.n	80157d6 <tcp_receive+0x7ea>
 80157f4:	e0c7      	b.n	8015986 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80157fc:	e051      	b.n	80158a2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80157fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015800:	68db      	ldr	r3, [r3, #12]
 8015802:	899b      	ldrh	r3, [r3, #12]
 8015804:	b29b      	uxth	r3, r3
 8015806:	4618      	mov	r0, r3
 8015808:	f7fa fd50 	bl	80102ac <lwip_htons>
 801580c:	4603      	mov	r3, r0
 801580e:	b2db      	uxtb	r3, r3
 8015810:	f003 0301 	and.w	r3, r3, #1
 8015814:	2b00      	cmp	r3, #0
 8015816:	d03c      	beq.n	8015892 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015818:	4b16      	ldr	r3, [pc, #88]	@ (8015874 <tcp_receive+0x888>)
 801581a:	68db      	ldr	r3, [r3, #12]
 801581c:	899b      	ldrh	r3, [r3, #12]
 801581e:	b29b      	uxth	r3, r3
 8015820:	4618      	mov	r0, r3
 8015822:	f7fa fd43 	bl	80102ac <lwip_htons>
 8015826:	4603      	mov	r3, r0
 8015828:	b2db      	uxtb	r3, r3
 801582a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801582e:	2b00      	cmp	r3, #0
 8015830:	d12f      	bne.n	8015892 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015832:	4b10      	ldr	r3, [pc, #64]	@ (8015874 <tcp_receive+0x888>)
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	899b      	ldrh	r3, [r3, #12]
 8015838:	b29c      	uxth	r4, r3
 801583a:	2001      	movs	r0, #1
 801583c:	f7fa fd36 	bl	80102ac <lwip_htons>
 8015840:	4603      	mov	r3, r0
 8015842:	461a      	mov	r2, r3
 8015844:	4b0b      	ldr	r3, [pc, #44]	@ (8015874 <tcp_receive+0x888>)
 8015846:	68db      	ldr	r3, [r3, #12]
 8015848:	4322      	orrs	r2, r4
 801584a:	b292      	uxth	r2, r2
 801584c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801584e:	4b09      	ldr	r3, [pc, #36]	@ (8015874 <tcp_receive+0x888>)
 8015850:	891c      	ldrh	r4, [r3, #8]
 8015852:	4b08      	ldr	r3, [pc, #32]	@ (8015874 <tcp_receive+0x888>)
 8015854:	68db      	ldr	r3, [r3, #12]
 8015856:	899b      	ldrh	r3, [r3, #12]
 8015858:	b29b      	uxth	r3, r3
 801585a:	4618      	mov	r0, r3
 801585c:	f7fa fd26 	bl	80102ac <lwip_htons>
 8015860:	4603      	mov	r3, r0
 8015862:	b2db      	uxtb	r3, r3
 8015864:	f003 0303 	and.w	r3, r3, #3
 8015868:	2b00      	cmp	r3, #0
 801586a:	d00d      	beq.n	8015888 <tcp_receive+0x89c>
 801586c:	2301      	movs	r3, #1
 801586e:	e00c      	b.n	801588a <tcp_receive+0x89e>
 8015870:	24014be8 	.word	0x24014be8
 8015874:	24014bc8 	.word	0x24014bc8
 8015878:	24014bf2 	.word	0x24014bf2
 801587c:	0801d0d8 	.word	0x0801d0d8
 8015880:	0801d480 	.word	0x0801d480
 8015884:	0801d124 	.word	0x0801d124
 8015888:	2300      	movs	r3, #0
 801588a:	4423      	add	r3, r4
 801588c:	b29a      	uxth	r2, r3
 801588e:	4b98      	ldr	r3, [pc, #608]	@ (8015af0 <tcp_receive+0xb04>)
 8015890:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015894:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801589c:	6938      	ldr	r0, [r7, #16]
 801589e:	f7fd fd38 	bl	8013312 <tcp_seg_free>
            while (next &&
 80158a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d00e      	beq.n	80158c6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80158a8:	4b91      	ldr	r3, [pc, #580]	@ (8015af0 <tcp_receive+0xb04>)
 80158aa:	881b      	ldrh	r3, [r3, #0]
 80158ac:	461a      	mov	r2, r3
 80158ae:	4b91      	ldr	r3, [pc, #580]	@ (8015af4 <tcp_receive+0xb08>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	441a      	add	r2, r3
 80158b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158b6:	68db      	ldr	r3, [r3, #12]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80158bc:	8909      	ldrh	r1, [r1, #8]
 80158be:	440b      	add	r3, r1
 80158c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	da9b      	bge.n	80157fe <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80158c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d059      	beq.n	8015980 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80158cc:	4b88      	ldr	r3, [pc, #544]	@ (8015af0 <tcp_receive+0xb04>)
 80158ce:	881b      	ldrh	r3, [r3, #0]
 80158d0:	461a      	mov	r2, r3
 80158d2:	4b88      	ldr	r3, [pc, #544]	@ (8015af4 <tcp_receive+0xb08>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	441a      	add	r2, r3
 80158d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158da:	68db      	ldr	r3, [r3, #12]
 80158dc:	685b      	ldr	r3, [r3, #4]
 80158de:	1ad3      	subs	r3, r2, r3
            if (next &&
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	dd4d      	ble.n	8015980 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80158e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158e6:	68db      	ldr	r3, [r3, #12]
 80158e8:	685b      	ldr	r3, [r3, #4]
 80158ea:	b29a      	uxth	r2, r3
 80158ec:	4b81      	ldr	r3, [pc, #516]	@ (8015af4 <tcp_receive+0xb08>)
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	1ad3      	subs	r3, r2, r3
 80158f4:	b29a      	uxth	r2, r3
 80158f6:	4b80      	ldr	r3, [pc, #512]	@ (8015af8 <tcp_receive+0xb0c>)
 80158f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80158fa:	4b7f      	ldr	r3, [pc, #508]	@ (8015af8 <tcp_receive+0xb0c>)
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	899b      	ldrh	r3, [r3, #12]
 8015900:	b29b      	uxth	r3, r3
 8015902:	4618      	mov	r0, r3
 8015904:	f7fa fcd2 	bl	80102ac <lwip_htons>
 8015908:	4603      	mov	r3, r0
 801590a:	b2db      	uxtb	r3, r3
 801590c:	f003 0302 	and.w	r3, r3, #2
 8015910:	2b00      	cmp	r3, #0
 8015912:	d005      	beq.n	8015920 <tcp_receive+0x934>
                inseg.len -= 1;
 8015914:	4b78      	ldr	r3, [pc, #480]	@ (8015af8 <tcp_receive+0xb0c>)
 8015916:	891b      	ldrh	r3, [r3, #8]
 8015918:	3b01      	subs	r3, #1
 801591a:	b29a      	uxth	r2, r3
 801591c:	4b76      	ldr	r3, [pc, #472]	@ (8015af8 <tcp_receive+0xb0c>)
 801591e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015920:	4b75      	ldr	r3, [pc, #468]	@ (8015af8 <tcp_receive+0xb0c>)
 8015922:	685b      	ldr	r3, [r3, #4]
 8015924:	4a74      	ldr	r2, [pc, #464]	@ (8015af8 <tcp_receive+0xb0c>)
 8015926:	8912      	ldrh	r2, [r2, #8]
 8015928:	4611      	mov	r1, r2
 801592a:	4618      	mov	r0, r3
 801592c:	f7fb ffea 	bl	8011904 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015930:	4b71      	ldr	r3, [pc, #452]	@ (8015af8 <tcp_receive+0xb0c>)
 8015932:	891c      	ldrh	r4, [r3, #8]
 8015934:	4b70      	ldr	r3, [pc, #448]	@ (8015af8 <tcp_receive+0xb0c>)
 8015936:	68db      	ldr	r3, [r3, #12]
 8015938:	899b      	ldrh	r3, [r3, #12]
 801593a:	b29b      	uxth	r3, r3
 801593c:	4618      	mov	r0, r3
 801593e:	f7fa fcb5 	bl	80102ac <lwip_htons>
 8015942:	4603      	mov	r3, r0
 8015944:	b2db      	uxtb	r3, r3
 8015946:	f003 0303 	and.w	r3, r3, #3
 801594a:	2b00      	cmp	r3, #0
 801594c:	d001      	beq.n	8015952 <tcp_receive+0x966>
 801594e:	2301      	movs	r3, #1
 8015950:	e000      	b.n	8015954 <tcp_receive+0x968>
 8015952:	2300      	movs	r3, #0
 8015954:	4423      	add	r3, r4
 8015956:	b29a      	uxth	r2, r3
 8015958:	4b65      	ldr	r3, [pc, #404]	@ (8015af0 <tcp_receive+0xb04>)
 801595a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801595c:	4b64      	ldr	r3, [pc, #400]	@ (8015af0 <tcp_receive+0xb04>)
 801595e:	881b      	ldrh	r3, [r3, #0]
 8015960:	461a      	mov	r2, r3
 8015962:	4b64      	ldr	r3, [pc, #400]	@ (8015af4 <tcp_receive+0xb08>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	441a      	add	r2, r3
 8015968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801596a:	68db      	ldr	r3, [r3, #12]
 801596c:	685b      	ldr	r3, [r3, #4]
 801596e:	429a      	cmp	r2, r3
 8015970:	d006      	beq.n	8015980 <tcp_receive+0x994>
 8015972:	4b62      	ldr	r3, [pc, #392]	@ (8015afc <tcp_receive+0xb10>)
 8015974:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015978:	4961      	ldr	r1, [pc, #388]	@ (8015b00 <tcp_receive+0xb14>)
 801597a:	4862      	ldr	r0, [pc, #392]	@ (8015b04 <tcp_receive+0xb18>)
 801597c:	f005 fa1a 	bl	801adb4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015984:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015986:	4b5a      	ldr	r3, [pc, #360]	@ (8015af0 <tcp_receive+0xb04>)
 8015988:	881b      	ldrh	r3, [r3, #0]
 801598a:	461a      	mov	r2, r3
 801598c:	4b59      	ldr	r3, [pc, #356]	@ (8015af4 <tcp_receive+0xb08>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	441a      	add	r2, r3
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801599a:	4b55      	ldr	r3, [pc, #340]	@ (8015af0 <tcp_receive+0xb04>)
 801599c:	881b      	ldrh	r3, [r3, #0]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d206      	bcs.n	80159b0 <tcp_receive+0x9c4>
 80159a2:	4b56      	ldr	r3, [pc, #344]	@ (8015afc <tcp_receive+0xb10>)
 80159a4:	f240 6207 	movw	r2, #1543	@ 0x607
 80159a8:	4957      	ldr	r1, [pc, #348]	@ (8015b08 <tcp_receive+0xb1c>)
 80159aa:	4856      	ldr	r0, [pc, #344]	@ (8015b04 <tcp_receive+0xb18>)
 80159ac:	f005 fa02 	bl	801adb4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80159b4:	4b4e      	ldr	r3, [pc, #312]	@ (8015af0 <tcp_receive+0xb04>)
 80159b6:	881b      	ldrh	r3, [r3, #0]
 80159b8:	1ad3      	subs	r3, r2, r3
 80159ba:	b29a      	uxth	r2, r3
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f7fc ffc1 	bl	8012948 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80159c6:	4b4c      	ldr	r3, [pc, #304]	@ (8015af8 <tcp_receive+0xb0c>)
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	891b      	ldrh	r3, [r3, #8]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d006      	beq.n	80159de <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80159d0:	4b49      	ldr	r3, [pc, #292]	@ (8015af8 <tcp_receive+0xb0c>)
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	4a4d      	ldr	r2, [pc, #308]	@ (8015b0c <tcp_receive+0xb20>)
 80159d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80159d8:	4b47      	ldr	r3, [pc, #284]	@ (8015af8 <tcp_receive+0xb0c>)
 80159da:	2200      	movs	r2, #0
 80159dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80159de:	4b46      	ldr	r3, [pc, #280]	@ (8015af8 <tcp_receive+0xb0c>)
 80159e0:	68db      	ldr	r3, [r3, #12]
 80159e2:	899b      	ldrh	r3, [r3, #12]
 80159e4:	b29b      	uxth	r3, r3
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7fa fc60 	bl	80102ac <lwip_htons>
 80159ec:	4603      	mov	r3, r0
 80159ee:	b2db      	uxtb	r3, r3
 80159f0:	f003 0301 	and.w	r3, r3, #1
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	f000 80b8 	beq.w	8015b6a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80159fa:	4b45      	ldr	r3, [pc, #276]	@ (8015b10 <tcp_receive+0xb24>)
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	f043 0320 	orr.w	r3, r3, #32
 8015a02:	b2da      	uxtb	r2, r3
 8015a04:	4b42      	ldr	r3, [pc, #264]	@ (8015b10 <tcp_receive+0xb24>)
 8015a06:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015a08:	e0af      	b.n	8015b6a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a0e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a14:	68db      	ldr	r3, [r3, #12]
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	4a36      	ldr	r2, [pc, #216]	@ (8015af4 <tcp_receive+0xb08>)
 8015a1a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	891b      	ldrh	r3, [r3, #8]
 8015a20:	461c      	mov	r4, r3
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	68db      	ldr	r3, [r3, #12]
 8015a26:	899b      	ldrh	r3, [r3, #12]
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7fa fc3e 	bl	80102ac <lwip_htons>
 8015a30:	4603      	mov	r3, r0
 8015a32:	b2db      	uxtb	r3, r3
 8015a34:	f003 0303 	and.w	r3, r3, #3
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d001      	beq.n	8015a40 <tcp_receive+0xa54>
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	e000      	b.n	8015a42 <tcp_receive+0xa56>
 8015a40:	2300      	movs	r3, #0
 8015a42:	191a      	adds	r2, r3, r4
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a48:	441a      	add	r2, r3
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a52:	461c      	mov	r4, r3
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	891b      	ldrh	r3, [r3, #8]
 8015a58:	461d      	mov	r5, r3
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	68db      	ldr	r3, [r3, #12]
 8015a5e:	899b      	ldrh	r3, [r3, #12]
 8015a60:	b29b      	uxth	r3, r3
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7fa fc22 	bl	80102ac <lwip_htons>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	b2db      	uxtb	r3, r3
 8015a6c:	f003 0303 	and.w	r3, r3, #3
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d001      	beq.n	8015a78 <tcp_receive+0xa8c>
 8015a74:	2301      	movs	r3, #1
 8015a76:	e000      	b.n	8015a7a <tcp_receive+0xa8e>
 8015a78:	2300      	movs	r3, #0
 8015a7a:	442b      	add	r3, r5
 8015a7c:	429c      	cmp	r4, r3
 8015a7e:	d206      	bcs.n	8015a8e <tcp_receive+0xaa2>
 8015a80:	4b1e      	ldr	r3, [pc, #120]	@ (8015afc <tcp_receive+0xb10>)
 8015a82:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015a86:	4923      	ldr	r1, [pc, #140]	@ (8015b14 <tcp_receive+0xb28>)
 8015a88:	481e      	ldr	r0, [pc, #120]	@ (8015b04 <tcp_receive+0xb18>)
 8015a8a:	f005 f993 	bl	801adb4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	891b      	ldrh	r3, [r3, #8]
 8015a92:	461c      	mov	r4, r3
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	68db      	ldr	r3, [r3, #12]
 8015a98:	899b      	ldrh	r3, [r3, #12]
 8015a9a:	b29b      	uxth	r3, r3
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7fa fc05 	bl	80102ac <lwip_htons>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	b2db      	uxtb	r3, r3
 8015aa6:	f003 0303 	and.w	r3, r3, #3
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d001      	beq.n	8015ab2 <tcp_receive+0xac6>
 8015aae:	2301      	movs	r3, #1
 8015ab0:	e000      	b.n	8015ab4 <tcp_receive+0xac8>
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	1919      	adds	r1, r3, r4
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015aba:	b28b      	uxth	r3, r1
 8015abc:	1ad3      	subs	r3, r2, r3
 8015abe:	b29a      	uxth	r2, r3
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	f7fc ff3f 	bl	8012948 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	685b      	ldr	r3, [r3, #4]
 8015ace:	891b      	ldrh	r3, [r3, #8]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d028      	beq.n	8015b26 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8015b0c <tcp_receive+0xb20>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d01d      	beq.n	8015b18 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015adc:	4b0b      	ldr	r3, [pc, #44]	@ (8015b0c <tcp_receive+0xb20>)
 8015ade:	681a      	ldr	r2, [r3, #0]
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	685b      	ldr	r3, [r3, #4]
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	4610      	mov	r0, r2
 8015ae8:	f7fc f960 	bl	8011dac <pbuf_cat>
 8015aec:	e018      	b.n	8015b20 <tcp_receive+0xb34>
 8015aee:	bf00      	nop
 8015af0:	24014bf2 	.word	0x24014bf2
 8015af4:	24014be8 	.word	0x24014be8
 8015af8:	24014bc8 	.word	0x24014bc8
 8015afc:	0801d0d8 	.word	0x0801d0d8
 8015b00:	0801d4b8 	.word	0x0801d4b8
 8015b04:	0801d124 	.word	0x0801d124
 8015b08:	0801d4f4 	.word	0x0801d4f4
 8015b0c:	24014bf8 	.word	0x24014bf8
 8015b10:	24014bf5 	.word	0x24014bf5
 8015b14:	0801d514 	.word	0x0801d514
            } else {
              recv_data = cseg->p;
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	685b      	ldr	r3, [r3, #4]
 8015b1c:	4a70      	ldr	r2, [pc, #448]	@ (8015ce0 <tcp_receive+0xcf4>)
 8015b1e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	2200      	movs	r2, #0
 8015b24:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	68db      	ldr	r3, [r3, #12]
 8015b2a:	899b      	ldrh	r3, [r3, #12]
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f7fa fbbc 	bl	80102ac <lwip_htons>
 8015b34:	4603      	mov	r3, r0
 8015b36:	b2db      	uxtb	r3, r3
 8015b38:	f003 0301 	and.w	r3, r3, #1
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d00d      	beq.n	8015b5c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015b40:	4b68      	ldr	r3, [pc, #416]	@ (8015ce4 <tcp_receive+0xcf8>)
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	f043 0320 	orr.w	r3, r3, #32
 8015b48:	b2da      	uxtb	r2, r3
 8015b4a:	4b66      	ldr	r3, [pc, #408]	@ (8015ce4 <tcp_receive+0xcf8>)
 8015b4c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	7d1b      	ldrb	r3, [r3, #20]
 8015b52:	2b04      	cmp	r3, #4
 8015b54:	d102      	bne.n	8015b5c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2207      	movs	r2, #7
 8015b5a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015b64:	68b8      	ldr	r0, [r7, #8]
 8015b66:	f7fd fbd4 	bl	8013312 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d008      	beq.n	8015b84 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b76:	68db      	ldr	r3, [r3, #12]
 8015b78:	685a      	ldr	r2, [r3, #4]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	f43f af43 	beq.w	8015a0a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	8b5b      	ldrh	r3, [r3, #26]
 8015b88:	f003 0301 	and.w	r3, r3, #1
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d00e      	beq.n	8015bae <tcp_receive+0xbc2>
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	8b5b      	ldrh	r3, [r3, #26]
 8015b94:	f023 0301 	bic.w	r3, r3, #1
 8015b98:	b29a      	uxth	r2, r3
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	835a      	strh	r2, [r3, #26]
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	8b5b      	ldrh	r3, [r3, #26]
 8015ba2:	f043 0302 	orr.w	r3, r3, #2
 8015ba6:	b29a      	uxth	r2, r3
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015bac:	e187      	b.n	8015ebe <tcp_receive+0xed2>
        tcp_ack(pcb);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	8b5b      	ldrh	r3, [r3, #26]
 8015bb2:	f043 0301 	orr.w	r3, r3, #1
 8015bb6:	b29a      	uxth	r2, r3
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015bbc:	e17f      	b.n	8015ebe <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d106      	bne.n	8015bd4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015bc6:	4848      	ldr	r0, [pc, #288]	@ (8015ce8 <tcp_receive+0xcfc>)
 8015bc8:	f7fd fbbc 	bl	8013344 <tcp_seg_copy>
 8015bcc:	4602      	mov	r2, r0
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	675a      	str	r2, [r3, #116]	@ 0x74
 8015bd2:	e16c      	b.n	8015eae <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015bde:	e156      	b.n	8015e8e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8015be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015be2:	68db      	ldr	r3, [r3, #12]
 8015be4:	685a      	ldr	r2, [r3, #4]
 8015be6:	4b41      	ldr	r3, [pc, #260]	@ (8015cec <tcp_receive+0xd00>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d11d      	bne.n	8015c2a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015bee:	4b3e      	ldr	r3, [pc, #248]	@ (8015ce8 <tcp_receive+0xcfc>)
 8015bf0:	891a      	ldrh	r2, [r3, #8]
 8015bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bf4:	891b      	ldrh	r3, [r3, #8]
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	f240 814e 	bls.w	8015e98 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015bfc:	483a      	ldr	r0, [pc, #232]	@ (8015ce8 <tcp_receive+0xcfc>)
 8015bfe:	f7fd fba1 	bl	8013344 <tcp_seg_copy>
 8015c02:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	f000 8148 	beq.w	8015e9c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8015c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d003      	beq.n	8015c1a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c14:	697a      	ldr	r2, [r7, #20]
 8015c16:	601a      	str	r2, [r3, #0]
 8015c18:	e002      	b.n	8015c20 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	697a      	ldr	r2, [r7, #20]
 8015c1e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015c20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015c22:	6978      	ldr	r0, [r7, #20]
 8015c24:	f7ff f8de 	bl	8014de4 <tcp_oos_insert_segment>
                }
                break;
 8015c28:	e138      	b.n	8015e9c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d117      	bne.n	8015c60 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015c30:	4b2e      	ldr	r3, [pc, #184]	@ (8015cec <tcp_receive+0xd00>)
 8015c32:	681a      	ldr	r2, [r3, #0]
 8015c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c36:	68db      	ldr	r3, [r3, #12]
 8015c38:	685b      	ldr	r3, [r3, #4]
 8015c3a:	1ad3      	subs	r3, r2, r3
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	da57      	bge.n	8015cf0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015c40:	4829      	ldr	r0, [pc, #164]	@ (8015ce8 <tcp_receive+0xcfc>)
 8015c42:	f7fd fb7f 	bl	8013344 <tcp_seg_copy>
 8015c46:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015c48:	69bb      	ldr	r3, [r7, #24]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	f000 8128 	beq.w	8015ea0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	69ba      	ldr	r2, [r7, #24]
 8015c54:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015c56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015c58:	69b8      	ldr	r0, [r7, #24]
 8015c5a:	f7ff f8c3 	bl	8014de4 <tcp_oos_insert_segment>
                  }
                  break;
 8015c5e:	e11f      	b.n	8015ea0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015c60:	4b22      	ldr	r3, [pc, #136]	@ (8015cec <tcp_receive+0xd00>)
 8015c62:	681a      	ldr	r2, [r3, #0]
 8015c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	685b      	ldr	r3, [r3, #4]
 8015c6a:	1ad3      	subs	r3, r2, r3
 8015c6c:	3b01      	subs	r3, #1
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	db3e      	blt.n	8015cf0 <tcp_receive+0xd04>
 8015c72:	4b1e      	ldr	r3, [pc, #120]	@ (8015cec <tcp_receive+0xd00>)
 8015c74:	681a      	ldr	r2, [r3, #0]
 8015c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c78:	68db      	ldr	r3, [r3, #12]
 8015c7a:	685b      	ldr	r3, [r3, #4]
 8015c7c:	1ad3      	subs	r3, r2, r3
 8015c7e:	3301      	adds	r3, #1
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	dc35      	bgt.n	8015cf0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015c84:	4818      	ldr	r0, [pc, #96]	@ (8015ce8 <tcp_receive+0xcfc>)
 8015c86:	f7fd fb5d 	bl	8013344 <tcp_seg_copy>
 8015c8a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015c8c:	69fb      	ldr	r3, [r7, #28]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	f000 8108 	beq.w	8015ea4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c96:	68db      	ldr	r3, [r3, #12]
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015c9c:	8912      	ldrh	r2, [r2, #8]
 8015c9e:	441a      	add	r2, r3
 8015ca0:	4b12      	ldr	r3, [pc, #72]	@ (8015cec <tcp_receive+0xd00>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	1ad3      	subs	r3, r2, r3
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	dd12      	ble.n	8015cd0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015caa:	4b10      	ldr	r3, [pc, #64]	@ (8015cec <tcp_receive+0xd00>)
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	b29a      	uxth	r2, r3
 8015cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cb2:	68db      	ldr	r3, [r3, #12]
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	b29b      	uxth	r3, r3
 8015cb8:	1ad3      	subs	r3, r2, r3
 8015cba:	b29a      	uxth	r2, r3
 8015cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cbe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cc2:	685a      	ldr	r2, [r3, #4]
 8015cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cc6:	891b      	ldrh	r3, [r3, #8]
 8015cc8:	4619      	mov	r1, r3
 8015cca:	4610      	mov	r0, r2
 8015ccc:	f7fb fe1a 	bl	8011904 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cd2:	69fa      	ldr	r2, [r7, #28]
 8015cd4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015cd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015cd8:	69f8      	ldr	r0, [r7, #28]
 8015cda:	f7ff f883 	bl	8014de4 <tcp_oos_insert_segment>
                  }
                  break;
 8015cde:	e0e1      	b.n	8015ea4 <tcp_receive+0xeb8>
 8015ce0:	24014bf8 	.word	0x24014bf8
 8015ce4:	24014bf5 	.word	0x24014bf5
 8015ce8:	24014bc8 	.word	0x24014bc8
 8015cec:	24014be8 	.word	0x24014be8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cf2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	f040 80c5 	bne.w	8015e88 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8015efc <tcp_receive+0xf10>)
 8015d00:	681a      	ldr	r2, [r3, #0]
 8015d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d04:	68db      	ldr	r3, [r3, #12]
 8015d06:	685b      	ldr	r3, [r3, #4]
 8015d08:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	f340 80bc 	ble.w	8015e88 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d12:	68db      	ldr	r3, [r3, #12]
 8015d14:	899b      	ldrh	r3, [r3, #12]
 8015d16:	b29b      	uxth	r3, r3
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7fa fac7 	bl	80102ac <lwip_htons>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	b2db      	uxtb	r3, r3
 8015d22:	f003 0301 	and.w	r3, r3, #1
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	f040 80be 	bne.w	8015ea8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015d2c:	4874      	ldr	r0, [pc, #464]	@ (8015f00 <tcp_receive+0xf14>)
 8015d2e:	f7fd fb09 	bl	8013344 <tcp_seg_copy>
 8015d32:	4602      	mov	r2, r0
 8015d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	f000 80b5 	beq.w	8015eac <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d44:	68db      	ldr	r3, [r3, #12]
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015d4a:	8912      	ldrh	r2, [r2, #8]
 8015d4c:	441a      	add	r2, r3
 8015d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8015efc <tcp_receive+0xf10>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	1ad3      	subs	r3, r2, r3
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	dd12      	ble.n	8015d7e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015d58:	4b68      	ldr	r3, [pc, #416]	@ (8015efc <tcp_receive+0xf10>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	b29a      	uxth	r2, r3
 8015d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d60:	68db      	ldr	r3, [r3, #12]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	1ad3      	subs	r3, r2, r3
 8015d68:	b29a      	uxth	r2, r3
 8015d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d70:	685a      	ldr	r2, [r3, #4]
 8015d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d74:	891b      	ldrh	r3, [r3, #8]
 8015d76:	4619      	mov	r1, r3
 8015d78:	4610      	mov	r0, r2
 8015d7a:	f7fb fdc3 	bl	8011904 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015d7e:	4b61      	ldr	r3, [pc, #388]	@ (8015f04 <tcp_receive+0xf18>)
 8015d80:	881b      	ldrh	r3, [r3, #0]
 8015d82:	461a      	mov	r2, r3
 8015d84:	4b5d      	ldr	r3, [pc, #372]	@ (8015efc <tcp_receive+0xf10>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	441a      	add	r2, r3
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d8e:	6879      	ldr	r1, [r7, #4]
 8015d90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015d92:	440b      	add	r3, r1
 8015d94:	1ad3      	subs	r3, r2, r3
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f340 8088 	ble.w	8015eac <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	68db      	ldr	r3, [r3, #12]
 8015da2:	899b      	ldrh	r3, [r3, #12]
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	4618      	mov	r0, r3
 8015da8:	f7fa fa80 	bl	80102ac <lwip_htons>
 8015dac:	4603      	mov	r3, r0
 8015dae:	b2db      	uxtb	r3, r3
 8015db0:	f003 0301 	and.w	r3, r3, #1
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d021      	beq.n	8015dfc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	68db      	ldr	r3, [r3, #12]
 8015dbe:	899b      	ldrh	r3, [r3, #12]
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	b21b      	sxth	r3, r3
 8015dc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015dc8:	b21c      	sxth	r4, r3
 8015dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	68db      	ldr	r3, [r3, #12]
 8015dd0:	899b      	ldrh	r3, [r3, #12]
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7fa fa69 	bl	80102ac <lwip_htons>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	b2db      	uxtb	r3, r3
 8015dde:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7fa fa61 	bl	80102ac <lwip_htons>
 8015dea:	4603      	mov	r3, r0
 8015dec:	b21b      	sxth	r3, r3
 8015dee:	4323      	orrs	r3, r4
 8015df0:	b21a      	sxth	r2, r3
 8015df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	68db      	ldr	r3, [r3, #12]
 8015df8:	b292      	uxth	r2, r2
 8015dfa:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e00:	b29a      	uxth	r2, r3
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e06:	4413      	add	r3, r2
 8015e08:	b299      	uxth	r1, r3
 8015e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8015efc <tcp_receive+0xf10>)
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	b29a      	uxth	r2, r3
 8015e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	1a8a      	subs	r2, r1, r2
 8015e16:	b292      	uxth	r2, r2
 8015e18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	685a      	ldr	r2, [r3, #4]
 8015e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	891b      	ldrh	r3, [r3, #8]
 8015e26:	4619      	mov	r1, r3
 8015e28:	4610      	mov	r0, r2
 8015e2a:	f7fb fd6b 	bl	8011904 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	891c      	ldrh	r4, [r3, #8]
 8015e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	68db      	ldr	r3, [r3, #12]
 8015e3a:	899b      	ldrh	r3, [r3, #12]
 8015e3c:	b29b      	uxth	r3, r3
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7fa fa34 	bl	80102ac <lwip_htons>
 8015e44:	4603      	mov	r3, r0
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	f003 0303 	and.w	r3, r3, #3
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d001      	beq.n	8015e54 <tcp_receive+0xe68>
 8015e50:	2301      	movs	r3, #1
 8015e52:	e000      	b.n	8015e56 <tcp_receive+0xe6a>
 8015e54:	2300      	movs	r3, #0
 8015e56:	4423      	add	r3, r4
 8015e58:	b29a      	uxth	r2, r3
 8015e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8015f04 <tcp_receive+0xf18>)
 8015e5c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015e5e:	4b29      	ldr	r3, [pc, #164]	@ (8015f04 <tcp_receive+0xf18>)
 8015e60:	881b      	ldrh	r3, [r3, #0]
 8015e62:	461a      	mov	r2, r3
 8015e64:	4b25      	ldr	r3, [pc, #148]	@ (8015efc <tcp_receive+0xf10>)
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	441a      	add	r2, r3
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e6e:	6879      	ldr	r1, [r7, #4]
 8015e70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015e72:	440b      	add	r3, r1
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d019      	beq.n	8015eac <tcp_receive+0xec0>
 8015e78:	4b23      	ldr	r3, [pc, #140]	@ (8015f08 <tcp_receive+0xf1c>)
 8015e7a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8015e7e:	4923      	ldr	r1, [pc, #140]	@ (8015f0c <tcp_receive+0xf20>)
 8015e80:	4823      	ldr	r0, [pc, #140]	@ (8015f10 <tcp_receive+0xf24>)
 8015e82:	f004 ff97 	bl	801adb4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015e86:	e011      	b.n	8015eac <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	f47f aea5 	bne.w	8015be0 <tcp_receive+0xbf4>
 8015e96:	e00a      	b.n	8015eae <tcp_receive+0xec2>
                break;
 8015e98:	bf00      	nop
 8015e9a:	e008      	b.n	8015eae <tcp_receive+0xec2>
                break;
 8015e9c:	bf00      	nop
 8015e9e:	e006      	b.n	8015eae <tcp_receive+0xec2>
                  break;
 8015ea0:	bf00      	nop
 8015ea2:	e004      	b.n	8015eae <tcp_receive+0xec2>
                  break;
 8015ea4:	bf00      	nop
 8015ea6:	e002      	b.n	8015eae <tcp_receive+0xec2>
                  break;
 8015ea8:	bf00      	nop
 8015eaa:	e000      	b.n	8015eae <tcp_receive+0xec2>
                break;
 8015eac:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f001 fa32 	bl	8017318 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015eb4:	e003      	b.n	8015ebe <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015eb6:	6878      	ldr	r0, [r7, #4]
 8015eb8:	f001 fa2e 	bl	8017318 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015ebc:	e01a      	b.n	8015ef4 <tcp_receive+0xf08>
 8015ebe:	e019      	b.n	8015ef4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8015efc <tcp_receive+0xf10>)
 8015ec2:	681a      	ldr	r2, [r3, #0]
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ec8:	1ad3      	subs	r3, r2, r3
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	db0a      	blt.n	8015ee4 <tcp_receive+0xef8>
 8015ece:	4b0b      	ldr	r3, [pc, #44]	@ (8015efc <tcp_receive+0xf10>)
 8015ed0:	681a      	ldr	r2, [r3, #0]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ed6:	6879      	ldr	r1, [r7, #4]
 8015ed8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015eda:	440b      	add	r3, r1
 8015edc:	1ad3      	subs	r3, r2, r3
 8015ede:	3301      	adds	r3, #1
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	dd07      	ble.n	8015ef4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	8b5b      	ldrh	r3, [r3, #26]
 8015ee8:	f043 0302 	orr.w	r3, r3, #2
 8015eec:	b29a      	uxth	r2, r3
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015ef2:	e7ff      	b.n	8015ef4 <tcp_receive+0xf08>
 8015ef4:	bf00      	nop
 8015ef6:	3750      	adds	r7, #80	@ 0x50
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bdb0      	pop	{r4, r5, r7, pc}
 8015efc:	24014be8 	.word	0x24014be8
 8015f00:	24014bc8 	.word	0x24014bc8
 8015f04:	24014bf2 	.word	0x24014bf2
 8015f08:	0801d0d8 	.word	0x0801d0d8
 8015f0c:	0801d480 	.word	0x0801d480
 8015f10:	0801d124 	.word	0x0801d124

08015f14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015f14:	b480      	push	{r7}
 8015f16:	b083      	sub	sp, #12
 8015f18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015f1a:	4b15      	ldr	r3, [pc, #84]	@ (8015f70 <tcp_get_next_optbyte+0x5c>)
 8015f1c:	881b      	ldrh	r3, [r3, #0]
 8015f1e:	1c5a      	adds	r2, r3, #1
 8015f20:	b291      	uxth	r1, r2
 8015f22:	4a13      	ldr	r2, [pc, #76]	@ (8015f70 <tcp_get_next_optbyte+0x5c>)
 8015f24:	8011      	strh	r1, [r2, #0]
 8015f26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015f28:	4b12      	ldr	r3, [pc, #72]	@ (8015f74 <tcp_get_next_optbyte+0x60>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d004      	beq.n	8015f3a <tcp_get_next_optbyte+0x26>
 8015f30:	4b11      	ldr	r3, [pc, #68]	@ (8015f78 <tcp_get_next_optbyte+0x64>)
 8015f32:	881b      	ldrh	r3, [r3, #0]
 8015f34:	88fa      	ldrh	r2, [r7, #6]
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d208      	bcs.n	8015f4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015f3a:	4b10      	ldr	r3, [pc, #64]	@ (8015f7c <tcp_get_next_optbyte+0x68>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	3314      	adds	r3, #20
 8015f40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015f42:	88fb      	ldrh	r3, [r7, #6]
 8015f44:	683a      	ldr	r2, [r7, #0]
 8015f46:	4413      	add	r3, r2
 8015f48:	781b      	ldrb	r3, [r3, #0]
 8015f4a:	e00b      	b.n	8015f64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015f4c:	88fb      	ldrh	r3, [r7, #6]
 8015f4e:	b2da      	uxtb	r2, r3
 8015f50:	4b09      	ldr	r3, [pc, #36]	@ (8015f78 <tcp_get_next_optbyte+0x64>)
 8015f52:	881b      	ldrh	r3, [r3, #0]
 8015f54:	b2db      	uxtb	r3, r3
 8015f56:	1ad3      	subs	r3, r2, r3
 8015f58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015f5a:	4b06      	ldr	r3, [pc, #24]	@ (8015f74 <tcp_get_next_optbyte+0x60>)
 8015f5c:	681a      	ldr	r2, [r3, #0]
 8015f5e:	797b      	ldrb	r3, [r7, #5]
 8015f60:	4413      	add	r3, r2
 8015f62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	370c      	adds	r7, #12
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6e:	4770      	bx	lr
 8015f70:	24014be4 	.word	0x24014be4
 8015f74:	24014be0 	.word	0x24014be0
 8015f78:	24014bde 	.word	0x24014bde
 8015f7c:	24014bd8 	.word	0x24014bd8

08015f80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b084      	sub	sp, #16
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d106      	bne.n	8015f9c <tcp_parseopt+0x1c>
 8015f8e:	4b33      	ldr	r3, [pc, #204]	@ (801605c <tcp_parseopt+0xdc>)
 8015f90:	f240 727d 	movw	r2, #1917	@ 0x77d
 8015f94:	4932      	ldr	r1, [pc, #200]	@ (8016060 <tcp_parseopt+0xe0>)
 8015f96:	4833      	ldr	r0, [pc, #204]	@ (8016064 <tcp_parseopt+0xe4>)
 8015f98:	f004 ff0c 	bl	801adb4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015f9c:	4b32      	ldr	r3, [pc, #200]	@ (8016068 <tcp_parseopt+0xe8>)
 8015f9e:	881b      	ldrh	r3, [r3, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d057      	beq.n	8016054 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015fa4:	4b31      	ldr	r3, [pc, #196]	@ (801606c <tcp_parseopt+0xec>)
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	801a      	strh	r2, [r3, #0]
 8015faa:	e047      	b.n	801603c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8015fac:	f7ff ffb2 	bl	8015f14 <tcp_get_next_optbyte>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015fb4:	7bfb      	ldrb	r3, [r7, #15]
 8015fb6:	2b02      	cmp	r3, #2
 8015fb8:	d006      	beq.n	8015fc8 <tcp_parseopt+0x48>
 8015fba:	2b02      	cmp	r3, #2
 8015fbc:	dc2b      	bgt.n	8016016 <tcp_parseopt+0x96>
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d043      	beq.n	801604a <tcp_parseopt+0xca>
 8015fc2:	2b01      	cmp	r3, #1
 8015fc4:	d039      	beq.n	801603a <tcp_parseopt+0xba>
 8015fc6:	e026      	b.n	8016016 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015fc8:	f7ff ffa4 	bl	8015f14 <tcp_get_next_optbyte>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	2b04      	cmp	r3, #4
 8015fd0:	d13d      	bne.n	801604e <tcp_parseopt+0xce>
 8015fd2:	4b26      	ldr	r3, [pc, #152]	@ (801606c <tcp_parseopt+0xec>)
 8015fd4:	881b      	ldrh	r3, [r3, #0]
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	4a23      	ldr	r2, [pc, #140]	@ (8016068 <tcp_parseopt+0xe8>)
 8015fda:	8812      	ldrh	r2, [r2, #0]
 8015fdc:	4293      	cmp	r3, r2
 8015fde:	da36      	bge.n	801604e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015fe0:	f7ff ff98 	bl	8015f14 <tcp_get_next_optbyte>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	021b      	lsls	r3, r3, #8
 8015fe8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015fea:	f7ff ff93 	bl	8015f14 <tcp_get_next_optbyte>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	461a      	mov	r2, r3
 8015ff2:	89bb      	ldrh	r3, [r7, #12]
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015ff8:	89bb      	ldrh	r3, [r7, #12]
 8015ffa:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d804      	bhi.n	801600c <tcp_parseopt+0x8c>
 8016002:	89bb      	ldrh	r3, [r7, #12]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d001      	beq.n	801600c <tcp_parseopt+0x8c>
 8016008:	89ba      	ldrh	r2, [r7, #12]
 801600a:	e001      	b.n	8016010 <tcp_parseopt+0x90>
 801600c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8016014:	e012      	b.n	801603c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016016:	f7ff ff7d 	bl	8015f14 <tcp_get_next_optbyte>
 801601a:	4603      	mov	r3, r0
 801601c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801601e:	7afb      	ldrb	r3, [r7, #11]
 8016020:	2b01      	cmp	r3, #1
 8016022:	d916      	bls.n	8016052 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016024:	7afb      	ldrb	r3, [r7, #11]
 8016026:	b29a      	uxth	r2, r3
 8016028:	4b10      	ldr	r3, [pc, #64]	@ (801606c <tcp_parseopt+0xec>)
 801602a:	881b      	ldrh	r3, [r3, #0]
 801602c:	4413      	add	r3, r2
 801602e:	b29b      	uxth	r3, r3
 8016030:	3b02      	subs	r3, #2
 8016032:	b29a      	uxth	r2, r3
 8016034:	4b0d      	ldr	r3, [pc, #52]	@ (801606c <tcp_parseopt+0xec>)
 8016036:	801a      	strh	r2, [r3, #0]
 8016038:	e000      	b.n	801603c <tcp_parseopt+0xbc>
          break;
 801603a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801603c:	4b0b      	ldr	r3, [pc, #44]	@ (801606c <tcp_parseopt+0xec>)
 801603e:	881a      	ldrh	r2, [r3, #0]
 8016040:	4b09      	ldr	r3, [pc, #36]	@ (8016068 <tcp_parseopt+0xe8>)
 8016042:	881b      	ldrh	r3, [r3, #0]
 8016044:	429a      	cmp	r2, r3
 8016046:	d3b1      	bcc.n	8015fac <tcp_parseopt+0x2c>
 8016048:	e004      	b.n	8016054 <tcp_parseopt+0xd4>
          return;
 801604a:	bf00      	nop
 801604c:	e002      	b.n	8016054 <tcp_parseopt+0xd4>
            return;
 801604e:	bf00      	nop
 8016050:	e000      	b.n	8016054 <tcp_parseopt+0xd4>
            return;
 8016052:	bf00      	nop
      }
    }
  }
}
 8016054:	3710      	adds	r7, #16
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}
 801605a:	bf00      	nop
 801605c:	0801d0d8 	.word	0x0801d0d8
 8016060:	0801d53c 	.word	0x0801d53c
 8016064:	0801d124 	.word	0x0801d124
 8016068:	24014bdc 	.word	0x24014bdc
 801606c:	24014be4 	.word	0x24014be4

08016070 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016070:	b480      	push	{r7}
 8016072:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016074:	4b05      	ldr	r3, [pc, #20]	@ (801608c <tcp_trigger_input_pcb_close+0x1c>)
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	f043 0310 	orr.w	r3, r3, #16
 801607c:	b2da      	uxtb	r2, r3
 801607e:	4b03      	ldr	r3, [pc, #12]	@ (801608c <tcp_trigger_input_pcb_close+0x1c>)
 8016080:	701a      	strb	r2, [r3, #0]
}
 8016082:	bf00      	nop
 8016084:	46bd      	mov	sp, r7
 8016086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608a:	4770      	bx	lr
 801608c:	24014bf5 	.word	0x24014bf5

08016090 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d00a      	beq.n	80160b8 <tcp_route+0x28>
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	7a1b      	ldrb	r3, [r3, #8]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d006      	beq.n	80160b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	7a1b      	ldrb	r3, [r3, #8]
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fb fa1c 	bl	80114ec <netif_get_by_index>
 80160b4:	4603      	mov	r3, r0
 80160b6:	e003      	b.n	80160c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f003 fa01 	bl	80194c0 <ip4_route>
 80160be:	4603      	mov	r3, r0
  }
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3710      	adds	r7, #16
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80160c8:	b590      	push	{r4, r7, lr}
 80160ca:	b087      	sub	sp, #28
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	603b      	str	r3, [r7, #0]
 80160d4:	4613      	mov	r3, r2
 80160d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d105      	bne.n	80160ea <tcp_create_segment+0x22>
 80160de:	4b43      	ldr	r3, [pc, #268]	@ (80161ec <tcp_create_segment+0x124>)
 80160e0:	22a3      	movs	r2, #163	@ 0xa3
 80160e2:	4943      	ldr	r1, [pc, #268]	@ (80161f0 <tcp_create_segment+0x128>)
 80160e4:	4843      	ldr	r0, [pc, #268]	@ (80161f4 <tcp_create_segment+0x12c>)
 80160e6:	f004 fe65 	bl	801adb4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d105      	bne.n	80160fc <tcp_create_segment+0x34>
 80160f0:	4b3e      	ldr	r3, [pc, #248]	@ (80161ec <tcp_create_segment+0x124>)
 80160f2:	22a4      	movs	r2, #164	@ 0xa4
 80160f4:	4940      	ldr	r1, [pc, #256]	@ (80161f8 <tcp_create_segment+0x130>)
 80160f6:	483f      	ldr	r0, [pc, #252]	@ (80161f4 <tcp_create_segment+0x12c>)
 80160f8:	f004 fe5c 	bl	801adb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80160fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016100:	009b      	lsls	r3, r3, #2
 8016102:	b2db      	uxtb	r3, r3
 8016104:	f003 0304 	and.w	r3, r3, #4
 8016108:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801610a:	2004      	movs	r0, #4
 801610c:	f7fa fe5e 	bl	8010dcc <memp_malloc>
 8016110:	6138      	str	r0, [r7, #16]
 8016112:	693b      	ldr	r3, [r7, #16]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d104      	bne.n	8016122 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016118:	68b8      	ldr	r0, [r7, #8]
 801611a:	f7fb fd79 	bl	8011c10 <pbuf_free>
    return NULL;
 801611e:	2300      	movs	r3, #0
 8016120:	e060      	b.n	80161e4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8016122:	693b      	ldr	r3, [r7, #16]
 8016124:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016128:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	2200      	movs	r2, #0
 801612e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016130:	693b      	ldr	r3, [r7, #16]
 8016132:	68ba      	ldr	r2, [r7, #8]
 8016134:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	891a      	ldrh	r2, [r3, #8]
 801613a:	7dfb      	ldrb	r3, [r7, #23]
 801613c:	b29b      	uxth	r3, r3
 801613e:	429a      	cmp	r2, r3
 8016140:	d205      	bcs.n	801614e <tcp_create_segment+0x86>
 8016142:	4b2a      	ldr	r3, [pc, #168]	@ (80161ec <tcp_create_segment+0x124>)
 8016144:	22b0      	movs	r2, #176	@ 0xb0
 8016146:	492d      	ldr	r1, [pc, #180]	@ (80161fc <tcp_create_segment+0x134>)
 8016148:	482a      	ldr	r0, [pc, #168]	@ (80161f4 <tcp_create_segment+0x12c>)
 801614a:	f004 fe33 	bl	801adb4 <iprintf>
  seg->len = p->tot_len - optlen;
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	891a      	ldrh	r2, [r3, #8]
 8016152:	7dfb      	ldrb	r3, [r7, #23]
 8016154:	b29b      	uxth	r3, r3
 8016156:	1ad3      	subs	r3, r2, r3
 8016158:	b29a      	uxth	r2, r3
 801615a:	693b      	ldr	r3, [r7, #16]
 801615c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801615e:	2114      	movs	r1, #20
 8016160:	68b8      	ldr	r0, [r7, #8]
 8016162:	f7fb fcbf 	bl	8011ae4 <pbuf_add_header>
 8016166:	4603      	mov	r3, r0
 8016168:	2b00      	cmp	r3, #0
 801616a:	d004      	beq.n	8016176 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801616c:	6938      	ldr	r0, [r7, #16]
 801616e:	f7fd f8d0 	bl	8013312 <tcp_seg_free>
    return NULL;
 8016172:	2300      	movs	r3, #0
 8016174:	e036      	b.n	80161e4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	685b      	ldr	r3, [r3, #4]
 801617a:	685a      	ldr	r2, [r3, #4]
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	8ada      	ldrh	r2, [r3, #22]
 8016184:	693b      	ldr	r3, [r7, #16]
 8016186:	68dc      	ldr	r4, [r3, #12]
 8016188:	4610      	mov	r0, r2
 801618a:	f7fa f88f 	bl	80102ac <lwip_htons>
 801618e:	4603      	mov	r3, r0
 8016190:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	8b1a      	ldrh	r2, [r3, #24]
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	68dc      	ldr	r4, [r3, #12]
 801619a:	4610      	mov	r0, r2
 801619c:	f7fa f886 	bl	80102ac <lwip_htons>
 80161a0:	4603      	mov	r3, r0
 80161a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	68dc      	ldr	r4, [r3, #12]
 80161a8:	6838      	ldr	r0, [r7, #0]
 80161aa:	f7fa f895 	bl	80102d8 <lwip_htonl>
 80161ae:	4603      	mov	r3, r0
 80161b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80161b2:	7dfb      	ldrb	r3, [r7, #23]
 80161b4:	089b      	lsrs	r3, r3, #2
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	3305      	adds	r3, #5
 80161ba:	b29b      	uxth	r3, r3
 80161bc:	031b      	lsls	r3, r3, #12
 80161be:	b29a      	uxth	r2, r3
 80161c0:	79fb      	ldrb	r3, [r7, #7]
 80161c2:	b29b      	uxth	r3, r3
 80161c4:	4313      	orrs	r3, r2
 80161c6:	b29a      	uxth	r2, r3
 80161c8:	693b      	ldr	r3, [r7, #16]
 80161ca:	68dc      	ldr	r4, [r3, #12]
 80161cc:	4610      	mov	r0, r2
 80161ce:	f7fa f86d 	bl	80102ac <lwip_htons>
 80161d2:	4603      	mov	r3, r0
 80161d4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80161d6:	693b      	ldr	r3, [r7, #16]
 80161d8:	68db      	ldr	r3, [r3, #12]
 80161da:	2200      	movs	r2, #0
 80161dc:	749a      	strb	r2, [r3, #18]
 80161de:	2200      	movs	r2, #0
 80161e0:	74da      	strb	r2, [r3, #19]
  return seg;
 80161e2:	693b      	ldr	r3, [r7, #16]
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	371c      	adds	r7, #28
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd90      	pop	{r4, r7, pc}
 80161ec:	0801d558 	.word	0x0801d558
 80161f0:	0801d58c 	.word	0x0801d58c
 80161f4:	0801d5ac 	.word	0x0801d5ac
 80161f8:	0801d5d4 	.word	0x0801d5d4
 80161fc:	0801d5f8 	.word	0x0801d5f8

08016200 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016200:	b590      	push	{r4, r7, lr}
 8016202:	b08b      	sub	sp, #44	@ 0x2c
 8016204:	af02      	add	r7, sp, #8
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	460b      	mov	r3, r1
 801620a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801620c:	2300      	movs	r3, #0
 801620e:	61fb      	str	r3, [r7, #28]
 8016210:	2300      	movs	r3, #0
 8016212:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016214:	2300      	movs	r3, #0
 8016216:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d106      	bne.n	801622c <tcp_split_unsent_seg+0x2c>
 801621e:	4b95      	ldr	r3, [pc, #596]	@ (8016474 <tcp_split_unsent_seg+0x274>)
 8016220:	f240 324b 	movw	r2, #843	@ 0x34b
 8016224:	4994      	ldr	r1, [pc, #592]	@ (8016478 <tcp_split_unsent_seg+0x278>)
 8016226:	4895      	ldr	r0, [pc, #596]	@ (801647c <tcp_split_unsent_seg+0x27c>)
 8016228:	f004 fdc4 	bl	801adb4 <iprintf>

  useg = pcb->unsent;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016230:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016232:	697b      	ldr	r3, [r7, #20]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d102      	bne.n	801623e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016238:	f04f 33ff 	mov.w	r3, #4294967295
 801623c:	e116      	b.n	801646c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801623e:	887b      	ldrh	r3, [r7, #2]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d109      	bne.n	8016258 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016244:	4b8b      	ldr	r3, [pc, #556]	@ (8016474 <tcp_split_unsent_seg+0x274>)
 8016246:	f240 3253 	movw	r2, #851	@ 0x353
 801624a:	498d      	ldr	r1, [pc, #564]	@ (8016480 <tcp_split_unsent_seg+0x280>)
 801624c:	488b      	ldr	r0, [pc, #556]	@ (801647c <tcp_split_unsent_seg+0x27c>)
 801624e:	f004 fdb1 	bl	801adb4 <iprintf>
    return ERR_VAL;
 8016252:	f06f 0305 	mvn.w	r3, #5
 8016256:	e109      	b.n	801646c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016258:	697b      	ldr	r3, [r7, #20]
 801625a:	891b      	ldrh	r3, [r3, #8]
 801625c:	887a      	ldrh	r2, [r7, #2]
 801625e:	429a      	cmp	r2, r3
 8016260:	d301      	bcc.n	8016266 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016262:	2300      	movs	r3, #0
 8016264:	e102      	b.n	801646c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801626a:	887a      	ldrh	r2, [r7, #2]
 801626c:	429a      	cmp	r2, r3
 801626e:	d906      	bls.n	801627e <tcp_split_unsent_seg+0x7e>
 8016270:	4b80      	ldr	r3, [pc, #512]	@ (8016474 <tcp_split_unsent_seg+0x274>)
 8016272:	f240 325b 	movw	r2, #859	@ 0x35b
 8016276:	4983      	ldr	r1, [pc, #524]	@ (8016484 <tcp_split_unsent_seg+0x284>)
 8016278:	4880      	ldr	r0, [pc, #512]	@ (801647c <tcp_split_unsent_seg+0x27c>)
 801627a:	f004 fd9b 	bl	801adb4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	891b      	ldrh	r3, [r3, #8]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d106      	bne.n	8016294 <tcp_split_unsent_seg+0x94>
 8016286:	4b7b      	ldr	r3, [pc, #492]	@ (8016474 <tcp_split_unsent_seg+0x274>)
 8016288:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801628c:	497e      	ldr	r1, [pc, #504]	@ (8016488 <tcp_split_unsent_seg+0x288>)
 801628e:	487b      	ldr	r0, [pc, #492]	@ (801647c <tcp_split_unsent_seg+0x27c>)
 8016290:	f004 fd90 	bl	801adb4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016294:	697b      	ldr	r3, [r7, #20]
 8016296:	7a9b      	ldrb	r3, [r3, #10]
 8016298:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801629a:	7bfb      	ldrb	r3, [r7, #15]
 801629c:	009b      	lsls	r3, r3, #2
 801629e:	b2db      	uxtb	r3, r3
 80162a0:	f003 0304 	and.w	r3, r3, #4
 80162a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	891a      	ldrh	r2, [r3, #8]
 80162aa:	887b      	ldrh	r3, [r7, #2]
 80162ac:	1ad3      	subs	r3, r2, r3
 80162ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80162b0:	7bbb      	ldrb	r3, [r7, #14]
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	89bb      	ldrh	r3, [r7, #12]
 80162b6:	4413      	add	r3, r2
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80162be:	4619      	mov	r1, r3
 80162c0:	2036      	movs	r0, #54	@ 0x36
 80162c2:	f7fb f9bd 	bl	8011640 <pbuf_alloc>
 80162c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80162c8:	693b      	ldr	r3, [r7, #16]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	f000 80b7 	beq.w	801643e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80162d0:	697b      	ldr	r3, [r7, #20]
 80162d2:	685b      	ldr	r3, [r3, #4]
 80162d4:	891a      	ldrh	r2, [r3, #8]
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	891b      	ldrh	r3, [r3, #8]
 80162da:	1ad3      	subs	r3, r2, r3
 80162dc:	b29a      	uxth	r2, r3
 80162de:	887b      	ldrh	r3, [r7, #2]
 80162e0:	4413      	add	r3, r2
 80162e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	6858      	ldr	r0, [r3, #4]
 80162e8:	693b      	ldr	r3, [r7, #16]
 80162ea:	685a      	ldr	r2, [r3, #4]
 80162ec:	7bbb      	ldrb	r3, [r7, #14]
 80162ee:	18d1      	adds	r1, r2, r3
 80162f0:	897b      	ldrh	r3, [r7, #10]
 80162f2:	89ba      	ldrh	r2, [r7, #12]
 80162f4:	f7fb fe92 	bl	801201c <pbuf_copy_partial>
 80162f8:	4603      	mov	r3, r0
 80162fa:	461a      	mov	r2, r3
 80162fc:	89bb      	ldrh	r3, [r7, #12]
 80162fe:	4293      	cmp	r3, r2
 8016300:	f040 809f 	bne.w	8016442 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	68db      	ldr	r3, [r3, #12]
 8016308:	899b      	ldrh	r3, [r3, #12]
 801630a:	b29b      	uxth	r3, r3
 801630c:	4618      	mov	r0, r3
 801630e:	f7f9 ffcd 	bl	80102ac <lwip_htons>
 8016312:	4603      	mov	r3, r0
 8016314:	b2db      	uxtb	r3, r3
 8016316:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801631a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801631c:	2300      	movs	r3, #0
 801631e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016320:	7efb      	ldrb	r3, [r7, #27]
 8016322:	f003 0308 	and.w	r3, r3, #8
 8016326:	2b00      	cmp	r3, #0
 8016328:	d007      	beq.n	801633a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801632a:	7efb      	ldrb	r3, [r7, #27]
 801632c:	f023 0308 	bic.w	r3, r3, #8
 8016330:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016332:	7ebb      	ldrb	r3, [r7, #26]
 8016334:	f043 0308 	orr.w	r3, r3, #8
 8016338:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801633a:	7efb      	ldrb	r3, [r7, #27]
 801633c:	f003 0301 	and.w	r3, r3, #1
 8016340:	2b00      	cmp	r3, #0
 8016342:	d007      	beq.n	8016354 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016344:	7efb      	ldrb	r3, [r7, #27]
 8016346:	f023 0301 	bic.w	r3, r3, #1
 801634a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801634c:	7ebb      	ldrb	r3, [r7, #26]
 801634e:	f043 0301 	orr.w	r3, r3, #1
 8016352:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016354:	697b      	ldr	r3, [r7, #20]
 8016356:	68db      	ldr	r3, [r3, #12]
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	4618      	mov	r0, r3
 801635c:	f7f9 ffbc 	bl	80102d8 <lwip_htonl>
 8016360:	4602      	mov	r2, r0
 8016362:	887b      	ldrh	r3, [r7, #2]
 8016364:	18d1      	adds	r1, r2, r3
 8016366:	7eba      	ldrb	r2, [r7, #26]
 8016368:	7bfb      	ldrb	r3, [r7, #15]
 801636a:	9300      	str	r3, [sp, #0]
 801636c:	460b      	mov	r3, r1
 801636e:	6939      	ldr	r1, [r7, #16]
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f7ff fea9 	bl	80160c8 <tcp_create_segment>
 8016376:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d063      	beq.n	8016446 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	685b      	ldr	r3, [r3, #4]
 8016382:	4618      	mov	r0, r3
 8016384:	f7fb fcd2 	bl	8011d2c <pbuf_clen>
 8016388:	4603      	mov	r3, r0
 801638a:	461a      	mov	r2, r3
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016392:	1a9b      	subs	r3, r3, r2
 8016394:	b29a      	uxth	r2, r3
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801639c:	697b      	ldr	r3, [r7, #20]
 801639e:	6858      	ldr	r0, [r3, #4]
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	891a      	ldrh	r2, [r3, #8]
 80163a6:	89bb      	ldrh	r3, [r7, #12]
 80163a8:	1ad3      	subs	r3, r2, r3
 80163aa:	b29b      	uxth	r3, r3
 80163ac:	4619      	mov	r1, r3
 80163ae:	f7fb faa9 	bl	8011904 <pbuf_realloc>
  useg->len -= remainder;
 80163b2:	697b      	ldr	r3, [r7, #20]
 80163b4:	891a      	ldrh	r2, [r3, #8]
 80163b6:	89bb      	ldrh	r3, [r7, #12]
 80163b8:	1ad3      	subs	r3, r2, r3
 80163ba:	b29a      	uxth	r2, r3
 80163bc:	697b      	ldr	r3, [r7, #20]
 80163be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80163c0:	697b      	ldr	r3, [r7, #20]
 80163c2:	68db      	ldr	r3, [r3, #12]
 80163c4:	899b      	ldrh	r3, [r3, #12]
 80163c6:	b29c      	uxth	r4, r3
 80163c8:	7efb      	ldrb	r3, [r7, #27]
 80163ca:	b29b      	uxth	r3, r3
 80163cc:	4618      	mov	r0, r3
 80163ce:	f7f9 ff6d 	bl	80102ac <lwip_htons>
 80163d2:	4603      	mov	r3, r0
 80163d4:	461a      	mov	r2, r3
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	68db      	ldr	r3, [r3, #12]
 80163da:	4322      	orrs	r2, r4
 80163dc:	b292      	uxth	r2, r2
 80163de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80163e0:	697b      	ldr	r3, [r7, #20]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	4618      	mov	r0, r3
 80163e6:	f7fb fca1 	bl	8011d2c <pbuf_clen>
 80163ea:	4603      	mov	r3, r0
 80163ec:	461a      	mov	r2, r3
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80163f4:	4413      	add	r3, r2
 80163f6:	b29a      	uxth	r2, r3
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80163fe:	69fb      	ldr	r3, [r7, #28]
 8016400:	685b      	ldr	r3, [r3, #4]
 8016402:	4618      	mov	r0, r3
 8016404:	f7fb fc92 	bl	8011d2c <pbuf_clen>
 8016408:	4603      	mov	r3, r0
 801640a:	461a      	mov	r2, r3
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016412:	4413      	add	r3, r2
 8016414:	b29a      	uxth	r2, r3
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	681a      	ldr	r2, [r3, #0]
 8016420:	69fb      	ldr	r3, [r7, #28]
 8016422:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	69fa      	ldr	r2, [r7, #28]
 8016428:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801642a:	69fb      	ldr	r3, [r7, #28]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d103      	bne.n	801643a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2200      	movs	r2, #0
 8016436:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801643a:	2300      	movs	r3, #0
 801643c:	e016      	b.n	801646c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801643e:	bf00      	nop
 8016440:	e002      	b.n	8016448 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016442:	bf00      	nop
 8016444:	e000      	b.n	8016448 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016446:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016448:	69fb      	ldr	r3, [r7, #28]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d006      	beq.n	801645c <tcp_split_unsent_seg+0x25c>
 801644e:	4b09      	ldr	r3, [pc, #36]	@ (8016474 <tcp_split_unsent_seg+0x274>)
 8016450:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016454:	490d      	ldr	r1, [pc, #52]	@ (801648c <tcp_split_unsent_seg+0x28c>)
 8016456:	4809      	ldr	r0, [pc, #36]	@ (801647c <tcp_split_unsent_seg+0x27c>)
 8016458:	f004 fcac 	bl	801adb4 <iprintf>
  if (p != NULL) {
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d002      	beq.n	8016468 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016462:	6938      	ldr	r0, [r7, #16]
 8016464:	f7fb fbd4 	bl	8011c10 <pbuf_free>
  }

  return ERR_MEM;
 8016468:	f04f 33ff 	mov.w	r3, #4294967295
}
 801646c:	4618      	mov	r0, r3
 801646e:	3724      	adds	r7, #36	@ 0x24
 8016470:	46bd      	mov	sp, r7
 8016472:	bd90      	pop	{r4, r7, pc}
 8016474:	0801d558 	.word	0x0801d558
 8016478:	0801d8ec 	.word	0x0801d8ec
 801647c:	0801d5ac 	.word	0x0801d5ac
 8016480:	0801d910 	.word	0x0801d910
 8016484:	0801d934 	.word	0x0801d934
 8016488:	0801d944 	.word	0x0801d944
 801648c:	0801d954 	.word	0x0801d954

08016490 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016490:	b590      	push	{r4, r7, lr}
 8016492:	b085      	sub	sp, #20
 8016494:	af00      	add	r7, sp, #0
 8016496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d106      	bne.n	80164ac <tcp_send_fin+0x1c>
 801649e:	4b21      	ldr	r3, [pc, #132]	@ (8016524 <tcp_send_fin+0x94>)
 80164a0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80164a4:	4920      	ldr	r1, [pc, #128]	@ (8016528 <tcp_send_fin+0x98>)
 80164a6:	4821      	ldr	r0, [pc, #132]	@ (801652c <tcp_send_fin+0x9c>)
 80164a8:	f004 fc84 	bl	801adb4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d02e      	beq.n	8016512 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80164b8:	60fb      	str	r3, [r7, #12]
 80164ba:	e002      	b.n	80164c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d1f8      	bne.n	80164bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	68db      	ldr	r3, [r3, #12]
 80164ce:	899b      	ldrh	r3, [r3, #12]
 80164d0:	b29b      	uxth	r3, r3
 80164d2:	4618      	mov	r0, r3
 80164d4:	f7f9 feea 	bl	80102ac <lwip_htons>
 80164d8:	4603      	mov	r3, r0
 80164da:	b2db      	uxtb	r3, r3
 80164dc:	f003 0307 	and.w	r3, r3, #7
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d116      	bne.n	8016512 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	68db      	ldr	r3, [r3, #12]
 80164e8:	899b      	ldrh	r3, [r3, #12]
 80164ea:	b29c      	uxth	r4, r3
 80164ec:	2001      	movs	r0, #1
 80164ee:	f7f9 fedd 	bl	80102ac <lwip_htons>
 80164f2:	4603      	mov	r3, r0
 80164f4:	461a      	mov	r2, r3
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	68db      	ldr	r3, [r3, #12]
 80164fa:	4322      	orrs	r2, r4
 80164fc:	b292      	uxth	r2, r2
 80164fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	8b5b      	ldrh	r3, [r3, #26]
 8016504:	f043 0320 	orr.w	r3, r3, #32
 8016508:	b29a      	uxth	r2, r3
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801650e:	2300      	movs	r3, #0
 8016510:	e004      	b.n	801651c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016512:	2101      	movs	r1, #1
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f000 f80b 	bl	8016530 <tcp_enqueue_flags>
 801651a:	4603      	mov	r3, r0
}
 801651c:	4618      	mov	r0, r3
 801651e:	3714      	adds	r7, #20
 8016520:	46bd      	mov	sp, r7
 8016522:	bd90      	pop	{r4, r7, pc}
 8016524:	0801d558 	.word	0x0801d558
 8016528:	0801d960 	.word	0x0801d960
 801652c:	0801d5ac 	.word	0x0801d5ac

08016530 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b08a      	sub	sp, #40	@ 0x28
 8016534:	af02      	add	r7, sp, #8
 8016536:	6078      	str	r0, [r7, #4]
 8016538:	460b      	mov	r3, r1
 801653a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801653c:	2300      	movs	r3, #0
 801653e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016540:	2300      	movs	r3, #0
 8016542:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016544:	78fb      	ldrb	r3, [r7, #3]
 8016546:	f003 0303 	and.w	r3, r3, #3
 801654a:	2b00      	cmp	r3, #0
 801654c:	d106      	bne.n	801655c <tcp_enqueue_flags+0x2c>
 801654e:	4b67      	ldr	r3, [pc, #412]	@ (80166ec <tcp_enqueue_flags+0x1bc>)
 8016550:	f240 4211 	movw	r2, #1041	@ 0x411
 8016554:	4966      	ldr	r1, [pc, #408]	@ (80166f0 <tcp_enqueue_flags+0x1c0>)
 8016556:	4867      	ldr	r0, [pc, #412]	@ (80166f4 <tcp_enqueue_flags+0x1c4>)
 8016558:	f004 fc2c 	bl	801adb4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d106      	bne.n	8016570 <tcp_enqueue_flags+0x40>
 8016562:	4b62      	ldr	r3, [pc, #392]	@ (80166ec <tcp_enqueue_flags+0x1bc>)
 8016564:	f240 4213 	movw	r2, #1043	@ 0x413
 8016568:	4963      	ldr	r1, [pc, #396]	@ (80166f8 <tcp_enqueue_flags+0x1c8>)
 801656a:	4862      	ldr	r0, [pc, #392]	@ (80166f4 <tcp_enqueue_flags+0x1c4>)
 801656c:	f004 fc22 	bl	801adb4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016570:	78fb      	ldrb	r3, [r7, #3]
 8016572:	f003 0302 	and.w	r3, r3, #2
 8016576:	2b00      	cmp	r3, #0
 8016578:	d001      	beq.n	801657e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801657a:	2301      	movs	r3, #1
 801657c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801657e:	7ffb      	ldrb	r3, [r7, #31]
 8016580:	009b      	lsls	r3, r3, #2
 8016582:	b2db      	uxtb	r3, r3
 8016584:	f003 0304 	and.w	r3, r3, #4
 8016588:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801658a:	7dfb      	ldrb	r3, [r7, #23]
 801658c:	b29b      	uxth	r3, r3
 801658e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016592:	4619      	mov	r1, r3
 8016594:	2036      	movs	r0, #54	@ 0x36
 8016596:	f7fb f853 	bl	8011640 <pbuf_alloc>
 801659a:	6138      	str	r0, [r7, #16]
 801659c:	693b      	ldr	r3, [r7, #16]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d109      	bne.n	80165b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	8b5b      	ldrh	r3, [r3, #26]
 80165a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80165aa:	b29a      	uxth	r2, r3
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80165b0:	f04f 33ff 	mov.w	r3, #4294967295
 80165b4:	e095      	b.n	80166e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80165b6:	693b      	ldr	r3, [r7, #16]
 80165b8:	895a      	ldrh	r2, [r3, #10]
 80165ba:	7dfb      	ldrb	r3, [r7, #23]
 80165bc:	b29b      	uxth	r3, r3
 80165be:	429a      	cmp	r2, r3
 80165c0:	d206      	bcs.n	80165d0 <tcp_enqueue_flags+0xa0>
 80165c2:	4b4a      	ldr	r3, [pc, #296]	@ (80166ec <tcp_enqueue_flags+0x1bc>)
 80165c4:	f240 4239 	movw	r2, #1081	@ 0x439
 80165c8:	494c      	ldr	r1, [pc, #304]	@ (80166fc <tcp_enqueue_flags+0x1cc>)
 80165ca:	484a      	ldr	r0, [pc, #296]	@ (80166f4 <tcp_enqueue_flags+0x1c4>)
 80165cc:	f004 fbf2 	bl	801adb4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80165d4:	78fa      	ldrb	r2, [r7, #3]
 80165d6:	7ffb      	ldrb	r3, [r7, #31]
 80165d8:	9300      	str	r3, [sp, #0]
 80165da:	460b      	mov	r3, r1
 80165dc:	6939      	ldr	r1, [r7, #16]
 80165de:	6878      	ldr	r0, [r7, #4]
 80165e0:	f7ff fd72 	bl	80160c8 <tcp_create_segment>
 80165e4:	60f8      	str	r0, [r7, #12]
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d109      	bne.n	8016600 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	8b5b      	ldrh	r3, [r3, #26]
 80165f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80165f4:	b29a      	uxth	r2, r3
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80165fa:	f04f 33ff 	mov.w	r3, #4294967295
 80165fe:	e070      	b.n	80166e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	68db      	ldr	r3, [r3, #12]
 8016604:	f003 0303 	and.w	r3, r3, #3
 8016608:	2b00      	cmp	r3, #0
 801660a:	d006      	beq.n	801661a <tcp_enqueue_flags+0xea>
 801660c:	4b37      	ldr	r3, [pc, #220]	@ (80166ec <tcp_enqueue_flags+0x1bc>)
 801660e:	f240 4242 	movw	r2, #1090	@ 0x442
 8016612:	493b      	ldr	r1, [pc, #236]	@ (8016700 <tcp_enqueue_flags+0x1d0>)
 8016614:	4837      	ldr	r0, [pc, #220]	@ (80166f4 <tcp_enqueue_flags+0x1c4>)
 8016616:	f004 fbcd 	bl	801adb4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	891b      	ldrh	r3, [r3, #8]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d006      	beq.n	8016630 <tcp_enqueue_flags+0x100>
 8016622:	4b32      	ldr	r3, [pc, #200]	@ (80166ec <tcp_enqueue_flags+0x1bc>)
 8016624:	f240 4243 	movw	r2, #1091	@ 0x443
 8016628:	4936      	ldr	r1, [pc, #216]	@ (8016704 <tcp_enqueue_flags+0x1d4>)
 801662a:	4832      	ldr	r0, [pc, #200]	@ (80166f4 <tcp_enqueue_flags+0x1c4>)
 801662c:	f004 fbc2 	bl	801adb4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016634:	2b00      	cmp	r3, #0
 8016636:	d103      	bne.n	8016640 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	68fa      	ldr	r2, [r7, #12]
 801663c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801663e:	e00d      	b.n	801665c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016644:	61bb      	str	r3, [r7, #24]
 8016646:	e002      	b.n	801664e <tcp_enqueue_flags+0x11e>
 8016648:	69bb      	ldr	r3, [r7, #24]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	61bb      	str	r3, [r7, #24]
 801664e:	69bb      	ldr	r3, [r7, #24]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d1f8      	bne.n	8016648 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016656:	69bb      	ldr	r3, [r7, #24]
 8016658:	68fa      	ldr	r2, [r7, #12]
 801665a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2200      	movs	r2, #0
 8016660:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016664:	78fb      	ldrb	r3, [r7, #3]
 8016666:	f003 0302 	and.w	r3, r3, #2
 801666a:	2b00      	cmp	r3, #0
 801666c:	d104      	bne.n	8016678 <tcp_enqueue_flags+0x148>
 801666e:	78fb      	ldrb	r3, [r7, #3]
 8016670:	f003 0301 	and.w	r3, r3, #1
 8016674:	2b00      	cmp	r3, #0
 8016676:	d004      	beq.n	8016682 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801667c:	1c5a      	adds	r2, r3, #1
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016682:	78fb      	ldrb	r3, [r7, #3]
 8016684:	f003 0301 	and.w	r3, r3, #1
 8016688:	2b00      	cmp	r3, #0
 801668a:	d006      	beq.n	801669a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	8b5b      	ldrh	r3, [r3, #26]
 8016690:	f043 0320 	orr.w	r3, r3, #32
 8016694:	b29a      	uxth	r2, r3
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	685b      	ldr	r3, [r3, #4]
 801669e:	4618      	mov	r0, r3
 80166a0:	f7fb fb44 	bl	8011d2c <pbuf_clen>
 80166a4:	4603      	mov	r3, r0
 80166a6:	461a      	mov	r2, r3
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80166ae:	4413      	add	r3, r2
 80166b0:	b29a      	uxth	r2, r3
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d00e      	beq.n	80166e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d10a      	bne.n	80166e0 <tcp_enqueue_flags+0x1b0>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d106      	bne.n	80166e0 <tcp_enqueue_flags+0x1b0>
 80166d2:	4b06      	ldr	r3, [pc, #24]	@ (80166ec <tcp_enqueue_flags+0x1bc>)
 80166d4:	f240 4265 	movw	r2, #1125	@ 0x465
 80166d8:	490b      	ldr	r1, [pc, #44]	@ (8016708 <tcp_enqueue_flags+0x1d8>)
 80166da:	4806      	ldr	r0, [pc, #24]	@ (80166f4 <tcp_enqueue_flags+0x1c4>)
 80166dc:	f004 fb6a 	bl	801adb4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80166e0:	2300      	movs	r3, #0
}
 80166e2:	4618      	mov	r0, r3
 80166e4:	3720      	adds	r7, #32
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd80      	pop	{r7, pc}
 80166ea:	bf00      	nop
 80166ec:	0801d558 	.word	0x0801d558
 80166f0:	0801d97c 	.word	0x0801d97c
 80166f4:	0801d5ac 	.word	0x0801d5ac
 80166f8:	0801d9d4 	.word	0x0801d9d4
 80166fc:	0801d9f4 	.word	0x0801d9f4
 8016700:	0801da30 	.word	0x0801da30
 8016704:	0801da48 	.word	0x0801da48
 8016708:	0801da74 	.word	0x0801da74

0801670c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801670c:	b5b0      	push	{r4, r5, r7, lr}
 801670e:	b08a      	sub	sp, #40	@ 0x28
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d106      	bne.n	8016728 <tcp_output+0x1c>
 801671a:	4b8a      	ldr	r3, [pc, #552]	@ (8016944 <tcp_output+0x238>)
 801671c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016720:	4989      	ldr	r1, [pc, #548]	@ (8016948 <tcp_output+0x23c>)
 8016722:	488a      	ldr	r0, [pc, #552]	@ (801694c <tcp_output+0x240>)
 8016724:	f004 fb46 	bl	801adb4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	7d1b      	ldrb	r3, [r3, #20]
 801672c:	2b01      	cmp	r3, #1
 801672e:	d106      	bne.n	801673e <tcp_output+0x32>
 8016730:	4b84      	ldr	r3, [pc, #528]	@ (8016944 <tcp_output+0x238>)
 8016732:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016736:	4986      	ldr	r1, [pc, #536]	@ (8016950 <tcp_output+0x244>)
 8016738:	4884      	ldr	r0, [pc, #528]	@ (801694c <tcp_output+0x240>)
 801673a:	f004 fb3b 	bl	801adb4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801673e:	4b85      	ldr	r3, [pc, #532]	@ (8016954 <tcp_output+0x248>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	687a      	ldr	r2, [r7, #4]
 8016744:	429a      	cmp	r2, r3
 8016746:	d101      	bne.n	801674c <tcp_output+0x40>
    return ERR_OK;
 8016748:	2300      	movs	r3, #0
 801674a:	e1ce      	b.n	8016aea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016758:	4293      	cmp	r3, r2
 801675a:	bf28      	it	cs
 801675c:	4613      	movcs	r3, r2
 801675e:	b29b      	uxth	r3, r3
 8016760:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016766:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8016768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801676a:	2b00      	cmp	r3, #0
 801676c:	d10b      	bne.n	8016786 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	8b5b      	ldrh	r3, [r3, #26]
 8016772:	f003 0302 	and.w	r3, r3, #2
 8016776:	2b00      	cmp	r3, #0
 8016778:	f000 81aa 	beq.w	8016ad0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f000 fdcb 	bl	8017318 <tcp_send_empty_ack>
 8016782:	4603      	mov	r3, r0
 8016784:	e1b1      	b.n	8016aea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016786:	6879      	ldr	r1, [r7, #4]
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	3304      	adds	r3, #4
 801678c:	461a      	mov	r2, r3
 801678e:	6878      	ldr	r0, [r7, #4]
 8016790:	f7ff fc7e 	bl	8016090 <tcp_route>
 8016794:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016796:	697b      	ldr	r3, [r7, #20]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d102      	bne.n	80167a2 <tcp_output+0x96>
    return ERR_RTE;
 801679c:	f06f 0303 	mvn.w	r3, #3
 80167a0:	e1a3      	b.n	8016aea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d003      	beq.n	80167b0 <tcp_output+0xa4>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d111      	bne.n	80167d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d002      	beq.n	80167bc <tcp_output+0xb0>
 80167b6:	697b      	ldr	r3, [r7, #20]
 80167b8:	3304      	adds	r3, #4
 80167ba:	e000      	b.n	80167be <tcp_output+0xb2>
 80167bc:	2300      	movs	r3, #0
 80167be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d102      	bne.n	80167cc <tcp_output+0xc0>
      return ERR_RTE;
 80167c6:	f06f 0303 	mvn.w	r3, #3
 80167ca:	e18e      	b.n	8016aea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	681a      	ldr	r2, [r3, #0]
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80167d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167d6:	68db      	ldr	r3, [r3, #12]
 80167d8:	685b      	ldr	r3, [r3, #4]
 80167da:	4618      	mov	r0, r3
 80167dc:	f7f9 fd7c 	bl	80102d8 <lwip_htonl>
 80167e0:	4602      	mov	r2, r0
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167e6:	1ad3      	subs	r3, r2, r3
 80167e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80167ea:	8912      	ldrh	r2, [r2, #8]
 80167ec:	4413      	add	r3, r2
 80167ee:	69ba      	ldr	r2, [r7, #24]
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d227      	bcs.n	8016844 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80167fa:	461a      	mov	r2, r3
 80167fc:	69bb      	ldr	r3, [r7, #24]
 80167fe:	4293      	cmp	r3, r2
 8016800:	d114      	bne.n	801682c <tcp_output+0x120>
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016806:	2b00      	cmp	r3, #0
 8016808:	d110      	bne.n	801682c <tcp_output+0x120>
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016810:	2b00      	cmp	r3, #0
 8016812:	d10b      	bne.n	801682c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2200      	movs	r2, #0
 8016818:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2201      	movs	r2, #1
 8016820:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2200      	movs	r2, #0
 8016828:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	8b5b      	ldrh	r3, [r3, #26]
 8016830:	f003 0302 	and.w	r3, r3, #2
 8016834:	2b00      	cmp	r3, #0
 8016836:	f000 814d 	beq.w	8016ad4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f000 fd6c 	bl	8017318 <tcp_send_empty_ack>
 8016840:	4603      	mov	r3, r0
 8016842:	e152      	b.n	8016aea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2200      	movs	r2, #0
 8016848:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016850:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016852:	6a3b      	ldr	r3, [r7, #32]
 8016854:	2b00      	cmp	r3, #0
 8016856:	f000 811c 	beq.w	8016a92 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801685a:	e002      	b.n	8016862 <tcp_output+0x156>
 801685c:	6a3b      	ldr	r3, [r7, #32]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	623b      	str	r3, [r7, #32]
 8016862:	6a3b      	ldr	r3, [r7, #32]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d1f8      	bne.n	801685c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801686a:	e112      	b.n	8016a92 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801686e:	68db      	ldr	r3, [r3, #12]
 8016870:	899b      	ldrh	r3, [r3, #12]
 8016872:	b29b      	uxth	r3, r3
 8016874:	4618      	mov	r0, r3
 8016876:	f7f9 fd19 	bl	80102ac <lwip_htons>
 801687a:	4603      	mov	r3, r0
 801687c:	b2db      	uxtb	r3, r3
 801687e:	f003 0304 	and.w	r3, r3, #4
 8016882:	2b00      	cmp	r3, #0
 8016884:	d006      	beq.n	8016894 <tcp_output+0x188>
 8016886:	4b2f      	ldr	r3, [pc, #188]	@ (8016944 <tcp_output+0x238>)
 8016888:	f240 5236 	movw	r2, #1334	@ 0x536
 801688c:	4932      	ldr	r1, [pc, #200]	@ (8016958 <tcp_output+0x24c>)
 801688e:	482f      	ldr	r0, [pc, #188]	@ (801694c <tcp_output+0x240>)
 8016890:	f004 fa90 	bl	801adb4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016898:	2b00      	cmp	r3, #0
 801689a:	d01f      	beq.n	80168dc <tcp_output+0x1d0>
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	8b5b      	ldrh	r3, [r3, #26]
 80168a0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d119      	bne.n	80168dc <tcp_output+0x1d0>
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d00b      	beq.n	80168c8 <tcp_output+0x1bc>
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d110      	bne.n	80168dc <tcp_output+0x1d0>
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168be:	891a      	ldrh	r2, [r3, #8]
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80168c4:	429a      	cmp	r2, r3
 80168c6:	d209      	bcs.n	80168dc <tcp_output+0x1d0>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d004      	beq.n	80168dc <tcp_output+0x1d0>
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80168d8:	2b0f      	cmp	r3, #15
 80168da:	d901      	bls.n	80168e0 <tcp_output+0x1d4>
 80168dc:	2301      	movs	r3, #1
 80168de:	e000      	b.n	80168e2 <tcp_output+0x1d6>
 80168e0:	2300      	movs	r3, #0
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d106      	bne.n	80168f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	8b5b      	ldrh	r3, [r3, #26]
 80168ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	f000 80e4 	beq.w	8016abc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	7d1b      	ldrb	r3, [r3, #20]
 80168f8:	2b02      	cmp	r3, #2
 80168fa:	d00d      	beq.n	8016918 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80168fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168fe:	68db      	ldr	r3, [r3, #12]
 8016900:	899b      	ldrh	r3, [r3, #12]
 8016902:	b29c      	uxth	r4, r3
 8016904:	2010      	movs	r0, #16
 8016906:	f7f9 fcd1 	bl	80102ac <lwip_htons>
 801690a:	4603      	mov	r3, r0
 801690c:	461a      	mov	r2, r3
 801690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016910:	68db      	ldr	r3, [r3, #12]
 8016912:	4322      	orrs	r2, r4
 8016914:	b292      	uxth	r2, r2
 8016916:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016918:	697a      	ldr	r2, [r7, #20]
 801691a:	6879      	ldr	r1, [r7, #4]
 801691c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801691e:	f000 f909 	bl	8016b34 <tcp_output_segment>
 8016922:	4603      	mov	r3, r0
 8016924:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d016      	beq.n	801695c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	8b5b      	ldrh	r3, [r3, #26]
 8016932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016936:	b29a      	uxth	r2, r3
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	835a      	strh	r2, [r3, #26]
      return err;
 801693c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016940:	e0d3      	b.n	8016aea <tcp_output+0x3de>
 8016942:	bf00      	nop
 8016944:	0801d558 	.word	0x0801d558
 8016948:	0801da9c 	.word	0x0801da9c
 801694c:	0801d5ac 	.word	0x0801d5ac
 8016950:	0801dab4 	.word	0x0801dab4
 8016954:	24014bfc 	.word	0x24014bfc
 8016958:	0801dadc 	.word	0x0801dadc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801695c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801695e:	681a      	ldr	r2, [r3, #0]
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	7d1b      	ldrb	r3, [r3, #20]
 8016968:	2b02      	cmp	r3, #2
 801696a:	d006      	beq.n	801697a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	8b5b      	ldrh	r3, [r3, #26]
 8016970:	f023 0303 	bic.w	r3, r3, #3
 8016974:	b29a      	uxth	r2, r3
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	4618      	mov	r0, r3
 8016982:	f7f9 fca9 	bl	80102d8 <lwip_htonl>
 8016986:	4604      	mov	r4, r0
 8016988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801698a:	891b      	ldrh	r3, [r3, #8]
 801698c:	461d      	mov	r5, r3
 801698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016990:	68db      	ldr	r3, [r3, #12]
 8016992:	899b      	ldrh	r3, [r3, #12]
 8016994:	b29b      	uxth	r3, r3
 8016996:	4618      	mov	r0, r3
 8016998:	f7f9 fc88 	bl	80102ac <lwip_htons>
 801699c:	4603      	mov	r3, r0
 801699e:	b2db      	uxtb	r3, r3
 80169a0:	f003 0303 	and.w	r3, r3, #3
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d001      	beq.n	80169ac <tcp_output+0x2a0>
 80169a8:	2301      	movs	r3, #1
 80169aa:	e000      	b.n	80169ae <tcp_output+0x2a2>
 80169ac:	2300      	movs	r3, #0
 80169ae:	442b      	add	r3, r5
 80169b0:	4423      	add	r3, r4
 80169b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	1ad3      	subs	r3, r2, r3
 80169bc:	2b00      	cmp	r3, #0
 80169be:	da02      	bge.n	80169c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	68ba      	ldr	r2, [r7, #8]
 80169c4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80169c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169c8:	891b      	ldrh	r3, [r3, #8]
 80169ca:	461c      	mov	r4, r3
 80169cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ce:	68db      	ldr	r3, [r3, #12]
 80169d0:	899b      	ldrh	r3, [r3, #12]
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	4618      	mov	r0, r3
 80169d6:	f7f9 fc69 	bl	80102ac <lwip_htons>
 80169da:	4603      	mov	r3, r0
 80169dc:	b2db      	uxtb	r3, r3
 80169de:	f003 0303 	and.w	r3, r3, #3
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d001      	beq.n	80169ea <tcp_output+0x2de>
 80169e6:	2301      	movs	r3, #1
 80169e8:	e000      	b.n	80169ec <tcp_output+0x2e0>
 80169ea:	2300      	movs	r3, #0
 80169ec:	4423      	add	r3, r4
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d049      	beq.n	8016a86 <tcp_output+0x37a>
      seg->next = NULL;
 80169f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169f4:	2200      	movs	r2, #0
 80169f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d105      	bne.n	8016a0c <tcp_output+0x300>
        pcb->unacked = seg;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a04:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a08:	623b      	str	r3, [r7, #32]
 8016a0a:	e03f      	b.n	8016a8c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a0e:	68db      	ldr	r3, [r3, #12]
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	4618      	mov	r0, r3
 8016a14:	f7f9 fc60 	bl	80102d8 <lwip_htonl>
 8016a18:	4604      	mov	r4, r0
 8016a1a:	6a3b      	ldr	r3, [r7, #32]
 8016a1c:	68db      	ldr	r3, [r3, #12]
 8016a1e:	685b      	ldr	r3, [r3, #4]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7f9 fc59 	bl	80102d8 <lwip_htonl>
 8016a26:	4603      	mov	r3, r0
 8016a28:	1ae3      	subs	r3, r4, r3
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	da24      	bge.n	8016a78 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	3370      	adds	r3, #112	@ 0x70
 8016a32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016a34:	e002      	b.n	8016a3c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016a36:	69fb      	ldr	r3, [r7, #28]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016a3c:	69fb      	ldr	r3, [r7, #28]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d011      	beq.n	8016a68 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016a44:	69fb      	ldr	r3, [r7, #28]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	68db      	ldr	r3, [r3, #12]
 8016a4a:	685b      	ldr	r3, [r3, #4]
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7f9 fc43 	bl	80102d8 <lwip_htonl>
 8016a52:	4604      	mov	r4, r0
 8016a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a56:	68db      	ldr	r3, [r3, #12]
 8016a58:	685b      	ldr	r3, [r3, #4]
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f7f9 fc3c 	bl	80102d8 <lwip_htonl>
 8016a60:	4603      	mov	r3, r0
 8016a62:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	dbe6      	blt.n	8016a36 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016a68:	69fb      	ldr	r3, [r7, #28]
 8016a6a:	681a      	ldr	r2, [r3, #0]
 8016a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a6e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a74:	601a      	str	r2, [r3, #0]
 8016a76:	e009      	b.n	8016a8c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016a78:	6a3b      	ldr	r3, [r7, #32]
 8016a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a7c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016a7e:	6a3b      	ldr	r3, [r7, #32]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	623b      	str	r3, [r7, #32]
 8016a84:	e002      	b.n	8016a8c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016a86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016a88:	f7fc fc43 	bl	8013312 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a90:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8016a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d012      	beq.n	8016abe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a9a:	68db      	ldr	r3, [r3, #12]
 8016a9c:	685b      	ldr	r3, [r3, #4]
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7f9 fc1a 	bl	80102d8 <lwip_htonl>
 8016aa4:	4602      	mov	r2, r0
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016aaa:	1ad3      	subs	r3, r2, r3
 8016aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016aae:	8912      	ldrh	r2, [r2, #8]
 8016ab0:	4413      	add	r3, r2
  while (seg != NULL &&
 8016ab2:	69ba      	ldr	r2, [r7, #24]
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	f4bf aed9 	bcs.w	801686c <tcp_output+0x160>
 8016aba:	e000      	b.n	8016abe <tcp_output+0x3b2>
      break;
 8016abc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d108      	bne.n	8016ad8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	2200      	movs	r2, #0
 8016aca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8016ace:	e004      	b.n	8016ada <tcp_output+0x3ce>
    goto output_done;
 8016ad0:	bf00      	nop
 8016ad2:	e002      	b.n	8016ada <tcp_output+0x3ce>
    goto output_done;
 8016ad4:	bf00      	nop
 8016ad6:	e000      	b.n	8016ada <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016ad8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	8b5b      	ldrh	r3, [r3, #26]
 8016ade:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016ae2:	b29a      	uxth	r2, r3
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016ae8:	2300      	movs	r3, #0
}
 8016aea:	4618      	mov	r0, r3
 8016aec:	3728      	adds	r7, #40	@ 0x28
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bdb0      	pop	{r4, r5, r7, pc}
 8016af2:	bf00      	nop

08016af4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b082      	sub	sp, #8
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d106      	bne.n	8016b10 <tcp_output_segment_busy+0x1c>
 8016b02:	4b09      	ldr	r3, [pc, #36]	@ (8016b28 <tcp_output_segment_busy+0x34>)
 8016b04:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016b08:	4908      	ldr	r1, [pc, #32]	@ (8016b2c <tcp_output_segment_busy+0x38>)
 8016b0a:	4809      	ldr	r0, [pc, #36]	@ (8016b30 <tcp_output_segment_busy+0x3c>)
 8016b0c:	f004 f952 	bl	801adb4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	7b9b      	ldrb	r3, [r3, #14]
 8016b16:	2b01      	cmp	r3, #1
 8016b18:	d001      	beq.n	8016b1e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	e000      	b.n	8016b20 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016b1e:	2300      	movs	r3, #0
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	3708      	adds	r7, #8
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}
 8016b28:	0801d558 	.word	0x0801d558
 8016b2c:	0801daf4 	.word	0x0801daf4
 8016b30:	0801d5ac 	.word	0x0801d5ac

08016b34 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016b34:	b5b0      	push	{r4, r5, r7, lr}
 8016b36:	b08c      	sub	sp, #48	@ 0x30
 8016b38:	af04      	add	r7, sp, #16
 8016b3a:	60f8      	str	r0, [r7, #12]
 8016b3c:	60b9      	str	r1, [r7, #8]
 8016b3e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d106      	bne.n	8016b54 <tcp_output_segment+0x20>
 8016b46:	4b64      	ldr	r3, [pc, #400]	@ (8016cd8 <tcp_output_segment+0x1a4>)
 8016b48:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8016b4c:	4963      	ldr	r1, [pc, #396]	@ (8016cdc <tcp_output_segment+0x1a8>)
 8016b4e:	4864      	ldr	r0, [pc, #400]	@ (8016ce0 <tcp_output_segment+0x1ac>)
 8016b50:	f004 f930 	bl	801adb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d106      	bne.n	8016b68 <tcp_output_segment+0x34>
 8016b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8016cd8 <tcp_output_segment+0x1a4>)
 8016b5c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8016b60:	4960      	ldr	r1, [pc, #384]	@ (8016ce4 <tcp_output_segment+0x1b0>)
 8016b62:	485f      	ldr	r0, [pc, #380]	@ (8016ce0 <tcp_output_segment+0x1ac>)
 8016b64:	f004 f926 	bl	801adb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d106      	bne.n	8016b7c <tcp_output_segment+0x48>
 8016b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8016cd8 <tcp_output_segment+0x1a4>)
 8016b70:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8016b74:	495c      	ldr	r1, [pc, #368]	@ (8016ce8 <tcp_output_segment+0x1b4>)
 8016b76:	485a      	ldr	r0, [pc, #360]	@ (8016ce0 <tcp_output_segment+0x1ac>)
 8016b78:	f004 f91c 	bl	801adb4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016b7c:	68f8      	ldr	r0, [r7, #12]
 8016b7e:	f7ff ffb9 	bl	8016af4 <tcp_output_segment_busy>
 8016b82:	4603      	mov	r3, r0
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d001      	beq.n	8016b8c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016b88:	2300      	movs	r3, #0
 8016b8a:	e0a1      	b.n	8016cd0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	68dc      	ldr	r4, [r3, #12]
 8016b94:	4610      	mov	r0, r2
 8016b96:	f7f9 fb9f 	bl	80102d8 <lwip_htonl>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	68dc      	ldr	r4, [r3, #12]
 8016ba6:	4610      	mov	r0, r2
 8016ba8:	f7f9 fb80 	bl	80102ac <lwip_htons>
 8016bac:	4603      	mov	r3, r0
 8016bae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bb4:	68ba      	ldr	r2, [r7, #8]
 8016bb6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8016bb8:	441a      	add	r2, r3
 8016bba:	68bb      	ldr	r3, [r7, #8]
 8016bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	68db      	ldr	r3, [r3, #12]
 8016bc2:	3314      	adds	r3, #20
 8016bc4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	7a9b      	ldrb	r3, [r3, #10]
 8016bca:	f003 0301 	and.w	r3, r3, #1
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d015      	beq.n	8016bfe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	3304      	adds	r3, #4
 8016bd6:	461a      	mov	r2, r3
 8016bd8:	6879      	ldr	r1, [r7, #4]
 8016bda:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8016bde:	f7fc fe8f 	bl	8013900 <tcp_eff_send_mss_netif>
 8016be2:	4603      	mov	r3, r0
 8016be4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016be6:	8b7b      	ldrh	r3, [r7, #26]
 8016be8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8016bec:	4618      	mov	r0, r3
 8016bee:	f7f9 fb73 	bl	80102d8 <lwip_htonl>
 8016bf2:	4602      	mov	r2, r0
 8016bf4:	69fb      	ldr	r3, [r7, #28]
 8016bf6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016bf8:	69fb      	ldr	r3, [r7, #28]
 8016bfa:	3304      	adds	r3, #4
 8016bfc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	da02      	bge.n	8016c0e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d10c      	bne.n	8016c30 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016c16:	4b35      	ldr	r3, [pc, #212]	@ (8016cec <tcp_output_segment+0x1b8>)
 8016c18:	681a      	ldr	r2, [r3, #0]
 8016c1a:	68bb      	ldr	r3, [r7, #8]
 8016c1c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	68db      	ldr	r3, [r3, #12]
 8016c22:	685b      	ldr	r3, [r3, #4]
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7f9 fb57 	bl	80102d8 <lwip_htonl>
 8016c2a:	4602      	mov	r2, r0
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	68da      	ldr	r2, [r3, #12]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	685b      	ldr	r3, [r3, #4]
 8016c3a:	1ad3      	subs	r3, r2, r3
 8016c3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	8959      	ldrh	r1, [r3, #10]
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	685b      	ldr	r3, [r3, #4]
 8016c48:	8b3a      	ldrh	r2, [r7, #24]
 8016c4a:	1a8a      	subs	r2, r1, r2
 8016c4c:	b292      	uxth	r2, r2
 8016c4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	685b      	ldr	r3, [r3, #4]
 8016c54:	8919      	ldrh	r1, [r3, #8]
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	685b      	ldr	r3, [r3, #4]
 8016c5a:	8b3a      	ldrh	r2, [r7, #24]
 8016c5c:	1a8a      	subs	r2, r1, r2
 8016c5e:	b292      	uxth	r2, r2
 8016c60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	685b      	ldr	r3, [r3, #4]
 8016c66:	68fa      	ldr	r2, [r7, #12]
 8016c68:	68d2      	ldr	r2, [r2, #12]
 8016c6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	68db      	ldr	r3, [r3, #12]
 8016c70:	2200      	movs	r2, #0
 8016c72:	741a      	strb	r2, [r3, #16]
 8016c74:	2200      	movs	r2, #0
 8016c76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	68da      	ldr	r2, [r3, #12]
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	7a9b      	ldrb	r3, [r3, #10]
 8016c80:	f003 0301 	and.w	r3, r3, #1
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d001      	beq.n	8016c8c <tcp_output_segment+0x158>
 8016c88:	2318      	movs	r3, #24
 8016c8a:	e000      	b.n	8016c8e <tcp_output_segment+0x15a>
 8016c8c:	2314      	movs	r3, #20
 8016c8e:	4413      	add	r3, r2
 8016c90:	69fa      	ldr	r2, [r7, #28]
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d006      	beq.n	8016ca4 <tcp_output_segment+0x170>
 8016c96:	4b10      	ldr	r3, [pc, #64]	@ (8016cd8 <tcp_output_segment+0x1a4>)
 8016c98:	f240 621c 	movw	r2, #1564	@ 0x61c
 8016c9c:	4914      	ldr	r1, [pc, #80]	@ (8016cf0 <tcp_output_segment+0x1bc>)
 8016c9e:	4810      	ldr	r0, [pc, #64]	@ (8016ce0 <tcp_output_segment+0x1ac>)
 8016ca0:	f004 f888 	bl	801adb4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	6858      	ldr	r0, [r3, #4]
 8016ca8:	68b9      	ldr	r1, [r7, #8]
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	1d1c      	adds	r4, r3, #4
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	7add      	ldrb	r5, [r3, #11]
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	7a9b      	ldrb	r3, [r3, #10]
 8016cb6:	687a      	ldr	r2, [r7, #4]
 8016cb8:	9202      	str	r2, [sp, #8]
 8016cba:	2206      	movs	r2, #6
 8016cbc:	9201      	str	r2, [sp, #4]
 8016cbe:	9300      	str	r3, [sp, #0]
 8016cc0:	462b      	mov	r3, r5
 8016cc2:	4622      	mov	r2, r4
 8016cc4:	f002 fdc6 	bl	8019854 <ip4_output_if>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3720      	adds	r7, #32
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8016cd8:	0801d558 	.word	0x0801d558
 8016cdc:	0801db1c 	.word	0x0801db1c
 8016ce0:	0801d5ac 	.word	0x0801d5ac
 8016ce4:	0801db3c 	.word	0x0801db3c
 8016ce8:	0801db5c 	.word	0x0801db5c
 8016cec:	24014bb0 	.word	0x24014bb0
 8016cf0:	0801db80 	.word	0x0801db80

08016cf4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016cf4:	b5b0      	push	{r4, r5, r7, lr}
 8016cf6:	b084      	sub	sp, #16
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d106      	bne.n	8016d10 <tcp_rexmit_rto_prepare+0x1c>
 8016d02:	4b31      	ldr	r3, [pc, #196]	@ (8016dc8 <tcp_rexmit_rto_prepare+0xd4>)
 8016d04:	f240 6263 	movw	r2, #1635	@ 0x663
 8016d08:	4930      	ldr	r1, [pc, #192]	@ (8016dcc <tcp_rexmit_rto_prepare+0xd8>)
 8016d0a:	4831      	ldr	r0, [pc, #196]	@ (8016dd0 <tcp_rexmit_rto_prepare+0xdc>)
 8016d0c:	f004 f852 	bl	801adb4 <iprintf>

  if (pcb->unacked == NULL) {
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d102      	bne.n	8016d1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016d18:	f06f 0305 	mvn.w	r3, #5
 8016d1c:	e050      	b.n	8016dc0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d22:	60fb      	str	r3, [r7, #12]
 8016d24:	e00b      	b.n	8016d3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016d26:	68f8      	ldr	r0, [r7, #12]
 8016d28:	f7ff fee4 	bl	8016af4 <tcp_output_segment_busy>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d002      	beq.n	8016d38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016d32:	f06f 0305 	mvn.w	r3, #5
 8016d36:	e043      	b.n	8016dc0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	60fb      	str	r3, [r7, #12]
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d1ef      	bne.n	8016d26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016d46:	68f8      	ldr	r0, [r7, #12]
 8016d48:	f7ff fed4 	bl	8016af4 <tcp_output_segment_busy>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d002      	beq.n	8016d58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016d52:	f06f 0305 	mvn.w	r3, #5
 8016d56:	e033      	b.n	8016dc0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	8b5b      	ldrh	r3, [r3, #26]
 8016d72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016d76:	b29a      	uxth	r2, r3
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	68db      	ldr	r3, [r3, #12]
 8016d80:	685b      	ldr	r3, [r3, #4]
 8016d82:	4618      	mov	r0, r3
 8016d84:	f7f9 faa8 	bl	80102d8 <lwip_htonl>
 8016d88:	4604      	mov	r4, r0
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	891b      	ldrh	r3, [r3, #8]
 8016d8e:	461d      	mov	r5, r3
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	899b      	ldrh	r3, [r3, #12]
 8016d96:	b29b      	uxth	r3, r3
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7f9 fa87 	bl	80102ac <lwip_htons>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	b2db      	uxtb	r3, r3
 8016da2:	f003 0303 	and.w	r3, r3, #3
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d001      	beq.n	8016dae <tcp_rexmit_rto_prepare+0xba>
 8016daa:	2301      	movs	r3, #1
 8016dac:	e000      	b.n	8016db0 <tcp_rexmit_rto_prepare+0xbc>
 8016dae:	2300      	movs	r3, #0
 8016db0:	442b      	add	r3, r5
 8016db2:	18e2      	adds	r2, r4, r3
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8016dbe:	2300      	movs	r3, #0
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3710      	adds	r7, #16
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8016dc8:	0801d558 	.word	0x0801d558
 8016dcc:	0801db94 	.word	0x0801db94
 8016dd0:	0801d5ac 	.word	0x0801d5ac

08016dd4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d106      	bne.n	8016df0 <tcp_rexmit_rto_commit+0x1c>
 8016de2:	4b0d      	ldr	r3, [pc, #52]	@ (8016e18 <tcp_rexmit_rto_commit+0x44>)
 8016de4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016de8:	490c      	ldr	r1, [pc, #48]	@ (8016e1c <tcp_rexmit_rto_commit+0x48>)
 8016dea:	480d      	ldr	r0, [pc, #52]	@ (8016e20 <tcp_rexmit_rto_commit+0x4c>)
 8016dec:	f003 ffe2 	bl	801adb4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016df6:	2bff      	cmp	r3, #255	@ 0xff
 8016df8:	d007      	beq.n	8016e0a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016e00:	3301      	adds	r3, #1
 8016e02:	b2da      	uxtb	r2, r3
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f7ff fc7e 	bl	801670c <tcp_output>
}
 8016e10:	bf00      	nop
 8016e12:	3708      	adds	r7, #8
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}
 8016e18:	0801d558 	.word	0x0801d558
 8016e1c:	0801dbb8 	.word	0x0801dbb8
 8016e20:	0801d5ac 	.word	0x0801d5ac

08016e24 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b082      	sub	sp, #8
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d106      	bne.n	8016e40 <tcp_rexmit_rto+0x1c>
 8016e32:	4b0a      	ldr	r3, [pc, #40]	@ (8016e5c <tcp_rexmit_rto+0x38>)
 8016e34:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8016e38:	4909      	ldr	r1, [pc, #36]	@ (8016e60 <tcp_rexmit_rto+0x3c>)
 8016e3a:	480a      	ldr	r0, [pc, #40]	@ (8016e64 <tcp_rexmit_rto+0x40>)
 8016e3c:	f003 ffba 	bl	801adb4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f7ff ff57 	bl	8016cf4 <tcp_rexmit_rto_prepare>
 8016e46:	4603      	mov	r3, r0
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d102      	bne.n	8016e52 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016e4c:	6878      	ldr	r0, [r7, #4]
 8016e4e:	f7ff ffc1 	bl	8016dd4 <tcp_rexmit_rto_commit>
  }
}
 8016e52:	bf00      	nop
 8016e54:	3708      	adds	r7, #8
 8016e56:	46bd      	mov	sp, r7
 8016e58:	bd80      	pop	{r7, pc}
 8016e5a:	bf00      	nop
 8016e5c:	0801d558 	.word	0x0801d558
 8016e60:	0801dbdc 	.word	0x0801dbdc
 8016e64:	0801d5ac 	.word	0x0801d5ac

08016e68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016e68:	b590      	push	{r4, r7, lr}
 8016e6a:	b085      	sub	sp, #20
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d106      	bne.n	8016e84 <tcp_rexmit+0x1c>
 8016e76:	4b2f      	ldr	r3, [pc, #188]	@ (8016f34 <tcp_rexmit+0xcc>)
 8016e78:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8016e7c:	492e      	ldr	r1, [pc, #184]	@ (8016f38 <tcp_rexmit+0xd0>)
 8016e7e:	482f      	ldr	r0, [pc, #188]	@ (8016f3c <tcp_rexmit+0xd4>)
 8016e80:	f003 ff98 	bl	801adb4 <iprintf>

  if (pcb->unacked == NULL) {
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d102      	bne.n	8016e92 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016e8c:	f06f 0305 	mvn.w	r3, #5
 8016e90:	e04c      	b.n	8016f2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e96:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016e98:	68b8      	ldr	r0, [r7, #8]
 8016e9a:	f7ff fe2b 	bl	8016af4 <tcp_output_segment_busy>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d002      	beq.n	8016eaa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016ea4:	f06f 0305 	mvn.w	r3, #5
 8016ea8:	e040      	b.n	8016f2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016eaa:	68bb      	ldr	r3, [r7, #8]
 8016eac:	681a      	ldr	r2, [r3, #0]
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	336c      	adds	r3, #108	@ 0x6c
 8016eb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016eb8:	e002      	b.n	8016ec0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d011      	beq.n	8016eec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	68db      	ldr	r3, [r3, #12]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7f9 fa01 	bl	80102d8 <lwip_htonl>
 8016ed6:	4604      	mov	r4, r0
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	68db      	ldr	r3, [r3, #12]
 8016edc:	685b      	ldr	r3, [r3, #4]
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7f9 f9fa 	bl	80102d8 <lwip_htonl>
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	dbe6      	blt.n	8016eba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	681a      	ldr	r2, [r3, #0]
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	68ba      	ldr	r2, [r7, #8]
 8016ef8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d103      	bne.n	8016f0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2200      	movs	r2, #0
 8016f06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016f10:	2bff      	cmp	r3, #255	@ 0xff
 8016f12:	d007      	beq.n	8016f24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016f1a:	3301      	adds	r3, #1
 8016f1c:	b2da      	uxtb	r2, r3
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	2200      	movs	r2, #0
 8016f28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016f2a:	2300      	movs	r3, #0
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3714      	adds	r7, #20
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd90      	pop	{r4, r7, pc}
 8016f34:	0801d558 	.word	0x0801d558
 8016f38:	0801dbf8 	.word	0x0801dbf8
 8016f3c:	0801d5ac 	.word	0x0801d5ac

08016f40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b082      	sub	sp, #8
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d106      	bne.n	8016f5c <tcp_rexmit_fast+0x1c>
 8016f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8016ff8 <tcp_rexmit_fast+0xb8>)
 8016f50:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8016f54:	4929      	ldr	r1, [pc, #164]	@ (8016ffc <tcp_rexmit_fast+0xbc>)
 8016f56:	482a      	ldr	r0, [pc, #168]	@ (8017000 <tcp_rexmit_fast+0xc0>)
 8016f58:	f003 ff2c 	bl	801adb4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d045      	beq.n	8016ff0 <tcp_rexmit_fast+0xb0>
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	8b5b      	ldrh	r3, [r3, #26]
 8016f68:	f003 0304 	and.w	r3, r3, #4
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d13f      	bne.n	8016ff0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f7ff ff79 	bl	8016e68 <tcp_rexmit>
 8016f76:	4603      	mov	r3, r0
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d139      	bne.n	8016ff0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016f88:	4293      	cmp	r3, r2
 8016f8a:	bf28      	it	cs
 8016f8c:	4613      	movcs	r3, r2
 8016f8e:	b29b      	uxth	r3, r3
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	da00      	bge.n	8016f96 <tcp_rexmit_fast+0x56>
 8016f94:	3301      	adds	r3, #1
 8016f96:	105b      	asrs	r3, r3, #1
 8016f98:	b29a      	uxth	r2, r3
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8016fa6:	461a      	mov	r2, r3
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016fac:	005b      	lsls	r3, r3, #1
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d206      	bcs.n	8016fc0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016fb6:	005b      	lsls	r3, r3, #1
 8016fb8:	b29a      	uxth	r2, r3
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016fca:	4619      	mov	r1, r3
 8016fcc:	0049      	lsls	r1, r1, #1
 8016fce:	440b      	add	r3, r1
 8016fd0:	b29b      	uxth	r3, r3
 8016fd2:	4413      	add	r3, r2
 8016fd4:	b29a      	uxth	r2, r3
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	8b5b      	ldrh	r3, [r3, #26]
 8016fe0:	f043 0304 	orr.w	r3, r3, #4
 8016fe4:	b29a      	uxth	r2, r3
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2200      	movs	r2, #0
 8016fee:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8016ff0:	bf00      	nop
 8016ff2:	3708      	adds	r7, #8
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}
 8016ff8:	0801d558 	.word	0x0801d558
 8016ffc:	0801dc10 	.word	0x0801dc10
 8017000:	0801d5ac 	.word	0x0801d5ac

08017004 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b086      	sub	sp, #24
 8017008:	af00      	add	r7, sp, #0
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	607b      	str	r3, [r7, #4]
 801700e:	460b      	mov	r3, r1
 8017010:	817b      	strh	r3, [r7, #10]
 8017012:	4613      	mov	r3, r2
 8017014:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017016:	897a      	ldrh	r2, [r7, #10]
 8017018:	893b      	ldrh	r3, [r7, #8]
 801701a:	4413      	add	r3, r2
 801701c:	b29b      	uxth	r3, r3
 801701e:	3314      	adds	r3, #20
 8017020:	b29b      	uxth	r3, r3
 8017022:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017026:	4619      	mov	r1, r3
 8017028:	2022      	movs	r0, #34	@ 0x22
 801702a:	f7fa fb09 	bl	8011640 <pbuf_alloc>
 801702e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d04d      	beq.n	80170d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017036:	897b      	ldrh	r3, [r7, #10]
 8017038:	3313      	adds	r3, #19
 801703a:	697a      	ldr	r2, [r7, #20]
 801703c:	8952      	ldrh	r2, [r2, #10]
 801703e:	4293      	cmp	r3, r2
 8017040:	db06      	blt.n	8017050 <tcp_output_alloc_header_common+0x4c>
 8017042:	4b26      	ldr	r3, [pc, #152]	@ (80170dc <tcp_output_alloc_header_common+0xd8>)
 8017044:	f240 7223 	movw	r2, #1827	@ 0x723
 8017048:	4925      	ldr	r1, [pc, #148]	@ (80170e0 <tcp_output_alloc_header_common+0xdc>)
 801704a:	4826      	ldr	r0, [pc, #152]	@ (80170e4 <tcp_output_alloc_header_common+0xe0>)
 801704c:	f003 feb2 	bl	801adb4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017050:	697b      	ldr	r3, [r7, #20]
 8017052:	685b      	ldr	r3, [r3, #4]
 8017054:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017056:	8c3b      	ldrh	r3, [r7, #32]
 8017058:	4618      	mov	r0, r3
 801705a:	f7f9 f927 	bl	80102ac <lwip_htons>
 801705e:	4603      	mov	r3, r0
 8017060:	461a      	mov	r2, r3
 8017062:	693b      	ldr	r3, [r7, #16]
 8017064:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017066:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017068:	4618      	mov	r0, r3
 801706a:	f7f9 f91f 	bl	80102ac <lwip_htons>
 801706e:	4603      	mov	r3, r0
 8017070:	461a      	mov	r2, r3
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017076:	693b      	ldr	r3, [r7, #16]
 8017078:	687a      	ldr	r2, [r7, #4]
 801707a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801707c:	68f8      	ldr	r0, [r7, #12]
 801707e:	f7f9 f92b 	bl	80102d8 <lwip_htonl>
 8017082:	4602      	mov	r2, r0
 8017084:	693b      	ldr	r3, [r7, #16]
 8017086:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017088:	897b      	ldrh	r3, [r7, #10]
 801708a:	089b      	lsrs	r3, r3, #2
 801708c:	b29b      	uxth	r3, r3
 801708e:	3305      	adds	r3, #5
 8017090:	b29b      	uxth	r3, r3
 8017092:	031b      	lsls	r3, r3, #12
 8017094:	b29a      	uxth	r2, r3
 8017096:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801709a:	b29b      	uxth	r3, r3
 801709c:	4313      	orrs	r3, r2
 801709e:	b29b      	uxth	r3, r3
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7f9 f903 	bl	80102ac <lwip_htons>
 80170a6:	4603      	mov	r3, r0
 80170a8:	461a      	mov	r2, r3
 80170aa:	693b      	ldr	r3, [r7, #16]
 80170ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80170ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80170b0:	4618      	mov	r0, r3
 80170b2:	f7f9 f8fb 	bl	80102ac <lwip_htons>
 80170b6:	4603      	mov	r3, r0
 80170b8:	461a      	mov	r2, r3
 80170ba:	693b      	ldr	r3, [r7, #16]
 80170bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80170be:	693b      	ldr	r3, [r7, #16]
 80170c0:	2200      	movs	r2, #0
 80170c2:	741a      	strb	r2, [r3, #16]
 80170c4:	2200      	movs	r2, #0
 80170c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80170c8:	693b      	ldr	r3, [r7, #16]
 80170ca:	2200      	movs	r2, #0
 80170cc:	749a      	strb	r2, [r3, #18]
 80170ce:	2200      	movs	r2, #0
 80170d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80170d2:	697b      	ldr	r3, [r7, #20]
}
 80170d4:	4618      	mov	r0, r3
 80170d6:	3718      	adds	r7, #24
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}
 80170dc:	0801d558 	.word	0x0801d558
 80170e0:	0801dc30 	.word	0x0801dc30
 80170e4:	0801d5ac 	.word	0x0801d5ac

080170e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80170e8:	b5b0      	push	{r4, r5, r7, lr}
 80170ea:	b08a      	sub	sp, #40	@ 0x28
 80170ec:	af04      	add	r7, sp, #16
 80170ee:	60f8      	str	r0, [r7, #12]
 80170f0:	607b      	str	r3, [r7, #4]
 80170f2:	460b      	mov	r3, r1
 80170f4:	817b      	strh	r3, [r7, #10]
 80170f6:	4613      	mov	r3, r2
 80170f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d106      	bne.n	801710e <tcp_output_alloc_header+0x26>
 8017100:	4b15      	ldr	r3, [pc, #84]	@ (8017158 <tcp_output_alloc_header+0x70>)
 8017102:	f240 7242 	movw	r2, #1858	@ 0x742
 8017106:	4915      	ldr	r1, [pc, #84]	@ (801715c <tcp_output_alloc_header+0x74>)
 8017108:	4815      	ldr	r0, [pc, #84]	@ (8017160 <tcp_output_alloc_header+0x78>)
 801710a:	f003 fe53 	bl	801adb4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	8adb      	ldrh	r3, [r3, #22]
 8017116:	68fa      	ldr	r2, [r7, #12]
 8017118:	8b12      	ldrh	r2, [r2, #24]
 801711a:	68f9      	ldr	r1, [r7, #12]
 801711c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801711e:	893d      	ldrh	r5, [r7, #8]
 8017120:	897c      	ldrh	r4, [r7, #10]
 8017122:	9103      	str	r1, [sp, #12]
 8017124:	2110      	movs	r1, #16
 8017126:	9102      	str	r1, [sp, #8]
 8017128:	9201      	str	r2, [sp, #4]
 801712a:	9300      	str	r3, [sp, #0]
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	462a      	mov	r2, r5
 8017130:	4621      	mov	r1, r4
 8017132:	f7ff ff67 	bl	8017004 <tcp_output_alloc_header_common>
 8017136:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017138:	697b      	ldr	r3, [r7, #20]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d006      	beq.n	801714c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017142:	68fa      	ldr	r2, [r7, #12]
 8017144:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017146:	441a      	add	r2, r3
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801714c:	697b      	ldr	r3, [r7, #20]
}
 801714e:	4618      	mov	r0, r3
 8017150:	3718      	adds	r7, #24
 8017152:	46bd      	mov	sp, r7
 8017154:	bdb0      	pop	{r4, r5, r7, pc}
 8017156:	bf00      	nop
 8017158:	0801d558 	.word	0x0801d558
 801715c:	0801dc60 	.word	0x0801dc60
 8017160:	0801d5ac 	.word	0x0801d5ac

08017164 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b088      	sub	sp, #32
 8017168:	af00      	add	r7, sp, #0
 801716a:	60f8      	str	r0, [r7, #12]
 801716c:	60b9      	str	r1, [r7, #8]
 801716e:	4611      	mov	r1, r2
 8017170:	461a      	mov	r2, r3
 8017172:	460b      	mov	r3, r1
 8017174:	71fb      	strb	r3, [r7, #7]
 8017176:	4613      	mov	r3, r2
 8017178:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801717a:	2300      	movs	r3, #0
 801717c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801717e:	68bb      	ldr	r3, [r7, #8]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d106      	bne.n	8017192 <tcp_output_fill_options+0x2e>
 8017184:	4b12      	ldr	r3, [pc, #72]	@ (80171d0 <tcp_output_fill_options+0x6c>)
 8017186:	f240 7256 	movw	r2, #1878	@ 0x756
 801718a:	4912      	ldr	r1, [pc, #72]	@ (80171d4 <tcp_output_fill_options+0x70>)
 801718c:	4812      	ldr	r0, [pc, #72]	@ (80171d8 <tcp_output_fill_options+0x74>)
 801718e:	f003 fe11 	bl	801adb4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	685b      	ldr	r3, [r3, #4]
 8017196:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017198:	69bb      	ldr	r3, [r7, #24]
 801719a:	3314      	adds	r3, #20
 801719c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801719e:	8bfb      	ldrh	r3, [r7, #30]
 80171a0:	009b      	lsls	r3, r3, #2
 80171a2:	461a      	mov	r2, r3
 80171a4:	79fb      	ldrb	r3, [r7, #7]
 80171a6:	009b      	lsls	r3, r3, #2
 80171a8:	f003 0304 	and.w	r3, r3, #4
 80171ac:	4413      	add	r3, r2
 80171ae:	3314      	adds	r3, #20
 80171b0:	69ba      	ldr	r2, [r7, #24]
 80171b2:	4413      	add	r3, r2
 80171b4:	697a      	ldr	r2, [r7, #20]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d006      	beq.n	80171c8 <tcp_output_fill_options+0x64>
 80171ba:	4b05      	ldr	r3, [pc, #20]	@ (80171d0 <tcp_output_fill_options+0x6c>)
 80171bc:	f240 7275 	movw	r2, #1909	@ 0x775
 80171c0:	4906      	ldr	r1, [pc, #24]	@ (80171dc <tcp_output_fill_options+0x78>)
 80171c2:	4805      	ldr	r0, [pc, #20]	@ (80171d8 <tcp_output_fill_options+0x74>)
 80171c4:	f003 fdf6 	bl	801adb4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80171c8:	bf00      	nop
 80171ca:	3720      	adds	r7, #32
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}
 80171d0:	0801d558 	.word	0x0801d558
 80171d4:	0801dc88 	.word	0x0801dc88
 80171d8:	0801d5ac 	.word	0x0801d5ac
 80171dc:	0801db80 	.word	0x0801db80

080171e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b08a      	sub	sp, #40	@ 0x28
 80171e4:	af04      	add	r7, sp, #16
 80171e6:	60f8      	str	r0, [r7, #12]
 80171e8:	60b9      	str	r1, [r7, #8]
 80171ea:	607a      	str	r2, [r7, #4]
 80171ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d106      	bne.n	8017202 <tcp_output_control_segment+0x22>
 80171f4:	4b1c      	ldr	r3, [pc, #112]	@ (8017268 <tcp_output_control_segment+0x88>)
 80171f6:	f240 7287 	movw	r2, #1927	@ 0x787
 80171fa:	491c      	ldr	r1, [pc, #112]	@ (801726c <tcp_output_control_segment+0x8c>)
 80171fc:	481c      	ldr	r0, [pc, #112]	@ (8017270 <tcp_output_control_segment+0x90>)
 80171fe:	f003 fdd9 	bl	801adb4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017202:	683a      	ldr	r2, [r7, #0]
 8017204:	6879      	ldr	r1, [r7, #4]
 8017206:	68f8      	ldr	r0, [r7, #12]
 8017208:	f7fe ff42 	bl	8016090 <tcp_route>
 801720c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801720e:	693b      	ldr	r3, [r7, #16]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d102      	bne.n	801721a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017214:	23fc      	movs	r3, #252	@ 0xfc
 8017216:	75fb      	strb	r3, [r7, #23]
 8017218:	e01c      	b.n	8017254 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d006      	beq.n	801722e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	7adb      	ldrb	r3, [r3, #11]
 8017224:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	7a9b      	ldrb	r3, [r3, #10]
 801722a:	757b      	strb	r3, [r7, #21]
 801722c:	e003      	b.n	8017236 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801722e:	23ff      	movs	r3, #255	@ 0xff
 8017230:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017232:	2300      	movs	r3, #0
 8017234:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017236:	7dba      	ldrb	r2, [r7, #22]
 8017238:	693b      	ldr	r3, [r7, #16]
 801723a:	9302      	str	r3, [sp, #8]
 801723c:	2306      	movs	r3, #6
 801723e:	9301      	str	r3, [sp, #4]
 8017240:	7d7b      	ldrb	r3, [r7, #21]
 8017242:	9300      	str	r3, [sp, #0]
 8017244:	4613      	mov	r3, r2
 8017246:	683a      	ldr	r2, [r7, #0]
 8017248:	6879      	ldr	r1, [r7, #4]
 801724a:	68b8      	ldr	r0, [r7, #8]
 801724c:	f002 fb02 	bl	8019854 <ip4_output_if>
 8017250:	4603      	mov	r3, r0
 8017252:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017254:	68b8      	ldr	r0, [r7, #8]
 8017256:	f7fa fcdb 	bl	8011c10 <pbuf_free>
  return err;
 801725a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801725e:	4618      	mov	r0, r3
 8017260:	3718      	adds	r7, #24
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}
 8017266:	bf00      	nop
 8017268:	0801d558 	.word	0x0801d558
 801726c:	0801dcb0 	.word	0x0801dcb0
 8017270:	0801d5ac 	.word	0x0801d5ac

08017274 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017274:	b590      	push	{r4, r7, lr}
 8017276:	b08b      	sub	sp, #44	@ 0x2c
 8017278:	af04      	add	r7, sp, #16
 801727a:	60f8      	str	r0, [r7, #12]
 801727c:	60b9      	str	r1, [r7, #8]
 801727e:	607a      	str	r2, [r7, #4]
 8017280:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017282:	683b      	ldr	r3, [r7, #0]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d106      	bne.n	8017296 <tcp_rst+0x22>
 8017288:	4b1f      	ldr	r3, [pc, #124]	@ (8017308 <tcp_rst+0x94>)
 801728a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801728e:	491f      	ldr	r1, [pc, #124]	@ (801730c <tcp_rst+0x98>)
 8017290:	481f      	ldr	r0, [pc, #124]	@ (8017310 <tcp_rst+0x9c>)
 8017292:	f003 fd8f 	bl	801adb4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017298:	2b00      	cmp	r3, #0
 801729a:	d106      	bne.n	80172aa <tcp_rst+0x36>
 801729c:	4b1a      	ldr	r3, [pc, #104]	@ (8017308 <tcp_rst+0x94>)
 801729e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80172a2:	491c      	ldr	r1, [pc, #112]	@ (8017314 <tcp_rst+0xa0>)
 80172a4:	481a      	ldr	r0, [pc, #104]	@ (8017310 <tcp_rst+0x9c>)
 80172a6:	f003 fd85 	bl	801adb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80172aa:	2300      	movs	r3, #0
 80172ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80172ae:	f24d 0316 	movw	r3, #53270	@ 0xd016
 80172b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80172b4:	7dfb      	ldrb	r3, [r7, #23]
 80172b6:	b29c      	uxth	r4, r3
 80172b8:	68b8      	ldr	r0, [r7, #8]
 80172ba:	f7f9 f80d 	bl	80102d8 <lwip_htonl>
 80172be:	4602      	mov	r2, r0
 80172c0:	8abb      	ldrh	r3, [r7, #20]
 80172c2:	9303      	str	r3, [sp, #12]
 80172c4:	2314      	movs	r3, #20
 80172c6:	9302      	str	r3, [sp, #8]
 80172c8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80172ca:	9301      	str	r3, [sp, #4]
 80172cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80172ce:	9300      	str	r3, [sp, #0]
 80172d0:	4613      	mov	r3, r2
 80172d2:	2200      	movs	r2, #0
 80172d4:	4621      	mov	r1, r4
 80172d6:	6878      	ldr	r0, [r7, #4]
 80172d8:	f7ff fe94 	bl	8017004 <tcp_output_alloc_header_common>
 80172dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80172de:	693b      	ldr	r3, [r7, #16]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d00c      	beq.n	80172fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80172e4:	7dfb      	ldrb	r3, [r7, #23]
 80172e6:	2200      	movs	r2, #0
 80172e8:	6939      	ldr	r1, [r7, #16]
 80172ea:	68f8      	ldr	r0, [r7, #12]
 80172ec:	f7ff ff3a 	bl	8017164 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80172f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172f2:	683a      	ldr	r2, [r7, #0]
 80172f4:	6939      	ldr	r1, [r7, #16]
 80172f6:	68f8      	ldr	r0, [r7, #12]
 80172f8:	f7ff ff72 	bl	80171e0 <tcp_output_control_segment>
 80172fc:	e000      	b.n	8017300 <tcp_rst+0x8c>
    return;
 80172fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017300:	371c      	adds	r7, #28
 8017302:	46bd      	mov	sp, r7
 8017304:	bd90      	pop	{r4, r7, pc}
 8017306:	bf00      	nop
 8017308:	0801d558 	.word	0x0801d558
 801730c:	0801dcdc 	.word	0x0801dcdc
 8017310:	0801d5ac 	.word	0x0801d5ac
 8017314:	0801dcf8 	.word	0x0801dcf8

08017318 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017318:	b590      	push	{r4, r7, lr}
 801731a:	b087      	sub	sp, #28
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017320:	2300      	movs	r3, #0
 8017322:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017324:	2300      	movs	r3, #0
 8017326:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d106      	bne.n	801733c <tcp_send_empty_ack+0x24>
 801732e:	4b28      	ldr	r3, [pc, #160]	@ (80173d0 <tcp_send_empty_ack+0xb8>)
 8017330:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017334:	4927      	ldr	r1, [pc, #156]	@ (80173d4 <tcp_send_empty_ack+0xbc>)
 8017336:	4828      	ldr	r0, [pc, #160]	@ (80173d8 <tcp_send_empty_ack+0xc0>)
 8017338:	f003 fd3c 	bl	801adb4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801733c:	7dfb      	ldrb	r3, [r7, #23]
 801733e:	009b      	lsls	r3, r3, #2
 8017340:	b2db      	uxtb	r3, r3
 8017342:	f003 0304 	and.w	r3, r3, #4
 8017346:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017348:	7d7b      	ldrb	r3, [r7, #21]
 801734a:	b29c      	uxth	r4, r3
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017350:	4618      	mov	r0, r3
 8017352:	f7f8 ffc1 	bl	80102d8 <lwip_htonl>
 8017356:	4603      	mov	r3, r0
 8017358:	2200      	movs	r2, #0
 801735a:	4621      	mov	r1, r4
 801735c:	6878      	ldr	r0, [r7, #4]
 801735e:	f7ff fec3 	bl	80170e8 <tcp_output_alloc_header>
 8017362:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017364:	693b      	ldr	r3, [r7, #16]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d109      	bne.n	801737e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	8b5b      	ldrh	r3, [r3, #26]
 801736e:	f043 0303 	orr.w	r3, r3, #3
 8017372:	b29a      	uxth	r2, r3
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017378:	f06f 0301 	mvn.w	r3, #1
 801737c:	e023      	b.n	80173c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801737e:	7dbb      	ldrb	r3, [r7, #22]
 8017380:	7dfa      	ldrb	r2, [r7, #23]
 8017382:	6939      	ldr	r1, [r7, #16]
 8017384:	6878      	ldr	r0, [r7, #4]
 8017386:	f7ff feed 	bl	8017164 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801738a:	687a      	ldr	r2, [r7, #4]
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	3304      	adds	r3, #4
 8017390:	6939      	ldr	r1, [r7, #16]
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f7ff ff24 	bl	80171e0 <tcp_output_control_segment>
 8017398:	4603      	mov	r3, r0
 801739a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801739c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d007      	beq.n	80173b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	8b5b      	ldrh	r3, [r3, #26]
 80173a8:	f043 0303 	orr.w	r3, r3, #3
 80173ac:	b29a      	uxth	r2, r3
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	835a      	strh	r2, [r3, #26]
 80173b2:	e006      	b.n	80173c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	8b5b      	ldrh	r3, [r3, #26]
 80173b8:	f023 0303 	bic.w	r3, r3, #3
 80173bc:	b29a      	uxth	r2, r3
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80173c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80173c6:	4618      	mov	r0, r3
 80173c8:	371c      	adds	r7, #28
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd90      	pop	{r4, r7, pc}
 80173ce:	bf00      	nop
 80173d0:	0801d558 	.word	0x0801d558
 80173d4:	0801dd14 	.word	0x0801dd14
 80173d8:	0801d5ac 	.word	0x0801d5ac

080173dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80173dc:	b590      	push	{r4, r7, lr}
 80173de:	b087      	sub	sp, #28
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80173e4:	2300      	movs	r3, #0
 80173e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d106      	bne.n	80173fc <tcp_keepalive+0x20>
 80173ee:	4b18      	ldr	r3, [pc, #96]	@ (8017450 <tcp_keepalive+0x74>)
 80173f0:	f640 0224 	movw	r2, #2084	@ 0x824
 80173f4:	4917      	ldr	r1, [pc, #92]	@ (8017454 <tcp_keepalive+0x78>)
 80173f6:	4818      	ldr	r0, [pc, #96]	@ (8017458 <tcp_keepalive+0x7c>)
 80173f8:	f003 fcdc 	bl	801adb4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80173fc:	7dfb      	ldrb	r3, [r7, #23]
 80173fe:	b29c      	uxth	r4, r3
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017404:	3b01      	subs	r3, #1
 8017406:	4618      	mov	r0, r3
 8017408:	f7f8 ff66 	bl	80102d8 <lwip_htonl>
 801740c:	4603      	mov	r3, r0
 801740e:	2200      	movs	r2, #0
 8017410:	4621      	mov	r1, r4
 8017412:	6878      	ldr	r0, [r7, #4]
 8017414:	f7ff fe68 	bl	80170e8 <tcp_output_alloc_header>
 8017418:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d102      	bne.n	8017426 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017420:	f04f 33ff 	mov.w	r3, #4294967295
 8017424:	e010      	b.n	8017448 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017426:	7dfb      	ldrb	r3, [r7, #23]
 8017428:	2200      	movs	r2, #0
 801742a:	6939      	ldr	r1, [r7, #16]
 801742c:	6878      	ldr	r0, [r7, #4]
 801742e:	f7ff fe99 	bl	8017164 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017432:	687a      	ldr	r2, [r7, #4]
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	3304      	adds	r3, #4
 8017438:	6939      	ldr	r1, [r7, #16]
 801743a:	6878      	ldr	r0, [r7, #4]
 801743c:	f7ff fed0 	bl	80171e0 <tcp_output_control_segment>
 8017440:	4603      	mov	r3, r0
 8017442:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017448:	4618      	mov	r0, r3
 801744a:	371c      	adds	r7, #28
 801744c:	46bd      	mov	sp, r7
 801744e:	bd90      	pop	{r4, r7, pc}
 8017450:	0801d558 	.word	0x0801d558
 8017454:	0801dd34 	.word	0x0801dd34
 8017458:	0801d5ac 	.word	0x0801d5ac

0801745c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801745c:	b590      	push	{r4, r7, lr}
 801745e:	b08b      	sub	sp, #44	@ 0x2c
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017464:	2300      	movs	r3, #0
 8017466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d106      	bne.n	801747e <tcp_zero_window_probe+0x22>
 8017470:	4b4c      	ldr	r3, [pc, #304]	@ (80175a4 <tcp_zero_window_probe+0x148>)
 8017472:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017476:	494c      	ldr	r1, [pc, #304]	@ (80175a8 <tcp_zero_window_probe+0x14c>)
 8017478:	484c      	ldr	r0, [pc, #304]	@ (80175ac <tcp_zero_window_probe+0x150>)
 801747a:	f003 fc9b 	bl	801adb4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017482:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017484:	6a3b      	ldr	r3, [r7, #32]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d101      	bne.n	801748e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801748a:	2300      	movs	r3, #0
 801748c:	e086      	b.n	801759c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017494:	2bff      	cmp	r3, #255	@ 0xff
 8017496:	d007      	beq.n	80174a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801749e:	3301      	adds	r3, #1
 80174a0:	b2da      	uxtb	r2, r3
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80174a8:	6a3b      	ldr	r3, [r7, #32]
 80174aa:	68db      	ldr	r3, [r3, #12]
 80174ac:	899b      	ldrh	r3, [r3, #12]
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7f8 fefb 	bl	80102ac <lwip_htons>
 80174b6:	4603      	mov	r3, r0
 80174b8:	b2db      	uxtb	r3, r3
 80174ba:	f003 0301 	and.w	r3, r3, #1
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d005      	beq.n	80174ce <tcp_zero_window_probe+0x72>
 80174c2:	6a3b      	ldr	r3, [r7, #32]
 80174c4:	891b      	ldrh	r3, [r3, #8]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d101      	bne.n	80174ce <tcp_zero_window_probe+0x72>
 80174ca:	2301      	movs	r3, #1
 80174cc:	e000      	b.n	80174d0 <tcp_zero_window_probe+0x74>
 80174ce:	2300      	movs	r3, #0
 80174d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80174d2:	7ffb      	ldrb	r3, [r7, #31]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	bf0c      	ite	eq
 80174d8:	2301      	moveq	r3, #1
 80174da:	2300      	movne	r3, #0
 80174dc:	b2db      	uxtb	r3, r3
 80174de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80174e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80174e4:	b299      	uxth	r1, r3
 80174e6:	6a3b      	ldr	r3, [r7, #32]
 80174e8:	68db      	ldr	r3, [r3, #12]
 80174ea:	685b      	ldr	r3, [r3, #4]
 80174ec:	8bba      	ldrh	r2, [r7, #28]
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f7ff fdfa 	bl	80170e8 <tcp_output_alloc_header>
 80174f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80174f6:	69bb      	ldr	r3, [r7, #24]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d102      	bne.n	8017502 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80174fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017500:	e04c      	b.n	801759c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017502:	69bb      	ldr	r3, [r7, #24]
 8017504:	685b      	ldr	r3, [r3, #4]
 8017506:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017508:	7ffb      	ldrb	r3, [r7, #31]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d011      	beq.n	8017532 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801750e:	697b      	ldr	r3, [r7, #20]
 8017510:	899b      	ldrh	r3, [r3, #12]
 8017512:	b29b      	uxth	r3, r3
 8017514:	b21b      	sxth	r3, r3
 8017516:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801751a:	b21c      	sxth	r4, r3
 801751c:	2011      	movs	r0, #17
 801751e:	f7f8 fec5 	bl	80102ac <lwip_htons>
 8017522:	4603      	mov	r3, r0
 8017524:	b21b      	sxth	r3, r3
 8017526:	4323      	orrs	r3, r4
 8017528:	b21b      	sxth	r3, r3
 801752a:	b29a      	uxth	r2, r3
 801752c:	697b      	ldr	r3, [r7, #20]
 801752e:	819a      	strh	r2, [r3, #12]
 8017530:	e010      	b.n	8017554 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017532:	69bb      	ldr	r3, [r7, #24]
 8017534:	685b      	ldr	r3, [r3, #4]
 8017536:	3314      	adds	r3, #20
 8017538:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801753a:	6a3b      	ldr	r3, [r7, #32]
 801753c:	6858      	ldr	r0, [r3, #4]
 801753e:	6a3b      	ldr	r3, [r7, #32]
 8017540:	685b      	ldr	r3, [r3, #4]
 8017542:	891a      	ldrh	r2, [r3, #8]
 8017544:	6a3b      	ldr	r3, [r7, #32]
 8017546:	891b      	ldrh	r3, [r3, #8]
 8017548:	1ad3      	subs	r3, r2, r3
 801754a:	b29b      	uxth	r3, r3
 801754c:	2201      	movs	r2, #1
 801754e:	6939      	ldr	r1, [r7, #16]
 8017550:	f7fa fd64 	bl	801201c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017554:	6a3b      	ldr	r3, [r7, #32]
 8017556:	68db      	ldr	r3, [r3, #12]
 8017558:	685b      	ldr	r3, [r3, #4]
 801755a:	4618      	mov	r0, r3
 801755c:	f7f8 febc 	bl	80102d8 <lwip_htonl>
 8017560:	4603      	mov	r3, r0
 8017562:	3301      	adds	r3, #1
 8017564:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	1ad3      	subs	r3, r2, r3
 801756e:	2b00      	cmp	r3, #0
 8017570:	da02      	bge.n	8017578 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	68fa      	ldr	r2, [r7, #12]
 8017576:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801757c:	2200      	movs	r2, #0
 801757e:	69b9      	ldr	r1, [r7, #24]
 8017580:	6878      	ldr	r0, [r7, #4]
 8017582:	f7ff fdef 	bl	8017164 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017586:	687a      	ldr	r2, [r7, #4]
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	3304      	adds	r3, #4
 801758c:	69b9      	ldr	r1, [r7, #24]
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f7ff fe26 	bl	80171e0 <tcp_output_control_segment>
 8017594:	4603      	mov	r3, r0
 8017596:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017598:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801759c:	4618      	mov	r0, r3
 801759e:	372c      	adds	r7, #44	@ 0x2c
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd90      	pop	{r4, r7, pc}
 80175a4:	0801d558 	.word	0x0801d558
 80175a8:	0801dd50 	.word	0x0801dd50
 80175ac:	0801d5ac 	.word	0x0801d5ac

080175b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b082      	sub	sp, #8
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80175b8:	f7fa ff0a 	bl	80123d0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80175bc:	4b0a      	ldr	r3, [pc, #40]	@ (80175e8 <tcpip_tcp_timer+0x38>)
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d103      	bne.n	80175cc <tcpip_tcp_timer+0x1c>
 80175c4:	4b09      	ldr	r3, [pc, #36]	@ (80175ec <tcpip_tcp_timer+0x3c>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d005      	beq.n	80175d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80175cc:	2200      	movs	r2, #0
 80175ce:	4908      	ldr	r1, [pc, #32]	@ (80175f0 <tcpip_tcp_timer+0x40>)
 80175d0:	20fa      	movs	r0, #250	@ 0xfa
 80175d2:	f000 f8f3 	bl	80177bc <sys_timeout>
 80175d6:	e003      	b.n	80175e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80175d8:	4b06      	ldr	r3, [pc, #24]	@ (80175f4 <tcpip_tcp_timer+0x44>)
 80175da:	2200      	movs	r2, #0
 80175dc:	601a      	str	r2, [r3, #0]
  }
}
 80175de:	bf00      	nop
 80175e0:	bf00      	nop
 80175e2:	3708      	adds	r7, #8
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}
 80175e8:	24014bbc 	.word	0x24014bbc
 80175ec:	24014bc0 	.word	0x24014bc0
 80175f0:	080175b1 	.word	0x080175b1
 80175f4:	24014c08 	.word	0x24014c08

080175f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80175fc:	4b0a      	ldr	r3, [pc, #40]	@ (8017628 <tcp_timer_needed+0x30>)
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d10f      	bne.n	8017624 <tcp_timer_needed+0x2c>
 8017604:	4b09      	ldr	r3, [pc, #36]	@ (801762c <tcp_timer_needed+0x34>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d103      	bne.n	8017614 <tcp_timer_needed+0x1c>
 801760c:	4b08      	ldr	r3, [pc, #32]	@ (8017630 <tcp_timer_needed+0x38>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d007      	beq.n	8017624 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017614:	4b04      	ldr	r3, [pc, #16]	@ (8017628 <tcp_timer_needed+0x30>)
 8017616:	2201      	movs	r2, #1
 8017618:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801761a:	2200      	movs	r2, #0
 801761c:	4905      	ldr	r1, [pc, #20]	@ (8017634 <tcp_timer_needed+0x3c>)
 801761e:	20fa      	movs	r0, #250	@ 0xfa
 8017620:	f000 f8cc 	bl	80177bc <sys_timeout>
  }
}
 8017624:	bf00      	nop
 8017626:	bd80      	pop	{r7, pc}
 8017628:	24014c08 	.word	0x24014c08
 801762c:	24014bbc 	.word	0x24014bbc
 8017630:	24014bc0 	.word	0x24014bc0
 8017634:	080175b1 	.word	0x080175b1

08017638 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b086      	sub	sp, #24
 801763c:	af00      	add	r7, sp, #0
 801763e:	60f8      	str	r0, [r7, #12]
 8017640:	60b9      	str	r1, [r7, #8]
 8017642:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017644:	200b      	movs	r0, #11
 8017646:	f7f9 fbc1 	bl	8010dcc <memp_malloc>
 801764a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801764c:	693b      	ldr	r3, [r7, #16]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d109      	bne.n	8017666 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017652:	693b      	ldr	r3, [r7, #16]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d151      	bne.n	80176fc <sys_timeout_abs+0xc4>
 8017658:	4b2a      	ldr	r3, [pc, #168]	@ (8017704 <sys_timeout_abs+0xcc>)
 801765a:	22be      	movs	r2, #190	@ 0xbe
 801765c:	492a      	ldr	r1, [pc, #168]	@ (8017708 <sys_timeout_abs+0xd0>)
 801765e:	482b      	ldr	r0, [pc, #172]	@ (801770c <sys_timeout_abs+0xd4>)
 8017660:	f003 fba8 	bl	801adb4 <iprintf>
    return;
 8017664:	e04a      	b.n	80176fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	2200      	movs	r2, #0
 801766a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801766c:	693b      	ldr	r3, [r7, #16]
 801766e:	68ba      	ldr	r2, [r7, #8]
 8017670:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017672:	693b      	ldr	r3, [r7, #16]
 8017674:	687a      	ldr	r2, [r7, #4]
 8017676:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	68fa      	ldr	r2, [r7, #12]
 801767c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801767e:	4b24      	ldr	r3, [pc, #144]	@ (8017710 <sys_timeout_abs+0xd8>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d103      	bne.n	801768e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017686:	4a22      	ldr	r2, [pc, #136]	@ (8017710 <sys_timeout_abs+0xd8>)
 8017688:	693b      	ldr	r3, [r7, #16]
 801768a:	6013      	str	r3, [r2, #0]
    return;
 801768c:	e037      	b.n	80176fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801768e:	693b      	ldr	r3, [r7, #16]
 8017690:	685a      	ldr	r2, [r3, #4]
 8017692:	4b1f      	ldr	r3, [pc, #124]	@ (8017710 <sys_timeout_abs+0xd8>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	685b      	ldr	r3, [r3, #4]
 8017698:	1ad3      	subs	r3, r2, r3
 801769a:	0fdb      	lsrs	r3, r3, #31
 801769c:	f003 0301 	and.w	r3, r3, #1
 80176a0:	b2db      	uxtb	r3, r3
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d007      	beq.n	80176b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80176a6:	4b1a      	ldr	r3, [pc, #104]	@ (8017710 <sys_timeout_abs+0xd8>)
 80176a8:	681a      	ldr	r2, [r3, #0]
 80176aa:	693b      	ldr	r3, [r7, #16]
 80176ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80176ae:	4a18      	ldr	r2, [pc, #96]	@ (8017710 <sys_timeout_abs+0xd8>)
 80176b0:	693b      	ldr	r3, [r7, #16]
 80176b2:	6013      	str	r3, [r2, #0]
 80176b4:	e023      	b.n	80176fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80176b6:	4b16      	ldr	r3, [pc, #88]	@ (8017710 <sys_timeout_abs+0xd8>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	617b      	str	r3, [r7, #20]
 80176bc:	e01a      	b.n	80176f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80176be:	697b      	ldr	r3, [r7, #20]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d00b      	beq.n	80176de <sys_timeout_abs+0xa6>
 80176c6:	693b      	ldr	r3, [r7, #16]
 80176c8:	685a      	ldr	r2, [r3, #4]
 80176ca:	697b      	ldr	r3, [r7, #20]
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	685b      	ldr	r3, [r3, #4]
 80176d0:	1ad3      	subs	r3, r2, r3
 80176d2:	0fdb      	lsrs	r3, r3, #31
 80176d4:	f003 0301 	and.w	r3, r3, #1
 80176d8:	b2db      	uxtb	r3, r3
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d007      	beq.n	80176ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80176de:	697b      	ldr	r3, [r7, #20]
 80176e0:	681a      	ldr	r2, [r3, #0]
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80176e6:	697b      	ldr	r3, [r7, #20]
 80176e8:	693a      	ldr	r2, [r7, #16]
 80176ea:	601a      	str	r2, [r3, #0]
        break;
 80176ec:	e007      	b.n	80176fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80176ee:	697b      	ldr	r3, [r7, #20]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	617b      	str	r3, [r7, #20]
 80176f4:	697b      	ldr	r3, [r7, #20]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d1e1      	bne.n	80176be <sys_timeout_abs+0x86>
 80176fa:	e000      	b.n	80176fe <sys_timeout_abs+0xc6>
    return;
 80176fc:	bf00      	nop
      }
    }
  }
}
 80176fe:	3718      	adds	r7, #24
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}
 8017704:	0801dd74 	.word	0x0801dd74
 8017708:	0801dda8 	.word	0x0801dda8
 801770c:	0801dde8 	.word	0x0801dde8
 8017710:	24014c00 	.word	0x24014c00

08017714 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b086      	sub	sp, #24
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017720:	697b      	ldr	r3, [r7, #20]
 8017722:	685b      	ldr	r3, [r3, #4]
 8017724:	4798      	blx	r3

  now = sys_now();
 8017726:	f7f4 fa6f 	bl	800bc08 <sys_now>
 801772a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801772c:	697b      	ldr	r3, [r7, #20]
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	4b0f      	ldr	r3, [pc, #60]	@ (8017770 <lwip_cyclic_timer+0x5c>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	4413      	add	r3, r2
 8017736:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017738:	68fa      	ldr	r2, [r7, #12]
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	1ad3      	subs	r3, r2, r3
 801773e:	0fdb      	lsrs	r3, r3, #31
 8017740:	f003 0301 	and.w	r3, r3, #1
 8017744:	b2db      	uxtb	r3, r3
 8017746:	2b00      	cmp	r3, #0
 8017748:	d009      	beq.n	801775e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801774a:	697b      	ldr	r3, [r7, #20]
 801774c:	681a      	ldr	r2, [r3, #0]
 801774e:	693b      	ldr	r3, [r7, #16]
 8017750:	4413      	add	r3, r2
 8017752:	687a      	ldr	r2, [r7, #4]
 8017754:	4907      	ldr	r1, [pc, #28]	@ (8017774 <lwip_cyclic_timer+0x60>)
 8017756:	4618      	mov	r0, r3
 8017758:	f7ff ff6e 	bl	8017638 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801775c:	e004      	b.n	8017768 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801775e:	687a      	ldr	r2, [r7, #4]
 8017760:	4904      	ldr	r1, [pc, #16]	@ (8017774 <lwip_cyclic_timer+0x60>)
 8017762:	68f8      	ldr	r0, [r7, #12]
 8017764:	f7ff ff68 	bl	8017638 <sys_timeout_abs>
}
 8017768:	bf00      	nop
 801776a:	3718      	adds	r7, #24
 801776c:	46bd      	mov	sp, r7
 801776e:	bd80      	pop	{r7, pc}
 8017770:	24014c04 	.word	0x24014c04
 8017774:	08017715 	.word	0x08017715

08017778 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b082      	sub	sp, #8
 801777c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801777e:	2301      	movs	r3, #1
 8017780:	607b      	str	r3, [r7, #4]
 8017782:	e00e      	b.n	80177a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017784:	4a0b      	ldr	r2, [pc, #44]	@ (80177b4 <sys_timeouts_init+0x3c>)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	00db      	lsls	r3, r3, #3
 8017790:	4a08      	ldr	r2, [pc, #32]	@ (80177b4 <sys_timeouts_init+0x3c>)
 8017792:	4413      	add	r3, r2
 8017794:	461a      	mov	r2, r3
 8017796:	4908      	ldr	r1, [pc, #32]	@ (80177b8 <sys_timeouts_init+0x40>)
 8017798:	f000 f810 	bl	80177bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	3301      	adds	r3, #1
 80177a0:	607b      	str	r3, [r7, #4]
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	2b02      	cmp	r3, #2
 80177a6:	d9ed      	bls.n	8017784 <sys_timeouts_init+0xc>
  }
}
 80177a8:	bf00      	nop
 80177aa:	bf00      	nop
 80177ac:	3708      	adds	r7, #8
 80177ae:	46bd      	mov	sp, r7
 80177b0:	bd80      	pop	{r7, pc}
 80177b2:	bf00      	nop
 80177b4:	0801e9f8 	.word	0x0801e9f8
 80177b8:	08017715 	.word	0x08017715

080177bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b086      	sub	sp, #24
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	60f8      	str	r0, [r7, #12]
 80177c4:	60b9      	str	r1, [r7, #8]
 80177c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80177ce:	d306      	bcc.n	80177de <sys_timeout+0x22>
 80177d0:	4b0a      	ldr	r3, [pc, #40]	@ (80177fc <sys_timeout+0x40>)
 80177d2:	f240 1229 	movw	r2, #297	@ 0x129
 80177d6:	490a      	ldr	r1, [pc, #40]	@ (8017800 <sys_timeout+0x44>)
 80177d8:	480a      	ldr	r0, [pc, #40]	@ (8017804 <sys_timeout+0x48>)
 80177da:	f003 faeb 	bl	801adb4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80177de:	f7f4 fa13 	bl	800bc08 <sys_now>
 80177e2:	4602      	mov	r2, r0
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	4413      	add	r3, r2
 80177e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80177ea:	687a      	ldr	r2, [r7, #4]
 80177ec:	68b9      	ldr	r1, [r7, #8]
 80177ee:	6978      	ldr	r0, [r7, #20]
 80177f0:	f7ff ff22 	bl	8017638 <sys_timeout_abs>
#endif
}
 80177f4:	bf00      	nop
 80177f6:	3718      	adds	r7, #24
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	0801dd74 	.word	0x0801dd74
 8017800:	0801de10 	.word	0x0801de10
 8017804:	0801dde8 	.word	0x0801dde8

08017808 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b084      	sub	sp, #16
 801780c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801780e:	f7f4 f9fb 	bl	800bc08 <sys_now>
 8017812:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017814:	4b17      	ldr	r3, [pc, #92]	@ (8017874 <sys_check_timeouts+0x6c>)
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801781a:	68bb      	ldr	r3, [r7, #8]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d022      	beq.n	8017866 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017820:	68bb      	ldr	r3, [r7, #8]
 8017822:	685b      	ldr	r3, [r3, #4]
 8017824:	68fa      	ldr	r2, [r7, #12]
 8017826:	1ad3      	subs	r3, r2, r3
 8017828:	0fdb      	lsrs	r3, r3, #31
 801782a:	f003 0301 	and.w	r3, r3, #1
 801782e:	b2db      	uxtb	r3, r3
 8017830:	2b00      	cmp	r3, #0
 8017832:	d11a      	bne.n	801786a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	4a0e      	ldr	r2, [pc, #56]	@ (8017874 <sys_check_timeouts+0x6c>)
 801783a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801783c:	68bb      	ldr	r3, [r7, #8]
 801783e:	689b      	ldr	r3, [r3, #8]
 8017840:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017842:	68bb      	ldr	r3, [r7, #8]
 8017844:	68db      	ldr	r3, [r3, #12]
 8017846:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017848:	68bb      	ldr	r3, [r7, #8]
 801784a:	685b      	ldr	r3, [r3, #4]
 801784c:	4a0a      	ldr	r2, [pc, #40]	@ (8017878 <sys_check_timeouts+0x70>)
 801784e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017850:	68b9      	ldr	r1, [r7, #8]
 8017852:	200b      	movs	r0, #11
 8017854:	f7f9 fb30 	bl	8010eb8 <memp_free>
    if (handler != NULL) {
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d0da      	beq.n	8017814 <sys_check_timeouts+0xc>
      handler(arg);
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	6838      	ldr	r0, [r7, #0]
 8017862:	4798      	blx	r3
  do {
 8017864:	e7d6      	b.n	8017814 <sys_check_timeouts+0xc>
      return;
 8017866:	bf00      	nop
 8017868:	e000      	b.n	801786c <sys_check_timeouts+0x64>
      return;
 801786a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801786c:	3710      	adds	r7, #16
 801786e:	46bd      	mov	sp, r7
 8017870:	bd80      	pop	{r7, pc}
 8017872:	bf00      	nop
 8017874:	24014c00 	.word	0x24014c00
 8017878:	24014c04 	.word	0x24014c04

0801787c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b082      	sub	sp, #8
 8017880:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017882:	4b16      	ldr	r3, [pc, #88]	@ (80178dc <sys_timeouts_sleeptime+0x60>)
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d102      	bne.n	8017890 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801788a:	f04f 33ff 	mov.w	r3, #4294967295
 801788e:	e020      	b.n	80178d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017890:	f7f4 f9ba 	bl	800bc08 <sys_now>
 8017894:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017896:	4b11      	ldr	r3, [pc, #68]	@ (80178dc <sys_timeouts_sleeptime+0x60>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	685a      	ldr	r2, [r3, #4]
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	1ad3      	subs	r3, r2, r3
 80178a0:	0fdb      	lsrs	r3, r3, #31
 80178a2:	f003 0301 	and.w	r3, r3, #1
 80178a6:	b2db      	uxtb	r3, r3
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d001      	beq.n	80178b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80178ac:	2300      	movs	r3, #0
 80178ae:	e010      	b.n	80178d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80178b0:	4b0a      	ldr	r3, [pc, #40]	@ (80178dc <sys_timeouts_sleeptime+0x60>)
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	685a      	ldr	r2, [r3, #4]
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	1ad3      	subs	r3, r2, r3
 80178ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80178bc:	683b      	ldr	r3, [r7, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	da06      	bge.n	80178d0 <sys_timeouts_sleeptime+0x54>
 80178c2:	4b07      	ldr	r3, [pc, #28]	@ (80178e0 <sys_timeouts_sleeptime+0x64>)
 80178c4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80178c8:	4906      	ldr	r1, [pc, #24]	@ (80178e4 <sys_timeouts_sleeptime+0x68>)
 80178ca:	4807      	ldr	r0, [pc, #28]	@ (80178e8 <sys_timeouts_sleeptime+0x6c>)
 80178cc:	f003 fa72 	bl	801adb4 <iprintf>
    return ret;
 80178d0:	683b      	ldr	r3, [r7, #0]
  }
}
 80178d2:	4618      	mov	r0, r3
 80178d4:	3708      	adds	r7, #8
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bd80      	pop	{r7, pc}
 80178da:	bf00      	nop
 80178dc:	24014c00 	.word	0x24014c00
 80178e0:	0801dd74 	.word	0x0801dd74
 80178e4:	0801de48 	.word	0x0801de48
 80178e8:	0801dde8 	.word	0x0801dde8

080178ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80178f0:	f003 f960 	bl	801abb4 <rand>
 80178f4:	4603      	mov	r3, r0
 80178f6:	b29b      	uxth	r3, r3
 80178f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80178fc:	b29b      	uxth	r3, r3
 80178fe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017902:	b29a      	uxth	r2, r3
 8017904:	4b01      	ldr	r3, [pc, #4]	@ (801790c <udp_init+0x20>)
 8017906:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017908:	bf00      	nop
 801790a:	bd80      	pop	{r7, pc}
 801790c:	240049f0 	.word	0x240049f0

08017910 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017916:	2300      	movs	r3, #0
 8017918:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801791a:	4b17      	ldr	r3, [pc, #92]	@ (8017978 <udp_new_port+0x68>)
 801791c:	881b      	ldrh	r3, [r3, #0]
 801791e:	1c5a      	adds	r2, r3, #1
 8017920:	b291      	uxth	r1, r2
 8017922:	4a15      	ldr	r2, [pc, #84]	@ (8017978 <udp_new_port+0x68>)
 8017924:	8011      	strh	r1, [r2, #0]
 8017926:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801792a:	4293      	cmp	r3, r2
 801792c:	d103      	bne.n	8017936 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801792e:	4b12      	ldr	r3, [pc, #72]	@ (8017978 <udp_new_port+0x68>)
 8017930:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017934:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017936:	4b11      	ldr	r3, [pc, #68]	@ (801797c <udp_new_port+0x6c>)
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	603b      	str	r3, [r7, #0]
 801793c:	e011      	b.n	8017962 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	8a5a      	ldrh	r2, [r3, #18]
 8017942:	4b0d      	ldr	r3, [pc, #52]	@ (8017978 <udp_new_port+0x68>)
 8017944:	881b      	ldrh	r3, [r3, #0]
 8017946:	429a      	cmp	r2, r3
 8017948:	d108      	bne.n	801795c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801794a:	88fb      	ldrh	r3, [r7, #6]
 801794c:	3301      	adds	r3, #1
 801794e:	80fb      	strh	r3, [r7, #6]
 8017950:	88fb      	ldrh	r3, [r7, #6]
 8017952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017956:	d3e0      	bcc.n	801791a <udp_new_port+0xa>
        return 0;
 8017958:	2300      	movs	r3, #0
 801795a:	e007      	b.n	801796c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	68db      	ldr	r3, [r3, #12]
 8017960:	603b      	str	r3, [r7, #0]
 8017962:	683b      	ldr	r3, [r7, #0]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d1ea      	bne.n	801793e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017968:	4b03      	ldr	r3, [pc, #12]	@ (8017978 <udp_new_port+0x68>)
 801796a:	881b      	ldrh	r3, [r3, #0]
}
 801796c:	4618      	mov	r0, r3
 801796e:	370c      	adds	r7, #12
 8017970:	46bd      	mov	sp, r7
 8017972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017976:	4770      	bx	lr
 8017978:	240049f0 	.word	0x240049f0
 801797c:	24014c0c 	.word	0x24014c0c

08017980 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b084      	sub	sp, #16
 8017984:	af00      	add	r7, sp, #0
 8017986:	60f8      	str	r0, [r7, #12]
 8017988:	60b9      	str	r1, [r7, #8]
 801798a:	4613      	mov	r3, r2
 801798c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d105      	bne.n	80179a0 <udp_input_local_match+0x20>
 8017994:	4b27      	ldr	r3, [pc, #156]	@ (8017a34 <udp_input_local_match+0xb4>)
 8017996:	2287      	movs	r2, #135	@ 0x87
 8017998:	4927      	ldr	r1, [pc, #156]	@ (8017a38 <udp_input_local_match+0xb8>)
 801799a:	4828      	ldr	r0, [pc, #160]	@ (8017a3c <udp_input_local_match+0xbc>)
 801799c:	f003 fa0a 	bl	801adb4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80179a0:	68bb      	ldr	r3, [r7, #8]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d105      	bne.n	80179b2 <udp_input_local_match+0x32>
 80179a6:	4b23      	ldr	r3, [pc, #140]	@ (8017a34 <udp_input_local_match+0xb4>)
 80179a8:	2288      	movs	r2, #136	@ 0x88
 80179aa:	4925      	ldr	r1, [pc, #148]	@ (8017a40 <udp_input_local_match+0xc0>)
 80179ac:	4823      	ldr	r0, [pc, #140]	@ (8017a3c <udp_input_local_match+0xbc>)
 80179ae:	f003 fa01 	bl	801adb4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	7a1b      	ldrb	r3, [r3, #8]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d00b      	beq.n	80179d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	7a1a      	ldrb	r2, [r3, #8]
 80179be:	4b21      	ldr	r3, [pc, #132]	@ (8017a44 <udp_input_local_match+0xc4>)
 80179c0:	685b      	ldr	r3, [r3, #4]
 80179c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80179c6:	3301      	adds	r3, #1
 80179c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80179ca:	429a      	cmp	r2, r3
 80179cc:	d001      	beq.n	80179d2 <udp_input_local_match+0x52>
    return 0;
 80179ce:	2300      	movs	r3, #0
 80179d0:	e02b      	b.n	8017a2a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80179d2:	79fb      	ldrb	r3, [r7, #7]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d018      	beq.n	8017a0a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d013      	beq.n	8017a06 <udp_input_local_match+0x86>
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d00f      	beq.n	8017a06 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80179e6:	4b17      	ldr	r3, [pc, #92]	@ (8017a44 <udp_input_local_match+0xc4>)
 80179e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80179ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179ee:	d00a      	beq.n	8017a06 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	681a      	ldr	r2, [r3, #0]
 80179f4:	4b13      	ldr	r3, [pc, #76]	@ (8017a44 <udp_input_local_match+0xc4>)
 80179f6:	695b      	ldr	r3, [r3, #20]
 80179f8:	405a      	eors	r2, r3
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	3308      	adds	r3, #8
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d110      	bne.n	8017a28 <udp_input_local_match+0xa8>
          return 1;
 8017a06:	2301      	movs	r3, #1
 8017a08:	e00f      	b.n	8017a2a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d009      	beq.n	8017a24 <udp_input_local_match+0xa4>
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d005      	beq.n	8017a24 <udp_input_local_match+0xa4>
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	681a      	ldr	r2, [r3, #0]
 8017a1c:	4b09      	ldr	r3, [pc, #36]	@ (8017a44 <udp_input_local_match+0xc4>)
 8017a1e:	695b      	ldr	r3, [r3, #20]
 8017a20:	429a      	cmp	r2, r3
 8017a22:	d101      	bne.n	8017a28 <udp_input_local_match+0xa8>
        return 1;
 8017a24:	2301      	movs	r3, #1
 8017a26:	e000      	b.n	8017a2a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017a28:	2300      	movs	r3, #0
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	3710      	adds	r7, #16
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}
 8017a32:	bf00      	nop
 8017a34:	0801de5c 	.word	0x0801de5c
 8017a38:	0801de8c 	.word	0x0801de8c
 8017a3c:	0801deb0 	.word	0x0801deb0
 8017a40:	0801ded8 	.word	0x0801ded8
 8017a44:	2400e074 	.word	0x2400e074

08017a48 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017a48:	b590      	push	{r4, r7, lr}
 8017a4a:	b08d      	sub	sp, #52	@ 0x34
 8017a4c:	af02      	add	r7, sp, #8
 8017a4e:	6078      	str	r0, [r7, #4]
 8017a50:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017a52:	2300      	movs	r3, #0
 8017a54:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d105      	bne.n	8017a68 <udp_input+0x20>
 8017a5c:	4b7c      	ldr	r3, [pc, #496]	@ (8017c50 <udp_input+0x208>)
 8017a5e:	22cf      	movs	r2, #207	@ 0xcf
 8017a60:	497c      	ldr	r1, [pc, #496]	@ (8017c54 <udp_input+0x20c>)
 8017a62:	487d      	ldr	r0, [pc, #500]	@ (8017c58 <udp_input+0x210>)
 8017a64:	f003 f9a6 	bl	801adb4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017a68:	683b      	ldr	r3, [r7, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d105      	bne.n	8017a7a <udp_input+0x32>
 8017a6e:	4b78      	ldr	r3, [pc, #480]	@ (8017c50 <udp_input+0x208>)
 8017a70:	22d0      	movs	r2, #208	@ 0xd0
 8017a72:	497a      	ldr	r1, [pc, #488]	@ (8017c5c <udp_input+0x214>)
 8017a74:	4878      	ldr	r0, [pc, #480]	@ (8017c58 <udp_input+0x210>)
 8017a76:	f003 f99d 	bl	801adb4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	895b      	ldrh	r3, [r3, #10]
 8017a7e:	2b07      	cmp	r3, #7
 8017a80:	d803      	bhi.n	8017a8a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017a82:	6878      	ldr	r0, [r7, #4]
 8017a84:	f7fa f8c4 	bl	8011c10 <pbuf_free>
    goto end;
 8017a88:	e0de      	b.n	8017c48 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017a90:	4b73      	ldr	r3, [pc, #460]	@ (8017c60 <udp_input+0x218>)
 8017a92:	695b      	ldr	r3, [r3, #20]
 8017a94:	4a72      	ldr	r2, [pc, #456]	@ (8017c60 <udp_input+0x218>)
 8017a96:	6812      	ldr	r2, [r2, #0]
 8017a98:	4611      	mov	r1, r2
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f001 ffb2 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	881b      	ldrh	r3, [r3, #0]
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f7f8 fbfe 	bl	80102ac <lwip_htons>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017ab4:	697b      	ldr	r3, [r7, #20]
 8017ab6:	885b      	ldrh	r3, [r3, #2]
 8017ab8:	b29b      	uxth	r3, r3
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7f8 fbf6 	bl	80102ac <lwip_htons>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017ac8:	2300      	movs	r3, #0
 8017aca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017acc:	2300      	movs	r3, #0
 8017ace:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ad0:	4b64      	ldr	r3, [pc, #400]	@ (8017c64 <udp_input+0x21c>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8017ad6:	e054      	b.n	8017b82 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ada:	8a5b      	ldrh	r3, [r3, #18]
 8017adc:	89fa      	ldrh	r2, [r7, #14]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d14a      	bne.n	8017b78 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017ae2:	7cfb      	ldrb	r3, [r7, #19]
 8017ae4:	461a      	mov	r2, r3
 8017ae6:	6839      	ldr	r1, [r7, #0]
 8017ae8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017aea:	f7ff ff49 	bl	8017980 <udp_input_local_match>
 8017aee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d041      	beq.n	8017b78 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017af6:	7c1b      	ldrb	r3, [r3, #16]
 8017af8:	f003 0304 	and.w	r3, r3, #4
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d11d      	bne.n	8017b3c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017b00:	69fb      	ldr	r3, [r7, #28]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d102      	bne.n	8017b0c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b08:	61fb      	str	r3, [r7, #28]
 8017b0a:	e017      	b.n	8017b3c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017b0c:	7cfb      	ldrb	r3, [r7, #19]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d014      	beq.n	8017b3c <udp_input+0xf4>
 8017b12:	4b53      	ldr	r3, [pc, #332]	@ (8017c60 <udp_input+0x218>)
 8017b14:	695b      	ldr	r3, [r3, #20]
 8017b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b1a:	d10f      	bne.n	8017b3c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017b1c:	69fb      	ldr	r3, [r7, #28]
 8017b1e:	681a      	ldr	r2, [r3, #0]
 8017b20:	683b      	ldr	r3, [r7, #0]
 8017b22:	3304      	adds	r3, #4
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	429a      	cmp	r2, r3
 8017b28:	d008      	beq.n	8017b3c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b2c:	681a      	ldr	r2, [r3, #0]
 8017b2e:	683b      	ldr	r3, [r7, #0]
 8017b30:	3304      	adds	r3, #4
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	429a      	cmp	r2, r3
 8017b36:	d101      	bne.n	8017b3c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b3a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b3e:	8a9b      	ldrh	r3, [r3, #20]
 8017b40:	8a3a      	ldrh	r2, [r7, #16]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d118      	bne.n	8017b78 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b48:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d005      	beq.n	8017b5a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b50:	685a      	ldr	r2, [r3, #4]
 8017b52:	4b43      	ldr	r3, [pc, #268]	@ (8017c60 <udp_input+0x218>)
 8017b54:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017b56:	429a      	cmp	r2, r3
 8017b58:	d10e      	bne.n	8017b78 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017b5a:	6a3b      	ldr	r3, [r7, #32]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d014      	beq.n	8017b8a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b62:	68da      	ldr	r2, [r3, #12]
 8017b64:	6a3b      	ldr	r3, [r7, #32]
 8017b66:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017b68:	4b3e      	ldr	r3, [pc, #248]	@ (8017c64 <udp_input+0x21c>)
 8017b6a:	681a      	ldr	r2, [r3, #0]
 8017b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b6e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017b70:	4a3c      	ldr	r2, [pc, #240]	@ (8017c64 <udp_input+0x21c>)
 8017b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b74:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017b76:	e008      	b.n	8017b8a <udp_input+0x142>
      }
    }

    prev = pcb;
 8017b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b7a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b7e:	68db      	ldr	r3, [r3, #12]
 8017b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d1a7      	bne.n	8017ad8 <udp_input+0x90>
 8017b88:	e000      	b.n	8017b8c <udp_input+0x144>
        break;
 8017b8a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d101      	bne.n	8017b96 <udp_input+0x14e>
    pcb = uncon_pcb;
 8017b92:	69fb      	ldr	r3, [r7, #28]
 8017b94:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d002      	beq.n	8017ba2 <udp_input+0x15a>
    for_us = 1;
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	76fb      	strb	r3, [r7, #27]
 8017ba0:	e00a      	b.n	8017bb8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017ba2:	683b      	ldr	r3, [r7, #0]
 8017ba4:	3304      	adds	r3, #4
 8017ba6:	681a      	ldr	r2, [r3, #0]
 8017ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8017c60 <udp_input+0x218>)
 8017baa:	695b      	ldr	r3, [r3, #20]
 8017bac:	429a      	cmp	r2, r3
 8017bae:	bf0c      	ite	eq
 8017bb0:	2301      	moveq	r3, #1
 8017bb2:	2300      	movne	r3, #0
 8017bb4:	b2db      	uxtb	r3, r3
 8017bb6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017bb8:	7efb      	ldrb	r3, [r7, #27]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d041      	beq.n	8017c42 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017bbe:	2108      	movs	r1, #8
 8017bc0:	6878      	ldr	r0, [r7, #4]
 8017bc2:	f7f9 ff9f 	bl	8011b04 <pbuf_remove_header>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d00a      	beq.n	8017be2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017bcc:	4b20      	ldr	r3, [pc, #128]	@ (8017c50 <udp_input+0x208>)
 8017bce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8017bd2:	4925      	ldr	r1, [pc, #148]	@ (8017c68 <udp_input+0x220>)
 8017bd4:	4820      	ldr	r0, [pc, #128]	@ (8017c58 <udp_input+0x210>)
 8017bd6:	f003 f8ed 	bl	801adb4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017bda:	6878      	ldr	r0, [r7, #4]
 8017bdc:	f7fa f818 	bl	8011c10 <pbuf_free>
      goto end;
 8017be0:	e032      	b.n	8017c48 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d012      	beq.n	8017c0e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bea:	699b      	ldr	r3, [r3, #24]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d00a      	beq.n	8017c06 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bf2:	699c      	ldr	r4, [r3, #24]
 8017bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bf6:	69d8      	ldr	r0, [r3, #28]
 8017bf8:	8a3b      	ldrh	r3, [r7, #16]
 8017bfa:	9300      	str	r3, [sp, #0]
 8017bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8017c6c <udp_input+0x224>)
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017c02:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017c04:	e021      	b.n	8017c4a <udp_input+0x202>
        pbuf_free(p);
 8017c06:	6878      	ldr	r0, [r7, #4]
 8017c08:	f7fa f802 	bl	8011c10 <pbuf_free>
        goto end;
 8017c0c:	e01c      	b.n	8017c48 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017c0e:	7cfb      	ldrb	r3, [r7, #19]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d112      	bne.n	8017c3a <udp_input+0x1f2>
 8017c14:	4b12      	ldr	r3, [pc, #72]	@ (8017c60 <udp_input+0x218>)
 8017c16:	695b      	ldr	r3, [r3, #20]
 8017c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017c1c:	2be0      	cmp	r3, #224	@ 0xe0
 8017c1e:	d00c      	beq.n	8017c3a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017c20:	4b0f      	ldr	r3, [pc, #60]	@ (8017c60 <udp_input+0x218>)
 8017c22:	899b      	ldrh	r3, [r3, #12]
 8017c24:	3308      	adds	r3, #8
 8017c26:	b29b      	uxth	r3, r3
 8017c28:	b21b      	sxth	r3, r3
 8017c2a:	4619      	mov	r1, r3
 8017c2c:	6878      	ldr	r0, [r7, #4]
 8017c2e:	f7f9 ffdc 	bl	8011bea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017c32:	2103      	movs	r1, #3
 8017c34:	6878      	ldr	r0, [r7, #4]
 8017c36:	f001 fbaf 	bl	8019398 <icmp_dest_unreach>
      pbuf_free(p);
 8017c3a:	6878      	ldr	r0, [r7, #4]
 8017c3c:	f7f9 ffe8 	bl	8011c10 <pbuf_free>
  return;
 8017c40:	e003      	b.n	8017c4a <udp_input+0x202>
    pbuf_free(p);
 8017c42:	6878      	ldr	r0, [r7, #4]
 8017c44:	f7f9 ffe4 	bl	8011c10 <pbuf_free>
  return;
 8017c48:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017c4a:	372c      	adds	r7, #44	@ 0x2c
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd90      	pop	{r4, r7, pc}
 8017c50:	0801de5c 	.word	0x0801de5c
 8017c54:	0801df00 	.word	0x0801df00
 8017c58:	0801deb0 	.word	0x0801deb0
 8017c5c:	0801df18 	.word	0x0801df18
 8017c60:	2400e074 	.word	0x2400e074
 8017c64:	24014c0c 	.word	0x24014c0c
 8017c68:	0801df34 	.word	0x0801df34
 8017c6c:	2400e084 	.word	0x2400e084

08017c70 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b082      	sub	sp, #8
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
 8017c78:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d109      	bne.n	8017c94 <udp_send+0x24>
 8017c80:	4b11      	ldr	r3, [pc, #68]	@ (8017cc8 <udp_send+0x58>)
 8017c82:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8017c86:	4911      	ldr	r1, [pc, #68]	@ (8017ccc <udp_send+0x5c>)
 8017c88:	4811      	ldr	r0, [pc, #68]	@ (8017cd0 <udp_send+0x60>)
 8017c8a:	f003 f893 	bl	801adb4 <iprintf>
 8017c8e:	f06f 030f 	mvn.w	r3, #15
 8017c92:	e015      	b.n	8017cc0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d109      	bne.n	8017cae <udp_send+0x3e>
 8017c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8017cc8 <udp_send+0x58>)
 8017c9c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8017ca0:	490c      	ldr	r1, [pc, #48]	@ (8017cd4 <udp_send+0x64>)
 8017ca2:	480b      	ldr	r0, [pc, #44]	@ (8017cd0 <udp_send+0x60>)
 8017ca4:	f003 f886 	bl	801adb4 <iprintf>
 8017ca8:	f06f 030f 	mvn.w	r3, #15
 8017cac:	e008      	b.n	8017cc0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	1d1a      	adds	r2, r3, #4
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	8a9b      	ldrh	r3, [r3, #20]
 8017cb6:	6839      	ldr	r1, [r7, #0]
 8017cb8:	6878      	ldr	r0, [r7, #4]
 8017cba:	f000 f80d 	bl	8017cd8 <udp_sendto>
 8017cbe:	4603      	mov	r3, r0
}
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	3708      	adds	r7, #8
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd80      	pop	{r7, pc}
 8017cc8:	0801de5c 	.word	0x0801de5c
 8017ccc:	0801df50 	.word	0x0801df50
 8017cd0:	0801deb0 	.word	0x0801deb0
 8017cd4:	0801df68 	.word	0x0801df68

08017cd8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b088      	sub	sp, #32
 8017cdc:	af02      	add	r7, sp, #8
 8017cde:	60f8      	str	r0, [r7, #12]
 8017ce0:	60b9      	str	r1, [r7, #8]
 8017ce2:	607a      	str	r2, [r7, #4]
 8017ce4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d109      	bne.n	8017d00 <udp_sendto+0x28>
 8017cec:	4b23      	ldr	r3, [pc, #140]	@ (8017d7c <udp_sendto+0xa4>)
 8017cee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017cf2:	4923      	ldr	r1, [pc, #140]	@ (8017d80 <udp_sendto+0xa8>)
 8017cf4:	4823      	ldr	r0, [pc, #140]	@ (8017d84 <udp_sendto+0xac>)
 8017cf6:	f003 f85d 	bl	801adb4 <iprintf>
 8017cfa:	f06f 030f 	mvn.w	r3, #15
 8017cfe:	e038      	b.n	8017d72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017d00:	68bb      	ldr	r3, [r7, #8]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d109      	bne.n	8017d1a <udp_sendto+0x42>
 8017d06:	4b1d      	ldr	r3, [pc, #116]	@ (8017d7c <udp_sendto+0xa4>)
 8017d08:	f240 2219 	movw	r2, #537	@ 0x219
 8017d0c:	491e      	ldr	r1, [pc, #120]	@ (8017d88 <udp_sendto+0xb0>)
 8017d0e:	481d      	ldr	r0, [pc, #116]	@ (8017d84 <udp_sendto+0xac>)
 8017d10:	f003 f850 	bl	801adb4 <iprintf>
 8017d14:	f06f 030f 	mvn.w	r3, #15
 8017d18:	e02b      	b.n	8017d72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d109      	bne.n	8017d34 <udp_sendto+0x5c>
 8017d20:	4b16      	ldr	r3, [pc, #88]	@ (8017d7c <udp_sendto+0xa4>)
 8017d22:	f240 221a 	movw	r2, #538	@ 0x21a
 8017d26:	4919      	ldr	r1, [pc, #100]	@ (8017d8c <udp_sendto+0xb4>)
 8017d28:	4816      	ldr	r0, [pc, #88]	@ (8017d84 <udp_sendto+0xac>)
 8017d2a:	f003 f843 	bl	801adb4 <iprintf>
 8017d2e:	f06f 030f 	mvn.w	r3, #15
 8017d32:	e01e      	b.n	8017d72 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	7a1b      	ldrb	r3, [r3, #8]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d006      	beq.n	8017d4a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	7a1b      	ldrb	r3, [r3, #8]
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7f9 fbd3 	bl	80114ec <netif_get_by_index>
 8017d46:	6178      	str	r0, [r7, #20]
 8017d48:	e003      	b.n	8017d52 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8017d4a:	6878      	ldr	r0, [r7, #4]
 8017d4c:	f001 fbb8 	bl	80194c0 <ip4_route>
 8017d50:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d102      	bne.n	8017d5e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017d58:	f06f 0303 	mvn.w	r3, #3
 8017d5c:	e009      	b.n	8017d72 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8017d5e:	887a      	ldrh	r2, [r7, #2]
 8017d60:	697b      	ldr	r3, [r7, #20]
 8017d62:	9300      	str	r3, [sp, #0]
 8017d64:	4613      	mov	r3, r2
 8017d66:	687a      	ldr	r2, [r7, #4]
 8017d68:	68b9      	ldr	r1, [r7, #8]
 8017d6a:	68f8      	ldr	r0, [r7, #12]
 8017d6c:	f000 f810 	bl	8017d90 <udp_sendto_if>
 8017d70:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	3718      	adds	r7, #24
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}
 8017d7a:	bf00      	nop
 8017d7c:	0801de5c 	.word	0x0801de5c
 8017d80:	0801df80 	.word	0x0801df80
 8017d84:	0801deb0 	.word	0x0801deb0
 8017d88:	0801df98 	.word	0x0801df98
 8017d8c:	0801dfb4 	.word	0x0801dfb4

08017d90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b088      	sub	sp, #32
 8017d94:	af02      	add	r7, sp, #8
 8017d96:	60f8      	str	r0, [r7, #12]
 8017d98:	60b9      	str	r1, [r7, #8]
 8017d9a:	607a      	str	r2, [r7, #4]
 8017d9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d109      	bne.n	8017db8 <udp_sendto_if+0x28>
 8017da4:	4b2e      	ldr	r3, [pc, #184]	@ (8017e60 <udp_sendto_if+0xd0>)
 8017da6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017daa:	492e      	ldr	r1, [pc, #184]	@ (8017e64 <udp_sendto_if+0xd4>)
 8017dac:	482e      	ldr	r0, [pc, #184]	@ (8017e68 <udp_sendto_if+0xd8>)
 8017dae:	f003 f801 	bl	801adb4 <iprintf>
 8017db2:	f06f 030f 	mvn.w	r3, #15
 8017db6:	e04f      	b.n	8017e58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d109      	bne.n	8017dd2 <udp_sendto_if+0x42>
 8017dbe:	4b28      	ldr	r3, [pc, #160]	@ (8017e60 <udp_sendto_if+0xd0>)
 8017dc0:	f240 2281 	movw	r2, #641	@ 0x281
 8017dc4:	4929      	ldr	r1, [pc, #164]	@ (8017e6c <udp_sendto_if+0xdc>)
 8017dc6:	4828      	ldr	r0, [pc, #160]	@ (8017e68 <udp_sendto_if+0xd8>)
 8017dc8:	f002 fff4 	bl	801adb4 <iprintf>
 8017dcc:	f06f 030f 	mvn.w	r3, #15
 8017dd0:	e042      	b.n	8017e58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d109      	bne.n	8017dec <udp_sendto_if+0x5c>
 8017dd8:	4b21      	ldr	r3, [pc, #132]	@ (8017e60 <udp_sendto_if+0xd0>)
 8017dda:	f240 2282 	movw	r2, #642	@ 0x282
 8017dde:	4924      	ldr	r1, [pc, #144]	@ (8017e70 <udp_sendto_if+0xe0>)
 8017de0:	4821      	ldr	r0, [pc, #132]	@ (8017e68 <udp_sendto_if+0xd8>)
 8017de2:	f002 ffe7 	bl	801adb4 <iprintf>
 8017de6:	f06f 030f 	mvn.w	r3, #15
 8017dea:	e035      	b.n	8017e58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017dec:	6a3b      	ldr	r3, [r7, #32]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d109      	bne.n	8017e06 <udp_sendto_if+0x76>
 8017df2:	4b1b      	ldr	r3, [pc, #108]	@ (8017e60 <udp_sendto_if+0xd0>)
 8017df4:	f240 2283 	movw	r2, #643	@ 0x283
 8017df8:	491e      	ldr	r1, [pc, #120]	@ (8017e74 <udp_sendto_if+0xe4>)
 8017dfa:	481b      	ldr	r0, [pc, #108]	@ (8017e68 <udp_sendto_if+0xd8>)
 8017dfc:	f002 ffda 	bl	801adb4 <iprintf>
 8017e00:	f06f 030f 	mvn.w	r3, #15
 8017e04:	e028      	b.n	8017e58 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d009      	beq.n	8017e20 <udp_sendto_if+0x90>
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d005      	beq.n	8017e20 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e1c:	2be0      	cmp	r3, #224	@ 0xe0
 8017e1e:	d103      	bne.n	8017e28 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017e20:	6a3b      	ldr	r3, [r7, #32]
 8017e22:	3304      	adds	r3, #4
 8017e24:	617b      	str	r3, [r7, #20]
 8017e26:	e00b      	b.n	8017e40 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	681a      	ldr	r2, [r3, #0]
 8017e2c:	6a3b      	ldr	r3, [r7, #32]
 8017e2e:	3304      	adds	r3, #4
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d002      	beq.n	8017e3c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017e36:	f06f 0303 	mvn.w	r3, #3
 8017e3a:	e00d      	b.n	8017e58 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017e40:	887a      	ldrh	r2, [r7, #2]
 8017e42:	697b      	ldr	r3, [r7, #20]
 8017e44:	9301      	str	r3, [sp, #4]
 8017e46:	6a3b      	ldr	r3, [r7, #32]
 8017e48:	9300      	str	r3, [sp, #0]
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	687a      	ldr	r2, [r7, #4]
 8017e4e:	68b9      	ldr	r1, [r7, #8]
 8017e50:	68f8      	ldr	r0, [r7, #12]
 8017e52:	f000 f811 	bl	8017e78 <udp_sendto_if_src>
 8017e56:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3718      	adds	r7, #24
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}
 8017e60:	0801de5c 	.word	0x0801de5c
 8017e64:	0801dfd0 	.word	0x0801dfd0
 8017e68:	0801deb0 	.word	0x0801deb0
 8017e6c:	0801dfec 	.word	0x0801dfec
 8017e70:	0801e008 	.word	0x0801e008
 8017e74:	0801e028 	.word	0x0801e028

08017e78 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b08c      	sub	sp, #48	@ 0x30
 8017e7c:	af04      	add	r7, sp, #16
 8017e7e:	60f8      	str	r0, [r7, #12]
 8017e80:	60b9      	str	r1, [r7, #8]
 8017e82:	607a      	str	r2, [r7, #4]
 8017e84:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d109      	bne.n	8017ea0 <udp_sendto_if_src+0x28>
 8017e8c:	4b65      	ldr	r3, [pc, #404]	@ (8018024 <udp_sendto_if_src+0x1ac>)
 8017e8e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8017e92:	4965      	ldr	r1, [pc, #404]	@ (8018028 <udp_sendto_if_src+0x1b0>)
 8017e94:	4865      	ldr	r0, [pc, #404]	@ (801802c <udp_sendto_if_src+0x1b4>)
 8017e96:	f002 ff8d 	bl	801adb4 <iprintf>
 8017e9a:	f06f 030f 	mvn.w	r3, #15
 8017e9e:	e0bc      	b.n	801801a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d109      	bne.n	8017eba <udp_sendto_if_src+0x42>
 8017ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8018024 <udp_sendto_if_src+0x1ac>)
 8017ea8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8017eac:	4960      	ldr	r1, [pc, #384]	@ (8018030 <udp_sendto_if_src+0x1b8>)
 8017eae:	485f      	ldr	r0, [pc, #380]	@ (801802c <udp_sendto_if_src+0x1b4>)
 8017eb0:	f002 ff80 	bl	801adb4 <iprintf>
 8017eb4:	f06f 030f 	mvn.w	r3, #15
 8017eb8:	e0af      	b.n	801801a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d109      	bne.n	8017ed4 <udp_sendto_if_src+0x5c>
 8017ec0:	4b58      	ldr	r3, [pc, #352]	@ (8018024 <udp_sendto_if_src+0x1ac>)
 8017ec2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8017ec6:	495b      	ldr	r1, [pc, #364]	@ (8018034 <udp_sendto_if_src+0x1bc>)
 8017ec8:	4858      	ldr	r0, [pc, #352]	@ (801802c <udp_sendto_if_src+0x1b4>)
 8017eca:	f002 ff73 	bl	801adb4 <iprintf>
 8017ece:	f06f 030f 	mvn.w	r3, #15
 8017ed2:	e0a2      	b.n	801801a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d109      	bne.n	8017eee <udp_sendto_if_src+0x76>
 8017eda:	4b52      	ldr	r3, [pc, #328]	@ (8018024 <udp_sendto_if_src+0x1ac>)
 8017edc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8017ee0:	4955      	ldr	r1, [pc, #340]	@ (8018038 <udp_sendto_if_src+0x1c0>)
 8017ee2:	4852      	ldr	r0, [pc, #328]	@ (801802c <udp_sendto_if_src+0x1b4>)
 8017ee4:	f002 ff66 	bl	801adb4 <iprintf>
 8017ee8:	f06f 030f 	mvn.w	r3, #15
 8017eec:	e095      	b.n	801801a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d109      	bne.n	8017f08 <udp_sendto_if_src+0x90>
 8017ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8018024 <udp_sendto_if_src+0x1ac>)
 8017ef6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8017efa:	4950      	ldr	r1, [pc, #320]	@ (801803c <udp_sendto_if_src+0x1c4>)
 8017efc:	484b      	ldr	r0, [pc, #300]	@ (801802c <udp_sendto_if_src+0x1b4>)
 8017efe:	f002 ff59 	bl	801adb4 <iprintf>
 8017f02:	f06f 030f 	mvn.w	r3, #15
 8017f06:	e088      	b.n	801801a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	8a5b      	ldrh	r3, [r3, #18]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d10f      	bne.n	8017f30 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017f10:	68f9      	ldr	r1, [r7, #12]
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	8a5b      	ldrh	r3, [r3, #18]
 8017f16:	461a      	mov	r2, r3
 8017f18:	68f8      	ldr	r0, [r7, #12]
 8017f1a:	f000 f893 	bl	8018044 <udp_bind>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017f22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d002      	beq.n	8017f30 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017f2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017f2e:	e074      	b.n	801801a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	891b      	ldrh	r3, [r3, #8]
 8017f34:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8017f38:	4293      	cmp	r3, r2
 8017f3a:	d902      	bls.n	8017f42 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8017f40:	e06b      	b.n	801801a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017f42:	2108      	movs	r1, #8
 8017f44:	68b8      	ldr	r0, [r7, #8]
 8017f46:	f7f9 fdcd 	bl	8011ae4 <pbuf_add_header>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d015      	beq.n	8017f7c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017f50:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017f54:	2108      	movs	r1, #8
 8017f56:	2022      	movs	r0, #34	@ 0x22
 8017f58:	f7f9 fb72 	bl	8011640 <pbuf_alloc>
 8017f5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017f5e:	69fb      	ldr	r3, [r7, #28]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d102      	bne.n	8017f6a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017f64:	f04f 33ff 	mov.w	r3, #4294967295
 8017f68:	e057      	b.n	801801a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8017f6a:	68bb      	ldr	r3, [r7, #8]
 8017f6c:	891b      	ldrh	r3, [r3, #8]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d006      	beq.n	8017f80 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017f72:	68b9      	ldr	r1, [r7, #8]
 8017f74:	69f8      	ldr	r0, [r7, #28]
 8017f76:	f7f9 ff6f 	bl	8011e58 <pbuf_chain>
 8017f7a:	e001      	b.n	8017f80 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	895b      	ldrh	r3, [r3, #10]
 8017f84:	2b07      	cmp	r3, #7
 8017f86:	d806      	bhi.n	8017f96 <udp_sendto_if_src+0x11e>
 8017f88:	4b26      	ldr	r3, [pc, #152]	@ (8018024 <udp_sendto_if_src+0x1ac>)
 8017f8a:	f240 320d 	movw	r2, #781	@ 0x30d
 8017f8e:	492c      	ldr	r1, [pc, #176]	@ (8018040 <udp_sendto_if_src+0x1c8>)
 8017f90:	4826      	ldr	r0, [pc, #152]	@ (801802c <udp_sendto_if_src+0x1b4>)
 8017f92:	f002 ff0f 	bl	801adb4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017f96:	69fb      	ldr	r3, [r7, #28]
 8017f98:	685b      	ldr	r3, [r3, #4]
 8017f9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	8a5b      	ldrh	r3, [r3, #18]
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7f8 f983 	bl	80102ac <lwip_htons>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	461a      	mov	r2, r3
 8017faa:	697b      	ldr	r3, [r7, #20]
 8017fac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8017fae:	887b      	ldrh	r3, [r7, #2]
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f7f8 f97b 	bl	80102ac <lwip_htons>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	461a      	mov	r2, r3
 8017fba:	697b      	ldr	r3, [r7, #20]
 8017fbc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8017fbe:	697b      	ldr	r3, [r7, #20]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	719a      	strb	r2, [r3, #6]
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017fc8:	69fb      	ldr	r3, [r7, #28]
 8017fca:	891b      	ldrh	r3, [r3, #8]
 8017fcc:	4618      	mov	r0, r3
 8017fce:	f7f8 f96d 	bl	80102ac <lwip_htons>
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	461a      	mov	r2, r3
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8017fda:	2311      	movs	r3, #17
 8017fdc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	7adb      	ldrb	r3, [r3, #11]
 8017fe2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	7a9b      	ldrb	r3, [r3, #10]
 8017fe8:	7cb9      	ldrb	r1, [r7, #18]
 8017fea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017fec:	9202      	str	r2, [sp, #8]
 8017fee:	7cfa      	ldrb	r2, [r7, #19]
 8017ff0:	9201      	str	r2, [sp, #4]
 8017ff2:	9300      	str	r3, [sp, #0]
 8017ff4:	460b      	mov	r3, r1
 8017ff6:	687a      	ldr	r2, [r7, #4]
 8017ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017ffa:	69f8      	ldr	r0, [r7, #28]
 8017ffc:	f001 fc54 	bl	80198a8 <ip4_output_if_src>
 8018000:	4603      	mov	r3, r0
 8018002:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018004:	69fa      	ldr	r2, [r7, #28]
 8018006:	68bb      	ldr	r3, [r7, #8]
 8018008:	429a      	cmp	r2, r3
 801800a:	d004      	beq.n	8018016 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801800c:	69f8      	ldr	r0, [r7, #28]
 801800e:	f7f9 fdff 	bl	8011c10 <pbuf_free>
    q = NULL;
 8018012:	2300      	movs	r3, #0
 8018014:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8018016:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801801a:	4618      	mov	r0, r3
 801801c:	3720      	adds	r7, #32
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
 8018022:	bf00      	nop
 8018024:	0801de5c 	.word	0x0801de5c
 8018028:	0801e048 	.word	0x0801e048
 801802c:	0801deb0 	.word	0x0801deb0
 8018030:	0801e068 	.word	0x0801e068
 8018034:	0801e088 	.word	0x0801e088
 8018038:	0801e0ac 	.word	0x0801e0ac
 801803c:	0801e0d0 	.word	0x0801e0d0
 8018040:	0801e0f4 	.word	0x0801e0f4

08018044 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b086      	sub	sp, #24
 8018048:	af00      	add	r7, sp, #0
 801804a:	60f8      	str	r0, [r7, #12]
 801804c:	60b9      	str	r1, [r7, #8]
 801804e:	4613      	mov	r3, r2
 8018050:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d101      	bne.n	801805c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018058:	4b39      	ldr	r3, [pc, #228]	@ (8018140 <udp_bind+0xfc>)
 801805a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d109      	bne.n	8018076 <udp_bind+0x32>
 8018062:	4b38      	ldr	r3, [pc, #224]	@ (8018144 <udp_bind+0x100>)
 8018064:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8018068:	4937      	ldr	r1, [pc, #220]	@ (8018148 <udp_bind+0x104>)
 801806a:	4838      	ldr	r0, [pc, #224]	@ (801814c <udp_bind+0x108>)
 801806c:	f002 fea2 	bl	801adb4 <iprintf>
 8018070:	f06f 030f 	mvn.w	r3, #15
 8018074:	e060      	b.n	8018138 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018076:	2300      	movs	r3, #0
 8018078:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801807a:	4b35      	ldr	r3, [pc, #212]	@ (8018150 <udp_bind+0x10c>)
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	617b      	str	r3, [r7, #20]
 8018080:	e009      	b.n	8018096 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018082:	68fa      	ldr	r2, [r7, #12]
 8018084:	697b      	ldr	r3, [r7, #20]
 8018086:	429a      	cmp	r2, r3
 8018088:	d102      	bne.n	8018090 <udp_bind+0x4c>
      rebind = 1;
 801808a:	2301      	movs	r3, #1
 801808c:	74fb      	strb	r3, [r7, #19]
      break;
 801808e:	e005      	b.n	801809c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018090:	697b      	ldr	r3, [r7, #20]
 8018092:	68db      	ldr	r3, [r3, #12]
 8018094:	617b      	str	r3, [r7, #20]
 8018096:	697b      	ldr	r3, [r7, #20]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d1f2      	bne.n	8018082 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801809c:	88fb      	ldrh	r3, [r7, #6]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d109      	bne.n	80180b6 <udp_bind+0x72>
    port = udp_new_port();
 80180a2:	f7ff fc35 	bl	8017910 <udp_new_port>
 80180a6:	4603      	mov	r3, r0
 80180a8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80180aa:	88fb      	ldrh	r3, [r7, #6]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d12c      	bne.n	801810a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80180b0:	f06f 0307 	mvn.w	r3, #7
 80180b4:	e040      	b.n	8018138 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80180b6:	4b26      	ldr	r3, [pc, #152]	@ (8018150 <udp_bind+0x10c>)
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	617b      	str	r3, [r7, #20]
 80180bc:	e022      	b.n	8018104 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80180be:	68fa      	ldr	r2, [r7, #12]
 80180c0:	697b      	ldr	r3, [r7, #20]
 80180c2:	429a      	cmp	r2, r3
 80180c4:	d01b      	beq.n	80180fe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80180c6:	697b      	ldr	r3, [r7, #20]
 80180c8:	8a5b      	ldrh	r3, [r3, #18]
 80180ca:	88fa      	ldrh	r2, [r7, #6]
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d116      	bne.n	80180fe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80180d0:	697b      	ldr	r3, [r7, #20]
 80180d2:	681a      	ldr	r2, [r3, #0]
 80180d4:	68bb      	ldr	r3, [r7, #8]
 80180d6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80180d8:	429a      	cmp	r2, r3
 80180da:	d00d      	beq.n	80180f8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d00a      	beq.n	80180f8 <udp_bind+0xb4>
 80180e2:	68bb      	ldr	r3, [r7, #8]
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d006      	beq.n	80180f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80180ea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d003      	beq.n	80180f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80180f0:	697b      	ldr	r3, [r7, #20]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d102      	bne.n	80180fe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80180f8:	f06f 0307 	mvn.w	r3, #7
 80180fc:	e01c      	b.n	8018138 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80180fe:	697b      	ldr	r3, [r7, #20]
 8018100:	68db      	ldr	r3, [r3, #12]
 8018102:	617b      	str	r3, [r7, #20]
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d1d9      	bne.n	80180be <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801810a:	68bb      	ldr	r3, [r7, #8]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d002      	beq.n	8018116 <udp_bind+0xd2>
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	e000      	b.n	8018118 <udp_bind+0xd4>
 8018116:	2300      	movs	r3, #0
 8018118:	68fa      	ldr	r2, [r7, #12]
 801811a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	88fa      	ldrh	r2, [r7, #6]
 8018120:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018122:	7cfb      	ldrb	r3, [r7, #19]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d106      	bne.n	8018136 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018128:	4b09      	ldr	r3, [pc, #36]	@ (8018150 <udp_bind+0x10c>)
 801812a:	681a      	ldr	r2, [r3, #0]
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018130:	4a07      	ldr	r2, [pc, #28]	@ (8018150 <udp_bind+0x10c>)
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018136:	2300      	movs	r3, #0
}
 8018138:	4618      	mov	r0, r3
 801813a:	3718      	adds	r7, #24
 801813c:	46bd      	mov	sp, r7
 801813e:	bd80      	pop	{r7, pc}
 8018140:	0801ea10 	.word	0x0801ea10
 8018144:	0801de5c 	.word	0x0801de5c
 8018148:	0801e124 	.word	0x0801e124
 801814c:	0801deb0 	.word	0x0801deb0
 8018150:	24014c0c 	.word	0x24014c0c

08018154 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b086      	sub	sp, #24
 8018158:	af00      	add	r7, sp, #0
 801815a:	60f8      	str	r0, [r7, #12]
 801815c:	60b9      	str	r1, [r7, #8]
 801815e:	4613      	mov	r3, r2
 8018160:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d109      	bne.n	801817c <udp_connect+0x28>
 8018168:	4b2c      	ldr	r3, [pc, #176]	@ (801821c <udp_connect+0xc8>)
 801816a:	f240 4235 	movw	r2, #1077	@ 0x435
 801816e:	492c      	ldr	r1, [pc, #176]	@ (8018220 <udp_connect+0xcc>)
 8018170:	482c      	ldr	r0, [pc, #176]	@ (8018224 <udp_connect+0xd0>)
 8018172:	f002 fe1f 	bl	801adb4 <iprintf>
 8018176:	f06f 030f 	mvn.w	r3, #15
 801817a:	e04b      	b.n	8018214 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801817c:	68bb      	ldr	r3, [r7, #8]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d109      	bne.n	8018196 <udp_connect+0x42>
 8018182:	4b26      	ldr	r3, [pc, #152]	@ (801821c <udp_connect+0xc8>)
 8018184:	f240 4236 	movw	r2, #1078	@ 0x436
 8018188:	4927      	ldr	r1, [pc, #156]	@ (8018228 <udp_connect+0xd4>)
 801818a:	4826      	ldr	r0, [pc, #152]	@ (8018224 <udp_connect+0xd0>)
 801818c:	f002 fe12 	bl	801adb4 <iprintf>
 8018190:	f06f 030f 	mvn.w	r3, #15
 8018194:	e03e      	b.n	8018214 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	8a5b      	ldrh	r3, [r3, #18]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d10f      	bne.n	80181be <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801819e:	68f9      	ldr	r1, [r7, #12]
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	8a5b      	ldrh	r3, [r3, #18]
 80181a4:	461a      	mov	r2, r3
 80181a6:	68f8      	ldr	r0, [r7, #12]
 80181a8:	f7ff ff4c 	bl	8018044 <udp_bind>
 80181ac:	4603      	mov	r3, r0
 80181ae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80181b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d002      	beq.n	80181be <udp_connect+0x6a>
      return err;
 80181b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80181bc:	e02a      	b.n	8018214 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80181be:	68bb      	ldr	r3, [r7, #8]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d002      	beq.n	80181ca <udp_connect+0x76>
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	e000      	b.n	80181cc <udp_connect+0x78>
 80181ca:	2300      	movs	r3, #0
 80181cc:	68fa      	ldr	r2, [r7, #12]
 80181ce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	88fa      	ldrh	r2, [r7, #6]
 80181d4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	7c1b      	ldrb	r3, [r3, #16]
 80181da:	f043 0304 	orr.w	r3, r3, #4
 80181de:	b2da      	uxtb	r2, r3
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80181e4:	4b11      	ldr	r3, [pc, #68]	@ (801822c <udp_connect+0xd8>)
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	617b      	str	r3, [r7, #20]
 80181ea:	e008      	b.n	80181fe <udp_connect+0xaa>
    if (pcb == ipcb) {
 80181ec:	68fa      	ldr	r2, [r7, #12]
 80181ee:	697b      	ldr	r3, [r7, #20]
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d101      	bne.n	80181f8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80181f4:	2300      	movs	r3, #0
 80181f6:	e00d      	b.n	8018214 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80181f8:	697b      	ldr	r3, [r7, #20]
 80181fa:	68db      	ldr	r3, [r3, #12]
 80181fc:	617b      	str	r3, [r7, #20]
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d1f3      	bne.n	80181ec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018204:	4b09      	ldr	r3, [pc, #36]	@ (801822c <udp_connect+0xd8>)
 8018206:	681a      	ldr	r2, [r3, #0]
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801820c:	4a07      	ldr	r2, [pc, #28]	@ (801822c <udp_connect+0xd8>)
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018212:	2300      	movs	r3, #0
}
 8018214:	4618      	mov	r0, r3
 8018216:	3718      	adds	r7, #24
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}
 801821c:	0801de5c 	.word	0x0801de5c
 8018220:	0801e13c 	.word	0x0801e13c
 8018224:	0801deb0 	.word	0x0801deb0
 8018228:	0801e158 	.word	0x0801e158
 801822c:	24014c0c 	.word	0x24014c0c

08018230 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b082      	sub	sp, #8
 8018234:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018236:	2001      	movs	r0, #1
 8018238:	f7f8 fdc8 	bl	8010dcc <memp_malloc>
 801823c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d007      	beq.n	8018254 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018244:	2220      	movs	r2, #32
 8018246:	2100      	movs	r1, #0
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	f002 fe18 	bl	801ae7e <memset>
    pcb->ttl = UDP_TTL;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	22ff      	movs	r2, #255	@ 0xff
 8018252:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018254:	687b      	ldr	r3, [r7, #4]
}
 8018256:	4618      	mov	r0, r3
 8018258:	3708      	adds	r7, #8
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}
	...

08018260 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018260:	b480      	push	{r7}
 8018262:	b085      	sub	sp, #20
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
 8018268:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d01e      	beq.n	80182ae <udp_netif_ip_addr_changed+0x4e>
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d01a      	beq.n	80182ae <udp_netif_ip_addr_changed+0x4e>
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d017      	beq.n	80182ae <udp_netif_ip_addr_changed+0x4e>
 801827e:	683b      	ldr	r3, [r7, #0]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d013      	beq.n	80182ae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018286:	4b0d      	ldr	r3, [pc, #52]	@ (80182bc <udp_netif_ip_addr_changed+0x5c>)
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	60fb      	str	r3, [r7, #12]
 801828c:	e00c      	b.n	80182a8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	681a      	ldr	r2, [r3, #0]
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	429a      	cmp	r2, r3
 8018298:	d103      	bne.n	80182a2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801829a:	683b      	ldr	r3, [r7, #0]
 801829c:	681a      	ldr	r2, [r3, #0]
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	68db      	ldr	r3, [r3, #12]
 80182a6:	60fb      	str	r3, [r7, #12]
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d1ef      	bne.n	801828e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80182ae:	bf00      	nop
 80182b0:	3714      	adds	r7, #20
 80182b2:	46bd      	mov	sp, r7
 80182b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b8:	4770      	bx	lr
 80182ba:	bf00      	nop
 80182bc:	24014c0c 	.word	0x24014c0c

080182c0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b082      	sub	sp, #8
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80182c8:	4915      	ldr	r1, [pc, #84]	@ (8018320 <etharp_free_entry+0x60>)
 80182ca:	687a      	ldr	r2, [r7, #4]
 80182cc:	4613      	mov	r3, r2
 80182ce:	005b      	lsls	r3, r3, #1
 80182d0:	4413      	add	r3, r2
 80182d2:	00db      	lsls	r3, r3, #3
 80182d4:	440b      	add	r3, r1
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d013      	beq.n	8018304 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80182dc:	4910      	ldr	r1, [pc, #64]	@ (8018320 <etharp_free_entry+0x60>)
 80182de:	687a      	ldr	r2, [r7, #4]
 80182e0:	4613      	mov	r3, r2
 80182e2:	005b      	lsls	r3, r3, #1
 80182e4:	4413      	add	r3, r2
 80182e6:	00db      	lsls	r3, r3, #3
 80182e8:	440b      	add	r3, r1
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7f9 fc8f 	bl	8011c10 <pbuf_free>
    arp_table[i].q = NULL;
 80182f2:	490b      	ldr	r1, [pc, #44]	@ (8018320 <etharp_free_entry+0x60>)
 80182f4:	687a      	ldr	r2, [r7, #4]
 80182f6:	4613      	mov	r3, r2
 80182f8:	005b      	lsls	r3, r3, #1
 80182fa:	4413      	add	r3, r2
 80182fc:	00db      	lsls	r3, r3, #3
 80182fe:	440b      	add	r3, r1
 8018300:	2200      	movs	r2, #0
 8018302:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018304:	4906      	ldr	r1, [pc, #24]	@ (8018320 <etharp_free_entry+0x60>)
 8018306:	687a      	ldr	r2, [r7, #4]
 8018308:	4613      	mov	r3, r2
 801830a:	005b      	lsls	r3, r3, #1
 801830c:	4413      	add	r3, r2
 801830e:	00db      	lsls	r3, r3, #3
 8018310:	440b      	add	r3, r1
 8018312:	3314      	adds	r3, #20
 8018314:	2200      	movs	r2, #0
 8018316:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018318:	bf00      	nop
 801831a:	3708      	adds	r7, #8
 801831c:	46bd      	mov	sp, r7
 801831e:	bd80      	pop	{r7, pc}
 8018320:	24014c10 	.word	0x24014c10

08018324 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b082      	sub	sp, #8
 8018328:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801832a:	2300      	movs	r3, #0
 801832c:	607b      	str	r3, [r7, #4]
 801832e:	e096      	b.n	801845e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018330:	494f      	ldr	r1, [pc, #316]	@ (8018470 <etharp_tmr+0x14c>)
 8018332:	687a      	ldr	r2, [r7, #4]
 8018334:	4613      	mov	r3, r2
 8018336:	005b      	lsls	r3, r3, #1
 8018338:	4413      	add	r3, r2
 801833a:	00db      	lsls	r3, r3, #3
 801833c:	440b      	add	r3, r1
 801833e:	3314      	adds	r3, #20
 8018340:	781b      	ldrb	r3, [r3, #0]
 8018342:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018344:	78fb      	ldrb	r3, [r7, #3]
 8018346:	2b00      	cmp	r3, #0
 8018348:	f000 8086 	beq.w	8018458 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801834c:	4948      	ldr	r1, [pc, #288]	@ (8018470 <etharp_tmr+0x14c>)
 801834e:	687a      	ldr	r2, [r7, #4]
 8018350:	4613      	mov	r3, r2
 8018352:	005b      	lsls	r3, r3, #1
 8018354:	4413      	add	r3, r2
 8018356:	00db      	lsls	r3, r3, #3
 8018358:	440b      	add	r3, r1
 801835a:	3312      	adds	r3, #18
 801835c:	881b      	ldrh	r3, [r3, #0]
 801835e:	3301      	adds	r3, #1
 8018360:	b298      	uxth	r0, r3
 8018362:	4943      	ldr	r1, [pc, #268]	@ (8018470 <etharp_tmr+0x14c>)
 8018364:	687a      	ldr	r2, [r7, #4]
 8018366:	4613      	mov	r3, r2
 8018368:	005b      	lsls	r3, r3, #1
 801836a:	4413      	add	r3, r2
 801836c:	00db      	lsls	r3, r3, #3
 801836e:	440b      	add	r3, r1
 8018370:	3312      	adds	r3, #18
 8018372:	4602      	mov	r2, r0
 8018374:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018376:	493e      	ldr	r1, [pc, #248]	@ (8018470 <etharp_tmr+0x14c>)
 8018378:	687a      	ldr	r2, [r7, #4]
 801837a:	4613      	mov	r3, r2
 801837c:	005b      	lsls	r3, r3, #1
 801837e:	4413      	add	r3, r2
 8018380:	00db      	lsls	r3, r3, #3
 8018382:	440b      	add	r3, r1
 8018384:	3312      	adds	r3, #18
 8018386:	881b      	ldrh	r3, [r3, #0]
 8018388:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801838c:	d215      	bcs.n	80183ba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801838e:	4938      	ldr	r1, [pc, #224]	@ (8018470 <etharp_tmr+0x14c>)
 8018390:	687a      	ldr	r2, [r7, #4]
 8018392:	4613      	mov	r3, r2
 8018394:	005b      	lsls	r3, r3, #1
 8018396:	4413      	add	r3, r2
 8018398:	00db      	lsls	r3, r3, #3
 801839a:	440b      	add	r3, r1
 801839c:	3314      	adds	r3, #20
 801839e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80183a0:	2b01      	cmp	r3, #1
 80183a2:	d10e      	bne.n	80183c2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80183a4:	4932      	ldr	r1, [pc, #200]	@ (8018470 <etharp_tmr+0x14c>)
 80183a6:	687a      	ldr	r2, [r7, #4]
 80183a8:	4613      	mov	r3, r2
 80183aa:	005b      	lsls	r3, r3, #1
 80183ac:	4413      	add	r3, r2
 80183ae:	00db      	lsls	r3, r3, #3
 80183b0:	440b      	add	r3, r1
 80183b2:	3312      	adds	r3, #18
 80183b4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80183b6:	2b04      	cmp	r3, #4
 80183b8:	d903      	bls.n	80183c2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80183ba:	6878      	ldr	r0, [r7, #4]
 80183bc:	f7ff ff80 	bl	80182c0 <etharp_free_entry>
 80183c0:	e04a      	b.n	8018458 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80183c2:	492b      	ldr	r1, [pc, #172]	@ (8018470 <etharp_tmr+0x14c>)
 80183c4:	687a      	ldr	r2, [r7, #4]
 80183c6:	4613      	mov	r3, r2
 80183c8:	005b      	lsls	r3, r3, #1
 80183ca:	4413      	add	r3, r2
 80183cc:	00db      	lsls	r3, r3, #3
 80183ce:	440b      	add	r3, r1
 80183d0:	3314      	adds	r3, #20
 80183d2:	781b      	ldrb	r3, [r3, #0]
 80183d4:	2b03      	cmp	r3, #3
 80183d6:	d10a      	bne.n	80183ee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80183d8:	4925      	ldr	r1, [pc, #148]	@ (8018470 <etharp_tmr+0x14c>)
 80183da:	687a      	ldr	r2, [r7, #4]
 80183dc:	4613      	mov	r3, r2
 80183de:	005b      	lsls	r3, r3, #1
 80183e0:	4413      	add	r3, r2
 80183e2:	00db      	lsls	r3, r3, #3
 80183e4:	440b      	add	r3, r1
 80183e6:	3314      	adds	r3, #20
 80183e8:	2204      	movs	r2, #4
 80183ea:	701a      	strb	r2, [r3, #0]
 80183ec:	e034      	b.n	8018458 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80183ee:	4920      	ldr	r1, [pc, #128]	@ (8018470 <etharp_tmr+0x14c>)
 80183f0:	687a      	ldr	r2, [r7, #4]
 80183f2:	4613      	mov	r3, r2
 80183f4:	005b      	lsls	r3, r3, #1
 80183f6:	4413      	add	r3, r2
 80183f8:	00db      	lsls	r3, r3, #3
 80183fa:	440b      	add	r3, r1
 80183fc:	3314      	adds	r3, #20
 80183fe:	781b      	ldrb	r3, [r3, #0]
 8018400:	2b04      	cmp	r3, #4
 8018402:	d10a      	bne.n	801841a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018404:	491a      	ldr	r1, [pc, #104]	@ (8018470 <etharp_tmr+0x14c>)
 8018406:	687a      	ldr	r2, [r7, #4]
 8018408:	4613      	mov	r3, r2
 801840a:	005b      	lsls	r3, r3, #1
 801840c:	4413      	add	r3, r2
 801840e:	00db      	lsls	r3, r3, #3
 8018410:	440b      	add	r3, r1
 8018412:	3314      	adds	r3, #20
 8018414:	2202      	movs	r2, #2
 8018416:	701a      	strb	r2, [r3, #0]
 8018418:	e01e      	b.n	8018458 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801841a:	4915      	ldr	r1, [pc, #84]	@ (8018470 <etharp_tmr+0x14c>)
 801841c:	687a      	ldr	r2, [r7, #4]
 801841e:	4613      	mov	r3, r2
 8018420:	005b      	lsls	r3, r3, #1
 8018422:	4413      	add	r3, r2
 8018424:	00db      	lsls	r3, r3, #3
 8018426:	440b      	add	r3, r1
 8018428:	3314      	adds	r3, #20
 801842a:	781b      	ldrb	r3, [r3, #0]
 801842c:	2b01      	cmp	r3, #1
 801842e:	d113      	bne.n	8018458 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018430:	490f      	ldr	r1, [pc, #60]	@ (8018470 <etharp_tmr+0x14c>)
 8018432:	687a      	ldr	r2, [r7, #4]
 8018434:	4613      	mov	r3, r2
 8018436:	005b      	lsls	r3, r3, #1
 8018438:	4413      	add	r3, r2
 801843a:	00db      	lsls	r3, r3, #3
 801843c:	440b      	add	r3, r1
 801843e:	3308      	adds	r3, #8
 8018440:	6818      	ldr	r0, [r3, #0]
 8018442:	687a      	ldr	r2, [r7, #4]
 8018444:	4613      	mov	r3, r2
 8018446:	005b      	lsls	r3, r3, #1
 8018448:	4413      	add	r3, r2
 801844a:	00db      	lsls	r3, r3, #3
 801844c:	4a08      	ldr	r2, [pc, #32]	@ (8018470 <etharp_tmr+0x14c>)
 801844e:	4413      	add	r3, r2
 8018450:	3304      	adds	r3, #4
 8018452:	4619      	mov	r1, r3
 8018454:	f000 fe6e 	bl	8019134 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	3301      	adds	r3, #1
 801845c:	607b      	str	r3, [r7, #4]
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	2b09      	cmp	r3, #9
 8018462:	f77f af65 	ble.w	8018330 <etharp_tmr+0xc>
      }
    }
  }
}
 8018466:	bf00      	nop
 8018468:	bf00      	nop
 801846a:	3708      	adds	r7, #8
 801846c:	46bd      	mov	sp, r7
 801846e:	bd80      	pop	{r7, pc}
 8018470:	24014c10 	.word	0x24014c10

08018474 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b08a      	sub	sp, #40	@ 0x28
 8018478:	af00      	add	r7, sp, #0
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	460b      	mov	r3, r1
 801847e:	607a      	str	r2, [r7, #4]
 8018480:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018482:	230a      	movs	r3, #10
 8018484:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018486:	230a      	movs	r3, #10
 8018488:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801848a:	230a      	movs	r3, #10
 801848c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801848e:	2300      	movs	r3, #0
 8018490:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018492:	230a      	movs	r3, #10
 8018494:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018496:	2300      	movs	r3, #0
 8018498:	83bb      	strh	r3, [r7, #28]
 801849a:	2300      	movs	r3, #0
 801849c:	837b      	strh	r3, [r7, #26]
 801849e:	2300      	movs	r3, #0
 80184a0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80184a2:	2300      	movs	r3, #0
 80184a4:	843b      	strh	r3, [r7, #32]
 80184a6:	e0ae      	b.n	8018606 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80184a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184ac:	49a6      	ldr	r1, [pc, #664]	@ (8018748 <etharp_find_entry+0x2d4>)
 80184ae:	4613      	mov	r3, r2
 80184b0:	005b      	lsls	r3, r3, #1
 80184b2:	4413      	add	r3, r2
 80184b4:	00db      	lsls	r3, r3, #3
 80184b6:	440b      	add	r3, r1
 80184b8:	3314      	adds	r3, #20
 80184ba:	781b      	ldrb	r3, [r3, #0]
 80184bc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80184be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80184c2:	2b0a      	cmp	r3, #10
 80184c4:	d105      	bne.n	80184d2 <etharp_find_entry+0x5e>
 80184c6:	7dfb      	ldrb	r3, [r7, #23]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d102      	bne.n	80184d2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80184cc:	8c3b      	ldrh	r3, [r7, #32]
 80184ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80184d0:	e095      	b.n	80185fe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80184d2:	7dfb      	ldrb	r3, [r7, #23]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	f000 8092 	beq.w	80185fe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80184da:	7dfb      	ldrb	r3, [r7, #23]
 80184dc:	2b01      	cmp	r3, #1
 80184de:	d009      	beq.n	80184f4 <etharp_find_entry+0x80>
 80184e0:	7dfb      	ldrb	r3, [r7, #23]
 80184e2:	2b01      	cmp	r3, #1
 80184e4:	d806      	bhi.n	80184f4 <etharp_find_entry+0x80>
 80184e6:	4b99      	ldr	r3, [pc, #612]	@ (801874c <etharp_find_entry+0x2d8>)
 80184e8:	f240 1223 	movw	r2, #291	@ 0x123
 80184ec:	4998      	ldr	r1, [pc, #608]	@ (8018750 <etharp_find_entry+0x2dc>)
 80184ee:	4899      	ldr	r0, [pc, #612]	@ (8018754 <etharp_find_entry+0x2e0>)
 80184f0:	f002 fc60 	bl	801adb4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d020      	beq.n	801853c <etharp_find_entry+0xc8>
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	6819      	ldr	r1, [r3, #0]
 80184fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018502:	4891      	ldr	r0, [pc, #580]	@ (8018748 <etharp_find_entry+0x2d4>)
 8018504:	4613      	mov	r3, r2
 8018506:	005b      	lsls	r3, r3, #1
 8018508:	4413      	add	r3, r2
 801850a:	00db      	lsls	r3, r3, #3
 801850c:	4403      	add	r3, r0
 801850e:	3304      	adds	r3, #4
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	4299      	cmp	r1, r3
 8018514:	d112      	bne.n	801853c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d00c      	beq.n	8018536 <etharp_find_entry+0xc2>
 801851c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018520:	4989      	ldr	r1, [pc, #548]	@ (8018748 <etharp_find_entry+0x2d4>)
 8018522:	4613      	mov	r3, r2
 8018524:	005b      	lsls	r3, r3, #1
 8018526:	4413      	add	r3, r2
 8018528:	00db      	lsls	r3, r3, #3
 801852a:	440b      	add	r3, r1
 801852c:	3308      	adds	r3, #8
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	687a      	ldr	r2, [r7, #4]
 8018532:	429a      	cmp	r2, r3
 8018534:	d102      	bne.n	801853c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018536:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801853a:	e100      	b.n	801873e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801853c:	7dfb      	ldrb	r3, [r7, #23]
 801853e:	2b01      	cmp	r3, #1
 8018540:	d140      	bne.n	80185c4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018542:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018546:	4980      	ldr	r1, [pc, #512]	@ (8018748 <etharp_find_entry+0x2d4>)
 8018548:	4613      	mov	r3, r2
 801854a:	005b      	lsls	r3, r3, #1
 801854c:	4413      	add	r3, r2
 801854e:	00db      	lsls	r3, r3, #3
 8018550:	440b      	add	r3, r1
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d01a      	beq.n	801858e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018558:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801855c:	497a      	ldr	r1, [pc, #488]	@ (8018748 <etharp_find_entry+0x2d4>)
 801855e:	4613      	mov	r3, r2
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	4413      	add	r3, r2
 8018564:	00db      	lsls	r3, r3, #3
 8018566:	440b      	add	r3, r1
 8018568:	3312      	adds	r3, #18
 801856a:	881b      	ldrh	r3, [r3, #0]
 801856c:	8bba      	ldrh	r2, [r7, #28]
 801856e:	429a      	cmp	r2, r3
 8018570:	d845      	bhi.n	80185fe <etharp_find_entry+0x18a>
            old_queue = i;
 8018572:	8c3b      	ldrh	r3, [r7, #32]
 8018574:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018576:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801857a:	4973      	ldr	r1, [pc, #460]	@ (8018748 <etharp_find_entry+0x2d4>)
 801857c:	4613      	mov	r3, r2
 801857e:	005b      	lsls	r3, r3, #1
 8018580:	4413      	add	r3, r2
 8018582:	00db      	lsls	r3, r3, #3
 8018584:	440b      	add	r3, r1
 8018586:	3312      	adds	r3, #18
 8018588:	881b      	ldrh	r3, [r3, #0]
 801858a:	83bb      	strh	r3, [r7, #28]
 801858c:	e037      	b.n	80185fe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801858e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018592:	496d      	ldr	r1, [pc, #436]	@ (8018748 <etharp_find_entry+0x2d4>)
 8018594:	4613      	mov	r3, r2
 8018596:	005b      	lsls	r3, r3, #1
 8018598:	4413      	add	r3, r2
 801859a:	00db      	lsls	r3, r3, #3
 801859c:	440b      	add	r3, r1
 801859e:	3312      	adds	r3, #18
 80185a0:	881b      	ldrh	r3, [r3, #0]
 80185a2:	8b7a      	ldrh	r2, [r7, #26]
 80185a4:	429a      	cmp	r2, r3
 80185a6:	d82a      	bhi.n	80185fe <etharp_find_entry+0x18a>
            old_pending = i;
 80185a8:	8c3b      	ldrh	r3, [r7, #32]
 80185aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80185ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185b0:	4965      	ldr	r1, [pc, #404]	@ (8018748 <etharp_find_entry+0x2d4>)
 80185b2:	4613      	mov	r3, r2
 80185b4:	005b      	lsls	r3, r3, #1
 80185b6:	4413      	add	r3, r2
 80185b8:	00db      	lsls	r3, r3, #3
 80185ba:	440b      	add	r3, r1
 80185bc:	3312      	adds	r3, #18
 80185be:	881b      	ldrh	r3, [r3, #0]
 80185c0:	837b      	strh	r3, [r7, #26]
 80185c2:	e01c      	b.n	80185fe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80185c4:	7dfb      	ldrb	r3, [r7, #23]
 80185c6:	2b01      	cmp	r3, #1
 80185c8:	d919      	bls.n	80185fe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80185ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185ce:	495e      	ldr	r1, [pc, #376]	@ (8018748 <etharp_find_entry+0x2d4>)
 80185d0:	4613      	mov	r3, r2
 80185d2:	005b      	lsls	r3, r3, #1
 80185d4:	4413      	add	r3, r2
 80185d6:	00db      	lsls	r3, r3, #3
 80185d8:	440b      	add	r3, r1
 80185da:	3312      	adds	r3, #18
 80185dc:	881b      	ldrh	r3, [r3, #0]
 80185de:	8b3a      	ldrh	r2, [r7, #24]
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d80c      	bhi.n	80185fe <etharp_find_entry+0x18a>
            old_stable = i;
 80185e4:	8c3b      	ldrh	r3, [r7, #32]
 80185e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80185e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185ec:	4956      	ldr	r1, [pc, #344]	@ (8018748 <etharp_find_entry+0x2d4>)
 80185ee:	4613      	mov	r3, r2
 80185f0:	005b      	lsls	r3, r3, #1
 80185f2:	4413      	add	r3, r2
 80185f4:	00db      	lsls	r3, r3, #3
 80185f6:	440b      	add	r3, r1
 80185f8:	3312      	adds	r3, #18
 80185fa:	881b      	ldrh	r3, [r3, #0]
 80185fc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80185fe:	8c3b      	ldrh	r3, [r7, #32]
 8018600:	3301      	adds	r3, #1
 8018602:	b29b      	uxth	r3, r3
 8018604:	843b      	strh	r3, [r7, #32]
 8018606:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801860a:	2b09      	cmp	r3, #9
 801860c:	f77f af4c 	ble.w	80184a8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018610:	7afb      	ldrb	r3, [r7, #11]
 8018612:	f003 0302 	and.w	r3, r3, #2
 8018616:	2b00      	cmp	r3, #0
 8018618:	d108      	bne.n	801862c <etharp_find_entry+0x1b8>
 801861a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801861e:	2b0a      	cmp	r3, #10
 8018620:	d107      	bne.n	8018632 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018622:	7afb      	ldrb	r3, [r7, #11]
 8018624:	f003 0301 	and.w	r3, r3, #1
 8018628:	2b00      	cmp	r3, #0
 801862a:	d102      	bne.n	8018632 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801862c:	f04f 33ff 	mov.w	r3, #4294967295
 8018630:	e085      	b.n	801873e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018632:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018636:	2b09      	cmp	r3, #9
 8018638:	dc02      	bgt.n	8018640 <etharp_find_entry+0x1cc>
    i = empty;
 801863a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801863c:	843b      	strh	r3, [r7, #32]
 801863e:	e039      	b.n	80186b4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018640:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018644:	2b09      	cmp	r3, #9
 8018646:	dc14      	bgt.n	8018672 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018648:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801864a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801864c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018650:	493d      	ldr	r1, [pc, #244]	@ (8018748 <etharp_find_entry+0x2d4>)
 8018652:	4613      	mov	r3, r2
 8018654:	005b      	lsls	r3, r3, #1
 8018656:	4413      	add	r3, r2
 8018658:	00db      	lsls	r3, r3, #3
 801865a:	440b      	add	r3, r1
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d018      	beq.n	8018694 <etharp_find_entry+0x220>
 8018662:	4b3a      	ldr	r3, [pc, #232]	@ (801874c <etharp_find_entry+0x2d8>)
 8018664:	f240 126d 	movw	r2, #365	@ 0x16d
 8018668:	493b      	ldr	r1, [pc, #236]	@ (8018758 <etharp_find_entry+0x2e4>)
 801866a:	483a      	ldr	r0, [pc, #232]	@ (8018754 <etharp_find_entry+0x2e0>)
 801866c:	f002 fba2 	bl	801adb4 <iprintf>
 8018670:	e010      	b.n	8018694 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018672:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018676:	2b09      	cmp	r3, #9
 8018678:	dc02      	bgt.n	8018680 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801867a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801867c:	843b      	strh	r3, [r7, #32]
 801867e:	e009      	b.n	8018694 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018680:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018684:	2b09      	cmp	r3, #9
 8018686:	dc02      	bgt.n	801868e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018688:	8bfb      	ldrh	r3, [r7, #30]
 801868a:	843b      	strh	r3, [r7, #32]
 801868c:	e002      	b.n	8018694 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801868e:	f04f 33ff 	mov.w	r3, #4294967295
 8018692:	e054      	b.n	801873e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018694:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018698:	2b09      	cmp	r3, #9
 801869a:	dd06      	ble.n	80186aa <etharp_find_entry+0x236>
 801869c:	4b2b      	ldr	r3, [pc, #172]	@ (801874c <etharp_find_entry+0x2d8>)
 801869e:	f240 127f 	movw	r2, #383	@ 0x17f
 80186a2:	492e      	ldr	r1, [pc, #184]	@ (801875c <etharp_find_entry+0x2e8>)
 80186a4:	482b      	ldr	r0, [pc, #172]	@ (8018754 <etharp_find_entry+0x2e0>)
 80186a6:	f002 fb85 	bl	801adb4 <iprintf>
    etharp_free_entry(i);
 80186aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80186ae:	4618      	mov	r0, r3
 80186b0:	f7ff fe06 	bl	80182c0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80186b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80186b8:	2b09      	cmp	r3, #9
 80186ba:	dd06      	ble.n	80186ca <etharp_find_entry+0x256>
 80186bc:	4b23      	ldr	r3, [pc, #140]	@ (801874c <etharp_find_entry+0x2d8>)
 80186be:	f240 1283 	movw	r2, #387	@ 0x183
 80186c2:	4926      	ldr	r1, [pc, #152]	@ (801875c <etharp_find_entry+0x2e8>)
 80186c4:	4823      	ldr	r0, [pc, #140]	@ (8018754 <etharp_find_entry+0x2e0>)
 80186c6:	f002 fb75 	bl	801adb4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80186ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186ce:	491e      	ldr	r1, [pc, #120]	@ (8018748 <etharp_find_entry+0x2d4>)
 80186d0:	4613      	mov	r3, r2
 80186d2:	005b      	lsls	r3, r3, #1
 80186d4:	4413      	add	r3, r2
 80186d6:	00db      	lsls	r3, r3, #3
 80186d8:	440b      	add	r3, r1
 80186da:	3314      	adds	r3, #20
 80186dc:	781b      	ldrb	r3, [r3, #0]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d006      	beq.n	80186f0 <etharp_find_entry+0x27c>
 80186e2:	4b1a      	ldr	r3, [pc, #104]	@ (801874c <etharp_find_entry+0x2d8>)
 80186e4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80186e8:	491d      	ldr	r1, [pc, #116]	@ (8018760 <etharp_find_entry+0x2ec>)
 80186ea:	481a      	ldr	r0, [pc, #104]	@ (8018754 <etharp_find_entry+0x2e0>)
 80186ec:	f002 fb62 	bl	801adb4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d00b      	beq.n	801870e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80186f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	6819      	ldr	r1, [r3, #0]
 80186fe:	4812      	ldr	r0, [pc, #72]	@ (8018748 <etharp_find_entry+0x2d4>)
 8018700:	4613      	mov	r3, r2
 8018702:	005b      	lsls	r3, r3, #1
 8018704:	4413      	add	r3, r2
 8018706:	00db      	lsls	r3, r3, #3
 8018708:	4403      	add	r3, r0
 801870a:	3304      	adds	r3, #4
 801870c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801870e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018712:	490d      	ldr	r1, [pc, #52]	@ (8018748 <etharp_find_entry+0x2d4>)
 8018714:	4613      	mov	r3, r2
 8018716:	005b      	lsls	r3, r3, #1
 8018718:	4413      	add	r3, r2
 801871a:	00db      	lsls	r3, r3, #3
 801871c:	440b      	add	r3, r1
 801871e:	3312      	adds	r3, #18
 8018720:	2200      	movs	r2, #0
 8018722:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018724:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018728:	4907      	ldr	r1, [pc, #28]	@ (8018748 <etharp_find_entry+0x2d4>)
 801872a:	4613      	mov	r3, r2
 801872c:	005b      	lsls	r3, r3, #1
 801872e:	4413      	add	r3, r2
 8018730:	00db      	lsls	r3, r3, #3
 8018732:	440b      	add	r3, r1
 8018734:	3308      	adds	r3, #8
 8018736:	687a      	ldr	r2, [r7, #4]
 8018738:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801873a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801873e:	4618      	mov	r0, r3
 8018740:	3728      	adds	r7, #40	@ 0x28
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
 8018746:	bf00      	nop
 8018748:	24014c10 	.word	0x24014c10
 801874c:	0801e1c0 	.word	0x0801e1c0
 8018750:	0801e1f8 	.word	0x0801e1f8
 8018754:	0801e238 	.word	0x0801e238
 8018758:	0801e260 	.word	0x0801e260
 801875c:	0801e278 	.word	0x0801e278
 8018760:	0801e28c 	.word	0x0801e28c

08018764 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b088      	sub	sp, #32
 8018768:	af02      	add	r7, sp, #8
 801876a:	60f8      	str	r0, [r7, #12]
 801876c:	60b9      	str	r1, [r7, #8]
 801876e:	607a      	str	r2, [r7, #4]
 8018770:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018778:	2b06      	cmp	r3, #6
 801877a:	d006      	beq.n	801878a <etharp_update_arp_entry+0x26>
 801877c:	4b48      	ldr	r3, [pc, #288]	@ (80188a0 <etharp_update_arp_entry+0x13c>)
 801877e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8018782:	4948      	ldr	r1, [pc, #288]	@ (80188a4 <etharp_update_arp_entry+0x140>)
 8018784:	4848      	ldr	r0, [pc, #288]	@ (80188a8 <etharp_update_arp_entry+0x144>)
 8018786:	f002 fb15 	bl	801adb4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801878a:	68bb      	ldr	r3, [r7, #8]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d012      	beq.n	80187b6 <etharp_update_arp_entry+0x52>
 8018790:	68bb      	ldr	r3, [r7, #8]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d00e      	beq.n	80187b6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018798:	68bb      	ldr	r3, [r7, #8]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	68f9      	ldr	r1, [r7, #12]
 801879e:	4618      	mov	r0, r3
 80187a0:	f001 f930 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 80187a4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d105      	bne.n	80187b6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80187aa:	68bb      	ldr	r3, [r7, #8]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80187b2:	2be0      	cmp	r3, #224	@ 0xe0
 80187b4:	d102      	bne.n	80187bc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80187b6:	f06f 030f 	mvn.w	r3, #15
 80187ba:	e06c      	b.n	8018896 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80187bc:	78fb      	ldrb	r3, [r7, #3]
 80187be:	68fa      	ldr	r2, [r7, #12]
 80187c0:	4619      	mov	r1, r3
 80187c2:	68b8      	ldr	r0, [r7, #8]
 80187c4:	f7ff fe56 	bl	8018474 <etharp_find_entry>
 80187c8:	4603      	mov	r3, r0
 80187ca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80187cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	da02      	bge.n	80187da <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80187d4:	8afb      	ldrh	r3, [r7, #22]
 80187d6:	b25b      	sxtb	r3, r3
 80187d8:	e05d      	b.n	8018896 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80187da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187de:	4933      	ldr	r1, [pc, #204]	@ (80188ac <etharp_update_arp_entry+0x148>)
 80187e0:	4613      	mov	r3, r2
 80187e2:	005b      	lsls	r3, r3, #1
 80187e4:	4413      	add	r3, r2
 80187e6:	00db      	lsls	r3, r3, #3
 80187e8:	440b      	add	r3, r1
 80187ea:	3314      	adds	r3, #20
 80187ec:	2202      	movs	r2, #2
 80187ee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80187f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187f4:	492d      	ldr	r1, [pc, #180]	@ (80188ac <etharp_update_arp_entry+0x148>)
 80187f6:	4613      	mov	r3, r2
 80187f8:	005b      	lsls	r3, r3, #1
 80187fa:	4413      	add	r3, r2
 80187fc:	00db      	lsls	r3, r3, #3
 80187fe:	440b      	add	r3, r1
 8018800:	3308      	adds	r3, #8
 8018802:	68fa      	ldr	r2, [r7, #12]
 8018804:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018806:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801880a:	4613      	mov	r3, r2
 801880c:	005b      	lsls	r3, r3, #1
 801880e:	4413      	add	r3, r2
 8018810:	00db      	lsls	r3, r3, #3
 8018812:	3308      	adds	r3, #8
 8018814:	4a25      	ldr	r2, [pc, #148]	@ (80188ac <etharp_update_arp_entry+0x148>)
 8018816:	4413      	add	r3, r2
 8018818:	3304      	adds	r3, #4
 801881a:	2206      	movs	r2, #6
 801881c:	6879      	ldr	r1, [r7, #4]
 801881e:	4618      	mov	r0, r3
 8018820:	f002 fc01 	bl	801b026 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018824:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018828:	4920      	ldr	r1, [pc, #128]	@ (80188ac <etharp_update_arp_entry+0x148>)
 801882a:	4613      	mov	r3, r2
 801882c:	005b      	lsls	r3, r3, #1
 801882e:	4413      	add	r3, r2
 8018830:	00db      	lsls	r3, r3, #3
 8018832:	440b      	add	r3, r1
 8018834:	3312      	adds	r3, #18
 8018836:	2200      	movs	r2, #0
 8018838:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801883a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801883e:	491b      	ldr	r1, [pc, #108]	@ (80188ac <etharp_update_arp_entry+0x148>)
 8018840:	4613      	mov	r3, r2
 8018842:	005b      	lsls	r3, r3, #1
 8018844:	4413      	add	r3, r2
 8018846:	00db      	lsls	r3, r3, #3
 8018848:	440b      	add	r3, r1
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d021      	beq.n	8018894 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018850:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018854:	4915      	ldr	r1, [pc, #84]	@ (80188ac <etharp_update_arp_entry+0x148>)
 8018856:	4613      	mov	r3, r2
 8018858:	005b      	lsls	r3, r3, #1
 801885a:	4413      	add	r3, r2
 801885c:	00db      	lsls	r3, r3, #3
 801885e:	440b      	add	r3, r1
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018864:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018868:	4910      	ldr	r1, [pc, #64]	@ (80188ac <etharp_update_arp_entry+0x148>)
 801886a:	4613      	mov	r3, r2
 801886c:	005b      	lsls	r3, r3, #1
 801886e:	4413      	add	r3, r2
 8018870:	00db      	lsls	r3, r3, #3
 8018872:	440b      	add	r3, r1
 8018874:	2200      	movs	r2, #0
 8018876:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801887e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018882:	9300      	str	r3, [sp, #0]
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	6939      	ldr	r1, [r7, #16]
 8018888:	68f8      	ldr	r0, [r7, #12]
 801888a:	f002 f859 	bl	801a940 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801888e:	6938      	ldr	r0, [r7, #16]
 8018890:	f7f9 f9be 	bl	8011c10 <pbuf_free>
  }
  return ERR_OK;
 8018894:	2300      	movs	r3, #0
}
 8018896:	4618      	mov	r0, r3
 8018898:	3718      	adds	r7, #24
 801889a:	46bd      	mov	sp, r7
 801889c:	bd80      	pop	{r7, pc}
 801889e:	bf00      	nop
 80188a0:	0801e1c0 	.word	0x0801e1c0
 80188a4:	0801e2b8 	.word	0x0801e2b8
 80188a8:	0801e238 	.word	0x0801e238
 80188ac:	24014c10 	.word	0x24014c10

080188b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b084      	sub	sp, #16
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80188b8:	2300      	movs	r3, #0
 80188ba:	60fb      	str	r3, [r7, #12]
 80188bc:	e01e      	b.n	80188fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80188be:	4913      	ldr	r1, [pc, #76]	@ (801890c <etharp_cleanup_netif+0x5c>)
 80188c0:	68fa      	ldr	r2, [r7, #12]
 80188c2:	4613      	mov	r3, r2
 80188c4:	005b      	lsls	r3, r3, #1
 80188c6:	4413      	add	r3, r2
 80188c8:	00db      	lsls	r3, r3, #3
 80188ca:	440b      	add	r3, r1
 80188cc:	3314      	adds	r3, #20
 80188ce:	781b      	ldrb	r3, [r3, #0]
 80188d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80188d2:	7afb      	ldrb	r3, [r7, #11]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d00e      	beq.n	80188f6 <etharp_cleanup_netif+0x46>
 80188d8:	490c      	ldr	r1, [pc, #48]	@ (801890c <etharp_cleanup_netif+0x5c>)
 80188da:	68fa      	ldr	r2, [r7, #12]
 80188dc:	4613      	mov	r3, r2
 80188de:	005b      	lsls	r3, r3, #1
 80188e0:	4413      	add	r3, r2
 80188e2:	00db      	lsls	r3, r3, #3
 80188e4:	440b      	add	r3, r1
 80188e6:	3308      	adds	r3, #8
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	429a      	cmp	r2, r3
 80188ee:	d102      	bne.n	80188f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80188f0:	68f8      	ldr	r0, [r7, #12]
 80188f2:	f7ff fce5 	bl	80182c0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	3301      	adds	r3, #1
 80188fa:	60fb      	str	r3, [r7, #12]
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	2b09      	cmp	r3, #9
 8018900:	dddd      	ble.n	80188be <etharp_cleanup_netif+0xe>
    }
  }
}
 8018902:	bf00      	nop
 8018904:	bf00      	nop
 8018906:	3710      	adds	r7, #16
 8018908:	46bd      	mov	sp, r7
 801890a:	bd80      	pop	{r7, pc}
 801890c:	24014c10 	.word	0x24014c10

08018910 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018910:	b5b0      	push	{r4, r5, r7, lr}
 8018912:	b08a      	sub	sp, #40	@ 0x28
 8018914:	af04      	add	r7, sp, #16
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d107      	bne.n	8018930 <etharp_input+0x20>
 8018920:	4b3d      	ldr	r3, [pc, #244]	@ (8018a18 <etharp_input+0x108>)
 8018922:	f240 228a 	movw	r2, #650	@ 0x28a
 8018926:	493d      	ldr	r1, [pc, #244]	@ (8018a1c <etharp_input+0x10c>)
 8018928:	483d      	ldr	r0, [pc, #244]	@ (8018a20 <etharp_input+0x110>)
 801892a:	f002 fa43 	bl	801adb4 <iprintf>
 801892e:	e06f      	b.n	8018a10 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	685b      	ldr	r3, [r3, #4]
 8018934:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018936:	693b      	ldr	r3, [r7, #16]
 8018938:	881b      	ldrh	r3, [r3, #0]
 801893a:	b29b      	uxth	r3, r3
 801893c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018940:	d10c      	bne.n	801895c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018942:	693b      	ldr	r3, [r7, #16]
 8018944:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018946:	2b06      	cmp	r3, #6
 8018948:	d108      	bne.n	801895c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801894a:	693b      	ldr	r3, [r7, #16]
 801894c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801894e:	2b04      	cmp	r3, #4
 8018950:	d104      	bne.n	801895c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018952:	693b      	ldr	r3, [r7, #16]
 8018954:	885b      	ldrh	r3, [r3, #2]
 8018956:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018958:	2b08      	cmp	r3, #8
 801895a:	d003      	beq.n	8018964 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	f7f9 f957 	bl	8011c10 <pbuf_free>
    return;
 8018962:	e055      	b.n	8018a10 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018964:	693b      	ldr	r3, [r7, #16]
 8018966:	330e      	adds	r3, #14
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801896c:	693b      	ldr	r3, [r7, #16]
 801896e:	3318      	adds	r3, #24
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018974:	683b      	ldr	r3, [r7, #0]
 8018976:	3304      	adds	r3, #4
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d102      	bne.n	8018984 <etharp_input+0x74>
    for_us = 0;
 801897e:	2300      	movs	r3, #0
 8018980:	75fb      	strb	r3, [r7, #23]
 8018982:	e009      	b.n	8018998 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018984:	68ba      	ldr	r2, [r7, #8]
 8018986:	683b      	ldr	r3, [r7, #0]
 8018988:	3304      	adds	r3, #4
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	429a      	cmp	r2, r3
 801898e:	bf0c      	ite	eq
 8018990:	2301      	moveq	r3, #1
 8018992:	2300      	movne	r3, #0
 8018994:	b2db      	uxtb	r3, r3
 8018996:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018998:	693b      	ldr	r3, [r7, #16]
 801899a:	f103 0208 	add.w	r2, r3, #8
 801899e:	7dfb      	ldrb	r3, [r7, #23]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d001      	beq.n	80189a8 <etharp_input+0x98>
 80189a4:	2301      	movs	r3, #1
 80189a6:	e000      	b.n	80189aa <etharp_input+0x9a>
 80189a8:	2302      	movs	r3, #2
 80189aa:	f107 010c 	add.w	r1, r7, #12
 80189ae:	6838      	ldr	r0, [r7, #0]
 80189b0:	f7ff fed8 	bl	8018764 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80189b4:	693b      	ldr	r3, [r7, #16]
 80189b6:	88db      	ldrh	r3, [r3, #6]
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80189be:	d003      	beq.n	80189c8 <etharp_input+0xb8>
 80189c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80189c4:	d01e      	beq.n	8018a04 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80189c6:	e020      	b.n	8018a0a <etharp_input+0xfa>
      if (for_us) {
 80189c8:	7dfb      	ldrb	r3, [r7, #23]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d01c      	beq.n	8018a08 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80189d4:	693b      	ldr	r3, [r7, #16]
 80189d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80189da:	683b      	ldr	r3, [r7, #0]
 80189dc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80189e0:	683b      	ldr	r3, [r7, #0]
 80189e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80189e4:	693a      	ldr	r2, [r7, #16]
 80189e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80189e8:	2102      	movs	r1, #2
 80189ea:	9103      	str	r1, [sp, #12]
 80189ec:	f107 010c 	add.w	r1, r7, #12
 80189f0:	9102      	str	r1, [sp, #8]
 80189f2:	9201      	str	r2, [sp, #4]
 80189f4:	9300      	str	r3, [sp, #0]
 80189f6:	462b      	mov	r3, r5
 80189f8:	4622      	mov	r2, r4
 80189fa:	4601      	mov	r1, r0
 80189fc:	6838      	ldr	r0, [r7, #0]
 80189fe:	f000 faeb 	bl	8018fd8 <etharp_raw>
      break;
 8018a02:	e001      	b.n	8018a08 <etharp_input+0xf8>
      break;
 8018a04:	bf00      	nop
 8018a06:	e000      	b.n	8018a0a <etharp_input+0xfa>
      break;
 8018a08:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018a0a:	6878      	ldr	r0, [r7, #4]
 8018a0c:	f7f9 f900 	bl	8011c10 <pbuf_free>
}
 8018a10:	3718      	adds	r7, #24
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bdb0      	pop	{r4, r5, r7, pc}
 8018a16:	bf00      	nop
 8018a18:	0801e1c0 	.word	0x0801e1c0
 8018a1c:	0801e310 	.word	0x0801e310
 8018a20:	0801e238 	.word	0x0801e238

08018a24 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b086      	sub	sp, #24
 8018a28:	af02      	add	r7, sp, #8
 8018a2a:	60f8      	str	r0, [r7, #12]
 8018a2c:	60b9      	str	r1, [r7, #8]
 8018a2e:	4613      	mov	r3, r2
 8018a30:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018a32:	79fa      	ldrb	r2, [r7, #7]
 8018a34:	4944      	ldr	r1, [pc, #272]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018a36:	4613      	mov	r3, r2
 8018a38:	005b      	lsls	r3, r3, #1
 8018a3a:	4413      	add	r3, r2
 8018a3c:	00db      	lsls	r3, r3, #3
 8018a3e:	440b      	add	r3, r1
 8018a40:	3314      	adds	r3, #20
 8018a42:	781b      	ldrb	r3, [r3, #0]
 8018a44:	2b01      	cmp	r3, #1
 8018a46:	d806      	bhi.n	8018a56 <etharp_output_to_arp_index+0x32>
 8018a48:	4b40      	ldr	r3, [pc, #256]	@ (8018b4c <etharp_output_to_arp_index+0x128>)
 8018a4a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8018a4e:	4940      	ldr	r1, [pc, #256]	@ (8018b50 <etharp_output_to_arp_index+0x12c>)
 8018a50:	4840      	ldr	r0, [pc, #256]	@ (8018b54 <etharp_output_to_arp_index+0x130>)
 8018a52:	f002 f9af 	bl	801adb4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018a56:	79fa      	ldrb	r2, [r7, #7]
 8018a58:	493b      	ldr	r1, [pc, #236]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018a5a:	4613      	mov	r3, r2
 8018a5c:	005b      	lsls	r3, r3, #1
 8018a5e:	4413      	add	r3, r2
 8018a60:	00db      	lsls	r3, r3, #3
 8018a62:	440b      	add	r3, r1
 8018a64:	3314      	adds	r3, #20
 8018a66:	781b      	ldrb	r3, [r3, #0]
 8018a68:	2b02      	cmp	r3, #2
 8018a6a:	d153      	bne.n	8018b14 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018a6c:	79fa      	ldrb	r2, [r7, #7]
 8018a6e:	4936      	ldr	r1, [pc, #216]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018a70:	4613      	mov	r3, r2
 8018a72:	005b      	lsls	r3, r3, #1
 8018a74:	4413      	add	r3, r2
 8018a76:	00db      	lsls	r3, r3, #3
 8018a78:	440b      	add	r3, r1
 8018a7a:	3312      	adds	r3, #18
 8018a7c:	881b      	ldrh	r3, [r3, #0]
 8018a7e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8018a82:	d919      	bls.n	8018ab8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018a84:	79fa      	ldrb	r2, [r7, #7]
 8018a86:	4613      	mov	r3, r2
 8018a88:	005b      	lsls	r3, r3, #1
 8018a8a:	4413      	add	r3, r2
 8018a8c:	00db      	lsls	r3, r3, #3
 8018a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018a90:	4413      	add	r3, r2
 8018a92:	3304      	adds	r3, #4
 8018a94:	4619      	mov	r1, r3
 8018a96:	68f8      	ldr	r0, [r7, #12]
 8018a98:	f000 fb4c 	bl	8019134 <etharp_request>
 8018a9c:	4603      	mov	r3, r0
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d138      	bne.n	8018b14 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018aa2:	79fa      	ldrb	r2, [r7, #7]
 8018aa4:	4928      	ldr	r1, [pc, #160]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018aa6:	4613      	mov	r3, r2
 8018aa8:	005b      	lsls	r3, r3, #1
 8018aaa:	4413      	add	r3, r2
 8018aac:	00db      	lsls	r3, r3, #3
 8018aae:	440b      	add	r3, r1
 8018ab0:	3314      	adds	r3, #20
 8018ab2:	2203      	movs	r2, #3
 8018ab4:	701a      	strb	r2, [r3, #0]
 8018ab6:	e02d      	b.n	8018b14 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018ab8:	79fa      	ldrb	r2, [r7, #7]
 8018aba:	4923      	ldr	r1, [pc, #140]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018abc:	4613      	mov	r3, r2
 8018abe:	005b      	lsls	r3, r3, #1
 8018ac0:	4413      	add	r3, r2
 8018ac2:	00db      	lsls	r3, r3, #3
 8018ac4:	440b      	add	r3, r1
 8018ac6:	3312      	adds	r3, #18
 8018ac8:	881b      	ldrh	r3, [r3, #0]
 8018aca:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8018ace:	d321      	bcc.n	8018b14 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018ad0:	79fa      	ldrb	r2, [r7, #7]
 8018ad2:	4613      	mov	r3, r2
 8018ad4:	005b      	lsls	r3, r3, #1
 8018ad6:	4413      	add	r3, r2
 8018ad8:	00db      	lsls	r3, r3, #3
 8018ada:	4a1b      	ldr	r2, [pc, #108]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018adc:	4413      	add	r3, r2
 8018ade:	1d19      	adds	r1, r3, #4
 8018ae0:	79fa      	ldrb	r2, [r7, #7]
 8018ae2:	4613      	mov	r3, r2
 8018ae4:	005b      	lsls	r3, r3, #1
 8018ae6:	4413      	add	r3, r2
 8018ae8:	00db      	lsls	r3, r3, #3
 8018aea:	3308      	adds	r3, #8
 8018aec:	4a16      	ldr	r2, [pc, #88]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018aee:	4413      	add	r3, r2
 8018af0:	3304      	adds	r3, #4
 8018af2:	461a      	mov	r2, r3
 8018af4:	68f8      	ldr	r0, [r7, #12]
 8018af6:	f000 fafb 	bl	80190f0 <etharp_request_dst>
 8018afa:	4603      	mov	r3, r0
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d109      	bne.n	8018b14 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018b00:	79fa      	ldrb	r2, [r7, #7]
 8018b02:	4911      	ldr	r1, [pc, #68]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018b04:	4613      	mov	r3, r2
 8018b06:	005b      	lsls	r3, r3, #1
 8018b08:	4413      	add	r3, r2
 8018b0a:	00db      	lsls	r3, r3, #3
 8018b0c:	440b      	add	r3, r1
 8018b0e:	3314      	adds	r3, #20
 8018b10:	2203      	movs	r2, #3
 8018b12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8018b1a:	79fa      	ldrb	r2, [r7, #7]
 8018b1c:	4613      	mov	r3, r2
 8018b1e:	005b      	lsls	r3, r3, #1
 8018b20:	4413      	add	r3, r2
 8018b22:	00db      	lsls	r3, r3, #3
 8018b24:	3308      	adds	r3, #8
 8018b26:	4a08      	ldr	r2, [pc, #32]	@ (8018b48 <etharp_output_to_arp_index+0x124>)
 8018b28:	4413      	add	r3, r2
 8018b2a:	3304      	adds	r3, #4
 8018b2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018b30:	9200      	str	r2, [sp, #0]
 8018b32:	460a      	mov	r2, r1
 8018b34:	68b9      	ldr	r1, [r7, #8]
 8018b36:	68f8      	ldr	r0, [r7, #12]
 8018b38:	f001 ff02 	bl	801a940 <ethernet_output>
 8018b3c:	4603      	mov	r3, r0
}
 8018b3e:	4618      	mov	r0, r3
 8018b40:	3710      	adds	r7, #16
 8018b42:	46bd      	mov	sp, r7
 8018b44:	bd80      	pop	{r7, pc}
 8018b46:	bf00      	nop
 8018b48:	24014c10 	.word	0x24014c10
 8018b4c:	0801e1c0 	.word	0x0801e1c0
 8018b50:	0801e330 	.word	0x0801e330
 8018b54:	0801e238 	.word	0x0801e238

08018b58 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b08a      	sub	sp, #40	@ 0x28
 8018b5c:	af02      	add	r7, sp, #8
 8018b5e:	60f8      	str	r0, [r7, #12]
 8018b60:	60b9      	str	r1, [r7, #8]
 8018b62:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d106      	bne.n	8018b7c <etharp_output+0x24>
 8018b6e:	4b73      	ldr	r3, [pc, #460]	@ (8018d3c <etharp_output+0x1e4>)
 8018b70:	f240 321e 	movw	r2, #798	@ 0x31e
 8018b74:	4972      	ldr	r1, [pc, #456]	@ (8018d40 <etharp_output+0x1e8>)
 8018b76:	4873      	ldr	r0, [pc, #460]	@ (8018d44 <etharp_output+0x1ec>)
 8018b78:	f002 f91c 	bl	801adb4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018b7c:	68bb      	ldr	r3, [r7, #8]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d106      	bne.n	8018b90 <etharp_output+0x38>
 8018b82:	4b6e      	ldr	r3, [pc, #440]	@ (8018d3c <etharp_output+0x1e4>)
 8018b84:	f240 321f 	movw	r2, #799	@ 0x31f
 8018b88:	496f      	ldr	r1, [pc, #444]	@ (8018d48 <etharp_output+0x1f0>)
 8018b8a:	486e      	ldr	r0, [pc, #440]	@ (8018d44 <etharp_output+0x1ec>)
 8018b8c:	f002 f912 	bl	801adb4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d106      	bne.n	8018ba4 <etharp_output+0x4c>
 8018b96:	4b69      	ldr	r3, [pc, #420]	@ (8018d3c <etharp_output+0x1e4>)
 8018b98:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018b9c:	496b      	ldr	r1, [pc, #428]	@ (8018d4c <etharp_output+0x1f4>)
 8018b9e:	4869      	ldr	r0, [pc, #420]	@ (8018d44 <etharp_output+0x1ec>)
 8018ba0:	f002 f908 	bl	801adb4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	68f9      	ldr	r1, [r7, #12]
 8018baa:	4618      	mov	r0, r3
 8018bac:	f000 ff2a 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d002      	beq.n	8018bbc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018bb6:	4b66      	ldr	r3, [pc, #408]	@ (8018d50 <etharp_output+0x1f8>)
 8018bb8:	61fb      	str	r3, [r7, #28]
 8018bba:	e0af      	b.n	8018d1c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018bc4:	2be0      	cmp	r3, #224	@ 0xe0
 8018bc6:	d118      	bne.n	8018bfa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018bc8:	2301      	movs	r3, #1
 8018bca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018bcc:	2300      	movs	r3, #0
 8018bce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018bd0:	235e      	movs	r3, #94	@ 0x5e
 8018bd2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	3301      	adds	r3, #1
 8018bd8:	781b      	ldrb	r3, [r3, #0]
 8018bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	3302      	adds	r3, #2
 8018be6:	781b      	ldrb	r3, [r3, #0]
 8018be8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	3303      	adds	r3, #3
 8018bee:	781b      	ldrb	r3, [r3, #0]
 8018bf0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018bf2:	f107 0310 	add.w	r3, r7, #16
 8018bf6:	61fb      	str	r3, [r7, #28]
 8018bf8:	e090      	b.n	8018d1c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681a      	ldr	r2, [r3, #0]
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	3304      	adds	r3, #4
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	405a      	eors	r2, r3
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	3308      	adds	r3, #8
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	4013      	ands	r3, r2
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d012      	beq.n	8018c38 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018c18:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8018c1c:	4293      	cmp	r3, r2
 8018c1e:	d00b      	beq.n	8018c38 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	330c      	adds	r3, #12
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d003      	beq.n	8018c32 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	330c      	adds	r3, #12
 8018c2e:	61bb      	str	r3, [r7, #24]
 8018c30:	e002      	b.n	8018c38 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018c32:	f06f 0303 	mvn.w	r3, #3
 8018c36:	e07d      	b.n	8018d34 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018c38:	4b46      	ldr	r3, [pc, #280]	@ (8018d54 <etharp_output+0x1fc>)
 8018c3a:	781b      	ldrb	r3, [r3, #0]
 8018c3c:	4619      	mov	r1, r3
 8018c3e:	4a46      	ldr	r2, [pc, #280]	@ (8018d58 <etharp_output+0x200>)
 8018c40:	460b      	mov	r3, r1
 8018c42:	005b      	lsls	r3, r3, #1
 8018c44:	440b      	add	r3, r1
 8018c46:	00db      	lsls	r3, r3, #3
 8018c48:	4413      	add	r3, r2
 8018c4a:	3314      	adds	r3, #20
 8018c4c:	781b      	ldrb	r3, [r3, #0]
 8018c4e:	2b01      	cmp	r3, #1
 8018c50:	d925      	bls.n	8018c9e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018c52:	4b40      	ldr	r3, [pc, #256]	@ (8018d54 <etharp_output+0x1fc>)
 8018c54:	781b      	ldrb	r3, [r3, #0]
 8018c56:	4619      	mov	r1, r3
 8018c58:	4a3f      	ldr	r2, [pc, #252]	@ (8018d58 <etharp_output+0x200>)
 8018c5a:	460b      	mov	r3, r1
 8018c5c:	005b      	lsls	r3, r3, #1
 8018c5e:	440b      	add	r3, r1
 8018c60:	00db      	lsls	r3, r3, #3
 8018c62:	4413      	add	r3, r2
 8018c64:	3308      	adds	r3, #8
 8018c66:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018c68:	68fa      	ldr	r2, [r7, #12]
 8018c6a:	429a      	cmp	r2, r3
 8018c6c:	d117      	bne.n	8018c9e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018c6e:	69bb      	ldr	r3, [r7, #24]
 8018c70:	681a      	ldr	r2, [r3, #0]
 8018c72:	4b38      	ldr	r3, [pc, #224]	@ (8018d54 <etharp_output+0x1fc>)
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	4618      	mov	r0, r3
 8018c78:	4937      	ldr	r1, [pc, #220]	@ (8018d58 <etharp_output+0x200>)
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	005b      	lsls	r3, r3, #1
 8018c7e:	4403      	add	r3, r0
 8018c80:	00db      	lsls	r3, r3, #3
 8018c82:	440b      	add	r3, r1
 8018c84:	3304      	adds	r3, #4
 8018c86:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018c88:	429a      	cmp	r2, r3
 8018c8a:	d108      	bne.n	8018c9e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018c8c:	4b31      	ldr	r3, [pc, #196]	@ (8018d54 <etharp_output+0x1fc>)
 8018c8e:	781b      	ldrb	r3, [r3, #0]
 8018c90:	461a      	mov	r2, r3
 8018c92:	68b9      	ldr	r1, [r7, #8]
 8018c94:	68f8      	ldr	r0, [r7, #12]
 8018c96:	f7ff fec5 	bl	8018a24 <etharp_output_to_arp_index>
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	e04a      	b.n	8018d34 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	75fb      	strb	r3, [r7, #23]
 8018ca2:	e031      	b.n	8018d08 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018ca4:	7dfa      	ldrb	r2, [r7, #23]
 8018ca6:	492c      	ldr	r1, [pc, #176]	@ (8018d58 <etharp_output+0x200>)
 8018ca8:	4613      	mov	r3, r2
 8018caa:	005b      	lsls	r3, r3, #1
 8018cac:	4413      	add	r3, r2
 8018cae:	00db      	lsls	r3, r3, #3
 8018cb0:	440b      	add	r3, r1
 8018cb2:	3314      	adds	r3, #20
 8018cb4:	781b      	ldrb	r3, [r3, #0]
 8018cb6:	2b01      	cmp	r3, #1
 8018cb8:	d923      	bls.n	8018d02 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018cba:	7dfa      	ldrb	r2, [r7, #23]
 8018cbc:	4926      	ldr	r1, [pc, #152]	@ (8018d58 <etharp_output+0x200>)
 8018cbe:	4613      	mov	r3, r2
 8018cc0:	005b      	lsls	r3, r3, #1
 8018cc2:	4413      	add	r3, r2
 8018cc4:	00db      	lsls	r3, r3, #3
 8018cc6:	440b      	add	r3, r1
 8018cc8:	3308      	adds	r3, #8
 8018cca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018ccc:	68fa      	ldr	r2, [r7, #12]
 8018cce:	429a      	cmp	r2, r3
 8018cd0:	d117      	bne.n	8018d02 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018cd2:	69bb      	ldr	r3, [r7, #24]
 8018cd4:	6819      	ldr	r1, [r3, #0]
 8018cd6:	7dfa      	ldrb	r2, [r7, #23]
 8018cd8:	481f      	ldr	r0, [pc, #124]	@ (8018d58 <etharp_output+0x200>)
 8018cda:	4613      	mov	r3, r2
 8018cdc:	005b      	lsls	r3, r3, #1
 8018cde:	4413      	add	r3, r2
 8018ce0:	00db      	lsls	r3, r3, #3
 8018ce2:	4403      	add	r3, r0
 8018ce4:	3304      	adds	r3, #4
 8018ce6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018ce8:	4299      	cmp	r1, r3
 8018cea:	d10a      	bne.n	8018d02 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018cec:	4a19      	ldr	r2, [pc, #100]	@ (8018d54 <etharp_output+0x1fc>)
 8018cee:	7dfb      	ldrb	r3, [r7, #23]
 8018cf0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018cf2:	7dfb      	ldrb	r3, [r7, #23]
 8018cf4:	461a      	mov	r2, r3
 8018cf6:	68b9      	ldr	r1, [r7, #8]
 8018cf8:	68f8      	ldr	r0, [r7, #12]
 8018cfa:	f7ff fe93 	bl	8018a24 <etharp_output_to_arp_index>
 8018cfe:	4603      	mov	r3, r0
 8018d00:	e018      	b.n	8018d34 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018d02:	7dfb      	ldrb	r3, [r7, #23]
 8018d04:	3301      	adds	r3, #1
 8018d06:	75fb      	strb	r3, [r7, #23]
 8018d08:	7dfb      	ldrb	r3, [r7, #23]
 8018d0a:	2b09      	cmp	r3, #9
 8018d0c:	d9ca      	bls.n	8018ca4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018d0e:	68ba      	ldr	r2, [r7, #8]
 8018d10:	69b9      	ldr	r1, [r7, #24]
 8018d12:	68f8      	ldr	r0, [r7, #12]
 8018d14:	f000 f822 	bl	8018d5c <etharp_query>
 8018d18:	4603      	mov	r3, r0
 8018d1a:	e00b      	b.n	8018d34 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8018d22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018d26:	9300      	str	r3, [sp, #0]
 8018d28:	69fb      	ldr	r3, [r7, #28]
 8018d2a:	68b9      	ldr	r1, [r7, #8]
 8018d2c:	68f8      	ldr	r0, [r7, #12]
 8018d2e:	f001 fe07 	bl	801a940 <ethernet_output>
 8018d32:	4603      	mov	r3, r0
}
 8018d34:	4618      	mov	r0, r3
 8018d36:	3720      	adds	r7, #32
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	bd80      	pop	{r7, pc}
 8018d3c:	0801e1c0 	.word	0x0801e1c0
 8018d40:	0801e310 	.word	0x0801e310
 8018d44:	0801e238 	.word	0x0801e238
 8018d48:	0801e360 	.word	0x0801e360
 8018d4c:	0801e300 	.word	0x0801e300
 8018d50:	0801ea14 	.word	0x0801ea14
 8018d54:	24014d00 	.word	0x24014d00
 8018d58:	24014c10 	.word	0x24014c10

08018d5c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b08c      	sub	sp, #48	@ 0x30
 8018d60:	af02      	add	r7, sp, #8
 8018d62:	60f8      	str	r0, [r7, #12]
 8018d64:	60b9      	str	r1, [r7, #8]
 8018d66:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	3326      	adds	r3, #38	@ 0x26
 8018d6c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018d6e:	23ff      	movs	r3, #255	@ 0xff
 8018d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8018d74:	2300      	movs	r3, #0
 8018d76:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d78:	68bb      	ldr	r3, [r7, #8]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	68f9      	ldr	r1, [r7, #12]
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f000 fe40 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 8018d84:	4603      	mov	r3, r0
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d10c      	bne.n	8018da4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018d8a:	68bb      	ldr	r3, [r7, #8]
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d92:	2be0      	cmp	r3, #224	@ 0xe0
 8018d94:	d006      	beq.n	8018da4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d003      	beq.n	8018da4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018d9c:	68bb      	ldr	r3, [r7, #8]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d102      	bne.n	8018daa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018da4:	f06f 030f 	mvn.w	r3, #15
 8018da8:	e101      	b.n	8018fae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018daa:	68fa      	ldr	r2, [r7, #12]
 8018dac:	2101      	movs	r1, #1
 8018dae:	68b8      	ldr	r0, [r7, #8]
 8018db0:	f7ff fb60 	bl	8018474 <etharp_find_entry>
 8018db4:	4603      	mov	r3, r0
 8018db6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018db8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	da02      	bge.n	8018dc6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018dc0:	8a7b      	ldrh	r3, [r7, #18]
 8018dc2:	b25b      	sxtb	r3, r3
 8018dc4:	e0f3      	b.n	8018fae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018dc6:	8a7b      	ldrh	r3, [r7, #18]
 8018dc8:	2b7e      	cmp	r3, #126	@ 0x7e
 8018dca:	d906      	bls.n	8018dda <etharp_query+0x7e>
 8018dcc:	4b7a      	ldr	r3, [pc, #488]	@ (8018fb8 <etharp_query+0x25c>)
 8018dce:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8018dd2:	497a      	ldr	r1, [pc, #488]	@ (8018fbc <etharp_query+0x260>)
 8018dd4:	487a      	ldr	r0, [pc, #488]	@ (8018fc0 <etharp_query+0x264>)
 8018dd6:	f001 ffed 	bl	801adb4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018dda:	8a7b      	ldrh	r3, [r7, #18]
 8018ddc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018dde:	7c7a      	ldrb	r2, [r7, #17]
 8018de0:	4978      	ldr	r1, [pc, #480]	@ (8018fc4 <etharp_query+0x268>)
 8018de2:	4613      	mov	r3, r2
 8018de4:	005b      	lsls	r3, r3, #1
 8018de6:	4413      	add	r3, r2
 8018de8:	00db      	lsls	r3, r3, #3
 8018dea:	440b      	add	r3, r1
 8018dec:	3314      	adds	r3, #20
 8018dee:	781b      	ldrb	r3, [r3, #0]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d115      	bne.n	8018e20 <etharp_query+0xc4>
    is_new_entry = 1;
 8018df4:	2301      	movs	r3, #1
 8018df6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018df8:	7c7a      	ldrb	r2, [r7, #17]
 8018dfa:	4972      	ldr	r1, [pc, #456]	@ (8018fc4 <etharp_query+0x268>)
 8018dfc:	4613      	mov	r3, r2
 8018dfe:	005b      	lsls	r3, r3, #1
 8018e00:	4413      	add	r3, r2
 8018e02:	00db      	lsls	r3, r3, #3
 8018e04:	440b      	add	r3, r1
 8018e06:	3314      	adds	r3, #20
 8018e08:	2201      	movs	r2, #1
 8018e0a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018e0c:	7c7a      	ldrb	r2, [r7, #17]
 8018e0e:	496d      	ldr	r1, [pc, #436]	@ (8018fc4 <etharp_query+0x268>)
 8018e10:	4613      	mov	r3, r2
 8018e12:	005b      	lsls	r3, r3, #1
 8018e14:	4413      	add	r3, r2
 8018e16:	00db      	lsls	r3, r3, #3
 8018e18:	440b      	add	r3, r1
 8018e1a:	3308      	adds	r3, #8
 8018e1c:	68fa      	ldr	r2, [r7, #12]
 8018e1e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018e20:	7c7a      	ldrb	r2, [r7, #17]
 8018e22:	4968      	ldr	r1, [pc, #416]	@ (8018fc4 <etharp_query+0x268>)
 8018e24:	4613      	mov	r3, r2
 8018e26:	005b      	lsls	r3, r3, #1
 8018e28:	4413      	add	r3, r2
 8018e2a:	00db      	lsls	r3, r3, #3
 8018e2c:	440b      	add	r3, r1
 8018e2e:	3314      	adds	r3, #20
 8018e30:	781b      	ldrb	r3, [r3, #0]
 8018e32:	2b01      	cmp	r3, #1
 8018e34:	d011      	beq.n	8018e5a <etharp_query+0xfe>
 8018e36:	7c7a      	ldrb	r2, [r7, #17]
 8018e38:	4962      	ldr	r1, [pc, #392]	@ (8018fc4 <etharp_query+0x268>)
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	005b      	lsls	r3, r3, #1
 8018e3e:	4413      	add	r3, r2
 8018e40:	00db      	lsls	r3, r3, #3
 8018e42:	440b      	add	r3, r1
 8018e44:	3314      	adds	r3, #20
 8018e46:	781b      	ldrb	r3, [r3, #0]
 8018e48:	2b01      	cmp	r3, #1
 8018e4a:	d806      	bhi.n	8018e5a <etharp_query+0xfe>
 8018e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8018fb8 <etharp_query+0x25c>)
 8018e4e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8018e52:	495d      	ldr	r1, [pc, #372]	@ (8018fc8 <etharp_query+0x26c>)
 8018e54:	485a      	ldr	r0, [pc, #360]	@ (8018fc0 <etharp_query+0x264>)
 8018e56:	f001 ffad 	bl	801adb4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018e5a:	6a3b      	ldr	r3, [r7, #32]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d102      	bne.n	8018e66 <etharp_query+0x10a>
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d10c      	bne.n	8018e80 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018e66:	68b9      	ldr	r1, [r7, #8]
 8018e68:	68f8      	ldr	r0, [r7, #12]
 8018e6a:	f000 f963 	bl	8019134 <etharp_request>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d102      	bne.n	8018e80 <etharp_query+0x124>
      return result;
 8018e7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018e7e:	e096      	b.n	8018fae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d106      	bne.n	8018e94 <etharp_query+0x138>
 8018e86:	4b4c      	ldr	r3, [pc, #304]	@ (8018fb8 <etharp_query+0x25c>)
 8018e88:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8018e8c:	494f      	ldr	r1, [pc, #316]	@ (8018fcc <etharp_query+0x270>)
 8018e8e:	484c      	ldr	r0, [pc, #304]	@ (8018fc0 <etharp_query+0x264>)
 8018e90:	f001 ff90 	bl	801adb4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018e94:	7c7a      	ldrb	r2, [r7, #17]
 8018e96:	494b      	ldr	r1, [pc, #300]	@ (8018fc4 <etharp_query+0x268>)
 8018e98:	4613      	mov	r3, r2
 8018e9a:	005b      	lsls	r3, r3, #1
 8018e9c:	4413      	add	r3, r2
 8018e9e:	00db      	lsls	r3, r3, #3
 8018ea0:	440b      	add	r3, r1
 8018ea2:	3314      	adds	r3, #20
 8018ea4:	781b      	ldrb	r3, [r3, #0]
 8018ea6:	2b01      	cmp	r3, #1
 8018ea8:	d917      	bls.n	8018eda <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018eaa:	4a49      	ldr	r2, [pc, #292]	@ (8018fd0 <etharp_query+0x274>)
 8018eac:	7c7b      	ldrb	r3, [r7, #17]
 8018eae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018eb0:	7c7a      	ldrb	r2, [r7, #17]
 8018eb2:	4613      	mov	r3, r2
 8018eb4:	005b      	lsls	r3, r3, #1
 8018eb6:	4413      	add	r3, r2
 8018eb8:	00db      	lsls	r3, r3, #3
 8018eba:	3308      	adds	r3, #8
 8018ebc:	4a41      	ldr	r2, [pc, #260]	@ (8018fc4 <etharp_query+0x268>)
 8018ebe:	4413      	add	r3, r2
 8018ec0:	3304      	adds	r3, #4
 8018ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018ec6:	9200      	str	r2, [sp, #0]
 8018ec8:	697a      	ldr	r2, [r7, #20]
 8018eca:	6879      	ldr	r1, [r7, #4]
 8018ecc:	68f8      	ldr	r0, [r7, #12]
 8018ece:	f001 fd37 	bl	801a940 <ethernet_output>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018ed8:	e067      	b.n	8018faa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018eda:	7c7a      	ldrb	r2, [r7, #17]
 8018edc:	4939      	ldr	r1, [pc, #228]	@ (8018fc4 <etharp_query+0x268>)
 8018ede:	4613      	mov	r3, r2
 8018ee0:	005b      	lsls	r3, r3, #1
 8018ee2:	4413      	add	r3, r2
 8018ee4:	00db      	lsls	r3, r3, #3
 8018ee6:	440b      	add	r3, r1
 8018ee8:	3314      	adds	r3, #20
 8018eea:	781b      	ldrb	r3, [r3, #0]
 8018eec:	2b01      	cmp	r3, #1
 8018eee:	d15c      	bne.n	8018faa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018ef8:	e01c      	b.n	8018f34 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018efa:	69fb      	ldr	r3, [r7, #28]
 8018efc:	895a      	ldrh	r2, [r3, #10]
 8018efe:	69fb      	ldr	r3, [r7, #28]
 8018f00:	891b      	ldrh	r3, [r3, #8]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d10a      	bne.n	8018f1c <etharp_query+0x1c0>
 8018f06:	69fb      	ldr	r3, [r7, #28]
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d006      	beq.n	8018f1c <etharp_query+0x1c0>
 8018f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8018fb8 <etharp_query+0x25c>)
 8018f10:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8018f14:	492f      	ldr	r1, [pc, #188]	@ (8018fd4 <etharp_query+0x278>)
 8018f16:	482a      	ldr	r0, [pc, #168]	@ (8018fc0 <etharp_query+0x264>)
 8018f18:	f001 ff4c 	bl	801adb4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018f1c:	69fb      	ldr	r3, [r7, #28]
 8018f1e:	7b1b      	ldrb	r3, [r3, #12]
 8018f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d002      	beq.n	8018f2e <etharp_query+0x1d2>
        copy_needed = 1;
 8018f28:	2301      	movs	r3, #1
 8018f2a:	61bb      	str	r3, [r7, #24]
        break;
 8018f2c:	e005      	b.n	8018f3a <etharp_query+0x1de>
      }
      p = p->next;
 8018f2e:	69fb      	ldr	r3, [r7, #28]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018f34:	69fb      	ldr	r3, [r7, #28]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d1df      	bne.n	8018efa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018f3a:	69bb      	ldr	r3, [r7, #24]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d007      	beq.n	8018f50 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018f40:	687a      	ldr	r2, [r7, #4]
 8018f42:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8018f46:	200e      	movs	r0, #14
 8018f48:	f7f9 f8da 	bl	8012100 <pbuf_clone>
 8018f4c:	61f8      	str	r0, [r7, #28]
 8018f4e:	e004      	b.n	8018f5a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018f54:	69f8      	ldr	r0, [r7, #28]
 8018f56:	f7f8 ff01 	bl	8011d5c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018f5a:	69fb      	ldr	r3, [r7, #28]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d021      	beq.n	8018fa4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018f60:	7c7a      	ldrb	r2, [r7, #17]
 8018f62:	4918      	ldr	r1, [pc, #96]	@ (8018fc4 <etharp_query+0x268>)
 8018f64:	4613      	mov	r3, r2
 8018f66:	005b      	lsls	r3, r3, #1
 8018f68:	4413      	add	r3, r2
 8018f6a:	00db      	lsls	r3, r3, #3
 8018f6c:	440b      	add	r3, r1
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d00a      	beq.n	8018f8a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018f74:	7c7a      	ldrb	r2, [r7, #17]
 8018f76:	4913      	ldr	r1, [pc, #76]	@ (8018fc4 <etharp_query+0x268>)
 8018f78:	4613      	mov	r3, r2
 8018f7a:	005b      	lsls	r3, r3, #1
 8018f7c:	4413      	add	r3, r2
 8018f7e:	00db      	lsls	r3, r3, #3
 8018f80:	440b      	add	r3, r1
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7f8 fe43 	bl	8011c10 <pbuf_free>
      }
      arp_table[i].q = p;
 8018f8a:	7c7a      	ldrb	r2, [r7, #17]
 8018f8c:	490d      	ldr	r1, [pc, #52]	@ (8018fc4 <etharp_query+0x268>)
 8018f8e:	4613      	mov	r3, r2
 8018f90:	005b      	lsls	r3, r3, #1
 8018f92:	4413      	add	r3, r2
 8018f94:	00db      	lsls	r3, r3, #3
 8018f96:	440b      	add	r3, r1
 8018f98:	69fa      	ldr	r2, [r7, #28]
 8018f9a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018fa2:	e002      	b.n	8018faa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018fa4:	23ff      	movs	r3, #255	@ 0xff
 8018fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8018faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	3728      	adds	r7, #40	@ 0x28
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}
 8018fb6:	bf00      	nop
 8018fb8:	0801e1c0 	.word	0x0801e1c0
 8018fbc:	0801e36c 	.word	0x0801e36c
 8018fc0:	0801e238 	.word	0x0801e238
 8018fc4:	24014c10 	.word	0x24014c10
 8018fc8:	0801e37c 	.word	0x0801e37c
 8018fcc:	0801e360 	.word	0x0801e360
 8018fd0:	24014d00 	.word	0x24014d00
 8018fd4:	0801e3a4 	.word	0x0801e3a4

08018fd8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b08a      	sub	sp, #40	@ 0x28
 8018fdc:	af02      	add	r7, sp, #8
 8018fde:	60f8      	str	r0, [r7, #12]
 8018fe0:	60b9      	str	r1, [r7, #8]
 8018fe2:	607a      	str	r2, [r7, #4]
 8018fe4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d106      	bne.n	8018ffe <etharp_raw+0x26>
 8018ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80190dc <etharp_raw+0x104>)
 8018ff2:	f240 4257 	movw	r2, #1111	@ 0x457
 8018ff6:	493a      	ldr	r1, [pc, #232]	@ (80190e0 <etharp_raw+0x108>)
 8018ff8:	483a      	ldr	r0, [pc, #232]	@ (80190e4 <etharp_raw+0x10c>)
 8018ffa:	f001 fedb 	bl	801adb4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018ffe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019002:	211c      	movs	r1, #28
 8019004:	200e      	movs	r0, #14
 8019006:	f7f8 fb1b 	bl	8011640 <pbuf_alloc>
 801900a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801900c:	69bb      	ldr	r3, [r7, #24]
 801900e:	2b00      	cmp	r3, #0
 8019010:	d102      	bne.n	8019018 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019012:	f04f 33ff 	mov.w	r3, #4294967295
 8019016:	e05d      	b.n	80190d4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019018:	69bb      	ldr	r3, [r7, #24]
 801901a:	895b      	ldrh	r3, [r3, #10]
 801901c:	2b1b      	cmp	r3, #27
 801901e:	d806      	bhi.n	801902e <etharp_raw+0x56>
 8019020:	4b2e      	ldr	r3, [pc, #184]	@ (80190dc <etharp_raw+0x104>)
 8019022:	f240 4262 	movw	r2, #1122	@ 0x462
 8019026:	4930      	ldr	r1, [pc, #192]	@ (80190e8 <etharp_raw+0x110>)
 8019028:	482e      	ldr	r0, [pc, #184]	@ (80190e4 <etharp_raw+0x10c>)
 801902a:	f001 fec3 	bl	801adb4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801902e:	69bb      	ldr	r3, [r7, #24]
 8019030:	685b      	ldr	r3, [r3, #4]
 8019032:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019034:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019036:	4618      	mov	r0, r3
 8019038:	f7f7 f938 	bl	80102ac <lwip_htons>
 801903c:	4603      	mov	r3, r0
 801903e:	461a      	mov	r2, r3
 8019040:	697b      	ldr	r3, [r7, #20]
 8019042:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801904a:	2b06      	cmp	r3, #6
 801904c:	d006      	beq.n	801905c <etharp_raw+0x84>
 801904e:	4b23      	ldr	r3, [pc, #140]	@ (80190dc <etharp_raw+0x104>)
 8019050:	f240 4269 	movw	r2, #1129	@ 0x469
 8019054:	4925      	ldr	r1, [pc, #148]	@ (80190ec <etharp_raw+0x114>)
 8019056:	4823      	ldr	r0, [pc, #140]	@ (80190e4 <etharp_raw+0x10c>)
 8019058:	f001 feac 	bl	801adb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	3308      	adds	r3, #8
 8019060:	2206      	movs	r2, #6
 8019062:	6839      	ldr	r1, [r7, #0]
 8019064:	4618      	mov	r0, r3
 8019066:	f001 ffde 	bl	801b026 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801906a:	697b      	ldr	r3, [r7, #20]
 801906c:	3312      	adds	r3, #18
 801906e:	2206      	movs	r2, #6
 8019070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019072:	4618      	mov	r0, r3
 8019074:	f001 ffd7 	bl	801b026 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019078:	697b      	ldr	r3, [r7, #20]
 801907a:	330e      	adds	r3, #14
 801907c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801907e:	6812      	ldr	r2, [r2, #0]
 8019080:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019082:	697b      	ldr	r3, [r7, #20]
 8019084:	3318      	adds	r3, #24
 8019086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019088:	6812      	ldr	r2, [r2, #0]
 801908a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801908c:	697b      	ldr	r3, [r7, #20]
 801908e:	2200      	movs	r2, #0
 8019090:	701a      	strb	r2, [r3, #0]
 8019092:	2200      	movs	r2, #0
 8019094:	f042 0201 	orr.w	r2, r2, #1
 8019098:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801909a:	697b      	ldr	r3, [r7, #20]
 801909c:	2200      	movs	r2, #0
 801909e:	f042 0208 	orr.w	r2, r2, #8
 80190a2:	709a      	strb	r2, [r3, #2]
 80190a4:	2200      	movs	r2, #0
 80190a6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80190a8:	697b      	ldr	r3, [r7, #20]
 80190aa:	2206      	movs	r2, #6
 80190ac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80190ae:	697b      	ldr	r3, [r7, #20]
 80190b0:	2204      	movs	r2, #4
 80190b2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80190b4:	f640 0306 	movw	r3, #2054	@ 0x806
 80190b8:	9300      	str	r3, [sp, #0]
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	68ba      	ldr	r2, [r7, #8]
 80190be:	69b9      	ldr	r1, [r7, #24]
 80190c0:	68f8      	ldr	r0, [r7, #12]
 80190c2:	f001 fc3d 	bl	801a940 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80190c6:	69b8      	ldr	r0, [r7, #24]
 80190c8:	f7f8 fda2 	bl	8011c10 <pbuf_free>
  p = NULL;
 80190cc:	2300      	movs	r3, #0
 80190ce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80190d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80190d4:	4618      	mov	r0, r3
 80190d6:	3720      	adds	r7, #32
 80190d8:	46bd      	mov	sp, r7
 80190da:	bd80      	pop	{r7, pc}
 80190dc:	0801e1c0 	.word	0x0801e1c0
 80190e0:	0801e310 	.word	0x0801e310
 80190e4:	0801e238 	.word	0x0801e238
 80190e8:	0801e3c0 	.word	0x0801e3c0
 80190ec:	0801e3f4 	.word	0x0801e3f4

080190f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b088      	sub	sp, #32
 80190f4:	af04      	add	r7, sp, #16
 80190f6:	60f8      	str	r0, [r7, #12]
 80190f8:	60b9      	str	r1, [r7, #8]
 80190fa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801910c:	2201      	movs	r2, #1
 801910e:	9203      	str	r2, [sp, #12]
 8019110:	68ba      	ldr	r2, [r7, #8]
 8019112:	9202      	str	r2, [sp, #8]
 8019114:	4a06      	ldr	r2, [pc, #24]	@ (8019130 <etharp_request_dst+0x40>)
 8019116:	9201      	str	r2, [sp, #4]
 8019118:	9300      	str	r3, [sp, #0]
 801911a:	4603      	mov	r3, r0
 801911c:	687a      	ldr	r2, [r7, #4]
 801911e:	68f8      	ldr	r0, [r7, #12]
 8019120:	f7ff ff5a 	bl	8018fd8 <etharp_raw>
 8019124:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019126:	4618      	mov	r0, r3
 8019128:	3710      	adds	r7, #16
 801912a:	46bd      	mov	sp, r7
 801912c:	bd80      	pop	{r7, pc}
 801912e:	bf00      	nop
 8019130:	0801ea1c 	.word	0x0801ea1c

08019134 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b082      	sub	sp, #8
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
 801913c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801913e:	4a05      	ldr	r2, [pc, #20]	@ (8019154 <etharp_request+0x20>)
 8019140:	6839      	ldr	r1, [r7, #0]
 8019142:	6878      	ldr	r0, [r7, #4]
 8019144:	f7ff ffd4 	bl	80190f0 <etharp_request_dst>
 8019148:	4603      	mov	r3, r0
}
 801914a:	4618      	mov	r0, r3
 801914c:	3708      	adds	r7, #8
 801914e:	46bd      	mov	sp, r7
 8019150:	bd80      	pop	{r7, pc}
 8019152:	bf00      	nop
 8019154:	0801ea14 	.word	0x0801ea14

08019158 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019158:	b580      	push	{r7, lr}
 801915a:	b08e      	sub	sp, #56	@ 0x38
 801915c:	af04      	add	r7, sp, #16
 801915e:	6078      	str	r0, [r7, #4]
 8019160:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019162:	4b87      	ldr	r3, [pc, #540]	@ (8019380 <icmp_input+0x228>)
 8019164:	689b      	ldr	r3, [r3, #8]
 8019166:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	f003 030f 	and.w	r3, r3, #15
 8019170:	b2db      	uxtb	r3, r3
 8019172:	009b      	lsls	r3, r3, #2
 8019174:	b2db      	uxtb	r3, r3
 8019176:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8019178:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801917a:	2b13      	cmp	r3, #19
 801917c:	f240 80e8 	bls.w	8019350 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	895b      	ldrh	r3, [r3, #10]
 8019184:	2b03      	cmp	r3, #3
 8019186:	f240 80e5 	bls.w	8019354 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	685b      	ldr	r3, [r3, #4]
 801918e:	781b      	ldrb	r3, [r3, #0]
 8019190:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019194:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8019198:	2b00      	cmp	r3, #0
 801919a:	f000 80d2 	beq.w	8019342 <icmp_input+0x1ea>
 801919e:	2b08      	cmp	r3, #8
 80191a0:	f040 80d2 	bne.w	8019348 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80191a4:	4b77      	ldr	r3, [pc, #476]	@ (8019384 <icmp_input+0x22c>)
 80191a6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80191a8:	4b75      	ldr	r3, [pc, #468]	@ (8019380 <icmp_input+0x228>)
 80191aa:	695b      	ldr	r3, [r3, #20]
 80191ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80191b0:	2be0      	cmp	r3, #224	@ 0xe0
 80191b2:	f000 80d6 	beq.w	8019362 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80191b6:	4b72      	ldr	r3, [pc, #456]	@ (8019380 <icmp_input+0x228>)
 80191b8:	695b      	ldr	r3, [r3, #20]
 80191ba:	4a71      	ldr	r2, [pc, #452]	@ (8019380 <icmp_input+0x228>)
 80191bc:	6812      	ldr	r2, [r2, #0]
 80191be:	4611      	mov	r1, r2
 80191c0:	4618      	mov	r0, r3
 80191c2:	f000 fc1f 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 80191c6:	4603      	mov	r3, r0
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	f040 80cc 	bne.w	8019366 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	891b      	ldrh	r3, [r3, #8]
 80191d2:	2b07      	cmp	r3, #7
 80191d4:	f240 80c0 	bls.w	8019358 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80191d8:	6878      	ldr	r0, [r7, #4]
 80191da:	f7f7 f905 	bl	80103e8 <inet_chksum_pbuf>
 80191de:	4603      	mov	r3, r0
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d003      	beq.n	80191ec <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80191e4:	6878      	ldr	r0, [r7, #4]
 80191e6:	f7f8 fd13 	bl	8011c10 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80191ea:	e0c5      	b.n	8019378 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80191ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80191ee:	330e      	adds	r3, #14
 80191f0:	4619      	mov	r1, r3
 80191f2:	6878      	ldr	r0, [r7, #4]
 80191f4:	f7f8 fc76 	bl	8011ae4 <pbuf_add_header>
 80191f8:	4603      	mov	r3, r0
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d04b      	beq.n	8019296 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	891a      	ldrh	r2, [r3, #8]
 8019202:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019204:	4413      	add	r3, r2
 8019206:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	891b      	ldrh	r3, [r3, #8]
 801920c:	8b7a      	ldrh	r2, [r7, #26]
 801920e:	429a      	cmp	r2, r3
 8019210:	f0c0 80ab 	bcc.w	801936a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019214:	8b7b      	ldrh	r3, [r7, #26]
 8019216:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801921a:	4619      	mov	r1, r3
 801921c:	200e      	movs	r0, #14
 801921e:	f7f8 fa0f 	bl	8011640 <pbuf_alloc>
 8019222:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	2b00      	cmp	r3, #0
 8019228:	f000 80a1 	beq.w	801936e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	895b      	ldrh	r3, [r3, #10]
 8019230:	461a      	mov	r2, r3
 8019232:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019234:	3308      	adds	r3, #8
 8019236:	429a      	cmp	r2, r3
 8019238:	d203      	bcs.n	8019242 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801923a:	6978      	ldr	r0, [r7, #20]
 801923c:	f7f8 fce8 	bl	8011c10 <pbuf_free>
          goto icmperr;
 8019240:	e096      	b.n	8019370 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019242:	697b      	ldr	r3, [r7, #20]
 8019244:	685b      	ldr	r3, [r3, #4]
 8019246:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019248:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801924a:	4618      	mov	r0, r3
 801924c:	f001 feeb 	bl	801b026 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019250:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019252:	4619      	mov	r1, r3
 8019254:	6978      	ldr	r0, [r7, #20]
 8019256:	f7f8 fc55 	bl	8011b04 <pbuf_remove_header>
 801925a:	4603      	mov	r3, r0
 801925c:	2b00      	cmp	r3, #0
 801925e:	d009      	beq.n	8019274 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019260:	4b49      	ldr	r3, [pc, #292]	@ (8019388 <icmp_input+0x230>)
 8019262:	22b6      	movs	r2, #182	@ 0xb6
 8019264:	4949      	ldr	r1, [pc, #292]	@ (801938c <icmp_input+0x234>)
 8019266:	484a      	ldr	r0, [pc, #296]	@ (8019390 <icmp_input+0x238>)
 8019268:	f001 fda4 	bl	801adb4 <iprintf>
          pbuf_free(r);
 801926c:	6978      	ldr	r0, [r7, #20]
 801926e:	f7f8 fccf 	bl	8011c10 <pbuf_free>
          goto icmperr;
 8019272:	e07d      	b.n	8019370 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019274:	6879      	ldr	r1, [r7, #4]
 8019276:	6978      	ldr	r0, [r7, #20]
 8019278:	f7f8 fdfe 	bl	8011e78 <pbuf_copy>
 801927c:	4603      	mov	r3, r0
 801927e:	2b00      	cmp	r3, #0
 8019280:	d003      	beq.n	801928a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019282:	6978      	ldr	r0, [r7, #20]
 8019284:	f7f8 fcc4 	bl	8011c10 <pbuf_free>
          goto icmperr;
 8019288:	e072      	b.n	8019370 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801928a:	6878      	ldr	r0, [r7, #4]
 801928c:	f7f8 fcc0 	bl	8011c10 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019290:	697b      	ldr	r3, [r7, #20]
 8019292:	607b      	str	r3, [r7, #4]
 8019294:	e00f      	b.n	80192b6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019296:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019298:	330e      	adds	r3, #14
 801929a:	4619      	mov	r1, r3
 801929c:	6878      	ldr	r0, [r7, #4]
 801929e:	f7f8 fc31 	bl	8011b04 <pbuf_remove_header>
 80192a2:	4603      	mov	r3, r0
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d006      	beq.n	80192b6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80192a8:	4b37      	ldr	r3, [pc, #220]	@ (8019388 <icmp_input+0x230>)
 80192aa:	22c7      	movs	r2, #199	@ 0xc7
 80192ac:	4939      	ldr	r1, [pc, #228]	@ (8019394 <icmp_input+0x23c>)
 80192ae:	4838      	ldr	r0, [pc, #224]	@ (8019390 <icmp_input+0x238>)
 80192b0:	f001 fd80 	bl	801adb4 <iprintf>
          goto icmperr;
 80192b4:	e05c      	b.n	8019370 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	685b      	ldr	r3, [r3, #4]
 80192ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80192bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80192be:	4619      	mov	r1, r3
 80192c0:	6878      	ldr	r0, [r7, #4]
 80192c2:	f7f8 fc0f 	bl	8011ae4 <pbuf_add_header>
 80192c6:	4603      	mov	r3, r0
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d13c      	bne.n	8019346 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	685b      	ldr	r3, [r3, #4]
 80192d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80192d2:	69fb      	ldr	r3, [r7, #28]
 80192d4:	681a      	ldr	r2, [r3, #0]
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80192da:	4b29      	ldr	r3, [pc, #164]	@ (8019380 <icmp_input+0x228>)
 80192dc:	691a      	ldr	r2, [r3, #16]
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80192e2:	693b      	ldr	r3, [r7, #16]
 80192e4:	2200      	movs	r2, #0
 80192e6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80192e8:	693b      	ldr	r3, [r7, #16]
 80192ea:	885b      	ldrh	r3, [r3, #2]
 80192ec:	b29b      	uxth	r3, r3
 80192ee:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80192f2:	4293      	cmp	r3, r2
 80192f4:	d907      	bls.n	8019306 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80192f6:	693b      	ldr	r3, [r7, #16]
 80192f8:	885b      	ldrh	r3, [r3, #2]
 80192fa:	b29b      	uxth	r3, r3
 80192fc:	3309      	adds	r3, #9
 80192fe:	b29a      	uxth	r2, r3
 8019300:	693b      	ldr	r3, [r7, #16]
 8019302:	805a      	strh	r2, [r3, #2]
 8019304:	e006      	b.n	8019314 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8019306:	693b      	ldr	r3, [r7, #16]
 8019308:	885b      	ldrh	r3, [r3, #2]
 801930a:	b29b      	uxth	r3, r3
 801930c:	3308      	adds	r3, #8
 801930e:	b29a      	uxth	r2, r3
 8019310:	693b      	ldr	r3, [r7, #16]
 8019312:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	22ff      	movs	r2, #255	@ 0xff
 8019318:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	2200      	movs	r2, #0
 801931e:	729a      	strb	r2, [r3, #10]
 8019320:	2200      	movs	r2, #0
 8019322:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019324:	683b      	ldr	r3, [r7, #0]
 8019326:	9302      	str	r3, [sp, #8]
 8019328:	2301      	movs	r3, #1
 801932a:	9301      	str	r3, [sp, #4]
 801932c:	2300      	movs	r3, #0
 801932e:	9300      	str	r3, [sp, #0]
 8019330:	23ff      	movs	r3, #255	@ 0xff
 8019332:	2200      	movs	r2, #0
 8019334:	69f9      	ldr	r1, [r7, #28]
 8019336:	6878      	ldr	r0, [r7, #4]
 8019338:	f000 fa8c 	bl	8019854 <ip4_output_if>
 801933c:	4603      	mov	r3, r0
 801933e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019340:	e001      	b.n	8019346 <icmp_input+0x1ee>
      break;
 8019342:	bf00      	nop
 8019344:	e000      	b.n	8019348 <icmp_input+0x1f0>
      break;
 8019346:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019348:	6878      	ldr	r0, [r7, #4]
 801934a:	f7f8 fc61 	bl	8011c10 <pbuf_free>
  return;
 801934e:	e013      	b.n	8019378 <icmp_input+0x220>
    goto lenerr;
 8019350:	bf00      	nop
 8019352:	e002      	b.n	801935a <icmp_input+0x202>
    goto lenerr;
 8019354:	bf00      	nop
 8019356:	e000      	b.n	801935a <icmp_input+0x202>
        goto lenerr;
 8019358:	bf00      	nop
lenerr:
  pbuf_free(p);
 801935a:	6878      	ldr	r0, [r7, #4]
 801935c:	f7f8 fc58 	bl	8011c10 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019360:	e00a      	b.n	8019378 <icmp_input+0x220>
        goto icmperr;
 8019362:	bf00      	nop
 8019364:	e004      	b.n	8019370 <icmp_input+0x218>
        goto icmperr;
 8019366:	bf00      	nop
 8019368:	e002      	b.n	8019370 <icmp_input+0x218>
          goto icmperr;
 801936a:	bf00      	nop
 801936c:	e000      	b.n	8019370 <icmp_input+0x218>
          goto icmperr;
 801936e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019370:	6878      	ldr	r0, [r7, #4]
 8019372:	f7f8 fc4d 	bl	8011c10 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019376:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019378:	3728      	adds	r7, #40	@ 0x28
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}
 801937e:	bf00      	nop
 8019380:	2400e074 	.word	0x2400e074
 8019384:	2400e088 	.word	0x2400e088
 8019388:	0801e438 	.word	0x0801e438
 801938c:	0801e470 	.word	0x0801e470
 8019390:	0801e4a8 	.word	0x0801e4a8
 8019394:	0801e4d0 	.word	0x0801e4d0

08019398 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b082      	sub	sp, #8
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
 80193a0:	460b      	mov	r3, r1
 80193a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80193a4:	78fb      	ldrb	r3, [r7, #3]
 80193a6:	461a      	mov	r2, r3
 80193a8:	2103      	movs	r1, #3
 80193aa:	6878      	ldr	r0, [r7, #4]
 80193ac:	f000 f814 	bl	80193d8 <icmp_send_response>
}
 80193b0:	bf00      	nop
 80193b2:	3708      	adds	r7, #8
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}

080193b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b082      	sub	sp, #8
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
 80193c0:	460b      	mov	r3, r1
 80193c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80193c4:	78fb      	ldrb	r3, [r7, #3]
 80193c6:	461a      	mov	r2, r3
 80193c8:	210b      	movs	r1, #11
 80193ca:	6878      	ldr	r0, [r7, #4]
 80193cc:	f000 f804 	bl	80193d8 <icmp_send_response>
}
 80193d0:	bf00      	nop
 80193d2:	3708      	adds	r7, #8
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}

080193d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80193d8:	b580      	push	{r7, lr}
 80193da:	b08c      	sub	sp, #48	@ 0x30
 80193dc:	af04      	add	r7, sp, #16
 80193de:	6078      	str	r0, [r7, #4]
 80193e0:	460b      	mov	r3, r1
 80193e2:	70fb      	strb	r3, [r7, #3]
 80193e4:	4613      	mov	r3, r2
 80193e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80193e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80193ec:	2124      	movs	r1, #36	@ 0x24
 80193ee:	2022      	movs	r0, #34	@ 0x22
 80193f0:	f7f8 f926 	bl	8011640 <pbuf_alloc>
 80193f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80193f6:	69fb      	ldr	r3, [r7, #28]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d056      	beq.n	80194aa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80193fc:	69fb      	ldr	r3, [r7, #28]
 80193fe:	895b      	ldrh	r3, [r3, #10]
 8019400:	2b23      	cmp	r3, #35	@ 0x23
 8019402:	d806      	bhi.n	8019412 <icmp_send_response+0x3a>
 8019404:	4b2b      	ldr	r3, [pc, #172]	@ (80194b4 <icmp_send_response+0xdc>)
 8019406:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801940a:	492b      	ldr	r1, [pc, #172]	@ (80194b8 <icmp_send_response+0xe0>)
 801940c:	482b      	ldr	r0, [pc, #172]	@ (80194bc <icmp_send_response+0xe4>)
 801940e:	f001 fcd1 	bl	801adb4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	685b      	ldr	r3, [r3, #4]
 8019416:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019418:	69fb      	ldr	r3, [r7, #28]
 801941a:	685b      	ldr	r3, [r3, #4]
 801941c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801941e:	697b      	ldr	r3, [r7, #20]
 8019420:	78fa      	ldrb	r2, [r7, #3]
 8019422:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019424:	697b      	ldr	r3, [r7, #20]
 8019426:	78ba      	ldrb	r2, [r7, #2]
 8019428:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801942a:	697b      	ldr	r3, [r7, #20]
 801942c:	2200      	movs	r2, #0
 801942e:	711a      	strb	r2, [r3, #4]
 8019430:	2200      	movs	r2, #0
 8019432:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019434:	697b      	ldr	r3, [r7, #20]
 8019436:	2200      	movs	r2, #0
 8019438:	719a      	strb	r2, [r3, #6]
 801943a:	2200      	movs	r2, #0
 801943c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801943e:	69fb      	ldr	r3, [r7, #28]
 8019440:	685b      	ldr	r3, [r3, #4]
 8019442:	f103 0008 	add.w	r0, r3, #8
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	685b      	ldr	r3, [r3, #4]
 801944a:	221c      	movs	r2, #28
 801944c:	4619      	mov	r1, r3
 801944e:	f001 fdea 	bl	801b026 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019452:	69bb      	ldr	r3, [r7, #24]
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019458:	f107 030c 	add.w	r3, r7, #12
 801945c:	4618      	mov	r0, r3
 801945e:	f000 f82f 	bl	80194c0 <ip4_route>
 8019462:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019464:	693b      	ldr	r3, [r7, #16]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d01b      	beq.n	80194a2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801946a:	697b      	ldr	r3, [r7, #20]
 801946c:	2200      	movs	r2, #0
 801946e:	709a      	strb	r2, [r3, #2]
 8019470:	2200      	movs	r2, #0
 8019472:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019474:	69fb      	ldr	r3, [r7, #28]
 8019476:	895b      	ldrh	r3, [r3, #10]
 8019478:	4619      	mov	r1, r3
 801947a:	6978      	ldr	r0, [r7, #20]
 801947c:	f7f6 ffa2 	bl	80103c4 <inet_chksum>
 8019480:	4603      	mov	r3, r0
 8019482:	461a      	mov	r2, r3
 8019484:	697b      	ldr	r3, [r7, #20]
 8019486:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019488:	f107 020c 	add.w	r2, r7, #12
 801948c:	693b      	ldr	r3, [r7, #16]
 801948e:	9302      	str	r3, [sp, #8]
 8019490:	2301      	movs	r3, #1
 8019492:	9301      	str	r3, [sp, #4]
 8019494:	2300      	movs	r3, #0
 8019496:	9300      	str	r3, [sp, #0]
 8019498:	23ff      	movs	r3, #255	@ 0xff
 801949a:	2100      	movs	r1, #0
 801949c:	69f8      	ldr	r0, [r7, #28]
 801949e:	f000 f9d9 	bl	8019854 <ip4_output_if>
  }
  pbuf_free(q);
 80194a2:	69f8      	ldr	r0, [r7, #28]
 80194a4:	f7f8 fbb4 	bl	8011c10 <pbuf_free>
 80194a8:	e000      	b.n	80194ac <icmp_send_response+0xd4>
    return;
 80194aa:	bf00      	nop
}
 80194ac:	3720      	adds	r7, #32
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	0801e438 	.word	0x0801e438
 80194b8:	0801e504 	.word	0x0801e504
 80194bc:	0801e4a8 	.word	0x0801e4a8

080194c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80194c0:	b480      	push	{r7}
 80194c2:	b085      	sub	sp, #20
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80194c8:	4b33      	ldr	r3, [pc, #204]	@ (8019598 <ip4_route+0xd8>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	60fb      	str	r3, [r7, #12]
 80194ce:	e036      	b.n	801953e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80194d6:	f003 0301 	and.w	r3, r3, #1
 80194da:	b2db      	uxtb	r3, r3
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d02b      	beq.n	8019538 <ip4_route+0x78>
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80194e6:	089b      	lsrs	r3, r3, #2
 80194e8:	f003 0301 	and.w	r3, r3, #1
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d022      	beq.n	8019538 <ip4_route+0x78>
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	3304      	adds	r3, #4
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d01d      	beq.n	8019538 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	681a      	ldr	r2, [r3, #0]
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	3304      	adds	r3, #4
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	405a      	eors	r2, r3
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	3308      	adds	r3, #8
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	4013      	ands	r3, r2
 8019510:	2b00      	cmp	r3, #0
 8019512:	d101      	bne.n	8019518 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	e038      	b.n	801958a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801951e:	f003 0302 	and.w	r3, r3, #2
 8019522:	2b00      	cmp	r3, #0
 8019524:	d108      	bne.n	8019538 <ip4_route+0x78>
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	681a      	ldr	r2, [r3, #0]
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	330c      	adds	r3, #12
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	429a      	cmp	r2, r3
 8019532:	d101      	bne.n	8019538 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	e028      	b.n	801958a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	60fb      	str	r3, [r7, #12]
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d1c5      	bne.n	80194d0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019544:	4b15      	ldr	r3, [pc, #84]	@ (801959c <ip4_route+0xdc>)
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d01a      	beq.n	8019582 <ip4_route+0xc2>
 801954c:	4b13      	ldr	r3, [pc, #76]	@ (801959c <ip4_route+0xdc>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019554:	f003 0301 	and.w	r3, r3, #1
 8019558:	2b00      	cmp	r3, #0
 801955a:	d012      	beq.n	8019582 <ip4_route+0xc2>
 801955c:	4b0f      	ldr	r3, [pc, #60]	@ (801959c <ip4_route+0xdc>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019564:	f003 0304 	and.w	r3, r3, #4
 8019568:	2b00      	cmp	r3, #0
 801956a:	d00a      	beq.n	8019582 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801956c:	4b0b      	ldr	r3, [pc, #44]	@ (801959c <ip4_route+0xdc>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	3304      	adds	r3, #4
 8019572:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019574:	2b00      	cmp	r3, #0
 8019576:	d004      	beq.n	8019582 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	b2db      	uxtb	r3, r3
 801957e:	2b7f      	cmp	r3, #127	@ 0x7f
 8019580:	d101      	bne.n	8019586 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019582:	2300      	movs	r3, #0
 8019584:	e001      	b.n	801958a <ip4_route+0xca>
  }

  return netif_default;
 8019586:	4b05      	ldr	r3, [pc, #20]	@ (801959c <ip4_route+0xdc>)
 8019588:	681b      	ldr	r3, [r3, #0]
}
 801958a:	4618      	mov	r0, r3
 801958c:	3714      	adds	r7, #20
 801958e:	46bd      	mov	sp, r7
 8019590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019594:	4770      	bx	lr
 8019596:	bf00      	nop
 8019598:	24014ba0 	.word	0x24014ba0
 801959c:	24014ba4 	.word	0x24014ba4

080195a0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b082      	sub	sp, #8
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80195ae:	f003 0301 	and.w	r3, r3, #1
 80195b2:	b2db      	uxtb	r3, r3
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d016      	beq.n	80195e6 <ip4_input_accept+0x46>
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	3304      	adds	r3, #4
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d011      	beq.n	80195e6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80195c2:	4b0b      	ldr	r3, [pc, #44]	@ (80195f0 <ip4_input_accept+0x50>)
 80195c4:	695a      	ldr	r2, [r3, #20]
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	3304      	adds	r3, #4
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	429a      	cmp	r2, r3
 80195ce:	d008      	beq.n	80195e2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80195d0:	4b07      	ldr	r3, [pc, #28]	@ (80195f0 <ip4_input_accept+0x50>)
 80195d2:	695b      	ldr	r3, [r3, #20]
 80195d4:	6879      	ldr	r1, [r7, #4]
 80195d6:	4618      	mov	r0, r3
 80195d8:	f000 fa14 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 80195dc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d001      	beq.n	80195e6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80195e2:	2301      	movs	r3, #1
 80195e4:	e000      	b.n	80195e8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80195e6:	2300      	movs	r3, #0
}
 80195e8:	4618      	mov	r0, r3
 80195ea:	3708      	adds	r7, #8
 80195ec:	46bd      	mov	sp, r7
 80195ee:	bd80      	pop	{r7, pc}
 80195f0:	2400e074 	.word	0x2400e074

080195f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b086      	sub	sp, #24
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
 80195fc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	685b      	ldr	r3, [r3, #4]
 8019602:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	781b      	ldrb	r3, [r3, #0]
 8019608:	091b      	lsrs	r3, r3, #4
 801960a:	b2db      	uxtb	r3, r3
 801960c:	2b04      	cmp	r3, #4
 801960e:	d004      	beq.n	801961a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019610:	6878      	ldr	r0, [r7, #4]
 8019612:	f7f8 fafd 	bl	8011c10 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019616:	2300      	movs	r3, #0
 8019618:	e113      	b.n	8019842 <ip4_input+0x24e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801961a:	697b      	ldr	r3, [r7, #20]
 801961c:	781b      	ldrb	r3, [r3, #0]
 801961e:	f003 030f 	and.w	r3, r3, #15
 8019622:	b2db      	uxtb	r3, r3
 8019624:	009b      	lsls	r3, r3, #2
 8019626:	b2db      	uxtb	r3, r3
 8019628:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	885b      	ldrh	r3, [r3, #2]
 801962e:	b29b      	uxth	r3, r3
 8019630:	4618      	mov	r0, r3
 8019632:	f7f6 fe3b 	bl	80102ac <lwip_htons>
 8019636:	4603      	mov	r3, r0
 8019638:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	891b      	ldrh	r3, [r3, #8]
 801963e:	89ba      	ldrh	r2, [r7, #12]
 8019640:	429a      	cmp	r2, r3
 8019642:	d204      	bcs.n	801964e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019644:	89bb      	ldrh	r3, [r7, #12]
 8019646:	4619      	mov	r1, r3
 8019648:	6878      	ldr	r0, [r7, #4]
 801964a:	f7f8 f95b 	bl	8011904 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	895b      	ldrh	r3, [r3, #10]
 8019652:	89fa      	ldrh	r2, [r7, #14]
 8019654:	429a      	cmp	r2, r3
 8019656:	d807      	bhi.n	8019668 <ip4_input+0x74>
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	891b      	ldrh	r3, [r3, #8]
 801965c:	89ba      	ldrh	r2, [r7, #12]
 801965e:	429a      	cmp	r2, r3
 8019660:	d802      	bhi.n	8019668 <ip4_input+0x74>
 8019662:	89fb      	ldrh	r3, [r7, #14]
 8019664:	2b13      	cmp	r3, #19
 8019666:	d804      	bhi.n	8019672 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f7f8 fad1 	bl	8011c10 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801966e:	2300      	movs	r3, #0
 8019670:	e0e7      	b.n	8019842 <ip4_input+0x24e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019672:	697b      	ldr	r3, [r7, #20]
 8019674:	691b      	ldr	r3, [r3, #16]
 8019676:	4a75      	ldr	r2, [pc, #468]	@ (801984c <ip4_input+0x258>)
 8019678:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801967a:	697b      	ldr	r3, [r7, #20]
 801967c:	68db      	ldr	r3, [r3, #12]
 801967e:	4a73      	ldr	r2, [pc, #460]	@ (801984c <ip4_input+0x258>)
 8019680:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019682:	4b72      	ldr	r3, [pc, #456]	@ (801984c <ip4_input+0x258>)
 8019684:	695b      	ldr	r3, [r3, #20]
 8019686:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801968a:	2be0      	cmp	r3, #224	@ 0xe0
 801968c:	d112      	bne.n	80196b4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019694:	f003 0301 	and.w	r3, r3, #1
 8019698:	b2db      	uxtb	r3, r3
 801969a:	2b00      	cmp	r3, #0
 801969c:	d007      	beq.n	80196ae <ip4_input+0xba>
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	3304      	adds	r3, #4
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d002      	beq.n	80196ae <ip4_input+0xba>
      netif = inp;
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	613b      	str	r3, [r7, #16]
 80196ac:	e02a      	b.n	8019704 <ip4_input+0x110>
    } else {
      netif = NULL;
 80196ae:	2300      	movs	r3, #0
 80196b0:	613b      	str	r3, [r7, #16]
 80196b2:	e027      	b.n	8019704 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80196b4:	6838      	ldr	r0, [r7, #0]
 80196b6:	f7ff ff73 	bl	80195a0 <ip4_input_accept>
 80196ba:	4603      	mov	r3, r0
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d002      	beq.n	80196c6 <ip4_input+0xd2>
      netif = inp;
 80196c0:	683b      	ldr	r3, [r7, #0]
 80196c2:	613b      	str	r3, [r7, #16]
 80196c4:	e01e      	b.n	8019704 <ip4_input+0x110>
    } else {
      netif = NULL;
 80196c6:	2300      	movs	r3, #0
 80196c8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80196ca:	4b60      	ldr	r3, [pc, #384]	@ (801984c <ip4_input+0x258>)
 80196cc:	695b      	ldr	r3, [r3, #20]
 80196ce:	b2db      	uxtb	r3, r3
 80196d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80196d2:	d017      	beq.n	8019704 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80196d4:	4b5e      	ldr	r3, [pc, #376]	@ (8019850 <ip4_input+0x25c>)
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	613b      	str	r3, [r7, #16]
 80196da:	e00e      	b.n	80196fa <ip4_input+0x106>
          if (netif == inp) {
 80196dc:	693a      	ldr	r2, [r7, #16]
 80196de:	683b      	ldr	r3, [r7, #0]
 80196e0:	429a      	cmp	r2, r3
 80196e2:	d006      	beq.n	80196f2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80196e4:	6938      	ldr	r0, [r7, #16]
 80196e6:	f7ff ff5b 	bl	80195a0 <ip4_input_accept>
 80196ea:	4603      	mov	r3, r0
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d108      	bne.n	8019702 <ip4_input+0x10e>
 80196f0:	e000      	b.n	80196f4 <ip4_input+0x100>
            continue;
 80196f2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80196f4:	693b      	ldr	r3, [r7, #16]
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	613b      	str	r3, [r7, #16]
 80196fa:	693b      	ldr	r3, [r7, #16]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d1ed      	bne.n	80196dc <ip4_input+0xe8>
 8019700:	e000      	b.n	8019704 <ip4_input+0x110>
            break;
 8019702:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019704:	4b51      	ldr	r3, [pc, #324]	@ (801984c <ip4_input+0x258>)
 8019706:	691b      	ldr	r3, [r3, #16]
 8019708:	6839      	ldr	r1, [r7, #0]
 801970a:	4618      	mov	r0, r3
 801970c:	f000 f97a 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 8019710:	4603      	mov	r3, r0
 8019712:	2b00      	cmp	r3, #0
 8019714:	d105      	bne.n	8019722 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019716:	4b4d      	ldr	r3, [pc, #308]	@ (801984c <ip4_input+0x258>)
 8019718:	691b      	ldr	r3, [r3, #16]
 801971a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801971e:	2be0      	cmp	r3, #224	@ 0xe0
 8019720:	d104      	bne.n	801972c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019722:	6878      	ldr	r0, [r7, #4]
 8019724:	f7f8 fa74 	bl	8011c10 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019728:	2300      	movs	r3, #0
 801972a:	e08a      	b.n	8019842 <ip4_input+0x24e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801972c:	693b      	ldr	r3, [r7, #16]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d104      	bne.n	801973c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019732:	6878      	ldr	r0, [r7, #4]
 8019734:	f7f8 fa6c 	bl	8011c10 <pbuf_free>
    return ERR_OK;
 8019738:	2300      	movs	r3, #0
 801973a:	e082      	b.n	8019842 <ip4_input+0x24e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801973c:	697b      	ldr	r3, [r7, #20]
 801973e:	88db      	ldrh	r3, [r3, #6]
 8019740:	b29b      	uxth	r3, r3
 8019742:	461a      	mov	r2, r3
 8019744:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8019748:	4013      	ands	r3, r2
 801974a:	2b00      	cmp	r3, #0
 801974c:	d00b      	beq.n	8019766 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801974e:	6878      	ldr	r0, [r7, #4]
 8019750:	f000 fd2e 	bl	801a1b0 <ip4_reass>
 8019754:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d101      	bne.n	8019760 <ip4_input+0x16c>
      return ERR_OK;
 801975c:	2300      	movs	r3, #0
 801975e:	e070      	b.n	8019842 <ip4_input+0x24e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	685b      	ldr	r3, [r3, #4]
 8019764:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019766:	4a39      	ldr	r2, [pc, #228]	@ (801984c <ip4_input+0x258>)
 8019768:	693b      	ldr	r3, [r7, #16]
 801976a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801976c:	4a37      	ldr	r2, [pc, #220]	@ (801984c <ip4_input+0x258>)
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019772:	4a36      	ldr	r2, [pc, #216]	@ (801984c <ip4_input+0x258>)
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019778:	697b      	ldr	r3, [r7, #20]
 801977a:	781b      	ldrb	r3, [r3, #0]
 801977c:	f003 030f 	and.w	r3, r3, #15
 8019780:	b2db      	uxtb	r3, r3
 8019782:	009b      	lsls	r3, r3, #2
 8019784:	b2db      	uxtb	r3, r3
 8019786:	461a      	mov	r2, r3
 8019788:	4b30      	ldr	r3, [pc, #192]	@ (801984c <ip4_input+0x258>)
 801978a:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 801978c:	6839      	ldr	r1, [r7, #0]
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	f7f8 fd22 	bl	80121d8 <raw_input>
 8019794:	4603      	mov	r3, r0
 8019796:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 8019798:	7afb      	ldrb	r3, [r7, #11]
 801979a:	2b01      	cmp	r3, #1
 801979c:	d03e      	beq.n	801981c <ip4_input+0x228>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801979e:	89fb      	ldrh	r3, [r7, #14]
 80197a0:	4619      	mov	r1, r3
 80197a2:	6878      	ldr	r0, [r7, #4]
 80197a4:	f7f8 f9ae 	bl	8011b04 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80197a8:	697b      	ldr	r3, [r7, #20]
 80197aa:	7a5b      	ldrb	r3, [r3, #9]
 80197ac:	2b11      	cmp	r3, #17
 80197ae:	d006      	beq.n	80197be <ip4_input+0x1ca>
 80197b0:	2b11      	cmp	r3, #17
 80197b2:	dc13      	bgt.n	80197dc <ip4_input+0x1e8>
 80197b4:	2b01      	cmp	r3, #1
 80197b6:	d00c      	beq.n	80197d2 <ip4_input+0x1de>
 80197b8:	2b06      	cmp	r3, #6
 80197ba:	d005      	beq.n	80197c8 <ip4_input+0x1d4>
 80197bc:	e00e      	b.n	80197dc <ip4_input+0x1e8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80197be:	6839      	ldr	r1, [r7, #0]
 80197c0:	6878      	ldr	r0, [r7, #4]
 80197c2:	f7fe f941 	bl	8017a48 <udp_input>
        break;
 80197c6:	e029      	b.n	801981c <ip4_input+0x228>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80197c8:	6839      	ldr	r1, [r7, #0]
 80197ca:	6878      	ldr	r0, [r7, #4]
 80197cc:	f7fa f956 	bl	8013a7c <tcp_input>
        break;
 80197d0:	e024      	b.n	801981c <ip4_input+0x228>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80197d2:	6839      	ldr	r1, [r7, #0]
 80197d4:	6878      	ldr	r0, [r7, #4]
 80197d6:	f7ff fcbf 	bl	8019158 <icmp_input>
        break;
 80197da:	e01f      	b.n	801981c <ip4_input+0x228>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 80197dc:	7afb      	ldrb	r3, [r7, #11]
 80197de:	2b02      	cmp	r3, #2
 80197e0:	d018      	beq.n	8019814 <ip4_input+0x220>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80197e2:	4b1a      	ldr	r3, [pc, #104]	@ (801984c <ip4_input+0x258>)
 80197e4:	695b      	ldr	r3, [r3, #20]
 80197e6:	6939      	ldr	r1, [r7, #16]
 80197e8:	4618      	mov	r0, r3
 80197ea:	f000 f90b 	bl	8019a04 <ip4_addr_isbroadcast_u32>
 80197ee:	4603      	mov	r3, r0
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d10f      	bne.n	8019814 <ip4_input+0x220>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80197f4:	4b15      	ldr	r3, [pc, #84]	@ (801984c <ip4_input+0x258>)
 80197f6:	695b      	ldr	r3, [r3, #20]
 80197f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80197fc:	2be0      	cmp	r3, #224	@ 0xe0
 80197fe:	d009      	beq.n	8019814 <ip4_input+0x220>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019800:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019804:	4619      	mov	r1, r3
 8019806:	6878      	ldr	r0, [r7, #4]
 8019808:	f7f8 f9ef 	bl	8011bea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801980c:	2102      	movs	r1, #2
 801980e:	6878      	ldr	r0, [r7, #4]
 8019810:	f7ff fdc2 	bl	8019398 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019814:	6878      	ldr	r0, [r7, #4]
 8019816:	f7f8 f9fb 	bl	8011c10 <pbuf_free>
        break;
 801981a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801981c:	4b0b      	ldr	r3, [pc, #44]	@ (801984c <ip4_input+0x258>)
 801981e:	2200      	movs	r2, #0
 8019820:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019822:	4b0a      	ldr	r3, [pc, #40]	@ (801984c <ip4_input+0x258>)
 8019824:	2200      	movs	r2, #0
 8019826:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019828:	4b08      	ldr	r3, [pc, #32]	@ (801984c <ip4_input+0x258>)
 801982a:	2200      	movs	r2, #0
 801982c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801982e:	4b07      	ldr	r3, [pc, #28]	@ (801984c <ip4_input+0x258>)
 8019830:	2200      	movs	r2, #0
 8019832:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019834:	4b05      	ldr	r3, [pc, #20]	@ (801984c <ip4_input+0x258>)
 8019836:	2200      	movs	r2, #0
 8019838:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801983a:	4b04      	ldr	r3, [pc, #16]	@ (801984c <ip4_input+0x258>)
 801983c:	2200      	movs	r2, #0
 801983e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019840:	2300      	movs	r3, #0
}
 8019842:	4618      	mov	r0, r3
 8019844:	3718      	adds	r7, #24
 8019846:	46bd      	mov	sp, r7
 8019848:	bd80      	pop	{r7, pc}
 801984a:	bf00      	nop
 801984c:	2400e074 	.word	0x2400e074
 8019850:	24014ba0 	.word	0x24014ba0

08019854 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b08a      	sub	sp, #40	@ 0x28
 8019858:	af04      	add	r7, sp, #16
 801985a:	60f8      	str	r0, [r7, #12]
 801985c:	60b9      	str	r1, [r7, #8]
 801985e:	607a      	str	r2, [r7, #4]
 8019860:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d009      	beq.n	8019880 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801986c:	68bb      	ldr	r3, [r7, #8]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d003      	beq.n	801987a <ip4_output_if+0x26>
 8019872:	68bb      	ldr	r3, [r7, #8]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d102      	bne.n	8019880 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801987c:	3304      	adds	r3, #4
 801987e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019880:	78fa      	ldrb	r2, [r7, #3]
 8019882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019884:	9302      	str	r3, [sp, #8]
 8019886:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801988a:	9301      	str	r3, [sp, #4]
 801988c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019890:	9300      	str	r3, [sp, #0]
 8019892:	4613      	mov	r3, r2
 8019894:	687a      	ldr	r2, [r7, #4]
 8019896:	6979      	ldr	r1, [r7, #20]
 8019898:	68f8      	ldr	r0, [r7, #12]
 801989a:	f000 f805 	bl	80198a8 <ip4_output_if_src>
 801989e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	3718      	adds	r7, #24
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}

080198a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b088      	sub	sp, #32
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	60f8      	str	r0, [r7, #12]
 80198b0:	60b9      	str	r1, [r7, #8]
 80198b2:	607a      	str	r2, [r7, #4]
 80198b4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	7b9b      	ldrb	r3, [r3, #14]
 80198ba:	2b01      	cmp	r3, #1
 80198bc:	d006      	beq.n	80198cc <ip4_output_if_src+0x24>
 80198be:	4b4b      	ldr	r3, [pc, #300]	@ (80199ec <ip4_output_if_src+0x144>)
 80198c0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80198c4:	494a      	ldr	r1, [pc, #296]	@ (80199f0 <ip4_output_if_src+0x148>)
 80198c6:	484b      	ldr	r0, [pc, #300]	@ (80199f4 <ip4_output_if_src+0x14c>)
 80198c8:	f001 fa74 	bl	801adb4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d060      	beq.n	8019994 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80198d2:	2314      	movs	r3, #20
 80198d4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80198d6:	2114      	movs	r1, #20
 80198d8:	68f8      	ldr	r0, [r7, #12]
 80198da:	f7f8 f903 	bl	8011ae4 <pbuf_add_header>
 80198de:	4603      	mov	r3, r0
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d002      	beq.n	80198ea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80198e4:	f06f 0301 	mvn.w	r3, #1
 80198e8:	e07c      	b.n	80199e4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	685b      	ldr	r3, [r3, #4]
 80198ee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	895b      	ldrh	r3, [r3, #10]
 80198f4:	2b13      	cmp	r3, #19
 80198f6:	d806      	bhi.n	8019906 <ip4_output_if_src+0x5e>
 80198f8:	4b3c      	ldr	r3, [pc, #240]	@ (80199ec <ip4_output_if_src+0x144>)
 80198fa:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80198fe:	493e      	ldr	r1, [pc, #248]	@ (80199f8 <ip4_output_if_src+0x150>)
 8019900:	483c      	ldr	r0, [pc, #240]	@ (80199f4 <ip4_output_if_src+0x14c>)
 8019902:	f001 fa57 	bl	801adb4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019906:	69fb      	ldr	r3, [r7, #28]
 8019908:	78fa      	ldrb	r2, [r7, #3]
 801990a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801990c:	69fb      	ldr	r3, [r7, #28]
 801990e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019912:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	681a      	ldr	r2, [r3, #0]
 8019918:	69fb      	ldr	r3, [r7, #28]
 801991a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801991c:	8b7b      	ldrh	r3, [r7, #26]
 801991e:	089b      	lsrs	r3, r3, #2
 8019920:	b29b      	uxth	r3, r3
 8019922:	b2db      	uxtb	r3, r3
 8019924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019928:	b2da      	uxtb	r2, r3
 801992a:	69fb      	ldr	r3, [r7, #28]
 801992c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801992e:	69fb      	ldr	r3, [r7, #28]
 8019930:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019934:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	891b      	ldrh	r3, [r3, #8]
 801993a:	4618      	mov	r0, r3
 801993c:	f7f6 fcb6 	bl	80102ac <lwip_htons>
 8019940:	4603      	mov	r3, r0
 8019942:	461a      	mov	r2, r3
 8019944:	69fb      	ldr	r3, [r7, #28]
 8019946:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019948:	69fb      	ldr	r3, [r7, #28]
 801994a:	2200      	movs	r2, #0
 801994c:	719a      	strb	r2, [r3, #6]
 801994e:	2200      	movs	r2, #0
 8019950:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019952:	4b2a      	ldr	r3, [pc, #168]	@ (80199fc <ip4_output_if_src+0x154>)
 8019954:	881b      	ldrh	r3, [r3, #0]
 8019956:	4618      	mov	r0, r3
 8019958:	f7f6 fca8 	bl	80102ac <lwip_htons>
 801995c:	4603      	mov	r3, r0
 801995e:	461a      	mov	r2, r3
 8019960:	69fb      	ldr	r3, [r7, #28]
 8019962:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019964:	4b25      	ldr	r3, [pc, #148]	@ (80199fc <ip4_output_if_src+0x154>)
 8019966:	881b      	ldrh	r3, [r3, #0]
 8019968:	3301      	adds	r3, #1
 801996a:	b29a      	uxth	r2, r3
 801996c:	4b23      	ldr	r3, [pc, #140]	@ (80199fc <ip4_output_if_src+0x154>)
 801996e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019970:	68bb      	ldr	r3, [r7, #8]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d104      	bne.n	8019980 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019976:	4b22      	ldr	r3, [pc, #136]	@ (8019a00 <ip4_output_if_src+0x158>)
 8019978:	681a      	ldr	r2, [r3, #0]
 801997a:	69fb      	ldr	r3, [r7, #28]
 801997c:	60da      	str	r2, [r3, #12]
 801997e:	e003      	b.n	8019988 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019980:	68bb      	ldr	r3, [r7, #8]
 8019982:	681a      	ldr	r2, [r3, #0]
 8019984:	69fb      	ldr	r3, [r7, #28]
 8019986:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019988:	69fb      	ldr	r3, [r7, #28]
 801998a:	2200      	movs	r2, #0
 801998c:	729a      	strb	r2, [r3, #10]
 801998e:	2200      	movs	r2, #0
 8019990:	72da      	strb	r2, [r3, #11]
 8019992:	e00f      	b.n	80199b4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	895b      	ldrh	r3, [r3, #10]
 8019998:	2b13      	cmp	r3, #19
 801999a:	d802      	bhi.n	80199a2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801999c:	f06f 0301 	mvn.w	r3, #1
 80199a0:	e020      	b.n	80199e4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80199a8:	69fb      	ldr	r3, [r7, #28]
 80199aa:	691b      	ldr	r3, [r3, #16]
 80199ac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80199ae:	f107 0314 	add.w	r3, r7, #20
 80199b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80199b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d00c      	beq.n	80199d6 <ip4_output_if_src+0x12e>
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	891a      	ldrh	r2, [r3, #8]
 80199c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80199c4:	429a      	cmp	r2, r3
 80199c6:	d906      	bls.n	80199d6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80199c8:	687a      	ldr	r2, [r7, #4]
 80199ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80199cc:	68f8      	ldr	r0, [r7, #12]
 80199ce:	f000 fde3 	bl	801a598 <ip4_frag>
 80199d2:	4603      	mov	r3, r0
 80199d4:	e006      	b.n	80199e4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80199d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199d8:	695b      	ldr	r3, [r3, #20]
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	68f9      	ldr	r1, [r7, #12]
 80199de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80199e0:	4798      	blx	r3
 80199e2:	4603      	mov	r3, r0
}
 80199e4:	4618      	mov	r0, r3
 80199e6:	3720      	adds	r7, #32
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}
 80199ec:	0801e530 	.word	0x0801e530
 80199f0:	0801e564 	.word	0x0801e564
 80199f4:	0801e570 	.word	0x0801e570
 80199f8:	0801e598 	.word	0x0801e598
 80199fc:	24014d02 	.word	0x24014d02
 8019a00:	0801ea10 	.word	0x0801ea10

08019a04 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019a04:	b480      	push	{r7}
 8019a06:	b085      	sub	sp, #20
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	6078      	str	r0, [r7, #4]
 8019a0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a18:	d002      	beq.n	8019a20 <ip4_addr_isbroadcast_u32+0x1c>
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d101      	bne.n	8019a24 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019a20:	2301      	movs	r3, #1
 8019a22:	e02a      	b.n	8019a7a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a2a:	f003 0302 	and.w	r3, r3, #2
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d101      	bne.n	8019a36 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019a32:	2300      	movs	r3, #0
 8019a34:	e021      	b.n	8019a7a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019a36:	683b      	ldr	r3, [r7, #0]
 8019a38:	3304      	adds	r3, #4
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	687a      	ldr	r2, [r7, #4]
 8019a3e:	429a      	cmp	r2, r3
 8019a40:	d101      	bne.n	8019a46 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019a42:	2300      	movs	r3, #0
 8019a44:	e019      	b.n	8019a7a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019a46:	68fa      	ldr	r2, [r7, #12]
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	3304      	adds	r3, #4
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	405a      	eors	r2, r3
 8019a50:	683b      	ldr	r3, [r7, #0]
 8019a52:	3308      	adds	r3, #8
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	4013      	ands	r3, r2
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d10d      	bne.n	8019a78 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019a5c:	683b      	ldr	r3, [r7, #0]
 8019a5e:	3308      	adds	r3, #8
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	43da      	mvns	r2, r3
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019a68:	683b      	ldr	r3, [r7, #0]
 8019a6a:	3308      	adds	r3, #8
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019a70:	429a      	cmp	r2, r3
 8019a72:	d101      	bne.n	8019a78 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019a74:	2301      	movs	r3, #1
 8019a76:	e000      	b.n	8019a7a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019a78:	2300      	movs	r3, #0
  }
}
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	3714      	adds	r7, #20
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a84:	4770      	bx	lr
	...

08019a88 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b082      	sub	sp, #8
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8019a90:	2210      	movs	r2, #16
 8019a92:	4904      	ldr	r1, [pc, #16]	@ (8019aa4 <ip4addr_ntoa+0x1c>)
 8019a94:	6878      	ldr	r0, [r7, #4]
 8019a96:	f000 f807 	bl	8019aa8 <ip4addr_ntoa_r>
 8019a9a:	4603      	mov	r3, r0
}
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	3708      	adds	r7, #8
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd80      	pop	{r7, pc}
 8019aa4:	24014d04 	.word	0x24014d04

08019aa8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019aa8:	b480      	push	{r7}
 8019aaa:	b08d      	sub	sp, #52	@ 0x34
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	60f8      	str	r0, [r7, #12]
 8019ab0:	60b9      	str	r1, [r7, #8]
 8019ab2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8019abe:	68bb      	ldr	r3, [r7, #8]
 8019ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8019ac2:	f107 0318 	add.w	r3, r7, #24
 8019ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8019ac8:	2300      	movs	r3, #0
 8019aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019ace:	e058      	b.n	8019b82 <ip4addr_ntoa_r+0xda>
    i = 0;
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8019ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ad8:	781a      	ldrb	r2, [r3, #0]
 8019ada:	4b32      	ldr	r3, [pc, #200]	@ (8019ba4 <ip4addr_ntoa_r+0xfc>)
 8019adc:	fba3 1302 	umull	r1, r3, r3, r2
 8019ae0:	08d9      	lsrs	r1, r3, #3
 8019ae2:	460b      	mov	r3, r1
 8019ae4:	009b      	lsls	r3, r3, #2
 8019ae6:	440b      	add	r3, r1
 8019ae8:	005b      	lsls	r3, r3, #1
 8019aea:	1ad3      	subs	r3, r2, r3
 8019aec:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8019aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019af0:	781b      	ldrb	r3, [r3, #0]
 8019af2:	4a2c      	ldr	r2, [pc, #176]	@ (8019ba4 <ip4addr_ntoa_r+0xfc>)
 8019af4:	fba2 2303 	umull	r2, r3, r2, r3
 8019af8:	08db      	lsrs	r3, r3, #3
 8019afa:	b2da      	uxtb	r2, r3
 8019afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019afe:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8019b00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b04:	1c5a      	adds	r2, r3, #1
 8019b06:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8019b0a:	4619      	mov	r1, r3
 8019b0c:	7ffb      	ldrb	r3, [r7, #31]
 8019b0e:	3330      	adds	r3, #48	@ 0x30
 8019b10:	b2da      	uxtb	r2, r3
 8019b12:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8019b16:	443b      	add	r3, r7
 8019b18:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8019b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b1e:	781b      	ldrb	r3, [r3, #0]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d1d8      	bne.n	8019ad6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8019b24:	e011      	b.n	8019b4a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8019b26:	6a3b      	ldr	r3, [r7, #32]
 8019b28:	1c5a      	adds	r2, r3, #1
 8019b2a:	623a      	str	r2, [r7, #32]
 8019b2c:	687a      	ldr	r2, [r7, #4]
 8019b2e:	429a      	cmp	r2, r3
 8019b30:	dc01      	bgt.n	8019b36 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8019b32:	2300      	movs	r3, #0
 8019b34:	e030      	b.n	8019b98 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8019b36:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8019b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b3c:	1c59      	adds	r1, r3, #1
 8019b3e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8019b40:	3230      	adds	r2, #48	@ 0x30
 8019b42:	443a      	add	r2, r7
 8019b44:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8019b48:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8019b4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b4e:	1e5a      	subs	r2, r3, #1
 8019b50:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d1e6      	bne.n	8019b26 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8019b58:	6a3b      	ldr	r3, [r7, #32]
 8019b5a:	1c5a      	adds	r2, r3, #1
 8019b5c:	623a      	str	r2, [r7, #32]
 8019b5e:	687a      	ldr	r2, [r7, #4]
 8019b60:	429a      	cmp	r2, r3
 8019b62:	dc01      	bgt.n	8019b68 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8019b64:	2300      	movs	r3, #0
 8019b66:	e017      	b.n	8019b98 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8019b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b6a:	1c5a      	adds	r2, r3, #1
 8019b6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019b6e:	222e      	movs	r2, #46	@ 0x2e
 8019b70:	701a      	strb	r2, [r3, #0]
    ap++;
 8019b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b74:	3301      	adds	r3, #1
 8019b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8019b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b7c:	3301      	adds	r3, #1
 8019b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019b82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b86:	2b03      	cmp	r3, #3
 8019b88:	d9a2      	bls.n	8019ad0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8019b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b8c:	3b01      	subs	r3, #1
 8019b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b92:	2200      	movs	r2, #0
 8019b94:	701a      	strb	r2, [r3, #0]
  return buf;
 8019b96:	68bb      	ldr	r3, [r7, #8]
}
 8019b98:	4618      	mov	r0, r3
 8019b9a:	3734      	adds	r7, #52	@ 0x34
 8019b9c:	46bd      	mov	sp, r7
 8019b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba2:	4770      	bx	lr
 8019ba4:	cccccccd 	.word	0xcccccccd

08019ba8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b084      	sub	sp, #16
 8019bac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019bae:	2300      	movs	r3, #0
 8019bb0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019bb2:	4b12      	ldr	r3, [pc, #72]	@ (8019bfc <ip_reass_tmr+0x54>)
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019bb8:	e018      	b.n	8019bec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	7fdb      	ldrb	r3, [r3, #31]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d00b      	beq.n	8019bda <ip_reass_tmr+0x32>
      r->timer--;
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	7fdb      	ldrb	r3, [r3, #31]
 8019bc6:	3b01      	subs	r3, #1
 8019bc8:	b2da      	uxtb	r2, r3
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	60fb      	str	r3, [r7, #12]
 8019bd8:	e008      	b.n	8019bec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019be4:	68b9      	ldr	r1, [r7, #8]
 8019be6:	6878      	ldr	r0, [r7, #4]
 8019be8:	f000 f80a 	bl	8019c00 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d1e3      	bne.n	8019bba <ip_reass_tmr+0x12>
    }
  }
}
 8019bf2:	bf00      	nop
 8019bf4:	bf00      	nop
 8019bf6:	3710      	adds	r7, #16
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}
 8019bfc:	24014d14 	.word	0x24014d14

08019c00 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b088      	sub	sp, #32
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
 8019c08:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019c0e:	683a      	ldr	r2, [r7, #0]
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d105      	bne.n	8019c22 <ip_reass_free_complete_datagram+0x22>
 8019c16:	4b45      	ldr	r3, [pc, #276]	@ (8019d2c <ip_reass_free_complete_datagram+0x12c>)
 8019c18:	22ab      	movs	r2, #171	@ 0xab
 8019c1a:	4945      	ldr	r1, [pc, #276]	@ (8019d30 <ip_reass_free_complete_datagram+0x130>)
 8019c1c:	4845      	ldr	r0, [pc, #276]	@ (8019d34 <ip_reass_free_complete_datagram+0x134>)
 8019c1e:	f001 f8c9 	bl	801adb4 <iprintf>
  if (prev != NULL) {
 8019c22:	683b      	ldr	r3, [r7, #0]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d00a      	beq.n	8019c3e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019c28:	683b      	ldr	r3, [r7, #0]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	687a      	ldr	r2, [r7, #4]
 8019c2e:	429a      	cmp	r2, r3
 8019c30:	d005      	beq.n	8019c3e <ip_reass_free_complete_datagram+0x3e>
 8019c32:	4b3e      	ldr	r3, [pc, #248]	@ (8019d2c <ip_reass_free_complete_datagram+0x12c>)
 8019c34:	22ad      	movs	r2, #173	@ 0xad
 8019c36:	4940      	ldr	r1, [pc, #256]	@ (8019d38 <ip_reass_free_complete_datagram+0x138>)
 8019c38:	483e      	ldr	r0, [pc, #248]	@ (8019d34 <ip_reass_free_complete_datagram+0x134>)
 8019c3a:	f001 f8bb 	bl	801adb4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	685b      	ldr	r3, [r3, #4]
 8019c42:	685b      	ldr	r3, [r3, #4]
 8019c44:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	889b      	ldrh	r3, [r3, #4]
 8019c4a:	b29b      	uxth	r3, r3
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d12a      	bne.n	8019ca6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	685b      	ldr	r3, [r3, #4]
 8019c54:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019c56:	697b      	ldr	r3, [r7, #20]
 8019c58:	681a      	ldr	r2, [r3, #0]
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019c5e:	69bb      	ldr	r3, [r7, #24]
 8019c60:	6858      	ldr	r0, [r3, #4]
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	3308      	adds	r3, #8
 8019c66:	2214      	movs	r2, #20
 8019c68:	4619      	mov	r1, r3
 8019c6a:	f001 f9dc 	bl	801b026 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019c6e:	2101      	movs	r1, #1
 8019c70:	69b8      	ldr	r0, [r7, #24]
 8019c72:	f7ff fba1 	bl	80193b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019c76:	69b8      	ldr	r0, [r7, #24]
 8019c78:	f7f8 f858 	bl	8011d2c <pbuf_clen>
 8019c7c:	4603      	mov	r3, r0
 8019c7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019c80:	8bfa      	ldrh	r2, [r7, #30]
 8019c82:	8a7b      	ldrh	r3, [r7, #18]
 8019c84:	4413      	add	r3, r2
 8019c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019c8a:	db05      	blt.n	8019c98 <ip_reass_free_complete_datagram+0x98>
 8019c8c:	4b27      	ldr	r3, [pc, #156]	@ (8019d2c <ip_reass_free_complete_datagram+0x12c>)
 8019c8e:	22bc      	movs	r2, #188	@ 0xbc
 8019c90:	492a      	ldr	r1, [pc, #168]	@ (8019d3c <ip_reass_free_complete_datagram+0x13c>)
 8019c92:	4828      	ldr	r0, [pc, #160]	@ (8019d34 <ip_reass_free_complete_datagram+0x134>)
 8019c94:	f001 f88e 	bl	801adb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019c98:	8bfa      	ldrh	r2, [r7, #30]
 8019c9a:	8a7b      	ldrh	r3, [r7, #18]
 8019c9c:	4413      	add	r3, r2
 8019c9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019ca0:	69b8      	ldr	r0, [r7, #24]
 8019ca2:	f7f7 ffb5 	bl	8011c10 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	685b      	ldr	r3, [r3, #4]
 8019caa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019cac:	e01f      	b.n	8019cee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019cae:	69bb      	ldr	r3, [r7, #24]
 8019cb0:	685b      	ldr	r3, [r3, #4]
 8019cb2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019cb4:	69bb      	ldr	r3, [r7, #24]
 8019cb6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019cb8:	697b      	ldr	r3, [r7, #20]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019cbe:	68f8      	ldr	r0, [r7, #12]
 8019cc0:	f7f8 f834 	bl	8011d2c <pbuf_clen>
 8019cc4:	4603      	mov	r3, r0
 8019cc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019cc8:	8bfa      	ldrh	r2, [r7, #30]
 8019cca:	8a7b      	ldrh	r3, [r7, #18]
 8019ccc:	4413      	add	r3, r2
 8019cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019cd2:	db05      	blt.n	8019ce0 <ip_reass_free_complete_datagram+0xe0>
 8019cd4:	4b15      	ldr	r3, [pc, #84]	@ (8019d2c <ip_reass_free_complete_datagram+0x12c>)
 8019cd6:	22cc      	movs	r2, #204	@ 0xcc
 8019cd8:	4918      	ldr	r1, [pc, #96]	@ (8019d3c <ip_reass_free_complete_datagram+0x13c>)
 8019cda:	4816      	ldr	r0, [pc, #88]	@ (8019d34 <ip_reass_free_complete_datagram+0x134>)
 8019cdc:	f001 f86a 	bl	801adb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019ce0:	8bfa      	ldrh	r2, [r7, #30]
 8019ce2:	8a7b      	ldrh	r3, [r7, #18]
 8019ce4:	4413      	add	r3, r2
 8019ce6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019ce8:	68f8      	ldr	r0, [r7, #12]
 8019cea:	f7f7 ff91 	bl	8011c10 <pbuf_free>
  while (p != NULL) {
 8019cee:	69bb      	ldr	r3, [r7, #24]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d1dc      	bne.n	8019cae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019cf4:	6839      	ldr	r1, [r7, #0]
 8019cf6:	6878      	ldr	r0, [r7, #4]
 8019cf8:	f000 f8c2 	bl	8019e80 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019cfc:	4b10      	ldr	r3, [pc, #64]	@ (8019d40 <ip_reass_free_complete_datagram+0x140>)
 8019cfe:	881b      	ldrh	r3, [r3, #0]
 8019d00:	8bfa      	ldrh	r2, [r7, #30]
 8019d02:	429a      	cmp	r2, r3
 8019d04:	d905      	bls.n	8019d12 <ip_reass_free_complete_datagram+0x112>
 8019d06:	4b09      	ldr	r3, [pc, #36]	@ (8019d2c <ip_reass_free_complete_datagram+0x12c>)
 8019d08:	22d2      	movs	r2, #210	@ 0xd2
 8019d0a:	490e      	ldr	r1, [pc, #56]	@ (8019d44 <ip_reass_free_complete_datagram+0x144>)
 8019d0c:	4809      	ldr	r0, [pc, #36]	@ (8019d34 <ip_reass_free_complete_datagram+0x134>)
 8019d0e:	f001 f851 	bl	801adb4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019d12:	4b0b      	ldr	r3, [pc, #44]	@ (8019d40 <ip_reass_free_complete_datagram+0x140>)
 8019d14:	881a      	ldrh	r2, [r3, #0]
 8019d16:	8bfb      	ldrh	r3, [r7, #30]
 8019d18:	1ad3      	subs	r3, r2, r3
 8019d1a:	b29a      	uxth	r2, r3
 8019d1c:	4b08      	ldr	r3, [pc, #32]	@ (8019d40 <ip_reass_free_complete_datagram+0x140>)
 8019d1e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019d20:	8bfb      	ldrh	r3, [r7, #30]
}
 8019d22:	4618      	mov	r0, r3
 8019d24:	3720      	adds	r7, #32
 8019d26:	46bd      	mov	sp, r7
 8019d28:	bd80      	pop	{r7, pc}
 8019d2a:	bf00      	nop
 8019d2c:	0801e5c8 	.word	0x0801e5c8
 8019d30:	0801e604 	.word	0x0801e604
 8019d34:	0801e610 	.word	0x0801e610
 8019d38:	0801e638 	.word	0x0801e638
 8019d3c:	0801e64c 	.word	0x0801e64c
 8019d40:	24014d18 	.word	0x24014d18
 8019d44:	0801e66c 	.word	0x0801e66c

08019d48 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b08a      	sub	sp, #40	@ 0x28
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
 8019d50:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019d52:	2300      	movs	r3, #0
 8019d54:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019d56:	2300      	movs	r3, #0
 8019d58:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019d5e:	2300      	movs	r3, #0
 8019d60:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019d62:	2300      	movs	r3, #0
 8019d64:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019d66:	4b28      	ldr	r3, [pc, #160]	@ (8019e08 <ip_reass_remove_oldest_datagram+0xc0>)
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019d6c:	e030      	b.n	8019dd0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d70:	695a      	ldr	r2, [r3, #20]
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	68db      	ldr	r3, [r3, #12]
 8019d76:	429a      	cmp	r2, r3
 8019d78:	d10c      	bne.n	8019d94 <ip_reass_remove_oldest_datagram+0x4c>
 8019d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d7c:	699a      	ldr	r2, [r3, #24]
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	691b      	ldr	r3, [r3, #16]
 8019d82:	429a      	cmp	r2, r3
 8019d84:	d106      	bne.n	8019d94 <ip_reass_remove_oldest_datagram+0x4c>
 8019d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d88:	899a      	ldrh	r2, [r3, #12]
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	889b      	ldrh	r3, [r3, #4]
 8019d8e:	b29b      	uxth	r3, r3
 8019d90:	429a      	cmp	r2, r3
 8019d92:	d014      	beq.n	8019dbe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019d94:	693b      	ldr	r3, [r7, #16]
 8019d96:	3301      	adds	r3, #1
 8019d98:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019d9a:	6a3b      	ldr	r3, [r7, #32]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d104      	bne.n	8019daa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019da2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019da4:	69fb      	ldr	r3, [r7, #28]
 8019da6:	61bb      	str	r3, [r7, #24]
 8019da8:	e009      	b.n	8019dbe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dac:	7fda      	ldrb	r2, [r3, #31]
 8019dae:	6a3b      	ldr	r3, [r7, #32]
 8019db0:	7fdb      	ldrb	r3, [r3, #31]
 8019db2:	429a      	cmp	r2, r3
 8019db4:	d803      	bhi.n	8019dbe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019db8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019dba:	69fb      	ldr	r3, [r7, #28]
 8019dbc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d001      	beq.n	8019dca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dc8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d1cb      	bne.n	8019d6e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019dd6:	6a3b      	ldr	r3, [r7, #32]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d008      	beq.n	8019dee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019ddc:	69b9      	ldr	r1, [r7, #24]
 8019dde:	6a38      	ldr	r0, [r7, #32]
 8019de0:	f7ff ff0e 	bl	8019c00 <ip_reass_free_complete_datagram>
 8019de4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019de6:	697a      	ldr	r2, [r7, #20]
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	4413      	add	r3, r2
 8019dec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019dee:	697a      	ldr	r2, [r7, #20]
 8019df0:	683b      	ldr	r3, [r7, #0]
 8019df2:	429a      	cmp	r2, r3
 8019df4:	da02      	bge.n	8019dfc <ip_reass_remove_oldest_datagram+0xb4>
 8019df6:	693b      	ldr	r3, [r7, #16]
 8019df8:	2b01      	cmp	r3, #1
 8019dfa:	dcac      	bgt.n	8019d56 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019dfc:	697b      	ldr	r3, [r7, #20]
}
 8019dfe:	4618      	mov	r0, r3
 8019e00:	3728      	adds	r7, #40	@ 0x28
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}
 8019e06:	bf00      	nop
 8019e08:	24014d14 	.word	0x24014d14

08019e0c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b084      	sub	sp, #16
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
 8019e14:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019e16:	2005      	movs	r0, #5
 8019e18:	f7f6 ffd8 	bl	8010dcc <memp_malloc>
 8019e1c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d110      	bne.n	8019e46 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019e24:	6839      	ldr	r1, [r7, #0]
 8019e26:	6878      	ldr	r0, [r7, #4]
 8019e28:	f7ff ff8e 	bl	8019d48 <ip_reass_remove_oldest_datagram>
 8019e2c:	4602      	mov	r2, r0
 8019e2e:	683b      	ldr	r3, [r7, #0]
 8019e30:	4293      	cmp	r3, r2
 8019e32:	dc03      	bgt.n	8019e3c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019e34:	2005      	movs	r0, #5
 8019e36:	f7f6 ffc9 	bl	8010dcc <memp_malloc>
 8019e3a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d101      	bne.n	8019e46 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019e42:	2300      	movs	r3, #0
 8019e44:	e016      	b.n	8019e74 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019e46:	2220      	movs	r2, #32
 8019e48:	2100      	movs	r1, #0
 8019e4a:	68f8      	ldr	r0, [r7, #12]
 8019e4c:	f001 f817 	bl	801ae7e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	220f      	movs	r2, #15
 8019e54:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019e56:	4b09      	ldr	r3, [pc, #36]	@ (8019e7c <ip_reass_enqueue_new_datagram+0x70>)
 8019e58:	681a      	ldr	r2, [r3, #0]
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019e5e:	4a07      	ldr	r2, [pc, #28]	@ (8019e7c <ip_reass_enqueue_new_datagram+0x70>)
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	3308      	adds	r3, #8
 8019e68:	2214      	movs	r2, #20
 8019e6a:	6879      	ldr	r1, [r7, #4]
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	f001 f8da 	bl	801b026 <memcpy>
  return ipr;
 8019e72:	68fb      	ldr	r3, [r7, #12]
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	3710      	adds	r7, #16
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}
 8019e7c:	24014d14 	.word	0x24014d14

08019e80 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019e80:	b580      	push	{r7, lr}
 8019e82:	b082      	sub	sp, #8
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	6078      	str	r0, [r7, #4]
 8019e88:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019e8a:	4b10      	ldr	r3, [pc, #64]	@ (8019ecc <ip_reass_dequeue_datagram+0x4c>)
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	687a      	ldr	r2, [r7, #4]
 8019e90:	429a      	cmp	r2, r3
 8019e92:	d104      	bne.n	8019e9e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	4a0c      	ldr	r2, [pc, #48]	@ (8019ecc <ip_reass_dequeue_datagram+0x4c>)
 8019e9a:	6013      	str	r3, [r2, #0]
 8019e9c:	e00d      	b.n	8019eba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019e9e:	683b      	ldr	r3, [r7, #0]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d106      	bne.n	8019eb2 <ip_reass_dequeue_datagram+0x32>
 8019ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8019ed0 <ip_reass_dequeue_datagram+0x50>)
 8019ea6:	f240 1245 	movw	r2, #325	@ 0x145
 8019eaa:	490a      	ldr	r1, [pc, #40]	@ (8019ed4 <ip_reass_dequeue_datagram+0x54>)
 8019eac:	480a      	ldr	r0, [pc, #40]	@ (8019ed8 <ip_reass_dequeue_datagram+0x58>)
 8019eae:	f000 ff81 	bl	801adb4 <iprintf>
    prev->next = ipr->next;
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681a      	ldr	r2, [r3, #0]
 8019eb6:	683b      	ldr	r3, [r7, #0]
 8019eb8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019eba:	6879      	ldr	r1, [r7, #4]
 8019ebc:	2005      	movs	r0, #5
 8019ebe:	f7f6 fffb 	bl	8010eb8 <memp_free>
}
 8019ec2:	bf00      	nop
 8019ec4:	3708      	adds	r7, #8
 8019ec6:	46bd      	mov	sp, r7
 8019ec8:	bd80      	pop	{r7, pc}
 8019eca:	bf00      	nop
 8019ecc:	24014d14 	.word	0x24014d14
 8019ed0:	0801e5c8 	.word	0x0801e5c8
 8019ed4:	0801e690 	.word	0x0801e690
 8019ed8:	0801e610 	.word	0x0801e610

08019edc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b08c      	sub	sp, #48	@ 0x30
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	60f8      	str	r0, [r7, #12]
 8019ee4:	60b9      	str	r1, [r7, #8]
 8019ee6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019ee8:	2300      	movs	r3, #0
 8019eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019eec:	2301      	movs	r3, #1
 8019eee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019ef0:	68bb      	ldr	r3, [r7, #8]
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019ef6:	69fb      	ldr	r3, [r7, #28]
 8019ef8:	885b      	ldrh	r3, [r3, #2]
 8019efa:	b29b      	uxth	r3, r3
 8019efc:	4618      	mov	r0, r3
 8019efe:	f7f6 f9d5 	bl	80102ac <lwip_htons>
 8019f02:	4603      	mov	r3, r0
 8019f04:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019f06:	69fb      	ldr	r3, [r7, #28]
 8019f08:	781b      	ldrb	r3, [r3, #0]
 8019f0a:	f003 030f 	and.w	r3, r3, #15
 8019f0e:	b2db      	uxtb	r3, r3
 8019f10:	009b      	lsls	r3, r3, #2
 8019f12:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019f14:	7e7b      	ldrb	r3, [r7, #25]
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	8b7a      	ldrh	r2, [r7, #26]
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d202      	bcs.n	8019f24 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8019f22:	e135      	b.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019f24:	7e7b      	ldrb	r3, [r7, #25]
 8019f26:	b29b      	uxth	r3, r3
 8019f28:	8b7a      	ldrh	r2, [r7, #26]
 8019f2a:	1ad3      	subs	r3, r2, r3
 8019f2c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019f2e:	69fb      	ldr	r3, [r7, #28]
 8019f30:	88db      	ldrh	r3, [r3, #6]
 8019f32:	b29b      	uxth	r3, r3
 8019f34:	4618      	mov	r0, r3
 8019f36:	f7f6 f9b9 	bl	80102ac <lwip_htons>
 8019f3a:	4603      	mov	r3, r0
 8019f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019f40:	b29b      	uxth	r3, r3
 8019f42:	00db      	lsls	r3, r3, #3
 8019f44:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019f46:	68bb      	ldr	r3, [r7, #8]
 8019f48:	685b      	ldr	r3, [r3, #4]
 8019f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8019f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f4e:	2200      	movs	r2, #0
 8019f50:	701a      	strb	r2, [r3, #0]
 8019f52:	2200      	movs	r2, #0
 8019f54:	705a      	strb	r2, [r3, #1]
 8019f56:	2200      	movs	r2, #0
 8019f58:	709a      	strb	r2, [r3, #2]
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f60:	8afa      	ldrh	r2, [r7, #22]
 8019f62:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019f64:	8afa      	ldrh	r2, [r7, #22]
 8019f66:	8b7b      	ldrh	r3, [r7, #26]
 8019f68:	4413      	add	r3, r2
 8019f6a:	b29a      	uxth	r2, r3
 8019f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f6e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f72:	88db      	ldrh	r3, [r3, #6]
 8019f74:	b29b      	uxth	r3, r3
 8019f76:	8afa      	ldrh	r2, [r7, #22]
 8019f78:	429a      	cmp	r2, r3
 8019f7a:	d902      	bls.n	8019f82 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f80:	e106      	b.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	685b      	ldr	r3, [r3, #4]
 8019f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8019f88:	e068      	b.n	801a05c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f8c:	685b      	ldr	r3, [r3, #4]
 8019f8e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f92:	889b      	ldrh	r3, [r3, #4]
 8019f94:	b29a      	uxth	r2, r3
 8019f96:	693b      	ldr	r3, [r7, #16]
 8019f98:	889b      	ldrh	r3, [r3, #4]
 8019f9a:	b29b      	uxth	r3, r3
 8019f9c:	429a      	cmp	r2, r3
 8019f9e:	d235      	bcs.n	801a00c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019fa4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d020      	beq.n	8019fee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fae:	889b      	ldrh	r3, [r3, #4]
 8019fb0:	b29a      	uxth	r2, r3
 8019fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fb4:	88db      	ldrh	r3, [r3, #6]
 8019fb6:	b29b      	uxth	r3, r3
 8019fb8:	429a      	cmp	r2, r3
 8019fba:	d307      	bcc.n	8019fcc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fbe:	88db      	ldrh	r3, [r3, #6]
 8019fc0:	b29a      	uxth	r2, r3
 8019fc2:	693b      	ldr	r3, [r7, #16]
 8019fc4:	889b      	ldrh	r3, [r3, #4]
 8019fc6:	b29b      	uxth	r3, r3
 8019fc8:	429a      	cmp	r2, r3
 8019fca:	d902      	bls.n	8019fd2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8019fd0:	e0de      	b.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fd4:	68ba      	ldr	r2, [r7, #8]
 8019fd6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fda:	88db      	ldrh	r3, [r3, #6]
 8019fdc:	b29a      	uxth	r2, r3
 8019fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fe0:	889b      	ldrh	r3, [r3, #4]
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	429a      	cmp	r2, r3
 8019fe6:	d03d      	beq.n	801a064 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019fe8:	2300      	movs	r3, #0
 8019fea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019fec:	e03a      	b.n	801a064 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ff0:	88db      	ldrh	r3, [r3, #6]
 8019ff2:	b29a      	uxth	r2, r3
 8019ff4:	693b      	ldr	r3, [r7, #16]
 8019ff6:	889b      	ldrh	r3, [r3, #4]
 8019ff8:	b29b      	uxth	r3, r3
 8019ffa:	429a      	cmp	r2, r3
 8019ffc:	d902      	bls.n	801a004 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019ffe:	f04f 33ff 	mov.w	r3, #4294967295
 801a002:	e0c5      	b.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	68ba      	ldr	r2, [r7, #8]
 801a008:	605a      	str	r2, [r3, #4]
      break;
 801a00a:	e02b      	b.n	801a064 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a00e:	889b      	ldrh	r3, [r3, #4]
 801a010:	b29a      	uxth	r2, r3
 801a012:	693b      	ldr	r3, [r7, #16]
 801a014:	889b      	ldrh	r3, [r3, #4]
 801a016:	b29b      	uxth	r3, r3
 801a018:	429a      	cmp	r2, r3
 801a01a:	d102      	bne.n	801a022 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a01c:	f04f 33ff 	mov.w	r3, #4294967295
 801a020:	e0b6      	b.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a024:	889b      	ldrh	r3, [r3, #4]
 801a026:	b29a      	uxth	r2, r3
 801a028:	693b      	ldr	r3, [r7, #16]
 801a02a:	88db      	ldrh	r3, [r3, #6]
 801a02c:	b29b      	uxth	r3, r3
 801a02e:	429a      	cmp	r2, r3
 801a030:	d202      	bcs.n	801a038 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a032:	f04f 33ff 	mov.w	r3, #4294967295
 801a036:	e0ab      	b.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d009      	beq.n	801a052 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a040:	88db      	ldrh	r3, [r3, #6]
 801a042:	b29a      	uxth	r2, r3
 801a044:	693b      	ldr	r3, [r7, #16]
 801a046:	889b      	ldrh	r3, [r3, #4]
 801a048:	b29b      	uxth	r3, r3
 801a04a:	429a      	cmp	r2, r3
 801a04c:	d001      	beq.n	801a052 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a04e:	2300      	movs	r3, #0
 801a050:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a052:	693b      	ldr	r3, [r7, #16]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801a058:	693b      	ldr	r3, [r7, #16]
 801a05a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801a05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d193      	bne.n	8019f8a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a062:	e000      	b.n	801a066 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a064:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d12d      	bne.n	801a0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d01c      	beq.n	801a0ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a074:	88db      	ldrh	r3, [r3, #6]
 801a076:	b29a      	uxth	r2, r3
 801a078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a07a:	889b      	ldrh	r3, [r3, #4]
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	429a      	cmp	r2, r3
 801a080:	d906      	bls.n	801a090 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a082:	4b45      	ldr	r3, [pc, #276]	@ (801a198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a084:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801a088:	4944      	ldr	r1, [pc, #272]	@ (801a19c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a08a:	4845      	ldr	r0, [pc, #276]	@ (801a1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a08c:	f000 fe92 	bl	801adb4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a092:	68ba      	ldr	r2, [r7, #8]
 801a094:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a098:	88db      	ldrh	r3, [r3, #6]
 801a09a:	b29a      	uxth	r2, r3
 801a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a09e:	889b      	ldrh	r3, [r3, #4]
 801a0a0:	b29b      	uxth	r3, r3
 801a0a2:	429a      	cmp	r2, r3
 801a0a4:	d010      	beq.n	801a0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	623b      	str	r3, [r7, #32]
 801a0aa:	e00d      	b.n	801a0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	685b      	ldr	r3, [r3, #4]
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d006      	beq.n	801a0c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a0b4:	4b38      	ldr	r3, [pc, #224]	@ (801a198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a0b6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801a0ba:	493a      	ldr	r1, [pc, #232]	@ (801a1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a0bc:	4838      	ldr	r0, [pc, #224]	@ (801a1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a0be:	f000 fe79 	bl	801adb4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	68ba      	ldr	r2, [r7, #8]
 801a0c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d105      	bne.n	801a0da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	7f9b      	ldrb	r3, [r3, #30]
 801a0d2:	f003 0301 	and.w	r3, r3, #1
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d059      	beq.n	801a18e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a0da:	6a3b      	ldr	r3, [r7, #32]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d04f      	beq.n	801a180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	685b      	ldr	r3, [r3, #4]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d006      	beq.n	801a0f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	685b      	ldr	r3, [r3, #4]
 801a0ec:	685b      	ldr	r3, [r3, #4]
 801a0ee:	889b      	ldrh	r3, [r3, #4]
 801a0f0:	b29b      	uxth	r3, r3
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d002      	beq.n	801a0fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	623b      	str	r3, [r7, #32]
 801a0fa:	e041      	b.n	801a180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801a100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a106:	e012      	b.n	801a12e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a10a:	685b      	ldr	r3, [r3, #4]
 801a10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801a10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a110:	88db      	ldrh	r3, [r3, #6]
 801a112:	b29a      	uxth	r2, r3
 801a114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a116:	889b      	ldrh	r3, [r3, #4]
 801a118:	b29b      	uxth	r3, r3
 801a11a:	429a      	cmp	r2, r3
 801a11c:	d002      	beq.n	801a124 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a11e:	2300      	movs	r3, #0
 801a120:	623b      	str	r3, [r7, #32]
            break;
 801a122:	e007      	b.n	801a134 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a126:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801a128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a130:	2b00      	cmp	r3, #0
 801a132:	d1e9      	bne.n	801a108 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a134:	6a3b      	ldr	r3, [r7, #32]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d022      	beq.n	801a180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	685b      	ldr	r3, [r3, #4]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d106      	bne.n	801a150 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a142:	4b15      	ldr	r3, [pc, #84]	@ (801a198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a144:	f240 12df 	movw	r2, #479	@ 0x1df
 801a148:	4917      	ldr	r1, [pc, #92]	@ (801a1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a14a:	4815      	ldr	r0, [pc, #84]	@ (801a1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a14c:	f000 fe32 	bl	801adb4 <iprintf>
          LWIP_ASSERT("sanity check",
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	685b      	ldr	r3, [r3, #4]
 801a154:	685b      	ldr	r3, [r3, #4]
 801a156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a158:	429a      	cmp	r2, r3
 801a15a:	d106      	bne.n	801a16a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a15c:	4b0e      	ldr	r3, [pc, #56]	@ (801a198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a15e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801a162:	4911      	ldr	r1, [pc, #68]	@ (801a1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a164:	480e      	ldr	r0, [pc, #56]	@ (801a1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a166:	f000 fe25 	bl	801adb4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d006      	beq.n	801a180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a172:	4b09      	ldr	r3, [pc, #36]	@ (801a198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a174:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801a178:	490c      	ldr	r1, [pc, #48]	@ (801a1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a17a:	4809      	ldr	r0, [pc, #36]	@ (801a1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a17c:	f000 fe1a 	bl	801adb4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a180:	6a3b      	ldr	r3, [r7, #32]
 801a182:	2b00      	cmp	r3, #0
 801a184:	bf14      	ite	ne
 801a186:	2301      	movne	r3, #1
 801a188:	2300      	moveq	r3, #0
 801a18a:	b2db      	uxtb	r3, r3
 801a18c:	e000      	b.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a18e:	2300      	movs	r3, #0
}
 801a190:	4618      	mov	r0, r3
 801a192:	3730      	adds	r7, #48	@ 0x30
 801a194:	46bd      	mov	sp, r7
 801a196:	bd80      	pop	{r7, pc}
 801a198:	0801e5c8 	.word	0x0801e5c8
 801a19c:	0801e6ac 	.word	0x0801e6ac
 801a1a0:	0801e610 	.word	0x0801e610
 801a1a4:	0801e6cc 	.word	0x0801e6cc
 801a1a8:	0801e704 	.word	0x0801e704
 801a1ac:	0801e714 	.word	0x0801e714

0801a1b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b08e      	sub	sp, #56	@ 0x38
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	685b      	ldr	r3, [r3, #4]
 801a1bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1c0:	781b      	ldrb	r3, [r3, #0]
 801a1c2:	f003 030f 	and.w	r3, r3, #15
 801a1c6:	b2db      	uxtb	r3, r3
 801a1c8:	009b      	lsls	r3, r3, #2
 801a1ca:	b2db      	uxtb	r3, r3
 801a1cc:	2b14      	cmp	r3, #20
 801a1ce:	f040 8171 	bne.w	801a4b4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1d4:	88db      	ldrh	r3, [r3, #6]
 801a1d6:	b29b      	uxth	r3, r3
 801a1d8:	4618      	mov	r0, r3
 801a1da:	f7f6 f867 	bl	80102ac <lwip_htons>
 801a1de:	4603      	mov	r3, r0
 801a1e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a1e4:	b29b      	uxth	r3, r3
 801a1e6:	00db      	lsls	r3, r3, #3
 801a1e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1ec:	885b      	ldrh	r3, [r3, #2]
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	f7f6 f85b 	bl	80102ac <lwip_htons>
 801a1f6:	4603      	mov	r3, r0
 801a1f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1fc:	781b      	ldrb	r3, [r3, #0]
 801a1fe:	f003 030f 	and.w	r3, r3, #15
 801a202:	b2db      	uxtb	r3, r3
 801a204:	009b      	lsls	r3, r3, #2
 801a206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801a20a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a20e:	b29b      	uxth	r3, r3
 801a210:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a212:	429a      	cmp	r2, r3
 801a214:	f0c0 8150 	bcc.w	801a4b8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a218:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a21c:	b29b      	uxth	r3, r3
 801a21e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a220:	1ad3      	subs	r3, r2, r3
 801a222:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a224:	6878      	ldr	r0, [r7, #4]
 801a226:	f7f7 fd81 	bl	8011d2c <pbuf_clen>
 801a22a:	4603      	mov	r3, r0
 801a22c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a22e:	4b8c      	ldr	r3, [pc, #560]	@ (801a460 <ip4_reass+0x2b0>)
 801a230:	881b      	ldrh	r3, [r3, #0]
 801a232:	461a      	mov	r2, r3
 801a234:	8c3b      	ldrh	r3, [r7, #32]
 801a236:	4413      	add	r3, r2
 801a238:	2b0a      	cmp	r3, #10
 801a23a:	dd10      	ble.n	801a25e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a23c:	8c3b      	ldrh	r3, [r7, #32]
 801a23e:	4619      	mov	r1, r3
 801a240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a242:	f7ff fd81 	bl	8019d48 <ip_reass_remove_oldest_datagram>
 801a246:	4603      	mov	r3, r0
 801a248:	2b00      	cmp	r3, #0
 801a24a:	f000 8137 	beq.w	801a4bc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a24e:	4b84      	ldr	r3, [pc, #528]	@ (801a460 <ip4_reass+0x2b0>)
 801a250:	881b      	ldrh	r3, [r3, #0]
 801a252:	461a      	mov	r2, r3
 801a254:	8c3b      	ldrh	r3, [r7, #32]
 801a256:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a258:	2b0a      	cmp	r3, #10
 801a25a:	f300 812f 	bgt.w	801a4bc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a25e:	4b81      	ldr	r3, [pc, #516]	@ (801a464 <ip4_reass+0x2b4>)
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	633b      	str	r3, [r7, #48]	@ 0x30
 801a264:	e015      	b.n	801a292 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a268:	695a      	ldr	r2, [r3, #20]
 801a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a26c:	68db      	ldr	r3, [r3, #12]
 801a26e:	429a      	cmp	r2, r3
 801a270:	d10c      	bne.n	801a28c <ip4_reass+0xdc>
 801a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a274:	699a      	ldr	r2, [r3, #24]
 801a276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a278:	691b      	ldr	r3, [r3, #16]
 801a27a:	429a      	cmp	r2, r3
 801a27c:	d106      	bne.n	801a28c <ip4_reass+0xdc>
 801a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a280:	899a      	ldrh	r2, [r3, #12]
 801a282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a284:	889b      	ldrh	r3, [r3, #4]
 801a286:	b29b      	uxth	r3, r3
 801a288:	429a      	cmp	r2, r3
 801a28a:	d006      	beq.n	801a29a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	633b      	str	r3, [r7, #48]	@ 0x30
 801a292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a294:	2b00      	cmp	r3, #0
 801a296:	d1e6      	bne.n	801a266 <ip4_reass+0xb6>
 801a298:	e000      	b.n	801a29c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a29a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d109      	bne.n	801a2b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a2a2:	8c3b      	ldrh	r3, [r7, #32]
 801a2a4:	4619      	mov	r1, r3
 801a2a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a2a8:	f7ff fdb0 	bl	8019e0c <ip_reass_enqueue_new_datagram>
 801a2ac:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d11c      	bne.n	801a2ee <ip4_reass+0x13e>
      goto nullreturn;
 801a2b4:	e105      	b.n	801a4c2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2b8:	88db      	ldrh	r3, [r3, #6]
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	4618      	mov	r0, r3
 801a2be:	f7f5 fff5 	bl	80102ac <lwip_htons>
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d110      	bne.n	801a2ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2ce:	89db      	ldrh	r3, [r3, #14]
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	f7f5 ffeb 	bl	80102ac <lwip_htons>
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d006      	beq.n	801a2ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2e2:	3308      	adds	r3, #8
 801a2e4:	2214      	movs	r2, #20
 801a2e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f000 fe9c 	bl	801b026 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2f0:	88db      	ldrh	r3, [r3, #6]
 801a2f2:	b29b      	uxth	r3, r3
 801a2f4:	f003 0320 	and.w	r3, r3, #32
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	bf0c      	ite	eq
 801a2fc:	2301      	moveq	r3, #1
 801a2fe:	2300      	movne	r3, #0
 801a300:	b2db      	uxtb	r3, r3
 801a302:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a304:	69fb      	ldr	r3, [r7, #28]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d00e      	beq.n	801a328 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a30a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a30c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a30e:	4413      	add	r3, r2
 801a310:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a312:	8b7a      	ldrh	r2, [r7, #26]
 801a314:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a316:	429a      	cmp	r2, r3
 801a318:	f0c0 80a0 	bcc.w	801a45c <ip4_reass+0x2ac>
 801a31c:	8b7b      	ldrh	r3, [r7, #26]
 801a31e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801a322:	4293      	cmp	r3, r2
 801a324:	f200 809a 	bhi.w	801a45c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a328:	69fa      	ldr	r2, [r7, #28]
 801a32a:	6879      	ldr	r1, [r7, #4]
 801a32c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a32e:	f7ff fdd5 	bl	8019edc <ip_reass_chain_frag_into_datagram_and_validate>
 801a332:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a334:	697b      	ldr	r3, [r7, #20]
 801a336:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a33a:	f000 809b 	beq.w	801a474 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a33e:	4b48      	ldr	r3, [pc, #288]	@ (801a460 <ip4_reass+0x2b0>)
 801a340:	881a      	ldrh	r2, [r3, #0]
 801a342:	8c3b      	ldrh	r3, [r7, #32]
 801a344:	4413      	add	r3, r2
 801a346:	b29a      	uxth	r2, r3
 801a348:	4b45      	ldr	r3, [pc, #276]	@ (801a460 <ip4_reass+0x2b0>)
 801a34a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a34c:	69fb      	ldr	r3, [r7, #28]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d00d      	beq.n	801a36e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a352:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a354:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a356:	4413      	add	r3, r2
 801a358:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a35c:	8a7a      	ldrh	r2, [r7, #18]
 801a35e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a362:	7f9b      	ldrb	r3, [r3, #30]
 801a364:	f043 0301 	orr.w	r3, r3, #1
 801a368:	b2da      	uxtb	r2, r3
 801a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a36c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a36e:	697b      	ldr	r3, [r7, #20]
 801a370:	2b01      	cmp	r3, #1
 801a372:	d171      	bne.n	801a458 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a376:	8b9b      	ldrh	r3, [r3, #28]
 801a378:	3314      	adds	r3, #20
 801a37a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a37e:	685b      	ldr	r3, [r3, #4]
 801a380:	685b      	ldr	r3, [r3, #4]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a388:	685b      	ldr	r3, [r3, #4]
 801a38a:	685b      	ldr	r3, [r3, #4]
 801a38c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a390:	3308      	adds	r3, #8
 801a392:	2214      	movs	r2, #20
 801a394:	4619      	mov	r1, r3
 801a396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a398:	f000 fe45 	bl	801b026 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a39c:	8a3b      	ldrh	r3, [r7, #16]
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f7f5 ff84 	bl	80102ac <lwip_htons>
 801a3a4:	4603      	mov	r3, r0
 801a3a6:	461a      	mov	r2, r3
 801a3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	719a      	strb	r2, [r3, #6]
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	729a      	strb	r2, [r3, #10]
 801a3bc:	2200      	movs	r2, #0
 801a3be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3c2:	685b      	ldr	r3, [r3, #4]
 801a3c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a3c6:	e00d      	b.n	801a3e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a3c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3ca:	685b      	ldr	r3, [r3, #4]
 801a3cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a3ce:	2114      	movs	r1, #20
 801a3d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a3d2:	f7f7 fb97 	bl	8011b04 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a3d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a3d8:	6878      	ldr	r0, [r7, #4]
 801a3da:	f7f7 fce7 	bl	8011dac <pbuf_cat>
      r = iprh->next_pbuf;
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801a3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d1ee      	bne.n	801a3c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a3ea:	4b1e      	ldr	r3, [pc, #120]	@ (801a464 <ip4_reass+0x2b4>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a3f0:	429a      	cmp	r2, r3
 801a3f2:	d102      	bne.n	801a3fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a3f8:	e010      	b.n	801a41c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a3fa:	4b1a      	ldr	r3, [pc, #104]	@ (801a464 <ip4_reass+0x2b4>)
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a400:	e007      	b.n	801a412 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a408:	429a      	cmp	r2, r3
 801a40a:	d006      	beq.n	801a41a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a414:	2b00      	cmp	r3, #0
 801a416:	d1f4      	bne.n	801a402 <ip4_reass+0x252>
 801a418:	e000      	b.n	801a41c <ip4_reass+0x26c>
          break;
 801a41a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a41c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a41e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a420:	f7ff fd2e 	bl	8019e80 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a424:	6878      	ldr	r0, [r7, #4]
 801a426:	f7f7 fc81 	bl	8011d2c <pbuf_clen>
 801a42a:	4603      	mov	r3, r0
 801a42c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a42e:	4b0c      	ldr	r3, [pc, #48]	@ (801a460 <ip4_reass+0x2b0>)
 801a430:	881b      	ldrh	r3, [r3, #0]
 801a432:	8c3a      	ldrh	r2, [r7, #32]
 801a434:	429a      	cmp	r2, r3
 801a436:	d906      	bls.n	801a446 <ip4_reass+0x296>
 801a438:	4b0b      	ldr	r3, [pc, #44]	@ (801a468 <ip4_reass+0x2b8>)
 801a43a:	f240 229b 	movw	r2, #667	@ 0x29b
 801a43e:	490b      	ldr	r1, [pc, #44]	@ (801a46c <ip4_reass+0x2bc>)
 801a440:	480b      	ldr	r0, [pc, #44]	@ (801a470 <ip4_reass+0x2c0>)
 801a442:	f000 fcb7 	bl	801adb4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a446:	4b06      	ldr	r3, [pc, #24]	@ (801a460 <ip4_reass+0x2b0>)
 801a448:	881a      	ldrh	r2, [r3, #0]
 801a44a:	8c3b      	ldrh	r3, [r7, #32]
 801a44c:	1ad3      	subs	r3, r2, r3
 801a44e:	b29a      	uxth	r2, r3
 801a450:	4b03      	ldr	r3, [pc, #12]	@ (801a460 <ip4_reass+0x2b0>)
 801a452:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	e038      	b.n	801a4ca <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a458:	2300      	movs	r3, #0
 801a45a:	e036      	b.n	801a4ca <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a45c:	bf00      	nop
 801a45e:	e00a      	b.n	801a476 <ip4_reass+0x2c6>
 801a460:	24014d18 	.word	0x24014d18
 801a464:	24014d14 	.word	0x24014d14
 801a468:	0801e5c8 	.word	0x0801e5c8
 801a46c:	0801e738 	.word	0x0801e738
 801a470:	0801e610 	.word	0x0801e610
    goto nullreturn_ipr;
 801a474:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d106      	bne.n	801a48a <ip4_reass+0x2da>
 801a47c:	4b15      	ldr	r3, [pc, #84]	@ (801a4d4 <ip4_reass+0x324>)
 801a47e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801a482:	4915      	ldr	r1, [pc, #84]	@ (801a4d8 <ip4_reass+0x328>)
 801a484:	4815      	ldr	r0, [pc, #84]	@ (801a4dc <ip4_reass+0x32c>)
 801a486:	f000 fc95 	bl	801adb4 <iprintf>
  if (ipr->p == NULL) {
 801a48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a48c:	685b      	ldr	r3, [r3, #4]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d116      	bne.n	801a4c0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a492:	4b13      	ldr	r3, [pc, #76]	@ (801a4e0 <ip4_reass+0x330>)
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a498:	429a      	cmp	r2, r3
 801a49a:	d006      	beq.n	801a4aa <ip4_reass+0x2fa>
 801a49c:	4b0d      	ldr	r3, [pc, #52]	@ (801a4d4 <ip4_reass+0x324>)
 801a49e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a4a2:	4910      	ldr	r1, [pc, #64]	@ (801a4e4 <ip4_reass+0x334>)
 801a4a4:	480d      	ldr	r0, [pc, #52]	@ (801a4dc <ip4_reass+0x32c>)
 801a4a6:	f000 fc85 	bl	801adb4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a4aa:	2100      	movs	r1, #0
 801a4ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4ae:	f7ff fce7 	bl	8019e80 <ip_reass_dequeue_datagram>
 801a4b2:	e006      	b.n	801a4c2 <ip4_reass+0x312>
    goto nullreturn;
 801a4b4:	bf00      	nop
 801a4b6:	e004      	b.n	801a4c2 <ip4_reass+0x312>
    goto nullreturn;
 801a4b8:	bf00      	nop
 801a4ba:	e002      	b.n	801a4c2 <ip4_reass+0x312>
      goto nullreturn;
 801a4bc:	bf00      	nop
 801a4be:	e000      	b.n	801a4c2 <ip4_reass+0x312>
  }

nullreturn:
 801a4c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a4c2:	6878      	ldr	r0, [r7, #4]
 801a4c4:	f7f7 fba4 	bl	8011c10 <pbuf_free>
  return NULL;
 801a4c8:	2300      	movs	r3, #0
}
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	3738      	adds	r7, #56	@ 0x38
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	bd80      	pop	{r7, pc}
 801a4d2:	bf00      	nop
 801a4d4:	0801e5c8 	.word	0x0801e5c8
 801a4d8:	0801e754 	.word	0x0801e754
 801a4dc:	0801e610 	.word	0x0801e610
 801a4e0:	24014d14 	.word	0x24014d14
 801a4e4:	0801e760 	.word	0x0801e760

0801a4e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a4ec:	2006      	movs	r0, #6
 801a4ee:	f7f6 fc6d 	bl	8010dcc <memp_malloc>
 801a4f2:	4603      	mov	r3, r0
}
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	bd80      	pop	{r7, pc}

0801a4f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b082      	sub	sp, #8
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d106      	bne.n	801a514 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a506:	4b07      	ldr	r3, [pc, #28]	@ (801a524 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a508:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801a50c:	4906      	ldr	r1, [pc, #24]	@ (801a528 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a50e:	4807      	ldr	r0, [pc, #28]	@ (801a52c <ip_frag_free_pbuf_custom_ref+0x34>)
 801a510:	f000 fc50 	bl	801adb4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a514:	6879      	ldr	r1, [r7, #4]
 801a516:	2006      	movs	r0, #6
 801a518:	f7f6 fcce 	bl	8010eb8 <memp_free>
}
 801a51c:	bf00      	nop
 801a51e:	3708      	adds	r7, #8
 801a520:	46bd      	mov	sp, r7
 801a522:	bd80      	pop	{r7, pc}
 801a524:	0801e5c8 	.word	0x0801e5c8
 801a528:	0801e780 	.word	0x0801e780
 801a52c:	0801e610 	.word	0x0801e610

0801a530 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a530:	b580      	push	{r7, lr}
 801a532:	b084      	sub	sp, #16
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d106      	bne.n	801a550 <ipfrag_free_pbuf_custom+0x20>
 801a542:	4b11      	ldr	r3, [pc, #68]	@ (801a588 <ipfrag_free_pbuf_custom+0x58>)
 801a544:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801a548:	4910      	ldr	r1, [pc, #64]	@ (801a58c <ipfrag_free_pbuf_custom+0x5c>)
 801a54a:	4811      	ldr	r0, [pc, #68]	@ (801a590 <ipfrag_free_pbuf_custom+0x60>)
 801a54c:	f000 fc32 	bl	801adb4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a550:	68fa      	ldr	r2, [r7, #12]
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	429a      	cmp	r2, r3
 801a556:	d006      	beq.n	801a566 <ipfrag_free_pbuf_custom+0x36>
 801a558:	4b0b      	ldr	r3, [pc, #44]	@ (801a588 <ipfrag_free_pbuf_custom+0x58>)
 801a55a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801a55e:	490d      	ldr	r1, [pc, #52]	@ (801a594 <ipfrag_free_pbuf_custom+0x64>)
 801a560:	480b      	ldr	r0, [pc, #44]	@ (801a590 <ipfrag_free_pbuf_custom+0x60>)
 801a562:	f000 fc27 	bl	801adb4 <iprintf>
  if (pcr->original != NULL) {
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	695b      	ldr	r3, [r3, #20]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d004      	beq.n	801a578 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	695b      	ldr	r3, [r3, #20]
 801a572:	4618      	mov	r0, r3
 801a574:	f7f7 fb4c 	bl	8011c10 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a578:	68f8      	ldr	r0, [r7, #12]
 801a57a:	f7ff ffbd 	bl	801a4f8 <ip_frag_free_pbuf_custom_ref>
}
 801a57e:	bf00      	nop
 801a580:	3710      	adds	r7, #16
 801a582:	46bd      	mov	sp, r7
 801a584:	bd80      	pop	{r7, pc}
 801a586:	bf00      	nop
 801a588:	0801e5c8 	.word	0x0801e5c8
 801a58c:	0801e78c 	.word	0x0801e78c
 801a590:	0801e610 	.word	0x0801e610
 801a594:	0801e798 	.word	0x0801e798

0801a598 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a598:	b580      	push	{r7, lr}
 801a59a:	b094      	sub	sp, #80	@ 0x50
 801a59c:	af02      	add	r7, sp, #8
 801a59e:	60f8      	str	r0, [r7, #12]
 801a5a0:	60b9      	str	r1, [r7, #8]
 801a5a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a5aa:	68bb      	ldr	r3, [r7, #8]
 801a5ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a5ae:	3b14      	subs	r3, #20
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	da00      	bge.n	801a5b6 <ip4_frag+0x1e>
 801a5b4:	3307      	adds	r3, #7
 801a5b6:	10db      	asrs	r3, r3, #3
 801a5b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a5ba:	2314      	movs	r3, #20
 801a5bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	685b      	ldr	r3, [r3, #4]
 801a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801a5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5ca:	781b      	ldrb	r3, [r3, #0]
 801a5cc:	f003 030f 	and.w	r3, r3, #15
 801a5d0:	b2db      	uxtb	r3, r3
 801a5d2:	009b      	lsls	r3, r3, #2
 801a5d4:	b2db      	uxtb	r3, r3
 801a5d6:	2b14      	cmp	r3, #20
 801a5d8:	d002      	beq.n	801a5e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a5da:	f06f 0305 	mvn.w	r3, #5
 801a5de:	e110      	b.n	801a802 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	895b      	ldrh	r3, [r3, #10]
 801a5e4:	2b13      	cmp	r3, #19
 801a5e6:	d809      	bhi.n	801a5fc <ip4_frag+0x64>
 801a5e8:	4b88      	ldr	r3, [pc, #544]	@ (801a80c <ip4_frag+0x274>)
 801a5ea:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801a5ee:	4988      	ldr	r1, [pc, #544]	@ (801a810 <ip4_frag+0x278>)
 801a5f0:	4888      	ldr	r0, [pc, #544]	@ (801a814 <ip4_frag+0x27c>)
 801a5f2:	f000 fbdf 	bl	801adb4 <iprintf>
 801a5f6:	f06f 0305 	mvn.w	r3, #5
 801a5fa:	e102      	b.n	801a802 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5fe:	88db      	ldrh	r3, [r3, #6]
 801a600:	b29b      	uxth	r3, r3
 801a602:	4618      	mov	r0, r3
 801a604:	f7f5 fe52 	bl	80102ac <lwip_htons>
 801a608:	4603      	mov	r3, r0
 801a60a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801a60c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a60e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a612:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a616:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a61c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	891b      	ldrh	r3, [r3, #8]
 801a622:	3b14      	subs	r3, #20
 801a624:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801a628:	e0e1      	b.n	801a7ee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a62a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a62c:	00db      	lsls	r3, r3, #3
 801a62e:	b29b      	uxth	r3, r3
 801a630:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a634:	4293      	cmp	r3, r2
 801a636:	bf28      	it	cs
 801a638:	4613      	movcs	r3, r2
 801a63a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a63c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a640:	2114      	movs	r1, #20
 801a642:	200e      	movs	r0, #14
 801a644:	f7f6 fffc 	bl	8011640 <pbuf_alloc>
 801a648:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	f000 80d5 	beq.w	801a7fc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a654:	895b      	ldrh	r3, [r3, #10]
 801a656:	2b13      	cmp	r3, #19
 801a658:	d806      	bhi.n	801a668 <ip4_frag+0xd0>
 801a65a:	4b6c      	ldr	r3, [pc, #432]	@ (801a80c <ip4_frag+0x274>)
 801a65c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801a660:	496d      	ldr	r1, [pc, #436]	@ (801a818 <ip4_frag+0x280>)
 801a662:	486c      	ldr	r0, [pc, #432]	@ (801a814 <ip4_frag+0x27c>)
 801a664:	f000 fba6 	bl	801adb4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a66a:	685b      	ldr	r3, [r3, #4]
 801a66c:	2214      	movs	r2, #20
 801a66e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a670:	4618      	mov	r0, r3
 801a672:	f000 fcd8 	bl	801b026 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a678:	685b      	ldr	r3, [r3, #4]
 801a67a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801a67c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a67e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801a682:	e064      	b.n	801a74e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	895a      	ldrh	r2, [r3, #10]
 801a688:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a68a:	1ad3      	subs	r3, r2, r3
 801a68c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	895b      	ldrh	r3, [r3, #10]
 801a692:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a694:	429a      	cmp	r2, r3
 801a696:	d906      	bls.n	801a6a6 <ip4_frag+0x10e>
 801a698:	4b5c      	ldr	r3, [pc, #368]	@ (801a80c <ip4_frag+0x274>)
 801a69a:	f240 322d 	movw	r2, #813	@ 0x32d
 801a69e:	495f      	ldr	r1, [pc, #380]	@ (801a81c <ip4_frag+0x284>)
 801a6a0:	485c      	ldr	r0, [pc, #368]	@ (801a814 <ip4_frag+0x27c>)
 801a6a2:	f000 fb87 	bl	801adb4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a6a6:	8bfa      	ldrh	r2, [r7, #30]
 801a6a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a6ac:	4293      	cmp	r3, r2
 801a6ae:	bf28      	it	cs
 801a6b0:	4613      	movcs	r3, r2
 801a6b2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a6b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d105      	bne.n	801a6ca <ip4_frag+0x132>
        poff = 0;
 801a6be:	2300      	movs	r3, #0
 801a6c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	60fb      	str	r3, [r7, #12]
        continue;
 801a6c8:	e041      	b.n	801a74e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a6ca:	f7ff ff0d 	bl	801a4e8 <ip_frag_alloc_pbuf_custom_ref>
 801a6ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a6d0:	69bb      	ldr	r3, [r7, #24]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d103      	bne.n	801a6de <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a6d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a6d8:	f7f7 fa9a 	bl	8011c10 <pbuf_free>
        goto memerr;
 801a6dc:	e08f      	b.n	801a7fe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a6de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a6e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a6e6:	4413      	add	r3, r2
 801a6e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801a6ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a6f0:	9201      	str	r2, [sp, #4]
 801a6f2:	9300      	str	r3, [sp, #0]
 801a6f4:	4603      	mov	r3, r0
 801a6f6:	2241      	movs	r2, #65	@ 0x41
 801a6f8:	2000      	movs	r0, #0
 801a6fa:	f7f7 f8cf 	bl	801189c <pbuf_alloced_custom>
 801a6fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a700:	697b      	ldr	r3, [r7, #20]
 801a702:	2b00      	cmp	r3, #0
 801a704:	d106      	bne.n	801a714 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a706:	69b8      	ldr	r0, [r7, #24]
 801a708:	f7ff fef6 	bl	801a4f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a70c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a70e:	f7f7 fa7f 	bl	8011c10 <pbuf_free>
        goto memerr;
 801a712:	e074      	b.n	801a7fe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a714:	68f8      	ldr	r0, [r7, #12]
 801a716:	f7f7 fb21 	bl	8011d5c <pbuf_ref>
      pcr->original = p;
 801a71a:	69bb      	ldr	r3, [r7, #24]
 801a71c:	68fa      	ldr	r2, [r7, #12]
 801a71e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a720:	69bb      	ldr	r3, [r7, #24]
 801a722:	4a3f      	ldr	r2, [pc, #252]	@ (801a820 <ip4_frag+0x288>)
 801a724:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a726:	6979      	ldr	r1, [r7, #20]
 801a728:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a72a:	f7f7 fb3f 	bl	8011dac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a72e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801a732:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a736:	1ad3      	subs	r3, r2, r3
 801a738:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801a73c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a740:	2b00      	cmp	r3, #0
 801a742:	d004      	beq.n	801a74e <ip4_frag+0x1b6>
        poff = 0;
 801a744:	2300      	movs	r3, #0
 801a746:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a74e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a752:	2b00      	cmp	r3, #0
 801a754:	d196      	bne.n	801a684 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a756:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a758:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a75c:	4413      	add	r3, r2
 801a75e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a760:	68bb      	ldr	r3, [r7, #8]
 801a762:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a764:	f1a3 0213 	sub.w	r2, r3, #19
 801a768:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a76c:	429a      	cmp	r2, r3
 801a76e:	bfcc      	ite	gt
 801a770:	2301      	movgt	r3, #1
 801a772:	2300      	movle	r3, #0
 801a774:	b2db      	uxtb	r3, r3
 801a776:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a778:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a77c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a780:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801a782:	6a3b      	ldr	r3, [r7, #32]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d002      	beq.n	801a78e <ip4_frag+0x1f6>
 801a788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d003      	beq.n	801a796 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a78e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a790:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801a794:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a796:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a798:	4618      	mov	r0, r3
 801a79a:	f7f5 fd87 	bl	80102ac <lwip_htons>
 801a79e:	4603      	mov	r3, r0
 801a7a0:	461a      	mov	r2, r3
 801a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7a4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a7a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a7a8:	3314      	adds	r3, #20
 801a7aa:	b29b      	uxth	r3, r3
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	f7f5 fd7d 	bl	80102ac <lwip_htons>
 801a7b2:	4603      	mov	r3, r0
 801a7b4:	461a      	mov	r2, r3
 801a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7b8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7bc:	2200      	movs	r2, #0
 801a7be:	729a      	strb	r2, [r3, #10]
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	695b      	ldr	r3, [r3, #20]
 801a7c8:	687a      	ldr	r2, [r7, #4]
 801a7ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a7cc:	68b8      	ldr	r0, [r7, #8]
 801a7ce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a7d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a7d2:	f7f7 fa1d 	bl	8011c10 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a7d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a7da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a7dc:	1ad3      	subs	r3, r2, r3
 801a7de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801a7e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801a7e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a7e8:	4413      	add	r3, r2
 801a7ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801a7ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	f47f af19 	bne.w	801a62a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	e002      	b.n	801a802 <ip4_frag+0x26a>
      goto memerr;
 801a7fc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a7fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a802:	4618      	mov	r0, r3
 801a804:	3748      	adds	r7, #72	@ 0x48
 801a806:	46bd      	mov	sp, r7
 801a808:	bd80      	pop	{r7, pc}
 801a80a:	bf00      	nop
 801a80c:	0801e5c8 	.word	0x0801e5c8
 801a810:	0801e7a4 	.word	0x0801e7a4
 801a814:	0801e610 	.word	0x0801e610
 801a818:	0801e7c0 	.word	0x0801e7c0
 801a81c:	0801e7e0 	.word	0x0801e7e0
 801a820:	0801a531 	.word	0x0801a531

0801a824 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a824:	b580      	push	{r7, lr}
 801a826:	b086      	sub	sp, #24
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
 801a82c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a82e:	230e      	movs	r3, #14
 801a830:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	895b      	ldrh	r3, [r3, #10]
 801a836:	2b0e      	cmp	r3, #14
 801a838:	d96e      	bls.n	801a918 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	7bdb      	ldrb	r3, [r3, #15]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d106      	bne.n	801a850 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a842:	683b      	ldr	r3, [r7, #0]
 801a844:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a848:	3301      	adds	r3, #1
 801a84a:	b2da      	uxtb	r2, r3
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	685b      	ldr	r3, [r3, #4]
 801a854:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a856:	693b      	ldr	r3, [r7, #16]
 801a858:	7b1a      	ldrb	r2, [r3, #12]
 801a85a:	7b5b      	ldrb	r3, [r3, #13]
 801a85c:	021b      	lsls	r3, r3, #8
 801a85e:	4313      	orrs	r3, r2
 801a860:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a862:	693b      	ldr	r3, [r7, #16]
 801a864:	781b      	ldrb	r3, [r3, #0]
 801a866:	f003 0301 	and.w	r3, r3, #1
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d023      	beq.n	801a8b6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a86e:	693b      	ldr	r3, [r7, #16]
 801a870:	781b      	ldrb	r3, [r3, #0]
 801a872:	2b01      	cmp	r3, #1
 801a874:	d10f      	bne.n	801a896 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a876:	693b      	ldr	r3, [r7, #16]
 801a878:	785b      	ldrb	r3, [r3, #1]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d11b      	bne.n	801a8b6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a87e:	693b      	ldr	r3, [r7, #16]
 801a880:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a882:	2b5e      	cmp	r3, #94	@ 0x5e
 801a884:	d117      	bne.n	801a8b6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	7b5b      	ldrb	r3, [r3, #13]
 801a88a:	f043 0310 	orr.w	r3, r3, #16
 801a88e:	b2da      	uxtb	r2, r3
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	735a      	strb	r2, [r3, #13]
 801a894:	e00f      	b.n	801a8b6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a896:	693b      	ldr	r3, [r7, #16]
 801a898:	2206      	movs	r2, #6
 801a89a:	4928      	ldr	r1, [pc, #160]	@ (801a93c <ethernet_input+0x118>)
 801a89c:	4618      	mov	r0, r3
 801a89e:	f000 fade 	bl	801ae5e <memcmp>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d106      	bne.n	801a8b6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	7b5b      	ldrb	r3, [r3, #13]
 801a8ac:	f043 0308 	orr.w	r3, r3, #8
 801a8b0:	b2da      	uxtb	r2, r3
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a8b6:	89fb      	ldrh	r3, [r7, #14]
 801a8b8:	2b08      	cmp	r3, #8
 801a8ba:	d003      	beq.n	801a8c4 <ethernet_input+0xa0>
 801a8bc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801a8c0:	d014      	beq.n	801a8ec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a8c2:	e032      	b.n	801a92a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a8c4:	683b      	ldr	r3, [r7, #0]
 801a8c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a8ca:	f003 0308 	and.w	r3, r3, #8
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d024      	beq.n	801a91c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a8d2:	8afb      	ldrh	r3, [r7, #22]
 801a8d4:	4619      	mov	r1, r3
 801a8d6:	6878      	ldr	r0, [r7, #4]
 801a8d8:	f7f7 f914 	bl	8011b04 <pbuf_remove_header>
 801a8dc:	4603      	mov	r3, r0
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d11e      	bne.n	801a920 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a8e2:	6839      	ldr	r1, [r7, #0]
 801a8e4:	6878      	ldr	r0, [r7, #4]
 801a8e6:	f7fe fe85 	bl	80195f4 <ip4_input>
      break;
 801a8ea:	e013      	b.n	801a914 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a8ec:	683b      	ldr	r3, [r7, #0]
 801a8ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a8f2:	f003 0308 	and.w	r3, r3, #8
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d014      	beq.n	801a924 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a8fa:	8afb      	ldrh	r3, [r7, #22]
 801a8fc:	4619      	mov	r1, r3
 801a8fe:	6878      	ldr	r0, [r7, #4]
 801a900:	f7f7 f900 	bl	8011b04 <pbuf_remove_header>
 801a904:	4603      	mov	r3, r0
 801a906:	2b00      	cmp	r3, #0
 801a908:	d10e      	bne.n	801a928 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a90a:	6839      	ldr	r1, [r7, #0]
 801a90c:	6878      	ldr	r0, [r7, #4]
 801a90e:	f7fd ffff 	bl	8018910 <etharp_input>
      break;
 801a912:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a914:	2300      	movs	r3, #0
 801a916:	e00c      	b.n	801a932 <ethernet_input+0x10e>
    goto free_and_return;
 801a918:	bf00      	nop
 801a91a:	e006      	b.n	801a92a <ethernet_input+0x106>
        goto free_and_return;
 801a91c:	bf00      	nop
 801a91e:	e004      	b.n	801a92a <ethernet_input+0x106>
        goto free_and_return;
 801a920:	bf00      	nop
 801a922:	e002      	b.n	801a92a <ethernet_input+0x106>
        goto free_and_return;
 801a924:	bf00      	nop
 801a926:	e000      	b.n	801a92a <ethernet_input+0x106>
        goto free_and_return;
 801a928:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a92a:	6878      	ldr	r0, [r7, #4]
 801a92c:	f7f7 f970 	bl	8011c10 <pbuf_free>
  return ERR_OK;
 801a930:	2300      	movs	r3, #0
}
 801a932:	4618      	mov	r0, r3
 801a934:	3718      	adds	r7, #24
 801a936:	46bd      	mov	sp, r7
 801a938:	bd80      	pop	{r7, pc}
 801a93a:	bf00      	nop
 801a93c:	0801ea14 	.word	0x0801ea14

0801a940 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a940:	b580      	push	{r7, lr}
 801a942:	b086      	sub	sp, #24
 801a944:	af00      	add	r7, sp, #0
 801a946:	60f8      	str	r0, [r7, #12]
 801a948:	60b9      	str	r1, [r7, #8]
 801a94a:	607a      	str	r2, [r7, #4]
 801a94c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a94e:	8c3b      	ldrh	r3, [r7, #32]
 801a950:	4618      	mov	r0, r3
 801a952:	f7f5 fcab 	bl	80102ac <lwip_htons>
 801a956:	4603      	mov	r3, r0
 801a958:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a95a:	210e      	movs	r1, #14
 801a95c:	68b8      	ldr	r0, [r7, #8]
 801a95e:	f7f7 f8c1 	bl	8011ae4 <pbuf_add_header>
 801a962:	4603      	mov	r3, r0
 801a964:	2b00      	cmp	r3, #0
 801a966:	d125      	bne.n	801a9b4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	685b      	ldr	r3, [r3, #4]
 801a96c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a96e:	693b      	ldr	r3, [r7, #16]
 801a970:	8afa      	ldrh	r2, [r7, #22]
 801a972:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a974:	693b      	ldr	r3, [r7, #16]
 801a976:	2206      	movs	r2, #6
 801a978:	6839      	ldr	r1, [r7, #0]
 801a97a:	4618      	mov	r0, r3
 801a97c:	f000 fb53 	bl	801b026 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a980:	693b      	ldr	r3, [r7, #16]
 801a982:	3306      	adds	r3, #6
 801a984:	2206      	movs	r2, #6
 801a986:	6879      	ldr	r1, [r7, #4]
 801a988:	4618      	mov	r0, r3
 801a98a:	f000 fb4c 	bl	801b026 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a994:	2b06      	cmp	r3, #6
 801a996:	d006      	beq.n	801a9a6 <ethernet_output+0x66>
 801a998:	4b0a      	ldr	r3, [pc, #40]	@ (801a9c4 <ethernet_output+0x84>)
 801a99a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801a99e:	490a      	ldr	r1, [pc, #40]	@ (801a9c8 <ethernet_output+0x88>)
 801a9a0:	480a      	ldr	r0, [pc, #40]	@ (801a9cc <ethernet_output+0x8c>)
 801a9a2:	f000 fa07 	bl	801adb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	699b      	ldr	r3, [r3, #24]
 801a9aa:	68b9      	ldr	r1, [r7, #8]
 801a9ac:	68f8      	ldr	r0, [r7, #12]
 801a9ae:	4798      	blx	r3
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	e002      	b.n	801a9ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a9b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a9b6:	f06f 0301 	mvn.w	r3, #1
}
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	3718      	adds	r7, #24
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	bd80      	pop	{r7, pc}
 801a9c2:	bf00      	nop
 801a9c4:	0801e7f0 	.word	0x0801e7f0
 801a9c8:	0801e828 	.word	0x0801e828
 801a9cc:	0801e85c 	.word	0x0801e85c

0801a9d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	b082      	sub	sp, #8
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	6078      	str	r0, [r7, #4]
 801a9d8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801a9da:	683b      	ldr	r3, [r7, #0]
 801a9dc:	2200      	movs	r2, #0
 801a9de:	2104      	movs	r1, #4
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f7f1 feed 	bl	800c7c0 <osMessageQueueNew>
 801a9e6:	4602      	mov	r2, r0
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d102      	bne.n	801a9fa <sys_mbox_new+0x2a>
    return ERR_MEM;
 801a9f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9f8:	e000      	b.n	801a9fc <sys_mbox_new+0x2c>

  return ERR_OK;
 801a9fa:	2300      	movs	r3, #0
}
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	3708      	adds	r7, #8
 801aa00:	46bd      	mov	sp, r7
 801aa02:	bd80      	pop	{r7, pc}

0801aa04 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b084      	sub	sp, #16
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
 801aa0c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	6818      	ldr	r0, [r3, #0]
 801aa12:	4639      	mov	r1, r7
 801aa14:	2300      	movs	r3, #0
 801aa16:	2200      	movs	r2, #0
 801aa18:	f7f1 ff46 	bl	800c8a8 <osMessageQueuePut>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d102      	bne.n	801aa28 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801aa22:	2300      	movs	r3, #0
 801aa24:	73fb      	strb	r3, [r7, #15]
 801aa26:	e001      	b.n	801aa2c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801aa28:	23ff      	movs	r3, #255	@ 0xff
 801aa2a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801aa2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801aa30:	4618      	mov	r0, r3
 801aa32:	3710      	adds	r7, #16
 801aa34:	46bd      	mov	sp, r7
 801aa36:	bd80      	pop	{r7, pc}

0801aa38 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	b086      	sub	sp, #24
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	60f8      	str	r0, [r7, #12]
 801aa40:	60b9      	str	r1, [r7, #8]
 801aa42:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801aa44:	f7f1 fbcc 	bl	800c1e0 <osKernelGetTickCount>
 801aa48:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d013      	beq.n	801aa78 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	6818      	ldr	r0, [r3, #0]
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	2200      	movs	r2, #0
 801aa58:	68b9      	ldr	r1, [r7, #8]
 801aa5a:	f7f1 ff85 	bl	800c968 <osMessageQueueGet>
 801aa5e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801aa60:	693b      	ldr	r3, [r7, #16]
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d105      	bne.n	801aa72 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801aa66:	f7f1 fbbb 	bl	800c1e0 <osKernelGetTickCount>
 801aa6a:	4602      	mov	r2, r0
 801aa6c:	697b      	ldr	r3, [r7, #20]
 801aa6e:	1ad3      	subs	r3, r2, r3
 801aa70:	e00f      	b.n	801aa92 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801aa72:	f04f 33ff 	mov.w	r3, #4294967295
 801aa76:	e00c      	b.n	801aa92 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	6818      	ldr	r0, [r3, #0]
 801aa7c:	f04f 33ff 	mov.w	r3, #4294967295
 801aa80:	2200      	movs	r2, #0
 801aa82:	68b9      	ldr	r1, [r7, #8]
 801aa84:	f7f1 ff70 	bl	800c968 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801aa88:	f7f1 fbaa 	bl	800c1e0 <osKernelGetTickCount>
 801aa8c:	4602      	mov	r2, r0
 801aa8e:	697b      	ldr	r3, [r7, #20]
 801aa90:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801aa92:	4618      	mov	r0, r3
 801aa94:	3718      	adds	r7, #24
 801aa96:	46bd      	mov	sp, r7
 801aa98:	bd80      	pop	{r7, pc}

0801aa9a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801aa9a:	b480      	push	{r7}
 801aa9c:	b083      	sub	sp, #12
 801aa9e:	af00      	add	r7, sp, #0
 801aaa0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d101      	bne.n	801aaae <sys_mbox_valid+0x14>
    return 0;
 801aaaa:	2300      	movs	r3, #0
 801aaac:	e000      	b.n	801aab0 <sys_mbox_valid+0x16>
  else
    return 1;
 801aaae:	2301      	movs	r3, #1
}
 801aab0:	4618      	mov	r0, r3
 801aab2:	370c      	adds	r7, #12
 801aab4:	46bd      	mov	sp, r7
 801aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaba:	4770      	bx	lr

0801aabc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801aac0:	2000      	movs	r0, #0
 801aac2:	f7f1 fc4f 	bl	800c364 <osMutexNew>
 801aac6:	4603      	mov	r3, r0
 801aac8:	4a01      	ldr	r2, [pc, #4]	@ (801aad0 <sys_init+0x14>)
 801aaca:	6013      	str	r3, [r2, #0]
#endif
}
 801aacc:	bf00      	nop
 801aace:	bd80      	pop	{r7, pc}
 801aad0:	24014d1c 	.word	0x24014d1c

0801aad4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b082      	sub	sp, #8
 801aad8:	af00      	add	r7, sp, #0
 801aada:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801aadc:	2000      	movs	r0, #0
 801aade:	f7f1 fc41 	bl	800c364 <osMutexNew>
 801aae2:	4602      	mov	r2, r0
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d102      	bne.n	801aaf6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801aaf0:	f04f 33ff 	mov.w	r3, #4294967295
 801aaf4:	e000      	b.n	801aaf8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801aaf6:	2300      	movs	r3, #0
}
 801aaf8:	4618      	mov	r0, r3
 801aafa:	3708      	adds	r7, #8
 801aafc:	46bd      	mov	sp, r7
 801aafe:	bd80      	pop	{r7, pc}

0801ab00 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b082      	sub	sp, #8
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	f04f 31ff 	mov.w	r1, #4294967295
 801ab10:	4618      	mov	r0, r3
 801ab12:	f7f1 fcad 	bl	800c470 <osMutexAcquire>
#endif
}
 801ab16:	bf00      	nop
 801ab18:	3708      	adds	r7, #8
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	bd80      	pop	{r7, pc}

0801ab1e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ab1e:	b580      	push	{r7, lr}
 801ab20:	b082      	sub	sp, #8
 801ab22:	af00      	add	r7, sp, #0
 801ab24:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	f7f1 fceb 	bl	800c506 <osMutexRelease>
}
 801ab30:	bf00      	nop
 801ab32:	3708      	adds	r7, #8
 801ab34:	46bd      	mov	sp, r7
 801ab36:	bd80      	pop	{r7, pc}

0801ab38 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b08e      	sub	sp, #56	@ 0x38
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	60f8      	str	r0, [r7, #12]
 801ab40:	60b9      	str	r1, [r7, #8]
 801ab42:	607a      	str	r2, [r7, #4]
 801ab44:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801ab46:	f107 0314 	add.w	r3, r7, #20
 801ab4a:	2224      	movs	r2, #36	@ 0x24
 801ab4c:	2100      	movs	r1, #0
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f000 f995 	bl	801ae7e <memset>
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	617b      	str	r3, [r7, #20]
 801ab58:	683b      	ldr	r3, [r7, #0]
 801ab5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ab5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801ab60:	f107 0314 	add.w	r3, r7, #20
 801ab64:	461a      	mov	r2, r3
 801ab66:	6879      	ldr	r1, [r7, #4]
 801ab68:	68b8      	ldr	r0, [r7, #8]
 801ab6a:	f7f1 fb4e 	bl	800c20a <osThreadNew>
 801ab6e:	4603      	mov	r3, r0
#endif
}
 801ab70:	4618      	mov	r0, r3
 801ab72:	3738      	adds	r7, #56	@ 0x38
 801ab74:	46bd      	mov	sp, r7
 801ab76:	bd80      	pop	{r7, pc}

0801ab78 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801ab7c:	4b04      	ldr	r3, [pc, #16]	@ (801ab90 <sys_arch_protect+0x18>)
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	f04f 31ff 	mov.w	r1, #4294967295
 801ab84:	4618      	mov	r0, r3
 801ab86:	f7f1 fc73 	bl	800c470 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801ab8a:	2301      	movs	r3, #1
}
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	bd80      	pop	{r7, pc}
 801ab90:	24014d1c 	.word	0x24014d1c

0801ab94 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b082      	sub	sp, #8
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ab9c:	4b04      	ldr	r3, [pc, #16]	@ (801abb0 <sys_arch_unprotect+0x1c>)
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	4618      	mov	r0, r3
 801aba2:	f7f1 fcb0 	bl	800c506 <osMutexRelease>
}
 801aba6:	bf00      	nop
 801aba8:	3708      	adds	r7, #8
 801abaa:	46bd      	mov	sp, r7
 801abac:	bd80      	pop	{r7, pc}
 801abae:	bf00      	nop
 801abb0:	24014d1c 	.word	0x24014d1c

0801abb4 <rand>:
 801abb4:	4b16      	ldr	r3, [pc, #88]	@ (801ac10 <rand+0x5c>)
 801abb6:	b510      	push	{r4, lr}
 801abb8:	681c      	ldr	r4, [r3, #0]
 801abba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801abbc:	b9b3      	cbnz	r3, 801abec <rand+0x38>
 801abbe:	2018      	movs	r0, #24
 801abc0:	f000 faa8 	bl	801b114 <malloc>
 801abc4:	4602      	mov	r2, r0
 801abc6:	6320      	str	r0, [r4, #48]	@ 0x30
 801abc8:	b920      	cbnz	r0, 801abd4 <rand+0x20>
 801abca:	4b12      	ldr	r3, [pc, #72]	@ (801ac14 <rand+0x60>)
 801abcc:	4812      	ldr	r0, [pc, #72]	@ (801ac18 <rand+0x64>)
 801abce:	2152      	movs	r1, #82	@ 0x52
 801abd0:	f000 fa38 	bl	801b044 <__assert_func>
 801abd4:	4911      	ldr	r1, [pc, #68]	@ (801ac1c <rand+0x68>)
 801abd6:	4b12      	ldr	r3, [pc, #72]	@ (801ac20 <rand+0x6c>)
 801abd8:	e9c0 1300 	strd	r1, r3, [r0]
 801abdc:	4b11      	ldr	r3, [pc, #68]	@ (801ac24 <rand+0x70>)
 801abde:	6083      	str	r3, [r0, #8]
 801abe0:	230b      	movs	r3, #11
 801abe2:	8183      	strh	r3, [r0, #12]
 801abe4:	2100      	movs	r1, #0
 801abe6:	2001      	movs	r0, #1
 801abe8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801abec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801abee:	480e      	ldr	r0, [pc, #56]	@ (801ac28 <rand+0x74>)
 801abf0:	690b      	ldr	r3, [r1, #16]
 801abf2:	694c      	ldr	r4, [r1, #20]
 801abf4:	4a0d      	ldr	r2, [pc, #52]	@ (801ac2c <rand+0x78>)
 801abf6:	4358      	muls	r0, r3
 801abf8:	fb02 0004 	mla	r0, r2, r4, r0
 801abfc:	fba3 3202 	umull	r3, r2, r3, r2
 801ac00:	3301      	adds	r3, #1
 801ac02:	eb40 0002 	adc.w	r0, r0, r2
 801ac06:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ac0a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ac0e:	bd10      	pop	{r4, pc}
 801ac10:	24004a00 	.word	0x24004a00
 801ac14:	0801ea22 	.word	0x0801ea22
 801ac18:	0801ea39 	.word	0x0801ea39
 801ac1c:	abcd330e 	.word	0xabcd330e
 801ac20:	e66d1234 	.word	0xe66d1234
 801ac24:	0005deec 	.word	0x0005deec
 801ac28:	5851f42d 	.word	0x5851f42d
 801ac2c:	4c957f2d 	.word	0x4c957f2d

0801ac30 <std>:
 801ac30:	2300      	movs	r3, #0
 801ac32:	b510      	push	{r4, lr}
 801ac34:	4604      	mov	r4, r0
 801ac36:	e9c0 3300 	strd	r3, r3, [r0]
 801ac3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ac3e:	6083      	str	r3, [r0, #8]
 801ac40:	8181      	strh	r1, [r0, #12]
 801ac42:	6643      	str	r3, [r0, #100]	@ 0x64
 801ac44:	81c2      	strh	r2, [r0, #14]
 801ac46:	6183      	str	r3, [r0, #24]
 801ac48:	4619      	mov	r1, r3
 801ac4a:	2208      	movs	r2, #8
 801ac4c:	305c      	adds	r0, #92	@ 0x5c
 801ac4e:	f000 f916 	bl	801ae7e <memset>
 801ac52:	4b0d      	ldr	r3, [pc, #52]	@ (801ac88 <std+0x58>)
 801ac54:	6263      	str	r3, [r4, #36]	@ 0x24
 801ac56:	4b0d      	ldr	r3, [pc, #52]	@ (801ac8c <std+0x5c>)
 801ac58:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ac5a:	4b0d      	ldr	r3, [pc, #52]	@ (801ac90 <std+0x60>)
 801ac5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ac5e:	4b0d      	ldr	r3, [pc, #52]	@ (801ac94 <std+0x64>)
 801ac60:	6323      	str	r3, [r4, #48]	@ 0x30
 801ac62:	4b0d      	ldr	r3, [pc, #52]	@ (801ac98 <std+0x68>)
 801ac64:	6224      	str	r4, [r4, #32]
 801ac66:	429c      	cmp	r4, r3
 801ac68:	d006      	beq.n	801ac78 <std+0x48>
 801ac6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ac6e:	4294      	cmp	r4, r2
 801ac70:	d002      	beq.n	801ac78 <std+0x48>
 801ac72:	33d0      	adds	r3, #208	@ 0xd0
 801ac74:	429c      	cmp	r4, r3
 801ac76:	d105      	bne.n	801ac84 <std+0x54>
 801ac78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ac7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac80:	f000 b9ce 	b.w	801b020 <__retarget_lock_init_recursive>
 801ac84:	bd10      	pop	{r4, pc}
 801ac86:	bf00      	nop
 801ac88:	0801add9 	.word	0x0801add9
 801ac8c:	0801adfb 	.word	0x0801adfb
 801ac90:	0801ae33 	.word	0x0801ae33
 801ac94:	0801ae57 	.word	0x0801ae57
 801ac98:	24014d20 	.word	0x24014d20

0801ac9c <stdio_exit_handler>:
 801ac9c:	4a02      	ldr	r2, [pc, #8]	@ (801aca8 <stdio_exit_handler+0xc>)
 801ac9e:	4903      	ldr	r1, [pc, #12]	@ (801acac <stdio_exit_handler+0x10>)
 801aca0:	4803      	ldr	r0, [pc, #12]	@ (801acb0 <stdio_exit_handler+0x14>)
 801aca2:	f000 b869 	b.w	801ad78 <_fwalk_sglue>
 801aca6:	bf00      	nop
 801aca8:	240049f4 	.word	0x240049f4
 801acac:	0801b925 	.word	0x0801b925
 801acb0:	24004a04 	.word	0x24004a04

0801acb4 <cleanup_stdio>:
 801acb4:	6841      	ldr	r1, [r0, #4]
 801acb6:	4b0c      	ldr	r3, [pc, #48]	@ (801ace8 <cleanup_stdio+0x34>)
 801acb8:	4299      	cmp	r1, r3
 801acba:	b510      	push	{r4, lr}
 801acbc:	4604      	mov	r4, r0
 801acbe:	d001      	beq.n	801acc4 <cleanup_stdio+0x10>
 801acc0:	f000 fe30 	bl	801b924 <_fflush_r>
 801acc4:	68a1      	ldr	r1, [r4, #8]
 801acc6:	4b09      	ldr	r3, [pc, #36]	@ (801acec <cleanup_stdio+0x38>)
 801acc8:	4299      	cmp	r1, r3
 801acca:	d002      	beq.n	801acd2 <cleanup_stdio+0x1e>
 801accc:	4620      	mov	r0, r4
 801acce:	f000 fe29 	bl	801b924 <_fflush_r>
 801acd2:	68e1      	ldr	r1, [r4, #12]
 801acd4:	4b06      	ldr	r3, [pc, #24]	@ (801acf0 <cleanup_stdio+0x3c>)
 801acd6:	4299      	cmp	r1, r3
 801acd8:	d004      	beq.n	801ace4 <cleanup_stdio+0x30>
 801acda:	4620      	mov	r0, r4
 801acdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ace0:	f000 be20 	b.w	801b924 <_fflush_r>
 801ace4:	bd10      	pop	{r4, pc}
 801ace6:	bf00      	nop
 801ace8:	24014d20 	.word	0x24014d20
 801acec:	24014d88 	.word	0x24014d88
 801acf0:	24014df0 	.word	0x24014df0

0801acf4 <global_stdio_init.part.0>:
 801acf4:	b510      	push	{r4, lr}
 801acf6:	4b0b      	ldr	r3, [pc, #44]	@ (801ad24 <global_stdio_init.part.0+0x30>)
 801acf8:	4c0b      	ldr	r4, [pc, #44]	@ (801ad28 <global_stdio_init.part.0+0x34>)
 801acfa:	4a0c      	ldr	r2, [pc, #48]	@ (801ad2c <global_stdio_init.part.0+0x38>)
 801acfc:	601a      	str	r2, [r3, #0]
 801acfe:	4620      	mov	r0, r4
 801ad00:	2200      	movs	r2, #0
 801ad02:	2104      	movs	r1, #4
 801ad04:	f7ff ff94 	bl	801ac30 <std>
 801ad08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ad0c:	2201      	movs	r2, #1
 801ad0e:	2109      	movs	r1, #9
 801ad10:	f7ff ff8e 	bl	801ac30 <std>
 801ad14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ad18:	2202      	movs	r2, #2
 801ad1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad1e:	2112      	movs	r1, #18
 801ad20:	f7ff bf86 	b.w	801ac30 <std>
 801ad24:	24014e58 	.word	0x24014e58
 801ad28:	24014d20 	.word	0x24014d20
 801ad2c:	0801ac9d 	.word	0x0801ac9d

0801ad30 <__sfp_lock_acquire>:
 801ad30:	4801      	ldr	r0, [pc, #4]	@ (801ad38 <__sfp_lock_acquire+0x8>)
 801ad32:	f000 b976 	b.w	801b022 <__retarget_lock_acquire_recursive>
 801ad36:	bf00      	nop
 801ad38:	24014e61 	.word	0x24014e61

0801ad3c <__sfp_lock_release>:
 801ad3c:	4801      	ldr	r0, [pc, #4]	@ (801ad44 <__sfp_lock_release+0x8>)
 801ad3e:	f000 b971 	b.w	801b024 <__retarget_lock_release_recursive>
 801ad42:	bf00      	nop
 801ad44:	24014e61 	.word	0x24014e61

0801ad48 <__sinit>:
 801ad48:	b510      	push	{r4, lr}
 801ad4a:	4604      	mov	r4, r0
 801ad4c:	f7ff fff0 	bl	801ad30 <__sfp_lock_acquire>
 801ad50:	6a23      	ldr	r3, [r4, #32]
 801ad52:	b11b      	cbz	r3, 801ad5c <__sinit+0x14>
 801ad54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad58:	f7ff bff0 	b.w	801ad3c <__sfp_lock_release>
 801ad5c:	4b04      	ldr	r3, [pc, #16]	@ (801ad70 <__sinit+0x28>)
 801ad5e:	6223      	str	r3, [r4, #32]
 801ad60:	4b04      	ldr	r3, [pc, #16]	@ (801ad74 <__sinit+0x2c>)
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d1f5      	bne.n	801ad54 <__sinit+0xc>
 801ad68:	f7ff ffc4 	bl	801acf4 <global_stdio_init.part.0>
 801ad6c:	e7f2      	b.n	801ad54 <__sinit+0xc>
 801ad6e:	bf00      	nop
 801ad70:	0801acb5 	.word	0x0801acb5
 801ad74:	24014e58 	.word	0x24014e58

0801ad78 <_fwalk_sglue>:
 801ad78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad7c:	4607      	mov	r7, r0
 801ad7e:	4688      	mov	r8, r1
 801ad80:	4614      	mov	r4, r2
 801ad82:	2600      	movs	r6, #0
 801ad84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ad88:	f1b9 0901 	subs.w	r9, r9, #1
 801ad8c:	d505      	bpl.n	801ad9a <_fwalk_sglue+0x22>
 801ad8e:	6824      	ldr	r4, [r4, #0]
 801ad90:	2c00      	cmp	r4, #0
 801ad92:	d1f7      	bne.n	801ad84 <_fwalk_sglue+0xc>
 801ad94:	4630      	mov	r0, r6
 801ad96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad9a:	89ab      	ldrh	r3, [r5, #12]
 801ad9c:	2b01      	cmp	r3, #1
 801ad9e:	d907      	bls.n	801adb0 <_fwalk_sglue+0x38>
 801ada0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ada4:	3301      	adds	r3, #1
 801ada6:	d003      	beq.n	801adb0 <_fwalk_sglue+0x38>
 801ada8:	4629      	mov	r1, r5
 801adaa:	4638      	mov	r0, r7
 801adac:	47c0      	blx	r8
 801adae:	4306      	orrs	r6, r0
 801adb0:	3568      	adds	r5, #104	@ 0x68
 801adb2:	e7e9      	b.n	801ad88 <_fwalk_sglue+0x10>

0801adb4 <iprintf>:
 801adb4:	b40f      	push	{r0, r1, r2, r3}
 801adb6:	b507      	push	{r0, r1, r2, lr}
 801adb8:	4906      	ldr	r1, [pc, #24]	@ (801add4 <iprintf+0x20>)
 801adba:	ab04      	add	r3, sp, #16
 801adbc:	6808      	ldr	r0, [r1, #0]
 801adbe:	f853 2b04 	ldr.w	r2, [r3], #4
 801adc2:	6881      	ldr	r1, [r0, #8]
 801adc4:	9301      	str	r3, [sp, #4]
 801adc6:	f000 fa85 	bl	801b2d4 <_vfiprintf_r>
 801adca:	b003      	add	sp, #12
 801adcc:	f85d eb04 	ldr.w	lr, [sp], #4
 801add0:	b004      	add	sp, #16
 801add2:	4770      	bx	lr
 801add4:	24004a00 	.word	0x24004a00

0801add8 <__sread>:
 801add8:	b510      	push	{r4, lr}
 801adda:	460c      	mov	r4, r1
 801addc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ade0:	f000 f8d6 	bl	801af90 <_read_r>
 801ade4:	2800      	cmp	r0, #0
 801ade6:	bfab      	itete	ge
 801ade8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801adea:	89a3      	ldrhlt	r3, [r4, #12]
 801adec:	181b      	addge	r3, r3, r0
 801adee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801adf2:	bfac      	ite	ge
 801adf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801adf6:	81a3      	strhlt	r3, [r4, #12]
 801adf8:	bd10      	pop	{r4, pc}

0801adfa <__swrite>:
 801adfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adfe:	461f      	mov	r7, r3
 801ae00:	898b      	ldrh	r3, [r1, #12]
 801ae02:	05db      	lsls	r3, r3, #23
 801ae04:	4605      	mov	r5, r0
 801ae06:	460c      	mov	r4, r1
 801ae08:	4616      	mov	r6, r2
 801ae0a:	d505      	bpl.n	801ae18 <__swrite+0x1e>
 801ae0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae10:	2302      	movs	r3, #2
 801ae12:	2200      	movs	r2, #0
 801ae14:	f000 f8aa 	bl	801af6c <_lseek_r>
 801ae18:	89a3      	ldrh	r3, [r4, #12]
 801ae1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ae22:	81a3      	strh	r3, [r4, #12]
 801ae24:	4632      	mov	r2, r6
 801ae26:	463b      	mov	r3, r7
 801ae28:	4628      	mov	r0, r5
 801ae2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae2e:	f000 b8c1 	b.w	801afb4 <_write_r>

0801ae32 <__sseek>:
 801ae32:	b510      	push	{r4, lr}
 801ae34:	460c      	mov	r4, r1
 801ae36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae3a:	f000 f897 	bl	801af6c <_lseek_r>
 801ae3e:	1c43      	adds	r3, r0, #1
 801ae40:	89a3      	ldrh	r3, [r4, #12]
 801ae42:	bf15      	itete	ne
 801ae44:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ae46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ae4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ae4e:	81a3      	strheq	r3, [r4, #12]
 801ae50:	bf18      	it	ne
 801ae52:	81a3      	strhne	r3, [r4, #12]
 801ae54:	bd10      	pop	{r4, pc}

0801ae56 <__sclose>:
 801ae56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae5a:	f000 b819 	b.w	801ae90 <_close_r>

0801ae5e <memcmp>:
 801ae5e:	b510      	push	{r4, lr}
 801ae60:	3901      	subs	r1, #1
 801ae62:	4402      	add	r2, r0
 801ae64:	4290      	cmp	r0, r2
 801ae66:	d101      	bne.n	801ae6c <memcmp+0xe>
 801ae68:	2000      	movs	r0, #0
 801ae6a:	e005      	b.n	801ae78 <memcmp+0x1a>
 801ae6c:	7803      	ldrb	r3, [r0, #0]
 801ae6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ae72:	42a3      	cmp	r3, r4
 801ae74:	d001      	beq.n	801ae7a <memcmp+0x1c>
 801ae76:	1b18      	subs	r0, r3, r4
 801ae78:	bd10      	pop	{r4, pc}
 801ae7a:	3001      	adds	r0, #1
 801ae7c:	e7f2      	b.n	801ae64 <memcmp+0x6>

0801ae7e <memset>:
 801ae7e:	4402      	add	r2, r0
 801ae80:	4603      	mov	r3, r0
 801ae82:	4293      	cmp	r3, r2
 801ae84:	d100      	bne.n	801ae88 <memset+0xa>
 801ae86:	4770      	bx	lr
 801ae88:	f803 1b01 	strb.w	r1, [r3], #1
 801ae8c:	e7f9      	b.n	801ae82 <memset+0x4>
	...

0801ae90 <_close_r>:
 801ae90:	b538      	push	{r3, r4, r5, lr}
 801ae92:	4d06      	ldr	r5, [pc, #24]	@ (801aeac <_close_r+0x1c>)
 801ae94:	2300      	movs	r3, #0
 801ae96:	4604      	mov	r4, r0
 801ae98:	4608      	mov	r0, r1
 801ae9a:	602b      	str	r3, [r5, #0]
 801ae9c:	f7e6 fe22 	bl	8001ae4 <_close>
 801aea0:	1c43      	adds	r3, r0, #1
 801aea2:	d102      	bne.n	801aeaa <_close_r+0x1a>
 801aea4:	682b      	ldr	r3, [r5, #0]
 801aea6:	b103      	cbz	r3, 801aeaa <_close_r+0x1a>
 801aea8:	6023      	str	r3, [r4, #0]
 801aeaa:	bd38      	pop	{r3, r4, r5, pc}
 801aeac:	24014e5c 	.word	0x24014e5c

0801aeb0 <_reclaim_reent>:
 801aeb0:	4b2d      	ldr	r3, [pc, #180]	@ (801af68 <_reclaim_reent+0xb8>)
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	4283      	cmp	r3, r0
 801aeb6:	b570      	push	{r4, r5, r6, lr}
 801aeb8:	4604      	mov	r4, r0
 801aeba:	d053      	beq.n	801af64 <_reclaim_reent+0xb4>
 801aebc:	69c3      	ldr	r3, [r0, #28]
 801aebe:	b31b      	cbz	r3, 801af08 <_reclaim_reent+0x58>
 801aec0:	68db      	ldr	r3, [r3, #12]
 801aec2:	b163      	cbz	r3, 801aede <_reclaim_reent+0x2e>
 801aec4:	2500      	movs	r5, #0
 801aec6:	69e3      	ldr	r3, [r4, #28]
 801aec8:	68db      	ldr	r3, [r3, #12]
 801aeca:	5959      	ldr	r1, [r3, r5]
 801aecc:	b9b1      	cbnz	r1, 801aefc <_reclaim_reent+0x4c>
 801aece:	3504      	adds	r5, #4
 801aed0:	2d80      	cmp	r5, #128	@ 0x80
 801aed2:	d1f8      	bne.n	801aec6 <_reclaim_reent+0x16>
 801aed4:	69e3      	ldr	r3, [r4, #28]
 801aed6:	4620      	mov	r0, r4
 801aed8:	68d9      	ldr	r1, [r3, #12]
 801aeda:	f000 f8d1 	bl	801b080 <_free_r>
 801aede:	69e3      	ldr	r3, [r4, #28]
 801aee0:	6819      	ldr	r1, [r3, #0]
 801aee2:	b111      	cbz	r1, 801aeea <_reclaim_reent+0x3a>
 801aee4:	4620      	mov	r0, r4
 801aee6:	f000 f8cb 	bl	801b080 <_free_r>
 801aeea:	69e3      	ldr	r3, [r4, #28]
 801aeec:	689d      	ldr	r5, [r3, #8]
 801aeee:	b15d      	cbz	r5, 801af08 <_reclaim_reent+0x58>
 801aef0:	4629      	mov	r1, r5
 801aef2:	4620      	mov	r0, r4
 801aef4:	682d      	ldr	r5, [r5, #0]
 801aef6:	f000 f8c3 	bl	801b080 <_free_r>
 801aefa:	e7f8      	b.n	801aeee <_reclaim_reent+0x3e>
 801aefc:	680e      	ldr	r6, [r1, #0]
 801aefe:	4620      	mov	r0, r4
 801af00:	f000 f8be 	bl	801b080 <_free_r>
 801af04:	4631      	mov	r1, r6
 801af06:	e7e1      	b.n	801aecc <_reclaim_reent+0x1c>
 801af08:	6961      	ldr	r1, [r4, #20]
 801af0a:	b111      	cbz	r1, 801af12 <_reclaim_reent+0x62>
 801af0c:	4620      	mov	r0, r4
 801af0e:	f000 f8b7 	bl	801b080 <_free_r>
 801af12:	69e1      	ldr	r1, [r4, #28]
 801af14:	b111      	cbz	r1, 801af1c <_reclaim_reent+0x6c>
 801af16:	4620      	mov	r0, r4
 801af18:	f000 f8b2 	bl	801b080 <_free_r>
 801af1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801af1e:	b111      	cbz	r1, 801af26 <_reclaim_reent+0x76>
 801af20:	4620      	mov	r0, r4
 801af22:	f000 f8ad 	bl	801b080 <_free_r>
 801af26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801af28:	b111      	cbz	r1, 801af30 <_reclaim_reent+0x80>
 801af2a:	4620      	mov	r0, r4
 801af2c:	f000 f8a8 	bl	801b080 <_free_r>
 801af30:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801af32:	b111      	cbz	r1, 801af3a <_reclaim_reent+0x8a>
 801af34:	4620      	mov	r0, r4
 801af36:	f000 f8a3 	bl	801b080 <_free_r>
 801af3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801af3c:	b111      	cbz	r1, 801af44 <_reclaim_reent+0x94>
 801af3e:	4620      	mov	r0, r4
 801af40:	f000 f89e 	bl	801b080 <_free_r>
 801af44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801af46:	b111      	cbz	r1, 801af4e <_reclaim_reent+0x9e>
 801af48:	4620      	mov	r0, r4
 801af4a:	f000 f899 	bl	801b080 <_free_r>
 801af4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801af50:	b111      	cbz	r1, 801af58 <_reclaim_reent+0xa8>
 801af52:	4620      	mov	r0, r4
 801af54:	f000 f894 	bl	801b080 <_free_r>
 801af58:	6a23      	ldr	r3, [r4, #32]
 801af5a:	b11b      	cbz	r3, 801af64 <_reclaim_reent+0xb4>
 801af5c:	4620      	mov	r0, r4
 801af5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af62:	4718      	bx	r3
 801af64:	bd70      	pop	{r4, r5, r6, pc}
 801af66:	bf00      	nop
 801af68:	24004a00 	.word	0x24004a00

0801af6c <_lseek_r>:
 801af6c:	b538      	push	{r3, r4, r5, lr}
 801af6e:	4d07      	ldr	r5, [pc, #28]	@ (801af8c <_lseek_r+0x20>)
 801af70:	4604      	mov	r4, r0
 801af72:	4608      	mov	r0, r1
 801af74:	4611      	mov	r1, r2
 801af76:	2200      	movs	r2, #0
 801af78:	602a      	str	r2, [r5, #0]
 801af7a:	461a      	mov	r2, r3
 801af7c:	f7e6 fdd9 	bl	8001b32 <_lseek>
 801af80:	1c43      	adds	r3, r0, #1
 801af82:	d102      	bne.n	801af8a <_lseek_r+0x1e>
 801af84:	682b      	ldr	r3, [r5, #0]
 801af86:	b103      	cbz	r3, 801af8a <_lseek_r+0x1e>
 801af88:	6023      	str	r3, [r4, #0]
 801af8a:	bd38      	pop	{r3, r4, r5, pc}
 801af8c:	24014e5c 	.word	0x24014e5c

0801af90 <_read_r>:
 801af90:	b538      	push	{r3, r4, r5, lr}
 801af92:	4d07      	ldr	r5, [pc, #28]	@ (801afb0 <_read_r+0x20>)
 801af94:	4604      	mov	r4, r0
 801af96:	4608      	mov	r0, r1
 801af98:	4611      	mov	r1, r2
 801af9a:	2200      	movs	r2, #0
 801af9c:	602a      	str	r2, [r5, #0]
 801af9e:	461a      	mov	r2, r3
 801afa0:	f7e6 fd67 	bl	8001a72 <_read>
 801afa4:	1c43      	adds	r3, r0, #1
 801afa6:	d102      	bne.n	801afae <_read_r+0x1e>
 801afa8:	682b      	ldr	r3, [r5, #0]
 801afaa:	b103      	cbz	r3, 801afae <_read_r+0x1e>
 801afac:	6023      	str	r3, [r4, #0]
 801afae:	bd38      	pop	{r3, r4, r5, pc}
 801afb0:	24014e5c 	.word	0x24014e5c

0801afb4 <_write_r>:
 801afb4:	b538      	push	{r3, r4, r5, lr}
 801afb6:	4d07      	ldr	r5, [pc, #28]	@ (801afd4 <_write_r+0x20>)
 801afb8:	4604      	mov	r4, r0
 801afba:	4608      	mov	r0, r1
 801afbc:	4611      	mov	r1, r2
 801afbe:	2200      	movs	r2, #0
 801afc0:	602a      	str	r2, [r5, #0]
 801afc2:	461a      	mov	r2, r3
 801afc4:	f7e6 fd72 	bl	8001aac <_write>
 801afc8:	1c43      	adds	r3, r0, #1
 801afca:	d102      	bne.n	801afd2 <_write_r+0x1e>
 801afcc:	682b      	ldr	r3, [r5, #0]
 801afce:	b103      	cbz	r3, 801afd2 <_write_r+0x1e>
 801afd0:	6023      	str	r3, [r4, #0]
 801afd2:	bd38      	pop	{r3, r4, r5, pc}
 801afd4:	24014e5c 	.word	0x24014e5c

0801afd8 <__libc_init_array>:
 801afd8:	b570      	push	{r4, r5, r6, lr}
 801afda:	4d0d      	ldr	r5, [pc, #52]	@ (801b010 <__libc_init_array+0x38>)
 801afdc:	4c0d      	ldr	r4, [pc, #52]	@ (801b014 <__libc_init_array+0x3c>)
 801afde:	1b64      	subs	r4, r4, r5
 801afe0:	10a4      	asrs	r4, r4, #2
 801afe2:	2600      	movs	r6, #0
 801afe4:	42a6      	cmp	r6, r4
 801afe6:	d109      	bne.n	801affc <__libc_init_array+0x24>
 801afe8:	4d0b      	ldr	r5, [pc, #44]	@ (801b018 <__libc_init_array+0x40>)
 801afea:	4c0c      	ldr	r4, [pc, #48]	@ (801b01c <__libc_init_array+0x44>)
 801afec:	f000 fe48 	bl	801bc80 <_init>
 801aff0:	1b64      	subs	r4, r4, r5
 801aff2:	10a4      	asrs	r4, r4, #2
 801aff4:	2600      	movs	r6, #0
 801aff6:	42a6      	cmp	r6, r4
 801aff8:	d105      	bne.n	801b006 <__libc_init_array+0x2e>
 801affa:	bd70      	pop	{r4, r5, r6, pc}
 801affc:	f855 3b04 	ldr.w	r3, [r5], #4
 801b000:	4798      	blx	r3
 801b002:	3601      	adds	r6, #1
 801b004:	e7ee      	b.n	801afe4 <__libc_init_array+0xc>
 801b006:	f855 3b04 	ldr.w	r3, [r5], #4
 801b00a:	4798      	blx	r3
 801b00c:	3601      	adds	r6, #1
 801b00e:	e7f2      	b.n	801aff6 <__libc_init_array+0x1e>
 801b010:	0801eb08 	.word	0x0801eb08
 801b014:	0801eb08 	.word	0x0801eb08
 801b018:	0801eb08 	.word	0x0801eb08
 801b01c:	0801eb0c 	.word	0x0801eb0c

0801b020 <__retarget_lock_init_recursive>:
 801b020:	4770      	bx	lr

0801b022 <__retarget_lock_acquire_recursive>:
 801b022:	4770      	bx	lr

0801b024 <__retarget_lock_release_recursive>:
 801b024:	4770      	bx	lr

0801b026 <memcpy>:
 801b026:	440a      	add	r2, r1
 801b028:	4291      	cmp	r1, r2
 801b02a:	f100 33ff 	add.w	r3, r0, #4294967295
 801b02e:	d100      	bne.n	801b032 <memcpy+0xc>
 801b030:	4770      	bx	lr
 801b032:	b510      	push	{r4, lr}
 801b034:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b038:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b03c:	4291      	cmp	r1, r2
 801b03e:	d1f9      	bne.n	801b034 <memcpy+0xe>
 801b040:	bd10      	pop	{r4, pc}
	...

0801b044 <__assert_func>:
 801b044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b046:	4614      	mov	r4, r2
 801b048:	461a      	mov	r2, r3
 801b04a:	4b09      	ldr	r3, [pc, #36]	@ (801b070 <__assert_func+0x2c>)
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	4605      	mov	r5, r0
 801b050:	68d8      	ldr	r0, [r3, #12]
 801b052:	b14c      	cbz	r4, 801b068 <__assert_func+0x24>
 801b054:	4b07      	ldr	r3, [pc, #28]	@ (801b074 <__assert_func+0x30>)
 801b056:	9100      	str	r1, [sp, #0]
 801b058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b05c:	4906      	ldr	r1, [pc, #24]	@ (801b078 <__assert_func+0x34>)
 801b05e:	462b      	mov	r3, r5
 801b060:	f000 fc88 	bl	801b974 <fiprintf>
 801b064:	f000 fd3c 	bl	801bae0 <abort>
 801b068:	4b04      	ldr	r3, [pc, #16]	@ (801b07c <__assert_func+0x38>)
 801b06a:	461c      	mov	r4, r3
 801b06c:	e7f3      	b.n	801b056 <__assert_func+0x12>
 801b06e:	bf00      	nop
 801b070:	24004a00 	.word	0x24004a00
 801b074:	0801ea91 	.word	0x0801ea91
 801b078:	0801ea9e 	.word	0x0801ea9e
 801b07c:	0801eacc 	.word	0x0801eacc

0801b080 <_free_r>:
 801b080:	b538      	push	{r3, r4, r5, lr}
 801b082:	4605      	mov	r5, r0
 801b084:	2900      	cmp	r1, #0
 801b086:	d041      	beq.n	801b10c <_free_r+0x8c>
 801b088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b08c:	1f0c      	subs	r4, r1, #4
 801b08e:	2b00      	cmp	r3, #0
 801b090:	bfb8      	it	lt
 801b092:	18e4      	addlt	r4, r4, r3
 801b094:	f000 f8e8 	bl	801b268 <__malloc_lock>
 801b098:	4a1d      	ldr	r2, [pc, #116]	@ (801b110 <_free_r+0x90>)
 801b09a:	6813      	ldr	r3, [r2, #0]
 801b09c:	b933      	cbnz	r3, 801b0ac <_free_r+0x2c>
 801b09e:	6063      	str	r3, [r4, #4]
 801b0a0:	6014      	str	r4, [r2, #0]
 801b0a2:	4628      	mov	r0, r5
 801b0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b0a8:	f000 b8e4 	b.w	801b274 <__malloc_unlock>
 801b0ac:	42a3      	cmp	r3, r4
 801b0ae:	d908      	bls.n	801b0c2 <_free_r+0x42>
 801b0b0:	6820      	ldr	r0, [r4, #0]
 801b0b2:	1821      	adds	r1, r4, r0
 801b0b4:	428b      	cmp	r3, r1
 801b0b6:	bf01      	itttt	eq
 801b0b8:	6819      	ldreq	r1, [r3, #0]
 801b0ba:	685b      	ldreq	r3, [r3, #4]
 801b0bc:	1809      	addeq	r1, r1, r0
 801b0be:	6021      	streq	r1, [r4, #0]
 801b0c0:	e7ed      	b.n	801b09e <_free_r+0x1e>
 801b0c2:	461a      	mov	r2, r3
 801b0c4:	685b      	ldr	r3, [r3, #4]
 801b0c6:	b10b      	cbz	r3, 801b0cc <_free_r+0x4c>
 801b0c8:	42a3      	cmp	r3, r4
 801b0ca:	d9fa      	bls.n	801b0c2 <_free_r+0x42>
 801b0cc:	6811      	ldr	r1, [r2, #0]
 801b0ce:	1850      	adds	r0, r2, r1
 801b0d0:	42a0      	cmp	r0, r4
 801b0d2:	d10b      	bne.n	801b0ec <_free_r+0x6c>
 801b0d4:	6820      	ldr	r0, [r4, #0]
 801b0d6:	4401      	add	r1, r0
 801b0d8:	1850      	adds	r0, r2, r1
 801b0da:	4283      	cmp	r3, r0
 801b0dc:	6011      	str	r1, [r2, #0]
 801b0de:	d1e0      	bne.n	801b0a2 <_free_r+0x22>
 801b0e0:	6818      	ldr	r0, [r3, #0]
 801b0e2:	685b      	ldr	r3, [r3, #4]
 801b0e4:	6053      	str	r3, [r2, #4]
 801b0e6:	4408      	add	r0, r1
 801b0e8:	6010      	str	r0, [r2, #0]
 801b0ea:	e7da      	b.n	801b0a2 <_free_r+0x22>
 801b0ec:	d902      	bls.n	801b0f4 <_free_r+0x74>
 801b0ee:	230c      	movs	r3, #12
 801b0f0:	602b      	str	r3, [r5, #0]
 801b0f2:	e7d6      	b.n	801b0a2 <_free_r+0x22>
 801b0f4:	6820      	ldr	r0, [r4, #0]
 801b0f6:	1821      	adds	r1, r4, r0
 801b0f8:	428b      	cmp	r3, r1
 801b0fa:	bf04      	itt	eq
 801b0fc:	6819      	ldreq	r1, [r3, #0]
 801b0fe:	685b      	ldreq	r3, [r3, #4]
 801b100:	6063      	str	r3, [r4, #4]
 801b102:	bf04      	itt	eq
 801b104:	1809      	addeq	r1, r1, r0
 801b106:	6021      	streq	r1, [r4, #0]
 801b108:	6054      	str	r4, [r2, #4]
 801b10a:	e7ca      	b.n	801b0a2 <_free_r+0x22>
 801b10c:	bd38      	pop	{r3, r4, r5, pc}
 801b10e:	bf00      	nop
 801b110:	24014e68 	.word	0x24014e68

0801b114 <malloc>:
 801b114:	4b02      	ldr	r3, [pc, #8]	@ (801b120 <malloc+0xc>)
 801b116:	4601      	mov	r1, r0
 801b118:	6818      	ldr	r0, [r3, #0]
 801b11a:	f000 b825 	b.w	801b168 <_malloc_r>
 801b11e:	bf00      	nop
 801b120:	24004a00 	.word	0x24004a00

0801b124 <sbrk_aligned>:
 801b124:	b570      	push	{r4, r5, r6, lr}
 801b126:	4e0f      	ldr	r6, [pc, #60]	@ (801b164 <sbrk_aligned+0x40>)
 801b128:	460c      	mov	r4, r1
 801b12a:	6831      	ldr	r1, [r6, #0]
 801b12c:	4605      	mov	r5, r0
 801b12e:	b911      	cbnz	r1, 801b136 <sbrk_aligned+0x12>
 801b130:	f000 fcc6 	bl	801bac0 <_sbrk_r>
 801b134:	6030      	str	r0, [r6, #0]
 801b136:	4621      	mov	r1, r4
 801b138:	4628      	mov	r0, r5
 801b13a:	f000 fcc1 	bl	801bac0 <_sbrk_r>
 801b13e:	1c43      	adds	r3, r0, #1
 801b140:	d103      	bne.n	801b14a <sbrk_aligned+0x26>
 801b142:	f04f 34ff 	mov.w	r4, #4294967295
 801b146:	4620      	mov	r0, r4
 801b148:	bd70      	pop	{r4, r5, r6, pc}
 801b14a:	1cc4      	adds	r4, r0, #3
 801b14c:	f024 0403 	bic.w	r4, r4, #3
 801b150:	42a0      	cmp	r0, r4
 801b152:	d0f8      	beq.n	801b146 <sbrk_aligned+0x22>
 801b154:	1a21      	subs	r1, r4, r0
 801b156:	4628      	mov	r0, r5
 801b158:	f000 fcb2 	bl	801bac0 <_sbrk_r>
 801b15c:	3001      	adds	r0, #1
 801b15e:	d1f2      	bne.n	801b146 <sbrk_aligned+0x22>
 801b160:	e7ef      	b.n	801b142 <sbrk_aligned+0x1e>
 801b162:	bf00      	nop
 801b164:	24014e64 	.word	0x24014e64

0801b168 <_malloc_r>:
 801b168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b16c:	1ccd      	adds	r5, r1, #3
 801b16e:	f025 0503 	bic.w	r5, r5, #3
 801b172:	3508      	adds	r5, #8
 801b174:	2d0c      	cmp	r5, #12
 801b176:	bf38      	it	cc
 801b178:	250c      	movcc	r5, #12
 801b17a:	2d00      	cmp	r5, #0
 801b17c:	4606      	mov	r6, r0
 801b17e:	db01      	blt.n	801b184 <_malloc_r+0x1c>
 801b180:	42a9      	cmp	r1, r5
 801b182:	d904      	bls.n	801b18e <_malloc_r+0x26>
 801b184:	230c      	movs	r3, #12
 801b186:	6033      	str	r3, [r6, #0]
 801b188:	2000      	movs	r0, #0
 801b18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b18e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b264 <_malloc_r+0xfc>
 801b192:	f000 f869 	bl	801b268 <__malloc_lock>
 801b196:	f8d8 3000 	ldr.w	r3, [r8]
 801b19a:	461c      	mov	r4, r3
 801b19c:	bb44      	cbnz	r4, 801b1f0 <_malloc_r+0x88>
 801b19e:	4629      	mov	r1, r5
 801b1a0:	4630      	mov	r0, r6
 801b1a2:	f7ff ffbf 	bl	801b124 <sbrk_aligned>
 801b1a6:	1c43      	adds	r3, r0, #1
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	d158      	bne.n	801b25e <_malloc_r+0xf6>
 801b1ac:	f8d8 4000 	ldr.w	r4, [r8]
 801b1b0:	4627      	mov	r7, r4
 801b1b2:	2f00      	cmp	r7, #0
 801b1b4:	d143      	bne.n	801b23e <_malloc_r+0xd6>
 801b1b6:	2c00      	cmp	r4, #0
 801b1b8:	d04b      	beq.n	801b252 <_malloc_r+0xea>
 801b1ba:	6823      	ldr	r3, [r4, #0]
 801b1bc:	4639      	mov	r1, r7
 801b1be:	4630      	mov	r0, r6
 801b1c0:	eb04 0903 	add.w	r9, r4, r3
 801b1c4:	f000 fc7c 	bl	801bac0 <_sbrk_r>
 801b1c8:	4581      	cmp	r9, r0
 801b1ca:	d142      	bne.n	801b252 <_malloc_r+0xea>
 801b1cc:	6821      	ldr	r1, [r4, #0]
 801b1ce:	1a6d      	subs	r5, r5, r1
 801b1d0:	4629      	mov	r1, r5
 801b1d2:	4630      	mov	r0, r6
 801b1d4:	f7ff ffa6 	bl	801b124 <sbrk_aligned>
 801b1d8:	3001      	adds	r0, #1
 801b1da:	d03a      	beq.n	801b252 <_malloc_r+0xea>
 801b1dc:	6823      	ldr	r3, [r4, #0]
 801b1de:	442b      	add	r3, r5
 801b1e0:	6023      	str	r3, [r4, #0]
 801b1e2:	f8d8 3000 	ldr.w	r3, [r8]
 801b1e6:	685a      	ldr	r2, [r3, #4]
 801b1e8:	bb62      	cbnz	r2, 801b244 <_malloc_r+0xdc>
 801b1ea:	f8c8 7000 	str.w	r7, [r8]
 801b1ee:	e00f      	b.n	801b210 <_malloc_r+0xa8>
 801b1f0:	6822      	ldr	r2, [r4, #0]
 801b1f2:	1b52      	subs	r2, r2, r5
 801b1f4:	d420      	bmi.n	801b238 <_malloc_r+0xd0>
 801b1f6:	2a0b      	cmp	r2, #11
 801b1f8:	d917      	bls.n	801b22a <_malloc_r+0xc2>
 801b1fa:	1961      	adds	r1, r4, r5
 801b1fc:	42a3      	cmp	r3, r4
 801b1fe:	6025      	str	r5, [r4, #0]
 801b200:	bf18      	it	ne
 801b202:	6059      	strne	r1, [r3, #4]
 801b204:	6863      	ldr	r3, [r4, #4]
 801b206:	bf08      	it	eq
 801b208:	f8c8 1000 	streq.w	r1, [r8]
 801b20c:	5162      	str	r2, [r4, r5]
 801b20e:	604b      	str	r3, [r1, #4]
 801b210:	4630      	mov	r0, r6
 801b212:	f000 f82f 	bl	801b274 <__malloc_unlock>
 801b216:	f104 000b 	add.w	r0, r4, #11
 801b21a:	1d23      	adds	r3, r4, #4
 801b21c:	f020 0007 	bic.w	r0, r0, #7
 801b220:	1ac2      	subs	r2, r0, r3
 801b222:	bf1c      	itt	ne
 801b224:	1a1b      	subne	r3, r3, r0
 801b226:	50a3      	strne	r3, [r4, r2]
 801b228:	e7af      	b.n	801b18a <_malloc_r+0x22>
 801b22a:	6862      	ldr	r2, [r4, #4]
 801b22c:	42a3      	cmp	r3, r4
 801b22e:	bf0c      	ite	eq
 801b230:	f8c8 2000 	streq.w	r2, [r8]
 801b234:	605a      	strne	r2, [r3, #4]
 801b236:	e7eb      	b.n	801b210 <_malloc_r+0xa8>
 801b238:	4623      	mov	r3, r4
 801b23a:	6864      	ldr	r4, [r4, #4]
 801b23c:	e7ae      	b.n	801b19c <_malloc_r+0x34>
 801b23e:	463c      	mov	r4, r7
 801b240:	687f      	ldr	r7, [r7, #4]
 801b242:	e7b6      	b.n	801b1b2 <_malloc_r+0x4a>
 801b244:	461a      	mov	r2, r3
 801b246:	685b      	ldr	r3, [r3, #4]
 801b248:	42a3      	cmp	r3, r4
 801b24a:	d1fb      	bne.n	801b244 <_malloc_r+0xdc>
 801b24c:	2300      	movs	r3, #0
 801b24e:	6053      	str	r3, [r2, #4]
 801b250:	e7de      	b.n	801b210 <_malloc_r+0xa8>
 801b252:	230c      	movs	r3, #12
 801b254:	6033      	str	r3, [r6, #0]
 801b256:	4630      	mov	r0, r6
 801b258:	f000 f80c 	bl	801b274 <__malloc_unlock>
 801b25c:	e794      	b.n	801b188 <_malloc_r+0x20>
 801b25e:	6005      	str	r5, [r0, #0]
 801b260:	e7d6      	b.n	801b210 <_malloc_r+0xa8>
 801b262:	bf00      	nop
 801b264:	24014e68 	.word	0x24014e68

0801b268 <__malloc_lock>:
 801b268:	4801      	ldr	r0, [pc, #4]	@ (801b270 <__malloc_lock+0x8>)
 801b26a:	f7ff beda 	b.w	801b022 <__retarget_lock_acquire_recursive>
 801b26e:	bf00      	nop
 801b270:	24014e60 	.word	0x24014e60

0801b274 <__malloc_unlock>:
 801b274:	4801      	ldr	r0, [pc, #4]	@ (801b27c <__malloc_unlock+0x8>)
 801b276:	f7ff bed5 	b.w	801b024 <__retarget_lock_release_recursive>
 801b27a:	bf00      	nop
 801b27c:	24014e60 	.word	0x24014e60

0801b280 <__sfputc_r>:
 801b280:	6893      	ldr	r3, [r2, #8]
 801b282:	3b01      	subs	r3, #1
 801b284:	2b00      	cmp	r3, #0
 801b286:	b410      	push	{r4}
 801b288:	6093      	str	r3, [r2, #8]
 801b28a:	da08      	bge.n	801b29e <__sfputc_r+0x1e>
 801b28c:	6994      	ldr	r4, [r2, #24]
 801b28e:	42a3      	cmp	r3, r4
 801b290:	db01      	blt.n	801b296 <__sfputc_r+0x16>
 801b292:	290a      	cmp	r1, #10
 801b294:	d103      	bne.n	801b29e <__sfputc_r+0x1e>
 801b296:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b29a:	f000 bb7d 	b.w	801b998 <__swbuf_r>
 801b29e:	6813      	ldr	r3, [r2, #0]
 801b2a0:	1c58      	adds	r0, r3, #1
 801b2a2:	6010      	str	r0, [r2, #0]
 801b2a4:	7019      	strb	r1, [r3, #0]
 801b2a6:	4608      	mov	r0, r1
 801b2a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b2ac:	4770      	bx	lr

0801b2ae <__sfputs_r>:
 801b2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2b0:	4606      	mov	r6, r0
 801b2b2:	460f      	mov	r7, r1
 801b2b4:	4614      	mov	r4, r2
 801b2b6:	18d5      	adds	r5, r2, r3
 801b2b8:	42ac      	cmp	r4, r5
 801b2ba:	d101      	bne.n	801b2c0 <__sfputs_r+0x12>
 801b2bc:	2000      	movs	r0, #0
 801b2be:	e007      	b.n	801b2d0 <__sfputs_r+0x22>
 801b2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2c4:	463a      	mov	r2, r7
 801b2c6:	4630      	mov	r0, r6
 801b2c8:	f7ff ffda 	bl	801b280 <__sfputc_r>
 801b2cc:	1c43      	adds	r3, r0, #1
 801b2ce:	d1f3      	bne.n	801b2b8 <__sfputs_r+0xa>
 801b2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b2d4 <_vfiprintf_r>:
 801b2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2d8:	460d      	mov	r5, r1
 801b2da:	b09d      	sub	sp, #116	@ 0x74
 801b2dc:	4614      	mov	r4, r2
 801b2de:	4698      	mov	r8, r3
 801b2e0:	4606      	mov	r6, r0
 801b2e2:	b118      	cbz	r0, 801b2ec <_vfiprintf_r+0x18>
 801b2e4:	6a03      	ldr	r3, [r0, #32]
 801b2e6:	b90b      	cbnz	r3, 801b2ec <_vfiprintf_r+0x18>
 801b2e8:	f7ff fd2e 	bl	801ad48 <__sinit>
 801b2ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b2ee:	07d9      	lsls	r1, r3, #31
 801b2f0:	d405      	bmi.n	801b2fe <_vfiprintf_r+0x2a>
 801b2f2:	89ab      	ldrh	r3, [r5, #12]
 801b2f4:	059a      	lsls	r2, r3, #22
 801b2f6:	d402      	bmi.n	801b2fe <_vfiprintf_r+0x2a>
 801b2f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b2fa:	f7ff fe92 	bl	801b022 <__retarget_lock_acquire_recursive>
 801b2fe:	89ab      	ldrh	r3, [r5, #12]
 801b300:	071b      	lsls	r3, r3, #28
 801b302:	d501      	bpl.n	801b308 <_vfiprintf_r+0x34>
 801b304:	692b      	ldr	r3, [r5, #16]
 801b306:	b99b      	cbnz	r3, 801b330 <_vfiprintf_r+0x5c>
 801b308:	4629      	mov	r1, r5
 801b30a:	4630      	mov	r0, r6
 801b30c:	f000 fb82 	bl	801ba14 <__swsetup_r>
 801b310:	b170      	cbz	r0, 801b330 <_vfiprintf_r+0x5c>
 801b312:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b314:	07dc      	lsls	r4, r3, #31
 801b316:	d504      	bpl.n	801b322 <_vfiprintf_r+0x4e>
 801b318:	f04f 30ff 	mov.w	r0, #4294967295
 801b31c:	b01d      	add	sp, #116	@ 0x74
 801b31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b322:	89ab      	ldrh	r3, [r5, #12]
 801b324:	0598      	lsls	r0, r3, #22
 801b326:	d4f7      	bmi.n	801b318 <_vfiprintf_r+0x44>
 801b328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b32a:	f7ff fe7b 	bl	801b024 <__retarget_lock_release_recursive>
 801b32e:	e7f3      	b.n	801b318 <_vfiprintf_r+0x44>
 801b330:	2300      	movs	r3, #0
 801b332:	9309      	str	r3, [sp, #36]	@ 0x24
 801b334:	2320      	movs	r3, #32
 801b336:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b33a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b33e:	2330      	movs	r3, #48	@ 0x30
 801b340:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b4f0 <_vfiprintf_r+0x21c>
 801b344:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b348:	f04f 0901 	mov.w	r9, #1
 801b34c:	4623      	mov	r3, r4
 801b34e:	469a      	mov	sl, r3
 801b350:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b354:	b10a      	cbz	r2, 801b35a <_vfiprintf_r+0x86>
 801b356:	2a25      	cmp	r2, #37	@ 0x25
 801b358:	d1f9      	bne.n	801b34e <_vfiprintf_r+0x7a>
 801b35a:	ebba 0b04 	subs.w	fp, sl, r4
 801b35e:	d00b      	beq.n	801b378 <_vfiprintf_r+0xa4>
 801b360:	465b      	mov	r3, fp
 801b362:	4622      	mov	r2, r4
 801b364:	4629      	mov	r1, r5
 801b366:	4630      	mov	r0, r6
 801b368:	f7ff ffa1 	bl	801b2ae <__sfputs_r>
 801b36c:	3001      	adds	r0, #1
 801b36e:	f000 80a7 	beq.w	801b4c0 <_vfiprintf_r+0x1ec>
 801b372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b374:	445a      	add	r2, fp
 801b376:	9209      	str	r2, [sp, #36]	@ 0x24
 801b378:	f89a 3000 	ldrb.w	r3, [sl]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	f000 809f 	beq.w	801b4c0 <_vfiprintf_r+0x1ec>
 801b382:	2300      	movs	r3, #0
 801b384:	f04f 32ff 	mov.w	r2, #4294967295
 801b388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b38c:	f10a 0a01 	add.w	sl, sl, #1
 801b390:	9304      	str	r3, [sp, #16]
 801b392:	9307      	str	r3, [sp, #28]
 801b394:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b398:	931a      	str	r3, [sp, #104]	@ 0x68
 801b39a:	4654      	mov	r4, sl
 801b39c:	2205      	movs	r2, #5
 801b39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3a2:	4853      	ldr	r0, [pc, #332]	@ (801b4f0 <_vfiprintf_r+0x21c>)
 801b3a4:	f7e4 ffb4 	bl	8000310 <memchr>
 801b3a8:	9a04      	ldr	r2, [sp, #16]
 801b3aa:	b9d8      	cbnz	r0, 801b3e4 <_vfiprintf_r+0x110>
 801b3ac:	06d1      	lsls	r1, r2, #27
 801b3ae:	bf44      	itt	mi
 801b3b0:	2320      	movmi	r3, #32
 801b3b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b3b6:	0713      	lsls	r3, r2, #28
 801b3b8:	bf44      	itt	mi
 801b3ba:	232b      	movmi	r3, #43	@ 0x2b
 801b3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b3c0:	f89a 3000 	ldrb.w	r3, [sl]
 801b3c4:	2b2a      	cmp	r3, #42	@ 0x2a
 801b3c6:	d015      	beq.n	801b3f4 <_vfiprintf_r+0x120>
 801b3c8:	9a07      	ldr	r2, [sp, #28]
 801b3ca:	4654      	mov	r4, sl
 801b3cc:	2000      	movs	r0, #0
 801b3ce:	f04f 0c0a 	mov.w	ip, #10
 801b3d2:	4621      	mov	r1, r4
 801b3d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3d8:	3b30      	subs	r3, #48	@ 0x30
 801b3da:	2b09      	cmp	r3, #9
 801b3dc:	d94b      	bls.n	801b476 <_vfiprintf_r+0x1a2>
 801b3de:	b1b0      	cbz	r0, 801b40e <_vfiprintf_r+0x13a>
 801b3e0:	9207      	str	r2, [sp, #28]
 801b3e2:	e014      	b.n	801b40e <_vfiprintf_r+0x13a>
 801b3e4:	eba0 0308 	sub.w	r3, r0, r8
 801b3e8:	fa09 f303 	lsl.w	r3, r9, r3
 801b3ec:	4313      	orrs	r3, r2
 801b3ee:	9304      	str	r3, [sp, #16]
 801b3f0:	46a2      	mov	sl, r4
 801b3f2:	e7d2      	b.n	801b39a <_vfiprintf_r+0xc6>
 801b3f4:	9b03      	ldr	r3, [sp, #12]
 801b3f6:	1d19      	adds	r1, r3, #4
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	9103      	str	r1, [sp, #12]
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	bfbb      	ittet	lt
 801b400:	425b      	neglt	r3, r3
 801b402:	f042 0202 	orrlt.w	r2, r2, #2
 801b406:	9307      	strge	r3, [sp, #28]
 801b408:	9307      	strlt	r3, [sp, #28]
 801b40a:	bfb8      	it	lt
 801b40c:	9204      	strlt	r2, [sp, #16]
 801b40e:	7823      	ldrb	r3, [r4, #0]
 801b410:	2b2e      	cmp	r3, #46	@ 0x2e
 801b412:	d10a      	bne.n	801b42a <_vfiprintf_r+0x156>
 801b414:	7863      	ldrb	r3, [r4, #1]
 801b416:	2b2a      	cmp	r3, #42	@ 0x2a
 801b418:	d132      	bne.n	801b480 <_vfiprintf_r+0x1ac>
 801b41a:	9b03      	ldr	r3, [sp, #12]
 801b41c:	1d1a      	adds	r2, r3, #4
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	9203      	str	r2, [sp, #12]
 801b422:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b426:	3402      	adds	r4, #2
 801b428:	9305      	str	r3, [sp, #20]
 801b42a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b500 <_vfiprintf_r+0x22c>
 801b42e:	7821      	ldrb	r1, [r4, #0]
 801b430:	2203      	movs	r2, #3
 801b432:	4650      	mov	r0, sl
 801b434:	f7e4 ff6c 	bl	8000310 <memchr>
 801b438:	b138      	cbz	r0, 801b44a <_vfiprintf_r+0x176>
 801b43a:	9b04      	ldr	r3, [sp, #16]
 801b43c:	eba0 000a 	sub.w	r0, r0, sl
 801b440:	2240      	movs	r2, #64	@ 0x40
 801b442:	4082      	lsls	r2, r0
 801b444:	4313      	orrs	r3, r2
 801b446:	3401      	adds	r4, #1
 801b448:	9304      	str	r3, [sp, #16]
 801b44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b44e:	4829      	ldr	r0, [pc, #164]	@ (801b4f4 <_vfiprintf_r+0x220>)
 801b450:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b454:	2206      	movs	r2, #6
 801b456:	f7e4 ff5b 	bl	8000310 <memchr>
 801b45a:	2800      	cmp	r0, #0
 801b45c:	d03f      	beq.n	801b4de <_vfiprintf_r+0x20a>
 801b45e:	4b26      	ldr	r3, [pc, #152]	@ (801b4f8 <_vfiprintf_r+0x224>)
 801b460:	bb1b      	cbnz	r3, 801b4aa <_vfiprintf_r+0x1d6>
 801b462:	9b03      	ldr	r3, [sp, #12]
 801b464:	3307      	adds	r3, #7
 801b466:	f023 0307 	bic.w	r3, r3, #7
 801b46a:	3308      	adds	r3, #8
 801b46c:	9303      	str	r3, [sp, #12]
 801b46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b470:	443b      	add	r3, r7
 801b472:	9309      	str	r3, [sp, #36]	@ 0x24
 801b474:	e76a      	b.n	801b34c <_vfiprintf_r+0x78>
 801b476:	fb0c 3202 	mla	r2, ip, r2, r3
 801b47a:	460c      	mov	r4, r1
 801b47c:	2001      	movs	r0, #1
 801b47e:	e7a8      	b.n	801b3d2 <_vfiprintf_r+0xfe>
 801b480:	2300      	movs	r3, #0
 801b482:	3401      	adds	r4, #1
 801b484:	9305      	str	r3, [sp, #20]
 801b486:	4619      	mov	r1, r3
 801b488:	f04f 0c0a 	mov.w	ip, #10
 801b48c:	4620      	mov	r0, r4
 801b48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b492:	3a30      	subs	r2, #48	@ 0x30
 801b494:	2a09      	cmp	r2, #9
 801b496:	d903      	bls.n	801b4a0 <_vfiprintf_r+0x1cc>
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d0c6      	beq.n	801b42a <_vfiprintf_r+0x156>
 801b49c:	9105      	str	r1, [sp, #20]
 801b49e:	e7c4      	b.n	801b42a <_vfiprintf_r+0x156>
 801b4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b4a4:	4604      	mov	r4, r0
 801b4a6:	2301      	movs	r3, #1
 801b4a8:	e7f0      	b.n	801b48c <_vfiprintf_r+0x1b8>
 801b4aa:	ab03      	add	r3, sp, #12
 801b4ac:	9300      	str	r3, [sp, #0]
 801b4ae:	462a      	mov	r2, r5
 801b4b0:	4b12      	ldr	r3, [pc, #72]	@ (801b4fc <_vfiprintf_r+0x228>)
 801b4b2:	a904      	add	r1, sp, #16
 801b4b4:	4630      	mov	r0, r6
 801b4b6:	f3af 8000 	nop.w
 801b4ba:	4607      	mov	r7, r0
 801b4bc:	1c78      	adds	r0, r7, #1
 801b4be:	d1d6      	bne.n	801b46e <_vfiprintf_r+0x19a>
 801b4c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b4c2:	07d9      	lsls	r1, r3, #31
 801b4c4:	d405      	bmi.n	801b4d2 <_vfiprintf_r+0x1fe>
 801b4c6:	89ab      	ldrh	r3, [r5, #12]
 801b4c8:	059a      	lsls	r2, r3, #22
 801b4ca:	d402      	bmi.n	801b4d2 <_vfiprintf_r+0x1fe>
 801b4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b4ce:	f7ff fda9 	bl	801b024 <__retarget_lock_release_recursive>
 801b4d2:	89ab      	ldrh	r3, [r5, #12]
 801b4d4:	065b      	lsls	r3, r3, #25
 801b4d6:	f53f af1f 	bmi.w	801b318 <_vfiprintf_r+0x44>
 801b4da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4dc:	e71e      	b.n	801b31c <_vfiprintf_r+0x48>
 801b4de:	ab03      	add	r3, sp, #12
 801b4e0:	9300      	str	r3, [sp, #0]
 801b4e2:	462a      	mov	r2, r5
 801b4e4:	4b05      	ldr	r3, [pc, #20]	@ (801b4fc <_vfiprintf_r+0x228>)
 801b4e6:	a904      	add	r1, sp, #16
 801b4e8:	4630      	mov	r0, r6
 801b4ea:	f000 f879 	bl	801b5e0 <_printf_i>
 801b4ee:	e7e4      	b.n	801b4ba <_vfiprintf_r+0x1e6>
 801b4f0:	0801eacd 	.word	0x0801eacd
 801b4f4:	0801ead7 	.word	0x0801ead7
 801b4f8:	00000000 	.word	0x00000000
 801b4fc:	0801b2af 	.word	0x0801b2af
 801b500:	0801ead3 	.word	0x0801ead3

0801b504 <_printf_common>:
 801b504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b508:	4616      	mov	r6, r2
 801b50a:	4698      	mov	r8, r3
 801b50c:	688a      	ldr	r2, [r1, #8]
 801b50e:	690b      	ldr	r3, [r1, #16]
 801b510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b514:	4293      	cmp	r3, r2
 801b516:	bfb8      	it	lt
 801b518:	4613      	movlt	r3, r2
 801b51a:	6033      	str	r3, [r6, #0]
 801b51c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b520:	4607      	mov	r7, r0
 801b522:	460c      	mov	r4, r1
 801b524:	b10a      	cbz	r2, 801b52a <_printf_common+0x26>
 801b526:	3301      	adds	r3, #1
 801b528:	6033      	str	r3, [r6, #0]
 801b52a:	6823      	ldr	r3, [r4, #0]
 801b52c:	0699      	lsls	r1, r3, #26
 801b52e:	bf42      	ittt	mi
 801b530:	6833      	ldrmi	r3, [r6, #0]
 801b532:	3302      	addmi	r3, #2
 801b534:	6033      	strmi	r3, [r6, #0]
 801b536:	6825      	ldr	r5, [r4, #0]
 801b538:	f015 0506 	ands.w	r5, r5, #6
 801b53c:	d106      	bne.n	801b54c <_printf_common+0x48>
 801b53e:	f104 0a19 	add.w	sl, r4, #25
 801b542:	68e3      	ldr	r3, [r4, #12]
 801b544:	6832      	ldr	r2, [r6, #0]
 801b546:	1a9b      	subs	r3, r3, r2
 801b548:	42ab      	cmp	r3, r5
 801b54a:	dc26      	bgt.n	801b59a <_printf_common+0x96>
 801b54c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b550:	6822      	ldr	r2, [r4, #0]
 801b552:	3b00      	subs	r3, #0
 801b554:	bf18      	it	ne
 801b556:	2301      	movne	r3, #1
 801b558:	0692      	lsls	r2, r2, #26
 801b55a:	d42b      	bmi.n	801b5b4 <_printf_common+0xb0>
 801b55c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b560:	4641      	mov	r1, r8
 801b562:	4638      	mov	r0, r7
 801b564:	47c8      	blx	r9
 801b566:	3001      	adds	r0, #1
 801b568:	d01e      	beq.n	801b5a8 <_printf_common+0xa4>
 801b56a:	6823      	ldr	r3, [r4, #0]
 801b56c:	6922      	ldr	r2, [r4, #16]
 801b56e:	f003 0306 	and.w	r3, r3, #6
 801b572:	2b04      	cmp	r3, #4
 801b574:	bf02      	ittt	eq
 801b576:	68e5      	ldreq	r5, [r4, #12]
 801b578:	6833      	ldreq	r3, [r6, #0]
 801b57a:	1aed      	subeq	r5, r5, r3
 801b57c:	68a3      	ldr	r3, [r4, #8]
 801b57e:	bf0c      	ite	eq
 801b580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b584:	2500      	movne	r5, #0
 801b586:	4293      	cmp	r3, r2
 801b588:	bfc4      	itt	gt
 801b58a:	1a9b      	subgt	r3, r3, r2
 801b58c:	18ed      	addgt	r5, r5, r3
 801b58e:	2600      	movs	r6, #0
 801b590:	341a      	adds	r4, #26
 801b592:	42b5      	cmp	r5, r6
 801b594:	d11a      	bne.n	801b5cc <_printf_common+0xc8>
 801b596:	2000      	movs	r0, #0
 801b598:	e008      	b.n	801b5ac <_printf_common+0xa8>
 801b59a:	2301      	movs	r3, #1
 801b59c:	4652      	mov	r2, sl
 801b59e:	4641      	mov	r1, r8
 801b5a0:	4638      	mov	r0, r7
 801b5a2:	47c8      	blx	r9
 801b5a4:	3001      	adds	r0, #1
 801b5a6:	d103      	bne.n	801b5b0 <_printf_common+0xac>
 801b5a8:	f04f 30ff 	mov.w	r0, #4294967295
 801b5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5b0:	3501      	adds	r5, #1
 801b5b2:	e7c6      	b.n	801b542 <_printf_common+0x3e>
 801b5b4:	18e1      	adds	r1, r4, r3
 801b5b6:	1c5a      	adds	r2, r3, #1
 801b5b8:	2030      	movs	r0, #48	@ 0x30
 801b5ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b5be:	4422      	add	r2, r4
 801b5c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b5c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b5c8:	3302      	adds	r3, #2
 801b5ca:	e7c7      	b.n	801b55c <_printf_common+0x58>
 801b5cc:	2301      	movs	r3, #1
 801b5ce:	4622      	mov	r2, r4
 801b5d0:	4641      	mov	r1, r8
 801b5d2:	4638      	mov	r0, r7
 801b5d4:	47c8      	blx	r9
 801b5d6:	3001      	adds	r0, #1
 801b5d8:	d0e6      	beq.n	801b5a8 <_printf_common+0xa4>
 801b5da:	3601      	adds	r6, #1
 801b5dc:	e7d9      	b.n	801b592 <_printf_common+0x8e>
	...

0801b5e0 <_printf_i>:
 801b5e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b5e4:	7e0f      	ldrb	r7, [r1, #24]
 801b5e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b5e8:	2f78      	cmp	r7, #120	@ 0x78
 801b5ea:	4691      	mov	r9, r2
 801b5ec:	4680      	mov	r8, r0
 801b5ee:	460c      	mov	r4, r1
 801b5f0:	469a      	mov	sl, r3
 801b5f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b5f6:	d807      	bhi.n	801b608 <_printf_i+0x28>
 801b5f8:	2f62      	cmp	r7, #98	@ 0x62
 801b5fa:	d80a      	bhi.n	801b612 <_printf_i+0x32>
 801b5fc:	2f00      	cmp	r7, #0
 801b5fe:	f000 80d1 	beq.w	801b7a4 <_printf_i+0x1c4>
 801b602:	2f58      	cmp	r7, #88	@ 0x58
 801b604:	f000 80b8 	beq.w	801b778 <_printf_i+0x198>
 801b608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b60c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b610:	e03a      	b.n	801b688 <_printf_i+0xa8>
 801b612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b616:	2b15      	cmp	r3, #21
 801b618:	d8f6      	bhi.n	801b608 <_printf_i+0x28>
 801b61a:	a101      	add	r1, pc, #4	@ (adr r1, 801b620 <_printf_i+0x40>)
 801b61c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b620:	0801b679 	.word	0x0801b679
 801b624:	0801b68d 	.word	0x0801b68d
 801b628:	0801b609 	.word	0x0801b609
 801b62c:	0801b609 	.word	0x0801b609
 801b630:	0801b609 	.word	0x0801b609
 801b634:	0801b609 	.word	0x0801b609
 801b638:	0801b68d 	.word	0x0801b68d
 801b63c:	0801b609 	.word	0x0801b609
 801b640:	0801b609 	.word	0x0801b609
 801b644:	0801b609 	.word	0x0801b609
 801b648:	0801b609 	.word	0x0801b609
 801b64c:	0801b78b 	.word	0x0801b78b
 801b650:	0801b6b7 	.word	0x0801b6b7
 801b654:	0801b745 	.word	0x0801b745
 801b658:	0801b609 	.word	0x0801b609
 801b65c:	0801b609 	.word	0x0801b609
 801b660:	0801b7ad 	.word	0x0801b7ad
 801b664:	0801b609 	.word	0x0801b609
 801b668:	0801b6b7 	.word	0x0801b6b7
 801b66c:	0801b609 	.word	0x0801b609
 801b670:	0801b609 	.word	0x0801b609
 801b674:	0801b74d 	.word	0x0801b74d
 801b678:	6833      	ldr	r3, [r6, #0]
 801b67a:	1d1a      	adds	r2, r3, #4
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	6032      	str	r2, [r6, #0]
 801b680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b688:	2301      	movs	r3, #1
 801b68a:	e09c      	b.n	801b7c6 <_printf_i+0x1e6>
 801b68c:	6833      	ldr	r3, [r6, #0]
 801b68e:	6820      	ldr	r0, [r4, #0]
 801b690:	1d19      	adds	r1, r3, #4
 801b692:	6031      	str	r1, [r6, #0]
 801b694:	0606      	lsls	r6, r0, #24
 801b696:	d501      	bpl.n	801b69c <_printf_i+0xbc>
 801b698:	681d      	ldr	r5, [r3, #0]
 801b69a:	e003      	b.n	801b6a4 <_printf_i+0xc4>
 801b69c:	0645      	lsls	r5, r0, #25
 801b69e:	d5fb      	bpl.n	801b698 <_printf_i+0xb8>
 801b6a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b6a4:	2d00      	cmp	r5, #0
 801b6a6:	da03      	bge.n	801b6b0 <_printf_i+0xd0>
 801b6a8:	232d      	movs	r3, #45	@ 0x2d
 801b6aa:	426d      	negs	r5, r5
 801b6ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b6b0:	4858      	ldr	r0, [pc, #352]	@ (801b814 <_printf_i+0x234>)
 801b6b2:	230a      	movs	r3, #10
 801b6b4:	e011      	b.n	801b6da <_printf_i+0xfa>
 801b6b6:	6821      	ldr	r1, [r4, #0]
 801b6b8:	6833      	ldr	r3, [r6, #0]
 801b6ba:	0608      	lsls	r0, r1, #24
 801b6bc:	f853 5b04 	ldr.w	r5, [r3], #4
 801b6c0:	d402      	bmi.n	801b6c8 <_printf_i+0xe8>
 801b6c2:	0649      	lsls	r1, r1, #25
 801b6c4:	bf48      	it	mi
 801b6c6:	b2ad      	uxthmi	r5, r5
 801b6c8:	2f6f      	cmp	r7, #111	@ 0x6f
 801b6ca:	4852      	ldr	r0, [pc, #328]	@ (801b814 <_printf_i+0x234>)
 801b6cc:	6033      	str	r3, [r6, #0]
 801b6ce:	bf14      	ite	ne
 801b6d0:	230a      	movne	r3, #10
 801b6d2:	2308      	moveq	r3, #8
 801b6d4:	2100      	movs	r1, #0
 801b6d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b6da:	6866      	ldr	r6, [r4, #4]
 801b6dc:	60a6      	str	r6, [r4, #8]
 801b6de:	2e00      	cmp	r6, #0
 801b6e0:	db05      	blt.n	801b6ee <_printf_i+0x10e>
 801b6e2:	6821      	ldr	r1, [r4, #0]
 801b6e4:	432e      	orrs	r6, r5
 801b6e6:	f021 0104 	bic.w	r1, r1, #4
 801b6ea:	6021      	str	r1, [r4, #0]
 801b6ec:	d04b      	beq.n	801b786 <_printf_i+0x1a6>
 801b6ee:	4616      	mov	r6, r2
 801b6f0:	fbb5 f1f3 	udiv	r1, r5, r3
 801b6f4:	fb03 5711 	mls	r7, r3, r1, r5
 801b6f8:	5dc7      	ldrb	r7, [r0, r7]
 801b6fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b6fe:	462f      	mov	r7, r5
 801b700:	42bb      	cmp	r3, r7
 801b702:	460d      	mov	r5, r1
 801b704:	d9f4      	bls.n	801b6f0 <_printf_i+0x110>
 801b706:	2b08      	cmp	r3, #8
 801b708:	d10b      	bne.n	801b722 <_printf_i+0x142>
 801b70a:	6823      	ldr	r3, [r4, #0]
 801b70c:	07df      	lsls	r7, r3, #31
 801b70e:	d508      	bpl.n	801b722 <_printf_i+0x142>
 801b710:	6923      	ldr	r3, [r4, #16]
 801b712:	6861      	ldr	r1, [r4, #4]
 801b714:	4299      	cmp	r1, r3
 801b716:	bfde      	ittt	le
 801b718:	2330      	movle	r3, #48	@ 0x30
 801b71a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b71e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b722:	1b92      	subs	r2, r2, r6
 801b724:	6122      	str	r2, [r4, #16]
 801b726:	f8cd a000 	str.w	sl, [sp]
 801b72a:	464b      	mov	r3, r9
 801b72c:	aa03      	add	r2, sp, #12
 801b72e:	4621      	mov	r1, r4
 801b730:	4640      	mov	r0, r8
 801b732:	f7ff fee7 	bl	801b504 <_printf_common>
 801b736:	3001      	adds	r0, #1
 801b738:	d14a      	bne.n	801b7d0 <_printf_i+0x1f0>
 801b73a:	f04f 30ff 	mov.w	r0, #4294967295
 801b73e:	b004      	add	sp, #16
 801b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b744:	6823      	ldr	r3, [r4, #0]
 801b746:	f043 0320 	orr.w	r3, r3, #32
 801b74a:	6023      	str	r3, [r4, #0]
 801b74c:	4832      	ldr	r0, [pc, #200]	@ (801b818 <_printf_i+0x238>)
 801b74e:	2778      	movs	r7, #120	@ 0x78
 801b750:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b754:	6823      	ldr	r3, [r4, #0]
 801b756:	6831      	ldr	r1, [r6, #0]
 801b758:	061f      	lsls	r7, r3, #24
 801b75a:	f851 5b04 	ldr.w	r5, [r1], #4
 801b75e:	d402      	bmi.n	801b766 <_printf_i+0x186>
 801b760:	065f      	lsls	r7, r3, #25
 801b762:	bf48      	it	mi
 801b764:	b2ad      	uxthmi	r5, r5
 801b766:	6031      	str	r1, [r6, #0]
 801b768:	07d9      	lsls	r1, r3, #31
 801b76a:	bf44      	itt	mi
 801b76c:	f043 0320 	orrmi.w	r3, r3, #32
 801b770:	6023      	strmi	r3, [r4, #0]
 801b772:	b11d      	cbz	r5, 801b77c <_printf_i+0x19c>
 801b774:	2310      	movs	r3, #16
 801b776:	e7ad      	b.n	801b6d4 <_printf_i+0xf4>
 801b778:	4826      	ldr	r0, [pc, #152]	@ (801b814 <_printf_i+0x234>)
 801b77a:	e7e9      	b.n	801b750 <_printf_i+0x170>
 801b77c:	6823      	ldr	r3, [r4, #0]
 801b77e:	f023 0320 	bic.w	r3, r3, #32
 801b782:	6023      	str	r3, [r4, #0]
 801b784:	e7f6      	b.n	801b774 <_printf_i+0x194>
 801b786:	4616      	mov	r6, r2
 801b788:	e7bd      	b.n	801b706 <_printf_i+0x126>
 801b78a:	6833      	ldr	r3, [r6, #0]
 801b78c:	6825      	ldr	r5, [r4, #0]
 801b78e:	6961      	ldr	r1, [r4, #20]
 801b790:	1d18      	adds	r0, r3, #4
 801b792:	6030      	str	r0, [r6, #0]
 801b794:	062e      	lsls	r6, r5, #24
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	d501      	bpl.n	801b79e <_printf_i+0x1be>
 801b79a:	6019      	str	r1, [r3, #0]
 801b79c:	e002      	b.n	801b7a4 <_printf_i+0x1c4>
 801b79e:	0668      	lsls	r0, r5, #25
 801b7a0:	d5fb      	bpl.n	801b79a <_printf_i+0x1ba>
 801b7a2:	8019      	strh	r1, [r3, #0]
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	6123      	str	r3, [r4, #16]
 801b7a8:	4616      	mov	r6, r2
 801b7aa:	e7bc      	b.n	801b726 <_printf_i+0x146>
 801b7ac:	6833      	ldr	r3, [r6, #0]
 801b7ae:	1d1a      	adds	r2, r3, #4
 801b7b0:	6032      	str	r2, [r6, #0]
 801b7b2:	681e      	ldr	r6, [r3, #0]
 801b7b4:	6862      	ldr	r2, [r4, #4]
 801b7b6:	2100      	movs	r1, #0
 801b7b8:	4630      	mov	r0, r6
 801b7ba:	f7e4 fda9 	bl	8000310 <memchr>
 801b7be:	b108      	cbz	r0, 801b7c4 <_printf_i+0x1e4>
 801b7c0:	1b80      	subs	r0, r0, r6
 801b7c2:	6060      	str	r0, [r4, #4]
 801b7c4:	6863      	ldr	r3, [r4, #4]
 801b7c6:	6123      	str	r3, [r4, #16]
 801b7c8:	2300      	movs	r3, #0
 801b7ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b7ce:	e7aa      	b.n	801b726 <_printf_i+0x146>
 801b7d0:	6923      	ldr	r3, [r4, #16]
 801b7d2:	4632      	mov	r2, r6
 801b7d4:	4649      	mov	r1, r9
 801b7d6:	4640      	mov	r0, r8
 801b7d8:	47d0      	blx	sl
 801b7da:	3001      	adds	r0, #1
 801b7dc:	d0ad      	beq.n	801b73a <_printf_i+0x15a>
 801b7de:	6823      	ldr	r3, [r4, #0]
 801b7e0:	079b      	lsls	r3, r3, #30
 801b7e2:	d413      	bmi.n	801b80c <_printf_i+0x22c>
 801b7e4:	68e0      	ldr	r0, [r4, #12]
 801b7e6:	9b03      	ldr	r3, [sp, #12]
 801b7e8:	4298      	cmp	r0, r3
 801b7ea:	bfb8      	it	lt
 801b7ec:	4618      	movlt	r0, r3
 801b7ee:	e7a6      	b.n	801b73e <_printf_i+0x15e>
 801b7f0:	2301      	movs	r3, #1
 801b7f2:	4632      	mov	r2, r6
 801b7f4:	4649      	mov	r1, r9
 801b7f6:	4640      	mov	r0, r8
 801b7f8:	47d0      	blx	sl
 801b7fa:	3001      	adds	r0, #1
 801b7fc:	d09d      	beq.n	801b73a <_printf_i+0x15a>
 801b7fe:	3501      	adds	r5, #1
 801b800:	68e3      	ldr	r3, [r4, #12]
 801b802:	9903      	ldr	r1, [sp, #12]
 801b804:	1a5b      	subs	r3, r3, r1
 801b806:	42ab      	cmp	r3, r5
 801b808:	dcf2      	bgt.n	801b7f0 <_printf_i+0x210>
 801b80a:	e7eb      	b.n	801b7e4 <_printf_i+0x204>
 801b80c:	2500      	movs	r5, #0
 801b80e:	f104 0619 	add.w	r6, r4, #25
 801b812:	e7f5      	b.n	801b800 <_printf_i+0x220>
 801b814:	0801eade 	.word	0x0801eade
 801b818:	0801eaef 	.word	0x0801eaef

0801b81c <__sflush_r>:
 801b81c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b824:	0716      	lsls	r6, r2, #28
 801b826:	4605      	mov	r5, r0
 801b828:	460c      	mov	r4, r1
 801b82a:	d454      	bmi.n	801b8d6 <__sflush_r+0xba>
 801b82c:	684b      	ldr	r3, [r1, #4]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	dc02      	bgt.n	801b838 <__sflush_r+0x1c>
 801b832:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b834:	2b00      	cmp	r3, #0
 801b836:	dd48      	ble.n	801b8ca <__sflush_r+0xae>
 801b838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b83a:	2e00      	cmp	r6, #0
 801b83c:	d045      	beq.n	801b8ca <__sflush_r+0xae>
 801b83e:	2300      	movs	r3, #0
 801b840:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b844:	682f      	ldr	r7, [r5, #0]
 801b846:	6a21      	ldr	r1, [r4, #32]
 801b848:	602b      	str	r3, [r5, #0]
 801b84a:	d030      	beq.n	801b8ae <__sflush_r+0x92>
 801b84c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b84e:	89a3      	ldrh	r3, [r4, #12]
 801b850:	0759      	lsls	r1, r3, #29
 801b852:	d505      	bpl.n	801b860 <__sflush_r+0x44>
 801b854:	6863      	ldr	r3, [r4, #4]
 801b856:	1ad2      	subs	r2, r2, r3
 801b858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b85a:	b10b      	cbz	r3, 801b860 <__sflush_r+0x44>
 801b85c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b85e:	1ad2      	subs	r2, r2, r3
 801b860:	2300      	movs	r3, #0
 801b862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b864:	6a21      	ldr	r1, [r4, #32]
 801b866:	4628      	mov	r0, r5
 801b868:	47b0      	blx	r6
 801b86a:	1c43      	adds	r3, r0, #1
 801b86c:	89a3      	ldrh	r3, [r4, #12]
 801b86e:	d106      	bne.n	801b87e <__sflush_r+0x62>
 801b870:	6829      	ldr	r1, [r5, #0]
 801b872:	291d      	cmp	r1, #29
 801b874:	d82b      	bhi.n	801b8ce <__sflush_r+0xb2>
 801b876:	4a2a      	ldr	r2, [pc, #168]	@ (801b920 <__sflush_r+0x104>)
 801b878:	40ca      	lsrs	r2, r1
 801b87a:	07d6      	lsls	r6, r2, #31
 801b87c:	d527      	bpl.n	801b8ce <__sflush_r+0xb2>
 801b87e:	2200      	movs	r2, #0
 801b880:	6062      	str	r2, [r4, #4]
 801b882:	04d9      	lsls	r1, r3, #19
 801b884:	6922      	ldr	r2, [r4, #16]
 801b886:	6022      	str	r2, [r4, #0]
 801b888:	d504      	bpl.n	801b894 <__sflush_r+0x78>
 801b88a:	1c42      	adds	r2, r0, #1
 801b88c:	d101      	bne.n	801b892 <__sflush_r+0x76>
 801b88e:	682b      	ldr	r3, [r5, #0]
 801b890:	b903      	cbnz	r3, 801b894 <__sflush_r+0x78>
 801b892:	6560      	str	r0, [r4, #84]	@ 0x54
 801b894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b896:	602f      	str	r7, [r5, #0]
 801b898:	b1b9      	cbz	r1, 801b8ca <__sflush_r+0xae>
 801b89a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b89e:	4299      	cmp	r1, r3
 801b8a0:	d002      	beq.n	801b8a8 <__sflush_r+0x8c>
 801b8a2:	4628      	mov	r0, r5
 801b8a4:	f7ff fbec 	bl	801b080 <_free_r>
 801b8a8:	2300      	movs	r3, #0
 801b8aa:	6363      	str	r3, [r4, #52]	@ 0x34
 801b8ac:	e00d      	b.n	801b8ca <__sflush_r+0xae>
 801b8ae:	2301      	movs	r3, #1
 801b8b0:	4628      	mov	r0, r5
 801b8b2:	47b0      	blx	r6
 801b8b4:	4602      	mov	r2, r0
 801b8b6:	1c50      	adds	r0, r2, #1
 801b8b8:	d1c9      	bne.n	801b84e <__sflush_r+0x32>
 801b8ba:	682b      	ldr	r3, [r5, #0]
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d0c6      	beq.n	801b84e <__sflush_r+0x32>
 801b8c0:	2b1d      	cmp	r3, #29
 801b8c2:	d001      	beq.n	801b8c8 <__sflush_r+0xac>
 801b8c4:	2b16      	cmp	r3, #22
 801b8c6:	d11e      	bne.n	801b906 <__sflush_r+0xea>
 801b8c8:	602f      	str	r7, [r5, #0]
 801b8ca:	2000      	movs	r0, #0
 801b8cc:	e022      	b.n	801b914 <__sflush_r+0xf8>
 801b8ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b8d2:	b21b      	sxth	r3, r3
 801b8d4:	e01b      	b.n	801b90e <__sflush_r+0xf2>
 801b8d6:	690f      	ldr	r7, [r1, #16]
 801b8d8:	2f00      	cmp	r7, #0
 801b8da:	d0f6      	beq.n	801b8ca <__sflush_r+0xae>
 801b8dc:	0793      	lsls	r3, r2, #30
 801b8de:	680e      	ldr	r6, [r1, #0]
 801b8e0:	bf08      	it	eq
 801b8e2:	694b      	ldreq	r3, [r1, #20]
 801b8e4:	600f      	str	r7, [r1, #0]
 801b8e6:	bf18      	it	ne
 801b8e8:	2300      	movne	r3, #0
 801b8ea:	eba6 0807 	sub.w	r8, r6, r7
 801b8ee:	608b      	str	r3, [r1, #8]
 801b8f0:	f1b8 0f00 	cmp.w	r8, #0
 801b8f4:	dde9      	ble.n	801b8ca <__sflush_r+0xae>
 801b8f6:	6a21      	ldr	r1, [r4, #32]
 801b8f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b8fa:	4643      	mov	r3, r8
 801b8fc:	463a      	mov	r2, r7
 801b8fe:	4628      	mov	r0, r5
 801b900:	47b0      	blx	r6
 801b902:	2800      	cmp	r0, #0
 801b904:	dc08      	bgt.n	801b918 <__sflush_r+0xfc>
 801b906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b90a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b90e:	81a3      	strh	r3, [r4, #12]
 801b910:	f04f 30ff 	mov.w	r0, #4294967295
 801b914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b918:	4407      	add	r7, r0
 801b91a:	eba8 0800 	sub.w	r8, r8, r0
 801b91e:	e7e7      	b.n	801b8f0 <__sflush_r+0xd4>
 801b920:	20400001 	.word	0x20400001

0801b924 <_fflush_r>:
 801b924:	b538      	push	{r3, r4, r5, lr}
 801b926:	690b      	ldr	r3, [r1, #16]
 801b928:	4605      	mov	r5, r0
 801b92a:	460c      	mov	r4, r1
 801b92c:	b913      	cbnz	r3, 801b934 <_fflush_r+0x10>
 801b92e:	2500      	movs	r5, #0
 801b930:	4628      	mov	r0, r5
 801b932:	bd38      	pop	{r3, r4, r5, pc}
 801b934:	b118      	cbz	r0, 801b93e <_fflush_r+0x1a>
 801b936:	6a03      	ldr	r3, [r0, #32]
 801b938:	b90b      	cbnz	r3, 801b93e <_fflush_r+0x1a>
 801b93a:	f7ff fa05 	bl	801ad48 <__sinit>
 801b93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b942:	2b00      	cmp	r3, #0
 801b944:	d0f3      	beq.n	801b92e <_fflush_r+0xa>
 801b946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b948:	07d0      	lsls	r0, r2, #31
 801b94a:	d404      	bmi.n	801b956 <_fflush_r+0x32>
 801b94c:	0599      	lsls	r1, r3, #22
 801b94e:	d402      	bmi.n	801b956 <_fflush_r+0x32>
 801b950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b952:	f7ff fb66 	bl	801b022 <__retarget_lock_acquire_recursive>
 801b956:	4628      	mov	r0, r5
 801b958:	4621      	mov	r1, r4
 801b95a:	f7ff ff5f 	bl	801b81c <__sflush_r>
 801b95e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b960:	07da      	lsls	r2, r3, #31
 801b962:	4605      	mov	r5, r0
 801b964:	d4e4      	bmi.n	801b930 <_fflush_r+0xc>
 801b966:	89a3      	ldrh	r3, [r4, #12]
 801b968:	059b      	lsls	r3, r3, #22
 801b96a:	d4e1      	bmi.n	801b930 <_fflush_r+0xc>
 801b96c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b96e:	f7ff fb59 	bl	801b024 <__retarget_lock_release_recursive>
 801b972:	e7dd      	b.n	801b930 <_fflush_r+0xc>

0801b974 <fiprintf>:
 801b974:	b40e      	push	{r1, r2, r3}
 801b976:	b503      	push	{r0, r1, lr}
 801b978:	4601      	mov	r1, r0
 801b97a:	ab03      	add	r3, sp, #12
 801b97c:	4805      	ldr	r0, [pc, #20]	@ (801b994 <fiprintf+0x20>)
 801b97e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b982:	6800      	ldr	r0, [r0, #0]
 801b984:	9301      	str	r3, [sp, #4]
 801b986:	f7ff fca5 	bl	801b2d4 <_vfiprintf_r>
 801b98a:	b002      	add	sp, #8
 801b98c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b990:	b003      	add	sp, #12
 801b992:	4770      	bx	lr
 801b994:	24004a00 	.word	0x24004a00

0801b998 <__swbuf_r>:
 801b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b99a:	460e      	mov	r6, r1
 801b99c:	4614      	mov	r4, r2
 801b99e:	4605      	mov	r5, r0
 801b9a0:	b118      	cbz	r0, 801b9aa <__swbuf_r+0x12>
 801b9a2:	6a03      	ldr	r3, [r0, #32]
 801b9a4:	b90b      	cbnz	r3, 801b9aa <__swbuf_r+0x12>
 801b9a6:	f7ff f9cf 	bl	801ad48 <__sinit>
 801b9aa:	69a3      	ldr	r3, [r4, #24]
 801b9ac:	60a3      	str	r3, [r4, #8]
 801b9ae:	89a3      	ldrh	r3, [r4, #12]
 801b9b0:	071a      	lsls	r2, r3, #28
 801b9b2:	d501      	bpl.n	801b9b8 <__swbuf_r+0x20>
 801b9b4:	6923      	ldr	r3, [r4, #16]
 801b9b6:	b943      	cbnz	r3, 801b9ca <__swbuf_r+0x32>
 801b9b8:	4621      	mov	r1, r4
 801b9ba:	4628      	mov	r0, r5
 801b9bc:	f000 f82a 	bl	801ba14 <__swsetup_r>
 801b9c0:	b118      	cbz	r0, 801b9ca <__swbuf_r+0x32>
 801b9c2:	f04f 37ff 	mov.w	r7, #4294967295
 801b9c6:	4638      	mov	r0, r7
 801b9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9ca:	6823      	ldr	r3, [r4, #0]
 801b9cc:	6922      	ldr	r2, [r4, #16]
 801b9ce:	1a98      	subs	r0, r3, r2
 801b9d0:	6963      	ldr	r3, [r4, #20]
 801b9d2:	b2f6      	uxtb	r6, r6
 801b9d4:	4283      	cmp	r3, r0
 801b9d6:	4637      	mov	r7, r6
 801b9d8:	dc05      	bgt.n	801b9e6 <__swbuf_r+0x4e>
 801b9da:	4621      	mov	r1, r4
 801b9dc:	4628      	mov	r0, r5
 801b9de:	f7ff ffa1 	bl	801b924 <_fflush_r>
 801b9e2:	2800      	cmp	r0, #0
 801b9e4:	d1ed      	bne.n	801b9c2 <__swbuf_r+0x2a>
 801b9e6:	68a3      	ldr	r3, [r4, #8]
 801b9e8:	3b01      	subs	r3, #1
 801b9ea:	60a3      	str	r3, [r4, #8]
 801b9ec:	6823      	ldr	r3, [r4, #0]
 801b9ee:	1c5a      	adds	r2, r3, #1
 801b9f0:	6022      	str	r2, [r4, #0]
 801b9f2:	701e      	strb	r6, [r3, #0]
 801b9f4:	6962      	ldr	r2, [r4, #20]
 801b9f6:	1c43      	adds	r3, r0, #1
 801b9f8:	429a      	cmp	r2, r3
 801b9fa:	d004      	beq.n	801ba06 <__swbuf_r+0x6e>
 801b9fc:	89a3      	ldrh	r3, [r4, #12]
 801b9fe:	07db      	lsls	r3, r3, #31
 801ba00:	d5e1      	bpl.n	801b9c6 <__swbuf_r+0x2e>
 801ba02:	2e0a      	cmp	r6, #10
 801ba04:	d1df      	bne.n	801b9c6 <__swbuf_r+0x2e>
 801ba06:	4621      	mov	r1, r4
 801ba08:	4628      	mov	r0, r5
 801ba0a:	f7ff ff8b 	bl	801b924 <_fflush_r>
 801ba0e:	2800      	cmp	r0, #0
 801ba10:	d0d9      	beq.n	801b9c6 <__swbuf_r+0x2e>
 801ba12:	e7d6      	b.n	801b9c2 <__swbuf_r+0x2a>

0801ba14 <__swsetup_r>:
 801ba14:	b538      	push	{r3, r4, r5, lr}
 801ba16:	4b29      	ldr	r3, [pc, #164]	@ (801babc <__swsetup_r+0xa8>)
 801ba18:	4605      	mov	r5, r0
 801ba1a:	6818      	ldr	r0, [r3, #0]
 801ba1c:	460c      	mov	r4, r1
 801ba1e:	b118      	cbz	r0, 801ba28 <__swsetup_r+0x14>
 801ba20:	6a03      	ldr	r3, [r0, #32]
 801ba22:	b90b      	cbnz	r3, 801ba28 <__swsetup_r+0x14>
 801ba24:	f7ff f990 	bl	801ad48 <__sinit>
 801ba28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba2c:	0719      	lsls	r1, r3, #28
 801ba2e:	d422      	bmi.n	801ba76 <__swsetup_r+0x62>
 801ba30:	06da      	lsls	r2, r3, #27
 801ba32:	d407      	bmi.n	801ba44 <__swsetup_r+0x30>
 801ba34:	2209      	movs	r2, #9
 801ba36:	602a      	str	r2, [r5, #0]
 801ba38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ba3c:	81a3      	strh	r3, [r4, #12]
 801ba3e:	f04f 30ff 	mov.w	r0, #4294967295
 801ba42:	e033      	b.n	801baac <__swsetup_r+0x98>
 801ba44:	0758      	lsls	r0, r3, #29
 801ba46:	d512      	bpl.n	801ba6e <__swsetup_r+0x5a>
 801ba48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ba4a:	b141      	cbz	r1, 801ba5e <__swsetup_r+0x4a>
 801ba4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ba50:	4299      	cmp	r1, r3
 801ba52:	d002      	beq.n	801ba5a <__swsetup_r+0x46>
 801ba54:	4628      	mov	r0, r5
 801ba56:	f7ff fb13 	bl	801b080 <_free_r>
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	6363      	str	r3, [r4, #52]	@ 0x34
 801ba5e:	89a3      	ldrh	r3, [r4, #12]
 801ba60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ba64:	81a3      	strh	r3, [r4, #12]
 801ba66:	2300      	movs	r3, #0
 801ba68:	6063      	str	r3, [r4, #4]
 801ba6a:	6923      	ldr	r3, [r4, #16]
 801ba6c:	6023      	str	r3, [r4, #0]
 801ba6e:	89a3      	ldrh	r3, [r4, #12]
 801ba70:	f043 0308 	orr.w	r3, r3, #8
 801ba74:	81a3      	strh	r3, [r4, #12]
 801ba76:	6923      	ldr	r3, [r4, #16]
 801ba78:	b94b      	cbnz	r3, 801ba8e <__swsetup_r+0x7a>
 801ba7a:	89a3      	ldrh	r3, [r4, #12]
 801ba7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ba80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ba84:	d003      	beq.n	801ba8e <__swsetup_r+0x7a>
 801ba86:	4621      	mov	r1, r4
 801ba88:	4628      	mov	r0, r5
 801ba8a:	f000 f856 	bl	801bb3a <__smakebuf_r>
 801ba8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba92:	f013 0201 	ands.w	r2, r3, #1
 801ba96:	d00a      	beq.n	801baae <__swsetup_r+0x9a>
 801ba98:	2200      	movs	r2, #0
 801ba9a:	60a2      	str	r2, [r4, #8]
 801ba9c:	6962      	ldr	r2, [r4, #20]
 801ba9e:	4252      	negs	r2, r2
 801baa0:	61a2      	str	r2, [r4, #24]
 801baa2:	6922      	ldr	r2, [r4, #16]
 801baa4:	b942      	cbnz	r2, 801bab8 <__swsetup_r+0xa4>
 801baa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801baaa:	d1c5      	bne.n	801ba38 <__swsetup_r+0x24>
 801baac:	bd38      	pop	{r3, r4, r5, pc}
 801baae:	0799      	lsls	r1, r3, #30
 801bab0:	bf58      	it	pl
 801bab2:	6962      	ldrpl	r2, [r4, #20]
 801bab4:	60a2      	str	r2, [r4, #8]
 801bab6:	e7f4      	b.n	801baa2 <__swsetup_r+0x8e>
 801bab8:	2000      	movs	r0, #0
 801baba:	e7f7      	b.n	801baac <__swsetup_r+0x98>
 801babc:	24004a00 	.word	0x24004a00

0801bac0 <_sbrk_r>:
 801bac0:	b538      	push	{r3, r4, r5, lr}
 801bac2:	4d06      	ldr	r5, [pc, #24]	@ (801badc <_sbrk_r+0x1c>)
 801bac4:	2300      	movs	r3, #0
 801bac6:	4604      	mov	r4, r0
 801bac8:	4608      	mov	r0, r1
 801baca:	602b      	str	r3, [r5, #0]
 801bacc:	f7e6 f83e 	bl	8001b4c <_sbrk>
 801bad0:	1c43      	adds	r3, r0, #1
 801bad2:	d102      	bne.n	801bada <_sbrk_r+0x1a>
 801bad4:	682b      	ldr	r3, [r5, #0]
 801bad6:	b103      	cbz	r3, 801bada <_sbrk_r+0x1a>
 801bad8:	6023      	str	r3, [r4, #0]
 801bada:	bd38      	pop	{r3, r4, r5, pc}
 801badc:	24014e5c 	.word	0x24014e5c

0801bae0 <abort>:
 801bae0:	b508      	push	{r3, lr}
 801bae2:	2006      	movs	r0, #6
 801bae4:	f000 f88e 	bl	801bc04 <raise>
 801bae8:	2001      	movs	r0, #1
 801baea:	f7e5 ffb7 	bl	8001a5c <_exit>

0801baee <__swhatbuf_r>:
 801baee:	b570      	push	{r4, r5, r6, lr}
 801baf0:	460c      	mov	r4, r1
 801baf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801baf6:	2900      	cmp	r1, #0
 801baf8:	b096      	sub	sp, #88	@ 0x58
 801bafa:	4615      	mov	r5, r2
 801bafc:	461e      	mov	r6, r3
 801bafe:	da0d      	bge.n	801bb1c <__swhatbuf_r+0x2e>
 801bb00:	89a3      	ldrh	r3, [r4, #12]
 801bb02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bb06:	f04f 0100 	mov.w	r1, #0
 801bb0a:	bf14      	ite	ne
 801bb0c:	2340      	movne	r3, #64	@ 0x40
 801bb0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801bb12:	2000      	movs	r0, #0
 801bb14:	6031      	str	r1, [r6, #0]
 801bb16:	602b      	str	r3, [r5, #0]
 801bb18:	b016      	add	sp, #88	@ 0x58
 801bb1a:	bd70      	pop	{r4, r5, r6, pc}
 801bb1c:	466a      	mov	r2, sp
 801bb1e:	f000 f879 	bl	801bc14 <_fstat_r>
 801bb22:	2800      	cmp	r0, #0
 801bb24:	dbec      	blt.n	801bb00 <__swhatbuf_r+0x12>
 801bb26:	9901      	ldr	r1, [sp, #4]
 801bb28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801bb2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801bb30:	4259      	negs	r1, r3
 801bb32:	4159      	adcs	r1, r3
 801bb34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801bb38:	e7eb      	b.n	801bb12 <__swhatbuf_r+0x24>

0801bb3a <__smakebuf_r>:
 801bb3a:	898b      	ldrh	r3, [r1, #12]
 801bb3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bb3e:	079d      	lsls	r5, r3, #30
 801bb40:	4606      	mov	r6, r0
 801bb42:	460c      	mov	r4, r1
 801bb44:	d507      	bpl.n	801bb56 <__smakebuf_r+0x1c>
 801bb46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801bb4a:	6023      	str	r3, [r4, #0]
 801bb4c:	6123      	str	r3, [r4, #16]
 801bb4e:	2301      	movs	r3, #1
 801bb50:	6163      	str	r3, [r4, #20]
 801bb52:	b003      	add	sp, #12
 801bb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb56:	ab01      	add	r3, sp, #4
 801bb58:	466a      	mov	r2, sp
 801bb5a:	f7ff ffc8 	bl	801baee <__swhatbuf_r>
 801bb5e:	9f00      	ldr	r7, [sp, #0]
 801bb60:	4605      	mov	r5, r0
 801bb62:	4639      	mov	r1, r7
 801bb64:	4630      	mov	r0, r6
 801bb66:	f7ff faff 	bl	801b168 <_malloc_r>
 801bb6a:	b948      	cbnz	r0, 801bb80 <__smakebuf_r+0x46>
 801bb6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb70:	059a      	lsls	r2, r3, #22
 801bb72:	d4ee      	bmi.n	801bb52 <__smakebuf_r+0x18>
 801bb74:	f023 0303 	bic.w	r3, r3, #3
 801bb78:	f043 0302 	orr.w	r3, r3, #2
 801bb7c:	81a3      	strh	r3, [r4, #12]
 801bb7e:	e7e2      	b.n	801bb46 <__smakebuf_r+0xc>
 801bb80:	89a3      	ldrh	r3, [r4, #12]
 801bb82:	6020      	str	r0, [r4, #0]
 801bb84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bb88:	81a3      	strh	r3, [r4, #12]
 801bb8a:	9b01      	ldr	r3, [sp, #4]
 801bb8c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801bb90:	b15b      	cbz	r3, 801bbaa <__smakebuf_r+0x70>
 801bb92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb96:	4630      	mov	r0, r6
 801bb98:	f000 f84e 	bl	801bc38 <_isatty_r>
 801bb9c:	b128      	cbz	r0, 801bbaa <__smakebuf_r+0x70>
 801bb9e:	89a3      	ldrh	r3, [r4, #12]
 801bba0:	f023 0303 	bic.w	r3, r3, #3
 801bba4:	f043 0301 	orr.w	r3, r3, #1
 801bba8:	81a3      	strh	r3, [r4, #12]
 801bbaa:	89a3      	ldrh	r3, [r4, #12]
 801bbac:	431d      	orrs	r5, r3
 801bbae:	81a5      	strh	r5, [r4, #12]
 801bbb0:	e7cf      	b.n	801bb52 <__smakebuf_r+0x18>

0801bbb2 <_raise_r>:
 801bbb2:	291f      	cmp	r1, #31
 801bbb4:	b538      	push	{r3, r4, r5, lr}
 801bbb6:	4605      	mov	r5, r0
 801bbb8:	460c      	mov	r4, r1
 801bbba:	d904      	bls.n	801bbc6 <_raise_r+0x14>
 801bbbc:	2316      	movs	r3, #22
 801bbbe:	6003      	str	r3, [r0, #0]
 801bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 801bbc4:	bd38      	pop	{r3, r4, r5, pc}
 801bbc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801bbc8:	b112      	cbz	r2, 801bbd0 <_raise_r+0x1e>
 801bbca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bbce:	b94b      	cbnz	r3, 801bbe4 <_raise_r+0x32>
 801bbd0:	4628      	mov	r0, r5
 801bbd2:	f000 f853 	bl	801bc7c <_getpid_r>
 801bbd6:	4622      	mov	r2, r4
 801bbd8:	4601      	mov	r1, r0
 801bbda:	4628      	mov	r0, r5
 801bbdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bbe0:	f000 b83a 	b.w	801bc58 <_kill_r>
 801bbe4:	2b01      	cmp	r3, #1
 801bbe6:	d00a      	beq.n	801bbfe <_raise_r+0x4c>
 801bbe8:	1c59      	adds	r1, r3, #1
 801bbea:	d103      	bne.n	801bbf4 <_raise_r+0x42>
 801bbec:	2316      	movs	r3, #22
 801bbee:	6003      	str	r3, [r0, #0]
 801bbf0:	2001      	movs	r0, #1
 801bbf2:	e7e7      	b.n	801bbc4 <_raise_r+0x12>
 801bbf4:	2100      	movs	r1, #0
 801bbf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801bbfa:	4620      	mov	r0, r4
 801bbfc:	4798      	blx	r3
 801bbfe:	2000      	movs	r0, #0
 801bc00:	e7e0      	b.n	801bbc4 <_raise_r+0x12>
	...

0801bc04 <raise>:
 801bc04:	4b02      	ldr	r3, [pc, #8]	@ (801bc10 <raise+0xc>)
 801bc06:	4601      	mov	r1, r0
 801bc08:	6818      	ldr	r0, [r3, #0]
 801bc0a:	f7ff bfd2 	b.w	801bbb2 <_raise_r>
 801bc0e:	bf00      	nop
 801bc10:	24004a00 	.word	0x24004a00

0801bc14 <_fstat_r>:
 801bc14:	b538      	push	{r3, r4, r5, lr}
 801bc16:	4d07      	ldr	r5, [pc, #28]	@ (801bc34 <_fstat_r+0x20>)
 801bc18:	2300      	movs	r3, #0
 801bc1a:	4604      	mov	r4, r0
 801bc1c:	4608      	mov	r0, r1
 801bc1e:	4611      	mov	r1, r2
 801bc20:	602b      	str	r3, [r5, #0]
 801bc22:	f7e5 ff6b 	bl	8001afc <_fstat>
 801bc26:	1c43      	adds	r3, r0, #1
 801bc28:	d102      	bne.n	801bc30 <_fstat_r+0x1c>
 801bc2a:	682b      	ldr	r3, [r5, #0]
 801bc2c:	b103      	cbz	r3, 801bc30 <_fstat_r+0x1c>
 801bc2e:	6023      	str	r3, [r4, #0]
 801bc30:	bd38      	pop	{r3, r4, r5, pc}
 801bc32:	bf00      	nop
 801bc34:	24014e5c 	.word	0x24014e5c

0801bc38 <_isatty_r>:
 801bc38:	b538      	push	{r3, r4, r5, lr}
 801bc3a:	4d06      	ldr	r5, [pc, #24]	@ (801bc54 <_isatty_r+0x1c>)
 801bc3c:	2300      	movs	r3, #0
 801bc3e:	4604      	mov	r4, r0
 801bc40:	4608      	mov	r0, r1
 801bc42:	602b      	str	r3, [r5, #0]
 801bc44:	f7e5 ff6a 	bl	8001b1c <_isatty>
 801bc48:	1c43      	adds	r3, r0, #1
 801bc4a:	d102      	bne.n	801bc52 <_isatty_r+0x1a>
 801bc4c:	682b      	ldr	r3, [r5, #0]
 801bc4e:	b103      	cbz	r3, 801bc52 <_isatty_r+0x1a>
 801bc50:	6023      	str	r3, [r4, #0]
 801bc52:	bd38      	pop	{r3, r4, r5, pc}
 801bc54:	24014e5c 	.word	0x24014e5c

0801bc58 <_kill_r>:
 801bc58:	b538      	push	{r3, r4, r5, lr}
 801bc5a:	4d07      	ldr	r5, [pc, #28]	@ (801bc78 <_kill_r+0x20>)
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	4604      	mov	r4, r0
 801bc60:	4608      	mov	r0, r1
 801bc62:	4611      	mov	r1, r2
 801bc64:	602b      	str	r3, [r5, #0]
 801bc66:	f7e5 fee7 	bl	8001a38 <_kill>
 801bc6a:	1c43      	adds	r3, r0, #1
 801bc6c:	d102      	bne.n	801bc74 <_kill_r+0x1c>
 801bc6e:	682b      	ldr	r3, [r5, #0]
 801bc70:	b103      	cbz	r3, 801bc74 <_kill_r+0x1c>
 801bc72:	6023      	str	r3, [r4, #0]
 801bc74:	bd38      	pop	{r3, r4, r5, pc}
 801bc76:	bf00      	nop
 801bc78:	24014e5c 	.word	0x24014e5c

0801bc7c <_getpid_r>:
 801bc7c:	f7e5 bed4 	b.w	8001a28 <_getpid>

0801bc80 <_init>:
 801bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc82:	bf00      	nop
 801bc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc86:	bc08      	pop	{r3}
 801bc88:	469e      	mov	lr, r3
 801bc8a:	4770      	bx	lr

0801bc8c <_fini>:
 801bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc8e:	bf00      	nop
 801bc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc92:	bc08      	pop	{r3}
 801bc94:	469e      	mov	lr, r3
 801bc96:	4770      	bx	lr
