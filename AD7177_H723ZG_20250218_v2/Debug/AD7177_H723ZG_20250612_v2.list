
AD7177_H723ZG_20250612_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b7c8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e68  0801ba98  0801ba98  0001ca98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e900  0801e900  0001f900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e908  0801e908  0001f908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801e90c  0801e90c  0001f90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000cc  24004984  0801e910  0001f984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .lwip_sec     00004983  24000000  24000000  00020000  2**2
                  ALLOC
  8 .bss          00010418  24004a50  0801e9dc  0001fa50  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  24014e68  0801e9dc  0001fe68  2**0
                  ALLOC
 10 .lwip_sec     00000160  30000000  30000000  00020000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001fa50  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038fed  00000000  00000000  0001fa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000080e9  00000000  00000000  00058a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027c0  00000000  00000000  00060b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f43  00000000  00000000  00063318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d21  00000000  00000000  0006525b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d8bb  00000000  00000000  00077f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00171f10  00000000  00000000  000b5837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00227747  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae1c  00000000  00000000  0022778c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  002325a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004a50 	.word	0x24004a50
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801ba80 	.word	0x0801ba80

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004a54 	.word	0x24004a54
 800030c:	0801ba80 	.word	0x0801ba80

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 ff95 	bl	80012e4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b54      	ldr	r3, [pc, #336]	@ (800050c <main+0x15c>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b4e      	ldr	r3, [pc, #312]	@ (800050c <main+0x15c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b49      	ldr	r3, [pc, #292]	@ (800050c <main+0x15c>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a48      	ldr	r2, [pc, #288]	@ (800050c <main+0x15c>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b42      	ldr	r3, [pc, #264]	@ (800050c <main+0x15c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b3f      	ldr	r3, [pc, #252]	@ (800050c <main+0x15c>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b3c      	ldr	r3, [pc, #240]	@ (800050c <main+0x15c>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	4931      	ldr	r1, [pc, #196]	@ (800050c <main+0x15c>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b29      	ldr	r3, [pc, #164]	@ (800050c <main+0x15c>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a28      	ldr	r2, [pc, #160]	@ (800050c <main+0x15c>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f001 fd32 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f858 	bl	8000538 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000488:	f000 f8c8 	bl	800061c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 fb3a 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000490:	f000 fb00 	bl	8000a94 <MX_DMA_Init>
  MX_TIM2_Init();
 8000494:	f000 fa3a 	bl	800090c <MX_TIM2_Init>
  MX_SPI4_Init();
 8000498:	f000 f936 	bl	8000708 <MX_SPI4_Init>
  MX_TIM23_Init();
 800049c:	f000 faaa 	bl	80009f4 <MX_TIM23_Init>
  MX_TIM1_Init();
 80004a0:	f000 f98a 	bl	80007b8 <MX_TIM1_Init>
  MX_SPI1_Init();
 80004a4:	f000 f8d8 	bl	8000658 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2140      	movs	r1, #64	@ 0x40
 80004ac:	4818      	ldr	r0, [pc, #96]	@ (8000510 <main+0x160>)
 80004ae:	f005 fd7d 	bl	8005fac <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)resetSequence, 8, 50);
 80004b2:	2332      	movs	r3, #50	@ 0x32
 80004b4:	2208      	movs	r2, #8
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <main+0x164>)
 80004b8:	4817      	ldr	r0, [pc, #92]	@ (8000518 <main+0x168>)
 80004ba:	f008 f9a9 	bl	8008810 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2140      	movs	r1, #64	@ 0x40
 80004c2:	4813      	ldr	r0, [pc, #76]	@ (8000510 <main+0x160>)
 80004c4:	f005 fd72 	bl	8005fac <HAL_GPIO_WritePin>

  check_id = AD7177_ReadRegister(AD7177_REG_ID, 2);
 80004c8:	2102      	movs	r1, #2
 80004ca:	2007      	movs	r0, #7
 80004cc:	f000 fd0a 	bl	8000ee4 <AD7177_ReadRegister>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a12      	ldr	r2, [pc, #72]	@ (800051c <main+0x16c>)
 80004d4:	6013      	str	r3, [r2, #0]

  initializeAD7177Board();
 80004d6:	f000 fd57 	bl	8000f88 <initializeAD7177Board>

  readInitializedRegisters();
 80004da:	f000 fdb7 	bl	800104c <readInitializedRegisters>
  uint32_t exti8 = (exticr3 >> 0) & 0xF;
  */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004de:	f00b fe13 	bl	800c108 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000520 <main+0x170>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	480f      	ldr	r0, [pc, #60]	@ (8000524 <main+0x174>)
 80004e8:	f00b fe6d 	bl	800c1c6 <osThreadNew>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000528 <main+0x178>)
 80004f0:	6013      	str	r3, [r2, #0]

  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(startEthernetTask, NULL, &ethernetTask_attributes);
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <main+0x17c>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	480e      	ldr	r0, [pc, #56]	@ (8000530 <main+0x180>)
 80004f8:	f00b fe65 	bl	800c1c6 <osThreadNew>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <main+0x184>)
 8000500:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000502:	f00b fe25 	bl	800c150 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000506:	bf00      	nop
 8000508:	e7fd      	b.n	8000506 <main+0x156>
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00
 8000510:	58020400 	.word	0x58020400
 8000514:	24004984 	.word	0x24004984
 8000518:	24004a6c 	.word	0x24004a6c
 800051c:	2400498c 	.word	0x2400498c
 8000520:	0801e684 	.word	0x0801e684
 8000524:	08001171 	.word	0x08001171
 8000528:	24004e40 	.word	0x24004e40
 800052c:	0801e6a8 	.word	0x0801e6a8
 8000530:	08001181 	.word	0x08001181
 8000534:	24004e44 	.word	0x24004e44

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09c      	sub	sp, #112	@ 0x70
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000542:	224c      	movs	r2, #76	@ 0x4c
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f01a fb99 	bl	801ac7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2220      	movs	r2, #32
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f01a fb93 	bl	801ac7e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000558:	2002      	movs	r0, #2
 800055a:	f005 fd65 	bl	8006028 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	4b2d      	ldr	r3, [pc, #180]	@ (8000618 <SystemClock_Config+0xe0>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a2c      	ldr	r2, [pc, #176]	@ (8000618 <SystemClock_Config+0xe0>)
 8000568:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b2a      	ldr	r3, [pc, #168]	@ (8000618 <SystemClock_Config+0xe0>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800057a:	bf00      	nop
 800057c:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <SystemClock_Config+0xe0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000588:	d1f8      	bne.n	800057c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800058a:	2303      	movs	r3, #3
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800058e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000592:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000594:	2301      	movs	r3, #1
 8000596:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000598:	2340      	movs	r3, #64	@ 0x40
 800059a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80005a8:	f240 1313 	movw	r3, #275	@ 0x113
 80005ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b2:	2304      	movs	r3, #4
 80005b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80005ba:	2304      	movs	r3, #4
 80005bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005be:	2300      	movs	r3, #0
 80005c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fd66 	bl	800609c <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d6:	f000 fee7 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	233f      	movs	r3, #63	@ 0x3f
 80005dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005e6:	2308      	movs	r3, #8
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005ea:	2340      	movs	r3, #64	@ 0x40
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ee:	2340      	movs	r3, #64	@ 0x40
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80005f2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005f8:	2340      	movs	r3, #64	@ 0x40
 80005fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2103      	movs	r1, #3
 8000600:	4618      	mov	r0, r3
 8000602:	f006 f925 	bl	8006850 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800060c:	f000 fecc 	bl	80013a8 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3770      	adds	r7, #112	@ 0x70
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	58024800 	.word	0x58024800

0800061c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0ae      	sub	sp, #184	@ 0xb8
 8000620:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	22b8      	movs	r2, #184	@ 0xb8
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f01a fb28 	bl	801ac7e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800062e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800063a:	2300      	movs	r3, #0
 800063c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	4618      	mov	r0, r3
 8000642:	f006 fcbd 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 feac 	bl	80013a8 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	37b8      	adds	r7, #184	@ 0xb8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <MX_SPI1_Init+0xa8>)
 800065e:	4a29      	ldr	r2, [pc, #164]	@ (8000704 <MX_SPI1_Init+0xac>)
 8000660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000664:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <MX_SPI1_Init+0xa8>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000672:	2207      	movs	r2, #7
 8000674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000676:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000678:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800067c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000680:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000684:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000688:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800068c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000690:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000694:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_SPI1_Init+0xa8>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_SPI1_Init+0xa8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80006a8:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_SPI1_Init+0xa8>)
 80006ee:	f007 ff6b 	bl	80085c8 <HAL_SPI_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80006f8:	f000 fe56 	bl	80013a8 <Error_Handler>
  /* USER CODE BEGIN SPI1_Init 2 */
 // HAL_NVIC_EnableIRQ(SPI1_IRQn);
//
  /* USER CODE END SPI1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	24004a6c 	.word	0x24004a6c
 8000704:	40013000 	.word	0x40013000

08000708 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800070c:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <MX_SPI4_Init+0xac>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000714:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000718:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000720:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000722:	2207      	movs	r2, #7
 8000724:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000728:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800072c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000730:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000734:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000738:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800073c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000740:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000744:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000768:	2200      	movs	r2, #0
 800076a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800076c:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800076e:	2200      	movs	r2, #0
 8000770:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000774:	2200      	movs	r2, #0
 8000776:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800077a:	2200      	movs	r2, #0
 800077c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000786:	2200      	movs	r2, #0
 8000788:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800078c:	2200      	movs	r2, #0
 800078e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000792:	2200      	movs	r2, #0
 8000794:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 8000798:	2200      	movs	r2, #0
 800079a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_SPI4_Init+0xa8>)
 800079e:	f007 ff13 	bl	80085c8 <HAL_SPI_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 80007a8:	f000 fdfe 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	24004af4 	.word	0x24004af4
 80007b4:	40013400 	.word	0x40013400

080007b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	@ 0x70
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2234      	movs	r2, #52	@ 0x34
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f01a fa43 	bl	801ac7e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f8:	4b42      	ldr	r3, [pc, #264]	@ (8000904 <MX_TIM1_Init+0x14c>)
 80007fa:	4a43      	ldr	r2, [pc, #268]	@ (8000908 <MX_TIM1_Init+0x150>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1375-1;
 80007fe:	4b41      	ldr	r3, [pc, #260]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000800:	f240 525e 	movw	r2, #1374	@ 0x55e
 8000804:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b3f      	ldr	r3, [pc, #252]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800080c:	4b3d      	ldr	r3, [pc, #244]	@ (8000904 <MX_TIM1_Init+0x14c>)
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b3b      	ldr	r3, [pc, #236]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081a:	4b3a      	ldr	r3, [pc, #232]	@ (8000904 <MX_TIM1_Init+0x14c>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b38      	ldr	r3, [pc, #224]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000826:	4837      	ldr	r0, [pc, #220]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000828:	f009 fa8f 	bl	8009d4a <HAL_TIM_Base_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000832:	f000 fdb9 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000840:	4619      	mov	r1, r3
 8000842:	4830      	ldr	r0, [pc, #192]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000844:	f009 ff34 	bl	800a6b0 <HAL_TIM_ConfigClockSource>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800084e:	f000 fdab 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000852:	482c      	ldr	r0, [pc, #176]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000854:	f009 fbd4 	bl	800a000 <HAL_TIM_OC_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800085e:	f000 fda3 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000872:	4619      	mov	r1, r3
 8000874:	4823      	ldr	r0, [pc, #140]	@ (8000904 <MX_TIM1_Init+0x14c>)
 8000876:	f00a fc5b 	bl	800b130 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000880:	f000 fd92 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088c:	2300      	movs	r3, #0
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	4816      	ldr	r0, [pc, #88]	@ (8000904 <MX_TIM1_Init+0x14c>)
 80008aa:	f009 fd73 	bl	800a394 <HAL_TIM_OC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80008b4:	f000 fd78 	bl	80013a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_TIM1_Init+0x14c>)
 80008ee:	f00a fcbb 	bl	800b268 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008f8:	f000 fd56 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3770      	adds	r7, #112	@ 0x70
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24004d5c 	.word	0x24004d5c
 8000908:	40010000 	.word	0x40010000

0800090c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	@ 0x38
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093e:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000940:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 275-1;
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000948:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800094c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000954:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000956:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800095a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000968:	4821      	ldr	r0, [pc, #132]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 800096a:	f009 f9ee 	bl	8009d4a <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000974:	f000 fd18 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000982:	4619      	mov	r1, r3
 8000984:	481a      	ldr	r0, [pc, #104]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000986:	f009 fe93 	bl	800a6b0 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000990:	f000 fd0a 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000994:	4816      	ldr	r0, [pc, #88]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 8000996:	f009 fb94 	bl	800a0c2 <HAL_TIM_PWM_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009a0:	f000 fd02 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	480f      	ldr	r0, [pc, #60]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 80009b4:	f00a fbbc 	bl	800b130 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80009be:	f000 fcf3 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c2:	2360      	movs	r3, #96	@ 0x60
 80009c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_TIM2_Init+0xe4>)
 80009da:	f009 fd55 	bl	800a488 <HAL_TIM_PWM_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80009e4:	f000 fce0 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3738      	adds	r7, #56	@ 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	24004da8 	.word	0x24004da8

080009f4 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a14:	4a1e      	ldr	r2, [pc, #120]	@ (8000a90 <MX_TIM23_Init+0x9c>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a1a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000a1e:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000a3a:	4814      	ldr	r0, [pc, #80]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a3c:	f009 f985 	bl	8009d4a <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000a46:	f000 fcaf 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a58:	f009 fe2a 	bl	800a6b0 <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000a62:	f000 fca1 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <MX_TIM23_Init+0x98>)
 8000a74:	f00a fb5c 	bl	800b130 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000a7e:	f000 fc93 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24004df4 	.word	0x24004df4
 8000a90:	4000e000 	.word	0x4000e000

08000a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <MX_DMA_Init+0x6c>)
 8000a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aa0:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <MX_DMA_Init+0x6c>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_DMA_Init+0x6c>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2105      	movs	r1, #5
 8000abc:	200b      	movs	r0, #11
 8000abe:	f001 fb5f 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ac2:	200b      	movs	r0, #11
 8000ac4:	f001 fb76 	bl	80021b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2105      	movs	r1, #5
 8000acc:	200c      	movs	r0, #12
 8000ace:	f001 fb57 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ad2:	200c      	movs	r0, #12
 8000ad4:	f001 fb6e 	bl	80021b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2105      	movs	r1, #5
 8000adc:	200d      	movs	r0, #13
 8000ade:	f001 fb4f 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ae2:	200d      	movs	r0, #13
 8000ae4:	f001 fb66 	bl	80021b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2105      	movs	r1, #5
 8000aec:	200e      	movs	r0, #14
 8000aee:	f001 fb47 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000af2:	200e      	movs	r0, #14
 8000af4:	f001 fb5e 	bl	80021b4 <HAL_NVIC_EnableIRQ>

}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58024400 	.word	0x58024400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	@ 0x30
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	4b43      	ldr	r3, [pc, #268]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	4a41      	ldr	r2, [pc, #260]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b38:	4b3b      	ldr	r3, [pc, #236]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b84:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	4a23      	ldr	r2, [pc, #140]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <MX_GPIO_Init+0x128>)
 8000bd4:	f005 f9ea 	bl	8005fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bd8:	2340      	movs	r3, #64	@ 0x40
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	480f      	ldr	r0, [pc, #60]	@ (8000c2c <MX_GPIO_Init+0x128>)
 8000bf0:	f005 f834 	bl	8005c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <MX_GPIO_Init+0x128>)
 8000c0c:	f005 f826 	bl	8005c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2105      	movs	r1, #5
 8000c14:	2017      	movs	r0, #23
 8000c16:	f001 fab3 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c1a:	2017      	movs	r0, #23
 8000c1c:	f001 faca 	bl	80021b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	@ 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	58020400 	.word	0x58020400

08000c30 <AD7177_ReadIfReady>:

/* USER CODE BEGIN 4 */

//void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
uint8_t AD7177_ReadIfReady(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
		tracker3++;
 8000c36:	4b7a      	ldr	r3, [pc, #488]	@ (8000e20 <AD7177_ReadIfReady+0x1f0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a78      	ldr	r2, [pc, #480]	@ (8000e20 <AD7177_ReadIfReady+0x1f0>)
 8000c3e:	6013      	str	r3, [r2, #0]

	    // read the data register
		uint32_t raw = AD7177_ReadRegister(AD7177_REG_DATA, 4);
 8000c40:	2104      	movs	r1, #4
 8000c42:	2004      	movs	r0, #4
 8000c44:	f000 f94e 	bl	8000ee4 <AD7177_ReadRegister>
 8000c48:	60f8      	str	r0, [r7, #12]

	//if (hspi->Instance == SPI1) {
		tracker2++;
 8000c4a:	4b76      	ldr	r3, [pc, #472]	@ (8000e24 <AD7177_ReadIfReady+0x1f4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a74      	ldr	r2, [pc, #464]	@ (8000e24 <AD7177_ReadIfReady+0x1f4>)
 8000c52:	6013      	str	r3, [r2, #0]

		/*
		uint32_t value_24Bit = (rxBuffer24bit[0] << 16) | (rxBuffer24bit[1] << 8) | rxBuffer24bit[2];
		uint8_t status = rxBuffer24bit[3];*/

		uint32_t value_24Bit = (raw >> 8) & 0xFFFFFF;    // Top 3 bytes = ADC value
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	60bb      	str	r3, [r7, #8]
		uint8_t  status       = raw & 0xFF;              // Bottom byte = status
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	71fb      	strb	r3, [r7, #7]

		bool rdy        = !(status & 0x80);   // Bit 7: 0 = data ready
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	09db      	lsrs	r3, r3, #7
 8000c68:	71bb      	strb	r3, [r7, #6]
		bool adc_error  =  (status & 0x40);   // Bit 6: 1 = ADC error
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf14      	ite	ne
 8000c74:	2301      	movne	r3, #1
 8000c76:	2300      	moveq	r3, #0
 8000c78:	717b      	strb	r3, [r7, #5]
		bool crc_error  =  (status & 0x20);   // Bit 5: 1 = CRC error
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 0320 	and.w	r3, r3, #32
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	bf14      	ite	ne
 8000c84:	2301      	movne	r3, #1
 8000c86:	2300      	moveq	r3, #0
 8000c88:	713b      	strb	r3, [r7, #4]
		uint8_t channel_id = status & 0x0F;   // Bits 3:0 = Channel ID
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	70fb      	strb	r3, [r7, #3]
		//channel_data[0] = (value_24Bit >> 8) & 0xFFFF;          // value bits 23:8
		//spiData[spiIndex + 1] = ((value_24Bit & 0xFF) << 8) | status; // value bits 7:0 and status

		//spiIndex = spiIndex + 2

		if (rdy && !adc_error && !crc_error && channel_id < NUM_CH_ENABLED) {
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d017      	beq.n	8000cc8 <AD7177_ReadIfReady+0x98>
 8000c98:	797b      	ldrb	r3, [r7, #5]
 8000c9a:	f083 0301 	eor.w	r3, r3, #1
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d011      	beq.n	8000cc8 <AD7177_ReadIfReady+0x98>
 8000ca4:	793b      	ldrb	r3, [r7, #4]
 8000ca6:	f083 0301 	eor.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00b      	beq.n	8000cc8 <AD7177_ReadIfReady+0x98>
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d808      	bhi.n	8000cc8 <AD7177_ReadIfReady+0x98>
			channel_data[channel_id] = value_24Bit;
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	495b      	ldr	r1, [pc, #364]	@ (8000e28 <AD7177_ReadIfReady+0x1f8>)
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			channel_ready[channel_id] = 1;
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	54d1      	strb	r1, [r2, r3]
		}

		// Once all 4 channels have been read, build and store packet
		if (channel_ready[0] && channel_ready[1] && channel_ready[2]) {
 8000cc8:	4b58      	ldr	r3, [pc, #352]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80a1 	beq.w	8000e16 <AD7177_ReadIfReady+0x1e6>
 8000cd4:	4b55      	ldr	r3, [pc, #340]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000cd6:	785b      	ldrb	r3, [r3, #1]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 809b 	beq.w	8000e16 <AD7177_ReadIfReady+0x1e6>
 8000ce0:	4b52      	ldr	r3, [pc, #328]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000ce2:	789b      	ldrb	r3, [r3, #2]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 8095 	beq.w	8000e16 <AD7177_ReadIfReady+0x1e6>

			// Clear ready flags
			for (int i = 0; i < NUM_CH_ENABLED; i++) channel_ready[i] = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e007      	b.n	8000d02 <AD7177_ReadIfReady+0xd2>
 8000cf2:	4a4e      	ldr	r2, [pc, #312]	@ (8000e2c <AD7177_ReadIfReady+0x1fc>)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	ddf4      	ble.n	8000cf2 <AD7177_ReadIfReady+0xc2>

			// Fill spiData
			for (int i = 0; i < NUM_CH_ENABLED; i++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	e028      	b.n	8000d60 <AD7177_ReadIfReady+0x130>
				spiData[spiIndex + (i * 2)]     = channel_data[i] & 0xFFFF; // bits 15:0
 8000d0e:	4a46      	ldr	r2, [pc, #280]	@ (8000e28 <AD7177_ReadIfReady+0x1f8>)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d16:	4b46      	ldr	r3, [pc, #280]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	440b      	add	r3, r1
 8000d24:	b291      	uxth	r1, r2
 8000d26:	4a43      	ldr	r2, [pc, #268]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				spiData[spiIndex + (i * 2) + 1] = (channel_data[i] >> 16) << 8 | i; // bits 23:16 + channel id
 8000d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e28 <AD7177_ReadIfReady+0x1f8>)
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	0c1b      	lsrs	r3, r3, #16
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b299      	uxth	r1, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b3b      	ldr	r3, [pc, #236]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4403      	add	r3, r0
 8000d4e:	3301      	adds	r3, #1
 8000d50:	430a      	orrs	r2, r1
 8000d52:	b291      	uxth	r1, r2
 8000d54:	4a37      	ldr	r2, [pc, #220]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < NUM_CH_ENABLED; i++) {
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	ddd3      	ble.n	8000d0e <AD7177_ReadIfReady+0xde>
			}

			// Add timestamp
			spiData[spiIndex + 6]  = timer23val & 0xFFFF;
 8000d66:	4b34      	ldr	r3, [pc, #208]	@ (8000e38 <AD7177_ReadIfReady+0x208>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b31      	ldr	r3, [pc, #196]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	3306      	adds	r3, #6
 8000d72:	b291      	uxth	r1, r2
 8000d74:	4a2f      	ldr	r2, [pc, #188]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			spiData[spiIndex + 7]  = (timer23val >> 16) & 0xFFFF;
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <AD7177_ReadIfReady+0x208>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	0c1a      	lsrs	r2, r3, #16
 8000d80:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	3307      	adds	r3, #7
 8000d88:	b291      	uxth	r1, r2
 8000d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			//spacers (may change this later)
			spiData[spiIndex + 8] = 0xAB89;
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	3308      	adds	r3, #8
 8000d98:	4a26      	ldr	r2, [pc, #152]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000d9a:	f64a 3189 	movw	r1, #43913	@ 0xab89
 8000d9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			spiData[spiIndex + 9] = 0xEFCD;
 8000da2:	4b23      	ldr	r3, [pc, #140]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3309      	adds	r3, #9
 8000daa:	4a22      	ldr	r2, [pc, #136]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000dac:	f64e 71cd 	movw	r1, #61389	@ 0xefcd
 8000db0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			// Advance index
			spiIndex += 10;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	330a      	adds	r3, #10
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dc0:	801a      	strh	r2, [r3, #0]

			if (spiIndex >= 700) {
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000dcc:	d303      	bcc.n	8000dd6 <AD7177_ReadIfReady+0x1a6>
				spiIndex = 0;
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	801a      	strh	r2, [r3, #0]
 8000dd4:	e01f      	b.n	8000e16 <AD7177_ReadIfReady+0x1e6>
			}
			else if (spiIndex == 600) {
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000de0:	d119      	bne.n	8000e16 <AD7177_ReadIfReady+0x1e6>
				spiData[spiIndex] = sampleNum++;
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <AD7177_ReadIfReady+0x20c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	4914      	ldr	r1, [pc, #80]	@ (8000e3c <AD7177_ReadIfReady+0x20c>)
 8000dea:	600a      	str	r2, [r1, #0]
 8000dec:	4a10      	ldr	r2, [pc, #64]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dee:	8812      	ldrh	r2, [r2, #0]
 8000df0:	b292      	uxth	r2, r2
 8000df2:	b299      	uxth	r1, r3
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <AD7177_ReadIfReady+0x204>)
 8000df6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				spiIndex++;
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3301      	adds	r3, #1
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <AD7177_ReadIfReady+0x200>)
 8000e06:	801a      	strh	r2, [r3, #0]
				sampleNum++;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <AD7177_ReadIfReady+0x20c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e3c <AD7177_ReadIfReady+0x20c>)
 8000e10:	6013      	str	r3, [r2, #0]

				return 1; // success
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <AD7177_ReadIfReady+0x1e8>
				vTaskNotifyGiveFromISR(ethernetTaskHandle, &xHigherPriorityTaskWoken);
				portYIELD_FROM_ISR(xHigherPriorityTaskWoken);*/

			}
	}
		return 0;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2400587c 	.word	0x2400587c
 8000e24:	24005878 	.word	0x24005878
 8000e28:	24005880 	.word	0x24005880
 8000e2c:	24005890 	.word	0x24005890
 8000e30:	24005872 	.word	0x24005872
 8000e34:	24004e48 	.word	0x24004e48
 8000e38:	24005894 	.word	0x24005894
 8000e3c:	24005874 	.word	0x24005874

08000e40 <AD7177_WriteRegister>:

void AD7177_WriteRegister(uint8_t reg, uint32_t value, uint8_t num_bytes){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = (reg & 0x3F);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e56:	73fb      	strb	r3, [r7, #15]
    uint8_t tx[4] = { cmd, 0, 0, 0 };
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	723b      	strb	r3, [r7, #8]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	727b      	strb	r3, [r7, #9]
 8000e60:	2300      	movs	r3, #0
 8000e62:	72bb      	strb	r3, [r7, #10]
 8000e64:	2300      	movs	r3, #0
 8000e66:	72fb      	strb	r3, [r7, #11]
    if (num_bytes == 3) {
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d10b      	bne.n	8000e86 <AD7177_WriteRegister+0x46>
        tx[1] = (value >> 16) & 0xFF;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	0c1b      	lsrs	r3, r3, #16
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	727b      	strb	r3, [r7, #9]
        tx[2] = (value >> 8) & 0xFF;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	72bb      	strb	r3, [r7, #10]
        tx[3] = value & 0xFF;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	72fb      	strb	r3, [r7, #11]
 8000e84:	e010      	b.n	8000ea8 <AD7177_WriteRegister+0x68>
    } else if (num_bytes == 2) {
 8000e86:	79bb      	ldrb	r3, [r7, #6]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d107      	bne.n	8000e9c <AD7177_WriteRegister+0x5c>
        tx[1] = (value >> 8) & 0xFF;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	727b      	strb	r3, [r7, #9]
        tx[2] = value & 0xFF;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	72bb      	strb	r3, [r7, #10]
 8000e9a:	e005      	b.n	8000ea8 <AD7177_WriteRegister+0x68>
    } else if (num_bytes == 1) {
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d102      	bne.n	8000ea8 <AD7177_WriteRegister+0x68>
        tx[1] = value & 0xFF;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	727b      	strb	r3, [r7, #9]
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2140      	movs	r1, #64	@ 0x40
 8000eac:	480b      	ldr	r0, [pc, #44]	@ (8000edc <AD7177_WriteRegister+0x9c>)
 8000eae:	f005 f87d 	bl	8005fac <HAL_GPIO_WritePin>
    //HAL_Delay(1);
    HAL_SPI_Transmit(&hspi1, tx, num_bytes + 1, HAL_MAX_DELAY);
 8000eb2:	79bb      	ldrb	r3, [r7, #6]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f107 0108 	add.w	r1, r7, #8
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	4807      	ldr	r0, [pc, #28]	@ (8000ee0 <AD7177_WriteRegister+0xa0>)
 8000ec4:	f007 fca4 	bl	8008810 <HAL_SPI_Transmit>
    //HAL_Delay(1);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2140      	movs	r1, #64	@ 0x40
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <AD7177_WriteRegister+0x9c>)
 8000ece:	f005 f86d 	bl	8005fac <HAL_GPIO_WritePin>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	58020400 	.word	0x58020400
 8000ee0:	24004a6c 	.word	0x24004a6c

08000ee4 <AD7177_ReadRegister>:

uint32_t AD7177_ReadRegister(uint8_t reg, uint8_t num_bytes)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = 0x40 | (reg & 0x3F);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	75fb      	strb	r3, [r7, #23]
    uint8_t tx[4] = { cmd, 0, 0, 0 };
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	743b      	strb	r3, [r7, #16]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	747b      	strb	r3, [r7, #17]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	74bb      	strb	r3, [r7, #18]
 8000f12:	2300      	movs	r3, #0
 8000f14:	74fb      	strb	r3, [r7, #19]
    uint8_t rx[4] = {0};
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2140      	movs	r1, #64	@ 0x40
 8000f1e:	4818      	ldr	r0, [pc, #96]	@ (8000f80 <AD7177_ReadRegister+0x9c>)
 8000f20:	f005 f844 	bl	8005fac <HAL_GPIO_WritePin>
    //HAL_Delay(1);
    HAL_SPI_TransmitReceive(&hspi1, tx, rx, num_bytes + 1, 50);
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	f107 020c 	add.w	r2, r7, #12
 8000f30:	f107 0110 	add.w	r1, r7, #16
 8000f34:	2032      	movs	r0, #50	@ 0x32
 8000f36:	9000      	str	r0, [sp, #0]
 8000f38:	4812      	ldr	r0, [pc, #72]	@ (8000f84 <AD7177_ReadRegister+0xa0>)
 8000f3a:	f008 f8c9 	bl	80090d0 <HAL_SPI_TransmitReceive>
    //HAL_Delay(1);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2140      	movs	r1, #64	@ 0x40
 8000f42:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <AD7177_ReadRegister+0x9c>)
 8000f44:	f005 f832 	bl	8005fac <HAL_GPIO_WritePin>
    uint32_t result = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < num_bytes; ++i) {
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	e00c      	b.n	8000f6c <AD7177_ReadRegister+0x88>
        result = (result << 8) | rx[i + 1];
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	3201      	adds	r2, #1
 8000f5a:	3220      	adds	r2, #32
 8000f5c:	443a      	add	r2, r7
 8000f5e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < num_bytes; ++i) {
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbee      	blt.n	8000f52 <AD7177_ReadRegister+0x6e>
    }
    return result;
 8000f74:	69fb      	ldr	r3, [r7, #28]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	58020400 	.word	0x58020400
 8000f84:	24004a6c 	.word	0x24004a6c

08000f88 <initializeAD7177Board>:

void initializeAD7177Board() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    // Reset
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2140      	movs	r1, #64	@ 0x40
 8000f90:	4829      	ldr	r0, [pc, #164]	@ (8001038 <initializeAD7177Board+0xb0>)
 8000f92:	f005 f80b 	bl	8005fac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)resetSequence, 8, HAL_MAX_DELAY);
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4927      	ldr	r1, [pc, #156]	@ (800103c <initializeAD7177Board+0xb4>)
 8000f9e:	4828      	ldr	r0, [pc, #160]	@ (8001040 <initializeAD7177Board+0xb8>)
 8000fa0:	f007 fc36 	bl	8008810 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2140      	movs	r1, #64	@ 0x40
 8000fa8:	4823      	ldr	r0, [pc, #140]	@ (8001038 <initializeAD7177Board+0xb0>)
 8000faa:	f004 ffff 	bl	8005fac <HAL_GPIO_WritePin>

    HAL_Delay(5);
 8000fae:	2005      	movs	r0, #5
 8000fb0:	f000 fff6 	bl	8001fa0 <HAL_Delay>


    // Check for functionality
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	@ 0x40
 8000fb8:	481f      	ldr	r0, [pc, #124]	@ (8001038 <initializeAD7177Board+0xb0>)
 8000fba:	f004 fff7 	bl	8005fac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)checkTransmit, 1, HAL_MAX_DELAY);
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	491f      	ldr	r1, [pc, #124]	@ (8001044 <initializeAD7177Board+0xbc>)
 8000fc6:	481e      	ldr	r0, [pc, #120]	@ (8001040 <initializeAD7177Board+0xb8>)
 8000fc8:	f007 fc22 	bl	8008810 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)checkReceive, 2, HAL_MAX_DELAY);
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	491d      	ldr	r1, [pc, #116]	@ (8001048 <initializeAD7177Board+0xc0>)
 8000fd4:	481a      	ldr	r0, [pc, #104]	@ (8001040 <initializeAD7177Board+0xb8>)
 8000fd6:	f007 fe09 	bl	8008bec <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2140      	movs	r1, #64	@ 0x40
 8000fde:	4816      	ldr	r0, [pc, #88]	@ (8001038 <initializeAD7177Board+0xb0>)
 8000fe0:	f004 ffe4 	bl	8005fac <HAL_GPIO_WritePin>

    // set up ADC Mode
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
    //HAL_SPI_Transmit(&hspi1, setupADCMode, 3, HAL_MAX_DELAY);
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
    AD7177_WriteRegister(AD7177_REG_ADCMODE, AD7177_ADCMODE, 2);
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff ff28 	bl	8000e40 <AD7177_WriteRegister>

    // set up IF Mode, enable DATA_STAT byte
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
    //HAL_SPI_Transmit(&hspi1, setupIFMode, 3, HAL_MAX_DELAY);
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
    AD7177_WriteRegister(AD7177_REG_IFMODE, AD7177_IFMODE, 2);
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	2140      	movs	r1, #64	@ 0x40
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f7ff ff23 	bl	8000e40 <AD7177_WriteRegister>

    // Configure filter mode 0
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
    //HAL_SPI_Transmit(&hspi1, filtCon0, 3, HAL_MAX_DELAY);
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
    AD7177_WriteRegister(AD7177_REG_FILTCON0, AD7177_FILTCON0, 2);
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	2109      	movs	r1, #9
 8000ffe:	2028      	movs	r0, #40	@ 0x28
 8001000:	f7ff ff1e 	bl	8000e40 <AD7177_WriteRegister>

    // Configure setup mode 0
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
    //HAL_SPI_Transmit(&hspi1, setupCon0, 3, HAL_MAX_DELAY);
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
    AD7177_WriteRegister(AD7177_REG_SETUPCON0, AD7177_SETUPCON0, 2);
 8001004:	2202      	movs	r2, #2
 8001006:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800100a:	2020      	movs	r0, #32
 800100c:	f7ff ff18 	bl	8000e40 <AD7177_WriteRegister>

    // Setup channels 0 to 3
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
    //HAL_SPI_Transmit(&hspi1, setupChannels, 12, HAL_MAX_DELAY);
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
    AD7177_WriteRegister(AD7177_REG_CH0, AD7177_CH0_SETUP0, 2);
 8001010:	2202      	movs	r2, #2
 8001012:	f248 0104 	movw	r1, #32772	@ 0x8004
 8001016:	2010      	movs	r0, #16
 8001018:	f7ff ff12 	bl	8000e40 <AD7177_WriteRegister>
    AD7177_WriteRegister(AD7177_REG_CH1, AD7177_CH1_SETUP0, 2);
 800101c:	2202      	movs	r2, #2
 800101e:	f248 0124 	movw	r1, #32804	@ 0x8024
 8001022:	2011      	movs	r0, #17
 8001024:	f7ff ff0c 	bl	8000e40 <AD7177_WriteRegister>
    AD7177_WriteRegister(AD7177_REG_CH2, AD7177_CH2_SETUP0, 2);
 8001028:	2202      	movs	r2, #2
 800102a:	f248 0144 	movw	r1, #32836	@ 0x8044
 800102e:	2012      	movs	r0, #18
 8001030:	f7ff ff06 	bl	8000e40 <AD7177_WriteRegister>
   // AD7177_WriteRegister(AD7177_REG_CH3, AD7177_CH3_SETUP0, 2);
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	58020400 	.word	0x58020400
 800103c:	24004984 	.word	0x24004984
 8001040:	24004a6c 	.word	0x24004a6c
 8001044:	24004990 	.word	0x24004990
 8001048:	24005898 	.word	0x24005898

0800104c <readInitializedRegisters>:
void readInitializedRegisters() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	adc_mode = AD7177_ReadRegister(AD7177_REG_ADCMODE, 2);
 8001050:	2102      	movs	r1, #2
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff ff46 	bl	8000ee4 <AD7177_ReadRegister>
 8001058:	4603      	mov	r3, r0
 800105a:	4a27      	ldr	r2, [pc, #156]	@ (80010f8 <readInitializedRegisters+0xac>)
 800105c:	6013      	str	r3, [r2, #0]
	if_mode = AD7177_ReadRegister(AD7177_REG_IFMODE, 2);
 800105e:	2102      	movs	r1, #2
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff ff3f 	bl	8000ee4 <AD7177_ReadRegister>
 8001066:	4603      	mov	r3, r0
 8001068:	4a24      	ldr	r2, [pc, #144]	@ (80010fc <readInitializedRegisters+0xb0>)
 800106a:	6013      	str	r3, [r2, #0]
	filtcon0 = AD7177_ReadRegister(AD7177_REG_FILTCON0, 2);
 800106c:	2102      	movs	r1, #2
 800106e:	2028      	movs	r0, #40	@ 0x28
 8001070:	f7ff ff38 	bl	8000ee4 <AD7177_ReadRegister>
 8001074:	4603      	mov	r3, r0
 8001076:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <readInitializedRegisters+0xb4>)
 8001078:	6013      	str	r3, [r2, #0]
	setupcon0 = AD7177_ReadRegister(AD7177_REG_SETUPCON0, 2);
 800107a:	2102      	movs	r1, #2
 800107c:	2020      	movs	r0, #32
 800107e:	f7ff ff31 	bl	8000ee4 <AD7177_ReadRegister>
 8001082:	4603      	mov	r3, r0
 8001084:	4a1f      	ldr	r2, [pc, #124]	@ (8001104 <readInitializedRegisters+0xb8>)
 8001086:	6013      	str	r3, [r2, #0]

	ch0_setup = AD7177_ReadRegister(AD7177_REG_CH0, 2);
 8001088:	2102      	movs	r1, #2
 800108a:	2010      	movs	r0, #16
 800108c:	f7ff ff2a 	bl	8000ee4 <AD7177_ReadRegister>
 8001090:	4603      	mov	r3, r0
 8001092:	4a1d      	ldr	r2, [pc, #116]	@ (8001108 <readInitializedRegisters+0xbc>)
 8001094:	6013      	str	r3, [r2, #0]
	ch1_setup = AD7177_ReadRegister(AD7177_REG_CH1, 2);
 8001096:	2102      	movs	r1, #2
 8001098:	2011      	movs	r0, #17
 800109a:	f7ff ff23 	bl	8000ee4 <AD7177_ReadRegister>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a1a      	ldr	r2, [pc, #104]	@ (800110c <readInitializedRegisters+0xc0>)
 80010a2:	6013      	str	r3, [r2, #0]
	ch2_setup = AD7177_ReadRegister(AD7177_REG_CH2, 2);
 80010a4:	2102      	movs	r1, #2
 80010a6:	2012      	movs	r0, #18
 80010a8:	f7ff ff1c 	bl	8000ee4 <AD7177_ReadRegister>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a18      	ldr	r2, [pc, #96]	@ (8001110 <readInitializedRegisters+0xc4>)
 80010b0:	6013      	str	r3, [r2, #0]
	ch3_setup = AD7177_ReadRegister(AD7177_REG_CH3, 2);
 80010b2:	2102      	movs	r1, #2
 80010b4:	2013      	movs	r0, #19
 80010b6:	f7ff ff15 	bl	8000ee4 <AD7177_ReadRegister>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a15      	ldr	r2, [pc, #84]	@ (8001114 <readInitializedRegisters+0xc8>)
 80010be:	6013      	str	r3, [r2, #0]

	initial_data = AD7177_ReadRegister(AD7177_REG_DATA, 4);
 80010c0:	2104      	movs	r1, #4
 80010c2:	2004      	movs	r0, #4
 80010c4:	f7ff ff0e 	bl	8000ee4 <AD7177_ReadRegister>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <readInitializedRegisters+0xcc>)
 80010cc:	6013      	str	r3, [r2, #0]
	initial_voltage = convertDataToVoltage(initial_data);
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <readInitializedRegisters+0xcc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f826 	bl	8001124 <convertDataToVoltage>
 80010d8:	eef0 7a40 	vmov.f32	s15, s0
 80010dc:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <readInitializedRegisters+0xd0>)
 80010de:	edc3 7a00 	vstr	s15, [r3]

	initial_ch = initial_data & 0x03;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <readInitializedRegisters+0xcc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <readInitializedRegisters+0xd4>)
 80010f0:	701a      	strb	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24004994 	.word	0x24004994
 80010fc:	24004998 	.word	0x24004998
 8001100:	2400499c 	.word	0x2400499c
 8001104:	240049a0 	.word	0x240049a0
 8001108:	240049a4 	.word	0x240049a4
 800110c:	240049a8 	.word	0x240049a8
 8001110:	240049ac 	.word	0x240049ac
 8001114:	240049b0 	.word	0x240049b0
 8001118:	240049b4 	.word	0x240049b4
 800111c:	240049b8 	.word	0x240049b8
 8001120:	240049bc 	.word	0x240049bc

08001124 <convertDataToVoltage>:

float convertDataToVoltage(uint32_t data){
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	//read the first 24 bits:
	uint32_t first24 = data >> 8;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	60fb      	str	r3, [r7, #12]

	float voltage = (((float)first24 / ((1 << 24) - 1)) * 10) - 5;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800113c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800116c <convertDataToVoltage+0x48>
 8001140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001144:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001150:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001154:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	ee07 3a90 	vmov	s15, r3
}
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	4b7fffff 	.word	0x4b7fffff

08001170 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  // Try reading one sample from the ADC
	   //AD7177_ReadIfReady(2);  // timeout of 2 ms

    osDelay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f00b f8b6 	bl	800c2ea <osDelay>
 800117e:	e7fb      	b.n	8001178 <StartDefaultTask+0x8>

08001180 <startEthernetTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEthernetTask */
void startEthernetTask(void *argument)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0a6      	sub	sp, #152	@ 0x98
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEthernetTask */
	MX_LWIP_Init();
 8001188:	f00a f918 	bl	800b3bc <MX_LWIP_Init>

	osDelay(100); // let LWIP be initialized
 800118c:	2064      	movs	r0, #100	@ 0x64
 800118e:	f00b f8ac 	bl	800c2ea <osDelay>

	extern struct netif gnetif;

	netif_set_up(&gnetif);
 8001192:	4848      	ldr	r0, [pc, #288]	@ (80012b4 <startEthernetTask+0x134>)
 8001194:	f00f ff88 	bl	80110a8 <netif_set_up>
	netif_set_link_up(&gnetif); // Forces link status if not auto-detected
 8001198:	4846      	ldr	r0, [pc, #280]	@ (80012b4 <startEthernetTask+0x134>)
 800119a:	f010 f823 	bl	80111e4 <netif_set_link_up>

	const char* ip_status;
	ip_status = ipaddr_ntoa(&gnetif.ip_addr);
 800119e:	4846      	ldr	r0, [pc, #280]	@ (80012b8 <startEthernetTask+0x138>)
 80011a0:	f018 fb72 	bl	8019888 <ip4addr_ntoa>
 80011a4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

	ETH_MACConfigTypeDef mac_config;
	HAL_ETH_GetMACConfig(&heth, &mac_config);
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4619      	mov	r1, r3
 80011ae:	4843      	ldr	r0, [pc, #268]	@ (80012bc <startEthernetTask+0x13c>)
 80011b0:	f003 fd7a 	bl	8004ca8 <HAL_ETH_GetMACConfig>

	volatile uint32_t eth_speed = mac_config.Speed;         // Should be ETH_SPEED_100M
 80011b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b6:	61fb      	str	r3, [r7, #28]
	volatile uint32_t eth_duplex = mac_config.DuplexMode;   // Should be ETH_FULLDUPLEX_MODE
 80011b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ba:	61bb      	str	r3, [r7, #24]


	extern ETH_HandleTypeDef heth;

	HAL_StatusTypeDef eth_status = HAL_ETH_Start(&heth);
 80011bc:	483f      	ldr	r0, [pc, #252]	@ (80012bc <startEthernetTask+0x13c>)
 80011be:	f003 f881 	bl	80042c4 <HAL_ETH_Start>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	if (eth_status != HAL_OK)
 80011c8:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <startEthernetTask+0x54>
	{
	    // Set a debug flag so we know it failed
	    volatile int eth_failed = 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
	}

	// Own IP
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 10, 20, 3, 3);
 80011d4:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <startEthernetTask+0x140>)
 80011d6:	617b      	str	r3, [r7, #20]

	// Computer IP
	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 10, 20, 1, 3);
 80011d8:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <startEthernetTask+0x144>)
 80011da:	613b      	str	r3, [r7, #16]

	struct udp_pcb* my_udp = udp_new();
 80011dc:	f016 ff28 	bl	8018030 <udp_new>
 80011e0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	udp_bind(my_udp, &myIPaddr, 8);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2208      	movs	r2, #8
 80011ea:	4619      	mov	r1, r3
 80011ec:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80011f0:	f016 fe28 	bl	8017e44 <udp_bind>
	udp_connect(my_udp, &PC_IPADDR, 12345);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	f243 0239 	movw	r2, #12345	@ 0x3039
 80011fc:	4619      	mov	r1, r3
 80011fe:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001202:	f016 fea7 	bl	8017f54 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// Start timer 23
	HAL_TIM_Base_Start(&htim23);
 800120c:	482e      	ldr	r0, [pc, #184]	@ (80012c8 <startEthernetTask+0x148>)
 800120e:	f008 fdf3 	bl	8009df8 <HAL_TIM_Base_Start>

	// Start timer 1
	HAL_TIM_Base_Start(&htim1);
 8001212:	482e      	ldr	r0, [pc, #184]	@ (80012cc <startEthernetTask+0x14c>)
 8001214:	f008 fdf0 	bl	8009df8 <HAL_TIM_Base_Start>

	// Start timer 2 with 1ms interrupts
	HAL_TIM_Base_Start_IT(&htim2);
 8001218:	482d      	ldr	r0, [pc, #180]	@ (80012d0 <startEthernetTask+0x150>)
 800121a:	f008 fe6b 	bl	8009ef4 <HAL_TIM_Base_Start_IT>

	for (;;)
	{
		bool ready_flag = AD7177_ReadIfReady();
 800121e:	f7ff fd07 	bl	8000c30 <AD7177_ReadIfReady>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		 // Wait for the notification to send data
		//ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

		if(ready_flag){
 8001230:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001234:	2b00      	cmp	r3, #0
 8001236:	d038      	beq.n	80012aa <startEthernetTask+0x12a>

			  // Copy samples from spiData to tempBuffer
			  memcpy(tempBuffer, spiData, sizeof(tempBuffer));
 8001238:	4a26      	ldr	r2, [pc, #152]	@ (80012d4 <startEthernetTask+0x154>)
 800123a:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <startEthernetTask+0x158>)
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f240 43b2 	movw	r3, #1202	@ 0x4b2
 8001244:	461a      	mov	r2, r3
 8001246:	f019 fdee 	bl	801ae26 <memcpy>

			  // Send the data over Ethernet
			  udp_buffer = pbuf_alloc(PBUF_TRANSPORT, sizeof(tempBuffer), PBUF_RAM);
 800124a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800124e:	f240 41b2 	movw	r1, #1202	@ 0x4b2
 8001252:	2036      	movs	r0, #54	@ 0x36
 8001254:	f010 f8f4 	bl	8011440 <pbuf_alloc>
 8001258:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			  if (udp_buffer != NULL)
 800125c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001260:	2b00      	cmp	r3, #0
 8001262:	d012      	beq.n	800128a <startEthernetTask+0x10a>
			  {
				  memcpy(udp_buffer->payload, tempBuffer, sizeof(tempBuffer));
 8001264:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f240 42b2 	movw	r2, #1202	@ 0x4b2
 800126e:	4919      	ldr	r1, [pc, #100]	@ (80012d4 <startEthernetTask+0x154>)
 8001270:	4618      	mov	r0, r3
 8001272:	f019 fdd8 	bl	801ae26 <memcpy>
				  udp_send(my_udp, udp_buffer);
 8001276:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800127a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800127e:	f016 fbf7 	bl	8017a70 <udp_send>
				  pbuf_free(udp_buffer);
 8001282:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001286:	f010 fbc3 	bl	8011a10 <pbuf_free>
			  }

			  // Shift the remaining samples up in the spiData buffer (pointer to dest, pointer to source, number of bytes)
			  memmove(spiData, &spiData[601], sizeof(spiData) - sizeof(tempBuffer));
 800128a:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <startEthernetTask+0x158>)
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <startEthernetTask+0x15c>)
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	23c6      	movs	r3, #198	@ 0xc6
 8001294:	461a      	mov	r2, r3
 8001296:	f019 fdc6 	bl	801ae26 <memcpy>

			  // Update spiIndex to reflect the new starting position
			  spiIndex -= 601;
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <startEthernetTask+0x160>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <startEthernetTask+0x160>)
 80012a8:	801a      	strh	r2, [r3, #0]

		}
		osDelay(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f00b f81d 	bl	800c2ea <osDelay>
	{
 80012b0:	e7b5      	b.n	800121e <startEthernetTask+0x9e>
 80012b2:	bf00      	nop
 80012b4:	240058f0 	.word	0x240058f0
 80012b8:	240058f4 	.word	0x240058f4
 80012bc:	24005970 	.word	0x24005970
 80012c0:	0303140a 	.word	0x0303140a
 80012c4:	0301140a 	.word	0x0301140a
 80012c8:	24004df4 	.word	0x24004df4
 80012cc:	24004d5c 	.word	0x24004d5c
 80012d0:	24004da8 	.word	0x24004da8
 80012d4:	240053c0 	.word	0x240053c0
 80012d8:	24004e48 	.word	0x24004e48
 80012dc:	240052fa 	.word	0x240052fa
 80012e0:	24005872 	.word	0x24005872

080012e4 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012f6:	f000 ff6b 	bl	80021d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012fe:	2300      	movs	r3, #0
 8001300:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001306:	231f      	movs	r3, #31
 8001308:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800130a:	2387      	movs	r3, #135	@ 0x87
 800130c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800130e:	2300      	movs	r3, #0
 8001310:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001312:	2300      	movs	r3, #0
 8001314:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001316:	2301      	movs	r3, #1
 8001318:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800131a:	2301      	movs	r3, #1
 800131c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001326:	463b      	mov	r3, r7
 8001328:	4618      	mov	r0, r3
 800132a:	f000 ff89 	bl	8002240 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800132e:	2301      	movs	r3, #1
 8001330:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001332:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001336:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001338:	2309      	movs	r3, #9
 800133a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800133c:	2300      	movs	r3, #0
 800133e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001340:	2303      	movs	r3, #3
 8001342:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001348:	463b      	mov	r3, r7
 800134a:	4618      	mov	r0, r3
 800134c:	f000 ff78 	bl	8002240 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001350:	2302      	movs	r3, #2
 8001352:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <MPU_Config+0x9c>)
 8001356:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001358:	230f      	movs	r3, #15
 800135a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800135c:	2301      	movs	r3, #1
 800135e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001368:	463b      	mov	r3, r7
 800136a:	4618      	mov	r0, r3
 800136c:	f000 ff68 	bl	8002240 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001370:	2004      	movs	r0, #4
 8001372:	f000 ff45 	bl	8002200 <HAL_MPU_Enable>

}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	30000200 	.word	0x30000200

08001384 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001396:	f000 fde3 	bl	8001f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40001000 	.word	0x40001000

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <Error_Handler+0x8>

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <HAL_MspInit+0x38>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <HAL_MspInit+0x38>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <HAL_MspInit+0x38>)
 80013cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	210f      	movs	r1, #15
 80013dc:	f06f 0001 	mvn.w	r0, #1
 80013e0:	f000 fece 	bl	8002180 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58024400 	.word	0x58024400

080013f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0bc      	sub	sp, #240	@ 0xf0
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	22b8      	movs	r2, #184	@ 0xb8
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f019 fc34 	bl	801ac7e <memset>
  if(hspi->Instance==SPI1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a69      	ldr	r2, [pc, #420]	@ (80015c0 <HAL_SPI_MspInit+0x1d0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	f040 80df 	bne.w	80015e0 <HAL_SPI_MspInit+0x1f0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001422:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800142e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001432:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	4618      	mov	r0, r3
 800143a:	f005 fdc1 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001444:	f7ff ffb0 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001448:	4b5e      	ldr	r3, [pc, #376]	@ (80015c4 <HAL_SPI_MspInit+0x1d4>)
 800144a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800144e:	4a5d      	ldr	r2, [pc, #372]	@ (80015c4 <HAL_SPI_MspInit+0x1d4>)
 8001450:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001454:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001458:	4b5a      	ldr	r3, [pc, #360]	@ (80015c4 <HAL_SPI_MspInit+0x1d4>)
 800145a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800145e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b57      	ldr	r3, [pc, #348]	@ (80015c4 <HAL_SPI_MspInit+0x1d4>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146c:	4a55      	ldr	r2, [pc, #340]	@ (80015c4 <HAL_SPI_MspInit+0x1d4>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001476:	4b53      	ldr	r3, [pc, #332]	@ (80015c4 <HAL_SPI_MspInit+0x1d4>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b4f      	ldr	r3, [pc, #316]	@ (80015c4 <HAL_SPI_MspInit+0x1d4>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148a:	4a4e      	ldr	r2, [pc, #312]	@ (80015c4 <HAL_SPI_MspInit+0x1d4>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001494:	4b4b      	ldr	r3, [pc, #300]	@ (80015c4 <HAL_SPI_MspInit+0x1d4>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014a2:	2360      	movs	r3, #96	@ 0x60
 80014a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ba:	2305      	movs	r3, #5
 80014bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014c4:	4619      	mov	r1, r3
 80014c6:	4840      	ldr	r0, [pc, #256]	@ (80015c8 <HAL_SPI_MspInit+0x1d8>)
 80014c8:	f004 fbc8 	bl	8005c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014cc:	2320      	movs	r3, #32
 80014ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014e4:	2305      	movs	r3, #5
 80014e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014ee:	4619      	mov	r1, r3
 80014f0:	4836      	ldr	r0, [pc, #216]	@ (80015cc <HAL_SPI_MspInit+0x1dc>)
 80014f2:	f004 fbb3 	bl	8005c5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream2;
 80014f6:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 80014f8:	4a36      	ldr	r2, [pc, #216]	@ (80015d4 <HAL_SPI_MspInit+0x1e4>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80014fc:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 80014fe:	2225      	movs	r2, #37	@ 0x25
 8001500:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001502:	4b33      	ldr	r3, [pc, #204]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	4b31      	ldr	r3, [pc, #196]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 8001510:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001514:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001516:	4b2e      	ldr	r3, [pc, #184]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151c:	4b2c      	ldr	r3, [pc, #176]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001522:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001528:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 800152a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800152e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001536:	4826      	ldr	r0, [pc, #152]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 8001538:	f000 fec2 	bl	80022c0 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_SPI_MspInit+0x156>
    {
      Error_Handler();
 8001542:	f7ff ff31 	bl	80013a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a21      	ldr	r2, [pc, #132]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 800154a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800154c:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <HAL_SPI_MspInit+0x1e0>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 8001552:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 8001554:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <HAL_SPI_MspInit+0x1ec>)
 8001556:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001558:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 800155a:	2226      	movs	r2, #38	@ 0x26
 800155c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 8001560:	2240      	movs	r2, #64	@ 0x40
 8001562:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 800156c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001570:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001572:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800157e:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 8001586:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800158a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001592:	4811      	ldr	r0, [pc, #68]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 8001594:	f000 fe94 	bl	80022c0 <HAL_DMA_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_SPI_MspInit+0x1b2>
    {
      Error_Handler();
 800159e:	f7ff ff03 	bl	80013a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a0c      	ldr	r2, [pc, #48]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 80015a6:	679a      	str	r2, [r3, #120]	@ 0x78
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <HAL_SPI_MspInit+0x1e8>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2105      	movs	r1, #5
 80015b2:	2023      	movs	r0, #35	@ 0x23
 80015b4:	f000 fde4 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015b8:	2023      	movs	r0, #35	@ 0x23
 80015ba:	f000 fdfb 	bl	80021b4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 80015be:	e0c0      	b.n	8001742 <HAL_SPI_MspInit+0x352>
 80015c0:	40013000 	.word	0x40013000
 80015c4:	58024400 	.word	0x58024400
 80015c8:	58020000 	.word	0x58020000
 80015cc:	58020400 	.word	0x58020400
 80015d0:	24004b7c 	.word	0x24004b7c
 80015d4:	40020040 	.word	0x40020040
 80015d8:	24004bf4 	.word	0x24004bf4
 80015dc:	40020058 	.word	0x40020058
  else if(hspi->Instance==SPI4)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a59      	ldr	r2, [pc, #356]	@ (800174c <HAL_SPI_MspInit+0x35c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	f040 80ab 	bne.w	8001742 <HAL_SPI_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80015ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	4618      	mov	r0, r3
 8001604:	f005 fcdc 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800160e:	f7ff fecb 	bl	80013a8 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001612:	4b4f      	ldr	r3, [pc, #316]	@ (8001750 <HAL_SPI_MspInit+0x360>)
 8001614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001618:	4a4d      	ldr	r2, [pc, #308]	@ (8001750 <HAL_SPI_MspInit+0x360>)
 800161a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800161e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001622:	4b4b      	ldr	r3, [pc, #300]	@ (8001750 <HAL_SPI_MspInit+0x360>)
 8001624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001630:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <HAL_SPI_MspInit+0x360>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001636:	4a46      	ldr	r2, [pc, #280]	@ (8001750 <HAL_SPI_MspInit+0x360>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001640:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <HAL_SPI_MspInit+0x360>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800164e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001668:	2305      	movs	r3, #5
 800166a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001672:	4619      	mov	r1, r3
 8001674:	4837      	ldr	r0, [pc, #220]	@ (8001754 <HAL_SPI_MspInit+0x364>)
 8001676:	f004 faf1 	bl	8005c5c <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA1_Stream0;
 800167a:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 800167c:	4a37      	ldr	r2, [pc, #220]	@ (800175c <HAL_SPI_MspInit+0x36c>)
 800167e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001680:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 8001682:	2254      	movs	r2, #84	@ 0x54
 8001684:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001686:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 8001688:	2240      	movs	r2, #64	@ 0x40
 800168a:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001692:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 8001694:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001698:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169a:	4b2f      	ldr	r3, [pc, #188]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80016a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 80016ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016b2:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b4:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80016ba:	4827      	ldr	r0, [pc, #156]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 80016bc:	f000 fe00 	bl	80022c0 <HAL_DMA_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_SPI_MspInit+0x2da>
      Error_Handler();
 80016c6:	f7ff fe6f 	bl	80013a8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a22      	ldr	r2, [pc, #136]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 80016ce:	679a      	str	r2, [r3, #120]	@ 0x78
 80016d0:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <HAL_SPI_MspInit+0x368>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_rx.Instance = DMA1_Stream1;
 80016d6:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 80016d8:	4a22      	ldr	r2, [pc, #136]	@ (8001764 <HAL_SPI_MspInit+0x374>)
 80016da:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80016dc:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 80016de:	2253      	movs	r2, #83	@ 0x53
 80016e0:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 80016f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 800170a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800170e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001716:	4812      	ldr	r0, [pc, #72]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 8001718:	f000 fdd2 	bl	80022c0 <HAL_DMA_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_SPI_MspInit+0x336>
      Error_Handler();
 8001722:	f7ff fe41 	bl	80013a8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 800172a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800172c:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <HAL_SPI_MspInit+0x370>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2105      	movs	r1, #5
 8001736:	2054      	movs	r0, #84	@ 0x54
 8001738:	f000 fd22 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800173c:	2054      	movs	r0, #84	@ 0x54
 800173e:	f000 fd39 	bl	80021b4 <HAL_NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	37f0      	adds	r7, #240	@ 0xf0
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40013400 	.word	0x40013400
 8001750:	58024400 	.word	0x58024400
 8001754:	58021000 	.word	0x58021000
 8001758:	24004c6c 	.word	0x24004c6c
 800175c:	40020010 	.word	0x40020010
 8001760:	24004ce4 	.word	0x24004ce4
 8001764:	40020028 	.word	0x40020028

08001768 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a23      	ldr	r2, [pc, #140]	@ (8001804 <HAL_TIM_Base_MspInit+0x9c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d10f      	bne.n	800179a <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <HAL_TIM_Base_MspInit+0xa0>)
 800177c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001780:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <HAL_TIM_Base_MspInit+0xa0>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <HAL_TIM_Base_MspInit+0xa0>)
 800178c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM23_MspInit 1 */

    /* USER CODE END TIM23_MspInit 1 */
  }

}
 8001798:	e030      	b.n	80017fc <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a2:	d117      	bne.n	80017d4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a4:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <HAL_TIM_Base_MspInit+0xa0>)
 80017a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017aa:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <HAL_TIM_Base_MspInit+0xa0>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <HAL_TIM_Base_MspInit+0xa0>)
 80017b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2105      	movs	r1, #5
 80017c6:	201c      	movs	r0, #28
 80017c8:	f000 fcda 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017cc:	201c      	movs	r0, #28
 80017ce:	f000 fcf1 	bl	80021b4 <HAL_NVIC_EnableIRQ>
}
 80017d2:	e013      	b.n	80017fc <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM23)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	@ (800180c <HAL_TIM_Base_MspInit+0xa4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d10e      	bne.n	80017fc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <HAL_TIM_Base_MspInit+0xa0>)
 80017e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80017e4:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <HAL_TIM_Base_MspInit+0xa0>)
 80017e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ea:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_TIM_Base_MspInit+0xa0>)
 80017f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80017f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40010000 	.word	0x40010000
 8001808:	58024400 	.word	0x58024400
 800180c:	4000e000 	.word	0x4000e000

08001810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b090      	sub	sp, #64	@ 0x40
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	d827      	bhi.n	800186e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800181e:	2200      	movs	r2, #0
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	2036      	movs	r0, #54	@ 0x36
 8001824:	f000 fcac 	bl	8002180 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001828:	2036      	movs	r0, #54	@ 0x36
 800182a:	f000 fcc3 	bl	80021b4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800182e:	4a29      	ldr	r2, [pc, #164]	@ (80018d4 <HAL_InitTick+0xc4>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001834:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <HAL_InitTick+0xc8>)
 8001836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800183a:	4a27      	ldr	r2, [pc, #156]	@ (80018d8 <HAL_InitTick+0xc8>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001844:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <HAL_InitTick+0xc8>)
 8001846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001852:	f107 0210 	add.w	r2, r7, #16
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f005 fb6d 	bl	8006f3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <HAL_InitTick+0x6a>
 800186c:	e001      	b.n	8001872 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e02b      	b.n	80018ca <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001872:	f005 fb4d 	bl	8006f10 <HAL_RCC_GetPCLK1Freq>
 8001876:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001878:	e004      	b.n	8001884 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800187a:	f005 fb49 	bl	8006f10 <HAL_RCC_GetPCLK1Freq>
 800187e:	4603      	mov	r3, r0
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001886:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <HAL_InitTick+0xcc>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	0c9b      	lsrs	r3, r3, #18
 800188e:	3b01      	subs	r3, #1
 8001890:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <HAL_InitTick+0xd0>)
 8001894:	4a13      	ldr	r2, [pc, #76]	@ (80018e4 <HAL_InitTick+0xd4>)
 8001896:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_InitTick+0xd0>)
 800189a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800189e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018a0:	4a0f      	ldr	r2, [pc, #60]	@ (80018e0 <HAL_InitTick+0xd0>)
 80018a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <HAL_InitTick+0xd0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <HAL_InitTick+0xd0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018b2:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <HAL_InitTick+0xd0>)
 80018b4:	f008 fa49 	bl	8009d4a <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d104      	bne.n	80018c8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018be:	4808      	ldr	r0, [pc, #32]	@ (80018e0 <HAL_InitTick+0xd0>)
 80018c0:	f008 fb18 	bl	8009ef4 <HAL_TIM_Base_Start_IT>
 80018c4:	4603      	mov	r3, r0
 80018c6:	e000      	b.n	80018ca <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3740      	adds	r7, #64	@ 0x40
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	240049c8 	.word	0x240049c8
 80018d8:	58024400 	.word	0x58024400
 80018dc:	431bde83 	.word	0x431bde83
 80018e0:	2400589c 	.word	0x2400589c
 80018e4:	40001000 	.word	0x40001000

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <NMI_Handler+0x4>

080018f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <MemManage_Handler+0x4>

08001900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <UsageFault_Handler+0x4>

08001910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA1_Stream0_IRQHandler+0x10>)
 8001926:	f001 fa69 	bl	8002dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	24004c6c 	.word	0x24004c6c

08001934 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <DMA1_Stream1_IRQHandler+0x10>)
 800193a:	f001 fa5f 	bl	8002dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	24004ce4 	.word	0x24004ce4

08001948 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA1_Stream2_IRQHandler+0x10>)
 800194e:	f001 fa55 	bl	8002dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	24004b7c 	.word	0x24004b7c

0800195c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA1_Stream3_IRQHandler+0x10>)
 8001962:	f001 fa4b 	bl	8002dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	24004bf4 	.word	0x24004bf4

08001970 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001974:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001978:	f004 fb31 	bl	8005fde <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <TIM2_IRQHandler+0x10>)
 8001986:	f008 fbfd 	bl	800a184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	24004da8 	.word	0x24004da8

08001994 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <SPI1_IRQHandler+0x10>)
 800199a:	f007 fed3 	bl	8009744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	24004a6c 	.word	0x24004a6c

080019a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <TIM6_DAC_IRQHandler+0x10>)
 80019ae:	f008 fbe9 	bl	800a184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2400589c 	.word	0x2400589c

080019bc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <ETH_IRQHandler+0x10>)
 80019c2:	f002 ffb7 	bl	8004934 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	24005970 	.word	0x24005970

080019d0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <SPI4_IRQHandler+0x10>)
 80019d6:	f007 feb5 	bl	8009744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	24004af4 	.word	0x24004af4

080019e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return 1;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_kill>:

int _kill(int pid, int sig)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <_kill+0x20>)
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
  return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	24014e58 	.word	0x24014e58

08001a18 <_exit>:

void _exit (int status)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ffe5 	bl	80019f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a2a:	bf00      	nop
 8001a2c:	e7fd      	b.n	8001a2a <_exit+0x12>

08001a2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e00a      	b.n	8001a56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a40:	f3af 8000 	nop.w
 8001a44:	4601      	mov	r1, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	60ba      	str	r2, [r7, #8]
 8001a4c:	b2ca      	uxtb	r2, r1
 8001a4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dbf0      	blt.n	8001a40 <_read+0x12>
  }

  return len;
 8001a5e:	687b      	ldr	r3, [r7, #4]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e009      	b.n	8001a8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	60ba      	str	r2, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dbf1      	blt.n	8001a7a <_write+0x12>
  }
  return len;
 8001a96:	687b      	ldr	r3, [r7, #4]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_close>:

int _close(int file)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_isatty>:

int _isatty(int file)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ae0:	2301      	movs	r3, #1
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	@ (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d205      	bcs.n	8001b44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <_sbrk+0x6c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a06      	ldr	r2, [pc, #24]	@ (8001b6c <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	24050000 	.word	0x24050000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	240058e8 	.word	0x240058e8
 8001b70:	24014e68 	.word	0x24014e68
 8001b74:	24014e58 	.word	0x24014e58

08001b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c68 <SystemInit+0xf0>)
 8001b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b84:	4a38      	ldr	r2, [pc, #224]	@ (8001c68 <SystemInit+0xf0>)
 8001b86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b8a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b8e:	4b37      	ldr	r3, [pc, #220]	@ (8001c6c <SystemInit+0xf4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d807      	bhi.n	8001baa <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b9a:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <SystemInit+0xf4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 030f 	bic.w	r3, r3, #15
 8001ba2:	4a32      	ldr	r2, [pc, #200]	@ (8001c6c <SystemInit+0xf4>)
 8001ba4:	f043 0307 	orr.w	r3, r3, #7
 8001ba8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001baa:	4b31      	ldr	r3, [pc, #196]	@ (8001c70 <SystemInit+0xf8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a30      	ldr	r2, [pc, #192]	@ (8001c70 <SystemInit+0xf8>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c70 <SystemInit+0xf8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c70 <SystemInit+0xf8>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	492b      	ldr	r1, [pc, #172]	@ (8001c70 <SystemInit+0xf8>)
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <SystemInit+0xfc>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc8:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <SystemInit+0xf4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <SystemInit+0xf4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 030f 	bic.w	r3, r3, #15
 8001bdc:	4a23      	ldr	r2, [pc, #140]	@ (8001c6c <SystemInit+0xf4>)
 8001bde:	f043 0307 	orr.w	r3, r3, #7
 8001be2:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001be4:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <SystemInit+0xf8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bea:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <SystemInit+0xf8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <SystemInit+0xf8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <SystemInit+0xf8>)
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <SystemInit+0x100>)
 8001bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <SystemInit+0xf8>)
 8001bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001c7c <SystemInit+0x104>)
 8001c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c02:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <SystemInit+0xf8>)
 8001c04:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <SystemInit+0x108>)
 8001c06:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c08:	4b19      	ldr	r3, [pc, #100]	@ (8001c70 <SystemInit+0xf8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <SystemInit+0xf8>)
 8001c10:	4a1b      	ldr	r2, [pc, #108]	@ (8001c80 <SystemInit+0x108>)
 8001c12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <SystemInit+0xf8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <SystemInit+0xf8>)
 8001c1c:	4a18      	ldr	r2, [pc, #96]	@ (8001c80 <SystemInit+0x108>)
 8001c1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <SystemInit+0xf8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <SystemInit+0xf8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <SystemInit+0xf8>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <SystemInit+0xf8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001c38:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <SystemInit+0xf8>)
 8001c3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c70 <SystemInit+0xf8>)
 8001c40:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001c44:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <SystemInit+0xf8>)
 8001c4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c4e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001c50:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <SystemInit+0x10c>)
 8001c54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00
 8001c6c:	52002000 	.word	0x52002000
 8001c70:	58024400 	.word	0x58024400
 8001c74:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c78:	02020200 	.word	0x02020200
 8001c7c:	01ff0000 	.word	0x01ff0000
 8001c80:	01010280 	.word	0x01010280
 8001c84:	52004000 	.word	0x52004000

08001c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c8c:	f7ff ff74 	bl	8001b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c92:	490d      	ldr	r1, [pc, #52]	@ (8001cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f019 f88f 	bl	801add8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cba:	f7fe fb79 	bl	80003b0 <main>
  bx  lr
 8001cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cc0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001cc4:	24004984 	.word	0x24004984
  ldr r1, =_edata
 8001cc8:	24004a50 	.word	0x24004a50
  ldr r2, =_sidata
 8001ccc:	0801e910 	.word	0x0801e910
  ldr r2, =_sbss
 8001cd0:	24004a50 	.word	0x24004a50
  ldr r4, =_ebss
 8001cd4:	24014e68 	.word	0x24014e68

08001cd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC3_IRQHandler>

08001cda <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <LAN8742_RegisterBusIO+0x28>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <LAN8742_RegisterBusIO+0x28>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <LAN8742_RegisterBusIO+0x28>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e014      	b.n	8001d32 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d139      	bne.n	8001dce <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e01c      	b.n	8001dae <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f107 020c 	add.w	r2, r7, #12
 8001d7c:	2112      	movs	r1, #18
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	4798      	blx	r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da03      	bge.n	8001d90 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001d88:	f06f 0304 	mvn.w	r3, #4
 8001d8c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001d8e:	e00b      	b.n	8001da8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d105      	bne.n	8001da8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
         break;
 8001da6:	e005      	b.n	8001db4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b1f      	cmp	r3, #31
 8001db2:	d9df      	bls.n	8001d74 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b1f      	cmp	r3, #31
 8001dba:	d902      	bls.n	8001dc2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001dbc:	f06f 0302 	mvn.w	r3, #2
 8001dc0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001dce:	693b      	ldr	r3, [r7, #16]
 }
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6810      	ldr	r0, [r2, #0]
 8001dec:	f107 020c 	add.w	r2, r7, #12
 8001df0:	2101      	movs	r1, #1
 8001df2:	4798      	blx	r3
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da02      	bge.n	8001e00 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001dfa:	f06f 0304 	mvn.w	r3, #4
 8001dfe:	e06e      	b.n	8001ede <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6810      	ldr	r0, [r2, #0]
 8001e08:	f107 020c 	add.w	r2, r7, #12
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	4798      	blx	r3
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da02      	bge.n	8001e1c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e16:	f06f 0304 	mvn.w	r3, #4
 8001e1a:	e060      	b.n	8001ede <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e059      	b.n	8001ede <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6810      	ldr	r0, [r2, #0]
 8001e32:	f107 020c 	add.w	r2, r7, #12
 8001e36:	2100      	movs	r1, #0
 8001e38:	4798      	blx	r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da02      	bge.n	8001e46 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e40:	f06f 0304 	mvn.w	r3, #4
 8001e44:	e04b      	b.n	8001ede <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d11b      	bne.n	8001e88 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <LAN8742_GetLinkState+0x90>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e64:	2302      	movs	r3, #2
 8001e66:	e03a      	b.n	8001ede <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e033      	b.n	8001ede <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e80:	2304      	movs	r3, #4
 8001e82:	e02c      	b.n	8001ede <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e84:	2305      	movs	r3, #5
 8001e86:	e02a      	b.n	8001ede <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6810      	ldr	r0, [r2, #0]
 8001e90:	f107 020c 	add.w	r2, r7, #12
 8001e94:	211f      	movs	r1, #31
 8001e96:	4798      	blx	r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	da02      	bge.n	8001ea4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001e9e:	f06f 0304 	mvn.w	r3, #4
 8001ea2:	e01c      	b.n	8001ede <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001eae:	2306      	movs	r3, #6
 8001eb0:	e015      	b.n	8001ede <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 031c 	and.w	r3, r3, #28
 8001eb8:	2b18      	cmp	r3, #24
 8001eba:	d101      	bne.n	8001ec0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e00e      	b.n	8001ede <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 031c 	and.w	r3, r3, #28
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d101      	bne.n	8001ece <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e007      	b.n	8001ede <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 031c 	and.w	r3, r3, #28
 8001ed4:	2b14      	cmp	r3, #20
 8001ed6:	d101      	bne.n	8001edc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ed8:	2304      	movs	r3, #4
 8001eda:	e000      	b.n	8001ede <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001edc:	2305      	movs	r3, #5
    }
  }
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f000 f93b 	bl	800216a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ef4:	f004 fe62 	bl	8006bbc <HAL_RCC_GetSysClockFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_Init+0x68>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	4913      	ldr	r1, [pc, #76]	@ (8001f54 <HAL_Init+0x6c>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f12:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <HAL_Init+0x68>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <HAL_Init+0x6c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_Init+0x70>)
 8001f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f5c <HAL_Init+0x74>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f32:	200f      	movs	r0, #15
 8001f34:	f7ff fc6c 	bl	8001810 <HAL_InitTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e002      	b.n	8001f48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f42:	f7ff fa37 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	58024400 	.word	0x58024400
 8001f54:	0801e6cc 	.word	0x0801e6cc
 8001f58:	240049c4 	.word	0x240049c4
 8001f5c:	240049c0 	.word	0x240049c0

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	240049cc 	.word	0x240049cc
 8001f84:	240058ec 	.word	0x240058ec

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	240058ec 	.word	0x240058ec

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	240049cc 	.word	0x240049cc

08001fe8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001ff8:	4904      	ldr	r1, [pc, #16]	@ (800200c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	58000400 	.word	0x58000400

08002010 <__NVIC_SetPriorityGrouping>:
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <__NVIC_SetPriorityGrouping+0x40>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	4313      	orrs	r3, r2
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	@ (8002050 <__NVIC_SetPriorityGrouping+0x40>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00
 8002054:	05fa0000 	.word	0x05fa0000

08002058 <__NVIC_GetPriorityGrouping>:
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4907      	ldr	r1, [pc, #28]	@ (80020ac <__NVIC_EnableIRQ+0x38>)
 800208e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	@ (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff4c 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800218e:	f7ff ff63 	bl	8002058 <__NVIC_GetPriorityGrouping>
 8002192:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68b9      	ldr	r1, [r7, #8]
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f7ff ffb3 	bl	8002104 <NVIC_EncodePriority>
 800219e:	4602      	mov	r2, r0
 80021a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff82 	bl	80020b0 <__NVIC_SetPriority>
}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff56 	bl	8002074 <__NVIC_EnableIRQ>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021d4:	f3bf 8f5f 	dmb	sy
}
 80021d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021da:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_MPU_Disable+0x28>)
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	4a06      	ldr	r2, [pc, #24]	@ (80021f8 <HAL_MPU_Disable+0x28>)
 80021e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_MPU_Disable+0x2c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	605a      	str	r2, [r3, #4]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	e000ed90 	.word	0xe000ed90

08002200 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002208:	4a0b      	ldr	r2, [pc, #44]	@ (8002238 <HAL_MPU_Enable+0x38>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <HAL_MPU_Enable+0x3c>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002216:	4a09      	ldr	r2, [pc, #36]	@ (800223c <HAL_MPU_Enable+0x3c>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800221c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800221e:	f3bf 8f4f 	dsb	sy
}
 8002222:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002224:	f3bf 8f6f 	isb	sy
}
 8002228:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed90 	.word	0xe000ed90
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	785a      	ldrb	r2, [r3, #1]
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_MPU_ConfigRegion+0x7c>)
 800224e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002250:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <HAL_MPU_ConfigRegion+0x7c>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	4a19      	ldr	r2, [pc, #100]	@ (80022bc <HAL_MPU_ConfigRegion+0x7c>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800225c:	4a17      	ldr	r2, [pc, #92]	@ (80022bc <HAL_MPU_ConfigRegion+0x7c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7b1b      	ldrb	r3, [r3, #12]
 8002268:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7adb      	ldrb	r3, [r3, #11]
 800226e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7a9b      	ldrb	r3, [r3, #10]
 8002276:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002278:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7b5b      	ldrb	r3, [r3, #13]
 800227e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002280:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7b9b      	ldrb	r3, [r3, #14]
 8002286:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002288:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7bdb      	ldrb	r3, [r3, #15]
 800228e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002290:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7a5b      	ldrb	r3, [r3, #9]
 8002296:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002298:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7a1b      	ldrb	r3, [r3, #8]
 800229e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022a8:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022ac:	6113      	str	r3, [r2, #16]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed90 	.word	0xe000ed90

080022c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff fe5e 	bl	8001f88 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e312      	b.n	80028fe <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a66      	ldr	r2, [pc, #408]	@ (8002478 <HAL_DMA_Init+0x1b8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d04a      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a65      	ldr	r2, [pc, #404]	@ (800247c <HAL_DMA_Init+0x1bc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d045      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a63      	ldr	r2, [pc, #396]	@ (8002480 <HAL_DMA_Init+0x1c0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d040      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a62      	ldr	r2, [pc, #392]	@ (8002484 <HAL_DMA_Init+0x1c4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d03b      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a60      	ldr	r2, [pc, #384]	@ (8002488 <HAL_DMA_Init+0x1c8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d036      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a5f      	ldr	r2, [pc, #380]	@ (800248c <HAL_DMA_Init+0x1cc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d031      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a5d      	ldr	r2, [pc, #372]	@ (8002490 <HAL_DMA_Init+0x1d0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02c      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a5c      	ldr	r2, [pc, #368]	@ (8002494 <HAL_DMA_Init+0x1d4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d027      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a5a      	ldr	r2, [pc, #360]	@ (8002498 <HAL_DMA_Init+0x1d8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d022      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a59      	ldr	r2, [pc, #356]	@ (800249c <HAL_DMA_Init+0x1dc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d01d      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a57      	ldr	r2, [pc, #348]	@ (80024a0 <HAL_DMA_Init+0x1e0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d018      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a56      	ldr	r2, [pc, #344]	@ (80024a4 <HAL_DMA_Init+0x1e4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a54      	ldr	r2, [pc, #336]	@ (80024a8 <HAL_DMA_Init+0x1e8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a53      	ldr	r2, [pc, #332]	@ (80024ac <HAL_DMA_Init+0x1ec>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a51      	ldr	r2, [pc, #324]	@ (80024b0 <HAL_DMA_Init+0x1f0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_DMA_Init+0xb8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a50      	ldr	r2, [pc, #320]	@ (80024b4 <HAL_DMA_Init+0x1f4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_DMA_Init+0xbc>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_DMA_Init+0xbe>
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 813c 	beq.w	80025fc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a37      	ldr	r2, [pc, #220]	@ (8002478 <HAL_DMA_Init+0x1b8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d04a      	beq.n	8002434 <HAL_DMA_Init+0x174>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a36      	ldr	r2, [pc, #216]	@ (800247c <HAL_DMA_Init+0x1bc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d045      	beq.n	8002434 <HAL_DMA_Init+0x174>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a34      	ldr	r2, [pc, #208]	@ (8002480 <HAL_DMA_Init+0x1c0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d040      	beq.n	8002434 <HAL_DMA_Init+0x174>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a33      	ldr	r2, [pc, #204]	@ (8002484 <HAL_DMA_Init+0x1c4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d03b      	beq.n	8002434 <HAL_DMA_Init+0x174>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a31      	ldr	r2, [pc, #196]	@ (8002488 <HAL_DMA_Init+0x1c8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d036      	beq.n	8002434 <HAL_DMA_Init+0x174>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a30      	ldr	r2, [pc, #192]	@ (800248c <HAL_DMA_Init+0x1cc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d031      	beq.n	8002434 <HAL_DMA_Init+0x174>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002490 <HAL_DMA_Init+0x1d0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d02c      	beq.n	8002434 <HAL_DMA_Init+0x174>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2d      	ldr	r2, [pc, #180]	@ (8002494 <HAL_DMA_Init+0x1d4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d027      	beq.n	8002434 <HAL_DMA_Init+0x174>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002498 <HAL_DMA_Init+0x1d8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d022      	beq.n	8002434 <HAL_DMA_Init+0x174>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2a      	ldr	r2, [pc, #168]	@ (800249c <HAL_DMA_Init+0x1dc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d01d      	beq.n	8002434 <HAL_DMA_Init+0x174>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a28      	ldr	r2, [pc, #160]	@ (80024a0 <HAL_DMA_Init+0x1e0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d018      	beq.n	8002434 <HAL_DMA_Init+0x174>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a27      	ldr	r2, [pc, #156]	@ (80024a4 <HAL_DMA_Init+0x1e4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_DMA_Init+0x174>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a25      	ldr	r2, [pc, #148]	@ (80024a8 <HAL_DMA_Init+0x1e8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00e      	beq.n	8002434 <HAL_DMA_Init+0x174>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a24      	ldr	r2, [pc, #144]	@ (80024ac <HAL_DMA_Init+0x1ec>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d009      	beq.n	8002434 <HAL_DMA_Init+0x174>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a22      	ldr	r2, [pc, #136]	@ (80024b0 <HAL_DMA_Init+0x1f0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d004      	beq.n	8002434 <HAL_DMA_Init+0x174>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a21      	ldr	r2, [pc, #132]	@ (80024b4 <HAL_DMA_Init+0x1f4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d108      	bne.n	8002446 <HAL_DMA_Init+0x186>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e007      	b.n	8002456 <HAL_DMA_Init+0x196>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0201 	bic.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002456:	e02f      	b.n	80024b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002458:	f7ff fd96 	bl	8001f88 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b05      	cmp	r3, #5
 8002464:	d928      	bls.n	80024b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2203      	movs	r2, #3
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e242      	b.n	80028fe <HAL_DMA_Init+0x63e>
 8002478:	40020010 	.word	0x40020010
 800247c:	40020028 	.word	0x40020028
 8002480:	40020040 	.word	0x40020040
 8002484:	40020058 	.word	0x40020058
 8002488:	40020070 	.word	0x40020070
 800248c:	40020088 	.word	0x40020088
 8002490:	400200a0 	.word	0x400200a0
 8002494:	400200b8 	.word	0x400200b8
 8002498:	40020410 	.word	0x40020410
 800249c:	40020428 	.word	0x40020428
 80024a0:	40020440 	.word	0x40020440
 80024a4:	40020458 	.word	0x40020458
 80024a8:	40020470 	.word	0x40020470
 80024ac:	40020488 	.word	0x40020488
 80024b0:	400204a0 	.word	0x400204a0
 80024b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1c8      	bne.n	8002458 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4b83      	ldr	r3, [pc, #524]	@ (80026e0 <HAL_DMA_Init+0x420>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	2b04      	cmp	r3, #4
 800250a:	d107      	bne.n	800251c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	4313      	orrs	r3, r2
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b28      	cmp	r3, #40	@ 0x28
 8002522:	d903      	bls.n	800252c <HAL_DMA_Init+0x26c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b2e      	cmp	r3, #46	@ 0x2e
 800252a:	d91f      	bls.n	800256c <HAL_DMA_Init+0x2ac>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b3e      	cmp	r3, #62	@ 0x3e
 8002532:	d903      	bls.n	800253c <HAL_DMA_Init+0x27c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b42      	cmp	r3, #66	@ 0x42
 800253a:	d917      	bls.n	800256c <HAL_DMA_Init+0x2ac>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b46      	cmp	r3, #70	@ 0x46
 8002542:	d903      	bls.n	800254c <HAL_DMA_Init+0x28c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b48      	cmp	r3, #72	@ 0x48
 800254a:	d90f      	bls.n	800256c <HAL_DMA_Init+0x2ac>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b4e      	cmp	r3, #78	@ 0x4e
 8002552:	d903      	bls.n	800255c <HAL_DMA_Init+0x29c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b52      	cmp	r3, #82	@ 0x52
 800255a:	d907      	bls.n	800256c <HAL_DMA_Init+0x2ac>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b73      	cmp	r3, #115	@ 0x73
 8002562:	d905      	bls.n	8002570 <HAL_DMA_Init+0x2b0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b77      	cmp	r3, #119	@ 0x77
 800256a:	d801      	bhi.n	8002570 <HAL_DMA_Init+0x2b0>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_DMA_Init+0x2b2>
 8002570:	2300      	movs	r3, #0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800257c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f023 0307 	bic.w	r3, r3, #7
 8002594:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d117      	bne.n	80025d8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f001 fbfa 	bl	8003db4 <DMA_CheckFifoParam>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2240      	movs	r2, #64	@ 0x40
 80025ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e192      	b.n	80028fe <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f001 fb35 	bl	8003c50 <DMA_CalcBaseAndBitshift>
 80025e6:	4603      	mov	r3, r0
 80025e8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	223f      	movs	r2, #63	@ 0x3f
 80025f4:	409a      	lsls	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	e0c8      	b.n	800278e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a38      	ldr	r2, [pc, #224]	@ (80026e4 <HAL_DMA_Init+0x424>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d022      	beq.n	800264c <HAL_DMA_Init+0x38c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a37      	ldr	r2, [pc, #220]	@ (80026e8 <HAL_DMA_Init+0x428>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d01d      	beq.n	800264c <HAL_DMA_Init+0x38c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a35      	ldr	r2, [pc, #212]	@ (80026ec <HAL_DMA_Init+0x42c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d018      	beq.n	800264c <HAL_DMA_Init+0x38c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a34      	ldr	r2, [pc, #208]	@ (80026f0 <HAL_DMA_Init+0x430>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d013      	beq.n	800264c <HAL_DMA_Init+0x38c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a32      	ldr	r2, [pc, #200]	@ (80026f4 <HAL_DMA_Init+0x434>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00e      	beq.n	800264c <HAL_DMA_Init+0x38c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a31      	ldr	r2, [pc, #196]	@ (80026f8 <HAL_DMA_Init+0x438>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d009      	beq.n	800264c <HAL_DMA_Init+0x38c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2f      	ldr	r2, [pc, #188]	@ (80026fc <HAL_DMA_Init+0x43c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_DMA_Init+0x38c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2e      	ldr	r2, [pc, #184]	@ (8002700 <HAL_DMA_Init+0x440>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_DMA_Init+0x390>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_DMA_Init+0x392>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8092 	beq.w	800277c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a21      	ldr	r2, [pc, #132]	@ (80026e4 <HAL_DMA_Init+0x424>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d021      	beq.n	80026a6 <HAL_DMA_Init+0x3e6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a20      	ldr	r2, [pc, #128]	@ (80026e8 <HAL_DMA_Init+0x428>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d01c      	beq.n	80026a6 <HAL_DMA_Init+0x3e6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1e      	ldr	r2, [pc, #120]	@ (80026ec <HAL_DMA_Init+0x42c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d017      	beq.n	80026a6 <HAL_DMA_Init+0x3e6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1d      	ldr	r2, [pc, #116]	@ (80026f0 <HAL_DMA_Init+0x430>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d012      	beq.n	80026a6 <HAL_DMA_Init+0x3e6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1b      	ldr	r2, [pc, #108]	@ (80026f4 <HAL_DMA_Init+0x434>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00d      	beq.n	80026a6 <HAL_DMA_Init+0x3e6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1a      	ldr	r2, [pc, #104]	@ (80026f8 <HAL_DMA_Init+0x438>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d008      	beq.n	80026a6 <HAL_DMA_Init+0x3e6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a18      	ldr	r2, [pc, #96]	@ (80026fc <HAL_DMA_Init+0x43c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d003      	beq.n	80026a6 <HAL_DMA_Init+0x3e6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a17      	ldr	r2, [pc, #92]	@ (8002700 <HAL_DMA_Init+0x440>)
 80026a4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <HAL_DMA_Init+0x444>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b40      	cmp	r3, #64	@ 0x40
 80026cc:	d01c      	beq.n	8002708 <HAL_DMA_Init+0x448>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b80      	cmp	r3, #128	@ 0x80
 80026d4:	d102      	bne.n	80026dc <HAL_DMA_Init+0x41c>
 80026d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026da:	e016      	b.n	800270a <HAL_DMA_Init+0x44a>
 80026dc:	2300      	movs	r3, #0
 80026de:	e014      	b.n	800270a <HAL_DMA_Init+0x44a>
 80026e0:	fe10803f 	.word	0xfe10803f
 80026e4:	58025408 	.word	0x58025408
 80026e8:	5802541c 	.word	0x5802541c
 80026ec:	58025430 	.word	0x58025430
 80026f0:	58025444 	.word	0x58025444
 80026f4:	58025458 	.word	0x58025458
 80026f8:	5802546c 	.word	0x5802546c
 80026fc:	58025480 	.word	0x58025480
 8002700:	58025494 	.word	0x58025494
 8002704:	fffe000f 	.word	0xfffe000f
 8002708:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002710:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002730:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002738:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b6e      	ldr	r3, [pc, #440]	@ (8002908 <HAL_DMA_Init+0x648>)
 8002750:	4413      	add	r3, r2
 8002752:	4a6e      	ldr	r2, [pc, #440]	@ (800290c <HAL_DMA_Init+0x64c>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f001 fa75 	bl	8003c50 <DMA_CalcBaseAndBitshift>
 8002766:	4603      	mov	r3, r0
 8002768:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2201      	movs	r2, #1
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	e008      	b.n	800278e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2240      	movs	r2, #64	@ 0x40
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2203      	movs	r2, #3
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0b7      	b.n	80028fe <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5f      	ldr	r2, [pc, #380]	@ (8002910 <HAL_DMA_Init+0x650>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d072      	beq.n	800287e <HAL_DMA_Init+0x5be>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a5d      	ldr	r2, [pc, #372]	@ (8002914 <HAL_DMA_Init+0x654>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d06d      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002918 <HAL_DMA_Init+0x658>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d068      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a5a      	ldr	r2, [pc, #360]	@ (800291c <HAL_DMA_Init+0x65c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d063      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a59      	ldr	r2, [pc, #356]	@ (8002920 <HAL_DMA_Init+0x660>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d05e      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a57      	ldr	r2, [pc, #348]	@ (8002924 <HAL_DMA_Init+0x664>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d059      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a56      	ldr	r2, [pc, #344]	@ (8002928 <HAL_DMA_Init+0x668>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d054      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a54      	ldr	r2, [pc, #336]	@ (800292c <HAL_DMA_Init+0x66c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d04f      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a53      	ldr	r2, [pc, #332]	@ (8002930 <HAL_DMA_Init+0x670>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d04a      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a51      	ldr	r2, [pc, #324]	@ (8002934 <HAL_DMA_Init+0x674>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d045      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a50      	ldr	r2, [pc, #320]	@ (8002938 <HAL_DMA_Init+0x678>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d040      	beq.n	800287e <HAL_DMA_Init+0x5be>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a4e      	ldr	r2, [pc, #312]	@ (800293c <HAL_DMA_Init+0x67c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d03b      	beq.n	800287e <HAL_DMA_Init+0x5be>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a4d      	ldr	r2, [pc, #308]	@ (8002940 <HAL_DMA_Init+0x680>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d036      	beq.n	800287e <HAL_DMA_Init+0x5be>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a4b      	ldr	r2, [pc, #300]	@ (8002944 <HAL_DMA_Init+0x684>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d031      	beq.n	800287e <HAL_DMA_Init+0x5be>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a4a      	ldr	r2, [pc, #296]	@ (8002948 <HAL_DMA_Init+0x688>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d02c      	beq.n	800287e <HAL_DMA_Init+0x5be>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a48      	ldr	r2, [pc, #288]	@ (800294c <HAL_DMA_Init+0x68c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d027      	beq.n	800287e <HAL_DMA_Init+0x5be>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a47      	ldr	r2, [pc, #284]	@ (8002950 <HAL_DMA_Init+0x690>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d022      	beq.n	800287e <HAL_DMA_Init+0x5be>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a45      	ldr	r2, [pc, #276]	@ (8002954 <HAL_DMA_Init+0x694>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01d      	beq.n	800287e <HAL_DMA_Init+0x5be>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a44      	ldr	r2, [pc, #272]	@ (8002958 <HAL_DMA_Init+0x698>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d018      	beq.n	800287e <HAL_DMA_Init+0x5be>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a42      	ldr	r2, [pc, #264]	@ (800295c <HAL_DMA_Init+0x69c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_DMA_Init+0x5be>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a41      	ldr	r2, [pc, #260]	@ (8002960 <HAL_DMA_Init+0x6a0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00e      	beq.n	800287e <HAL_DMA_Init+0x5be>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3f      	ldr	r2, [pc, #252]	@ (8002964 <HAL_DMA_Init+0x6a4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d009      	beq.n	800287e <HAL_DMA_Init+0x5be>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a3e      	ldr	r2, [pc, #248]	@ (8002968 <HAL_DMA_Init+0x6a8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d004      	beq.n	800287e <HAL_DMA_Init+0x5be>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a3c      	ldr	r2, [pc, #240]	@ (800296c <HAL_DMA_Init+0x6ac>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_DMA_Init+0x5c2>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_DMA_Init+0x5c4>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d032      	beq.n	80028ee <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f001 fb0f 	bl	8003eac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b80      	cmp	r3, #128	@ 0x80
 8002894:	d102      	bne.n	800289c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d010      	beq.n	80028dc <HAL_DMA_Init+0x61c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d80c      	bhi.n	80028dc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f001 fb8c 	bl	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	e008      	b.n	80028ee <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	a7fdabf8 	.word	0xa7fdabf8
 800290c:	cccccccd 	.word	0xcccccccd
 8002910:	40020010 	.word	0x40020010
 8002914:	40020028 	.word	0x40020028
 8002918:	40020040 	.word	0x40020040
 800291c:	40020058 	.word	0x40020058
 8002920:	40020070 	.word	0x40020070
 8002924:	40020088 	.word	0x40020088
 8002928:	400200a0 	.word	0x400200a0
 800292c:	400200b8 	.word	0x400200b8
 8002930:	40020410 	.word	0x40020410
 8002934:	40020428 	.word	0x40020428
 8002938:	40020440 	.word	0x40020440
 800293c:	40020458 	.word	0x40020458
 8002940:	40020470 	.word	0x40020470
 8002944:	40020488 	.word	0x40020488
 8002948:	400204a0 	.word	0x400204a0
 800294c:	400204b8 	.word	0x400204b8
 8002950:	58025408 	.word	0x58025408
 8002954:	5802541c 	.word	0x5802541c
 8002958:	58025430 	.word	0x58025430
 800295c:	58025444 	.word	0x58025444
 8002960:	58025458 	.word	0x58025458
 8002964:	5802546c 	.word	0x5802546c
 8002968:	58025480 	.word	0x58025480
 800296c:	58025494 	.word	0x58025494

08002970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e237      	b.n	8002df2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d004      	beq.n	8002998 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2280      	movs	r2, #128	@ 0x80
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e22c      	b.n	8002df2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5c      	ldr	r2, [pc, #368]	@ (8002b10 <HAL_DMA_Abort_IT+0x1a0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d04a      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b14 <HAL_DMA_Abort_IT+0x1a4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d045      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a59      	ldr	r2, [pc, #356]	@ (8002b18 <HAL_DMA_Abort_IT+0x1a8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d040      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a58      	ldr	r2, [pc, #352]	@ (8002b1c <HAL_DMA_Abort_IT+0x1ac>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d03b      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a56      	ldr	r2, [pc, #344]	@ (8002b20 <HAL_DMA_Abort_IT+0x1b0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d036      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a55      	ldr	r2, [pc, #340]	@ (8002b24 <HAL_DMA_Abort_IT+0x1b4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d031      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a53      	ldr	r2, [pc, #332]	@ (8002b28 <HAL_DMA_Abort_IT+0x1b8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02c      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a52      	ldr	r2, [pc, #328]	@ (8002b2c <HAL_DMA_Abort_IT+0x1bc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d027      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a50      	ldr	r2, [pc, #320]	@ (8002b30 <HAL_DMA_Abort_IT+0x1c0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d022      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a4f      	ldr	r2, [pc, #316]	@ (8002b34 <HAL_DMA_Abort_IT+0x1c4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d01d      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a4d      	ldr	r2, [pc, #308]	@ (8002b38 <HAL_DMA_Abort_IT+0x1c8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d018      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b3c <HAL_DMA_Abort_IT+0x1cc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a4a      	ldr	r2, [pc, #296]	@ (8002b40 <HAL_DMA_Abort_IT+0x1d0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00e      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a49      	ldr	r2, [pc, #292]	@ (8002b44 <HAL_DMA_Abort_IT+0x1d4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a47      	ldr	r2, [pc, #284]	@ (8002b48 <HAL_DMA_Abort_IT+0x1d8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a46      	ldr	r2, [pc, #280]	@ (8002b4c <HAL_DMA_Abort_IT+0x1dc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <HAL_DMA_Abort_IT+0xcc>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_DMA_Abort_IT+0xce>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8086 	beq.w	8002b50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2204      	movs	r2, #4
 8002a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2f      	ldr	r2, [pc, #188]	@ (8002b10 <HAL_DMA_Abort_IT+0x1a0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d04a      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b14 <HAL_DMA_Abort_IT+0x1a4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d045      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2c      	ldr	r2, [pc, #176]	@ (8002b18 <HAL_DMA_Abort_IT+0x1a8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d040      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b1c <HAL_DMA_Abort_IT+0x1ac>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d03b      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a29      	ldr	r2, [pc, #164]	@ (8002b20 <HAL_DMA_Abort_IT+0x1b0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d036      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a28      	ldr	r2, [pc, #160]	@ (8002b24 <HAL_DMA_Abort_IT+0x1b4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d031      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a26      	ldr	r2, [pc, #152]	@ (8002b28 <HAL_DMA_Abort_IT+0x1b8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d02c      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a25      	ldr	r2, [pc, #148]	@ (8002b2c <HAL_DMA_Abort_IT+0x1bc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d027      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a23      	ldr	r2, [pc, #140]	@ (8002b30 <HAL_DMA_Abort_IT+0x1c0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d022      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a22      	ldr	r2, [pc, #136]	@ (8002b34 <HAL_DMA_Abort_IT+0x1c4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d01d      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a20      	ldr	r2, [pc, #128]	@ (8002b38 <HAL_DMA_Abort_IT+0x1c8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d018      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <HAL_DMA_Abort_IT+0x1cc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b40 <HAL_DMA_Abort_IT+0x1d0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00e      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b44 <HAL_DMA_Abort_IT+0x1d4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d009      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1a      	ldr	r2, [pc, #104]	@ (8002b48 <HAL_DMA_Abort_IT+0x1d8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_DMA_Abort_IT+0x17c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a19      	ldr	r2, [pc, #100]	@ (8002b4c <HAL_DMA_Abort_IT+0x1dc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d108      	bne.n	8002afe <HAL_DMA_Abort_IT+0x18e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e178      	b.n	8002df0 <HAL_DMA_Abort_IT+0x480>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e16f      	b.n	8002df0 <HAL_DMA_Abort_IT+0x480>
 8002b10:	40020010 	.word	0x40020010
 8002b14:	40020028 	.word	0x40020028
 8002b18:	40020040 	.word	0x40020040
 8002b1c:	40020058 	.word	0x40020058
 8002b20:	40020070 	.word	0x40020070
 8002b24:	40020088 	.word	0x40020088
 8002b28:	400200a0 	.word	0x400200a0
 8002b2c:	400200b8 	.word	0x400200b8
 8002b30:	40020410 	.word	0x40020410
 8002b34:	40020428 	.word	0x40020428
 8002b38:	40020440 	.word	0x40020440
 8002b3c:	40020458 	.word	0x40020458
 8002b40:	40020470 	.word	0x40020470
 8002b44:	40020488 	.word	0x40020488
 8002b48:	400204a0 	.word	0x400204a0
 8002b4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 020e 	bic.w	r2, r2, #14
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6c      	ldr	r2, [pc, #432]	@ (8002d18 <HAL_DMA_Abort_IT+0x3a8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d04a      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8002d1c <HAL_DMA_Abort_IT+0x3ac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d045      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a69      	ldr	r2, [pc, #420]	@ (8002d20 <HAL_DMA_Abort_IT+0x3b0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d040      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a68      	ldr	r2, [pc, #416]	@ (8002d24 <HAL_DMA_Abort_IT+0x3b4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d03b      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a66      	ldr	r2, [pc, #408]	@ (8002d28 <HAL_DMA_Abort_IT+0x3b8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d036      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a65      	ldr	r2, [pc, #404]	@ (8002d2c <HAL_DMA_Abort_IT+0x3bc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d031      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a63      	ldr	r2, [pc, #396]	@ (8002d30 <HAL_DMA_Abort_IT+0x3c0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02c      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a62      	ldr	r2, [pc, #392]	@ (8002d34 <HAL_DMA_Abort_IT+0x3c4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d027      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a60      	ldr	r2, [pc, #384]	@ (8002d38 <HAL_DMA_Abort_IT+0x3c8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d022      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8002d3c <HAL_DMA_Abort_IT+0x3cc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d01d      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d40 <HAL_DMA_Abort_IT+0x3d0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d018      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002d44 <HAL_DMA_Abort_IT+0x3d4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d013      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5a      	ldr	r2, [pc, #360]	@ (8002d48 <HAL_DMA_Abort_IT+0x3d8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00e      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a59      	ldr	r2, [pc, #356]	@ (8002d4c <HAL_DMA_Abort_IT+0x3dc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a57      	ldr	r2, [pc, #348]	@ (8002d50 <HAL_DMA_Abort_IT+0x3e0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x290>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a56      	ldr	r2, [pc, #344]	@ (8002d54 <HAL_DMA_Abort_IT+0x3e4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d108      	bne.n	8002c12 <HAL_DMA_Abort_IT+0x2a2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e007      	b.n	8002c22 <HAL_DMA_Abort_IT+0x2b2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3c      	ldr	r2, [pc, #240]	@ (8002d18 <HAL_DMA_Abort_IT+0x3a8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d072      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a3a      	ldr	r2, [pc, #232]	@ (8002d1c <HAL_DMA_Abort_IT+0x3ac>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d06d      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a39      	ldr	r2, [pc, #228]	@ (8002d20 <HAL_DMA_Abort_IT+0x3b0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d068      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a37      	ldr	r2, [pc, #220]	@ (8002d24 <HAL_DMA_Abort_IT+0x3b4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d063      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a36      	ldr	r2, [pc, #216]	@ (8002d28 <HAL_DMA_Abort_IT+0x3b8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d05e      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a34      	ldr	r2, [pc, #208]	@ (8002d2c <HAL_DMA_Abort_IT+0x3bc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d059      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a33      	ldr	r2, [pc, #204]	@ (8002d30 <HAL_DMA_Abort_IT+0x3c0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d054      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a31      	ldr	r2, [pc, #196]	@ (8002d34 <HAL_DMA_Abort_IT+0x3c4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04f      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a30      	ldr	r2, [pc, #192]	@ (8002d38 <HAL_DMA_Abort_IT+0x3c8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d04a      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2e      	ldr	r2, [pc, #184]	@ (8002d3c <HAL_DMA_Abort_IT+0x3cc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d045      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d40 <HAL_DMA_Abort_IT+0x3d0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d040      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2b      	ldr	r2, [pc, #172]	@ (8002d44 <HAL_DMA_Abort_IT+0x3d4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d03b      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002d48 <HAL_DMA_Abort_IT+0x3d8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d036      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a28      	ldr	r2, [pc, #160]	@ (8002d4c <HAL_DMA_Abort_IT+0x3dc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a27      	ldr	r2, [pc, #156]	@ (8002d50 <HAL_DMA_Abort_IT+0x3e0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d02c      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a25      	ldr	r2, [pc, #148]	@ (8002d54 <HAL_DMA_Abort_IT+0x3e4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a24      	ldr	r2, [pc, #144]	@ (8002d58 <HAL_DMA_Abort_IT+0x3e8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a22      	ldr	r2, [pc, #136]	@ (8002d5c <HAL_DMA_Abort_IT+0x3ec>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a21      	ldr	r2, [pc, #132]	@ (8002d60 <HAL_DMA_Abort_IT+0x3f0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <HAL_DMA_Abort_IT+0x3f4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1e      	ldr	r2, [pc, #120]	@ (8002d68 <HAL_DMA_Abort_IT+0x3f8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d6c <HAL_DMA_Abort_IT+0x3fc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	@ (8002d70 <HAL_DMA_Abort_IT+0x400>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x3a2>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a19      	ldr	r2, [pc, #100]	@ (8002d74 <HAL_DMA_Abort_IT+0x404>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d132      	bne.n	8002d78 <HAL_DMA_Abort_IT+0x408>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e031      	b.n	8002d7a <HAL_DMA_Abort_IT+0x40a>
 8002d16:	bf00      	nop
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
 8002d58:	58025408 	.word	0x58025408
 8002d5c:	5802541c 	.word	0x5802541c
 8002d60:	58025430 	.word	0x58025430
 8002d64:	58025444 	.word	0x58025444
 8002d68:	58025458 	.word	0x58025458
 8002d6c:	5802546c 	.word	0x5802546c
 8002d70:	58025480 	.word	0x58025480
 8002d74:	58025494 	.word	0x58025494
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002dac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00c      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dc4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002dce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop

08002dfc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	@ 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e08:	4b67      	ldr	r3, [pc, #412]	@ (8002fa8 <HAL_DMA_IRQHandler+0x1ac>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a67      	ldr	r2, [pc, #412]	@ (8002fac <HAL_DMA_IRQHandler+0x1b0>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0a9b      	lsrs	r3, r3, #10
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1b4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04a      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1b8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d045      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1bc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d040      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5a      	ldr	r2, [pc, #360]	@ (8002fbc <HAL_DMA_IRQHandler+0x1c0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03b      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a59      	ldr	r2, [pc, #356]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1c4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d036      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a57      	ldr	r2, [pc, #348]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1c8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d031      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a56      	ldr	r2, [pc, #344]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1cc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d02c      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a54      	ldr	r2, [pc, #336]	@ (8002fcc <HAL_DMA_IRQHandler+0x1d0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d027      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a53      	ldr	r2, [pc, #332]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1d4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a51      	ldr	r2, [pc, #324]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1d8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a50      	ldr	r2, [pc, #320]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1dc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d018      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8002fdc <HAL_DMA_IRQHandler+0x1e0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1e4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1e8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1ec>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_IRQHandler+0xd2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a48      	ldr	r2, [pc, #288]	@ (8002fec <HAL_DMA_IRQHandler+0x1f0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_DMA_IRQHandler+0xd6>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_DMA_IRQHandler+0xd8>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 842b 	beq.w	8003730 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80a2 	beq.w	8003034 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1b4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d04a      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1b8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d045      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1bc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d040      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2a      	ldr	r2, [pc, #168]	@ (8002fbc <HAL_DMA_IRQHandler+0x1c0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d03b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a28      	ldr	r2, [pc, #160]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1c4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d036      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a27      	ldr	r2, [pc, #156]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1c8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d031      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a25      	ldr	r2, [pc, #148]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1cc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02c      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a24      	ldr	r2, [pc, #144]	@ (8002fcc <HAL_DMA_IRQHandler+0x1d0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d027      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a22      	ldr	r2, [pc, #136]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1d4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d022      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a21      	ldr	r2, [pc, #132]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1d8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d01d      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1dc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d018      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1e      	ldr	r2, [pc, #120]	@ (8002fdc <HAL_DMA_IRQHandler+0x1e0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1e4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00e      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1e8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1ec>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x194>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a18      	ldr	r2, [pc, #96]	@ (8002fec <HAL_DMA_IRQHandler+0x1f0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d12f      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x1f4>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e02e      	b.n	8003004 <HAL_DMA_IRQHandler+0x208>
 8002fa6:	bf00      	nop
 8002fa8:	240049c0 	.word	0x240049c0
 8002fac:	1b4e81b5 	.word	0x1b4e81b5
 8002fb0:	40020010 	.word	0x40020010
 8002fb4:	40020028 	.word	0x40020028
 8002fb8:	40020040 	.word	0x40020040
 8002fbc:	40020058 	.word	0x40020058
 8002fc0:	40020070 	.word	0x40020070
 8002fc4:	40020088 	.word	0x40020088
 8002fc8:	400200a0 	.word	0x400200a0
 8002fcc:	400200b8 	.word	0x400200b8
 8002fd0:	40020410 	.word	0x40020410
 8002fd4:	40020428 	.word	0x40020428
 8002fd8:	40020440 	.word	0x40020440
 8002fdc:	40020458 	.word	0x40020458
 8002fe0:	40020470 	.word	0x40020470
 8002fe4:	40020488 	.word	0x40020488
 8002fe8:	400204a0 	.word	0x400204a0
 8002fec:	400204b8 	.word	0x400204b8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0204 	bic.w	r2, r2, #4
 8003016:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2208      	movs	r2, #8
 8003022:	409a      	lsls	r2, r3
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d06e      	beq.n	8003128 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a69      	ldr	r2, [pc, #420]	@ (80031f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d04a      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a67      	ldr	r2, [pc, #412]	@ (80031f8 <HAL_DMA_IRQHandler+0x3fc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d045      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a66      	ldr	r2, [pc, #408]	@ (80031fc <HAL_DMA_IRQHandler+0x400>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d040      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a64      	ldr	r2, [pc, #400]	@ (8003200 <HAL_DMA_IRQHandler+0x404>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d03b      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a63      	ldr	r2, [pc, #396]	@ (8003204 <HAL_DMA_IRQHandler+0x408>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d036      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a61      	ldr	r2, [pc, #388]	@ (8003208 <HAL_DMA_IRQHandler+0x40c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d031      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a60      	ldr	r2, [pc, #384]	@ (800320c <HAL_DMA_IRQHandler+0x410>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d02c      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a5e      	ldr	r2, [pc, #376]	@ (8003210 <HAL_DMA_IRQHandler+0x414>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d027      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5d      	ldr	r2, [pc, #372]	@ (8003214 <HAL_DMA_IRQHandler+0x418>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a5b      	ldr	r2, [pc, #364]	@ (8003218 <HAL_DMA_IRQHandler+0x41c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5a      	ldr	r2, [pc, #360]	@ (800321c <HAL_DMA_IRQHandler+0x420>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a58      	ldr	r2, [pc, #352]	@ (8003220 <HAL_DMA_IRQHandler+0x424>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a57      	ldr	r2, [pc, #348]	@ (8003224 <HAL_DMA_IRQHandler+0x428>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a55      	ldr	r2, [pc, #340]	@ (8003228 <HAL_DMA_IRQHandler+0x42c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a54      	ldr	r2, [pc, #336]	@ (800322c <HAL_DMA_IRQHandler+0x430>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_DMA_IRQHandler+0x2ee>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a52      	ldr	r2, [pc, #328]	@ (8003230 <HAL_DMA_IRQHandler+0x434>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10a      	bne.n	8003100 <HAL_DMA_IRQHandler+0x304>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e003      	b.n	8003108 <HAL_DMA_IRQHandler+0x30c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2201      	movs	r2, #1
 8003116:	409a      	lsls	r2, r3
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003120:	f043 0202 	orr.w	r2, r3, #2
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2204      	movs	r2, #4
 8003132:	409a      	lsls	r2, r3
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 808f 	beq.w	800325c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2c      	ldr	r2, [pc, #176]	@ (80031f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04a      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2a      	ldr	r2, [pc, #168]	@ (80031f8 <HAL_DMA_IRQHandler+0x3fc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d045      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a29      	ldr	r2, [pc, #164]	@ (80031fc <HAL_DMA_IRQHandler+0x400>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d040      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <HAL_DMA_IRQHandler+0x404>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d03b      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a26      	ldr	r2, [pc, #152]	@ (8003204 <HAL_DMA_IRQHandler+0x408>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d036      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a24      	ldr	r2, [pc, #144]	@ (8003208 <HAL_DMA_IRQHandler+0x40c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a23      	ldr	r2, [pc, #140]	@ (800320c <HAL_DMA_IRQHandler+0x410>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d02c      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a21      	ldr	r2, [pc, #132]	@ (8003210 <HAL_DMA_IRQHandler+0x414>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d027      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a20      	ldr	r2, [pc, #128]	@ (8003214 <HAL_DMA_IRQHandler+0x418>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1e      	ldr	r2, [pc, #120]	@ (8003218 <HAL_DMA_IRQHandler+0x41c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1d      	ldr	r2, [pc, #116]	@ (800321c <HAL_DMA_IRQHandler+0x420>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d018      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003220 <HAL_DMA_IRQHandler+0x424>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003224 <HAL_DMA_IRQHandler+0x428>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a18      	ldr	r2, [pc, #96]	@ (8003228 <HAL_DMA_IRQHandler+0x42c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a17      	ldr	r2, [pc, #92]	@ (800322c <HAL_DMA_IRQHandler+0x430>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_DMA_IRQHandler+0x3e2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a15      	ldr	r2, [pc, #84]	@ (8003230 <HAL_DMA_IRQHandler+0x434>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d12a      	bne.n	8003234 <HAL_DMA_IRQHandler+0x438>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e023      	b.n	800323c <HAL_DMA_IRQHandler+0x440>
 80031f4:	40020010 	.word	0x40020010
 80031f8:	40020028 	.word	0x40020028
 80031fc:	40020040 	.word	0x40020040
 8003200:	40020058 	.word	0x40020058
 8003204:	40020070 	.word	0x40020070
 8003208:	40020088 	.word	0x40020088
 800320c:	400200a0 	.word	0x400200a0
 8003210:	400200b8 	.word	0x400200b8
 8003214:	40020410 	.word	0x40020410
 8003218:	40020428 	.word	0x40020428
 800321c:	40020440 	.word	0x40020440
 8003220:	40020458 	.word	0x40020458
 8003224:	40020470 	.word	0x40020470
 8003228:	40020488 	.word	0x40020488
 800322c:	400204a0 	.word	0x400204a0
 8003230:	400204b8 	.word	0x400204b8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00d      	beq.n	800325c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2204      	movs	r2, #4
 800324a:	409a      	lsls	r2, r3
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	2210      	movs	r2, #16
 8003266:	409a      	lsls	r2, r3
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80a6 	beq.w	80033be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a85      	ldr	r2, [pc, #532]	@ (800348c <HAL_DMA_IRQHandler+0x690>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d04a      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a83      	ldr	r2, [pc, #524]	@ (8003490 <HAL_DMA_IRQHandler+0x694>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d045      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a82      	ldr	r2, [pc, #520]	@ (8003494 <HAL_DMA_IRQHandler+0x698>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d040      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a80      	ldr	r2, [pc, #512]	@ (8003498 <HAL_DMA_IRQHandler+0x69c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d03b      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a7f      	ldr	r2, [pc, #508]	@ (800349c <HAL_DMA_IRQHandler+0x6a0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d036      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a7d      	ldr	r2, [pc, #500]	@ (80034a0 <HAL_DMA_IRQHandler+0x6a4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d031      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a7c      	ldr	r2, [pc, #496]	@ (80034a4 <HAL_DMA_IRQHandler+0x6a8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d02c      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a7a      	ldr	r2, [pc, #488]	@ (80034a8 <HAL_DMA_IRQHandler+0x6ac>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d027      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a79      	ldr	r2, [pc, #484]	@ (80034ac <HAL_DMA_IRQHandler+0x6b0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d022      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a77      	ldr	r2, [pc, #476]	@ (80034b0 <HAL_DMA_IRQHandler+0x6b4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01d      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a76      	ldr	r2, [pc, #472]	@ (80034b4 <HAL_DMA_IRQHandler+0x6b8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d018      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a74      	ldr	r2, [pc, #464]	@ (80034b8 <HAL_DMA_IRQHandler+0x6bc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a73      	ldr	r2, [pc, #460]	@ (80034bc <HAL_DMA_IRQHandler+0x6c0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a71      	ldr	r2, [pc, #452]	@ (80034c0 <HAL_DMA_IRQHandler+0x6c4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a70      	ldr	r2, [pc, #448]	@ (80034c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_DMA_IRQHandler+0x516>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a6e      	ldr	r2, [pc, #440]	@ (80034c8 <HAL_DMA_IRQHandler+0x6cc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10a      	bne.n	8003328 <HAL_DMA_IRQHandler+0x52c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e009      	b.n	800333c <HAL_DMA_IRQHandler+0x540>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d03e      	beq.n	80033be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2210      	movs	r2, #16
 800334a:	409a      	lsls	r2, r3
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d018      	beq.n	8003390 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d108      	bne.n	800337e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d024      	beq.n	80033be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
 800337c:	e01f      	b.n	80033be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01b      	beq.n	80033be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
 800338e:	e016      	b.n	80033be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0208 	bic.w	r2, r2, #8
 80033ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	2220      	movs	r2, #32
 80033c8:	409a      	lsls	r2, r3
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8110 	beq.w	80035f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <HAL_DMA_IRQHandler+0x690>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04a      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003490 <HAL_DMA_IRQHandler+0x694>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d045      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a29      	ldr	r2, [pc, #164]	@ (8003494 <HAL_DMA_IRQHandler+0x698>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d040      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a28      	ldr	r2, [pc, #160]	@ (8003498 <HAL_DMA_IRQHandler+0x69c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d03b      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a26      	ldr	r2, [pc, #152]	@ (800349c <HAL_DMA_IRQHandler+0x6a0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a25      	ldr	r2, [pc, #148]	@ (80034a0 <HAL_DMA_IRQHandler+0x6a4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d031      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a23      	ldr	r2, [pc, #140]	@ (80034a4 <HAL_DMA_IRQHandler+0x6a8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02c      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a22      	ldr	r2, [pc, #136]	@ (80034a8 <HAL_DMA_IRQHandler+0x6ac>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a20      	ldr	r2, [pc, #128]	@ (80034ac <HAL_DMA_IRQHandler+0x6b0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d022      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <HAL_DMA_IRQHandler+0x6b4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01d      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1d      	ldr	r2, [pc, #116]	@ (80034b4 <HAL_DMA_IRQHandler+0x6b8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1c      	ldr	r2, [pc, #112]	@ (80034b8 <HAL_DMA_IRQHandler+0x6bc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <HAL_DMA_IRQHandler+0x6c0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a19      	ldr	r2, [pc, #100]	@ (80034c0 <HAL_DMA_IRQHandler+0x6c4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a17      	ldr	r2, [pc, #92]	@ (80034c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_DMA_IRQHandler+0x678>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a16      	ldr	r2, [pc, #88]	@ (80034c8 <HAL_DMA_IRQHandler+0x6cc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d12b      	bne.n	80034cc <HAL_DMA_IRQHandler+0x6d0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf14      	ite	ne
 8003482:	2301      	movne	r3, #1
 8003484:	2300      	moveq	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	e02a      	b.n	80034e0 <HAL_DMA_IRQHandler+0x6e4>
 800348a:	bf00      	nop
 800348c:	40020010 	.word	0x40020010
 8003490:	40020028 	.word	0x40020028
 8003494:	40020040 	.word	0x40020040
 8003498:	40020058 	.word	0x40020058
 800349c:	40020070 	.word	0x40020070
 80034a0:	40020088 	.word	0x40020088
 80034a4:	400200a0 	.word	0x400200a0
 80034a8:	400200b8 	.word	0x400200b8
 80034ac:	40020410 	.word	0x40020410
 80034b0:	40020428 	.word	0x40020428
 80034b4:	40020440 	.word	0x40020440
 80034b8:	40020458 	.word	0x40020458
 80034bc:	40020470 	.word	0x40020470
 80034c0:	40020488 	.word	0x40020488
 80034c4:	400204a0 	.word	0x400204a0
 80034c8:	400204b8 	.word	0x400204b8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf14      	ite	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	2300      	moveq	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8087 	beq.w	80035f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2220      	movs	r2, #32
 80034f0:	409a      	lsls	r2, r3
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d139      	bne.n	8003576 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003520:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_IRQHandler+0x736>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	223f      	movs	r2, #63	@ 0x3f
 800354c:	409a      	lsls	r2, r3
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 834a 	beq.w	8003c00 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
          }
          return;
 8003574:	e344      	b.n	8003c00 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d018      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d108      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	2b00      	cmp	r3, #0
 8003598:	d02c      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
 80035a2:	e027      	b.n	80035f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d023      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
 80035b4:	e01e      	b.n	80035f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10f      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0210 	bic.w	r2, r2, #16
 80035d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8306 	beq.w	8003c0a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8088 	beq.w	800371c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2204      	movs	r2, #4
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a7a      	ldr	r2, [pc, #488]	@ (8003804 <HAL_DMA_IRQHandler+0xa08>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d04a      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a79      	ldr	r2, [pc, #484]	@ (8003808 <HAL_DMA_IRQHandler+0xa0c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d045      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a77      	ldr	r2, [pc, #476]	@ (800380c <HAL_DMA_IRQHandler+0xa10>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d040      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a76      	ldr	r2, [pc, #472]	@ (8003810 <HAL_DMA_IRQHandler+0xa14>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d03b      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a74      	ldr	r2, [pc, #464]	@ (8003814 <HAL_DMA_IRQHandler+0xa18>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d036      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a73      	ldr	r2, [pc, #460]	@ (8003818 <HAL_DMA_IRQHandler+0xa1c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d031      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a71      	ldr	r2, [pc, #452]	@ (800381c <HAL_DMA_IRQHandler+0xa20>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d02c      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a70      	ldr	r2, [pc, #448]	@ (8003820 <HAL_DMA_IRQHandler+0xa24>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d027      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6e      	ldr	r2, [pc, #440]	@ (8003824 <HAL_DMA_IRQHandler+0xa28>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d022      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6d      	ldr	r2, [pc, #436]	@ (8003828 <HAL_DMA_IRQHandler+0xa2c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d01d      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a6b      	ldr	r2, [pc, #428]	@ (800382c <HAL_DMA_IRQHandler+0xa30>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d018      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6a      	ldr	r2, [pc, #424]	@ (8003830 <HAL_DMA_IRQHandler+0xa34>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a68      	ldr	r2, [pc, #416]	@ (8003834 <HAL_DMA_IRQHandler+0xa38>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a67      	ldr	r2, [pc, #412]	@ (8003838 <HAL_DMA_IRQHandler+0xa3c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a65      	ldr	r2, [pc, #404]	@ (800383c <HAL_DMA_IRQHandler+0xa40>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x8b8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a64      	ldr	r2, [pc, #400]	@ (8003840 <HAL_DMA_IRQHandler+0xa44>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d108      	bne.n	80036c6 <HAL_DMA_IRQHandler+0x8ca>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e007      	b.n	80036d6 <HAL_DMA_IRQHandler+0x8da>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3301      	adds	r3, #1
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036de:	429a      	cmp	r2, r3
 80036e0:	d307      	bcc.n	80036f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f2      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x8da>
 80036f0:	e000      	b.n	80036f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2203      	movs	r2, #3
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800370a:	e003      	b.n	8003714 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8272 	beq.w	8003c0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
 800372e:	e26c      	b.n	8003c0a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a43      	ldr	r2, [pc, #268]	@ (8003844 <HAL_DMA_IRQHandler+0xa48>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d022      	beq.n	8003780 <HAL_DMA_IRQHandler+0x984>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a42      	ldr	r2, [pc, #264]	@ (8003848 <HAL_DMA_IRQHandler+0xa4c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d01d      	beq.n	8003780 <HAL_DMA_IRQHandler+0x984>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a40      	ldr	r2, [pc, #256]	@ (800384c <HAL_DMA_IRQHandler+0xa50>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d018      	beq.n	8003780 <HAL_DMA_IRQHandler+0x984>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a3f      	ldr	r2, [pc, #252]	@ (8003850 <HAL_DMA_IRQHandler+0xa54>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d013      	beq.n	8003780 <HAL_DMA_IRQHandler+0x984>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3d      	ldr	r2, [pc, #244]	@ (8003854 <HAL_DMA_IRQHandler+0xa58>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00e      	beq.n	8003780 <HAL_DMA_IRQHandler+0x984>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a3c      	ldr	r2, [pc, #240]	@ (8003858 <HAL_DMA_IRQHandler+0xa5c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_DMA_IRQHandler+0x984>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3a      	ldr	r2, [pc, #232]	@ (800385c <HAL_DMA_IRQHandler+0xa60>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_DMA_IRQHandler+0x984>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a39      	ldr	r2, [pc, #228]	@ (8003860 <HAL_DMA_IRQHandler+0xa64>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_DMA_IRQHandler+0x988>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_DMA_IRQHandler+0x98a>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 823f 	beq.w	8003c0a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	2204      	movs	r2, #4
 800379e:	409a      	lsls	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80cd 	beq.w	8003944 <HAL_DMA_IRQHandler+0xb48>
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80c7 	beq.w	8003944 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2204      	movs	r2, #4
 80037c0:	409a      	lsls	r2, r3
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d049      	beq.n	8003864 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8210 	beq.w	8003c04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ec:	e20a      	b.n	8003c04 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8206 	beq.w	8003c04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003800:	e200      	b.n	8003c04 <HAL_DMA_IRQHandler+0xe08>
 8003802:	bf00      	nop
 8003804:	40020010 	.word	0x40020010
 8003808:	40020028 	.word	0x40020028
 800380c:	40020040 	.word	0x40020040
 8003810:	40020058 	.word	0x40020058
 8003814:	40020070 	.word	0x40020070
 8003818:	40020088 	.word	0x40020088
 800381c:	400200a0 	.word	0x400200a0
 8003820:	400200b8 	.word	0x400200b8
 8003824:	40020410 	.word	0x40020410
 8003828:	40020428 	.word	0x40020428
 800382c:	40020440 	.word	0x40020440
 8003830:	40020458 	.word	0x40020458
 8003834:	40020470 	.word	0x40020470
 8003838:	40020488 	.word	0x40020488
 800383c:	400204a0 	.word	0x400204a0
 8003840:	400204b8 	.word	0x400204b8
 8003844:	58025408 	.word	0x58025408
 8003848:	5802541c 	.word	0x5802541c
 800384c:	58025430 	.word	0x58025430
 8003850:	58025444 	.word	0x58025444
 8003854:	58025458 	.word	0x58025458
 8003858:	5802546c 	.word	0x5802546c
 800385c:	58025480 	.word	0x58025480
 8003860:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d160      	bne.n	8003930 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7f      	ldr	r2, [pc, #508]	@ (8003a70 <HAL_DMA_IRQHandler+0xc74>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04a      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7d      	ldr	r2, [pc, #500]	@ (8003a74 <HAL_DMA_IRQHandler+0xc78>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d045      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7c      	ldr	r2, [pc, #496]	@ (8003a78 <HAL_DMA_IRQHandler+0xc7c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a7a      	ldr	r2, [pc, #488]	@ (8003a7c <HAL_DMA_IRQHandler+0xc80>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d03b      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a79      	ldr	r2, [pc, #484]	@ (8003a80 <HAL_DMA_IRQHandler+0xc84>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d036      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a77      	ldr	r2, [pc, #476]	@ (8003a84 <HAL_DMA_IRQHandler+0xc88>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a76      	ldr	r2, [pc, #472]	@ (8003a88 <HAL_DMA_IRQHandler+0xc8c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d02c      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a74      	ldr	r2, [pc, #464]	@ (8003a8c <HAL_DMA_IRQHandler+0xc90>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d027      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a73      	ldr	r2, [pc, #460]	@ (8003a90 <HAL_DMA_IRQHandler+0xc94>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a71      	ldr	r2, [pc, #452]	@ (8003a94 <HAL_DMA_IRQHandler+0xc98>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01d      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a70      	ldr	r2, [pc, #448]	@ (8003a98 <HAL_DMA_IRQHandler+0xc9c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a6e      	ldr	r2, [pc, #440]	@ (8003a9c <HAL_DMA_IRQHandler+0xca0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6d      	ldr	r2, [pc, #436]	@ (8003aa0 <HAL_DMA_IRQHandler+0xca4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a6b      	ldr	r2, [pc, #428]	@ (8003aa4 <HAL_DMA_IRQHandler+0xca8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa8 <HAL_DMA_IRQHandler+0xcac>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_DMA_IRQHandler+0xb12>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a68      	ldr	r2, [pc, #416]	@ (8003aac <HAL_DMA_IRQHandler+0xcb0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <HAL_DMA_IRQHandler+0xb24>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0208 	bic.w	r2, r2, #8
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e007      	b.n	8003930 <HAL_DMA_IRQHandler+0xb34>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0204 	bic.w	r2, r2, #4
 800392e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8165 	beq.w	8003c04 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003942:	e15f      	b.n	8003c04 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2202      	movs	r2, #2
 800394e:	409a      	lsls	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80c5 	beq.w	8003ae4 <HAL_DMA_IRQHandler+0xce8>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80bf 	beq.w	8003ae4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2202      	movs	r2, #2
 8003970:	409a      	lsls	r2, r3
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d018      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 813a 	beq.w	8003c08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800399c:	e134      	b.n	8003c08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8130 	beq.w	8003c08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b0:	e12a      	b.n	8003c08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 8089 	bne.w	8003ad0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003a70 <HAL_DMA_IRQHandler+0xc74>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d04a      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a29      	ldr	r2, [pc, #164]	@ (8003a74 <HAL_DMA_IRQHandler+0xc78>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d045      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a28      	ldr	r2, [pc, #160]	@ (8003a78 <HAL_DMA_IRQHandler+0xc7c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d040      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a26      	ldr	r2, [pc, #152]	@ (8003a7c <HAL_DMA_IRQHandler+0xc80>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d03b      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a25      	ldr	r2, [pc, #148]	@ (8003a80 <HAL_DMA_IRQHandler+0xc84>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d036      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a23      	ldr	r2, [pc, #140]	@ (8003a84 <HAL_DMA_IRQHandler+0xc88>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d031      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a22      	ldr	r2, [pc, #136]	@ (8003a88 <HAL_DMA_IRQHandler+0xc8c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d02c      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a20      	ldr	r2, [pc, #128]	@ (8003a8c <HAL_DMA_IRQHandler+0xc90>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d027      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1f      	ldr	r2, [pc, #124]	@ (8003a90 <HAL_DMA_IRQHandler+0xc94>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a94 <HAL_DMA_IRQHandler+0xc98>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01d      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1c      	ldr	r2, [pc, #112]	@ (8003a98 <HAL_DMA_IRQHandler+0xc9c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d018      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <HAL_DMA_IRQHandler+0xca0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a19      	ldr	r2, [pc, #100]	@ (8003aa0 <HAL_DMA_IRQHandler+0xca4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <HAL_DMA_IRQHandler+0xca8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a16      	ldr	r2, [pc, #88]	@ (8003aa8 <HAL_DMA_IRQHandler+0xcac>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc62>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a14      	ldr	r2, [pc, #80]	@ (8003aac <HAL_DMA_IRQHandler+0xcb0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d128      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0xcb4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0214 	bic.w	r2, r2, #20
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e027      	b.n	8003ac0 <HAL_DMA_IRQHandler+0xcc4>
 8003a70:	40020010 	.word	0x40020010
 8003a74:	40020028 	.word	0x40020028
 8003a78:	40020040 	.word	0x40020040
 8003a7c:	40020058 	.word	0x40020058
 8003a80:	40020070 	.word	0x40020070
 8003a84:	40020088 	.word	0x40020088
 8003a88:	400200a0 	.word	0x400200a0
 8003a8c:	400200b8 	.word	0x400200b8
 8003a90:	40020410 	.word	0x40020410
 8003a94:	40020428 	.word	0x40020428
 8003a98:	40020440 	.word	0x40020440
 8003a9c:	40020458 	.word	0x40020458
 8003aa0:	40020470 	.word	0x40020470
 8003aa4:	40020488 	.word	0x40020488
 8003aa8:	400204a0 	.word	0x400204a0
 8003aac:	400204b8 	.word	0x400204b8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020a 	bic.w	r2, r2, #10
 8003abe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8097 	beq.w	8003c08 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae2:	e091      	b.n	8003c08 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2208      	movs	r2, #8
 8003aee:	409a      	lsls	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8088 	beq.w	8003c0a <HAL_DMA_IRQHandler+0xe0e>
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8082 	beq.w	8003c0a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a41      	ldr	r2, [pc, #260]	@ (8003c10 <HAL_DMA_IRQHandler+0xe14>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d04a      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a3f      	ldr	r2, [pc, #252]	@ (8003c14 <HAL_DMA_IRQHandler+0xe18>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d045      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c18 <HAL_DMA_IRQHandler+0xe1c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d040      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3c      	ldr	r2, [pc, #240]	@ (8003c1c <HAL_DMA_IRQHandler+0xe20>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d03b      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a3b      	ldr	r2, [pc, #236]	@ (8003c20 <HAL_DMA_IRQHandler+0xe24>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d036      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a39      	ldr	r2, [pc, #228]	@ (8003c24 <HAL_DMA_IRQHandler+0xe28>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d031      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a38      	ldr	r2, [pc, #224]	@ (8003c28 <HAL_DMA_IRQHandler+0xe2c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a36      	ldr	r2, [pc, #216]	@ (8003c2c <HAL_DMA_IRQHandler+0xe30>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d027      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a35      	ldr	r2, [pc, #212]	@ (8003c30 <HAL_DMA_IRQHandler+0xe34>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a33      	ldr	r2, [pc, #204]	@ (8003c34 <HAL_DMA_IRQHandler+0xe38>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a32      	ldr	r2, [pc, #200]	@ (8003c38 <HAL_DMA_IRQHandler+0xe3c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a30      	ldr	r2, [pc, #192]	@ (8003c3c <HAL_DMA_IRQHandler+0xe40>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2f      	ldr	r2, [pc, #188]	@ (8003c40 <HAL_DMA_IRQHandler+0xe44>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c44 <HAL_DMA_IRQHandler+0xe48>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2c      	ldr	r2, [pc, #176]	@ (8003c48 <HAL_DMA_IRQHandler+0xe4c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xdaa>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c4c <HAL_DMA_IRQHandler+0xe50>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0xdbc>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 021c 	bic.w	r2, r2, #28
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e007      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xdcc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 020e 	bic.w	r2, r2, #14
 8003bc6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
 8003bfe:	e004      	b.n	8003c0a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c00:	bf00      	nop
 8003c02:	e002      	b.n	8003c0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c04:	bf00      	nop
 8003c06:	e000      	b.n	8003c0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c0a:	3728      	adds	r7, #40	@ 0x28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40020010 	.word	0x40020010
 8003c14:	40020028 	.word	0x40020028
 8003c18:	40020040 	.word	0x40020040
 8003c1c:	40020058 	.word	0x40020058
 8003c20:	40020070 	.word	0x40020070
 8003c24:	40020088 	.word	0x40020088
 8003c28:	400200a0 	.word	0x400200a0
 8003c2c:	400200b8 	.word	0x400200b8
 8003c30:	40020410 	.word	0x40020410
 8003c34:	40020428 	.word	0x40020428
 8003c38:	40020440 	.word	0x40020440
 8003c3c:	40020458 	.word	0x40020458
 8003c40:	40020470 	.word	0x40020470
 8003c44:	40020488 	.word	0x40020488
 8003c48:	400204a0 	.word	0x400204a0
 8003c4c:	400204b8 	.word	0x400204b8

08003c50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a42      	ldr	r2, [pc, #264]	@ (8003d68 <DMA_CalcBaseAndBitshift+0x118>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d04a      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a41      	ldr	r2, [pc, #260]	@ (8003d6c <DMA_CalcBaseAndBitshift+0x11c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d045      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3f      	ldr	r2, [pc, #252]	@ (8003d70 <DMA_CalcBaseAndBitshift+0x120>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d040      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x124>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d03b      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a3c      	ldr	r2, [pc, #240]	@ (8003d78 <DMA_CalcBaseAndBitshift+0x128>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d036      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d7c <DMA_CalcBaseAndBitshift+0x12c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d031      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a39      	ldr	r2, [pc, #228]	@ (8003d80 <DMA_CalcBaseAndBitshift+0x130>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d02c      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a38      	ldr	r2, [pc, #224]	@ (8003d84 <DMA_CalcBaseAndBitshift+0x134>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d027      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a36      	ldr	r2, [pc, #216]	@ (8003d88 <DMA_CalcBaseAndBitshift+0x138>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d022      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a35      	ldr	r2, [pc, #212]	@ (8003d8c <DMA_CalcBaseAndBitshift+0x13c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d01d      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a33      	ldr	r2, [pc, #204]	@ (8003d90 <DMA_CalcBaseAndBitshift+0x140>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d018      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a32      	ldr	r2, [pc, #200]	@ (8003d94 <DMA_CalcBaseAndBitshift+0x144>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a30      	ldr	r2, [pc, #192]	@ (8003d98 <DMA_CalcBaseAndBitshift+0x148>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2f      	ldr	r2, [pc, #188]	@ (8003d9c <DMA_CalcBaseAndBitshift+0x14c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2d      	ldr	r2, [pc, #180]	@ (8003da0 <DMA_CalcBaseAndBitshift+0x150>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2c      	ldr	r2, [pc, #176]	@ (8003da4 <DMA_CalcBaseAndBitshift+0x154>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <DMA_CalcBaseAndBitshift+0xac>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <DMA_CalcBaseAndBitshift+0xae>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d024      	beq.n	8003d4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3b10      	subs	r3, #16
 8003d0a:	4a27      	ldr	r2, [pc, #156]	@ (8003da8 <DMA_CalcBaseAndBitshift+0x158>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	4a24      	ldr	r2, [pc, #144]	@ (8003dac <DMA_CalcBaseAndBitshift+0x15c>)
 8003d1c:	5cd3      	ldrb	r3, [r2, r3]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d908      	bls.n	8003d3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b1f      	ldr	r3, [pc, #124]	@ (8003db0 <DMA_CalcBaseAndBitshift+0x160>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	1d1a      	adds	r2, r3, #4
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d3a:	e00d      	b.n	8003d58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <DMA_CalcBaseAndBitshift+0x160>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d4a:	e005      	b.n	8003d58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40020010 	.word	0x40020010
 8003d6c:	40020028 	.word	0x40020028
 8003d70:	40020040 	.word	0x40020040
 8003d74:	40020058 	.word	0x40020058
 8003d78:	40020070 	.word	0x40020070
 8003d7c:	40020088 	.word	0x40020088
 8003d80:	400200a0 	.word	0x400200a0
 8003d84:	400200b8 	.word	0x400200b8
 8003d88:	40020410 	.word	0x40020410
 8003d8c:	40020428 	.word	0x40020428
 8003d90:	40020440 	.word	0x40020440
 8003d94:	40020458 	.word	0x40020458
 8003d98:	40020470 	.word	0x40020470
 8003d9c:	40020488 	.word	0x40020488
 8003da0:	400204a0 	.word	0x400204a0
 8003da4:	400204b8 	.word	0x400204b8
 8003da8:	aaaaaaab 	.word	0xaaaaaaab
 8003dac:	0801e6dc 	.word	0x0801e6dc
 8003db0:	fffffc00 	.word	0xfffffc00

08003db4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d120      	bne.n	8003e0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d858      	bhi.n	8003e82 <DMA_CheckFifoParam+0xce>
 8003dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <DMA_CheckFifoParam+0x24>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003dfb 	.word	0x08003dfb
 8003de0:	08003de9 	.word	0x08003de9
 8003de4:	08003e83 	.word	0x08003e83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d048      	beq.n	8003e86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003df8:	e045      	b.n	8003e86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e02:	d142      	bne.n	8003e8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e08:	e03f      	b.n	8003e8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e12:	d123      	bne.n	8003e5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d838      	bhi.n	8003e8e <DMA_CheckFifoParam+0xda>
 8003e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <DMA_CheckFifoParam+0x70>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e35 	.word	0x08003e35
 8003e28:	08003e3b 	.word	0x08003e3b
 8003e2c:	08003e35 	.word	0x08003e35
 8003e30:	08003e4d 	.word	0x08003e4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
        break;
 8003e38:	e030      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d025      	beq.n	8003e92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e4a:	e022      	b.n	8003e92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e54:	d11f      	bne.n	8003e96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e5a:	e01c      	b.n	8003e96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d902      	bls.n	8003e6a <DMA_CheckFifoParam+0xb6>
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d003      	beq.n	8003e70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e68:	e018      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e6e:	e015      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8003e80:	e00b      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
        break;
 8003e82:	bf00      	nop
 8003e84:	e00a      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
        break;
 8003e86:	bf00      	nop
 8003e88:	e008      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
        break;
 8003e8a:	bf00      	nop
 8003e8c:	e006      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
        break;
 8003e8e:	bf00      	nop
 8003e90:	e004      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
        break;
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
        break;
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
    break;
 8003e9a:	bf00      	nop
    }
  }

  return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop

08003eac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a38      	ldr	r2, [pc, #224]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d022      	beq.n	8003f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a36      	ldr	r2, [pc, #216]	@ (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01d      	beq.n	8003f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a35      	ldr	r2, [pc, #212]	@ (8003fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d018      	beq.n	8003f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a33      	ldr	r2, [pc, #204]	@ (8003fac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a32      	ldr	r2, [pc, #200]	@ (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a30      	ldr	r2, [pc, #192]	@ (8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	@ (8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01a      	beq.n	8003f4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	3b08      	subs	r3, #8
 8003f1c:	4a28      	ldr	r2, [pc, #160]	@ (8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4b26      	ldr	r3, [pc, #152]	@ (8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a24      	ldr	r2, [pc, #144]	@ (8003fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f38:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2201      	movs	r2, #1
 8003f42:	409a      	lsls	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f48:	e024      	b.n	8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3b10      	subs	r3, #16
 8003f52:	4a1e      	ldr	r2, [pc, #120]	@ (8003fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d806      	bhi.n	8003f72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d902      	bls.n	8003f72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4b18      	ldr	r3, [pc, #96]	@ (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a16      	ldr	r2, [pc, #88]	@ (8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f84:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	58025408 	.word	0x58025408
 8003fa4:	5802541c 	.word	0x5802541c
 8003fa8:	58025430 	.word	0x58025430
 8003fac:	58025444 	.word	0x58025444
 8003fb0:	58025458 	.word	0x58025458
 8003fb4:	5802546c 	.word	0x5802546c
 8003fb8:	58025480 	.word	0x58025480
 8003fbc:	58025494 	.word	0x58025494
 8003fc0:	cccccccd 	.word	0xcccccccd
 8003fc4:	16009600 	.word	0x16009600
 8003fc8:	58025880 	.word	0x58025880
 8003fcc:	aaaaaaab 	.word	0xaaaaaaab
 8003fd0:	400204b8 	.word	0x400204b8
 8003fd4:	4002040f 	.word	0x4002040f
 8003fd8:	10008200 	.word	0x10008200
 8003fdc:	40020880 	.word	0x40020880

08003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d04a      	beq.n	800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d847      	bhi.n	800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a25      	ldr	r2, [pc, #148]	@ (8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d022      	beq.n	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a24      	ldr	r2, [pc, #144]	@ (800409c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d01d      	beq.n	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a22      	ldr	r2, [pc, #136]	@ (80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d018      	beq.n	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a21      	ldr	r2, [pc, #132]	@ (80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d013      	beq.n	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1f      	ldr	r2, [pc, #124]	@ (80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00e      	beq.n	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d009      	beq.n	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1c      	ldr	r2, [pc, #112]	@ (80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004050:	2300      	movs	r3, #0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4b17      	ldr	r3, [pc, #92]	@ (80040b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	461a      	mov	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a15      	ldr	r2, [pc, #84]	@ (80040bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004068:	671a      	str	r2, [r3, #112]	@ 0x70
 800406a:	e009      	b.n	8004080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800407e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b01      	subs	r3, #1
 8004084:	2201      	movs	r2, #1
 8004086:	409a      	lsls	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	58025408 	.word	0x58025408
 800409c:	5802541c 	.word	0x5802541c
 80040a0:	58025430 	.word	0x58025430
 80040a4:	58025444 	.word	0x58025444
 80040a8:	58025458 	.word	0x58025458
 80040ac:	5802546c 	.word	0x5802546c
 80040b0:	58025480 	.word	0x58025480
 80040b4:	58025494 	.word	0x58025494
 80040b8:	1600963f 	.word	0x1600963f
 80040bc:	58025940 	.word	0x58025940
 80040c0:	1000823f 	.word	0x1000823f
 80040c4:	40020940 	.word	0x40020940

080040c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0e3      	b.n	80042a2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f007 fd71 	bl	800bbd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f2:	4b6e      	ldr	r3, [pc, #440]	@ (80042ac <HAL_ETH_Init+0x1e4>)
 80040f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040f8:	4a6c      	ldr	r2, [pc, #432]	@ (80042ac <HAL_ETH_Init+0x1e4>)
 80040fa:	f043 0302 	orr.w	r3, r3, #2
 80040fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004102:	4b6a      	ldr	r3, [pc, #424]	@ (80042ac <HAL_ETH_Init+0x1e4>)
 8004104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	7a1b      	ldrb	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004118:	2000      	movs	r0, #0
 800411a:	f7fd ff65 	bl	8001fe8 <HAL_SYSCFG_ETHInterfaceSelect>
 800411e:	e003      	b.n	8004128 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004120:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004124:	f7fd ff60 	bl	8001fe8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004128:	4b61      	ldr	r3, [pc, #388]	@ (80042b0 <HAL_ETH_Init+0x1e8>)
 800412a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004142:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004144:	f7fd ff20 	bl	8001f88 <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800414a:	e011      	b.n	8004170 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800414c:	f7fd ff1c 	bl	8001f88 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800415a:	d909      	bls.n	8004170 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2204      	movs	r2, #4
 8004160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	22e0      	movs	r2, #224	@ 0xe0
 8004168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e098      	b.n	80042a2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e4      	bne.n	800414c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 ff7e 	bl	8005084 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004188:	f002 fe92 	bl	8006eb0 <HAL_RCC_GetHCLKFreq>
 800418c:	4603      	mov	r3, r0
 800418e:	4a49      	ldr	r2, [pc, #292]	@ (80042b4 <HAL_ETH_Init+0x1ec>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	0c9a      	lsrs	r2, r3, #18
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3a01      	subs	r2, #1
 800419c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f001 f97b 	bl	800549c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041b2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041c2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	22e0      	movs	r2, #224	@ 0xe0
 80041de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e05d      	b.n	80042a2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80041f2:	4b31      	ldr	r3, [pc, #196]	@ (80042b8 <HAL_ETH_Init+0x1f0>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6952      	ldr	r2, [r2, #20]
 80041fa:	0051      	lsls	r1, r2, #1
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004206:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f001 f9e3 	bl	80055d6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f001 fa29 	bl	8005668 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	3305      	adds	r3, #5
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	4619      	mov	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	3303      	adds	r3, #3
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	061a      	lsls	r2, r3, #24
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	3302      	adds	r3, #2
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	3301      	adds	r3, #1
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004254:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004262:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004264:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <HAL_ETH_Init+0x1f4>)
 8004276:	430b      	orrs	r3, r1
 8004278:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <HAL_ETH_Init+0x1f8>)
 800428a:	430b      	orrs	r3, r1
 800428c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2210      	movs	r2, #16
 800429c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	58024400 	.word	0x58024400
 80042b0:	58000400 	.word	0x58000400
 80042b4:	431bde83 	.word	0x431bde83
 80042b8:	ffff8001 	.word	0xffff8001
 80042bc:	0c020060 	.word	0x0c020060
 80042c0:	0c20c000 	.word	0x0c20c000

080042c4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d153      	bne.n	800437e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2204      	movs	r2, #4
 80042e2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fa49 	bl	800477c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0202 	orr.w	r2, r2, #2
 80042f8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004326:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004336:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004342:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004352:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800435e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800436a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800436e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2240      	movs	r2, #64	@ 0x40
 8004376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004396:	2b10      	cmp	r3, #16
 8004398:	d165      	bne.n	8004466 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2204      	movs	r2, #4
 80043ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f9e4 	bl	800477c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043cc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043e8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043f4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8004400:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004404:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0202 	orr.w	r2, r2, #2
 800442a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004444:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8004450:	430b      	orrs	r3, r1
 8004452:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004456:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2240      	movs	r2, #64	@ 0x40
 800445e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800447e:	2b40      	cmp	r3, #64	@ 0x40
 8004480:	d165      	bne.n	800454e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004492:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4b30      	ldr	r3, [pc, #192]	@ (800455c <HAL_ETH_Stop_IT+0xec>)
 800449c:	400b      	ands	r3, r1
 800449e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044a2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044be:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044da:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0202 	bic.w	r2, r2, #2
 8004510:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	e00e      	b.n	8004536 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	3212      	adds	r2, #18
 800451e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004522:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d9ed      	bls.n	8004518 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2210      	movs	r2, #16
 8004546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	ffff2f3e 	.word	0xffff2f3e

08004560 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004576:	f043 0201 	orr.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e03a      	b.n	80045fa <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800458a:	2b40      	cmp	r3, #64	@ 0x40
 800458c:	d134      	bne.n	80045f8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004596:	2201      	movs	r2, #1
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f001 f8c2 	bl	8005724 <ETH_Prepare_Tx_Descriptors>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ac:	f043 0202 	orr.w	r2, r3, #2
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e01f      	b.n	80045fa <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80045ba:	f3bf 8f4f 	dsb	sy
}
 80045be:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d904      	bls.n	80045dc <HAL_ETH_Transmit_IT+0x7c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	1f1a      	subs	r2, r3, #4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3106      	adds	r1, #6
 80045e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80045ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045f0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b088      	sub	sp, #32
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	f043 0201 	orr.w	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0a2      	b.n	8004774 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004634:	2b40      	cmp	r3, #64	@ 0x40
 8004636:	d001      	beq.n	800463c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e09b      	b.n	8004774 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004640:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	3212      	adds	r2, #18
 8004648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800464c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004652:	f1c3 0304 	rsb	r3, r3, #4
 8004656:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004658:	e064      	b.n	8004724 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <HAL_ETH_ReadData+0x88>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d03a      	beq.n	8004700 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80046c6:	2301      	movs	r3, #1
 80046c8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046da:	461a      	mov	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f007 fc5a 	bl	800bf98 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	441a      	add	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2200      	movs	r2, #0
 80046fe:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	3301      	adds	r3, #1
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d902      	bls.n	8004712 <HAL_ETH_ReadData+0x110>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	3b04      	subs	r3, #4
 8004710:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	3212      	adds	r2, #18
 8004718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800471c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	3301      	adds	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004728:	2b00      	cmp	r3, #0
 800472a:	db06      	blt.n	800473a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	429a      	cmp	r2, r3
 8004732:	d202      	bcs.n	800473a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d08f      	beq.n	800465a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	441a      	add	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f814 	bl	800477c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d108      	bne.n	8004772 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e000      	b.n	8004774 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004788:	2301      	movs	r3, #1
 800478a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004790:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	3212      	adds	r2, #18
 8004798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80047a4:	e038      	b.n	8004818 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d112      	bne.n	80047d4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	4618      	mov	r0, r3
 80047b4:	f007 fbc0 	bl	800bf38 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	74fb      	strb	r3, [r7, #19]
 80047c2:	e007      	b.n	80047d4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	461a      	mov	r2, r3
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	461a      	mov	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01e      	beq.n	8004818 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	e003      	b.n	80047f4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80047f2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d902      	bls.n	8004806 <ETH_UpdateDescriptor+0x8a>
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3b04      	subs	r3, #4
 8004804:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	3212      	adds	r2, #18
 800480c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004810:	617b      	str	r3, [r7, #20]
      desccount--;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	3b01      	subs	r3, #1
 8004816:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <ETH_UpdateDescriptor+0xa8>
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1c0      	bne.n	80047a6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	429a      	cmp	r2, r3
 800482c:	d01b      	beq.n	8004866 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3303      	adds	r3, #3
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004838:	f3bf 8f5f 	dmb	sy
}
 800483c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6919      	ldr	r1, [r3, #16]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	18ca      	adds	r2, r1, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004856:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004866:	bf00      	nop
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3318      	adds	r3, #24
 800487a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004886:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800488c:	e047      	b.n	800491e <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800488e:	2301      	movs	r3, #1
 8004890:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	3b01      	subs	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3304      	adds	r3, #4
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	3301      	adds	r3, #1
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d902      	bls.n	80048ba <HAL_ETH_ReleaseTxPacket+0x4c>
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	3b04      	subs	r3, #4
 80048b8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80048be:	7bbb      	ldrb	r3, [r7, #14]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02c      	beq.n	800491e <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68d9      	ldr	r1, [r3, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	db1f      	blt.n	800491a <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	3304      	adds	r3, #4
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f007 fbbe 	bl	800c068 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3304      	adds	r3, #4
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	2200      	movs	r2, #0
 80048f8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3301      	adds	r3, #1
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b03      	cmp	r3, #3
 8004904:	d902      	bls.n	800490c <HAL_ETH_ReleaseTxPacket+0x9e>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3b04      	subs	r3, #4
 800490a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004918:	e001      	b.n	800491e <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_ETH_ReleaseTxPacket+0xbc>
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1b1      	bne.n	800488e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004944:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800494e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004952:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800495c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8004960:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8004962:	4b6d      	ldr	r3, [pc, #436]	@ (8004b18 <HAL_ETH_IRQHandler+0x1e4>)
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d010      	beq.n	8004994 <HAL_ETH_IRQHandler+0x60>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004984:	461a      	mov	r2, r3
 8004986:	f248 0340 	movw	r3, #32832	@ 0x8040
 800498a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f006 fe60 	bl	800b654 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d010      	beq.n	80049c0 <HAL_ETH_IRQHandler+0x8c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049b0:	461a      	mov	r2, r3
 80049b2:	f248 0301 	movw	r3, #32769	@ 0x8001
 80049b6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f006 fe5a 	bl	800b674 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d047      	beq.n	8004a5a <HAL_ETH_IRQHandler+0x126>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d042      	beq.n	8004a5a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049da:	f043 0208 	orr.w	r2, r3, #8
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01e      	beq.n	8004a2c <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049f6:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80049fa:	f241 1302 	movw	r3, #4354	@ 0x1102
 80049fe:	4013      	ands	r3, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a0e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004a1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a1e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	22e0      	movs	r2, #224	@ 0xe0
 8004a26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004a2a:	e013      	b.n	8004a54 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a34:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004a38:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8004a50:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f006 fe1d 	bl	800b694 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d019      	beq.n	8004aa2 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a74:	f043 0210 	orr.w	r2, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	22e0      	movs	r2, #224	@ 0xe0
 8004a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f006 fdfd 	bl	800b694 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00f      	beq.n	8004acc <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ab4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f82c 	bl	8004b1c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00f      	beq.n	8004af6 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004ade:	f003 020f 	and.w	r2, r3, #15
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f821 	bl	8004b30 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d006      	beq.n	8004b0e <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <HAL_ETH_IRQHandler+0x1e4>)
 8004b02:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004b06:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f81b 	bl	8004b44 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	58000080 	.word	0x58000080

08004b1c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e03e      	b.n	8004bf8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004b82:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	055b      	lsls	r3, r3, #21
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f043 030c 	orr.w	r3, r3, #12
 8004ba6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004bba:	f7fd f9e5 	bl	8001f88 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004bc0:	e009      	b.n	8004bd6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004bc2:	f7fd f9e1 	bl	8001f88 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bd0:	d901      	bls.n	8004bd6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e010      	b.n	8004bf8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ed      	bne.n	8004bc2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e03c      	b.n	8004c9c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c2a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	055b      	lsls	r3, r3, #21
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	041b      	lsls	r3, r3, #16
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 030c 	bic.w	r3, r3, #12
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <HAL_ETH_WritePHYRegister+0xa4>)
 8004c62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004c66:	4a0f      	ldr	r2, [pc, #60]	@ (8004ca4 <HAL_ETH_WritePHYRegister+0xa4>)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004c6e:	f7fd f98b 	bl	8001f88 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004c74:	e009      	b.n	8004c8a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004c76:	f7fd f987 	bl	8001f88 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c84:	d901      	bls.n	8004c8a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e008      	b.n	8004c9c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ed      	bne.n	8004c76 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40028000 	.word	0x40028000

08004ca8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e1c3      	b.n	8005044 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 020c 	and.w	r2, r3, #12
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf14      	ite	ne
 8004d52:	2301      	movne	r3, #1
 8004d54:	2300      	moveq	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf14      	ite	ne
 8004df0:	2301      	movne	r3, #1
 8004df2:	2300      	moveq	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf14      	ite	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004e36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf14      	ite	ne
 8004e66:	2301      	movne	r3, #1
 8004e68:	2300      	moveq	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	0e5b      	lsrs	r3, r3, #25
 8004f06:	f003 021f 	and.w	r2, r3, #31
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bf14      	ite	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	2300      	moveq	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f76:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bf14      	ite	ne
 8004f9c:	2301      	movne	r3, #1
 8004f9e:	2300      	moveq	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf14      	ite	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	2300      	moveq	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004fd0:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004fe0:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800502c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e00b      	b.n	800507c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800506a:	2b10      	cmp	r3, #16
 800506c:	d105      	bne.n	800507a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f871 	bl	8005158 <ETH_SetMACConfig>

    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005094:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800509c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800509e:	f001 ff07 	bl	8006eb0 <HAL_RCC_GetHCLKFreq>
 80050a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005110 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d804      	bhi.n	80050b6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e022      	b.n	80050fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4a16      	ldr	r2, [pc, #88]	@ (8005114 <HAL_ETH_SetMDIOClockRange+0x90>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d204      	bcs.n	80050c8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e019      	b.n	80050fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a13      	ldr	r2, [pc, #76]	@ (8005118 <HAL_ETH_SetMDIOClockRange+0x94>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d915      	bls.n	80050fc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4a12      	ldr	r2, [pc, #72]	@ (800511c <HAL_ETH_SetMDIOClockRange+0x98>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d804      	bhi.n	80050e2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	e00c      	b.n	80050fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4a0e      	ldr	r2, [pc, #56]	@ (8005120 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d804      	bhi.n	80050f4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e003      	b.n	80050fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	02160ebf 	.word	0x02160ebf
 8005114:	03938700 	.word	0x03938700
 8005118:	05f5e0ff 	.word	0x05f5e0ff
 800511c:	08f0d17f 	.word	0x08f0d17f
 8005120:	0ee6b27f 	.word	0x0ee6b27f

08005124 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800516a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	791b      	ldrb	r3, [r3, #4]
 8005170:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005172:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	7b1b      	ldrb	r3, [r3, #12]
 8005178:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800517a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	7b5b      	ldrb	r3, [r3, #13]
 8005180:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005182:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	7b9b      	ldrb	r3, [r3, #14]
 8005188:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800518a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	7bdb      	ldrb	r3, [r3, #15]
 8005190:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005192:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	7c12      	ldrb	r2, [r2, #16]
 8005198:	2a00      	cmp	r2, #0
 800519a:	d102      	bne.n	80051a2 <ETH_SetMACConfig+0x4a>
 800519c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80051a0:	e000      	b.n	80051a4 <ETH_SetMACConfig+0x4c>
 80051a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	7c52      	ldrb	r2, [r2, #17]
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	d102      	bne.n	80051b4 <ETH_SetMACConfig+0x5c>
 80051ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051b2:	e000      	b.n	80051b6 <ETH_SetMACConfig+0x5e>
 80051b4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	7c9b      	ldrb	r3, [r3, #18]
 80051bc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051be:	431a      	orrs	r2, r3
               macconf->Speed |
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80051c4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80051ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7f1b      	ldrb	r3, [r3, #28]
 80051d0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80051d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	7f5b      	ldrb	r3, [r3, #29]
 80051d8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80051da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	7f92      	ldrb	r2, [r2, #30]
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d102      	bne.n	80051ea <ETH_SetMACConfig+0x92>
 80051e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051e8:	e000      	b.n	80051ec <ETH_SetMACConfig+0x94>
 80051ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80051ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	7fdb      	ldrb	r3, [r3, #31]
 80051f2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80051f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	d102      	bne.n	8005206 <ETH_SetMACConfig+0xae>
 8005200:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005204:	e000      	b.n	8005208 <ETH_SetMACConfig+0xb0>
 8005206:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005208:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800520e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005216:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005218:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b56      	ldr	r3, [pc, #344]	@ (8005384 <ETH_SetMACConfig+0x22c>)
 800522a:	4013      	ands	r3, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	430b      	orrs	r3, r1
 8005234:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005242:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005244:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800524c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800524e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005256:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005258:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005260:	2a00      	cmp	r2, #0
 8005262:	d102      	bne.n	800526a <ETH_SetMACConfig+0x112>
 8005264:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005268:	e000      	b.n	800526c <ETH_SetMACConfig+0x114>
 800526a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800526c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	4b42      	ldr	r3, [pc, #264]	@ (8005388 <ETH_SetMACConfig+0x230>)
 800527e:	4013      	ands	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	430b      	orrs	r3, r1
 8005288:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005290:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	4b3a      	ldr	r3, [pc, #232]	@ (800538c <ETH_SetMACConfig+0x234>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	68f9      	ldr	r1, [r7, #12]
 80052aa:	430b      	orrs	r3, r1
 80052ac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80052b4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	d101      	bne.n	80052ca <ETH_SetMACConfig+0x172>
 80052c6:	2280      	movs	r2, #128	@ 0x80
 80052c8:	e000      	b.n	80052cc <ETH_SetMACConfig+0x174>
 80052ca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80052cc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052de:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80052e2:	4013      	ands	r3, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	430b      	orrs	r3, r1
 80052ec:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80052f4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80052fc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	f023 0103 	bic.w	r1, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	430a      	orrs	r2, r1
 8005316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005322:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800533e:	2a00      	cmp	r2, #0
 8005340:	d101      	bne.n	8005346 <ETH_SetMACConfig+0x1ee>
 8005342:	2240      	movs	r2, #64	@ 0x40
 8005344:	e000      	b.n	8005348 <ETH_SetMACConfig+0x1f0>
 8005346:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005348:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005350:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005352:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800535a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005368:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	430a      	orrs	r2, r1
 8005374:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	00048083 	.word	0x00048083
 8005388:	c0f88000 	.word	0xc0f88000
 800538c:	fffffef0 	.word	0xfffffef0

08005390 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b38      	ldr	r3, [pc, #224]	@ (8005488 <ETH_SetDMAConfig+0xf8>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	6811      	ldr	r1, [r2, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	430b      	orrs	r3, r1
 80053b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053b6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	791b      	ldrb	r3, [r3, #4]
 80053bc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	7b1b      	ldrb	r3, [r3, #12]
 80053c8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	4b2c      	ldr	r3, [pc, #176]	@ (800548c <ETH_SetDMAConfig+0xfc>)
 80053da:	4013      	ands	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	68f9      	ldr	r1, [r7, #12]
 80053e2:	430b      	orrs	r3, r1
 80053e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053e8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	7b5b      	ldrb	r3, [r3, #13]
 80053ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005400:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005404:	4b22      	ldr	r3, [pc, #136]	@ (8005490 <ETH_SetDMAConfig+0x100>)
 8005406:	4013      	ands	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	430b      	orrs	r3, r1
 8005410:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005414:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	7d1b      	ldrb	r3, [r3, #20]
 8005420:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005422:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	7f5b      	ldrb	r3, [r3, #29]
 8005428:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005436:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800543a:	4b16      	ldr	r3, [pc, #88]	@ (8005494 <ETH_SetDMAConfig+0x104>)
 800543c:	4013      	ands	r3, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	430b      	orrs	r3, r1
 8005446:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800544a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	7f1b      	ldrb	r3, [r3, #28]
 8005452:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005464:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <ETH_SetDMAConfig+0x108>)
 800546a:	4013      	ands	r3, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	430b      	orrs	r3, r1
 8005474:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005478:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	ffff87fd 	.word	0xffff87fd
 800548c:	ffff2ffe 	.word	0xffff2ffe
 8005490:	fffec000 	.word	0xfffec000
 8005494:	ffc0efef 	.word	0xffc0efef
 8005498:	7fc0ffff 	.word	0x7fc0ffff

0800549c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b0a4      	sub	sp, #144	@ 0x90
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054aa:	2300      	movs	r3, #0
 80054ac:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80054d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80054dc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80054de:	2300      	movs	r3, #0
 80054e0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80054f4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80054f8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005500:	2300      	movs	r3, #0
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005516:	2300      	movs	r3, #0
 8005518:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800551a:	2300      	movs	r3, #0
 800551c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800551e:	2300      	movs	r3, #0
 8005520:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005522:	2300      	movs	r3, #0
 8005524:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005528:	2300      	movs	r3, #0
 800552a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005534:	2320      	movs	r3, #32
 8005536:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005540:	2300      	movs	r3, #0
 8005542:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005546:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800554a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800554c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005550:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005552:	2300      	movs	r3, #0
 8005554:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005558:	2302      	movs	r3, #2
 800555a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800555e:	2300      	movs	r3, #0
 8005560:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005564:	2300      	movs	r3, #0
 8005566:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800556a:	2300      	movs	r3, #0
 800556c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005576:	2300      	movs	r3, #0
 8005578:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005580:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fde6 	bl	8005158 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800558c:	2301      	movs	r3, #1
 800558e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005590:	2301      	movs	r3, #1
 8005592:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005594:	2300      	movs	r3, #0
 8005596:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005598:	2300      	movs	r3, #0
 800559a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800559e:	2300      	movs	r3, #0
 80055a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055a6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80055aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80055b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80055b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80055bc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80055c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80055c2:	f107 0308 	add.w	r3, r7, #8
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fee1 	bl	8005390 <ETH_SetDMAConfig>
}
 80055ce:	bf00      	nop
 80055d0:	3790      	adds	r7, #144	@ 0x90
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e01d      	b.n	8005620 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68d9      	ldr	r1, [r3, #12]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4613      	mov	r3, r2
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	4413      	add	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	440b      	add	r3, r1
 80055f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2200      	movs	r2, #0
 8005606:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2200      	movs	r2, #0
 800560c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	3206      	adds	r2, #6
 8005616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3301      	adds	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d9de      	bls.n	80055e4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005634:	461a      	mov	r2, r3
 8005636:	2303      	movs	r3, #3
 8005638:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005648:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005658:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e023      	b.n	80056be <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6919      	ldr	r1, [r3, #16]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4613      	mov	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4413      	add	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	440b      	add	r3, r1
 8005686:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2200      	movs	r2, #0
 8005692:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2200      	movs	r2, #0
 800569e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2200      	movs	r2, #0
 80056a4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2200      	movs	r2, #0
 80056aa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	3212      	adds	r2, #18
 80056b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d9d8      	bls.n	8005676 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056ea:	461a      	mov	r2, r3
 80056ec:	2303      	movs	r3, #3
 80056ee:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056fe:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005712:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005724:	b480      	push	{r7}
 8005726:	b091      	sub	sp, #68	@ 0x44
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3318      	adds	r3, #24
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800573c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800574a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005762:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005766:	d007      	beq.n	8005778 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576c:	3304      	adds	r3, #4
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005778:	2302      	movs	r3, #2
 800577a:	e266      	b.n	8005c4a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d044      	beq.n	8005812 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	4b75      	ldr	r3, [pc, #468]	@ (8005964 <ETH_Prepare_Tx_Descriptors+0x240>)
 800578e:	4013      	ands	r3, r2
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005794:	431a      	orrs	r2, r3
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800579a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80057b4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d027      	beq.n	8005812 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	431a      	orrs	r2, r3
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	431a      	orrs	r2, r3
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005800:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005810:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	4b51      	ldr	r3, [pc, #324]	@ (8005968 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005824:	4013      	ands	r3, r2
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	6992      	ldr	r2, [r2, #24]
 800582a:	431a      	orrs	r2, r3
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d036      	beq.n	80058c2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005860:	f3bf 8f5f 	dmb	sy
}
 8005864:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005874:	3301      	adds	r3, #1
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800587a:	2b03      	cmp	r3, #3
 800587c:	d902      	bls.n	8005884 <ETH_Prepare_Tx_Descriptors+0x160>
 800587e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005880:	3b04      	subs	r3, #4
 8005882:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800588e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005890:	3301      	adds	r3, #1
 8005892:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800589c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058a0:	d10f      	bne.n	80058c2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80058ac:	f3bf 8f5f 	dmb	sy
}
 80058b0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80058be:	2302      	movs	r3, #2
 80058c0:	e1c3      	b.n	8005c4a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80058c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c4:	3301      	adds	r3, #1
 80058c6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80058c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	4b24      	ldr	r3, [pc, #144]	@ (8005968 <ETH_Prepare_Tx_Descriptors+0x244>)
 80058d8:	4013      	ands	r3, r2
 80058da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058dc:	6852      	ldr	r2, [r2, #4]
 80058de:	431a      	orrs	r2, r3
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d012      	beq.n	8005912 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80058ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	4b1a      	ldr	r3, [pc, #104]	@ (800596c <ETH_Prepare_Tx_Descriptors+0x248>)
 8005902:	4013      	ands	r3, r2
 8005904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005906:	6852      	ldr	r2, [r2, #4]
 8005908:	0412      	lsls	r2, r2, #16
 800590a:	431a      	orrs	r2, r3
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	e008      	b.n	8005924 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	2200      	movs	r2, #0
 8005916:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	4b13      	ldr	r3, [pc, #76]	@ (800596c <ETH_Prepare_Tx_Descriptors+0x248>)
 800591e:	4013      	ands	r3, r2
 8005920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005922:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	d021      	beq.n	8005974 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	04db      	lsls	r3, r3, #19
 800593e:	431a      	orrs	r2, r3
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	4b09      	ldr	r3, [pc, #36]	@ (8005970 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800594a:	4013      	ands	r3, r2
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	69d2      	ldr	r2, [r2, #28]
 8005950:	431a      	orrs	r2, r3
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	60da      	str	r2, [r3, #12]
 8005962:	e02e      	b.n	80059c2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8005964:	ffff0000 	.word	0xffff0000
 8005968:	ffffc000 	.word	0xffffc000
 800596c:	c000ffff 	.word	0xc000ffff
 8005970:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	4b7b      	ldr	r3, [pc, #492]	@ (8005b68 <ETH_Prepare_Tx_Descriptors+0x444>)
 800597a:	4013      	ands	r3, r2
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	6852      	ldr	r2, [r2, #4]
 8005980:	431a      	orrs	r2, r3
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	431a      	orrs	r2, r3
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	431a      	orrs	r2, r3
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	431a      	orrs	r2, r3
 80059dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059de:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80059f8:	f3bf 8f5f 	dmb	sy
}
 80059fc:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80da 	beq.w	8005bcc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a28:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005a2a:	e0cf      	b.n	8005bcc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d902      	bls.n	8005a4a <ETH_Prepare_Tx_Descriptors+0x326>
 8005a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a46:	3b04      	subs	r3, #4
 8005a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a52:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a6c:	d007      	beq.n	8005a7e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a72:	3304      	adds	r3, #4
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d029      	beq.n	8005ad2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a90:	e019      	b.n	8005ac6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005a92:	f3bf 8f5f 	dmb	sy
}
 8005a96:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d902      	bls.n	8005ab6 <ETH_Prepare_Tx_Descriptors+0x392>
 8005ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab2:	3b04      	subs	r3, #4
 8005ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abe:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ac6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d3e1      	bcc.n	8005a92 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e0bb      	b.n	8005c4a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	4b1f      	ldr	r3, [pc, #124]	@ (8005b6c <ETH_Prepare_Tx_Descriptors+0x448>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005af2:	6852      	ldr	r2, [r2, #4]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d012      	beq.n	8005b28 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	4b16      	ldr	r3, [pc, #88]	@ (8005b70 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b1c:	6852      	ldr	r2, [r2, #4]
 8005b1e:	0412      	lsls	r2, r2, #16
 8005b20:	431a      	orrs	r2, r3
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	609a      	str	r2, [r3, #8]
 8005b26:	e008      	b.n	8005b3a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	4b0f      	ldr	r3, [pc, #60]	@ (8005b70 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b38:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d018      	beq.n	8005b78 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b74 <ETH_Prepare_Tx_Descriptors+0x450>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	69d2      	ldr	r2, [r2, #28]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b56:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	60da      	str	r2, [r3, #12]
 8005b64:	e020      	b.n	8005ba8 <ETH_Prepare_Tx_Descriptors+0x484>
 8005b66:	bf00      	nop
 8005b68:	ffff8000 	.word	0xffff8000
 8005b6c:	ffffc000 	.word	0xffffc000
 8005b70:	c000ffff 	.word	0xc000ffff
 8005b74:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	4b36      	ldr	r3, [pc, #216]	@ (8005c58 <ETH_Prepare_Tx_Descriptors+0x534>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	6852      	ldr	r2, [r2, #4]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	3301      	adds	r3, #1
 8005bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005bae:	f3bf 8f5f 	dmb	sy
}
 8005bb2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f47f af2b 	bne.w	8005a2c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d006      	beq.n	8005bea <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be6:	609a      	str	r2, [r3, #8]
 8005be8:	e005      	b.n	8005bf6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c16:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c18:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c1e:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	2301      	movs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c34:	4413      	add	r3, r2
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f383 8810 	msr	PRIMASK, r3
}
 8005c46:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3744      	adds	r7, #68	@ 0x44
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	ffff8000 	.word	0xffff8000

08005c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b089      	sub	sp, #36	@ 0x24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c6a:	4b86      	ldr	r3, [pc, #536]	@ (8005e84 <HAL_GPIO_Init+0x228>)
 8005c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c6e:	e18c      	b.n	8005f8a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	2101      	movs	r1, #1
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 817e 	beq.w	8005f84 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f003 0303 	and.w	r3, r3, #3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d005      	beq.n	8005ca0 <HAL_GPIO_Init+0x44>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d130      	bne.n	8005d02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	2203      	movs	r2, #3
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	091b      	lsrs	r3, r3, #4
 8005cec:	f003 0201 	and.w	r2, r3, #1
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d017      	beq.n	8005d3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	2203      	movs	r2, #3
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d123      	bne.n	8005d92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	08da      	lsrs	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3208      	adds	r2, #8
 8005d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	220f      	movs	r2, #15
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43db      	mvns	r3, r3
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	08da      	lsrs	r2, r3, #3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3208      	adds	r2, #8
 8005d8c:	69b9      	ldr	r1, [r7, #24]
 8005d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4013      	ands	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 0203 	and.w	r2, r3, #3
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 80d8 	beq.w	8005f84 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8005e88 <HAL_GPIO_Init+0x22c>)
 8005dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dda:	4a2b      	ldr	r2, [pc, #172]	@ (8005e88 <HAL_GPIO_Init+0x22c>)
 8005ddc:	f043 0302 	orr.w	r3, r3, #2
 8005de0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005de4:	4b28      	ldr	r3, [pc, #160]	@ (8005e88 <HAL_GPIO_Init+0x22c>)
 8005de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005df2:	4a26      	ldr	r2, [pc, #152]	@ (8005e8c <HAL_GPIO_Init+0x230>)
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	089b      	lsrs	r3, r3, #2
 8005df8:	3302      	adds	r3, #2
 8005dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	220f      	movs	r2, #15
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4013      	ands	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1d      	ldr	r2, [pc, #116]	@ (8005e90 <HAL_GPIO_Init+0x234>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d04a      	beq.n	8005eb4 <HAL_GPIO_Init+0x258>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1c      	ldr	r2, [pc, #112]	@ (8005e94 <HAL_GPIO_Init+0x238>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02b      	beq.n	8005e7e <HAL_GPIO_Init+0x222>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1b      	ldr	r2, [pc, #108]	@ (8005e98 <HAL_GPIO_Init+0x23c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d025      	beq.n	8005e7a <HAL_GPIO_Init+0x21e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1a      	ldr	r2, [pc, #104]	@ (8005e9c <HAL_GPIO_Init+0x240>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01f      	beq.n	8005e76 <HAL_GPIO_Init+0x21a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a19      	ldr	r2, [pc, #100]	@ (8005ea0 <HAL_GPIO_Init+0x244>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d019      	beq.n	8005e72 <HAL_GPIO_Init+0x216>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a18      	ldr	r2, [pc, #96]	@ (8005ea4 <HAL_GPIO_Init+0x248>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_GPIO_Init+0x212>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a17      	ldr	r2, [pc, #92]	@ (8005ea8 <HAL_GPIO_Init+0x24c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00d      	beq.n	8005e6a <HAL_GPIO_Init+0x20e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a16      	ldr	r2, [pc, #88]	@ (8005eac <HAL_GPIO_Init+0x250>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <HAL_GPIO_Init+0x20a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a15      	ldr	r2, [pc, #84]	@ (8005eb0 <HAL_GPIO_Init+0x254>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_GPIO_Init+0x206>
 8005e5e:	2309      	movs	r3, #9
 8005e60:	e029      	b.n	8005eb6 <HAL_GPIO_Init+0x25a>
 8005e62:	230a      	movs	r3, #10
 8005e64:	e027      	b.n	8005eb6 <HAL_GPIO_Init+0x25a>
 8005e66:	2307      	movs	r3, #7
 8005e68:	e025      	b.n	8005eb6 <HAL_GPIO_Init+0x25a>
 8005e6a:	2306      	movs	r3, #6
 8005e6c:	e023      	b.n	8005eb6 <HAL_GPIO_Init+0x25a>
 8005e6e:	2305      	movs	r3, #5
 8005e70:	e021      	b.n	8005eb6 <HAL_GPIO_Init+0x25a>
 8005e72:	2304      	movs	r3, #4
 8005e74:	e01f      	b.n	8005eb6 <HAL_GPIO_Init+0x25a>
 8005e76:	2303      	movs	r3, #3
 8005e78:	e01d      	b.n	8005eb6 <HAL_GPIO_Init+0x25a>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e01b      	b.n	8005eb6 <HAL_GPIO_Init+0x25a>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e019      	b.n	8005eb6 <HAL_GPIO_Init+0x25a>
 8005e82:	bf00      	nop
 8005e84:	58000080 	.word	0x58000080
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	58000400 	.word	0x58000400
 8005e90:	58020000 	.word	0x58020000
 8005e94:	58020400 	.word	0x58020400
 8005e98:	58020800 	.word	0x58020800
 8005e9c:	58020c00 	.word	0x58020c00
 8005ea0:	58021000 	.word	0x58021000
 8005ea4:	58021400 	.word	0x58021400
 8005ea8:	58021800 	.word	0x58021800
 8005eac:	58021c00 	.word	0x58021c00
 8005eb0:	58022400 	.word	0x58022400
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	f002 0203 	and.w	r2, r2, #3
 8005ebc:	0092      	lsls	r2, r2, #2
 8005ebe:	4093      	lsls	r3, r2
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ec6:	4938      	ldr	r1, [pc, #224]	@ (8005fa8 <HAL_GPIO_Init+0x34c>)
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	089b      	lsrs	r3, r3, #2
 8005ecc:	3302      	adds	r3, #2
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005efa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	43db      	mvns	r3, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4013      	ands	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	3301      	adds	r3, #1
 8005f88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f47f ae6b 	bne.w	8005c70 <HAL_GPIO_Init+0x14>
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	3724      	adds	r7, #36	@ 0x24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	58000400 	.word	0x58000400

08005fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	807b      	strh	r3, [r7, #2]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fbc:	787b      	ldrb	r3, [r7, #1]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fc2:	887a      	ldrh	r2, [r7, #2]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005fc8:	e003      	b.n	8005fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fca:	887b      	ldrh	r3, [r7, #2]
 8005fcc:	041a      	lsls	r2, r3, #16
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	619a      	str	r2, [r3, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f804 	bl	8006012 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800600a:	bf00      	nop
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	4603      	mov	r3, r0
 800601a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006030:	4b19      	ldr	r3, [pc, #100]	@ (8006098 <HAL_PWREx_ConfigSupply+0x70>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b04      	cmp	r3, #4
 800603a:	d00a      	beq.n	8006052 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800603c:	4b16      	ldr	r3, [pc, #88]	@ (8006098 <HAL_PWREx_ConfigSupply+0x70>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	429a      	cmp	r2, r3
 8006048:	d001      	beq.n	800604e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e01f      	b.n	800608e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	e01d      	b.n	800608e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006052:	4b11      	ldr	r3, [pc, #68]	@ (8006098 <HAL_PWREx_ConfigSupply+0x70>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f023 0207 	bic.w	r2, r3, #7
 800605a:	490f      	ldr	r1, [pc, #60]	@ (8006098 <HAL_PWREx_ConfigSupply+0x70>)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4313      	orrs	r3, r2
 8006060:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006062:	f7fb ff91 	bl	8001f88 <HAL_GetTick>
 8006066:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006068:	e009      	b.n	800607e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800606a:	f7fb ff8d 	bl	8001f88 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006078:	d901      	bls.n	800607e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e007      	b.n	800608e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800607e:	4b06      	ldr	r3, [pc, #24]	@ (8006098 <HAL_PWREx_ConfigSupply+0x70>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800608a:	d1ee      	bne.n	800606a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	58024800 	.word	0x58024800

0800609c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08c      	sub	sp, #48	@ 0x30
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e3c8      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8087 	beq.w	80061ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060bc:	4b88      	ldr	r3, [pc, #544]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060c6:	4b86      	ldr	r3, [pc, #536]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80060c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d007      	beq.n	80060e2 <HAL_RCC_OscConfig+0x46>
 80060d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d4:	2b18      	cmp	r3, #24
 80060d6:	d110      	bne.n	80060fa <HAL_RCC_OscConfig+0x5e>
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d10b      	bne.n	80060fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e2:	4b7f      	ldr	r3, [pc, #508]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d06c      	beq.n	80061c8 <HAL_RCC_OscConfig+0x12c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d168      	bne.n	80061c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e3a2      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006102:	d106      	bne.n	8006112 <HAL_RCC_OscConfig+0x76>
 8006104:	4b76      	ldr	r3, [pc, #472]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a75      	ldr	r2, [pc, #468]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800610a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	e02e      	b.n	8006170 <HAL_RCC_OscConfig+0xd4>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10c      	bne.n	8006134 <HAL_RCC_OscConfig+0x98>
 800611a:	4b71      	ldr	r3, [pc, #452]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a70      	ldr	r2, [pc, #448]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	4b6e      	ldr	r3, [pc, #440]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a6d      	ldr	r2, [pc, #436]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800612c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	e01d      	b.n	8006170 <HAL_RCC_OscConfig+0xd4>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800613c:	d10c      	bne.n	8006158 <HAL_RCC_OscConfig+0xbc>
 800613e:	4b68      	ldr	r3, [pc, #416]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a67      	ldr	r2, [pc, #412]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	4b65      	ldr	r3, [pc, #404]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a64      	ldr	r2, [pc, #400]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e00b      	b.n	8006170 <HAL_RCC_OscConfig+0xd4>
 8006158:	4b61      	ldr	r3, [pc, #388]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a60      	ldr	r2, [pc, #384]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800615e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	4b5e      	ldr	r3, [pc, #376]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a5d      	ldr	r2, [pc, #372]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800616a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800616e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d013      	beq.n	80061a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006178:	f7fb ff06 	bl	8001f88 <HAL_GetTick>
 800617c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006180:	f7fb ff02 	bl	8001f88 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b64      	cmp	r3, #100	@ 0x64
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e356      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006192:	4b53      	ldr	r3, [pc, #332]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0xe4>
 800619e:	e014      	b.n	80061ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a0:	f7fb fef2 	bl	8001f88 <HAL_GetTick>
 80061a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061a8:	f7fb feee 	bl	8001f88 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b64      	cmp	r3, #100	@ 0x64
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e342      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061ba:	4b49      	ldr	r3, [pc, #292]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x10c>
 80061c6:	e000      	b.n	80061ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 808c 	beq.w	80062f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061d8:	4b41      	ldr	r3, [pc, #260]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061e2:	4b3f      	ldr	r3, [pc, #252]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80061e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <HAL_RCC_OscConfig+0x162>
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	2b18      	cmp	r3, #24
 80061f2:	d137      	bne.n	8006264 <HAL_RCC_OscConfig+0x1c8>
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d132      	bne.n	8006264 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061fe:	4b38      	ldr	r3, [pc, #224]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <HAL_RCC_OscConfig+0x17a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e314      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006216:	4b32      	ldr	r3, [pc, #200]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 0219 	bic.w	r2, r3, #25
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	492f      	ldr	r1, [pc, #188]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006224:	4313      	orrs	r3, r2
 8006226:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fb feae 	bl	8001f88 <HAL_GetTick>
 800622c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006230:	f7fb feaa 	bl	8001f88 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e2fe      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006242:	4b27      	ldr	r3, [pc, #156]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f0      	beq.n	8006230 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800624e:	4b24      	ldr	r3, [pc, #144]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	061b      	lsls	r3, r3, #24
 800625c:	4920      	ldr	r1, [pc, #128]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800625e:	4313      	orrs	r3, r2
 8006260:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006262:	e045      	b.n	80062f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d026      	beq.n	80062ba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800626c:	4b1c      	ldr	r3, [pc, #112]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f023 0219 	bic.w	r2, r3, #25
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	4919      	ldr	r1, [pc, #100]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800627a:	4313      	orrs	r3, r2
 800627c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627e:	f7fb fe83 	bl	8001f88 <HAL_GetTick>
 8006282:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006286:	f7fb fe7f 	bl	8001f88 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e2d3      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006298:	4b11      	ldr	r3, [pc, #68]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a4:	4b0e      	ldr	r3, [pc, #56]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	490b      	ldr	r1, [pc, #44]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	604b      	str	r3, [r1, #4]
 80062b8:	e01a      	b.n	80062f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ba:	4b09      	ldr	r3, [pc, #36]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a08      	ldr	r2, [pc, #32]	@ (80062e0 <HAL_RCC_OscConfig+0x244>)
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fb fe5f 	bl	8001f88 <HAL_GetTick>
 80062ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062cc:	e00a      	b.n	80062e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ce:	f7fb fe5b 	bl	8001f88 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d903      	bls.n	80062e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e2af      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
 80062e0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062e4:	4b96      	ldr	r3, [pc, #600]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1ee      	bne.n	80062ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d06a      	beq.n	80063d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062fc:	4b90      	ldr	r3, [pc, #576]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006304:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006306:	4b8e      	ldr	r3, [pc, #568]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b08      	cmp	r3, #8
 8006310:	d007      	beq.n	8006322 <HAL_RCC_OscConfig+0x286>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b18      	cmp	r3, #24
 8006316:	d11b      	bne.n	8006350 <HAL_RCC_OscConfig+0x2b4>
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b01      	cmp	r3, #1
 8006320:	d116      	bne.n	8006350 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006322:	4b87      	ldr	r3, [pc, #540]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_RCC_OscConfig+0x29e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	2b80      	cmp	r3, #128	@ 0x80
 8006334:	d001      	beq.n	800633a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e282      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800633a:	4b81      	ldr	r3, [pc, #516]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	061b      	lsls	r3, r3, #24
 8006348:	497d      	ldr	r1, [pc, #500]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800634a:	4313      	orrs	r3, r2
 800634c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800634e:	e040      	b.n	80063d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d023      	beq.n	80063a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006358:	4b79      	ldr	r3, [pc, #484]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a78      	ldr	r2, [pc, #480]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800635e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fb fe10 	bl	8001f88 <HAL_GetTick>
 8006368:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800636c:	f7fb fe0c 	bl	8001f88 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e260      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800637e:	4b70      	ldr	r3, [pc, #448]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800638a:	4b6d      	ldr	r3, [pc, #436]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	061b      	lsls	r3, r3, #24
 8006398:	4969      	ldr	r1, [pc, #420]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800639a:	4313      	orrs	r3, r2
 800639c:	60cb      	str	r3, [r1, #12]
 800639e:	e018      	b.n	80063d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80063a0:	4b67      	ldr	r3, [pc, #412]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a66      	ldr	r2, [pc, #408]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 80063a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fb fdec 	bl	8001f88 <HAL_GetTick>
 80063b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063b4:	f7fb fde8 	bl	8001f88 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e23c      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d036      	beq.n	800644c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d019      	beq.n	800641a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e6:	4b56      	ldr	r3, [pc, #344]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 80063e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ea:	4a55      	ldr	r2, [pc, #340]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f2:	f7fb fdc9 	bl	8001f88 <HAL_GetTick>
 80063f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063fa:	f7fb fdc5 	bl	8001f88 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e219      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800640c:	4b4c      	ldr	r3, [pc, #304]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800640e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f0      	beq.n	80063fa <HAL_RCC_OscConfig+0x35e>
 8006418:	e018      	b.n	800644c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800641a:	4b49      	ldr	r3, [pc, #292]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800641c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641e:	4a48      	ldr	r2, [pc, #288]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006426:	f7fb fdaf 	bl	8001f88 <HAL_GetTick>
 800642a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800642e:	f7fb fdab 	bl	8001f88 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e1ff      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006440:	4b3f      	ldr	r3, [pc, #252]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006442:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f0      	bne.n	800642e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d036      	beq.n	80064c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d019      	beq.n	8006494 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006460:	4b37      	ldr	r3, [pc, #220]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a36      	ldr	r2, [pc, #216]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006466:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800646a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800646c:	f7fb fd8c 	bl	8001f88 <HAL_GetTick>
 8006470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006474:	f7fb fd88 	bl	8001f88 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e1dc      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006486:	4b2e      	ldr	r3, [pc, #184]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0x3d8>
 8006492:	e018      	b.n	80064c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006494:	4b2a      	ldr	r3, [pc, #168]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a29      	ldr	r2, [pc, #164]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800649a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800649e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064a0:	f7fb fd72 	bl	8001f88 <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064a8:	f7fb fd6e 	bl	8001f88 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e1c2      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064ba:	4b21      	ldr	r3, [pc, #132]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8086 	beq.w	80065e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006544 <HAL_RCC_OscConfig+0x4a8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006544 <HAL_RCC_OscConfig+0x4a8>)
 80064da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064e0:	f7fb fd52 	bl	8001f88 <HAL_GetTick>
 80064e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e8:	f7fb fd4e 	bl	8001f88 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b64      	cmp	r3, #100	@ 0x64
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e1a2      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064fa:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <HAL_RCC_OscConfig+0x4a8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f0      	beq.n	80064e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d106      	bne.n	800651c <HAL_RCC_OscConfig+0x480>
 800650e:	4b0c      	ldr	r3, [pc, #48]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006512:	4a0b      	ldr	r2, [pc, #44]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	6713      	str	r3, [r2, #112]	@ 0x70
 800651a:	e032      	b.n	8006582 <HAL_RCC_OscConfig+0x4e6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d111      	bne.n	8006548 <HAL_RCC_OscConfig+0x4ac>
 8006524:	4b06      	ldr	r3, [pc, #24]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006528:	4a05      	ldr	r2, [pc, #20]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006530:	4b03      	ldr	r3, [pc, #12]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006534:	4a02      	ldr	r2, [pc, #8]	@ (8006540 <HAL_RCC_OscConfig+0x4a4>)
 8006536:	f023 0304 	bic.w	r3, r3, #4
 800653a:	6713      	str	r3, [r2, #112]	@ 0x70
 800653c:	e021      	b.n	8006582 <HAL_RCC_OscConfig+0x4e6>
 800653e:	bf00      	nop
 8006540:	58024400 	.word	0x58024400
 8006544:	58024800 	.word	0x58024800
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b05      	cmp	r3, #5
 800654e:	d10c      	bne.n	800656a <HAL_RCC_OscConfig+0x4ce>
 8006550:	4b83      	ldr	r3, [pc, #524]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006554:	4a82      	ldr	r2, [pc, #520]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006556:	f043 0304 	orr.w	r3, r3, #4
 800655a:	6713      	str	r3, [r2, #112]	@ 0x70
 800655c:	4b80      	ldr	r3, [pc, #512]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006560:	4a7f      	ldr	r2, [pc, #508]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	6713      	str	r3, [r2, #112]	@ 0x70
 8006568:	e00b      	b.n	8006582 <HAL_RCC_OscConfig+0x4e6>
 800656a:	4b7d      	ldr	r3, [pc, #500]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	4a7c      	ldr	r2, [pc, #496]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	6713      	str	r3, [r2, #112]	@ 0x70
 8006576:	4b7a      	ldr	r3, [pc, #488]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657a:	4a79      	ldr	r2, [pc, #484]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 800657c:	f023 0304 	bic.w	r3, r3, #4
 8006580:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d015      	beq.n	80065b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658a:	f7fb fcfd 	bl	8001f88 <HAL_GetTick>
 800658e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006590:	e00a      	b.n	80065a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006592:	f7fb fcf9 	bl	8001f88 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e14b      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065a8:	4b6d      	ldr	r3, [pc, #436]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80065aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0ee      	beq.n	8006592 <HAL_RCC_OscConfig+0x4f6>
 80065b4:	e014      	b.n	80065e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b6:	f7fb fce7 	bl	8001f88 <HAL_GetTick>
 80065ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065bc:	e00a      	b.n	80065d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065be:	f7fb fce3 	bl	8001f88 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e135      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065d4:	4b62      	ldr	r3, [pc, #392]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ee      	bne.n	80065be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 812a 	beq.w	800683e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065f2:	2b18      	cmp	r3, #24
 80065f4:	f000 80ba 	beq.w	800676c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	f040 8095 	bne.w	800672c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006602:	4b57      	ldr	r3, [pc, #348]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a56      	ldr	r2, [pc, #344]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006608:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800660c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660e:	f7fb fcbb 	bl	8001f88 <HAL_GetTick>
 8006612:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006616:	f7fb fcb7 	bl	8001f88 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e10b      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006628:	4b4d      	ldr	r3, [pc, #308]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f0      	bne.n	8006616 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006634:	4b4a      	ldr	r3, [pc, #296]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006636:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006638:	4b4a      	ldr	r3, [pc, #296]	@ (8006764 <HAL_RCC_OscConfig+0x6c8>)
 800663a:	4013      	ands	r3, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006644:	0112      	lsls	r2, r2, #4
 8006646:	430a      	orrs	r2, r1
 8006648:	4945      	ldr	r1, [pc, #276]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 800664a:	4313      	orrs	r3, r2
 800664c:	628b      	str	r3, [r1, #40]	@ 0x28
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	3b01      	subs	r3, #1
 8006654:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665c:	3b01      	subs	r3, #1
 800665e:	025b      	lsls	r3, r3, #9
 8006660:	b29b      	uxth	r3, r3
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006668:	3b01      	subs	r3, #1
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006676:	3b01      	subs	r3, #1
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800667e:	4938      	ldr	r1, [pc, #224]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006680:	4313      	orrs	r3, r2
 8006682:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006684:	4b36      	ldr	r3, [pc, #216]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006688:	4a35      	ldr	r2, [pc, #212]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006690:	4b33      	ldr	r3, [pc, #204]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006694:	4b34      	ldr	r3, [pc, #208]	@ (8006768 <HAL_RCC_OscConfig+0x6cc>)
 8006696:	4013      	ands	r3, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800669c:	00d2      	lsls	r2, r2, #3
 800669e:	4930      	ldr	r1, [pc, #192]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	f023 020c 	bic.w	r2, r3, #12
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b0:	492b      	ldr	r1, [pc, #172]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	f023 0202 	bic.w	r2, r3, #2
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c2:	4927      	ldr	r1, [pc, #156]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066c8:	4b25      	ldr	r3, [pc, #148]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	4a24      	ldr	r2, [pc, #144]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d4:	4b22      	ldr	r3, [pc, #136]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d8:	4a21      	ldr	r2, [pc, #132]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80066e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80066ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066f8:	4b19      	ldr	r3, [pc, #100]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a18      	ldr	r2, [pc, #96]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 80066fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006704:	f7fb fc40 	bl	8001f88 <HAL_GetTick>
 8006708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670c:	f7fb fc3c 	bl	8001f88 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e090      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800671e:	4b10      	ldr	r3, [pc, #64]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x670>
 800672a:	e088      	b.n	800683e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672c:	4b0c      	ldr	r3, [pc, #48]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0b      	ldr	r2, [pc, #44]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006738:	f7fb fc26 	bl	8001f88 <HAL_GetTick>
 800673c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006740:	f7fb fc22 	bl	8001f88 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e076      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006752:	4b03      	ldr	r3, [pc, #12]	@ (8006760 <HAL_RCC_OscConfig+0x6c4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f0      	bne.n	8006740 <HAL_RCC_OscConfig+0x6a4>
 800675e:	e06e      	b.n	800683e <HAL_RCC_OscConfig+0x7a2>
 8006760:	58024400 	.word	0x58024400
 8006764:	fffffc0c 	.word	0xfffffc0c
 8006768:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800676c:	4b36      	ldr	r3, [pc, #216]	@ (8006848 <HAL_RCC_OscConfig+0x7ac>)
 800676e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006770:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006772:	4b35      	ldr	r3, [pc, #212]	@ (8006848 <HAL_RCC_OscConfig+0x7ac>)
 8006774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006776:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	2b01      	cmp	r3, #1
 800677e:	d031      	beq.n	80067e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f003 0203 	and.w	r2, r3, #3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800678a:	429a      	cmp	r2, r3
 800678c:	d12a      	bne.n	80067e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	091b      	lsrs	r3, r3, #4
 8006792:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679a:	429a      	cmp	r2, r3
 800679c:	d122      	bne.n	80067e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d11a      	bne.n	80067e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	0a5b      	lsrs	r3, r3, #9
 80067b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067bc:	429a      	cmp	r2, r3
 80067be:	d111      	bne.n	80067e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	0c1b      	lsrs	r3, r3, #16
 80067c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d108      	bne.n	80067e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	0e1b      	lsrs	r3, r3, #24
 80067d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d001      	beq.n	80067e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e02b      	b.n	8006840 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80067e8:	4b17      	ldr	r3, [pc, #92]	@ (8006848 <HAL_RCC_OscConfig+0x7ac>)
 80067ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ec:	08db      	lsrs	r3, r3, #3
 80067ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d01f      	beq.n	800683e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80067fe:	4b12      	ldr	r3, [pc, #72]	@ (8006848 <HAL_RCC_OscConfig+0x7ac>)
 8006800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006802:	4a11      	ldr	r2, [pc, #68]	@ (8006848 <HAL_RCC_OscConfig+0x7ac>)
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800680a:	f7fb fbbd 	bl	8001f88 <HAL_GetTick>
 800680e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006810:	bf00      	nop
 8006812:	f7fb fbb9 	bl	8001f88 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	4293      	cmp	r3, r2
 800681c:	d0f9      	beq.n	8006812 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800681e:	4b0a      	ldr	r3, [pc, #40]	@ (8006848 <HAL_RCC_OscConfig+0x7ac>)
 8006820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006822:	4b0a      	ldr	r3, [pc, #40]	@ (800684c <HAL_RCC_OscConfig+0x7b0>)
 8006824:	4013      	ands	r3, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800682a:	00d2      	lsls	r2, r2, #3
 800682c:	4906      	ldr	r1, [pc, #24]	@ (8006848 <HAL_RCC_OscConfig+0x7ac>)
 800682e:	4313      	orrs	r3, r2
 8006830:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006832:	4b05      	ldr	r3, [pc, #20]	@ (8006848 <HAL_RCC_OscConfig+0x7ac>)
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	4a04      	ldr	r2, [pc, #16]	@ (8006848 <HAL_RCC_OscConfig+0x7ac>)
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3730      	adds	r7, #48	@ 0x30
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	58024400 	.word	0x58024400
 800684c:	ffff0007 	.word	0xffff0007

08006850 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e19c      	b.n	8006b9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006864:	4b8a      	ldr	r3, [pc, #552]	@ (8006a90 <HAL_RCC_ClockConfig+0x240>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d910      	bls.n	8006894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006872:	4b87      	ldr	r3, [pc, #540]	@ (8006a90 <HAL_RCC_ClockConfig+0x240>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 020f 	bic.w	r2, r3, #15
 800687a:	4985      	ldr	r1, [pc, #532]	@ (8006a90 <HAL_RCC_ClockConfig+0x240>)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	4313      	orrs	r3, r2
 8006880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006882:	4b83      	ldr	r3, [pc, #524]	@ (8006a90 <HAL_RCC_ClockConfig+0x240>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d001      	beq.n	8006894 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e184      	b.n	8006b9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d010      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	4b7b      	ldr	r3, [pc, #492]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d908      	bls.n	80068c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068b0:	4b78      	ldr	r3, [pc, #480]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	4975      	ldr	r1, [pc, #468]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d010      	beq.n	80068f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	4b70      	ldr	r3, [pc, #448]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068da:	429a      	cmp	r2, r3
 80068dc:	d908      	bls.n	80068f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068de:	4b6d      	ldr	r3, [pc, #436]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	496a      	ldr	r1, [pc, #424]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d010      	beq.n	800691e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	4b64      	ldr	r3, [pc, #400]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006908:	429a      	cmp	r2, r3
 800690a:	d908      	bls.n	800691e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800690c:	4b61      	ldr	r3, [pc, #388]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	495e      	ldr	r1, [pc, #376]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 800691a:	4313      	orrs	r3, r2
 800691c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d010      	beq.n	800694c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69da      	ldr	r2, [r3, #28]
 800692e:	4b59      	ldr	r3, [pc, #356]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006936:	429a      	cmp	r2, r3
 8006938:	d908      	bls.n	800694c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800693a:	4b56      	ldr	r3, [pc, #344]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	4953      	ldr	r1, [pc, #332]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006948:	4313      	orrs	r3, r2
 800694a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	4b4d      	ldr	r3, [pc, #308]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	429a      	cmp	r2, r3
 8006966:	d908      	bls.n	800697a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006968:	4b4a      	ldr	r3, [pc, #296]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f023 020f 	bic.w	r2, r3, #15
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	4947      	ldr	r1, [pc, #284]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006976:	4313      	orrs	r3, r2
 8006978:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d055      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006986:	4b43      	ldr	r3, [pc, #268]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	4940      	ldr	r1, [pc, #256]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006994:	4313      	orrs	r3, r2
 8006996:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d107      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d121      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0f6      	b.n	8006b9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d107      	bne.n	80069c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069b8:	4b36      	ldr	r3, [pc, #216]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d115      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0ea      	b.n	8006b9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d107      	bne.n	80069e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069d0:	4b30      	ldr	r3, [pc, #192]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0de      	b.n	8006b9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e0d6      	b.n	8006b9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069f0:	4b28      	ldr	r3, [pc, #160]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f023 0207 	bic.w	r2, r3, #7
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4925      	ldr	r1, [pc, #148]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a02:	f7fb fac1 	bl	8001f88 <HAL_GetTick>
 8006a06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a08:	e00a      	b.n	8006a20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a0a:	f7fb fabd 	bl	8001f88 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e0be      	b.n	8006b9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a20:	4b1c      	ldr	r3, [pc, #112]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d1eb      	bne.n	8006a0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d010      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	4b14      	ldr	r3, [pc, #80]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d208      	bcs.n	8006a60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a4e:	4b11      	ldr	r3, [pc, #68]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f023 020f 	bic.w	r2, r3, #15
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	490e      	ldr	r1, [pc, #56]	@ (8006a94 <HAL_RCC_ClockConfig+0x244>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a60:	4b0b      	ldr	r3, [pc, #44]	@ (8006a90 <HAL_RCC_ClockConfig+0x240>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d214      	bcs.n	8006a98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6e:	4b08      	ldr	r3, [pc, #32]	@ (8006a90 <HAL_RCC_ClockConfig+0x240>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f023 020f 	bic.w	r2, r3, #15
 8006a76:	4906      	ldr	r1, [pc, #24]	@ (8006a90 <HAL_RCC_ClockConfig+0x240>)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7e:	4b04      	ldr	r3, [pc, #16]	@ (8006a90 <HAL_RCC_ClockConfig+0x240>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d005      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e086      	b.n	8006b9e <HAL_RCC_ClockConfig+0x34e>
 8006a90:	52002000 	.word	0x52002000
 8006a94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d010      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d208      	bcs.n	8006ac6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	4939      	ldr	r1, [pc, #228]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d010      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695a      	ldr	r2, [r3, #20]
 8006ad6:	4b34      	ldr	r3, [pc, #208]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d208      	bcs.n	8006af4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ae2:	4b31      	ldr	r3, [pc, #196]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	492e      	ldr	r1, [pc, #184]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d010      	beq.n	8006b22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	4b28      	ldr	r3, [pc, #160]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d208      	bcs.n	8006b22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b10:	4b25      	ldr	r3, [pc, #148]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	4922      	ldr	r1, [pc, #136]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d010      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d208      	bcs.n	8006b50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	4917      	ldr	r1, [pc, #92]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b50:	f000 f834 	bl	8006bbc <HAL_RCC_GetSysClockFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b14      	ldr	r3, [pc, #80]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	4912      	ldr	r1, [pc, #72]	@ (8006bac <HAL_RCC_ClockConfig+0x35c>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba8 <HAL_RCC_ClockConfig+0x358>)
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	4a0d      	ldr	r2, [pc, #52]	@ (8006bac <HAL_RCC_ClockConfig+0x35c>)
 8006b78:	5cd3      	ldrb	r3, [r2, r3]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	fa22 f303 	lsr.w	r3, r2, r3
 8006b84:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb0 <HAL_RCC_ClockConfig+0x360>)
 8006b86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b88:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb4 <HAL_RCC_ClockConfig+0x364>)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <HAL_RCC_ClockConfig+0x368>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fa fe3c 	bl	8001810 <HAL_InitTick>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	58024400 	.word	0x58024400
 8006bac:	0801e6cc 	.word	0x0801e6cc
 8006bb0:	240049c4 	.word	0x240049c4
 8006bb4:	240049c0 	.word	0x240049c0
 8006bb8:	240049c8 	.word	0x240049c8

08006bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b089      	sub	sp, #36	@ 0x24
 8006bc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bc2:	4bb3      	ldr	r3, [pc, #716]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bca:	2b18      	cmp	r3, #24
 8006bcc:	f200 8155 	bhi.w	8006e7a <HAL_RCC_GetSysClockFreq+0x2be>
 8006bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006c3d 	.word	0x08006c3d
 8006bdc:	08006e7b 	.word	0x08006e7b
 8006be0:	08006e7b 	.word	0x08006e7b
 8006be4:	08006e7b 	.word	0x08006e7b
 8006be8:	08006e7b 	.word	0x08006e7b
 8006bec:	08006e7b 	.word	0x08006e7b
 8006bf0:	08006e7b 	.word	0x08006e7b
 8006bf4:	08006e7b 	.word	0x08006e7b
 8006bf8:	08006c63 	.word	0x08006c63
 8006bfc:	08006e7b 	.word	0x08006e7b
 8006c00:	08006e7b 	.word	0x08006e7b
 8006c04:	08006e7b 	.word	0x08006e7b
 8006c08:	08006e7b 	.word	0x08006e7b
 8006c0c:	08006e7b 	.word	0x08006e7b
 8006c10:	08006e7b 	.word	0x08006e7b
 8006c14:	08006e7b 	.word	0x08006e7b
 8006c18:	08006c69 	.word	0x08006c69
 8006c1c:	08006e7b 	.word	0x08006e7b
 8006c20:	08006e7b 	.word	0x08006e7b
 8006c24:	08006e7b 	.word	0x08006e7b
 8006c28:	08006e7b 	.word	0x08006e7b
 8006c2c:	08006e7b 	.word	0x08006e7b
 8006c30:	08006e7b 	.word	0x08006e7b
 8006c34:	08006e7b 	.word	0x08006e7b
 8006c38:	08006c6f 	.word	0x08006c6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c3c:	4b94      	ldr	r3, [pc, #592]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c48:	4b91      	ldr	r3, [pc, #580]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	08db      	lsrs	r3, r3, #3
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	4a90      	ldr	r2, [pc, #576]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c54:	fa22 f303 	lsr.w	r3, r2, r3
 8006c58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006c5a:	e111      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c5c:	4b8d      	ldr	r3, [pc, #564]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c5e:	61bb      	str	r3, [r7, #24]
      break;
 8006c60:	e10e      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006c62:	4b8d      	ldr	r3, [pc, #564]	@ (8006e98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c64:	61bb      	str	r3, [r7, #24]
      break;
 8006c66:	e10b      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006c68:	4b8c      	ldr	r3, [pc, #560]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c6a:	61bb      	str	r3, [r7, #24]
      break;
 8006c6c:	e108      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c6e:	4b88      	ldr	r3, [pc, #544]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c78:	4b85      	ldr	r3, [pc, #532]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	091b      	lsrs	r3, r3, #4
 8006c7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c84:	4b82      	ldr	r3, [pc, #520]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c8e:	4b80      	ldr	r3, [pc, #512]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c92:	08db      	lsrs	r3, r3, #3
 8006c94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80e1 	beq.w	8006e74 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	f000 8083 	beq.w	8006dc0 <HAL_RCC_GetSysClockFreq+0x204>
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	f200 80a1 	bhi.w	8006e04 <HAL_RCC_GetSysClockFreq+0x248>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x114>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d056      	beq.n	8006d7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006cce:	e099      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d02d      	beq.n	8006d38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	08db      	lsrs	r3, r3, #3
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d06:	4b62      	ldr	r3, [pc, #392]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006d36:	e087      	b.n	8006e48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006ea4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4a:	4b51      	ldr	r3, [pc, #324]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d7a:	e065      	b.n	8006e48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006ea8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d8e:	4b40      	ldr	r3, [pc, #256]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006da2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dbe:	e043      	b.n	8006e48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006eac <HAL_RCC_GetSysClockFreq+0x2f0>
 8006dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006de6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e02:	e021      	b.n	8006e48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006ea8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e16:	4b1e      	ldr	r3, [pc, #120]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006ea0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006e48:	4b11      	ldr	r3, [pc, #68]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4c:	0a5b      	lsrs	r3, r3, #9
 8006e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e52:	3301      	adds	r3, #1
 8006e54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	ee07 3a90 	vmov	s15, r3
 8006e5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e6c:	ee17 3a90 	vmov	r3, s15
 8006e70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006e72:	e005      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61bb      	str	r3, [r7, #24]
      break;
 8006e78:	e002      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006e7a:	4b07      	ldr	r3, [pc, #28]	@ (8006e98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e7c:	61bb      	str	r3, [r7, #24]
      break;
 8006e7e:	bf00      	nop
  }

  return sysclockfreq;
 8006e80:	69bb      	ldr	r3, [r7, #24]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3724      	adds	r7, #36	@ 0x24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400
 8006e94:	03d09000 	.word	0x03d09000
 8006e98:	003d0900 	.word	0x003d0900
 8006e9c:	007a1200 	.word	0x007a1200
 8006ea0:	46000000 	.word	0x46000000
 8006ea4:	4c742400 	.word	0x4c742400
 8006ea8:	4a742400 	.word	0x4a742400
 8006eac:	4af42400 	.word	0x4af42400

08006eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006eb6:	f7ff fe81 	bl	8006bbc <HAL_RCC_GetSysClockFreq>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	4b10      	ldr	r3, [pc, #64]	@ (8006f00 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	0a1b      	lsrs	r3, r3, #8
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	490f      	ldr	r1, [pc, #60]	@ (8006f04 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ec8:	5ccb      	ldrb	r3, [r1, r3]
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	4a09      	ldr	r2, [pc, #36]	@ (8006f04 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ede:	5cd3      	ldrb	r3, [r2, r3]
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eea:	4a07      	ldr	r2, [pc, #28]	@ (8006f08 <HAL_RCC_GetHCLKFreq+0x58>)
 8006eec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006eee:	4a07      	ldr	r2, [pc, #28]	@ (8006f0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ef4:	4b04      	ldr	r3, [pc, #16]	@ (8006f08 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	58024400 	.word	0x58024400
 8006f04:	0801e6cc 	.word	0x0801e6cc
 8006f08:	240049c4 	.word	0x240049c4
 8006f0c:	240049c0 	.word	0x240049c0

08006f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f14:	f7ff ffcc 	bl	8006eb0 <HAL_RCC_GetHCLKFreq>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	4b06      	ldr	r3, [pc, #24]	@ (8006f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	091b      	lsrs	r3, r3, #4
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	4904      	ldr	r1, [pc, #16]	@ (8006f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f26:	5ccb      	ldrb	r3, [r1, r3]
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	58024400 	.word	0x58024400
 8006f38:	0801e6cc 	.word	0x0801e6cc

08006f3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	223f      	movs	r2, #63	@ 0x3f
 8006f4a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f003 0207 	and.w	r2, r3, #7
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006f58:	4b17      	ldr	r3, [pc, #92]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006f64:	4b14      	ldr	r3, [pc, #80]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006f70:	4b11      	ldr	r3, [pc, #68]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006f88:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006f94:	4b08      	ldr	r3, [pc, #32]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <HAL_RCC_GetClockConfig+0x80>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 020f 	and.w	r2, r3, #15
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	601a      	str	r2, [r3, #0]
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	52002000 	.word	0x52002000

08006fc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc4:	b0c6      	sub	sp, #280	@ 0x118
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006fe4:	2500      	movs	r5, #0
 8006fe6:	ea54 0305 	orrs.w	r3, r4, r5
 8006fea:	d049      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ff2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ff6:	d02f      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ff8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ffc:	d828      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007002:	d01a      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007008:	d822      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800700e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007012:	d007      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007014:	e01c      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007016:	4bab      	ldr	r3, [pc, #684]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	4aaa      	ldr	r2, [pc, #680]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800701c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007022:	e01a      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007028:	3308      	adds	r3, #8
 800702a:	2102      	movs	r1, #2
 800702c:	4618      	mov	r0, r3
 800702e:	f001 f967 	bl	8008300 <RCCEx_PLL2_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007038:	e00f      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703e:	3328      	adds	r3, #40	@ 0x28
 8007040:	2102      	movs	r1, #2
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fa0e 	bl	8008464 <RCCEx_PLL3_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800704e:	e004      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007062:	4b98      	ldr	r3, [pc, #608]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007066:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800706a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007070:	4a94      	ldr	r2, [pc, #592]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007072:	430b      	orrs	r3, r1
 8007074:	6513      	str	r3, [r2, #80]	@ 0x50
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800707c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800708c:	f04f 0900 	mov.w	r9, #0
 8007090:	ea58 0309 	orrs.w	r3, r8, r9
 8007094:	d047      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709c:	2b04      	cmp	r3, #4
 800709e:	d82a      	bhi.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80070a0:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	080070bd 	.word	0x080070bd
 80070ac:	080070cb 	.word	0x080070cb
 80070b0:	080070e1 	.word	0x080070e1
 80070b4:	080070ff 	.word	0x080070ff
 80070b8:	080070ff 	.word	0x080070ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070bc:	4b81      	ldr	r3, [pc, #516]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c0:	4a80      	ldr	r2, [pc, #512]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070c8:	e01a      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ce:	3308      	adds	r3, #8
 80070d0:	2100      	movs	r1, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f001 f914 	bl	8008300 <RCCEx_PLL2_Config>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070de:	e00f      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e4:	3328      	adds	r3, #40	@ 0x28
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 f9bb 	bl	8008464 <RCCEx_PLL3_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070f4:	e004      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070fc:	e000      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80070fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007108:	4b6e      	ldr	r3, [pc, #440]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800710a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800710c:	f023 0107 	bic.w	r1, r3, #7
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007116:	4a6b      	ldr	r2, [pc, #428]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007118:	430b      	orrs	r3, r1
 800711a:	6513      	str	r3, [r2, #80]	@ 0x50
 800711c:	e003      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007122:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007132:	f04f 0b00 	mov.w	fp, #0
 8007136:	ea5a 030b 	orrs.w	r3, sl, fp
 800713a:	d05b      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007144:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007148:	d03b      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800714a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800714e:	d834      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007150:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007154:	d037      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007156:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800715a:	d82e      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800715c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007160:	d033      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007162:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007166:	d828      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800716c:	d01a      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800716e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007172:	d822      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007178:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800717c:	d007      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800717e:	e01c      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007180:	4b50      	ldr	r3, [pc, #320]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	4a4f      	ldr	r2, [pc, #316]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800718a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800718c:	e01e      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007192:	3308      	adds	r3, #8
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f001 f8b2 	bl	8008300 <RCCEx_PLL2_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071a2:	e013      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a8:	3328      	adds	r3, #40	@ 0x28
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f959 	bl	8008464 <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071b8:	e008      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071c0:	e004      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80071c2:	bf00      	nop
 80071c4:	e002      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80071ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071d4:	4b3b      	ldr	r3, [pc, #236]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071e4:	4a37      	ldr	r2, [pc, #220]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071e6:	430b      	orrs	r3, r1
 80071e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80071ea:	e003      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007204:	2300      	movs	r3, #0
 8007206:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800720a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800720e:	460b      	mov	r3, r1
 8007210:	4313      	orrs	r3, r2
 8007212:	d05d      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007218:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800721c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007220:	d03b      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007222:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007226:	d834      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007228:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800722c:	d037      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800722e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007232:	d82e      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007234:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007238:	d033      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800723a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800723e:	d828      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007240:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007244:	d01a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800724a:	d822      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007254:	d007      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007256:	e01c      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007258:	4b1a      	ldr	r3, [pc, #104]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	4a19      	ldr	r2, [pc, #100]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800725e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007264:	e01e      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726a:	3308      	adds	r3, #8
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f001 f846 	bl	8008300 <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800727a:	e013      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	3328      	adds	r3, #40	@ 0x28
 8007282:	2100      	movs	r1, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f001 f8ed 	bl	8008464 <RCCEx_PLL3_Config>
 800728a:	4603      	mov	r3, r0
 800728c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007290:	e008      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007298:	e004      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800729a:	bf00      	nop
 800729c:	e002      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800729e:	bf00      	nop
 80072a0:	e000      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80072a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10d      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072ac:	4b05      	ldr	r3, [pc, #20]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80072bc:	4a01      	ldr	r2, [pc, #4]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072be:	430b      	orrs	r3, r1
 80072c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80072c2:	e005      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80072c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80072d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80072dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80072e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4313      	orrs	r3, r2
 80072ee:	d03a      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f6:	2b30      	cmp	r3, #48	@ 0x30
 80072f8:	d01f      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80072fa:	2b30      	cmp	r3, #48	@ 0x30
 80072fc:	d819      	bhi.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d00c      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007302:	2b20      	cmp	r3, #32
 8007304:	d815      	bhi.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d019      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800730a:	2b10      	cmp	r3, #16
 800730c:	d111      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800730e:	4baa      	ldr	r3, [pc, #680]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	4aa9      	ldr	r2, [pc, #676]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007318:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800731a:	e011      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007320:	3308      	adds	r3, #8
 8007322:	2102      	movs	r1, #2
 8007324:	4618      	mov	r0, r3
 8007326:	f000 ffeb 	bl	8008300 <RCCEx_PLL2_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007330:	e006      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007338:	e002      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800733e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007348:	4b9b      	ldr	r3, [pc, #620]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800734a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007356:	4a98      	ldr	r2, [pc, #608]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007358:	430b      	orrs	r3, r1
 800735a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800735c:	e003      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007362:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007376:	2300      	movs	r3, #0
 8007378:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800737c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007380:	460b      	mov	r3, r1
 8007382:	4313      	orrs	r3, r2
 8007384:	d051      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007390:	d035      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007392:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007396:	d82e      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007398:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800739c:	d031      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800739e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073a2:	d828      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073a8:	d01a      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80073aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ae:	d822      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80073b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b8:	d007      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80073ba:	e01c      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073bc:	4b7e      	ldr	r3, [pc, #504]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	4a7d      	ldr	r2, [pc, #500]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073c8:	e01c      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	3308      	adds	r3, #8
 80073d0:	2100      	movs	r1, #0
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 ff94 	bl	8008300 <RCCEx_PLL2_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073de:	e011      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	3328      	adds	r3, #40	@ 0x28
 80073e6:	2100      	movs	r1, #0
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 f83b 	bl	8008464 <RCCEx_PLL3_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073f4:	e006      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073fc:	e002      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80073fe:	bf00      	nop
 8007400:	e000      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800740c:	4b6a      	ldr	r3, [pc, #424]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800740e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007410:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741a:	4a67      	ldr	r2, [pc, #412]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800741c:	430b      	orrs	r3, r1
 800741e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007420:	e003      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007426:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800742a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007436:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800743a:	2300      	movs	r3, #0
 800743c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007440:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007444:	460b      	mov	r3, r1
 8007446:	4313      	orrs	r3, r2
 8007448:	d053      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007454:	d033      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007456:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800745a:	d82c      	bhi.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800745c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007460:	d02f      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007466:	d826      	bhi.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007468:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800746c:	d02b      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800746e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007472:	d820      	bhi.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007478:	d012      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800747a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800747e:	d81a      	bhi.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d022      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007488:	d115      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800748a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748e:	3308      	adds	r3, #8
 8007490:	2101      	movs	r1, #1
 8007492:	4618      	mov	r0, r3
 8007494:	f000 ff34 	bl	8008300 <RCCEx_PLL2_Config>
 8007498:	4603      	mov	r3, r0
 800749a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800749e:	e015      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	3328      	adds	r3, #40	@ 0x28
 80074a6:	2101      	movs	r1, #1
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 ffdb 	bl	8008464 <RCCEx_PLL3_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074b4:	e00a      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074bc:	e006      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074be:	bf00      	nop
 80074c0:	e004      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074c2:	bf00      	nop
 80074c4:	e002      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074c6:	bf00      	nop
 80074c8:	e000      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80074ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10a      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074d4:	4b38      	ldr	r3, [pc, #224]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e2:	4a35      	ldr	r2, [pc, #212]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074e4:	430b      	orrs	r3, r1
 80074e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80074e8:	e003      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80074fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007502:	2300      	movs	r3, #0
 8007504:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007508:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800750c:	460b      	mov	r3, r1
 800750e:	4313      	orrs	r3, r2
 8007510:	d058      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800751a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800751e:	d033      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007520:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007524:	d82c      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752a:	d02f      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800752c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007530:	d826      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007532:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007536:	d02b      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007538:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800753c:	d820      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800753e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007542:	d012      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007548:	d81a      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d022      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800754e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007552:	d115      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007558:	3308      	adds	r3, #8
 800755a:	2101      	movs	r1, #1
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fecf 	bl	8008300 <RCCEx_PLL2_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007568:	e015      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800756a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756e:	3328      	adds	r3, #40	@ 0x28
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f000 ff76 	bl	8008464 <RCCEx_PLL3_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800757e:	e00a      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007586:	e006      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007588:	bf00      	nop
 800758a:	e004      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800758c:	bf00      	nop
 800758e:	e002      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007590:	bf00      	nop
 8007592:	e000      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10e      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800759e:	4b06      	ldr	r3, [pc, #24]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075ae:	4a02      	ldr	r2, [pc, #8]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075b0:	430b      	orrs	r3, r1
 80075b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80075b4:	e006      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80075b6:	bf00      	nop
 80075b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80075d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075d4:	2300      	movs	r3, #0
 80075d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80075da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80075de:	460b      	mov	r3, r1
 80075e0:	4313      	orrs	r3, r2
 80075e2:	d037      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ee:	d00e      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80075f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075f4:	d816      	bhi.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d018      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80075fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075fe:	d111      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007600:	4bc4      	ldr	r3, [pc, #784]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	4ac3      	ldr	r2, [pc, #780]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800760a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800760c:	e00f      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007612:	3308      	adds	r3, #8
 8007614:	2101      	movs	r1, #1
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fe72 	bl	8008300 <RCCEx_PLL2_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007622:	e004      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800762a:	e000      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800762c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800762e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007636:	4bb7      	ldr	r3, [pc, #732]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800763a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007644:	4ab3      	ldr	r2, [pc, #716]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007646:	430b      	orrs	r3, r1
 8007648:	6513      	str	r3, [r2, #80]	@ 0x50
 800764a:	e003      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007664:	2300      	movs	r3, #0
 8007666:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800766a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800766e:	460b      	mov	r3, r1
 8007670:	4313      	orrs	r3, r2
 8007672:	d039      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800767a:	2b03      	cmp	r3, #3
 800767c:	d81c      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800767e:	a201      	add	r2, pc, #4	@ (adr r2, 8007684 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	080076c1 	.word	0x080076c1
 8007688:	08007695 	.word	0x08007695
 800768c:	080076a3 	.word	0x080076a3
 8007690:	080076c1 	.word	0x080076c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007694:	4b9f      	ldr	r3, [pc, #636]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	4a9e      	ldr	r2, [pc, #632]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800769a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800769e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076a0:	e00f      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	3308      	adds	r3, #8
 80076a8:	2102      	movs	r1, #2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fe28 	bl	8008300 <RCCEx_PLL2_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076b6:	e004      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80076c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076ca:	4b92      	ldr	r3, [pc, #584]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ce:	f023 0103 	bic.w	r1, r3, #3
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076d8:	4a8e      	ldr	r2, [pc, #568]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076da:	430b      	orrs	r3, r1
 80076dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076de:	e003      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80076f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076f8:	2300      	movs	r3, #0
 80076fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007702:	460b      	mov	r3, r1
 8007704:	4313      	orrs	r3, r2
 8007706:	f000 8099 	beq.w	800783c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800770a:	4b83      	ldr	r3, [pc, #524]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a82      	ldr	r2, [pc, #520]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007714:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007716:	f7fa fc37 	bl	8001f88 <HAL_GetTick>
 800771a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800771e:	e00b      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007720:	f7fa fc32 	bl	8001f88 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b64      	cmp	r3, #100	@ 0x64
 800772e:	d903      	bls.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007736:	e005      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007738:	4b77      	ldr	r3, [pc, #476]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0ed      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007748:	2b00      	cmp	r3, #0
 800774a:	d173      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800774c:	4b71      	ldr	r3, [pc, #452]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800774e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007758:	4053      	eors	r3, r2
 800775a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800775e:	2b00      	cmp	r3, #0
 8007760:	d015      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007762:	4b6c      	ldr	r3, [pc, #432]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800776a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800776e:	4b69      	ldr	r3, [pc, #420]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007772:	4a68      	ldr	r2, [pc, #416]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007778:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800777a:	4b66      	ldr	r3, [pc, #408]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800777c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800777e:	4a65      	ldr	r2, [pc, #404]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007784:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007786:	4a63      	ldr	r2, [pc, #396]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800778c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800778e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800779a:	d118      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779c:	f7fa fbf4 	bl	8001f88 <HAL_GetTick>
 80077a0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077a4:	e00d      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077a6:	f7fa fbef 	bl	8001f88 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80077b0:	1ad2      	subs	r2, r2, r3
 80077b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d903      	bls.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80077c0:	e005      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077c2:	4b54      	ldr	r3, [pc, #336]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0eb      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80077ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d129      	bne.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077e6:	d10e      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80077e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077f8:	091a      	lsrs	r2, r3, #4
 80077fa:	4b48      	ldr	r3, [pc, #288]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	4a45      	ldr	r2, [pc, #276]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007800:	430b      	orrs	r3, r1
 8007802:	6113      	str	r3, [r2, #16]
 8007804:	e005      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007806:	4b43      	ldr	r3, [pc, #268]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	4a42      	ldr	r2, [pc, #264]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800780c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007810:	6113      	str	r3, [r2, #16]
 8007812:	4b40      	ldr	r3, [pc, #256]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007814:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800781e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007822:	4a3c      	ldr	r2, [pc, #240]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007824:	430b      	orrs	r3, r1
 8007826:	6713      	str	r3, [r2, #112]	@ 0x70
 8007828:	e008      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800782a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800782e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007832:	e003      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007838:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800783c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f002 0301 	and.w	r3, r2, #1
 8007848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800784c:	2300      	movs	r3, #0
 800784e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007852:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007856:	460b      	mov	r3, r1
 8007858:	4313      	orrs	r3, r2
 800785a:	f000 808f 	beq.w	800797c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007862:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007864:	2b28      	cmp	r3, #40	@ 0x28
 8007866:	d871      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007868:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	08007955 	.word	0x08007955
 8007874:	0800794d 	.word	0x0800794d
 8007878:	0800794d 	.word	0x0800794d
 800787c:	0800794d 	.word	0x0800794d
 8007880:	0800794d 	.word	0x0800794d
 8007884:	0800794d 	.word	0x0800794d
 8007888:	0800794d 	.word	0x0800794d
 800788c:	0800794d 	.word	0x0800794d
 8007890:	08007921 	.word	0x08007921
 8007894:	0800794d 	.word	0x0800794d
 8007898:	0800794d 	.word	0x0800794d
 800789c:	0800794d 	.word	0x0800794d
 80078a0:	0800794d 	.word	0x0800794d
 80078a4:	0800794d 	.word	0x0800794d
 80078a8:	0800794d 	.word	0x0800794d
 80078ac:	0800794d 	.word	0x0800794d
 80078b0:	08007937 	.word	0x08007937
 80078b4:	0800794d 	.word	0x0800794d
 80078b8:	0800794d 	.word	0x0800794d
 80078bc:	0800794d 	.word	0x0800794d
 80078c0:	0800794d 	.word	0x0800794d
 80078c4:	0800794d 	.word	0x0800794d
 80078c8:	0800794d 	.word	0x0800794d
 80078cc:	0800794d 	.word	0x0800794d
 80078d0:	08007955 	.word	0x08007955
 80078d4:	0800794d 	.word	0x0800794d
 80078d8:	0800794d 	.word	0x0800794d
 80078dc:	0800794d 	.word	0x0800794d
 80078e0:	0800794d 	.word	0x0800794d
 80078e4:	0800794d 	.word	0x0800794d
 80078e8:	0800794d 	.word	0x0800794d
 80078ec:	0800794d 	.word	0x0800794d
 80078f0:	08007955 	.word	0x08007955
 80078f4:	0800794d 	.word	0x0800794d
 80078f8:	0800794d 	.word	0x0800794d
 80078fc:	0800794d 	.word	0x0800794d
 8007900:	0800794d 	.word	0x0800794d
 8007904:	0800794d 	.word	0x0800794d
 8007908:	0800794d 	.word	0x0800794d
 800790c:	0800794d 	.word	0x0800794d
 8007910:	08007955 	.word	0x08007955
 8007914:	58024400 	.word	0x58024400
 8007918:	58024800 	.word	0x58024800
 800791c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007924:	3308      	adds	r3, #8
 8007926:	2101      	movs	r1, #1
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fce9 	bl	8008300 <RCCEx_PLL2_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007934:	e00f      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793a:	3328      	adds	r3, #40	@ 0x28
 800793c:	2101      	movs	r1, #1
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fd90 	bl	8008464 <RCCEx_PLL3_Config>
 8007944:	4603      	mov	r3, r0
 8007946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800794a:	e004      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007952:	e000      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10a      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800795e:	4bbf      	ldr	r3, [pc, #764]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007962:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800796c:	4abb      	ldr	r2, [pc, #748]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800796e:	430b      	orrs	r3, r1
 8007970:	6553      	str	r3, [r2, #84]	@ 0x54
 8007972:	e003      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f002 0302 	and.w	r3, r2, #2
 8007988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800798c:	2300      	movs	r3, #0
 800798e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007992:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007996:	460b      	mov	r3, r1
 8007998:	4313      	orrs	r3, r2
 800799a:	d041      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	d824      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80079a6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	080079f9 	.word	0x080079f9
 80079b0:	080079c5 	.word	0x080079c5
 80079b4:	080079db 	.word	0x080079db
 80079b8:	080079f9 	.word	0x080079f9
 80079bc:	080079f9 	.word	0x080079f9
 80079c0:	080079f9 	.word	0x080079f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c8:	3308      	adds	r3, #8
 80079ca:	2101      	movs	r1, #1
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fc97 	bl	8008300 <RCCEx_PLL2_Config>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079d8:	e00f      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079de:	3328      	adds	r3, #40	@ 0x28
 80079e0:	2101      	movs	r1, #1
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fd3e 	bl	8008464 <RCCEx_PLL3_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079ee:	e004      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079f6:	e000      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80079f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10a      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a02:	4b96      	ldr	r3, [pc, #600]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a06:	f023 0107 	bic.w	r1, r3, #7
 8007a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a10:	4a92      	ldr	r2, [pc, #584]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a12:	430b      	orrs	r3, r1
 8007a14:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a16:	e003      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f002 0304 	and.w	r3, r2, #4
 8007a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a30:	2300      	movs	r3, #0
 8007a32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	d044      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a48:	2b05      	cmp	r3, #5
 8007a4a:	d825      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a54 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007aa1 	.word	0x08007aa1
 8007a58:	08007a6d 	.word	0x08007a6d
 8007a5c:	08007a83 	.word	0x08007a83
 8007a60:	08007aa1 	.word	0x08007aa1
 8007a64:	08007aa1 	.word	0x08007aa1
 8007a68:	08007aa1 	.word	0x08007aa1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a70:	3308      	adds	r3, #8
 8007a72:	2101      	movs	r1, #1
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fc43 	bl	8008300 <RCCEx_PLL2_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a80:	e00f      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a86:	3328      	adds	r3, #40	@ 0x28
 8007a88:	2101      	movs	r1, #1
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fcea 	bl	8008464 <RCCEx_PLL3_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a96:	e004      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a9e:	e000      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10b      	bne.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aae:	f023 0107 	bic.w	r1, r3, #7
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aba:	4a68      	ldr	r2, [pc, #416]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ac0:	e003      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ac6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f002 0320 	and.w	r3, r2, #32
 8007ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ada:	2300      	movs	r3, #0
 8007adc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ae0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	d055      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007af6:	d033      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007afc:	d82c      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b02:	d02f      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b08:	d826      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b0e:	d02b      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007b10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b14:	d820      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b1a:	d012      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b20:	d81a      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d022      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b2a:	d115      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b30:	3308      	adds	r3, #8
 8007b32:	2100      	movs	r1, #0
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fbe3 	bl	8008300 <RCCEx_PLL2_Config>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b40:	e015      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b46:	3328      	adds	r3, #40	@ 0x28
 8007b48:	2102      	movs	r1, #2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fc8a 	bl	8008464 <RCCEx_PLL3_Config>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b56:	e00a      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b5e:	e006      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b60:	bf00      	nop
 8007b62:	e004      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b64:	bf00      	nop
 8007b66:	e002      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b68:	bf00      	nop
 8007b6a:	e000      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b76:	4b39      	ldr	r3, [pc, #228]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b86:	4a35      	ldr	r2, [pc, #212]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b8c:	e003      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007ba2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	d058      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bbe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bc2:	d033      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007bc4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bc8:	d82c      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bce:	d02f      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd4:	d826      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007bd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bda:	d02b      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007bdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007be0:	d820      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be6:	d012      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bec:	d81a      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d022      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf6:	d115      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	2100      	movs	r1, #0
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fb7d 	bl	8008300 <RCCEx_PLL2_Config>
 8007c06:	4603      	mov	r3, r0
 8007c08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c0c:	e015      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c12:	3328      	adds	r3, #40	@ 0x28
 8007c14:	2102      	movs	r1, #2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fc24 	bl	8008464 <RCCEx_PLL3_Config>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c22:	e00a      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c2a:	e006      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c2c:	bf00      	nop
 8007c2e:	e004      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c30:	bf00      	nop
 8007c32:	e002      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c34:	bf00      	nop
 8007c36:	e000      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10e      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c42:	4b06      	ldr	r3, [pc, #24]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c52:	4a02      	ldr	r2, [pc, #8]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c54:	430b      	orrs	r3, r1
 8007c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c58:	e006      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007c5a:	bf00      	nop
 8007c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007c74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c82:	460b      	mov	r3, r1
 8007c84:	4313      	orrs	r3, r2
 8007c86:	d055      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c94:	d033      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007c96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c9a:	d82c      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca0:	d02f      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca6:	d826      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007ca8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cac:	d02b      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007cae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cb2:	d820      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cb8:	d012      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007cba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cbe:	d81a      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d022      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cc8:	d115      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cce:	3308      	adds	r3, #8
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fb14 	bl	8008300 <RCCEx_PLL2_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007cde:	e015      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce4:	3328      	adds	r3, #40	@ 0x28
 8007ce6:	2102      	movs	r1, #2
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fbbb 	bl	8008464 <RCCEx_PLL3_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007cf4:	e00a      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cfc:	e006      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007cfe:	bf00      	nop
 8007d00:	e004      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d02:	bf00      	nop
 8007d04:	e002      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10b      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d14:	4ba0      	ldr	r3, [pc, #640]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d24:	4a9c      	ldr	r2, [pc, #624]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d26:	430b      	orrs	r3, r1
 8007d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d2a:	e003      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f002 0308 	and.w	r3, r2, #8
 8007d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4313      	orrs	r3, r2
 8007d52:	d01e      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d60:	d10c      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d66:	3328      	adds	r3, #40	@ 0x28
 8007d68:	2102      	movs	r1, #2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fb7a 	bl	8008464 <RCCEx_PLL3_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007d7c:	4b86      	ldr	r3, [pc, #536]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d8c:	4a82      	ldr	r2, [pc, #520]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d8e:	430b      	orrs	r3, r1
 8007d90:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f002 0310 	and.w	r3, r2, #16
 8007d9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007da2:	2300      	movs	r3, #0
 8007da4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007da8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007dac:	460b      	mov	r3, r1
 8007dae:	4313      	orrs	r3, r2
 8007db0:	d01e      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dbe:	d10c      	bne.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc4:	3328      	adds	r3, #40	@ 0x28
 8007dc6:	2102      	movs	r1, #2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fb4b 	bl	8008464 <RCCEx_PLL3_Config>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dda:	4b6f      	ldr	r3, [pc, #444]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dea:	4a6b      	ldr	r2, [pc, #428]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dec:	430b      	orrs	r3, r1
 8007dee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007dfe:	2300      	movs	r3, #0
 8007e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e02:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e06:	460b      	mov	r3, r1
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	d03e      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e18:	d022      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e1e:	d81b      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e28:	d00b      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007e2a:	e015      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e30:	3308      	adds	r3, #8
 8007e32:	2100      	movs	r1, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fa63 	bl	8008300 <RCCEx_PLL2_Config>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e40:	e00f      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e46:	3328      	adds	r3, #40	@ 0x28
 8007e48:	2102      	movs	r1, #2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fb0a 	bl	8008464 <RCCEx_PLL3_Config>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e56:	e004      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e5e:	e000      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e7a:	4a47      	ldr	r2, [pc, #284]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e80:	e003      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007e96:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e98:	2300      	movs	r3, #0
 8007e9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	d03b      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007eb2:	d01f      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007eb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007eb8:	d818      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ebe:	d003      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007ec0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ec4:	d007      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007ec6:	e011      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec8:	4b33      	ldr	r3, [pc, #204]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ecc:	4a32      	ldr	r2, [pc, #200]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ed4:	e00f      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eda:	3328      	adds	r3, #40	@ 0x28
 8007edc:	2101      	movs	r1, #1
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fac0 	bl	8008464 <RCCEx_PLL3_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007eea:	e004      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ef2:	e000      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ef6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10b      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007efe:	4b26      	ldr	r3, [pc, #152]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f0e:	4a22      	ldr	r2, [pc, #136]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f10:	430b      	orrs	r3, r1
 8007f12:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f14:	e003      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f30:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f34:	460b      	mov	r3, r1
 8007f36:	4313      	orrs	r3, r2
 8007f38:	d034      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f48:	d007      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007f4a:	e011      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4c:	4b12      	ldr	r3, [pc, #72]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	4a11      	ldr	r2, [pc, #68]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f58:	e00e      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5e:	3308      	adds	r3, #8
 8007f60:	2102      	movs	r1, #2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f9cc 	bl	8008300 <RCCEx_PLL2_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f6e:	e003      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10d      	bne.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f80:	4b05      	ldr	r3, [pc, #20]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f8e:	4a02      	ldr	r2, [pc, #8]	@ (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f90:	430b      	orrs	r3, r1
 8007f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f94:	e006      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007f96:	bf00      	nop
 8007f98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007fb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fb6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	d00c      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc4:	3328      	adds	r3, #40	@ 0x28
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fa4b 	bl	8008464 <RCCEx_PLL3_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007fe6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fe8:	2300      	movs	r3, #0
 8007fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	d036      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ffc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008000:	d018      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008006:	d811      	bhi.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800800c:	d014      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800800e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008012:	d80b      	bhi.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d011      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800801c:	d106      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801e:	4bb7      	ldr	r3, [pc, #732]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008022:	4ab6      	ldr	r2, [pc, #728]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008028:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800802a:	e008      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008032:	e004      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008034:	bf00      	nop
 8008036:	e002      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008038:	bf00      	nop
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800803c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008046:	4bad      	ldr	r3, [pc, #692]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800804e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008054:	4aa9      	ldr	r2, [pc, #676]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008056:	430b      	orrs	r3, r1
 8008058:	6553      	str	r3, [r2, #84]	@ 0x54
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008070:	653b      	str	r3, [r7, #80]	@ 0x50
 8008072:	2300      	movs	r3, #0
 8008074:	657b      	str	r3, [r7, #84]	@ 0x54
 8008076:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800807a:	460b      	mov	r3, r1
 800807c:	4313      	orrs	r3, r2
 800807e:	d009      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008080:	4b9e      	ldr	r3, [pc, #632]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008084:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800808e:	4a9b      	ldr	r2, [pc, #620]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008090:	430b      	orrs	r3, r1
 8008092:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80080a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080a2:	2300      	movs	r3, #0
 80080a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80080aa:	460b      	mov	r3, r1
 80080ac:	4313      	orrs	r3, r2
 80080ae:	d009      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080b0:	4b92      	ldr	r3, [pc, #584]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080b4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80080b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080be:	4a8f      	ldr	r2, [pc, #572]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080c0:	430b      	orrs	r3, r1
 80080c2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80080d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80080d2:	2300      	movs	r3, #0
 80080d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80080da:	460b      	mov	r3, r1
 80080dc:	4313      	orrs	r3, r2
 80080de:	d00e      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080e0:	4b86      	ldr	r3, [pc, #536]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	4a85      	ldr	r2, [pc, #532]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080ea:	6113      	str	r3, [r2, #16]
 80080ec:	4b83      	ldr	r3, [pc, #524]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080ee:	6919      	ldr	r1, [r3, #16]
 80080f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080f8:	4a80      	ldr	r2, [pc, #512]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080fa:	430b      	orrs	r3, r1
 80080fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800810a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800810c:	2300      	movs	r3, #0
 800810e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008110:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008114:	460b      	mov	r3, r1
 8008116:	4313      	orrs	r3, r2
 8008118:	d009      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800811a:	4b78      	ldr	r3, [pc, #480]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800811c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800811e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008128:	4a74      	ldr	r2, [pc, #464]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800812a:	430b      	orrs	r3, r1
 800812c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800812e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800813a:	633b      	str	r3, [r7, #48]	@ 0x30
 800813c:	2300      	movs	r3, #0
 800813e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008140:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008144:	460b      	mov	r3, r1
 8008146:	4313      	orrs	r3, r2
 8008148:	d00a      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800814a:	4b6c      	ldr	r3, [pc, #432]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800814c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800814e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800815a:	4a68      	ldr	r2, [pc, #416]	@ (80082fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800815c:	430b      	orrs	r3, r1
 800815e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	2100      	movs	r1, #0
 800816a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008172:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008176:	460b      	mov	r3, r1
 8008178:	4313      	orrs	r3, r2
 800817a:	d011      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800817c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008180:	3308      	adds	r3, #8
 8008182:	2100      	movs	r1, #0
 8008184:	4618      	mov	r0, r3
 8008186:	f000 f8bb 	bl	8008300 <RCCEx_PLL2_Config>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008190:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800819c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80081a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	2100      	movs	r1, #0
 80081aa:	6239      	str	r1, [r7, #32]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80081b6:	460b      	mov	r3, r1
 80081b8:	4313      	orrs	r3, r2
 80081ba:	d011      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c0:	3308      	adds	r3, #8
 80081c2:	2101      	movs	r1, #1
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f89b 	bl	8008300 <RCCEx_PLL2_Config>
 80081ca:	4603      	mov	r3, r0
 80081cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80081d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80081e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	2100      	movs	r1, #0
 80081ea:	61b9      	str	r1, [r7, #24]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80081f6:	460b      	mov	r3, r1
 80081f8:	4313      	orrs	r3, r2
 80081fa:	d011      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008200:	3308      	adds	r3, #8
 8008202:	2102      	movs	r1, #2
 8008204:	4618      	mov	r0, r3
 8008206:	f000 f87b 	bl	8008300 <RCCEx_PLL2_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800821c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	2100      	movs	r1, #0
 800822a:	6139      	str	r1, [r7, #16]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	617b      	str	r3, [r7, #20]
 8008232:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008236:	460b      	mov	r3, r1
 8008238:	4313      	orrs	r3, r2
 800823a:	d011      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800823c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008240:	3328      	adds	r3, #40	@ 0x28
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f000 f90d 	bl	8008464 <RCCEx_PLL3_Config>
 800824a:	4603      	mov	r3, r0
 800824c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800825c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	2100      	movs	r1, #0
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008276:	460b      	mov	r3, r1
 8008278:	4313      	orrs	r3, r2
 800827a:	d011      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800827c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008280:	3328      	adds	r3, #40	@ 0x28
 8008282:	2101      	movs	r1, #1
 8008284:	4618      	mov	r0, r3
 8008286:	f000 f8ed 	bl	8008464 <RCCEx_PLL3_Config>
 800828a:	4603      	mov	r3, r0
 800828c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008294:	2b00      	cmp	r3, #0
 8008296:	d003      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800829c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80082a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	2100      	movs	r1, #0
 80082aa:	6039      	str	r1, [r7, #0]
 80082ac:	f003 0320 	and.w	r3, r3, #32
 80082b0:	607b      	str	r3, [r7, #4]
 80082b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80082b6:	460b      	mov	r3, r1
 80082b8:	4313      	orrs	r3, r2
 80082ba:	d011      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c0:	3328      	adds	r3, #40	@ 0x28
 80082c2:	2102      	movs	r1, #2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 f8cd 	bl	8008464 <RCCEx_PLL3_Config>
 80082ca:	4603      	mov	r3, r0
 80082cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80082e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e000      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80082f4:	46bd      	mov	sp, r7
 80082f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082fa:	bf00      	nop
 80082fc:	58024400 	.word	0x58024400

08008300 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800830e:	4b53      	ldr	r3, [pc, #332]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	2b03      	cmp	r3, #3
 8008318:	d101      	bne.n	800831e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e099      	b.n	8008452 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800831e:	4b4f      	ldr	r3, [pc, #316]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a4e      	ldr	r2, [pc, #312]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008324:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832a:	f7f9 fe2d 	bl	8001f88 <HAL_GetTick>
 800832e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008330:	e008      	b.n	8008344 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008332:	f7f9 fe29 	bl	8001f88 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e086      	b.n	8008452 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008344:	4b45      	ldr	r3, [pc, #276]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1f0      	bne.n	8008332 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008350:	4b42      	ldr	r3, [pc, #264]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008354:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	031b      	lsls	r3, r3, #12
 800835e:	493f      	ldr	r1, [pc, #252]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008360:	4313      	orrs	r3, r2
 8008362:	628b      	str	r3, [r1, #40]	@ 0x28
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	3b01      	subs	r3, #1
 800836a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	3b01      	subs	r3, #1
 8008374:	025b      	lsls	r3, r3, #9
 8008376:	b29b      	uxth	r3, r3
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	3b01      	subs	r3, #1
 8008380:	041b      	lsls	r3, r3, #16
 8008382:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	3b01      	subs	r3, #1
 800838e:	061b      	lsls	r3, r3, #24
 8008390:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008394:	4931      	ldr	r1, [pc, #196]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800839a:	4b30      	ldr	r3, [pc, #192]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	492d      	ldr	r1, [pc, #180]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083ac:	4b2b      	ldr	r3, [pc, #172]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	f023 0220 	bic.w	r2, r3, #32
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	4928      	ldr	r1, [pc, #160]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083be:	4b27      	ldr	r3, [pc, #156]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c2:	4a26      	ldr	r2, [pc, #152]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083c4:	f023 0310 	bic.w	r3, r3, #16
 80083c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083ca:	4b24      	ldr	r3, [pc, #144]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083ce:	4b24      	ldr	r3, [pc, #144]	@ (8008460 <RCCEx_PLL2_Config+0x160>)
 80083d0:	4013      	ands	r3, r2
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	69d2      	ldr	r2, [r2, #28]
 80083d6:	00d2      	lsls	r2, r2, #3
 80083d8:	4920      	ldr	r1, [pc, #128]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083de:	4b1f      	ldr	r3, [pc, #124]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e2:	4a1e      	ldr	r2, [pc, #120]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083e4:	f043 0310 	orr.w	r3, r3, #16
 80083e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d106      	bne.n	80083fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083f0:	4b1a      	ldr	r3, [pc, #104]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f4:	4a19      	ldr	r2, [pc, #100]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083fc:	e00f      	b.n	800841e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d106      	bne.n	8008412 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008404:	4b15      	ldr	r3, [pc, #84]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	4a14      	ldr	r2, [pc, #80]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 800840a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800840e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008410:	e005      	b.n	800841e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008412:	4b12      	ldr	r3, [pc, #72]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008416:	4a11      	ldr	r2, [pc, #68]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008418:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800841c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800841e:	4b0f      	ldr	r3, [pc, #60]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a0e      	ldr	r2, [pc, #56]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008424:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800842a:	f7f9 fdad 	bl	8001f88 <HAL_GetTick>
 800842e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008430:	e008      	b.n	8008444 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008432:	f7f9 fda9 	bl	8001f88 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e006      	b.n	8008452 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008444:	4b05      	ldr	r3, [pc, #20]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f0      	beq.n	8008432 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	58024400 	.word	0x58024400
 8008460:	ffff0007 	.word	0xffff0007

08008464 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008472:	4b53      	ldr	r3, [pc, #332]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	2b03      	cmp	r3, #3
 800847c:	d101      	bne.n	8008482 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e099      	b.n	80085b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008482:	4b4f      	ldr	r3, [pc, #316]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a4e      	ldr	r2, [pc, #312]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800848c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800848e:	f7f9 fd7b 	bl	8001f88 <HAL_GetTick>
 8008492:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008494:	e008      	b.n	80084a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008496:	f7f9 fd77 	bl	8001f88 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d901      	bls.n	80084a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e086      	b.n	80085b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084a8:	4b45      	ldr	r3, [pc, #276]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f0      	bne.n	8008496 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084b4:	4b42      	ldr	r3, [pc, #264]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80084b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	051b      	lsls	r3, r3, #20
 80084c2:	493f      	ldr	r1, [pc, #252]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	025b      	lsls	r3, r3, #9
 80084da:	b29b      	uxth	r3, r3
 80084dc:	431a      	orrs	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	041b      	lsls	r3, r3, #16
 80084e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	061b      	lsls	r3, r3, #24
 80084f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80084f8:	4931      	ldr	r1, [pc, #196]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084fe:	4b30      	ldr	r3, [pc, #192]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	492d      	ldr	r1, [pc, #180]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800850c:	4313      	orrs	r3, r2
 800850e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008510:	4b2b      	ldr	r3, [pc, #172]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008514:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	4928      	ldr	r1, [pc, #160]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800851e:	4313      	orrs	r3, r2
 8008520:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008522:	4b27      	ldr	r3, [pc, #156]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008526:	4a26      	ldr	r2, [pc, #152]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800852c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800852e:	4b24      	ldr	r3, [pc, #144]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008532:	4b24      	ldr	r3, [pc, #144]	@ (80085c4 <RCCEx_PLL3_Config+0x160>)
 8008534:	4013      	ands	r3, r2
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	69d2      	ldr	r2, [r2, #28]
 800853a:	00d2      	lsls	r2, r2, #3
 800853c:	4920      	ldr	r1, [pc, #128]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800853e:	4313      	orrs	r3, r2
 8008540:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008542:	4b1f      	ldr	r3, [pc, #124]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	4a1e      	ldr	r2, [pc, #120]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800854c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d106      	bne.n	8008562 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008554:	4b1a      	ldr	r3, [pc, #104]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008558:	4a19      	ldr	r2, [pc, #100]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800855a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800855e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008560:	e00f      	b.n	8008582 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d106      	bne.n	8008576 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008568:	4b15      	ldr	r3, [pc, #84]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800856a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856c:	4a14      	ldr	r2, [pc, #80]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800856e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008574:	e005      	b.n	8008582 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008576:	4b12      	ldr	r3, [pc, #72]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857a:	4a11      	ldr	r2, [pc, #68]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800857c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008580:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008582:	4b0f      	ldr	r3, [pc, #60]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a0e      	ldr	r2, [pc, #56]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800858c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800858e:	f7f9 fcfb 	bl	8001f88 <HAL_GetTick>
 8008592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008594:	e008      	b.n	80085a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008596:	f7f9 fcf7 	bl	8001f88 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d901      	bls.n	80085a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e006      	b.n	80085b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085a8:	4b05      	ldr	r3, [pc, #20]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0f0      	beq.n	8008596 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	58024400 	.word	0x58024400
 80085c4:	ffff0007 	.word	0xffff0007

080085c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e10f      	b.n	80087fa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a87      	ldr	r2, [pc, #540]	@ (8008804 <HAL_SPI_Init+0x23c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00f      	beq.n	800860a <HAL_SPI_Init+0x42>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a86      	ldr	r2, [pc, #536]	@ (8008808 <HAL_SPI_Init+0x240>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00a      	beq.n	800860a <HAL_SPI_Init+0x42>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a84      	ldr	r2, [pc, #528]	@ (800880c <HAL_SPI_Init+0x244>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d005      	beq.n	800860a <HAL_SPI_Init+0x42>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	2b0f      	cmp	r3, #15
 8008604:	d901      	bls.n	800860a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e0f7      	b.n	80087fa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 fb82 	bl	8009d14 <SPI_GetPacketSize>
 8008610:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a7b      	ldr	r2, [pc, #492]	@ (8008804 <HAL_SPI_Init+0x23c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d00c      	beq.n	8008636 <HAL_SPI_Init+0x6e>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a79      	ldr	r2, [pc, #484]	@ (8008808 <HAL_SPI_Init+0x240>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d007      	beq.n	8008636 <HAL_SPI_Init+0x6e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a78      	ldr	r2, [pc, #480]	@ (800880c <HAL_SPI_Init+0x244>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d002      	beq.n	8008636 <HAL_SPI_Init+0x6e>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b08      	cmp	r3, #8
 8008634:	d811      	bhi.n	800865a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800863a:	4a72      	ldr	r2, [pc, #456]	@ (8008804 <HAL_SPI_Init+0x23c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d009      	beq.n	8008654 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a70      	ldr	r2, [pc, #448]	@ (8008808 <HAL_SPI_Init+0x240>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d004      	beq.n	8008654 <HAL_SPI_Init+0x8c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a6f      	ldr	r2, [pc, #444]	@ (800880c <HAL_SPI_Init+0x244>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d104      	bne.n	800865e <HAL_SPI_Init+0x96>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b10      	cmp	r3, #16
 8008658:	d901      	bls.n	800865e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e0cd      	b.n	80087fa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7f8 febc 	bl	80013f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0201 	bic.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800869a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086a4:	d119      	bne.n	80086da <HAL_SPI_Init+0x112>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086ae:	d103      	bne.n	80086b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d008      	beq.n	80086ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10c      	bne.n	80086da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80086c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086c8:	d107      	bne.n	80086da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00f      	beq.n	8008706 <HAL_SPI_Init+0x13e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	2b06      	cmp	r3, #6
 80086ec:	d90b      	bls.n	8008706 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e007      	b.n	8008716 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008714:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69da      	ldr	r2, [r3, #28]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871e:	431a      	orrs	r2, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008728:	ea42 0103 	orr.w	r1, r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68da      	ldr	r2, [r3, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	430a      	orrs	r2, r1
 8008736:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008740:	431a      	orrs	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008746:	431a      	orrs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	431a      	orrs	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	431a      	orrs	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	431a      	orrs	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	431a      	orrs	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800876a:	431a      	orrs	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008776:	ea42 0103 	orr.w	r1, r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d113      	bne.n	80087b6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80087b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0201 	bic.w	r2, r2, #1
 80087c4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	430a      	orrs	r2, r1
 80087e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	40013000 	.word	0x40013000
 8008808:	40003800 	.word	0x40003800
 800880c:	40003c00 	.word	0x40003c00

08008810 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af02      	add	r7, sp, #8
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3320      	adds	r3, #32
 8008826:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008828:	f7f9 fbae 	bl	8001f88 <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b01      	cmp	r3, #1
 8008838:	d001      	beq.n	800883e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800883a:	2302      	movs	r3, #2
 800883c:	e1d1      	b.n	8008be2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <HAL_SPI_Transmit+0x3a>
 8008844:	88fb      	ldrh	r3, [r7, #6]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e1c9      	b.n	8008be2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008854:	2b01      	cmp	r3, #1
 8008856:	d101      	bne.n	800885c <HAL_SPI_Transmit+0x4c>
 8008858:	2302      	movs	r3, #2
 800885a:	e1c2      	b.n	8008be2 <HAL_SPI_Transmit+0x3d2>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2203      	movs	r2, #3
 8008868:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	88fa      	ldrh	r2, [r7, #6]
 800887e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	88fa      	ldrh	r2, [r7, #6]
 8008886:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80088b4:	d108      	bne.n	80088c8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	e009      	b.n	80088dc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80088da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	4b96      	ldr	r3, [pc, #600]	@ (8008b3c <HAL_SPI_Transmit+0x32c>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	88f9      	ldrh	r1, [r7, #6]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	6812      	ldr	r2, [r2, #0]
 80088ec:	430b      	orrs	r3, r1
 80088ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0201 	orr.w	r2, r2, #1
 80088fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008908:	d107      	bne.n	800891a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d947      	bls.n	80089b2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008922:	e03f      	b.n	80089a4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b02      	cmp	r3, #2
 8008930:	d114      	bne.n	800895c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6812      	ldr	r2, [r2, #0]
 800893c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008942:	1d1a      	adds	r2, r3, #4
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800894e:	b29b      	uxth	r3, r3
 8008950:	3b01      	subs	r3, #1
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800895a:	e023      	b.n	80089a4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800895c:	f7f9 fb14 	bl	8001f88 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	429a      	cmp	r2, r3
 800896a:	d803      	bhi.n	8008974 <HAL_SPI_Transmit+0x164>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008972:	d102      	bne.n	800897a <HAL_SPI_Transmit+0x16a>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d114      	bne.n	80089a4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f001 f8fc 	bl	8009b78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008986:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e11e      	b.n	8008be2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1b9      	bne.n	8008924 <HAL_SPI_Transmit+0x114>
 80089b0:	e0f1      	b.n	8008b96 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	2b07      	cmp	r3, #7
 80089b8:	f240 80e6 	bls.w	8008b88 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80089bc:	e05d      	b.n	8008a7a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d132      	bne.n	8008a32 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d918      	bls.n	8008a0a <HAL_SPI_Transmit+0x1fa>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d014      	beq.n	8008a0a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6812      	ldr	r2, [r2, #0]
 80089ea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	3b02      	subs	r3, #2
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008a08:	e037      	b.n	8008a7a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a0e:	881a      	ldrh	r2, [r3, #0]
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a18:	1c9a      	adds	r2, r3, #2
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008a30:	e023      	b.n	8008a7a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a32:	f7f9 faa9 	bl	8001f88 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d803      	bhi.n	8008a4a <HAL_SPI_Transmit+0x23a>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a48:	d102      	bne.n	8008a50 <HAL_SPI_Transmit+0x240>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d114      	bne.n	8008a7a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f001 f891 	bl	8009b78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e0b3      	b.n	8008be2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d19b      	bne.n	80089be <HAL_SPI_Transmit+0x1ae>
 8008a86:	e086      	b.n	8008b96 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d154      	bne.n	8008b40 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d918      	bls.n	8008ad4 <HAL_SPI_Transmit+0x2c4>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa6:	2b40      	cmp	r3, #64	@ 0x40
 8008aa8:	d914      	bls.n	8008ad4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6812      	ldr	r2, [r2, #0]
 8008ab4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aba:	1d1a      	adds	r2, r3, #4
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	3b04      	subs	r3, #4
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008ad2:	e059      	b.n	8008b88 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d917      	bls.n	8008b10 <HAL_SPI_Transmit+0x300>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d013      	beq.n	8008b10 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aec:	881a      	ldrh	r2, [r3, #0]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008af6:	1c9a      	adds	r2, r3, #2
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	3b02      	subs	r3, #2
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008b0e:	e03b      	b.n	8008b88 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3320      	adds	r3, #32
 8008b1a:	7812      	ldrb	r2, [r2, #0]
 8008b1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b22:	1c5a      	adds	r2, r3, #1
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008b3a:	e025      	b.n	8008b88 <HAL_SPI_Transmit+0x378>
 8008b3c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b40:	f7f9 fa22 	bl	8001f88 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d803      	bhi.n	8008b58 <HAL_SPI_Transmit+0x348>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b56:	d102      	bne.n	8008b5e <HAL_SPI_Transmit+0x34e>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d114      	bne.n	8008b88 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f001 f80a 	bl	8009b78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e02c      	b.n	8008be2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f47f af79 	bne.w	8008a88 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2108      	movs	r1, #8
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f001 f889 	bl	8009cb8 <SPI_WaitOnFlagUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d007      	beq.n	8008bbc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bb2:	f043 0220 	orr.w	r2, r3, #32
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 ffdb 	bl	8009b78 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008be0:	2300      	movs	r3, #0
  }
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop

08008bec <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c00:	095b      	lsrs	r3, r3, #5
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	3301      	adds	r3, #1
 8008c06:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3330      	adds	r3, #48	@ 0x30
 8008c0e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c10:	f7f9 f9ba 	bl	8001f88 <HAL_GetTick>
 8008c14:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d001      	beq.n	8008c26 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008c22:	2302      	movs	r3, #2
 8008c24:	e250      	b.n	80090c8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <HAL_SPI_Receive+0x46>
 8008c2c:	88fb      	ldrh	r3, [r7, #6]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e248      	b.n	80090c8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d101      	bne.n	8008c44 <HAL_SPI_Receive+0x58>
 8008c40:	2302      	movs	r3, #2
 8008c42:	e241      	b.n	80090c8 <HAL_SPI_Receive+0x4dc>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2204      	movs	r2, #4
 8008c50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	88fa      	ldrh	r2, [r7, #6]
 8008c66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	88fa      	ldrh	r2, [r7, #6]
 8008c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008c9c:	d108      	bne.n	8008cb0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	e009      	b.n	8008cc4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008cc2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	4b95      	ldr	r3, [pc, #596]	@ (8008f20 <HAL_SPI_Receive+0x334>)
 8008ccc:	4013      	ands	r3, r2
 8008cce:	88f9      	ldrh	r1, [r7, #6]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f042 0201 	orr.w	r2, r2, #1
 8008ce6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cf0:	d107      	bne.n	8008d02 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	2b0f      	cmp	r3, #15
 8008d08:	d96c      	bls.n	8008de4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008d0a:	e064      	b.n	8008dd6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d114      	bne.n	8008d4c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d2c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d4a:	e044      	b.n	8008dd6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	8bfa      	ldrh	r2, [r7, #30]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d919      	bls.n	8008d8e <HAL_SPI_Receive+0x1a2>
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d014      	beq.n	8008d8e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d6e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d74:	1d1a      	adds	r2, r3, #4
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d8c:	e023      	b.n	8008dd6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d8e:	f7f9 f8fb 	bl	8001f88 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d803      	bhi.n	8008da6 <HAL_SPI_Receive+0x1ba>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d102      	bne.n	8008dac <HAL_SPI_Receive+0x1c0>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d114      	bne.n	8008dd6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 fee3 	bl	8009b78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008db8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e178      	b.n	80090c8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d194      	bne.n	8008d0c <HAL_SPI_Receive+0x120>
 8008de2:	e15e      	b.n	80090a2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	2b07      	cmp	r3, #7
 8008dea:	f240 8153 	bls.w	8009094 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008dee:	e08f      	b.n	8008f10 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d114      	bne.n	8008e30 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	8812      	ldrh	r2, [r2, #0]
 8008e0e:	b292      	uxth	r2, r2
 8008e10:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e16:	1c9a      	adds	r2, r3, #2
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	3b01      	subs	r3, #1
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e2e:	e06f      	b.n	8008f10 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	8bfa      	ldrh	r2, [r7, #30]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d924      	bls.n	8008e88 <HAL_SPI_Receive+0x29c>
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01f      	beq.n	8008e88 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	8812      	ldrh	r2, [r2, #0]
 8008e50:	b292      	uxth	r2, r2
 8008e52:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e58:	1c9a      	adds	r2, r3, #2
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	8812      	ldrh	r2, [r2, #0]
 8008e66:	b292      	uxth	r2, r2
 8008e68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e6e:	1c9a      	adds	r2, r3, #2
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3b02      	subs	r3, #2
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e86:	e043      	b.n	8008f10 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d119      	bne.n	8008ec8 <HAL_SPI_Receive+0x2dc>
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d014      	beq.n	8008ec8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	8812      	ldrh	r2, [r2, #0]
 8008ea6:	b292      	uxth	r2, r2
 8008ea8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eae:	1c9a      	adds	r2, r3, #2
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ec6:	e023      	b.n	8008f10 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ec8:	f7f9 f85e 	bl	8001f88 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d803      	bhi.n	8008ee0 <HAL_SPI_Receive+0x2f4>
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ede:	d102      	bne.n	8008ee6 <HAL_SPI_Receive+0x2fa>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d114      	bne.n	8008f10 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fe46 	bl	8009b78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ef2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e0db      	b.n	80090c8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f47f af69 	bne.w	8008df0 <HAL_SPI_Receive+0x204>
 8008f1e:	e0c0      	b.n	80090a2 <HAL_SPI_Receive+0x4b6>
 8008f20:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d117      	bne.n	8008f6a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f46:	7812      	ldrb	r2, [r2, #0]
 8008f48:	b2d2      	uxtb	r2, r2
 8008f4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008f68:	e094      	b.n	8009094 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	8bfa      	ldrh	r2, [r7, #30]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d946      	bls.n	8009006 <HAL_SPI_Receive+0x41a>
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d041      	beq.n	8009006 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008faa:	7812      	ldrb	r2, [r2, #0]
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	b2d2      	uxtb	r2, r2
 8008fca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fe2:	7812      	ldrb	r2, [r2, #0]
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	3b04      	subs	r3, #4
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009004:	e046      	b.n	8009094 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800900c:	b29b      	uxth	r3, r3
 800900e:	2b03      	cmp	r3, #3
 8009010:	d81c      	bhi.n	800904c <HAL_SPI_Receive+0x460>
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d017      	beq.n	800904c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009028:	7812      	ldrb	r2, [r2, #0]
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800903e:	b29b      	uxth	r3, r3
 8009040:	3b01      	subs	r3, #1
 8009042:	b29a      	uxth	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800904a:	e023      	b.n	8009094 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800904c:	f7f8 ff9c 	bl	8001f88 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d803      	bhi.n	8009064 <HAL_SPI_Receive+0x478>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d102      	bne.n	800906a <HAL_SPI_Receive+0x47e>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d114      	bne.n	8009094 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 fd84 	bl	8009b78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009076:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e019      	b.n	80090c8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800909a:	b29b      	uxth	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	f47f af41 	bne.w	8008f24 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 fd68 	bl	8009b78 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e000      	b.n	80090c8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80090c6:	2300      	movs	r3, #0
  }
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3720      	adds	r7, #32
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08e      	sub	sp, #56	@ 0x38
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3320      	adds	r3, #32
 80090e4:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3330      	adds	r3, #48	@ 0x30
 80090ec:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	3301      	adds	r3, #1
 80090f8:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090fa:	f7f8 ff45 	bl	8001f88 <HAL_GetTick>
 80090fe:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8009100:	887b      	ldrh	r3, [r7, #2]
 8009102:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8009104:	887b      	ldrh	r3, [r7, #2]
 8009106:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b01      	cmp	r3, #1
 8009112:	d001      	beq.n	8009118 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8009114:	2302      	movs	r3, #2
 8009116:	e310      	b.n	800973a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d005      	beq.n	800912a <HAL_SPI_TransmitReceive+0x5a>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <HAL_SPI_TransmitReceive+0x5a>
 8009124:	887b      	ldrh	r3, [r7, #2]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e305      	b.n	800973a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009134:	2b01      	cmp	r3, #1
 8009136:	d101      	bne.n	800913c <HAL_SPI_TransmitReceive+0x6c>
 8009138:	2302      	movs	r3, #2
 800913a:	e2fe      	b.n	800973a <HAL_SPI_TransmitReceive+0x66a>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2205      	movs	r2, #5
 8009148:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	887a      	ldrh	r2, [r7, #2]
 800915e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	887a      	ldrh	r2, [r7, #2]
 8009166:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	887a      	ldrh	r2, [r7, #2]
 8009174:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	887a      	ldrh	r2, [r7, #2]
 800917c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68da      	ldr	r2, [r3, #12]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800919a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a70      	ldr	r2, [pc, #448]	@ (8009364 <HAL_SPI_TransmitReceive+0x294>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d009      	beq.n	80091ba <HAL_SPI_TransmitReceive+0xea>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a6f      	ldr	r2, [pc, #444]	@ (8009368 <HAL_SPI_TransmitReceive+0x298>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d004      	beq.n	80091ba <HAL_SPI_TransmitReceive+0xea>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a6d      	ldr	r2, [pc, #436]	@ (800936c <HAL_SPI_TransmitReceive+0x29c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d102      	bne.n	80091c0 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80091ba:	2310      	movs	r3, #16
 80091bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091be:	e001      	b.n	80091c4 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80091c0:	2308      	movs	r3, #8
 80091c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	4b69      	ldr	r3, [pc, #420]	@ (8009370 <HAL_SPI_TransmitReceive+0x2a0>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	8879      	ldrh	r1, [r7, #2]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	6812      	ldr	r2, [r2, #0]
 80091d4:	430b      	orrs	r3, r1
 80091d6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0201 	orr.w	r2, r2, #1
 80091e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091f0:	d107      	bne.n	8009202 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009200:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	2b0f      	cmp	r3, #15
 8009208:	f240 80a2 	bls.w	8009350 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800920c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920e:	089b      	lsrs	r3, r3, #2
 8009210:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009212:	e094      	b.n	800933e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b02      	cmp	r3, #2
 8009220:	d120      	bne.n	8009264 <HAL_SPI_TransmitReceive+0x194>
 8009222:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01d      	beq.n	8009264 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009228:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800922a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800922c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800922e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009230:	429a      	cmp	r2, r3
 8009232:	d217      	bcs.n	8009264 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6812      	ldr	r2, [r2, #0]
 800923e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009244:	1d1a      	adds	r2, r3, #4
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009250:	b29b      	uxth	r3, r3
 8009252:	3b01      	subs	r3, #1
 8009254:	b29a      	uxth	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009262:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800926c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800926e:	2b00      	cmp	r3, #0
 8009270:	d065      	beq.n	800933e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b01      	cmp	r3, #1
 800927e:	d118      	bne.n	80092b2 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009288:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800928a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009290:	1d1a      	adds	r2, r3, #4
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800929c:	b29b      	uxth	r3, r3
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80092b0:	e045      	b.n	800933e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80092b2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80092b4:	8bfb      	ldrh	r3, [r7, #30]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d21d      	bcs.n	80092f6 <HAL_SPI_TransmitReceive+0x226>
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d018      	beq.n	80092f6 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80092ce:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092d4:	1d1a      	adds	r2, r3, #4
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80092f4:	e023      	b.n	800933e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092f6:	f7f8 fe47 	bl	8001f88 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009302:	429a      	cmp	r2, r3
 8009304:	d803      	bhi.n	800930e <HAL_SPI_TransmitReceive+0x23e>
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930c:	d102      	bne.n	8009314 <HAL_SPI_TransmitReceive+0x244>
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d114      	bne.n	800933e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fc2f 	bl	8009b78 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e1fd      	b.n	800973a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800933e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009340:	2b00      	cmp	r3, #0
 8009342:	f47f af67 	bne.w	8009214 <HAL_SPI_TransmitReceive+0x144>
 8009346:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009348:	2b00      	cmp	r3, #0
 800934a:	f47f af63 	bne.w	8009214 <HAL_SPI_TransmitReceive+0x144>
 800934e:	e1ce      	b.n	80096ee <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	2b07      	cmp	r3, #7
 8009356:	f240 81c2 	bls.w	80096de <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800935a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935c:	085b      	lsrs	r3, r3, #1
 800935e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009360:	e0c9      	b.n	80094f6 <HAL_SPI_TransmitReceive+0x426>
 8009362:	bf00      	nop
 8009364:	40013000 	.word	0x40013000
 8009368:	40003800 	.word	0x40003800
 800936c:	40003c00 	.word	0x40003c00
 8009370:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b02      	cmp	r3, #2
 8009380:	d11f      	bne.n	80093c2 <HAL_SPI_TransmitReceive+0x2f2>
 8009382:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01c      	beq.n	80093c2 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009388:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800938a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800938c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009390:	429a      	cmp	r2, r3
 8009392:	d216      	bcs.n	80093c2 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009398:	881a      	ldrh	r2, [r3, #0]
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093a2:	1c9a      	adds	r2, r3, #2
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80093ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 8092 	beq.w	80094f6 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d118      	bne.n	8009412 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093e4:	6a3a      	ldr	r2, [r7, #32]
 80093e6:	8812      	ldrh	r2, [r2, #0]
 80093e8:	b292      	uxth	r2, r2
 80093ea:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093f0:	1c9a      	adds	r2, r3, #2
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800940e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009410:	e071      	b.n	80094f6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009412:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009414:	8bfb      	ldrh	r3, [r7, #30]
 8009416:	429a      	cmp	r2, r3
 8009418:	d228      	bcs.n	800946c <HAL_SPI_TransmitReceive+0x39c>
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d023      	beq.n	800946c <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009428:	6a3a      	ldr	r2, [r7, #32]
 800942a:	8812      	ldrh	r2, [r2, #0]
 800942c:	b292      	uxth	r2, r2
 800942e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009434:	1c9a      	adds	r2, r3, #2
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800943e:	6a3a      	ldr	r2, [r7, #32]
 8009440:	8812      	ldrh	r2, [r2, #0]
 8009442:	b292      	uxth	r2, r2
 8009444:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800944a:	1c9a      	adds	r2, r3, #2
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009456:	b29b      	uxth	r3, r3
 8009458:	3b02      	subs	r3, #2
 800945a:	b29a      	uxth	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009468:	853b      	strh	r3, [r7, #40]	@ 0x28
 800946a:	e044      	b.n	80094f6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800946c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800946e:	2b01      	cmp	r3, #1
 8009470:	d11d      	bne.n	80094ae <HAL_SPI_TransmitReceive+0x3de>
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d018      	beq.n	80094ae <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009480:	6a3a      	ldr	r2, [r7, #32]
 8009482:	8812      	ldrh	r2, [r2, #0]
 8009484:	b292      	uxth	r2, r2
 8009486:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800948c:	1c9a      	adds	r2, r3, #2
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009498:	b29b      	uxth	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80094ac:	e023      	b.n	80094f6 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094ae:	f7f8 fd6b 	bl	8001f88 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d803      	bhi.n	80094c6 <HAL_SPI_TransmitReceive+0x3f6>
 80094be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c4:	d102      	bne.n	80094cc <HAL_SPI_TransmitReceive+0x3fc>
 80094c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d114      	bne.n	80094f6 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 fb53 	bl	8009b78 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e121      	b.n	800973a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80094f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f47f af3b 	bne.w	8009374 <HAL_SPI_TransmitReceive+0x2a4>
 80094fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009500:	2b00      	cmp	r3, #0
 8009502:	f47f af37 	bne.w	8009374 <HAL_SPI_TransmitReceive+0x2a4>
 8009506:	e0f2      	b.n	80096ee <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f003 0302 	and.w	r3, r3, #2
 8009512:	2b02      	cmp	r3, #2
 8009514:	d121      	bne.n	800955a <HAL_SPI_TransmitReceive+0x48a>
 8009516:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009518:	2b00      	cmp	r3, #0
 800951a:	d01e      	beq.n	800955a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800951c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800951e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009522:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009524:	429a      	cmp	r2, r3
 8009526:	d218      	bcs.n	800955a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3320      	adds	r3, #32
 8009532:	7812      	ldrb	r2, [r2, #0]
 8009534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009546:	b29b      	uxth	r3, r3
 8009548:	3b01      	subs	r3, #1
 800954a:	b29a      	uxth	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009558:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009562:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 80ba 	beq.w	80096de <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b01      	cmp	r3, #1
 8009576:	d11b      	bne.n	80095b0 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009584:	7812      	ldrb	r2, [r2, #0]
 8009586:	b2d2      	uxtb	r2, r2
 8009588:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800959a:	b29b      	uxth	r3, r3
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095ac:	853b      	strh	r3, [r7, #40]	@ 0x28
 80095ae:	e096      	b.n	80096de <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80095b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80095b2:	8bfb      	ldrh	r3, [r7, #30]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d24a      	bcs.n	800964e <HAL_SPI_TransmitReceive+0x57e>
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d045      	beq.n	800964e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ce:	7812      	ldrb	r2, [r2, #0]
 80095d0:	b2d2      	uxtb	r2, r2
 80095d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	b2d2      	uxtb	r2, r2
 80095ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009606:	7812      	ldrb	r2, [r2, #0]
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	b2d2      	uxtb	r2, r2
 8009626:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b04      	subs	r3, #4
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800964a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800964c:	e047      	b.n	80096de <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800964e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009650:	2b03      	cmp	r3, #3
 8009652:	d820      	bhi.n	8009696 <HAL_SPI_TransmitReceive+0x5c6>
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d01b      	beq.n	8009696 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009680:	b29b      	uxth	r3, r3
 8009682:	3b01      	subs	r3, #1
 8009684:	b29a      	uxth	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009692:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009694:	e023      	b.n	80096de <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009696:	f7f8 fc77 	bl	8001f88 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d803      	bhi.n	80096ae <HAL_SPI_TransmitReceive+0x5de>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d102      	bne.n	80096b4 <HAL_SPI_TransmitReceive+0x5e4>
 80096ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d114      	bne.n	80096de <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 fa5f 	bl	8009b78 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e02d      	b.n	800973a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80096de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f47f af11 	bne.w	8009508 <HAL_SPI_TransmitReceive+0x438>
 80096e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f47f af0d 	bne.w	8009508 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f4:	2200      	movs	r2, #0
 80096f6:	2108      	movs	r1, #8
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 fadd 	bl	8009cb8 <SPI_WaitOnFlagUntilTimeout>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d007      	beq.n	8009714 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800970a:	f043 0220 	orr.w	r2, r3, #32
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 fa2f 	bl	8009b78 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8009738:	2300      	movs	r3, #0
  }
}
 800973a:	4618      	mov	r0, r3
 800973c:	3730      	adds	r7, #48	@ 0x30
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop

08009744 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08a      	sub	sp, #40	@ 0x28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800975c:	6a3a      	ldr	r2, [r7, #32]
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	4013      	ands	r3, r2
 8009762:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800976c:	2300      	movs	r3, #0
 800976e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009776:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3330      	adds	r3, #48	@ 0x30
 800977e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009786:	2b00      	cmp	r3, #0
 8009788:	d010      	beq.n	80097ac <HAL_SPI_IRQHandler+0x68>
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	f003 0308 	and.w	r3, r3, #8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00b      	beq.n	80097ac <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097a2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f9c3 	bl	8009b30 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80097aa:	e192      	b.n	8009ad2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d113      	bne.n	80097de <HAL_SPI_IRQHandler+0x9a>
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	f003 0320 	and.w	r3, r3, #32
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10e      	bne.n	80097de <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	4798      	blx	r3
    handled = 1UL;
 80097da:	2301      	movs	r3, #1
 80097dc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10f      	bne.n	8009808 <HAL_SPI_IRQHandler+0xc4>
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d105      	bne.n	8009808 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	4798      	blx	r3
    handled = 1UL;
 8009804:	2301      	movs	r3, #1
 8009806:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10f      	bne.n	8009832 <HAL_SPI_IRQHandler+0xee>
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00a      	beq.n	8009832 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009822:	2b00      	cmp	r3, #0
 8009824:	d105      	bne.n	8009832 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
    handled = 1UL;
 800982e:	2301      	movs	r3, #1
 8009830:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009834:	2b00      	cmp	r3, #0
 8009836:	f040 8147 	bne.w	8009ac8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	f003 0308 	and.w	r3, r3, #8
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 808b 	beq.w	800995c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	699a      	ldr	r2, [r3, #24]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0208 	orr.w	r2, r2, #8
 8009854:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	699a      	ldr	r2, [r3, #24]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0210 	orr.w	r2, r2, #16
 8009864:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	699a      	ldr	r2, [r3, #24]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009874:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 0208 	bic.w	r2, r2, #8
 8009884:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d13d      	bne.n	8009910 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009894:	e036      	b.n	8009904 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	2b0f      	cmp	r3, #15
 800989c:	d90b      	bls.n	80098b6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80098a8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ae:	1d1a      	adds	r2, r3, #4
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	665a      	str	r2, [r3, #100]	@ 0x64
 80098b4:	e01d      	b.n	80098f2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	2b07      	cmp	r3, #7
 80098bc:	d90b      	bls.n	80098d6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	8812      	ldrh	r2, [r2, #0]
 80098c6:	b292      	uxth	r2, r2
 80098c8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ce:	1c9a      	adds	r2, r3, #2
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	665a      	str	r2, [r3, #100]	@ 0x64
 80098d4:	e00d      	b.n	80098f2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098e2:	7812      	ldrb	r2, [r2, #0]
 80098e4:	b2d2      	uxtb	r2, r2
 80098e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3b01      	subs	r3, #1
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800990a:	b29b      	uxth	r3, r3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1c2      	bne.n	8009896 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f931 	bl	8009b78 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f8f7 	bl	8009b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800992e:	e0d0      	b.n	8009ad2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009930:	7cfb      	ldrb	r3, [r7, #19]
 8009932:	2b05      	cmp	r3, #5
 8009934:	d103      	bne.n	800993e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f8e6 	bl	8009b08 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800993c:	e0c6      	b.n	8009acc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800993e:	7cfb      	ldrb	r3, [r7, #19]
 8009940:	2b04      	cmp	r3, #4
 8009942:	d103      	bne.n	800994c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f8d5 	bl	8009af4 <HAL_SPI_RxCpltCallback>
    return;
 800994a:	e0bf      	b.n	8009acc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800994c:	7cfb      	ldrb	r3, [r7, #19]
 800994e:	2b03      	cmp	r3, #3
 8009950:	f040 80bc 	bne.w	8009acc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f8c3 	bl	8009ae0 <HAL_SPI_TxCpltCallback>
    return;
 800995a:	e0b7      	b.n	8009acc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 80b5 	beq.w	8009ad2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00f      	beq.n	8009992 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009978:	f043 0204 	orr.w	r2, r3, #4
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	699a      	ldr	r2, [r3, #24]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009990:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00f      	beq.n	80099bc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099a2:	f043 0201 	orr.w	r2, r3, #1
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	699a      	ldr	r2, [r3, #24]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099ba:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00f      	beq.n	80099e6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099cc:	f043 0208 	orr.w	r2, r3, #8
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	699a      	ldr	r2, [r3, #24]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099e4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	f003 0320 	and.w	r3, r3, #32
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00f      	beq.n	8009a10 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699a      	ldr	r2, [r3, #24]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f042 0220 	orr.w	r2, r2, #32
 8009a0e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d05a      	beq.n	8009ad0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0201 	bic.w	r2, r2, #1
 8009a28:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6919      	ldr	r1, [r3, #16]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	4b28      	ldr	r3, [pc, #160]	@ (8009ad8 <HAL_SPI_IRQHandler+0x394>)
 8009a36:	400b      	ands	r3, r1
 8009a38:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009a40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a44:	d138      	bne.n	8009ab8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009a54:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d013      	beq.n	8009a86 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a62:	4a1e      	ldr	r2, [pc, #120]	@ (8009adc <HAL_SPI_IRQHandler+0x398>)
 8009a64:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f8 ff80 	bl	8002970 <HAL_DMA_Abort_IT>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d007      	beq.n	8009a86 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d020      	beq.n	8009ad0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a92:	4a12      	ldr	r2, [pc, #72]	@ (8009adc <HAL_SPI_IRQHandler+0x398>)
 8009a94:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f8 ff68 	bl	8002970 <HAL_DMA_Abort_IT>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d014      	beq.n	8009ad0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009aac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009ab6:	e00b      	b.n	8009ad0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f82b 	bl	8009b1c <HAL_SPI_ErrorCallback>
    return;
 8009ac6:	e003      	b.n	8009ad0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009ac8:	bf00      	nop
 8009aca:	e002      	b.n	8009ad2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009acc:	bf00      	nop
 8009ace:	e000      	b.n	8009ad2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009ad0:	bf00      	nop
  }
}
 8009ad2:	3728      	adds	r7, #40	@ 0x28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	fffffc94 	.word	0xfffffc94
 8009adc:	08009b45 	.word	0x08009b45

08009ae0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f7ff ffd6 	bl	8009b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b70:	bf00      	nop
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699a      	ldr	r2, [r3, #24]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0208 	orr.w	r2, r2, #8
 8009b96:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	699a      	ldr	r2, [r3, #24]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f042 0210 	orr.w	r2, r2, #16
 8009ba6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 0201 	bic.w	r2, r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6919      	ldr	r1, [r3, #16]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8009cb4 <SPI_CloseTransfer+0x13c>)
 8009bc4:	400b      	ands	r3, r1
 8009bc6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009bd6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b04      	cmp	r3, #4
 8009be2:	d014      	beq.n	8009c0e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00f      	beq.n	8009c0e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bf4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0220 	orr.w	r2, r2, #32
 8009c0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d014      	beq.n	8009c44 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00f      	beq.n	8009c44 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c2a:	f043 0204 	orr.w	r2, r3, #4
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	699a      	ldr	r2, [r3, #24]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c42:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00f      	beq.n	8009c6e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c54:	f043 0201 	orr.w	r2, r3, #1
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	699a      	ldr	r2, [r3, #24]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c6c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00f      	beq.n	8009c98 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c7e:	f043 0208 	orr.w	r2, r3, #8
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c96:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009ca8:	bf00      	nop
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	fffffc90 	.word	0xfffffc90

08009cb8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009cc8:	e010      	b.n	8009cec <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cca:	f7f8 f95d 	bl	8001f88 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d803      	bhi.n	8009ce2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce0:	d102      	bne.n	8009ce8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e00f      	b.n	8009d0c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	695a      	ldr	r2, [r3, #20]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	bf0c      	ite	eq
 8009cfc:	2301      	moveq	r3, #1
 8009cfe:	2300      	movne	r3, #0
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	461a      	mov	r2, r3
 8009d04:	79fb      	ldrb	r3, [r7, #7]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d0df      	beq.n	8009cca <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d20:	095b      	lsrs	r3, r3, #5
 8009d22:	3301      	adds	r3, #1
 8009d24:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	3307      	adds	r3, #7
 8009d32:	08db      	lsrs	r3, r3, #3
 8009d34:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e049      	b.n	8009df0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d106      	bne.n	8009d76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7f7 fcf9 	bl	8001768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2202      	movs	r2, #2
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3304      	adds	r3, #4
 8009d86:	4619      	mov	r1, r3
 8009d88:	4610      	mov	r0, r2
 8009d8a:	f000 fdb1 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d001      	beq.n	8009e10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e056      	b.n	8009ebe <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8009ecc <HAL_TIM_Base_Start+0xd4>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d02c      	beq.n	8009e7c <HAL_TIM_Base_Start+0x84>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e2a:	d027      	beq.n	8009e7c <HAL_TIM_Base_Start+0x84>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a27      	ldr	r2, [pc, #156]	@ (8009ed0 <HAL_TIM_Base_Start+0xd8>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d022      	beq.n	8009e7c <HAL_TIM_Base_Start+0x84>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a26      	ldr	r2, [pc, #152]	@ (8009ed4 <HAL_TIM_Base_Start+0xdc>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d01d      	beq.n	8009e7c <HAL_TIM_Base_Start+0x84>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a24      	ldr	r2, [pc, #144]	@ (8009ed8 <HAL_TIM_Base_Start+0xe0>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d018      	beq.n	8009e7c <HAL_TIM_Base_Start+0x84>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a23      	ldr	r2, [pc, #140]	@ (8009edc <HAL_TIM_Base_Start+0xe4>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d013      	beq.n	8009e7c <HAL_TIM_Base_Start+0x84>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a21      	ldr	r2, [pc, #132]	@ (8009ee0 <HAL_TIM_Base_Start+0xe8>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d00e      	beq.n	8009e7c <HAL_TIM_Base_Start+0x84>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a20      	ldr	r2, [pc, #128]	@ (8009ee4 <HAL_TIM_Base_Start+0xec>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d009      	beq.n	8009e7c <HAL_TIM_Base_Start+0x84>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ee8 <HAL_TIM_Base_Start+0xf0>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d004      	beq.n	8009e7c <HAL_TIM_Base_Start+0x84>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1d      	ldr	r2, [pc, #116]	@ (8009eec <HAL_TIM_Base_Start+0xf4>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d115      	bne.n	8009ea8 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689a      	ldr	r2, [r3, #8]
 8009e82:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef0 <HAL_TIM_Base_Start+0xf8>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b06      	cmp	r3, #6
 8009e8c:	d015      	beq.n	8009eba <HAL_TIM_Base_Start+0xc2>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e94:	d011      	beq.n	8009eba <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f042 0201 	orr.w	r2, r2, #1
 8009ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea6:	e008      	b.n	8009eba <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f042 0201 	orr.w	r2, r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	e000      	b.n	8009ebc <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	40010000 	.word	0x40010000
 8009ed0:	40000400 	.word	0x40000400
 8009ed4:	40000800 	.word	0x40000800
 8009ed8:	40000c00 	.word	0x40000c00
 8009edc:	40010400 	.word	0x40010400
 8009ee0:	40001800 	.word	0x40001800
 8009ee4:	40014000 	.word	0x40014000
 8009ee8:	4000e000 	.word	0x4000e000
 8009eec:	4000e400 	.word	0x4000e400
 8009ef0:	00010007 	.word	0x00010007

08009ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d001      	beq.n	8009f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e05e      	b.n	8009fca <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68da      	ldr	r2, [r3, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f042 0201 	orr.w	r2, r2, #1
 8009f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a2b      	ldr	r2, [pc, #172]	@ (8009fd8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d02c      	beq.n	8009f88 <HAL_TIM_Base_Start_IT+0x94>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f36:	d027      	beq.n	8009f88 <HAL_TIM_Base_Start_IT+0x94>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a27      	ldr	r2, [pc, #156]	@ (8009fdc <HAL_TIM_Base_Start_IT+0xe8>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d022      	beq.n	8009f88 <HAL_TIM_Base_Start_IT+0x94>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a26      	ldr	r2, [pc, #152]	@ (8009fe0 <HAL_TIM_Base_Start_IT+0xec>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d01d      	beq.n	8009f88 <HAL_TIM_Base_Start_IT+0x94>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a24      	ldr	r2, [pc, #144]	@ (8009fe4 <HAL_TIM_Base_Start_IT+0xf0>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d018      	beq.n	8009f88 <HAL_TIM_Base_Start_IT+0x94>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a23      	ldr	r2, [pc, #140]	@ (8009fe8 <HAL_TIM_Base_Start_IT+0xf4>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d013      	beq.n	8009f88 <HAL_TIM_Base_Start_IT+0x94>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a21      	ldr	r2, [pc, #132]	@ (8009fec <HAL_TIM_Base_Start_IT+0xf8>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d00e      	beq.n	8009f88 <HAL_TIM_Base_Start_IT+0x94>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a20      	ldr	r2, [pc, #128]	@ (8009ff0 <HAL_TIM_Base_Start_IT+0xfc>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d009      	beq.n	8009f88 <HAL_TIM_Base_Start_IT+0x94>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a1e      	ldr	r2, [pc, #120]	@ (8009ff4 <HAL_TIM_Base_Start_IT+0x100>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d004      	beq.n	8009f88 <HAL_TIM_Base_Start_IT+0x94>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a1d      	ldr	r2, [pc, #116]	@ (8009ff8 <HAL_TIM_Base_Start_IT+0x104>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d115      	bne.n	8009fb4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689a      	ldr	r2, [r3, #8]
 8009f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8009ffc <HAL_TIM_Base_Start_IT+0x108>)
 8009f90:	4013      	ands	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b06      	cmp	r3, #6
 8009f98:	d015      	beq.n	8009fc6 <HAL_TIM_Base_Start_IT+0xd2>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fa0:	d011      	beq.n	8009fc6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f042 0201 	orr.w	r2, r2, #1
 8009fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb2:	e008      	b.n	8009fc6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f042 0201 	orr.w	r2, r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	e000      	b.n	8009fc8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	40010000 	.word	0x40010000
 8009fdc:	40000400 	.word	0x40000400
 8009fe0:	40000800 	.word	0x40000800
 8009fe4:	40000c00 	.word	0x40000c00
 8009fe8:	40010400 	.word	0x40010400
 8009fec:	40001800 	.word	0x40001800
 8009ff0:	40014000 	.word	0x40014000
 8009ff4:	4000e000 	.word	0x4000e000
 8009ff8:	4000e400 	.word	0x4000e400
 8009ffc:	00010007 	.word	0x00010007

0800a000 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e049      	b.n	800a0a6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f841 	bl	800a0ae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3304      	adds	r3, #4
 800a03c:	4619      	mov	r1, r3
 800a03e:	4610      	mov	r0, r2
 800a040:	f000 fc56 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e049      	b.n	800a168 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f841 	bl	800a170 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f000 fbf5 	bl	800a8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d020      	beq.n	800a1e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f003 0302 	and.w	r3, r3, #2
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01b      	beq.n	800a1e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f06f 0202 	mvn.w	r2, #2
 800a1b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	f003 0303 	and.w	r3, r3, #3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fb70 	bl	800a8b4 <HAL_TIM_IC_CaptureCallback>
 800a1d4:	e005      	b.n	800a1e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fb62 	bl	800a8a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fb73 	bl	800a8c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d020      	beq.n	800a234 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d01b      	beq.n	800a234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f06f 0204 	mvn.w	r2, #4
 800a204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2202      	movs	r2, #2
 800a20a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fb4a 	bl	800a8b4 <HAL_TIM_IC_CaptureCallback>
 800a220:	e005      	b.n	800a22e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fb3c 	bl	800a8a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fb4d 	bl	800a8c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f003 0308 	and.w	r3, r3, #8
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d020      	beq.n	800a280 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f003 0308 	and.w	r3, r3, #8
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01b      	beq.n	800a280 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f06f 0208 	mvn.w	r2, #8
 800a250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2204      	movs	r2, #4
 800a256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fb24 	bl	800a8b4 <HAL_TIM_IC_CaptureCallback>
 800a26c:	e005      	b.n	800a27a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fb16 	bl	800a8a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fb27 	bl	800a8c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f003 0310 	and.w	r3, r3, #16
 800a286:	2b00      	cmp	r3, #0
 800a288:	d020      	beq.n	800a2cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f003 0310 	and.w	r3, r3, #16
 800a290:	2b00      	cmp	r3, #0
 800a292:	d01b      	beq.n	800a2cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f06f 0210 	mvn.w	r2, #16
 800a29c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2208      	movs	r2, #8
 800a2a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	69db      	ldr	r3, [r3, #28]
 800a2aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fafe 	bl	800a8b4 <HAL_TIM_IC_CaptureCallback>
 800a2b8:	e005      	b.n	800a2c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 faf0 	bl	800a8a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fb01 	bl	800a8c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00c      	beq.n	800a2f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d007      	beq.n	800a2f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f06f 0201 	mvn.w	r2, #1
 800a2e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7f7 f84a 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d104      	bne.n	800a304 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00c      	beq.n	800a31e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d007      	beq.n	800a31e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 f83b 	bl	800b394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00c      	beq.n	800a342 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d007      	beq.n	800a342 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f001 f833 	bl	800b3a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00c      	beq.n	800a366 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a352:	2b00      	cmp	r3, #0
 800a354:	d007      	beq.n	800a366 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a35e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fabb 	bl	800a8dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f003 0320 	and.w	r3, r3, #32
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00c      	beq.n	800a38a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b00      	cmp	r3, #0
 800a378:	d007      	beq.n	800a38a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f06f 0220 	mvn.w	r2, #32
 800a382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fffb 	bl	800b380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a38a:	bf00      	nop
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d101      	bne.n	800a3b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	e066      	b.n	800a480 <HAL_TIM_OC_ConfigChannel+0xec>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b14      	cmp	r3, #20
 800a3be:	d857      	bhi.n	800a470 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a3c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c6:	bf00      	nop
 800a3c8:	0800a41d 	.word	0x0800a41d
 800a3cc:	0800a471 	.word	0x0800a471
 800a3d0:	0800a471 	.word	0x0800a471
 800a3d4:	0800a471 	.word	0x0800a471
 800a3d8:	0800a42b 	.word	0x0800a42b
 800a3dc:	0800a471 	.word	0x0800a471
 800a3e0:	0800a471 	.word	0x0800a471
 800a3e4:	0800a471 	.word	0x0800a471
 800a3e8:	0800a439 	.word	0x0800a439
 800a3ec:	0800a471 	.word	0x0800a471
 800a3f0:	0800a471 	.word	0x0800a471
 800a3f4:	0800a471 	.word	0x0800a471
 800a3f8:	0800a447 	.word	0x0800a447
 800a3fc:	0800a471 	.word	0x0800a471
 800a400:	0800a471 	.word	0x0800a471
 800a404:	0800a471 	.word	0x0800a471
 800a408:	0800a455 	.word	0x0800a455
 800a40c:	0800a471 	.word	0x0800a471
 800a410:	0800a471 	.word	0x0800a471
 800a414:	0800a471 	.word	0x0800a471
 800a418:	0800a463 	.word	0x0800a463
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fb10 	bl	800aa48 <TIM_OC1_SetConfig>
      break;
 800a428:	e025      	b.n	800a476 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68b9      	ldr	r1, [r7, #8]
 800a430:	4618      	mov	r0, r3
 800a432:	f000 fb99 	bl	800ab68 <TIM_OC2_SetConfig>
      break;
 800a436:	e01e      	b.n	800a476 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fc1c 	bl	800ac7c <TIM_OC3_SetConfig>
      break;
 800a444:	e017      	b.n	800a476 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68b9      	ldr	r1, [r7, #8]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fc9d 	bl	800ad8c <TIM_OC4_SetConfig>
      break;
 800a452:	e010      	b.n	800a476 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68b9      	ldr	r1, [r7, #8]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 fd00 	bl	800ae60 <TIM_OC5_SetConfig>
      break;
 800a460:	e009      	b.n	800a476 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68b9      	ldr	r1, [r7, #8]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 fd5d 	bl	800af28 <TIM_OC6_SetConfig>
      break;
 800a46e:	e002      	b.n	800a476 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	75fb      	strb	r3, [r7, #23]
      break;
 800a474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3718      	adds	r7, #24
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d101      	bne.n	800a4a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	e0ff      	b.n	800a6a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b14      	cmp	r3, #20
 800a4b2:	f200 80f0 	bhi.w	800a696 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a511 	.word	0x0800a511
 800a4c0:	0800a697 	.word	0x0800a697
 800a4c4:	0800a697 	.word	0x0800a697
 800a4c8:	0800a697 	.word	0x0800a697
 800a4cc:	0800a551 	.word	0x0800a551
 800a4d0:	0800a697 	.word	0x0800a697
 800a4d4:	0800a697 	.word	0x0800a697
 800a4d8:	0800a697 	.word	0x0800a697
 800a4dc:	0800a593 	.word	0x0800a593
 800a4e0:	0800a697 	.word	0x0800a697
 800a4e4:	0800a697 	.word	0x0800a697
 800a4e8:	0800a697 	.word	0x0800a697
 800a4ec:	0800a5d3 	.word	0x0800a5d3
 800a4f0:	0800a697 	.word	0x0800a697
 800a4f4:	0800a697 	.word	0x0800a697
 800a4f8:	0800a697 	.word	0x0800a697
 800a4fc:	0800a615 	.word	0x0800a615
 800a500:	0800a697 	.word	0x0800a697
 800a504:	0800a697 	.word	0x0800a697
 800a508:	0800a697 	.word	0x0800a697
 800a50c:	0800a655 	.word	0x0800a655
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68b9      	ldr	r1, [r7, #8]
 800a516:	4618      	mov	r0, r3
 800a518:	f000 fa96 	bl	800aa48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	699a      	ldr	r2, [r3, #24]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f042 0208 	orr.w	r2, r2, #8
 800a52a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f022 0204 	bic.w	r2, r2, #4
 800a53a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6999      	ldr	r1, [r3, #24]
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	691a      	ldr	r2, [r3, #16]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	619a      	str	r2, [r3, #24]
      break;
 800a54e:	e0a5      	b.n	800a69c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68b9      	ldr	r1, [r7, #8]
 800a556:	4618      	mov	r0, r3
 800a558:	f000 fb06 	bl	800ab68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699a      	ldr	r2, [r3, #24]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a56a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	699a      	ldr	r2, [r3, #24]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a57a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6999      	ldr	r1, [r3, #24]
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	021a      	lsls	r2, r3, #8
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	430a      	orrs	r2, r1
 800a58e:	619a      	str	r2, [r3, #24]
      break;
 800a590:	e084      	b.n	800a69c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68b9      	ldr	r1, [r7, #8]
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fb6f 	bl	800ac7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	69da      	ldr	r2, [r3, #28]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f042 0208 	orr.w	r2, r2, #8
 800a5ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	69da      	ldr	r2, [r3, #28]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f022 0204 	bic.w	r2, r2, #4
 800a5bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69d9      	ldr	r1, [r3, #28]
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	691a      	ldr	r2, [r3, #16]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	61da      	str	r2, [r3, #28]
      break;
 800a5d0:	e064      	b.n	800a69c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 fbd7 	bl	800ad8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69da      	ldr	r2, [r3, #28]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	69da      	ldr	r2, [r3, #28]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	69d9      	ldr	r1, [r3, #28]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	021a      	lsls	r2, r3, #8
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	430a      	orrs	r2, r1
 800a610:	61da      	str	r2, [r3, #28]
      break;
 800a612:	e043      	b.n	800a69c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68b9      	ldr	r1, [r7, #8]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 fc20 	bl	800ae60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f042 0208 	orr.w	r2, r2, #8
 800a62e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f022 0204 	bic.w	r2, r2, #4
 800a63e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	691a      	ldr	r2, [r3, #16]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a652:	e023      	b.n	800a69c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68b9      	ldr	r1, [r7, #8]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 fc64 	bl	800af28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a66e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a67e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	021a      	lsls	r2, r3, #8
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	430a      	orrs	r2, r1
 800a692:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a694:	e002      	b.n	800a69c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	75fb      	strb	r3, [r7, #23]
      break;
 800a69a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop

0800a6b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <HAL_TIM_ConfigClockSource+0x1c>
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	e0dc      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1d6>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	4b6a      	ldr	r3, [pc, #424]	@ (800a890 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a64      	ldr	r2, [pc, #400]	@ (800a894 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a702:	4293      	cmp	r3, r2
 800a704:	f000 80a9 	beq.w	800a85a <HAL_TIM_ConfigClockSource+0x1aa>
 800a708:	4a62      	ldr	r2, [pc, #392]	@ (800a894 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	f200 80ae 	bhi.w	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a710:	4a61      	ldr	r2, [pc, #388]	@ (800a898 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a712:	4293      	cmp	r3, r2
 800a714:	f000 80a1 	beq.w	800a85a <HAL_TIM_ConfigClockSource+0x1aa>
 800a718:	4a5f      	ldr	r2, [pc, #380]	@ (800a898 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	f200 80a6 	bhi.w	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a720:	4a5e      	ldr	r2, [pc, #376]	@ (800a89c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a722:	4293      	cmp	r3, r2
 800a724:	f000 8099 	beq.w	800a85a <HAL_TIM_ConfigClockSource+0x1aa>
 800a728:	4a5c      	ldr	r2, [pc, #368]	@ (800a89c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	f200 809e 	bhi.w	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a730:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a734:	f000 8091 	beq.w	800a85a <HAL_TIM_ConfigClockSource+0x1aa>
 800a738:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a73c:	f200 8096 	bhi.w	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a740:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a744:	f000 8089 	beq.w	800a85a <HAL_TIM_ConfigClockSource+0x1aa>
 800a748:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a74c:	f200 808e 	bhi.w	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a754:	d03e      	beq.n	800a7d4 <HAL_TIM_ConfigClockSource+0x124>
 800a756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a75a:	f200 8087 	bhi.w	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a75e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a762:	f000 8086 	beq.w	800a872 <HAL_TIM_ConfigClockSource+0x1c2>
 800a766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a76a:	d87f      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a76c:	2b70      	cmp	r3, #112	@ 0x70
 800a76e:	d01a      	beq.n	800a7a6 <HAL_TIM_ConfigClockSource+0xf6>
 800a770:	2b70      	cmp	r3, #112	@ 0x70
 800a772:	d87b      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a774:	2b60      	cmp	r3, #96	@ 0x60
 800a776:	d050      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0x16a>
 800a778:	2b60      	cmp	r3, #96	@ 0x60
 800a77a:	d877      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a77c:	2b50      	cmp	r3, #80	@ 0x50
 800a77e:	d03c      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x14a>
 800a780:	2b50      	cmp	r3, #80	@ 0x50
 800a782:	d873      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a784:	2b40      	cmp	r3, #64	@ 0x40
 800a786:	d058      	beq.n	800a83a <HAL_TIM_ConfigClockSource+0x18a>
 800a788:	2b40      	cmp	r3, #64	@ 0x40
 800a78a:	d86f      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a78c:	2b30      	cmp	r3, #48	@ 0x30
 800a78e:	d064      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x1aa>
 800a790:	2b30      	cmp	r3, #48	@ 0x30
 800a792:	d86b      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a794:	2b20      	cmp	r3, #32
 800a796:	d060      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x1aa>
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d867      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d05c      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7a0:	2b10      	cmp	r3, #16
 800a7a2:	d05a      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7a4:	e062      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7b6:	f000 fc9b 	bl	800b0f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a7c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	609a      	str	r2, [r3, #8]
      break;
 800a7d2:	e04f      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7e4:	f000 fc84 	bl	800b0f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a7f6:	609a      	str	r2, [r3, #8]
      break;
 800a7f8:	e03c      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a806:	461a      	mov	r2, r3
 800a808:	f000 fbf4 	bl	800aff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2150      	movs	r1, #80	@ 0x50
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fc4e 	bl	800b0b4 <TIM_ITRx_SetConfig>
      break;
 800a818:	e02c      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a826:	461a      	mov	r2, r3
 800a828:	f000 fc13 	bl	800b052 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2160      	movs	r1, #96	@ 0x60
 800a832:	4618      	mov	r0, r3
 800a834:	f000 fc3e 	bl	800b0b4 <TIM_ITRx_SetConfig>
      break;
 800a838:	e01c      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a846:	461a      	mov	r2, r3
 800a848:	f000 fbd4 	bl	800aff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2140      	movs	r1, #64	@ 0x40
 800a852:	4618      	mov	r0, r3
 800a854:	f000 fc2e 	bl	800b0b4 <TIM_ITRx_SetConfig>
      break;
 800a858:	e00c      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f000 fc25 	bl	800b0b4 <TIM_ITRx_SetConfig>
      break;
 800a86a:	e003      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
      break;
 800a870:	e000      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	ffceff88 	.word	0xffceff88
 800a894:	00100040 	.word	0x00100040
 800a898:	00100030 	.word	0x00100030
 800a89c:	00100020 	.word	0x00100020

0800a8a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a47      	ldr	r2, [pc, #284]	@ (800aa20 <TIM_Base_SetConfig+0x130>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d013      	beq.n	800a930 <TIM_Base_SetConfig+0x40>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a90e:	d00f      	beq.n	800a930 <TIM_Base_SetConfig+0x40>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a44      	ldr	r2, [pc, #272]	@ (800aa24 <TIM_Base_SetConfig+0x134>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d00b      	beq.n	800a930 <TIM_Base_SetConfig+0x40>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a43      	ldr	r2, [pc, #268]	@ (800aa28 <TIM_Base_SetConfig+0x138>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d007      	beq.n	800a930 <TIM_Base_SetConfig+0x40>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a42      	ldr	r2, [pc, #264]	@ (800aa2c <TIM_Base_SetConfig+0x13c>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d003      	beq.n	800a930 <TIM_Base_SetConfig+0x40>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a41      	ldr	r2, [pc, #260]	@ (800aa30 <TIM_Base_SetConfig+0x140>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d108      	bne.n	800a942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	4313      	orrs	r3, r2
 800a940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a36      	ldr	r2, [pc, #216]	@ (800aa20 <TIM_Base_SetConfig+0x130>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d027      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a950:	d023      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a33      	ldr	r2, [pc, #204]	@ (800aa24 <TIM_Base_SetConfig+0x134>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d01f      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a32      	ldr	r2, [pc, #200]	@ (800aa28 <TIM_Base_SetConfig+0x138>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d01b      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a31      	ldr	r2, [pc, #196]	@ (800aa2c <TIM_Base_SetConfig+0x13c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d017      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a30      	ldr	r2, [pc, #192]	@ (800aa30 <TIM_Base_SetConfig+0x140>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d013      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a2f      	ldr	r2, [pc, #188]	@ (800aa34 <TIM_Base_SetConfig+0x144>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00f      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a2e      	ldr	r2, [pc, #184]	@ (800aa38 <TIM_Base_SetConfig+0x148>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00b      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a2d      	ldr	r2, [pc, #180]	@ (800aa3c <TIM_Base_SetConfig+0x14c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d007      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a2c      	ldr	r2, [pc, #176]	@ (800aa40 <TIM_Base_SetConfig+0x150>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d003      	beq.n	800a99a <TIM_Base_SetConfig+0xaa>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a2b      	ldr	r2, [pc, #172]	@ (800aa44 <TIM_Base_SetConfig+0x154>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d108      	bne.n	800a9ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	689a      	ldr	r2, [r3, #8]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a14      	ldr	r2, [pc, #80]	@ (800aa20 <TIM_Base_SetConfig+0x130>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d00f      	beq.n	800a9f2 <TIM_Base_SetConfig+0x102>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a16      	ldr	r2, [pc, #88]	@ (800aa30 <TIM_Base_SetConfig+0x140>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00b      	beq.n	800a9f2 <TIM_Base_SetConfig+0x102>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a15      	ldr	r2, [pc, #84]	@ (800aa34 <TIM_Base_SetConfig+0x144>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d007      	beq.n	800a9f2 <TIM_Base_SetConfig+0x102>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a14      	ldr	r2, [pc, #80]	@ (800aa38 <TIM_Base_SetConfig+0x148>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d003      	beq.n	800a9f2 <TIM_Base_SetConfig+0x102>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a13      	ldr	r2, [pc, #76]	@ (800aa3c <TIM_Base_SetConfig+0x14c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d103      	bne.n	800a9fa <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	691a      	ldr	r2, [r3, #16]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f043 0204 	orr.w	r2, r3, #4
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	601a      	str	r2, [r3, #0]
}
 800aa12:	bf00      	nop
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	40010000 	.word	0x40010000
 800aa24:	40000400 	.word	0x40000400
 800aa28:	40000800 	.word	0x40000800
 800aa2c:	40000c00 	.word	0x40000c00
 800aa30:	40010400 	.word	0x40010400
 800aa34:	40014000 	.word	0x40014000
 800aa38:	40014400 	.word	0x40014400
 800aa3c:	40014800 	.word	0x40014800
 800aa40:	4000e000 	.word	0x4000e000
 800aa44:	4000e400 	.word	0x4000e400

0800aa48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	f023 0201 	bic.w	r2, r3, #1
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	4b37      	ldr	r3, [pc, #220]	@ (800ab50 <TIM_OC1_SetConfig+0x108>)
 800aa74:	4013      	ands	r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f023 0302 	bic.w	r3, r3, #2
 800aa90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a2d      	ldr	r2, [pc, #180]	@ (800ab54 <TIM_OC1_SetConfig+0x10c>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d00f      	beq.n	800aac4 <TIM_OC1_SetConfig+0x7c>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a2c      	ldr	r2, [pc, #176]	@ (800ab58 <TIM_OC1_SetConfig+0x110>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d00b      	beq.n	800aac4 <TIM_OC1_SetConfig+0x7c>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a2b      	ldr	r2, [pc, #172]	@ (800ab5c <TIM_OC1_SetConfig+0x114>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d007      	beq.n	800aac4 <TIM_OC1_SetConfig+0x7c>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a2a      	ldr	r2, [pc, #168]	@ (800ab60 <TIM_OC1_SetConfig+0x118>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d003      	beq.n	800aac4 <TIM_OC1_SetConfig+0x7c>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a29      	ldr	r2, [pc, #164]	@ (800ab64 <TIM_OC1_SetConfig+0x11c>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d10c      	bne.n	800aade <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f023 0308 	bic.w	r3, r3, #8
 800aaca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f023 0304 	bic.w	r3, r3, #4
 800aadc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a1c      	ldr	r2, [pc, #112]	@ (800ab54 <TIM_OC1_SetConfig+0x10c>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d00f      	beq.n	800ab06 <TIM_OC1_SetConfig+0xbe>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a1b      	ldr	r2, [pc, #108]	@ (800ab58 <TIM_OC1_SetConfig+0x110>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d00b      	beq.n	800ab06 <TIM_OC1_SetConfig+0xbe>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a1a      	ldr	r2, [pc, #104]	@ (800ab5c <TIM_OC1_SetConfig+0x114>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d007      	beq.n	800ab06 <TIM_OC1_SetConfig+0xbe>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a19      	ldr	r2, [pc, #100]	@ (800ab60 <TIM_OC1_SetConfig+0x118>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d003      	beq.n	800ab06 <TIM_OC1_SetConfig+0xbe>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a18      	ldr	r2, [pc, #96]	@ (800ab64 <TIM_OC1_SetConfig+0x11c>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d111      	bne.n	800ab2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ab14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	621a      	str	r2, [r3, #32]
}
 800ab44:	bf00      	nop
 800ab46:	371c      	adds	r7, #28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	fffeff8f 	.word	0xfffeff8f
 800ab54:	40010000 	.word	0x40010000
 800ab58:	40010400 	.word	0x40010400
 800ab5c:	40014000 	.word	0x40014000
 800ab60:	40014400 	.word	0x40014400
 800ab64:	40014800 	.word	0x40014800

0800ab68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	f023 0210 	bic.w	r2, r3, #16
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	4b34      	ldr	r3, [pc, #208]	@ (800ac64 <TIM_OC2_SetConfig+0xfc>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	021b      	lsls	r3, r3, #8
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f023 0320 	bic.w	r3, r3, #32
 800abb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	011b      	lsls	r3, r3, #4
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a29      	ldr	r2, [pc, #164]	@ (800ac68 <TIM_OC2_SetConfig+0x100>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d003      	beq.n	800abd0 <TIM_OC2_SetConfig+0x68>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a28      	ldr	r2, [pc, #160]	@ (800ac6c <TIM_OC2_SetConfig+0x104>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d10d      	bne.n	800abec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a1e      	ldr	r2, [pc, #120]	@ (800ac68 <TIM_OC2_SetConfig+0x100>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d00f      	beq.n	800ac14 <TIM_OC2_SetConfig+0xac>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a1d      	ldr	r2, [pc, #116]	@ (800ac6c <TIM_OC2_SetConfig+0x104>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d00b      	beq.n	800ac14 <TIM_OC2_SetConfig+0xac>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4a1c      	ldr	r2, [pc, #112]	@ (800ac70 <TIM_OC2_SetConfig+0x108>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d007      	beq.n	800ac14 <TIM_OC2_SetConfig+0xac>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a1b      	ldr	r2, [pc, #108]	@ (800ac74 <TIM_OC2_SetConfig+0x10c>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d003      	beq.n	800ac14 <TIM_OC2_SetConfig+0xac>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a1a      	ldr	r2, [pc, #104]	@ (800ac78 <TIM_OC2_SetConfig+0x110>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d113      	bne.n	800ac3c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	621a      	str	r2, [r3, #32]
}
 800ac56:	bf00      	nop
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	feff8fff 	.word	0xfeff8fff
 800ac68:	40010000 	.word	0x40010000
 800ac6c:	40010400 	.word	0x40010400
 800ac70:	40014000 	.word	0x40014000
 800ac74:	40014400 	.word	0x40014400
 800ac78:	40014800 	.word	0x40014800

0800ac7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b087      	sub	sp, #28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a1b      	ldr	r3, [r3, #32]
 800ac90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	4b33      	ldr	r3, [pc, #204]	@ (800ad74 <TIM_OC3_SetConfig+0xf8>)
 800aca8:	4013      	ands	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 0303 	bic.w	r3, r3, #3
 800acb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	4313      	orrs	r3, r2
 800acbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800acc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	4313      	orrs	r3, r2
 800acd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a28      	ldr	r2, [pc, #160]	@ (800ad78 <TIM_OC3_SetConfig+0xfc>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d003      	beq.n	800ace2 <TIM_OC3_SetConfig+0x66>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a27      	ldr	r2, [pc, #156]	@ (800ad7c <TIM_OC3_SetConfig+0x100>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d10d      	bne.n	800acfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ace8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	021b      	lsls	r3, r3, #8
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800acfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a1d      	ldr	r2, [pc, #116]	@ (800ad78 <TIM_OC3_SetConfig+0xfc>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d00f      	beq.n	800ad26 <TIM_OC3_SetConfig+0xaa>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a1c      	ldr	r2, [pc, #112]	@ (800ad7c <TIM_OC3_SetConfig+0x100>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d00b      	beq.n	800ad26 <TIM_OC3_SetConfig+0xaa>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a1b      	ldr	r2, [pc, #108]	@ (800ad80 <TIM_OC3_SetConfig+0x104>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d007      	beq.n	800ad26 <TIM_OC3_SetConfig+0xaa>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a1a      	ldr	r2, [pc, #104]	@ (800ad84 <TIM_OC3_SetConfig+0x108>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d003      	beq.n	800ad26 <TIM_OC3_SetConfig+0xaa>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a19      	ldr	r2, [pc, #100]	@ (800ad88 <TIM_OC3_SetConfig+0x10c>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d113      	bne.n	800ad4e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	011b      	lsls	r3, r3, #4
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	011b      	lsls	r3, r3, #4
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	685a      	ldr	r2, [r3, #4]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	621a      	str	r2, [r3, #32]
}
 800ad68:	bf00      	nop
 800ad6a:	371c      	adds	r7, #28
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr
 800ad74:	fffeff8f 	.word	0xfffeff8f
 800ad78:	40010000 	.word	0x40010000
 800ad7c:	40010400 	.word	0x40010400
 800ad80:	40014000 	.word	0x40014000
 800ad84:	40014400 	.word	0x40014400
 800ad88:	40014800 	.word	0x40014800

0800ad8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	4b24      	ldr	r3, [pc, #144]	@ (800ae48 <TIM_OC4_SetConfig+0xbc>)
 800adb8:	4013      	ands	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	021b      	lsls	r3, r3, #8
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	4313      	orrs	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800add6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	031b      	lsls	r3, r3, #12
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a19      	ldr	r2, [pc, #100]	@ (800ae4c <TIM_OC4_SetConfig+0xc0>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d00f      	beq.n	800ae0c <TIM_OC4_SetConfig+0x80>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a18      	ldr	r2, [pc, #96]	@ (800ae50 <TIM_OC4_SetConfig+0xc4>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00b      	beq.n	800ae0c <TIM_OC4_SetConfig+0x80>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a17      	ldr	r2, [pc, #92]	@ (800ae54 <TIM_OC4_SetConfig+0xc8>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d007      	beq.n	800ae0c <TIM_OC4_SetConfig+0x80>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a16      	ldr	r2, [pc, #88]	@ (800ae58 <TIM_OC4_SetConfig+0xcc>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d003      	beq.n	800ae0c <TIM_OC4_SetConfig+0x80>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a15      	ldr	r2, [pc, #84]	@ (800ae5c <TIM_OC4_SetConfig+0xd0>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d109      	bne.n	800ae20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	695b      	ldr	r3, [r3, #20]
 800ae18:	019b      	lsls	r3, r3, #6
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	621a      	str	r2, [r3, #32]
}
 800ae3a:	bf00      	nop
 800ae3c:	371c      	adds	r7, #28
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	feff8fff 	.word	0xfeff8fff
 800ae4c:	40010000 	.word	0x40010000
 800ae50:	40010400 	.word	0x40010400
 800ae54:	40014000 	.word	0x40014000
 800ae58:	40014400 	.word	0x40014400
 800ae5c:	40014800 	.word	0x40014800

0800ae60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
 800ae74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4b21      	ldr	r3, [pc, #132]	@ (800af10 <TIM_OC5_SetConfig+0xb0>)
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aea0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	041b      	lsls	r3, r3, #16
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a18      	ldr	r2, [pc, #96]	@ (800af14 <TIM_OC5_SetConfig+0xb4>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d00f      	beq.n	800aed6 <TIM_OC5_SetConfig+0x76>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a17      	ldr	r2, [pc, #92]	@ (800af18 <TIM_OC5_SetConfig+0xb8>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d00b      	beq.n	800aed6 <TIM_OC5_SetConfig+0x76>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a16      	ldr	r2, [pc, #88]	@ (800af1c <TIM_OC5_SetConfig+0xbc>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d007      	beq.n	800aed6 <TIM_OC5_SetConfig+0x76>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a15      	ldr	r2, [pc, #84]	@ (800af20 <TIM_OC5_SetConfig+0xc0>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d003      	beq.n	800aed6 <TIM_OC5_SetConfig+0x76>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a14      	ldr	r2, [pc, #80]	@ (800af24 <TIM_OC5_SetConfig+0xc4>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d109      	bne.n	800aeea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aedc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	021b      	lsls	r3, r3, #8
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	621a      	str	r2, [r3, #32]
}
 800af04:	bf00      	nop
 800af06:	371c      	adds	r7, #28
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	fffeff8f 	.word	0xfffeff8f
 800af14:	40010000 	.word	0x40010000
 800af18:	40010400 	.word	0x40010400
 800af1c:	40014000 	.word	0x40014000
 800af20:	40014400 	.word	0x40014400
 800af24:	40014800 	.word	0x40014800

0800af28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	4b22      	ldr	r3, [pc, #136]	@ (800afdc <TIM_OC6_SetConfig+0xb4>)
 800af54:	4013      	ands	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	4313      	orrs	r3, r2
 800af62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800af6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	051b      	lsls	r3, r3, #20
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	4313      	orrs	r3, r2
 800af76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a19      	ldr	r2, [pc, #100]	@ (800afe0 <TIM_OC6_SetConfig+0xb8>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d00f      	beq.n	800afa0 <TIM_OC6_SetConfig+0x78>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a18      	ldr	r2, [pc, #96]	@ (800afe4 <TIM_OC6_SetConfig+0xbc>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d00b      	beq.n	800afa0 <TIM_OC6_SetConfig+0x78>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a17      	ldr	r2, [pc, #92]	@ (800afe8 <TIM_OC6_SetConfig+0xc0>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d007      	beq.n	800afa0 <TIM_OC6_SetConfig+0x78>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a16      	ldr	r2, [pc, #88]	@ (800afec <TIM_OC6_SetConfig+0xc4>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d003      	beq.n	800afa0 <TIM_OC6_SetConfig+0x78>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a15      	ldr	r2, [pc, #84]	@ (800aff0 <TIM_OC6_SetConfig+0xc8>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d109      	bne.n	800afb4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800afa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	029b      	lsls	r3, r3, #10
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	621a      	str	r2, [r3, #32]
}
 800afce:	bf00      	nop
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	feff8fff 	.word	0xfeff8fff
 800afe0:	40010000 	.word	0x40010000
 800afe4:	40010400 	.word	0x40010400
 800afe8:	40014000 	.word	0x40014000
 800afec:	40014400 	.word	0x40014400
 800aff0:	40014800 	.word	0x40014800

0800aff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	f023 0201 	bic.w	r2, r3, #1
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b01e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	011b      	lsls	r3, r3, #4
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	4313      	orrs	r3, r2
 800b028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f023 030a 	bic.w	r3, r3, #10
 800b030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b032:	697a      	ldr	r2, [r7, #20]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	4313      	orrs	r3, r2
 800b038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	621a      	str	r2, [r3, #32]
}
 800b046:	bf00      	nop
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b052:	b480      	push	{r7}
 800b054:	b087      	sub	sp, #28
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	60b9      	str	r1, [r7, #8]
 800b05c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	f023 0210 	bic.w	r2, r3, #16
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b07c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	031b      	lsls	r3, r3, #12
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	4313      	orrs	r3, r2
 800b086:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b08e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	011b      	lsls	r3, r3, #4
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	4313      	orrs	r3, r2
 800b098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	697a      	ldr	r2, [r7, #20]
 800b0a4:	621a      	str	r2, [r3, #32]
}
 800b0a6:	bf00      	nop
 800b0a8:	371c      	adds	r7, #28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
	...

0800b0b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	4b09      	ldr	r3, [pc, #36]	@ (800b0ec <TIM_ITRx_SetConfig+0x38>)
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	f043 0307 	orr.w	r3, r3, #7
 800b0d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	609a      	str	r2, [r3, #8]
}
 800b0de:	bf00      	nop
 800b0e0:	3714      	adds	r7, #20
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	ffcfff8f 	.word	0xffcfff8f

0800b0f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b10a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	021a      	lsls	r2, r3, #8
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	431a      	orrs	r2, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	4313      	orrs	r3, r2
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	609a      	str	r2, [r3, #8]
}
 800b124:	bf00      	nop
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b140:	2b01      	cmp	r3, #1
 800b142:	d101      	bne.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b144:	2302      	movs	r3, #2
 800b146:	e077      	b.n	800b238 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a35      	ldr	r2, [pc, #212]	@ (800b244 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d004      	beq.n	800b17c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a34      	ldr	r2, [pc, #208]	@ (800b248 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d108      	bne.n	800b18e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b194:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a25      	ldr	r2, [pc, #148]	@ (800b244 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d02c      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ba:	d027      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a22      	ldr	r2, [pc, #136]	@ (800b24c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d022      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a21      	ldr	r2, [pc, #132]	@ (800b250 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d01d      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a1f      	ldr	r2, [pc, #124]	@ (800b254 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d018      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a1a      	ldr	r2, [pc, #104]	@ (800b248 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d013      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a1b      	ldr	r2, [pc, #108]	@ (800b258 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d00e      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a1a      	ldr	r2, [pc, #104]	@ (800b25c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d009      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a18      	ldr	r2, [pc, #96]	@ (800b260 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d004      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a17      	ldr	r2, [pc, #92]	@ (800b264 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d10c      	bne.n	800b226 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b212:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	40010000 	.word	0x40010000
 800b248:	40010400 	.word	0x40010400
 800b24c:	40000400 	.word	0x40000400
 800b250:	40000800 	.word	0x40000800
 800b254:	40000c00 	.word	0x40000c00
 800b258:	40001800 	.word	0x40001800
 800b25c:	40014000 	.word	0x40014000
 800b260:	4000e000 	.word	0x4000e000
 800b264:	4000e400 	.word	0x4000e400

0800b268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d101      	bne.n	800b284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b280:	2302      	movs	r3, #2
 800b282:	e073      	b.n	800b36c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	041b      	lsls	r3, r3, #16
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	4313      	orrs	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a19      	ldr	r2, [pc, #100]	@ (800b378 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d004      	beq.n	800b320 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a18      	ldr	r2, [pc, #96]	@ (800b37c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d11c      	bne.n	800b35a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32a:	051b      	lsls	r3, r3, #20
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b348:	4313      	orrs	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	40010000 	.word	0x40010000
 800b37c:	40010400 	.word	0x40010400

0800b380 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800b3c2:	4b92      	ldr	r3, [pc, #584]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b3c4:	220a      	movs	r2, #10
 800b3c6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 20;
 800b3c8:	4b90      	ldr	r3, [pc, #576]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b3ca:	2214      	movs	r2, #20
 800b3cc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 3;
 800b3ce:	4b8f      	ldr	r3, [pc, #572]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b3d0:	2203      	movs	r2, #3
 800b3d2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 800b3d4:	4b8d      	ldr	r3, [pc, #564]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b3d6:	2203      	movs	r2, #3
 800b3d8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b3da:	4b8d      	ldr	r3, [pc, #564]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b3dc:	22ff      	movs	r2, #255	@ 0xff
 800b3de:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b3e0:	4b8b      	ldr	r3, [pc, #556]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b3e2:	22ff      	movs	r2, #255	@ 0xff
 800b3e4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800b3e6:	4b8a      	ldr	r3, [pc, #552]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b3ec:	4b88      	ldr	r3, [pc, #544]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800b3f2:	4b88      	ldr	r3, [pc, #544]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b3f4:	220a      	movs	r2, #10
 800b3f6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 20;
 800b3f8:	4b86      	ldr	r3, [pc, #536]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b3fa:	2214      	movs	r2, #20
 800b3fc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b3fe:	4b85      	ldr	r3, [pc, #532]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b400:	2201      	movs	r2, #1
 800b402:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 3;
 800b404:	4b83      	ldr	r3, [pc, #524]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b406:	2203      	movs	r2, #3
 800b408:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b40a:	2100      	movs	r1, #0
 800b40c:	2000      	movs	r0, #0
 800b40e:	f004 fe03 	bl	8010018 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b412:	4b7e      	ldr	r3, [pc, #504]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	061a      	lsls	r2, r3, #24
 800b418:	4b7c      	ldr	r3, [pc, #496]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b41a:	785b      	ldrb	r3, [r3, #1]
 800b41c:	041b      	lsls	r3, r3, #16
 800b41e:	431a      	orrs	r2, r3
 800b420:	4b7a      	ldr	r3, [pc, #488]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b422:	789b      	ldrb	r3, [r3, #2]
 800b424:	021b      	lsls	r3, r3, #8
 800b426:	4313      	orrs	r3, r2
 800b428:	4a78      	ldr	r2, [pc, #480]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b42a:	78d2      	ldrb	r2, [r2, #3]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	061a      	lsls	r2, r3, #24
 800b430:	4b76      	ldr	r3, [pc, #472]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	0619      	lsls	r1, r3, #24
 800b436:	4b75      	ldr	r3, [pc, #468]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	041b      	lsls	r3, r3, #16
 800b43c:	4319      	orrs	r1, r3
 800b43e:	4b73      	ldr	r3, [pc, #460]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b440:	789b      	ldrb	r3, [r3, #2]
 800b442:	021b      	lsls	r3, r3, #8
 800b444:	430b      	orrs	r3, r1
 800b446:	4971      	ldr	r1, [pc, #452]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b448:	78c9      	ldrb	r1, [r1, #3]
 800b44a:	430b      	orrs	r3, r1
 800b44c:	021b      	lsls	r3, r3, #8
 800b44e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b452:	431a      	orrs	r2, r3
 800b454:	4b6d      	ldr	r3, [pc, #436]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	0619      	lsls	r1, r3, #24
 800b45a:	4b6c      	ldr	r3, [pc, #432]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b45c:	785b      	ldrb	r3, [r3, #1]
 800b45e:	041b      	lsls	r3, r3, #16
 800b460:	4319      	orrs	r1, r3
 800b462:	4b6a      	ldr	r3, [pc, #424]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b464:	789b      	ldrb	r3, [r3, #2]
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	430b      	orrs	r3, r1
 800b46a:	4968      	ldr	r1, [pc, #416]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b46c:	78c9      	ldrb	r1, [r1, #3]
 800b46e:	430b      	orrs	r3, r1
 800b470:	0a1b      	lsrs	r3, r3, #8
 800b472:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b476:	431a      	orrs	r2, r3
 800b478:	4b64      	ldr	r3, [pc, #400]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	0619      	lsls	r1, r3, #24
 800b47e:	4b63      	ldr	r3, [pc, #396]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b480:	785b      	ldrb	r3, [r3, #1]
 800b482:	041b      	lsls	r3, r3, #16
 800b484:	4319      	orrs	r1, r3
 800b486:	4b61      	ldr	r3, [pc, #388]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b488:	789b      	ldrb	r3, [r3, #2]
 800b48a:	021b      	lsls	r3, r3, #8
 800b48c:	430b      	orrs	r3, r1
 800b48e:	495f      	ldr	r1, [pc, #380]	@ (800b60c <MX_LWIP_Init+0x250>)
 800b490:	78c9      	ldrb	r1, [r1, #3]
 800b492:	430b      	orrs	r3, r1
 800b494:	0e1b      	lsrs	r3, r3, #24
 800b496:	4313      	orrs	r3, r2
 800b498:	4a5f      	ldr	r2, [pc, #380]	@ (800b618 <MX_LWIP_Init+0x25c>)
 800b49a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b49c:	4b5c      	ldr	r3, [pc, #368]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	061a      	lsls	r2, r3, #24
 800b4a2:	4b5b      	ldr	r3, [pc, #364]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4a4:	785b      	ldrb	r3, [r3, #1]
 800b4a6:	041b      	lsls	r3, r3, #16
 800b4a8:	431a      	orrs	r2, r3
 800b4aa:	4b59      	ldr	r3, [pc, #356]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4ac:	789b      	ldrb	r3, [r3, #2]
 800b4ae:	021b      	lsls	r3, r3, #8
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	4a57      	ldr	r2, [pc, #348]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4b4:	78d2      	ldrb	r2, [r2, #3]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	061a      	lsls	r2, r3, #24
 800b4ba:	4b55      	ldr	r3, [pc, #340]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	0619      	lsls	r1, r3, #24
 800b4c0:	4b53      	ldr	r3, [pc, #332]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4c2:	785b      	ldrb	r3, [r3, #1]
 800b4c4:	041b      	lsls	r3, r3, #16
 800b4c6:	4319      	orrs	r1, r3
 800b4c8:	4b51      	ldr	r3, [pc, #324]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4ca:	789b      	ldrb	r3, [r3, #2]
 800b4cc:	021b      	lsls	r3, r3, #8
 800b4ce:	430b      	orrs	r3, r1
 800b4d0:	494f      	ldr	r1, [pc, #316]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4d2:	78c9      	ldrb	r1, [r1, #3]
 800b4d4:	430b      	orrs	r3, r1
 800b4d6:	021b      	lsls	r3, r3, #8
 800b4d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	4b4c      	ldr	r3, [pc, #304]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	0619      	lsls	r1, r3, #24
 800b4e4:	4b4a      	ldr	r3, [pc, #296]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4e6:	785b      	ldrb	r3, [r3, #1]
 800b4e8:	041b      	lsls	r3, r3, #16
 800b4ea:	4319      	orrs	r1, r3
 800b4ec:	4b48      	ldr	r3, [pc, #288]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4ee:	789b      	ldrb	r3, [r3, #2]
 800b4f0:	021b      	lsls	r3, r3, #8
 800b4f2:	430b      	orrs	r3, r1
 800b4f4:	4946      	ldr	r1, [pc, #280]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b4f6:	78c9      	ldrb	r1, [r1, #3]
 800b4f8:	430b      	orrs	r3, r1
 800b4fa:	0a1b      	lsrs	r3, r3, #8
 800b4fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b500:	431a      	orrs	r2, r3
 800b502:	4b43      	ldr	r3, [pc, #268]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	0619      	lsls	r1, r3, #24
 800b508:	4b41      	ldr	r3, [pc, #260]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b50a:	785b      	ldrb	r3, [r3, #1]
 800b50c:	041b      	lsls	r3, r3, #16
 800b50e:	4319      	orrs	r1, r3
 800b510:	4b3f      	ldr	r3, [pc, #252]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b512:	789b      	ldrb	r3, [r3, #2]
 800b514:	021b      	lsls	r3, r3, #8
 800b516:	430b      	orrs	r3, r1
 800b518:	493d      	ldr	r1, [pc, #244]	@ (800b610 <MX_LWIP_Init+0x254>)
 800b51a:	78c9      	ldrb	r1, [r1, #3]
 800b51c:	430b      	orrs	r3, r1
 800b51e:	0e1b      	lsrs	r3, r3, #24
 800b520:	4313      	orrs	r3, r2
 800b522:	4a3e      	ldr	r2, [pc, #248]	@ (800b61c <MX_LWIP_Init+0x260>)
 800b524:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b526:	4b3b      	ldr	r3, [pc, #236]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	061a      	lsls	r2, r3, #24
 800b52c:	4b39      	ldr	r3, [pc, #228]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b52e:	785b      	ldrb	r3, [r3, #1]
 800b530:	041b      	lsls	r3, r3, #16
 800b532:	431a      	orrs	r2, r3
 800b534:	4b37      	ldr	r3, [pc, #220]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b536:	789b      	ldrb	r3, [r3, #2]
 800b538:	021b      	lsls	r3, r3, #8
 800b53a:	4313      	orrs	r3, r2
 800b53c:	4a35      	ldr	r2, [pc, #212]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b53e:	78d2      	ldrb	r2, [r2, #3]
 800b540:	4313      	orrs	r3, r2
 800b542:	061a      	lsls	r2, r3, #24
 800b544:	4b33      	ldr	r3, [pc, #204]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	0619      	lsls	r1, r3, #24
 800b54a:	4b32      	ldr	r3, [pc, #200]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b54c:	785b      	ldrb	r3, [r3, #1]
 800b54e:	041b      	lsls	r3, r3, #16
 800b550:	4319      	orrs	r1, r3
 800b552:	4b30      	ldr	r3, [pc, #192]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b554:	789b      	ldrb	r3, [r3, #2]
 800b556:	021b      	lsls	r3, r3, #8
 800b558:	430b      	orrs	r3, r1
 800b55a:	492e      	ldr	r1, [pc, #184]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b55c:	78c9      	ldrb	r1, [r1, #3]
 800b55e:	430b      	orrs	r3, r1
 800b560:	021b      	lsls	r3, r3, #8
 800b562:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b566:	431a      	orrs	r2, r3
 800b568:	4b2a      	ldr	r3, [pc, #168]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	0619      	lsls	r1, r3, #24
 800b56e:	4b29      	ldr	r3, [pc, #164]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b570:	785b      	ldrb	r3, [r3, #1]
 800b572:	041b      	lsls	r3, r3, #16
 800b574:	4319      	orrs	r1, r3
 800b576:	4b27      	ldr	r3, [pc, #156]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b578:	789b      	ldrb	r3, [r3, #2]
 800b57a:	021b      	lsls	r3, r3, #8
 800b57c:	430b      	orrs	r3, r1
 800b57e:	4925      	ldr	r1, [pc, #148]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b580:	78c9      	ldrb	r1, [r1, #3]
 800b582:	430b      	orrs	r3, r1
 800b584:	0a1b      	lsrs	r3, r3, #8
 800b586:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b58a:	431a      	orrs	r2, r3
 800b58c:	4b21      	ldr	r3, [pc, #132]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	0619      	lsls	r1, r3, #24
 800b592:	4b20      	ldr	r3, [pc, #128]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b594:	785b      	ldrb	r3, [r3, #1]
 800b596:	041b      	lsls	r3, r3, #16
 800b598:	4319      	orrs	r1, r3
 800b59a:	4b1e      	ldr	r3, [pc, #120]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b59c:	789b      	ldrb	r3, [r3, #2]
 800b59e:	021b      	lsls	r3, r3, #8
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	491c      	ldr	r1, [pc, #112]	@ (800b614 <MX_LWIP_Init+0x258>)
 800b5a4:	78c9      	ldrb	r1, [r1, #3]
 800b5a6:	430b      	orrs	r3, r1
 800b5a8:	0e1b      	lsrs	r3, r3, #24
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	4a1c      	ldr	r2, [pc, #112]	@ (800b620 <MX_LWIP_Init+0x264>)
 800b5ae:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b5b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b624 <MX_LWIP_Init+0x268>)
 800b5b2:	9302      	str	r3, [sp, #8]
 800b5b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b628 <MX_LWIP_Init+0x26c>)
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	4b18      	ldr	r3, [pc, #96]	@ (800b620 <MX_LWIP_Init+0x264>)
 800b5be:	4a17      	ldr	r2, [pc, #92]	@ (800b61c <MX_LWIP_Init+0x260>)
 800b5c0:	4915      	ldr	r1, [pc, #84]	@ (800b618 <MX_LWIP_Init+0x25c>)
 800b5c2:	481a      	ldr	r0, [pc, #104]	@ (800b62c <MX_LWIP_Init+0x270>)
 800b5c4:	f005 fbaa 	bl	8010d1c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b5c8:	4818      	ldr	r0, [pc, #96]	@ (800b62c <MX_LWIP_Init+0x270>)
 800b5ca:	f005 fd5d 	bl	8011088 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b5ce:	4817      	ldr	r0, [pc, #92]	@ (800b62c <MX_LWIP_Init+0x270>)
 800b5d0:	f005 fd6a 	bl	80110a8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b5d4:	4916      	ldr	r1, [pc, #88]	@ (800b630 <MX_LWIP_Init+0x274>)
 800b5d6:	4815      	ldr	r0, [pc, #84]	@ (800b62c <MX_LWIP_Init+0x270>)
 800b5d8:	f005 fe68 	bl	80112ac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b5dc:	2224      	movs	r2, #36	@ 0x24
 800b5de:	2100      	movs	r1, #0
 800b5e0:	4814      	ldr	r0, [pc, #80]	@ (800b634 <MX_LWIP_Init+0x278>)
 800b5e2:	f00f fb4c 	bl	801ac7e <memset>
  attributes.name = "EthLink";
 800b5e6:	4b13      	ldr	r3, [pc, #76]	@ (800b634 <MX_LWIP_Init+0x278>)
 800b5e8:	4a13      	ldr	r2, [pc, #76]	@ (800b638 <MX_LWIP_Init+0x27c>)
 800b5ea:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b5ec:	4b11      	ldr	r3, [pc, #68]	@ (800b634 <MX_LWIP_Init+0x278>)
 800b5ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b5f2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b5f4:	4b0f      	ldr	r3, [pc, #60]	@ (800b634 <MX_LWIP_Init+0x278>)
 800b5f6:	2210      	movs	r2, #16
 800b5f8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800b5fa:	4a0e      	ldr	r2, [pc, #56]	@ (800b634 <MX_LWIP_Init+0x278>)
 800b5fc:	490b      	ldr	r1, [pc, #44]	@ (800b62c <MX_LWIP_Init+0x270>)
 800b5fe:	480f      	ldr	r0, [pc, #60]	@ (800b63c <MX_LWIP_Init+0x280>)
 800b600:	f000 fde1 	bl	800c1c6 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b604:	bf00      	nop
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	24005930 	.word	0x24005930
 800b610:	24005934 	.word	0x24005934
 800b614:	24005938 	.word	0x24005938
 800b618:	24005924 	.word	0x24005924
 800b61c:	24005928 	.word	0x24005928
 800b620:	2400592c 	.word	0x2400592c
 800b624:	0800ff55 	.word	0x0800ff55
 800b628:	0800bb29 	.word	0x0800bb29
 800b62c:	240058f0 	.word	0x240058f0
 800b630:	0800b641 	.word	0x0800b641
 800b634:	2400593c 	.word	0x2400593c
 800b638:	0801bab4 	.word	0x0801bab4
 800b63c:	0800be1d 	.word	0x0800be1d

0800b640 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b65c:	4b04      	ldr	r3, [pc, #16]	@ (800b670 <HAL_ETH_RxCpltCallback+0x1c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4618      	mov	r0, r3
 800b662:	f001 f847 	bl	800c6f4 <osSemaphoreRelease>
}
 800b666:	bf00      	nop
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	24005968 	.word	0x24005968

0800b674 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800b67c:	4b04      	ldr	r3, [pc, #16]	@ (800b690 <HAL_ETH_TxCpltCallback+0x1c>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4618      	mov	r0, r3
 800b682:	f001 f837 	bl	800c6f4 <osSemaphoreRelease>
}
 800b686:	bf00      	nop
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	2400596c 	.word	0x2400596c

0800b694 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7f9 fd4e 	bl	800513e <HAL_ETH_GetDMAError>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6a8:	2b80      	cmp	r3, #128	@ 0x80
 800b6aa:	d104      	bne.n	800b6b6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800b6ac:	4b04      	ldr	r3, [pc, #16]	@ (800b6c0 <HAL_ETH_ErrorCallback+0x2c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f001 f81f 	bl	800c6f4 <osSemaphoreRelease>
  }
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	24005968 	.word	0x24005968

0800b6c4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b0aa      	sub	sp, #168	@ 0xa8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800b6de:	f107 0310 	add.w	r3, r7, #16
 800b6e2:	2264      	movs	r2, #100	@ 0x64
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f00f fac9 	bl	801ac7e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b6ec:	4b89      	ldr	r3, [pc, #548]	@ (800b914 <low_level_init+0x250>)
 800b6ee:	4a8a      	ldr	r2, [pc, #552]	@ (800b918 <low_level_init+0x254>)
 800b6f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b6f6:	2380      	movs	r3, #128	@ 0x80
 800b6f8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b6fa:	23e1      	movs	r3, #225	@ 0xe1
 800b6fc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b6fe:	2300      	movs	r3, #0
 800b700:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b702:	2300      	movs	r3, #0
 800b704:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b706:	2300      	movs	r3, #0
 800b708:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b70a:	4a82      	ldr	r2, [pc, #520]	@ (800b914 <low_level_init+0x250>)
 800b70c:	f107 0308 	add.w	r3, r7, #8
 800b710:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b712:	4b80      	ldr	r3, [pc, #512]	@ (800b914 <low_level_init+0x250>)
 800b714:	2201      	movs	r2, #1
 800b716:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b718:	4b7e      	ldr	r3, [pc, #504]	@ (800b914 <low_level_init+0x250>)
 800b71a:	4a80      	ldr	r2, [pc, #512]	@ (800b91c <low_level_init+0x258>)
 800b71c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b71e:	4b7d      	ldr	r3, [pc, #500]	@ (800b914 <low_level_init+0x250>)
 800b720:	4a7f      	ldr	r2, [pc, #508]	@ (800b920 <low_level_init+0x25c>)
 800b722:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b724:	4b7b      	ldr	r3, [pc, #492]	@ (800b914 <low_level_init+0x250>)
 800b726:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b72a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b72c:	4879      	ldr	r0, [pc, #484]	@ (800b914 <low_level_init+0x250>)
 800b72e:	f7f8 fccb 	bl	80040c8 <HAL_ETH_Init>
 800b732:	4603      	mov	r3, r0
 800b734:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b738:	2238      	movs	r2, #56	@ 0x38
 800b73a:	2100      	movs	r1, #0
 800b73c:	4879      	ldr	r0, [pc, #484]	@ (800b924 <low_level_init+0x260>)
 800b73e:	f00f fa9e 	bl	801ac7e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b742:	4b78      	ldr	r3, [pc, #480]	@ (800b924 <low_level_init+0x260>)
 800b744:	2221      	movs	r2, #33	@ 0x21
 800b746:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b748:	4b76      	ldr	r3, [pc, #472]	@ (800b924 <low_level_init+0x260>)
 800b74a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800b74e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b750:	4b74      	ldr	r3, [pc, #464]	@ (800b924 <low_level_init+0x260>)
 800b752:	2200      	movs	r2, #0
 800b754:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b756:	4874      	ldr	r0, [pc, #464]	@ (800b928 <low_level_init+0x264>)
 800b758:	f005 f99a 	bl	8010a90 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2206      	movs	r2, #6
 800b760:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b764:	4b6b      	ldr	r3, [pc, #428]	@ (800b914 <low_level_init+0x250>)
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	781a      	ldrb	r2, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b770:	4b68      	ldr	r3, [pc, #416]	@ (800b914 <low_level_init+0x250>)
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	785a      	ldrb	r2, [r3, #1]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b77c:	4b65      	ldr	r3, [pc, #404]	@ (800b914 <low_level_init+0x250>)
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	789a      	ldrb	r2, [r3, #2]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b788:	4b62      	ldr	r3, [pc, #392]	@ (800b914 <low_level_init+0x250>)
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	78da      	ldrb	r2, [r3, #3]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b794:	4b5f      	ldr	r3, [pc, #380]	@ (800b914 <low_level_init+0x250>)
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	791a      	ldrb	r2, [r3, #4]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b7a0:	4b5c      	ldr	r3, [pc, #368]	@ (800b914 <low_level_init+0x250>)
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	795a      	ldrb	r2, [r3, #5]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b7b2:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7ba:	f043 030a 	orr.w	r3, r3, #10
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	2001      	movs	r0, #1
 800b7cc:	f000 feb6 	bl	800c53c <osSemaphoreNew>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	4a56      	ldr	r2, [pc, #344]	@ (800b92c <low_level_init+0x268>)
 800b7d4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2100      	movs	r1, #0
 800b7da:	2001      	movs	r0, #1
 800b7dc:	f000 feae 	bl	800c53c <osSemaphoreNew>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	4a53      	ldr	r2, [pc, #332]	@ (800b930 <low_level_init+0x26c>)
 800b7e4:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b7e6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b7ea:	2224      	movs	r2, #36	@ 0x24
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f00f fa45 	bl	801ac7e <memset>
  attributes.name = "EthIf";
 800b7f4:	4b4f      	ldr	r3, [pc, #316]	@ (800b934 <low_level_init+0x270>)
 800b7f6:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b7f8:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800b7fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800b800:	2330      	movs	r3, #48	@ 0x30
 800b802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800b806:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b80a:	461a      	mov	r2, r3
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	484a      	ldr	r0, [pc, #296]	@ (800b938 <low_level_init+0x274>)
 800b810:	f000 fcd9 	bl	800c1c6 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b814:	4949      	ldr	r1, [pc, #292]	@ (800b93c <low_level_init+0x278>)
 800b816:	484a      	ldr	r0, [pc, #296]	@ (800b940 <low_level_init+0x27c>)
 800b818:	f7f6 fa5f 	bl	8001cda <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800b81c:	4848      	ldr	r0, [pc, #288]	@ (800b940 <low_level_init+0x27c>)
 800b81e:	f7f6 fa8e 	bl	8001d3e <LAN8742_Init>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d006      	beq.n	800b836 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f005 fd0f 	bl	801124c <netif_set_link_down>
    netif_set_down(netif);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f005 fca6 	bl	8011180 <netif_set_down>
 800b834:	e06b      	b.n	800b90e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800b836:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d165      	bne.n	800b90a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b83e:	4840      	ldr	r0, [pc, #256]	@ (800b940 <low_level_init+0x27c>)
 800b840:	f7f6 faca 	bl	8001dd8 <LAN8742_GetLinkState>
 800b844:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	dc06      	bgt.n	800b85e <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f005 fcfb 	bl	801124c <netif_set_link_down>
      netif_set_down(netif);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f005 fc92 	bl	8011180 <netif_set_down>
 800b85c:	e057      	b.n	800b90e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800b85e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b862:	3b02      	subs	r3, #2
 800b864:	2b03      	cmp	r3, #3
 800b866:	d82b      	bhi.n	800b8c0 <low_level_init+0x1fc>
 800b868:	a201      	add	r2, pc, #4	@ (adr r2, 800b870 <low_level_init+0x1ac>)
 800b86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86e:	bf00      	nop
 800b870:	0800b881 	.word	0x0800b881
 800b874:	0800b893 	.word	0x0800b893
 800b878:	0800b8a3 	.word	0x0800b8a3
 800b87c:	0800b8b3 	.word	0x0800b8b3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b880:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b884:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b888:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b88c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b890:	e01f      	b.n	800b8d2 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b892:	2300      	movs	r3, #0
 800b894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b898:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b89c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b8a0:	e017      	b.n	800b8d2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b8a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b8b0:	e00f      	b.n	800b8d2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b8be:	e008      	b.n	800b8d2 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800b8c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b8c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b8cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b8d0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b8d2:	f107 0310 	add.w	r3, r7, #16
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	480e      	ldr	r0, [pc, #56]	@ (800b914 <low_level_init+0x250>)
 800b8da:	f7f9 f9e5 	bl	8004ca8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b8de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800b8e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b8e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b8ea:	f107 0310 	add.w	r3, r7, #16
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	4808      	ldr	r0, [pc, #32]	@ (800b914 <low_level_init+0x250>)
 800b8f2:	f7f9 fbad 	bl	8005050 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800b8f6:	4807      	ldr	r0, [pc, #28]	@ (800b914 <low_level_init+0x250>)
 800b8f8:	f7f8 fd46 	bl	8004388 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f005 fbd3 	bl	80110a8 <netif_set_up>
    netif_set_link_up(netif);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f005 fc6e 	bl	80111e4 <netif_set_link_up>
 800b908:	e001      	b.n	800b90e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800b90a:	f7f5 fd4d 	bl	80013a8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b90e:	37a8      	adds	r7, #168	@ 0xa8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	24005970 	.word	0x24005970
 800b918:	40028000 	.word	0x40028000
 800b91c:	30000100 	.word	0x30000100
 800b920:	30000000 	.word	0x30000000
 800b924:	24005a20 	.word	0x24005a20
 800b928:	0801e6e4 	.word	0x0801e6e4
 800b92c:	24005968 	.word	0x24005968
 800b930:	2400596c 	.word	0x2400596c
 800b934:	0801babc 	.word	0x0801babc
 800b938:	0800bad5 	.word	0x0800bad5
 800b93c:	240049d0 	.word	0x240049d0
 800b940:	24005a58 	.word	0x24005a58

0800b944 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b092      	sub	sp, #72	@ 0x48
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b952:	2300      	movs	r3, #0
 800b954:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b95c:	f107 030c 	add.w	r3, r7, #12
 800b960:	2230      	movs	r2, #48	@ 0x30
 800b962:	2100      	movs	r1, #0
 800b964:	4618      	mov	r0, r3
 800b966:	f00f f98a 	bl	801ac7e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b96a:	f107 030c 	add.w	r3, r7, #12
 800b96e:	2230      	movs	r2, #48	@ 0x30
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f00f f983 	bl	801ac7e <memset>

  for(q = p; q != NULL; q = q->next)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b97c:	e045      	b.n	800ba0a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b97e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b980:	2b03      	cmp	r3, #3
 800b982:	d902      	bls.n	800b98a <low_level_output+0x46>
      return ERR_IF;
 800b984:	f06f 030b 	mvn.w	r3, #11
 800b988:	e07f      	b.n	800ba8a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800b98a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b98c:	6859      	ldr	r1, [r3, #4]
 800b98e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b990:	4613      	mov	r3, r2
 800b992:	005b      	lsls	r3, r3, #1
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	3348      	adds	r3, #72	@ 0x48
 800b99a:	443b      	add	r3, r7
 800b99c:	3b3c      	subs	r3, #60	@ 0x3c
 800b99e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b9a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9a2:	895b      	ldrh	r3, [r3, #10]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	005b      	lsls	r3, r3, #1
 800b9ac:	4413      	add	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	3348      	adds	r3, #72	@ 0x48
 800b9b2:	443b      	add	r3, r7
 800b9b4:	3b38      	subs	r3, #56	@ 0x38
 800b9b6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b9b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d011      	beq.n	800b9e2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b9be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9c0:	1e5a      	subs	r2, r3, #1
 800b9c2:	f107 000c 	add.w	r0, r7, #12
 800b9c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	440b      	add	r3, r1
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	18c1      	adds	r1, r0, r3
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	3348      	adds	r3, #72	@ 0x48
 800b9dc:	443b      	add	r3, r7
 800b9de:	3b34      	subs	r3, #52	@ 0x34
 800b9e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d109      	bne.n	800b9fe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b9ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4413      	add	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	3348      	adds	r3, #72	@ 0x48
 800b9f6:	443b      	add	r3, r7
 800b9f8:	3b34      	subs	r3, #52	@ 0x34
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b9fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba00:	3301      	adds	r3, #1
 800ba02:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800ba04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1b6      	bne.n	800b97e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	891b      	ldrh	r3, [r3, #8]
 800ba14:	461a      	mov	r2, r3
 800ba16:	4b1f      	ldr	r3, [pc, #124]	@ (800ba94 <low_level_output+0x150>)
 800ba18:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ba1a:	4a1e      	ldr	r2, [pc, #120]	@ (800ba94 <low_level_output+0x150>)
 800ba1c:	f107 030c 	add.w	r3, r7, #12
 800ba20:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ba22:	4a1c      	ldr	r2, [pc, #112]	@ (800ba94 <low_level_output+0x150>)
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800ba28:	6838      	ldr	r0, [r7, #0]
 800ba2a:	f006 f897 	bl	8011b5c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800ba2e:	4919      	ldr	r1, [pc, #100]	@ (800ba94 <low_level_output+0x150>)
 800ba30:	4819      	ldr	r0, [pc, #100]	@ (800ba98 <low_level_output+0x154>)
 800ba32:	f7f8 fd95 	bl	8004560 <HAL_ETH_Transmit_IT>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d103      	bne.n	800ba44 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ba42:	e01b      	b.n	800ba7c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800ba44:	4814      	ldr	r0, [pc, #80]	@ (800ba98 <low_level_output+0x154>)
 800ba46:	f7f9 fb6d 	bl	8005124 <HAL_ETH_GetError>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00d      	beq.n	800ba70 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800ba54:	4b11      	ldr	r3, [pc, #68]	@ (800ba9c <low_level_output+0x158>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 fdf7 	bl	800c650 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800ba62:	480d      	ldr	r0, [pc, #52]	@ (800ba98 <low_level_output+0x154>)
 800ba64:	f7f8 ff03 	bl	800486e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800ba68:	23fe      	movs	r3, #254	@ 0xfe
 800ba6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ba6e:	e005      	b.n	800ba7c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800ba70:	6838      	ldr	r0, [r7, #0]
 800ba72:	f005 ffcd 	bl	8011a10 <pbuf_free>
        errval =  ERR_IF;
 800ba76:	23f4      	movs	r3, #244	@ 0xf4
 800ba78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800ba7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ba80:	f113 0f02 	cmn.w	r3, #2
 800ba84:	d0d3      	beq.n	800ba2e <low_level_output+0xea>

  return errval;
 800ba86:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3748      	adds	r7, #72	@ 0x48
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	24005a20 	.word	0x24005a20
 800ba98:	24005970 	.word	0x24005970
 800ba9c:	2400596c 	.word	0x2400596c

0800baa0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800baa8:	2300      	movs	r3, #0
 800baaa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800baac:	4b07      	ldr	r3, [pc, #28]	@ (800bacc <low_level_input+0x2c>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d105      	bne.n	800bac0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bab4:	f107 030c 	add.w	r3, r7, #12
 800bab8:	4619      	mov	r1, r3
 800baba:	4805      	ldr	r0, [pc, #20]	@ (800bad0 <low_level_input+0x30>)
 800babc:	f7f8 fda1 	bl	8004602 <HAL_ETH_ReadData>
  }

  return p;
 800bac0:	68fb      	ldr	r3, [r7, #12]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	24005964 	.word	0x24005964
 800bad0:	24005970 	.word	0x24005970

0800bad4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800badc:	2300      	movs	r3, #0
 800bade:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bae4:	4b0f      	ldr	r3, [pc, #60]	@ (800bb24 <ethernetif_input+0x50>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f04f 31ff 	mov.w	r1, #4294967295
 800baec:	4618      	mov	r0, r3
 800baee:	f000 fdaf 	bl	800c650 <osSemaphoreAcquire>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1f5      	bne.n	800bae4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800baf8:	68b8      	ldr	r0, [r7, #8]
 800bafa:	f7ff ffd1 	bl	800baa0 <low_level_input>
 800bafe:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00a      	beq.n	800bb1c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	68b9      	ldr	r1, [r7, #8]
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	4798      	blx	r3
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f005 ff7a 	bl	8011a10 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1ea      	bne.n	800baf8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bb22:	e7df      	b.n	800bae4 <ethernetif_input+0x10>
 800bb24:	24005968 	.word	0x24005968

0800bb28 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <ethernetif_init+0x1c>
 800bb36:	4b0e      	ldr	r3, [pc, #56]	@ (800bb70 <ethernetif_init+0x48>)
 800bb38:	f44f 7205 	mov.w	r2, #532	@ 0x214
 800bb3c:	490d      	ldr	r1, [pc, #52]	@ (800bb74 <ethernetif_init+0x4c>)
 800bb3e:	480e      	ldr	r0, [pc, #56]	@ (800bb78 <ethernetif_init+0x50>)
 800bb40:	f00f f838 	bl	801abb4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2273      	movs	r2, #115	@ 0x73
 800bb48:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2274      	movs	r2, #116	@ 0x74
 800bb50:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a09      	ldr	r2, [pc, #36]	@ (800bb7c <ethernetif_init+0x54>)
 800bb58:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a08      	ldr	r2, [pc, #32]	@ (800bb80 <ethernetif_init+0x58>)
 800bb5e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff fdaf 	bl	800b6c4 <low_level_init>

  return ERR_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	0801bac4 	.word	0x0801bac4
 800bb74:	0801bae0 	.word	0x0801bae0
 800bb78:	0801baf0 	.word	0x0801baf0
 800bb7c:	08018959 	.word	0x08018959
 800bb80:	0800b945 	.word	0x0800b945

0800bb84 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bb90:	68f9      	ldr	r1, [r7, #12]
 800bb92:	4809      	ldr	r0, [pc, #36]	@ (800bbb8 <pbuf_free_custom+0x34>)
 800bb94:	f005 f86c 	bl	8010c70 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800bb98:	4b08      	ldr	r3, [pc, #32]	@ (800bbbc <pbuf_free_custom+0x38>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d107      	bne.n	800bbb0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800bba0:	4b06      	ldr	r3, [pc, #24]	@ (800bbbc <pbuf_free_custom+0x38>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800bba6:	4b06      	ldr	r3, [pc, #24]	@ (800bbc0 <pbuf_free_custom+0x3c>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fda2 	bl	800c6f4 <osSemaphoreRelease>
  }
}
 800bbb0:	bf00      	nop
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	0801e6e4 	.word	0x0801e6e4
 800bbbc:	24005964 	.word	0x24005964
 800bbc0:	24005968 	.word	0x24005968

0800bbc4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bbc8:	f7f6 f9de 	bl	8001f88 <HAL_GetTick>
 800bbcc:	4603      	mov	r3, r0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08e      	sub	sp, #56	@ 0x38
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	605a      	str	r2, [r3, #4]
 800bbe6:	609a      	str	r2, [r3, #8]
 800bbe8:	60da      	str	r2, [r3, #12]
 800bbea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a5d      	ldr	r2, [pc, #372]	@ (800bd68 <HAL_ETH_MspInit+0x194>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	f040 80b3 	bne.w	800bd5e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800bbf8:	4b5c      	ldr	r3, [pc, #368]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bbfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bbfe:	4a5b      	ldr	r2, [pc, #364]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc04:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bc08:	4b58      	ldr	r3, [pc, #352]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc12:	623b      	str	r3, [r7, #32]
 800bc14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800bc16:	4b55      	ldr	r3, [pc, #340]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc1c:	4a53      	ldr	r2, [pc, #332]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bc26:	4b51      	ldr	r3, [pc, #324]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc30:	61fb      	str	r3, [r7, #28]
 800bc32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800bc34:	4b4d      	ldr	r3, [pc, #308]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc3a:	4a4c      	ldr	r2, [pc, #304]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bc44:	4b49      	ldr	r3, [pc, #292]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc4e:	61bb      	str	r3, [r7, #24]
 800bc50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bc52:	4b46      	ldr	r3, [pc, #280]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc58:	4a44      	ldr	r2, [pc, #272]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc5a:	f043 0304 	orr.w	r3, r3, #4
 800bc5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bc62:	4b42      	ldr	r3, [pc, #264]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc68:	f003 0304 	and.w	r3, r3, #4
 800bc6c:	617b      	str	r3, [r7, #20]
 800bc6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc70:	4b3e      	ldr	r3, [pc, #248]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc76:	4a3d      	ldr	r2, [pc, #244]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc78:	f043 0301 	orr.w	r3, r3, #1
 800bc7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bc80:	4b3a      	ldr	r3, [pc, #232]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	613b      	str	r3, [r7, #16]
 800bc8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc8e:	4b37      	ldr	r3, [pc, #220]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc94:	4a35      	ldr	r2, [pc, #212]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bc96:	f043 0302 	orr.w	r3, r3, #2
 800bc9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bc9e:	4b33      	ldr	r3, [pc, #204]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bca4:	f003 0302 	and.w	r3, r3, #2
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bcac:	4b2f      	ldr	r3, [pc, #188]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bcae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcb2:	4a2e      	ldr	r2, [pc, #184]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bcb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bcbc:	4b2b      	ldr	r3, [pc, #172]	@ (800bd6c <HAL_ETH_MspInit+0x198>)
 800bcbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcc6:	60bb      	str	r3, [r7, #8]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800bcca:	2332      	movs	r3, #50	@ 0x32
 800bccc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcce:	2302      	movs	r3, #2
 800bcd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bcda:	230b      	movs	r3, #11
 800bcdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bcde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bce2:	4619      	mov	r1, r3
 800bce4:	4822      	ldr	r0, [pc, #136]	@ (800bd70 <HAL_ETH_MspInit+0x19c>)
 800bce6:	f7f9 ffb9 	bl	8005c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bcea:	2386      	movs	r3, #134	@ 0x86
 800bcec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcee:	2302      	movs	r3, #2
 800bcf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bcfa:	230b      	movs	r3, #11
 800bcfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bcfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd02:	4619      	mov	r1, r3
 800bd04:	481b      	ldr	r0, [pc, #108]	@ (800bd74 <HAL_ETH_MspInit+0x1a0>)
 800bd06:	f7f9 ffa9 	bl	8005c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800bd0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd10:	2302      	movs	r3, #2
 800bd12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd14:	2300      	movs	r3, #0
 800bd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd1c:	230b      	movs	r3, #11
 800bd1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd24:	4619      	mov	r1, r3
 800bd26:	4814      	ldr	r0, [pc, #80]	@ (800bd78 <HAL_ETH_MspInit+0x1a4>)
 800bd28:	f7f9 ff98 	bl	8005c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800bd2c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800bd30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd32:	2302      	movs	r3, #2
 800bd34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd3e:	230b      	movs	r3, #11
 800bd40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bd42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd46:	4619      	mov	r1, r3
 800bd48:	480c      	ldr	r0, [pc, #48]	@ (800bd7c <HAL_ETH_MspInit+0x1a8>)
 800bd4a:	f7f9 ff87 	bl	8005c5c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2105      	movs	r1, #5
 800bd52:	203d      	movs	r0, #61	@ 0x3d
 800bd54:	f7f6 fa14 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bd58:	203d      	movs	r0, #61	@ 0x3d
 800bd5a:	f7f6 fa2b 	bl	80021b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bd5e:	bf00      	nop
 800bd60:	3738      	adds	r7, #56	@ 0x38
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	40028000 	.word	0x40028000
 800bd6c:	58024400 	.word	0x58024400
 800bd70:	58020800 	.word	0x58020800
 800bd74:	58020000 	.word	0x58020000
 800bd78:	58020400 	.word	0x58020400
 800bd7c:	58021800 	.word	0x58021800

0800bd80 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800bd84:	4802      	ldr	r0, [pc, #8]	@ (800bd90 <ETH_PHY_IO_Init+0x10>)
 800bd86:	f7f9 f97d 	bl	8005084 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	24005970 	.word	0x24005970

0800bd94 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800bd94:	b480      	push	{r7}
 800bd96:	af00      	add	r7, sp, #0
  return 0;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	68f9      	ldr	r1, [r7, #12]
 800bdb6:	4807      	ldr	r0, [pc, #28]	@ (800bdd4 <ETH_PHY_IO_ReadReg+0x30>)
 800bdb8:	f7f8 fece 	bl	8004b58 <HAL_ETH_ReadPHYRegister>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800bdc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc6:	e000      	b.n	800bdca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	24005970 	.word	0x24005970

0800bdd8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	68f9      	ldr	r1, [r7, #12]
 800bdea:	4807      	ldr	r0, [pc, #28]	@ (800be08 <ETH_PHY_IO_WriteReg+0x30>)
 800bdec:	f7f8 ff08 	bl	8004c00 <HAL_ETH_WritePHYRegister>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d002      	beq.n	800bdfc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800bdf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfa:	e000      	b.n	800bdfe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	24005970 	.word	0x24005970

0800be0c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800be10:	f7f6 f8ba 	bl	8001f88 <HAL_GetTick>
 800be14:	4603      	mov	r3, r0
}
 800be16:	4618      	mov	r0, r3
 800be18:	bd80      	pop	{r7, pc}
	...

0800be1c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b0a0      	sub	sp, #128	@ 0x80
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800be24:	f107 0308 	add.w	r3, r7, #8
 800be28:	2264      	movs	r2, #100	@ 0x64
 800be2a:	2100      	movs	r1, #0
 800be2c:	4618      	mov	r0, r3
 800be2e:	f00e ff26 	bl	801ac7e <memset>
  int32_t PHYLinkState = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800be36:	2300      	movs	r3, #0
 800be38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800be3a:	2300      	movs	r3, #0
 800be3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be3e:	2300      	movs	r3, #0
 800be40:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800be46:	483a      	ldr	r0, [pc, #232]	@ (800bf30 <ethernet_link_thread+0x114>)
 800be48:	f7f5 ffc6 	bl	8001dd8 <LAN8742_GetLinkState>
 800be4c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800be4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be54:	089b      	lsrs	r3, r3, #2
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00c      	beq.n	800be7a <ethernet_link_thread+0x5e>
 800be60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be62:	2b01      	cmp	r3, #1
 800be64:	dc09      	bgt.n	800be7a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800be66:	4833      	ldr	r0, [pc, #204]	@ (800bf34 <ethernet_link_thread+0x118>)
 800be68:	f7f8 fb02 	bl	8004470 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800be6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800be6e:	f005 f987 	bl	8011180 <netif_set_down>
    netif_set_link_down(netif);
 800be72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800be74:	f005 f9ea 	bl	801124c <netif_set_link_down>
 800be78:	e055      	b.n	800bf26 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800be7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be80:	f003 0304 	and.w	r3, r3, #4
 800be84:	2b00      	cmp	r3, #0
 800be86:	d14e      	bne.n	800bf26 <ethernet_link_thread+0x10a>
 800be88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	dd4b      	ble.n	800bf26 <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 800be8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be90:	3b02      	subs	r3, #2
 800be92:	2b03      	cmp	r3, #3
 800be94:	d82a      	bhi.n	800beec <ethernet_link_thread+0xd0>
 800be96:	a201      	add	r2, pc, #4	@ (adr r2, 800be9c <ethernet_link_thread+0x80>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800bead 	.word	0x0800bead
 800bea0:	0800bebf 	.word	0x0800bebf
 800bea4:	0800becf 	.word	0x0800becf
 800bea8:	0800bedf 	.word	0x0800bedf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800beac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800beb0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800beb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800beb6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800beb8:	2301      	movs	r3, #1
 800beba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bebc:	e017      	b.n	800beee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800bebe:	2300      	movs	r3, #0
 800bec0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bec2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bec6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bec8:	2301      	movs	r3, #1
 800beca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800becc:	e00f      	b.n	800beee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800bece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bed2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bed4:	2300      	movs	r3, #0
 800bed6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bed8:	2301      	movs	r3, #1
 800beda:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bedc:	e007      	b.n	800beee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800bede:	2300      	movs	r3, #0
 800bee0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bee2:	2300      	movs	r3, #0
 800bee4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bee6:	2301      	movs	r3, #1
 800bee8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800beea:	e000      	b.n	800beee <ethernet_link_thread+0xd2>
    default:
      break;
 800beec:	bf00      	nop
    }

    if(linkchanged)
 800beee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d018      	beq.n	800bf26 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bef4:	f107 0308 	add.w	r3, r7, #8
 800bef8:	4619      	mov	r1, r3
 800befa:	480e      	ldr	r0, [pc, #56]	@ (800bf34 <ethernet_link_thread+0x118>)
 800befc:	f7f8 fed4 	bl	8004ca8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800bf00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf02:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800bf04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf06:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bf08:	f107 0308 	add.w	r3, r7, #8
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4809      	ldr	r0, [pc, #36]	@ (800bf34 <ethernet_link_thread+0x118>)
 800bf10:	f7f9 f89e 	bl	8005050 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800bf14:	4807      	ldr	r0, [pc, #28]	@ (800bf34 <ethernet_link_thread+0x118>)
 800bf16:	f7f8 fa37 	bl	8004388 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800bf1a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf1c:	f005 f8c4 	bl	80110a8 <netif_set_up>
      netif_set_link_up(netif);
 800bf20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf22:	f005 f95f 	bl	80111e4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800bf26:	2064      	movs	r0, #100	@ 0x64
 800bf28:	f000 f9df 	bl	800c2ea <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bf2c:	e78b      	b.n	800be46 <ethernet_link_thread+0x2a>
 800bf2e:	bf00      	nop
 800bf30:	24005a58 	.word	0x24005a58
 800bf34:	24005970 	.word	0x24005970

0800bf38 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af02      	add	r7, sp, #8
 800bf3e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bf40:	4812      	ldr	r0, [pc, #72]	@ (800bf8c <HAL_ETH_RxAllocateCallback+0x54>)
 800bf42:	f004 fe21 	bl	8010b88 <memp_malloc_pool>
 800bf46:	60f8      	str	r0, [r7, #12]
  if (p)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d014      	beq.n	800bf78 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f103 0220 	add.w	r2, r3, #32
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	4a0d      	ldr	r2, [pc, #52]	@ (800bf90 <HAL_ETH_RxAllocateCallback+0x58>)
 800bf5c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bf66:	9201      	str	r2, [sp, #4]
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2241      	movs	r2, #65	@ 0x41
 800bf6e:	2100      	movs	r1, #0
 800bf70:	2000      	movs	r0, #0
 800bf72:	f005 fb93 	bl	801169c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bf76:	e005      	b.n	800bf84 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bf78:	4b06      	ldr	r3, [pc, #24]	@ (800bf94 <HAL_ETH_RxAllocateCallback+0x5c>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	601a      	str	r2, [r3, #0]
}
 800bf84:	bf00      	nop
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	0801e6e4 	.word	0x0801e6e4
 800bf90:	0800bb85 	.word	0x0800bb85
 800bf94:	24005964 	.word	0x24005964

0800bf98 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b08d      	sub	sp, #52	@ 0x34
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	3b20      	subs	r3, #32
 800bfb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800bfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bfbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc6:	887a      	ldrh	r2, [r7, #2]
 800bfc8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800bfca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d103      	bne.n	800bfda <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	e003      	b.n	800bfe2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfe0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfe6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfee:	e009      	b.n	800c004 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff2:	891a      	ldrh	r2, [r3, #8]
 800bff4:	887b      	ldrh	r3, [r7, #2]
 800bff6:	4413      	add	r3, r2
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1f2      	bne.n	800bff0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c00a:	887b      	ldrh	r3, [r7, #2]
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	623a      	str	r2, [r7, #32]
 800c010:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	2b00      	cmp	r3, #0
 800c016:	dd1d      	ble.n	800c054 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	f003 021f 	and.w	r2, r3, #31
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	4413      	add	r3, r2
 800c022:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c028:	f3bf 8f4f 	dsb	sy
}
 800c02c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c02e:	4a0d      	ldr	r2, [pc, #52]	@ (800c064 <HAL_ETH_RxLinkCallback+0xcc>)
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	3320      	adds	r3, #32
 800c03a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	3b20      	subs	r3, #32
 800c040:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2b00      	cmp	r3, #0
 800c046:	dcf2      	bgt.n	800c02e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800c048:	f3bf 8f4f 	dsb	sy
}
 800c04c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c04e:	f3bf 8f6f 	isb	sy
}
 800c052:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800c054:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c056:	bf00      	nop
 800c058:	3734      	adds	r7, #52	@ 0x34
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	e000ed00 	.word	0xe000ed00

0800c068 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f005 fccd 	bl	8011a10 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
	...

0800c080 <__NVIC_SetPriority>:
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	4603      	mov	r3, r0
 800c088:	6039      	str	r1, [r7, #0]
 800c08a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c08c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c090:	2b00      	cmp	r3, #0
 800c092:	db0a      	blt.n	800c0aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	b2da      	uxtb	r2, r3
 800c098:	490c      	ldr	r1, [pc, #48]	@ (800c0cc <__NVIC_SetPriority+0x4c>)
 800c09a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c09e:	0112      	lsls	r2, r2, #4
 800c0a0:	b2d2      	uxtb	r2, r2
 800c0a2:	440b      	add	r3, r1
 800c0a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c0a8:	e00a      	b.n	800c0c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	4908      	ldr	r1, [pc, #32]	@ (800c0d0 <__NVIC_SetPriority+0x50>)
 800c0b0:	88fb      	ldrh	r3, [r7, #6]
 800c0b2:	f003 030f 	and.w	r3, r3, #15
 800c0b6:	3b04      	subs	r3, #4
 800c0b8:	0112      	lsls	r2, r2, #4
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	440b      	add	r3, r1
 800c0be:	761a      	strb	r2, [r3, #24]
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	e000e100 	.word	0xe000e100
 800c0d0:	e000ed00 	.word	0xe000ed00

0800c0d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c0d8:	4b05      	ldr	r3, [pc, #20]	@ (800c0f0 <SysTick_Handler+0x1c>)
 800c0da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c0dc:	f002 fcc6 	bl	800ea6c <xTaskGetSchedulerState>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d001      	beq.n	800c0ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c0e6:	f003 fbbf 	bl	800f868 <xPortSysTickHandler>
  }
}
 800c0ea:	bf00      	nop
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	e000e010 	.word	0xe000e010

0800c0f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	f06f 0004 	mvn.w	r0, #4
 800c0fe:	f7ff ffbf 	bl	800c080 <__NVIC_SetPriority>
#endif
}
 800c102:	bf00      	nop
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c10e:	f3ef 8305 	mrs	r3, IPSR
 800c112:	603b      	str	r3, [r7, #0]
  return(result);
 800c114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c116:	2b00      	cmp	r3, #0
 800c118:	d003      	beq.n	800c122 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c11a:	f06f 0305 	mvn.w	r3, #5
 800c11e:	607b      	str	r3, [r7, #4]
 800c120:	e00c      	b.n	800c13c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c122:	4b0a      	ldr	r3, [pc, #40]	@ (800c14c <osKernelInitialize+0x44>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d105      	bne.n	800c136 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c12a:	4b08      	ldr	r3, [pc, #32]	@ (800c14c <osKernelInitialize+0x44>)
 800c12c:	2201      	movs	r2, #1
 800c12e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c130:	2300      	movs	r3, #0
 800c132:	607b      	str	r3, [r7, #4]
 800c134:	e002      	b.n	800c13c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c136:	f04f 33ff 	mov.w	r3, #4294967295
 800c13a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c13c:	687b      	ldr	r3, [r7, #4]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	24005a78 	.word	0x24005a78

0800c150 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c156:	f3ef 8305 	mrs	r3, IPSR
 800c15a:	603b      	str	r3, [r7, #0]
  return(result);
 800c15c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c162:	f06f 0305 	mvn.w	r3, #5
 800c166:	607b      	str	r3, [r7, #4]
 800c168:	e010      	b.n	800c18c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c16a:	4b0b      	ldr	r3, [pc, #44]	@ (800c198 <osKernelStart+0x48>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d109      	bne.n	800c186 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c172:	f7ff ffbf 	bl	800c0f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c176:	4b08      	ldr	r3, [pc, #32]	@ (800c198 <osKernelStart+0x48>)
 800c178:	2202      	movs	r2, #2
 800c17a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c17c:	f001 fff0 	bl	800e160 <vTaskStartScheduler>
      stat = osOK;
 800c180:	2300      	movs	r3, #0
 800c182:	607b      	str	r3, [r7, #4]
 800c184:	e002      	b.n	800c18c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c186:	f04f 33ff 	mov.w	r3, #4294967295
 800c18a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c18c:	687b      	ldr	r3, [r7, #4]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	24005a78 	.word	0x24005a78

0800c19c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a2:	f3ef 8305 	mrs	r3, IPSR
 800c1a6:	603b      	str	r3, [r7, #0]
  return(result);
 800c1a8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c1ae:	f002 f903 	bl	800e3b8 <xTaskGetTickCountFromISR>
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	e002      	b.n	800c1bc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c1b6:	f002 f8ef 	bl	800e398 <xTaskGetTickCount>
 800c1ba:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c1bc:	687b      	ldr	r3, [r7, #4]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b08e      	sub	sp, #56	@ 0x38
 800c1ca:	af04      	add	r7, sp, #16
 800c1cc:	60f8      	str	r0, [r7, #12]
 800c1ce:	60b9      	str	r1, [r7, #8]
 800c1d0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1d6:	f3ef 8305 	mrs	r3, IPSR
 800c1da:	617b      	str	r3, [r7, #20]
  return(result);
 800c1dc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d17e      	bne.n	800c2e0 <osThreadNew+0x11a>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d07b      	beq.n	800c2e0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c1e8:	2380      	movs	r3, #128	@ 0x80
 800c1ea:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c1ec:	2318      	movs	r3, #24
 800c1ee:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d045      	beq.n	800c28c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <osThreadNew+0x48>
        name = attr->name;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	699b      	ldr	r3, [r3, #24]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d008      	beq.n	800c234 <osThreadNew+0x6e>
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	2b38      	cmp	r3, #56	@ 0x38
 800c226:	d805      	bhi.n	800c234 <osThreadNew+0x6e>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	f003 0301 	and.w	r3, r3, #1
 800c230:	2b00      	cmp	r3, #0
 800c232:	d001      	beq.n	800c238 <osThreadNew+0x72>
        return (NULL);
 800c234:	2300      	movs	r3, #0
 800c236:	e054      	b.n	800c2e2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	695b      	ldr	r3, [r3, #20]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	089b      	lsrs	r3, r3, #2
 800c246:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00e      	beq.n	800c26e <osThreadNew+0xa8>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	2ba7      	cmp	r3, #167	@ 0xa7
 800c256:	d90a      	bls.n	800c26e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d006      	beq.n	800c26e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <osThreadNew+0xa8>
        mem = 1;
 800c268:	2301      	movs	r3, #1
 800c26a:	61bb      	str	r3, [r7, #24]
 800c26c:	e010      	b.n	800c290 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10c      	bne.n	800c290 <osThreadNew+0xca>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d108      	bne.n	800c290 <osThreadNew+0xca>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d104      	bne.n	800c290 <osThreadNew+0xca>
          mem = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	61bb      	str	r3, [r7, #24]
 800c28a:	e001      	b.n	800c290 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d110      	bne.n	800c2b8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c29e:	9202      	str	r2, [sp, #8]
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	6a3a      	ldr	r2, [r7, #32]
 800c2aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f001 fd63 	bl	800dd78 <xTaskCreateStatic>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	613b      	str	r3, [r7, #16]
 800c2b6:	e013      	b.n	800c2e0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d110      	bne.n	800c2e0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	f107 0310 	add.w	r3, r7, #16
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f001 fdb1 	bl	800de38 <xTaskCreate>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d001      	beq.n	800c2e0 <osThreadNew+0x11a>
            hTask = NULL;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c2e0:	693b      	ldr	r3, [r7, #16]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3728      	adds	r7, #40	@ 0x28
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b084      	sub	sp, #16
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2f2:	f3ef 8305 	mrs	r3, IPSR
 800c2f6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <osDelay+0x1c>
    stat = osErrorISR;
 800c2fe:	f06f 0305 	mvn.w	r3, #5
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	e007      	b.n	800c316 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c306:	2300      	movs	r3, #0
 800c308:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f001 feef 	bl	800e0f4 <vTaskDelay>
    }
  }

  return (stat);
 800c316:	68fb      	ldr	r3, [r7, #12]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c328:	2300      	movs	r3, #0
 800c32a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c32c:	f3ef 8305 	mrs	r3, IPSR
 800c330:	60bb      	str	r3, [r7, #8]
  return(result);
 800c332:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c334:	2b00      	cmp	r3, #0
 800c336:	d174      	bne.n	800c422 <osMutexNew+0x102>
    if (attr != NULL) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	61bb      	str	r3, [r7, #24]
 800c344:	e001      	b.n	800c34a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c346:	2300      	movs	r3, #0
 800c348:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	f003 0301 	and.w	r3, r3, #1
 800c350:	2b00      	cmp	r3, #0
 800c352:	d002      	beq.n	800c35a <osMutexNew+0x3a>
      rmtx = 1U;
 800c354:	2301      	movs	r3, #1
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	e001      	b.n	800c35e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c35a:	2300      	movs	r3, #0
 800c35c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	f003 0308 	and.w	r3, r3, #8
 800c364:	2b00      	cmp	r3, #0
 800c366:	d15c      	bne.n	800c422 <osMutexNew+0x102>
      mem = -1;
 800c368:	f04f 33ff 	mov.w	r3, #4294967295
 800c36c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d015      	beq.n	800c3a0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d006      	beq.n	800c38a <osMutexNew+0x6a>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	2b4f      	cmp	r3, #79	@ 0x4f
 800c382:	d902      	bls.n	800c38a <osMutexNew+0x6a>
          mem = 1;
 800c384:	2301      	movs	r3, #1
 800c386:	613b      	str	r3, [r7, #16]
 800c388:	e00c      	b.n	800c3a4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d108      	bne.n	800c3a4 <osMutexNew+0x84>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d104      	bne.n	800c3a4 <osMutexNew+0x84>
            mem = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	613b      	str	r3, [r7, #16]
 800c39e:	e001      	b.n	800c3a4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d112      	bne.n	800c3d0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d007      	beq.n	800c3c0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	2004      	movs	r0, #4
 800c3b8:	f000 fd71 	bl	800ce9e <xQueueCreateMutexStatic>
 800c3bc:	61f8      	str	r0, [r7, #28]
 800c3be:	e016      	b.n	800c3ee <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	f000 fd69 	bl	800ce9e <xQueueCreateMutexStatic>
 800c3cc:	61f8      	str	r0, [r7, #28]
 800c3ce:	e00e      	b.n	800c3ee <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10b      	bne.n	800c3ee <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d004      	beq.n	800c3e6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c3dc:	2004      	movs	r0, #4
 800c3de:	f000 fd46 	bl	800ce6e <xQueueCreateMutex>
 800c3e2:	61f8      	str	r0, [r7, #28]
 800c3e4:	e003      	b.n	800c3ee <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c3e6:	2001      	movs	r0, #1
 800c3e8:	f000 fd41 	bl	800ce6e <xQueueCreateMutex>
 800c3ec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00c      	beq.n	800c40e <osMutexNew+0xee>
        if (attr != NULL) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d003      	beq.n	800c402 <osMutexNew+0xe2>
          name = attr->name;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	60fb      	str	r3, [r7, #12]
 800c400:	e001      	b.n	800c406 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c402:	2300      	movs	r3, #0
 800c404:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c406:	68f9      	ldr	r1, [r7, #12]
 800c408:	69f8      	ldr	r0, [r7, #28]
 800c40a:	f001 fc2d 	bl	800dc68 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d006      	beq.n	800c422 <osMutexNew+0x102>
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	f043 0301 	orr.w	r3, r3, #1
 800c420:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c422:	69fb      	ldr	r3, [r7, #28]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3720      	adds	r7, #32
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f023 0301 	bic.w	r3, r3, #1
 800c43c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f003 0301 	and.w	r3, r3, #1
 800c444:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c446:	2300      	movs	r3, #0
 800c448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c44a:	f3ef 8305 	mrs	r3, IPSR
 800c44e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c450:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c452:	2b00      	cmp	r3, #0
 800c454:	d003      	beq.n	800c45e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c456:	f06f 0305 	mvn.w	r3, #5
 800c45a:	617b      	str	r3, [r7, #20]
 800c45c:	e02c      	b.n	800c4b8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d103      	bne.n	800c46c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c464:	f06f 0303 	mvn.w	r3, #3
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	e025      	b.n	800c4b8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d011      	beq.n	800c496 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6938      	ldr	r0, [r7, #16]
 800c476:	f000 fd62 	bl	800cf3e <xQueueTakeMutexRecursive>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d01b      	beq.n	800c4b8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c486:	f06f 0301 	mvn.w	r3, #1
 800c48a:	617b      	str	r3, [r7, #20]
 800c48c:	e014      	b.n	800c4b8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c48e:	f06f 0302 	mvn.w	r3, #2
 800c492:	617b      	str	r3, [r7, #20]
 800c494:	e010      	b.n	800c4b8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	6938      	ldr	r0, [r7, #16]
 800c49a:	f001 f907 	bl	800d6ac <xQueueSemaphoreTake>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d009      	beq.n	800c4b8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c4aa:	f06f 0301 	mvn.w	r3, #1
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	e002      	b.n	800c4b8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c4b2:	f06f 0302 	mvn.w	r3, #2
 800c4b6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c4b8:	697b      	ldr	r3, [r7, #20]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b086      	sub	sp, #24
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f023 0301 	bic.w	r3, r3, #1
 800c4d0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f003 0301 	and.w	r3, r3, #1
 800c4d8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4de:	f3ef 8305 	mrs	r3, IPSR
 800c4e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c4e4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d003      	beq.n	800c4f2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c4ea:	f06f 0305 	mvn.w	r3, #5
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e01f      	b.n	800c532 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d103      	bne.n	800c500 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c4f8:	f06f 0303 	mvn.w	r3, #3
 800c4fc:	617b      	str	r3, [r7, #20]
 800c4fe:	e018      	b.n	800c532 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d009      	beq.n	800c51a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c506:	6938      	ldr	r0, [r7, #16]
 800c508:	f000 fce4 	bl	800ced4 <xQueueGiveMutexRecursive>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d00f      	beq.n	800c532 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c512:	f06f 0302 	mvn.w	r3, #2
 800c516:	617b      	str	r3, [r7, #20]
 800c518:	e00b      	b.n	800c532 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c51a:	2300      	movs	r3, #0
 800c51c:	2200      	movs	r2, #0
 800c51e:	2100      	movs	r1, #0
 800c520:	6938      	ldr	r0, [r7, #16]
 800c522:	f000 fdb1 	bl	800d088 <xQueueGenericSend>
 800c526:	4603      	mov	r3, r0
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d002      	beq.n	800c532 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c52c:	f06f 0302 	mvn.w	r3, #2
 800c530:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c532:	697b      	ldr	r3, [r7, #20]
}
 800c534:	4618      	mov	r0, r3
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08a      	sub	sp, #40	@ 0x28
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c548:	2300      	movs	r3, #0
 800c54a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c54c:	f3ef 8305 	mrs	r3, IPSR
 800c550:	613b      	str	r3, [r7, #16]
  return(result);
 800c552:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c554:	2b00      	cmp	r3, #0
 800c556:	d175      	bne.n	800c644 <osSemaphoreNew+0x108>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d072      	beq.n	800c644 <osSemaphoreNew+0x108>
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	429a      	cmp	r2, r3
 800c564:	d86e      	bhi.n	800c644 <osSemaphoreNew+0x108>
    mem = -1;
 800c566:	f04f 33ff 	mov.w	r3, #4294967295
 800c56a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d015      	beq.n	800c59e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d006      	beq.n	800c588 <osSemaphoreNew+0x4c>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	2b4f      	cmp	r3, #79	@ 0x4f
 800c580:	d902      	bls.n	800c588 <osSemaphoreNew+0x4c>
        mem = 1;
 800c582:	2301      	movs	r3, #1
 800c584:	61bb      	str	r3, [r7, #24]
 800c586:	e00c      	b.n	800c5a2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d108      	bne.n	800c5a2 <osSemaphoreNew+0x66>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d104      	bne.n	800c5a2 <osSemaphoreNew+0x66>
          mem = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	61bb      	str	r3, [r7, #24]
 800c59c:	e001      	b.n	800c5a2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a8:	d04c      	beq.n	800c644 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d128      	bne.n	800c602 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d10a      	bne.n	800c5cc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2203      	movs	r2, #3
 800c5bc:	9200      	str	r2, [sp, #0]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	f000 fb5e 	bl	800cc84 <xQueueGenericCreateStatic>
 800c5c8:	61f8      	str	r0, [r7, #28]
 800c5ca:	e005      	b.n	800c5d8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c5cc:	2203      	movs	r2, #3
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	2001      	movs	r0, #1
 800c5d2:	f000 fbd4 	bl	800cd7e <xQueueGenericCreate>
 800c5d6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d022      	beq.n	800c624 <osSemaphoreNew+0xe8>
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d01f      	beq.n	800c624 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	69f8      	ldr	r0, [r7, #28]
 800c5ec:	f000 fd4c 	bl	800d088 <xQueueGenericSend>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d016      	beq.n	800c624 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c5f6:	69f8      	ldr	r0, [r7, #28]
 800c5f8:	f001 f9ea 	bl	800d9d0 <vQueueDelete>
            hSemaphore = NULL;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	61fb      	str	r3, [r7, #28]
 800c600:	e010      	b.n	800c624 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	2b01      	cmp	r3, #1
 800c606:	d108      	bne.n	800c61a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	461a      	mov	r2, r3
 800c60e:	68b9      	ldr	r1, [r7, #8]
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f000 fccb 	bl	800cfac <xQueueCreateCountingSemaphoreStatic>
 800c616:	61f8      	str	r0, [r7, #28]
 800c618:	e004      	b.n	800c624 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c61a:	68b9      	ldr	r1, [r7, #8]
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f000 fcfe 	bl	800d01e <xQueueCreateCountingSemaphore>
 800c622:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00c      	beq.n	800c644 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	617b      	str	r3, [r7, #20]
 800c636:	e001      	b.n	800c63c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c638:	2300      	movs	r3, #0
 800c63a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c63c:	6979      	ldr	r1, [r7, #20]
 800c63e:	69f8      	ldr	r0, [r7, #28]
 800c640:	f001 fb12 	bl	800dc68 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c644:	69fb      	ldr	r3, [r7, #28]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3720      	adds	r7, #32
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
	...

0800c650 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d103      	bne.n	800c670 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c668:	f06f 0303 	mvn.w	r3, #3
 800c66c:	617b      	str	r3, [r7, #20]
 800c66e:	e039      	b.n	800c6e4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c670:	f3ef 8305 	mrs	r3, IPSR
 800c674:	60fb      	str	r3, [r7, #12]
  return(result);
 800c676:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d022      	beq.n	800c6c2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d003      	beq.n	800c68a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c682:	f06f 0303 	mvn.w	r3, #3
 800c686:	617b      	str	r3, [r7, #20]
 800c688:	e02c      	b.n	800c6e4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c68a:	2300      	movs	r3, #0
 800c68c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c68e:	f107 0308 	add.w	r3, r7, #8
 800c692:	461a      	mov	r2, r3
 800c694:	2100      	movs	r1, #0
 800c696:	6938      	ldr	r0, [r7, #16]
 800c698:	f001 f918 	bl	800d8cc <xQueueReceiveFromISR>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d003      	beq.n	800c6aa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c6a2:	f06f 0302 	mvn.w	r3, #2
 800c6a6:	617b      	str	r3, [r7, #20]
 800c6a8:	e01c      	b.n	800c6e4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d019      	beq.n	800c6e4 <osSemaphoreAcquire+0x94>
 800c6b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c6f0 <osSemaphoreAcquire+0xa0>)
 800c6b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	e010      	b.n	800c6e4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6938      	ldr	r0, [r7, #16]
 800c6c6:	f000 fff1 	bl	800d6ac <xQueueSemaphoreTake>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d009      	beq.n	800c6e4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d003      	beq.n	800c6de <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c6d6:	f06f 0301 	mvn.w	r3, #1
 800c6da:	617b      	str	r3, [r7, #20]
 800c6dc:	e002      	b.n	800c6e4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c6de:	f06f 0302 	mvn.w	r3, #2
 800c6e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c6e4:	697b      	ldr	r3, [r7, #20]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	e000ed04 	.word	0xe000ed04

0800c6f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c700:	2300      	movs	r3, #0
 800c702:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d103      	bne.n	800c712 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c70a:	f06f 0303 	mvn.w	r3, #3
 800c70e:	617b      	str	r3, [r7, #20]
 800c710:	e02c      	b.n	800c76c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c712:	f3ef 8305 	mrs	r3, IPSR
 800c716:	60fb      	str	r3, [r7, #12]
  return(result);
 800c718:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d01a      	beq.n	800c754 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c71e:	2300      	movs	r3, #0
 800c720:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c722:	f107 0308 	add.w	r3, r7, #8
 800c726:	4619      	mov	r1, r3
 800c728:	6938      	ldr	r0, [r7, #16]
 800c72a:	f000 fe4d 	bl	800d3c8 <xQueueGiveFromISR>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b01      	cmp	r3, #1
 800c732:	d003      	beq.n	800c73c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c734:	f06f 0302 	mvn.w	r3, #2
 800c738:	617b      	str	r3, [r7, #20]
 800c73a:	e017      	b.n	800c76c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d014      	beq.n	800c76c <osSemaphoreRelease+0x78>
 800c742:	4b0d      	ldr	r3, [pc, #52]	@ (800c778 <osSemaphoreRelease+0x84>)
 800c744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c748:	601a      	str	r2, [r3, #0]
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	e00b      	b.n	800c76c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c754:	2300      	movs	r3, #0
 800c756:	2200      	movs	r2, #0
 800c758:	2100      	movs	r1, #0
 800c75a:	6938      	ldr	r0, [r7, #16]
 800c75c:	f000 fc94 	bl	800d088 <xQueueGenericSend>
 800c760:	4603      	mov	r3, r0
 800c762:	2b01      	cmp	r3, #1
 800c764:	d002      	beq.n	800c76c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c766:	f06f 0302 	mvn.w	r3, #2
 800c76a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c76c:	697b      	ldr	r3, [r7, #20]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3718      	adds	r7, #24
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	e000ed04 	.word	0xe000ed04

0800c77c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08a      	sub	sp, #40	@ 0x28
 800c780:	af02      	add	r7, sp, #8
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c788:	2300      	movs	r3, #0
 800c78a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c78c:	f3ef 8305 	mrs	r3, IPSR
 800c790:	613b      	str	r3, [r7, #16]
  return(result);
 800c792:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c794:	2b00      	cmp	r3, #0
 800c796:	d15f      	bne.n	800c858 <osMessageQueueNew+0xdc>
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d05c      	beq.n	800c858 <osMessageQueueNew+0xdc>
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d059      	beq.n	800c858 <osMessageQueueNew+0xdc>
    mem = -1;
 800c7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d029      	beq.n	800c804 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d012      	beq.n	800c7de <osMessageQueueNew+0x62>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	2b4f      	cmp	r3, #79	@ 0x4f
 800c7be:	d90e      	bls.n	800c7de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00a      	beq.n	800c7de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	695a      	ldr	r2, [r3, #20]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	68b9      	ldr	r1, [r7, #8]
 800c7d0:	fb01 f303 	mul.w	r3, r1, r3
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d302      	bcc.n	800c7de <osMessageQueueNew+0x62>
        mem = 1;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	61bb      	str	r3, [r7, #24]
 800c7dc:	e014      	b.n	800c808 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d110      	bne.n	800c808 <osMessageQueueNew+0x8c>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10c      	bne.n	800c808 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d108      	bne.n	800c808 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	695b      	ldr	r3, [r3, #20]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d104      	bne.n	800c808 <osMessageQueueNew+0x8c>
          mem = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	61bb      	str	r3, [r7, #24]
 800c802:	e001      	b.n	800c808 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d10b      	bne.n	800c826 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	691a      	ldr	r2, [r3, #16]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	2100      	movs	r1, #0
 800c818:	9100      	str	r1, [sp, #0]
 800c81a:	68b9      	ldr	r1, [r7, #8]
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f000 fa31 	bl	800cc84 <xQueueGenericCreateStatic>
 800c822:	61f8      	str	r0, [r7, #28]
 800c824:	e008      	b.n	800c838 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d105      	bne.n	800c838 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c82c:	2200      	movs	r2, #0
 800c82e:	68b9      	ldr	r1, [r7, #8]
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f000 faa4 	bl	800cd7e <xQueueGenericCreate>
 800c836:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00c      	beq.n	800c858 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d003      	beq.n	800c84c <osMessageQueueNew+0xd0>
        name = attr->name;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	617b      	str	r3, [r7, #20]
 800c84a:	e001      	b.n	800c850 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c84c:	2300      	movs	r3, #0
 800c84e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c850:	6979      	ldr	r1, [r7, #20]
 800c852:	69f8      	ldr	r0, [r7, #28]
 800c854:	f001 fa08 	bl	800dc68 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c858:	69fb      	ldr	r3, [r7, #28]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3720      	adds	r7, #32
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	603b      	str	r3, [r7, #0]
 800c870:	4613      	mov	r3, r2
 800c872:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c878:	2300      	movs	r3, #0
 800c87a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c87c:	f3ef 8305 	mrs	r3, IPSR
 800c880:	617b      	str	r3, [r7, #20]
  return(result);
 800c882:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c884:	2b00      	cmp	r3, #0
 800c886:	d028      	beq.n	800c8da <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d005      	beq.n	800c89a <osMessageQueuePut+0x36>
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d002      	beq.n	800c89a <osMessageQueuePut+0x36>
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d003      	beq.n	800c8a2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c89a:	f06f 0303 	mvn.w	r3, #3
 800c89e:	61fb      	str	r3, [r7, #28]
 800c8a0:	e038      	b.n	800c914 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c8a6:	f107 0210 	add.w	r2, r7, #16
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	68b9      	ldr	r1, [r7, #8]
 800c8ae:	69b8      	ldr	r0, [r7, #24]
 800c8b0:	f000 fcec 	bl	800d28c <xQueueGenericSendFromISR>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d003      	beq.n	800c8c2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c8ba:	f06f 0302 	mvn.w	r3, #2
 800c8be:	61fb      	str	r3, [r7, #28]
 800c8c0:	e028      	b.n	800c914 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d025      	beq.n	800c914 <osMessageQueuePut+0xb0>
 800c8c8:	4b15      	ldr	r3, [pc, #84]	@ (800c920 <osMessageQueuePut+0xbc>)
 800c8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8ce:	601a      	str	r2, [r3, #0]
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	e01c      	b.n	800c914 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d002      	beq.n	800c8e6 <osMessageQueuePut+0x82>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d103      	bne.n	800c8ee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c8e6:	f06f 0303 	mvn.w	r3, #3
 800c8ea:	61fb      	str	r3, [r7, #28]
 800c8ec:	e012      	b.n	800c914 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	68b9      	ldr	r1, [r7, #8]
 800c8f4:	69b8      	ldr	r0, [r7, #24]
 800c8f6:	f000 fbc7 	bl	800d088 <xQueueGenericSend>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d009      	beq.n	800c914 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d003      	beq.n	800c90e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c906:	f06f 0301 	mvn.w	r3, #1
 800c90a:	61fb      	str	r3, [r7, #28]
 800c90c:	e002      	b.n	800c914 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c90e:	f06f 0302 	mvn.w	r3, #2
 800c912:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c914:	69fb      	ldr	r3, [r7, #28]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3720      	adds	r7, #32
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	e000ed04 	.word	0xe000ed04

0800c924 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c924:	b580      	push	{r7, lr}
 800c926:	b088      	sub	sp, #32
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c936:	2300      	movs	r3, #0
 800c938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c93a:	f3ef 8305 	mrs	r3, IPSR
 800c93e:	617b      	str	r3, [r7, #20]
  return(result);
 800c940:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c942:	2b00      	cmp	r3, #0
 800c944:	d028      	beq.n	800c998 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d005      	beq.n	800c958 <osMessageQueueGet+0x34>
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <osMessageQueueGet+0x34>
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d003      	beq.n	800c960 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c958:	f06f 0303 	mvn.w	r3, #3
 800c95c:	61fb      	str	r3, [r7, #28]
 800c95e:	e037      	b.n	800c9d0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c960:	2300      	movs	r3, #0
 800c962:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c964:	f107 0310 	add.w	r3, r7, #16
 800c968:	461a      	mov	r2, r3
 800c96a:	68b9      	ldr	r1, [r7, #8]
 800c96c:	69b8      	ldr	r0, [r7, #24]
 800c96e:	f000 ffad 	bl	800d8cc <xQueueReceiveFromISR>
 800c972:	4603      	mov	r3, r0
 800c974:	2b01      	cmp	r3, #1
 800c976:	d003      	beq.n	800c980 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c978:	f06f 0302 	mvn.w	r3, #2
 800c97c:	61fb      	str	r3, [r7, #28]
 800c97e:	e027      	b.n	800c9d0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d024      	beq.n	800c9d0 <osMessageQueueGet+0xac>
 800c986:	4b15      	ldr	r3, [pc, #84]	@ (800c9dc <osMessageQueueGet+0xb8>)
 800c988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c98c:	601a      	str	r2, [r3, #0]
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	e01b      	b.n	800c9d0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d002      	beq.n	800c9a4 <osMessageQueueGet+0x80>
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d103      	bne.n	800c9ac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c9a4:	f06f 0303 	mvn.w	r3, #3
 800c9a8:	61fb      	str	r3, [r7, #28]
 800c9aa:	e011      	b.n	800c9d0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	68b9      	ldr	r1, [r7, #8]
 800c9b0:	69b8      	ldr	r0, [r7, #24]
 800c9b2:	f000 fd99 	bl	800d4e8 <xQueueReceive>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d009      	beq.n	800c9d0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d003      	beq.n	800c9ca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c9c2:	f06f 0301 	mvn.w	r3, #1
 800c9c6:	61fb      	str	r3, [r7, #28]
 800c9c8:	e002      	b.n	800c9d0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c9ca:	f06f 0302 	mvn.w	r3, #2
 800c9ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c9d0:	69fb      	ldr	r3, [r7, #28]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3720      	adds	r7, #32
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	e000ed04 	.word	0xe000ed04

0800c9e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4a07      	ldr	r2, [pc, #28]	@ (800ca0c <vApplicationGetIdleTaskMemory+0x2c>)
 800c9f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	4a06      	ldr	r2, [pc, #24]	@ (800ca10 <vApplicationGetIdleTaskMemory+0x30>)
 800c9f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2280      	movs	r2, #128	@ 0x80
 800c9fc:	601a      	str	r2, [r3, #0]
}
 800c9fe:	bf00      	nop
 800ca00:	3714      	adds	r7, #20
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	24005a7c 	.word	0x24005a7c
 800ca10:	24005b24 	.word	0x24005b24

0800ca14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4a07      	ldr	r2, [pc, #28]	@ (800ca40 <vApplicationGetTimerTaskMemory+0x2c>)
 800ca24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	4a06      	ldr	r2, [pc, #24]	@ (800ca44 <vApplicationGetTimerTaskMemory+0x30>)
 800ca2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca32:	601a      	str	r2, [r3, #0]
}
 800ca34:	bf00      	nop
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr
 800ca40:	24005d24 	.word	0x24005d24
 800ca44:	24005dcc 	.word	0x24005dcc

0800ca48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f103 0208 	add.w	r2, r3, #8
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f103 0208 	add.w	r2, r3, #8
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f103 0208 	add.w	r2, r3, #8
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca96:	bf00      	nop
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800caa2:	b480      	push	{r7}
 800caa4:	b085      	sub	sp, #20
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	689a      	ldr	r2, [r3, #8]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	683a      	ldr	r2, [r7, #0]
 800cac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	1c5a      	adds	r2, r3, #1
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	601a      	str	r2, [r3, #0]
}
 800cade:	bf00      	nop
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800caea:	b480      	push	{r7}
 800caec:	b085      	sub	sp, #20
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb00:	d103      	bne.n	800cb0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	691b      	ldr	r3, [r3, #16]
 800cb06:	60fb      	str	r3, [r7, #12]
 800cb08:	e00c      	b.n	800cb24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	3308      	adds	r3, #8
 800cb0e:	60fb      	str	r3, [r7, #12]
 800cb10:	e002      	b.n	800cb18 <vListInsert+0x2e>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d2f6      	bcs.n	800cb12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	685a      	ldr	r2, [r3, #4]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	1c5a      	adds	r2, r3, #1
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	601a      	str	r2, [r3, #0]
}
 800cb50:	bf00      	nop
 800cb52:	3714      	adds	r7, #20
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	6892      	ldr	r2, [r2, #8]
 800cb72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	6852      	ldr	r2, [r2, #4]
 800cb7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d103      	bne.n	800cb90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	689a      	ldr	r2, [r3, #8]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	1e5a      	subs	r2, r3, #1
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3714      	adds	r7, #20
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10b      	bne.n	800cbdc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cbd6:	bf00      	nop
 800cbd8:	bf00      	nop
 800cbda:	e7fd      	b.n	800cbd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cbdc:	f002 fdb4 	bl	800f748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbe8:	68f9      	ldr	r1, [r7, #12]
 800cbea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cbec:	fb01 f303 	mul.w	r3, r1, r3
 800cbf0:	441a      	add	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	68f9      	ldr	r1, [r7, #12]
 800cc10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc12:	fb01 f303 	mul.w	r3, r1, r3
 800cc16:	441a      	add	r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	22ff      	movs	r2, #255	@ 0xff
 800cc20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	22ff      	movs	r2, #255	@ 0xff
 800cc28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d114      	bne.n	800cc5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d01a      	beq.n	800cc70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3310      	adds	r3, #16
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f001 fd3e 	bl	800e6c0 <xTaskRemoveFromEventList>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d012      	beq.n	800cc70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc80 <xQueueGenericReset+0xd0>)
 800cc4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc50:	601a      	str	r2, [r3, #0]
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	e009      	b.n	800cc70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	3310      	adds	r3, #16
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff fef1 	bl	800ca48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	3324      	adds	r3, #36	@ 0x24
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff feec 	bl	800ca48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc70:	f002 fd9c 	bl	800f7ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc74:	2301      	movs	r3, #1
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	e000ed04 	.word	0xe000ed04

0800cc84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08e      	sub	sp, #56	@ 0x38
 800cc88:	af02      	add	r7, sp, #8
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10b      	bne.n	800ccb0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ccaa:	bf00      	nop
 800ccac:	bf00      	nop
 800ccae:	e7fd      	b.n	800ccac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10b      	bne.n	800ccce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ccb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccba:	f383 8811 	msr	BASEPRI, r3
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	f3bf 8f4f 	dsb	sy
 800ccc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ccc8:	bf00      	nop
 800ccca:	bf00      	nop
 800cccc:	e7fd      	b.n	800ccca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d002      	beq.n	800ccda <xQueueGenericCreateStatic+0x56>
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <xQueueGenericCreateStatic+0x5a>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e000      	b.n	800cce0 <xQueueGenericCreateStatic+0x5c>
 800ccde:	2300      	movs	r3, #0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10b      	bne.n	800ccfc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	623b      	str	r3, [r7, #32]
}
 800ccf6:	bf00      	nop
 800ccf8:	bf00      	nop
 800ccfa:	e7fd      	b.n	800ccf8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d102      	bne.n	800cd08 <xQueueGenericCreateStatic+0x84>
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d101      	bne.n	800cd0c <xQueueGenericCreateStatic+0x88>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e000      	b.n	800cd0e <xQueueGenericCreateStatic+0x8a>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10b      	bne.n	800cd2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	61fb      	str	r3, [r7, #28]
}
 800cd24:	bf00      	nop
 800cd26:	bf00      	nop
 800cd28:	e7fd      	b.n	800cd26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd2a:	2350      	movs	r3, #80	@ 0x50
 800cd2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	2b50      	cmp	r3, #80	@ 0x50
 800cd32:	d00b      	beq.n	800cd4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd38:	f383 8811 	msr	BASEPRI, r3
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	61bb      	str	r3, [r7, #24]
}
 800cd46:	bf00      	nop
 800cd48:	bf00      	nop
 800cd4a:	e7fd      	b.n	800cd48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cd52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00d      	beq.n	800cd74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	68b9      	ldr	r1, [r7, #8]
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f000 f840 	bl	800cdf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3730      	adds	r7, #48	@ 0x30
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b08a      	sub	sp, #40	@ 0x28
 800cd82:	af02      	add	r7, sp, #8
 800cd84:	60f8      	str	r0, [r7, #12]
 800cd86:	60b9      	str	r1, [r7, #8]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10b      	bne.n	800cdaa <xQueueGenericCreate+0x2c>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	613b      	str	r3, [r7, #16]
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop
 800cda8:	e7fd      	b.n	800cda6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	fb02 f303 	mul.w	r3, r2, r3
 800cdb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	3350      	adds	r3, #80	@ 0x50
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f002 fde7 	bl	800f98c <pvPortMalloc>
 800cdbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d011      	beq.n	800cdea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	3350      	adds	r3, #80	@ 0x50
 800cdce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdd8:	79fa      	ldrb	r2, [r7, #7]
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	4613      	mov	r3, r2
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	68b9      	ldr	r1, [r7, #8]
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f000 f805 	bl	800cdf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdea:	69bb      	ldr	r3, [r7, #24]
	}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3720      	adds	r7, #32
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d103      	bne.n	800ce10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	69ba      	ldr	r2, [r7, #24]
 800ce0c:	601a      	str	r2, [r3, #0]
 800ce0e:	e002      	b.n	800ce16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce22:	2101      	movs	r1, #1
 800ce24:	69b8      	ldr	r0, [r7, #24]
 800ce26:	f7ff fec3 	bl	800cbb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	78fa      	ldrb	r2, [r7, #3]
 800ce2e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce32:	bf00      	nop
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00e      	beq.n	800ce66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2100      	movs	r1, #0
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 f911 	bl	800d088 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ce66:	bf00      	nop
 800ce68:	3708      	adds	r7, #8
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b086      	sub	sp, #24
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	4603      	mov	r3, r0
 800ce76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	617b      	str	r3, [r7, #20]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ce80:	79fb      	ldrb	r3, [r7, #7]
 800ce82:	461a      	mov	r2, r3
 800ce84:	6939      	ldr	r1, [r7, #16]
 800ce86:	6978      	ldr	r0, [r7, #20]
 800ce88:	f7ff ff79 	bl	800cd7e <xQueueGenericCreate>
 800ce8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f7ff ffd3 	bl	800ce3a <prvInitialiseMutex>

		return xNewQueue;
 800ce94:	68fb      	ldr	r3, [r7, #12]
	}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b088      	sub	sp, #32
 800cea2:	af02      	add	r7, sp, #8
 800cea4:	4603      	mov	r3, r0
 800cea6:	6039      	str	r1, [r7, #0]
 800cea8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	617b      	str	r3, [r7, #20]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	6939      	ldr	r1, [r7, #16]
 800cebc:	6978      	ldr	r0, [r7, #20]
 800cebe:	f7ff fee1 	bl	800cc84 <xQueueGenericCreateStatic>
 800cec2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f7ff ffb8 	bl	800ce3a <prvInitialiseMutex>

		return xNewQueue;
 800ceca:	68fb      	ldr	r3, [r7, #12]
	}
 800cecc:	4618      	mov	r0, r3
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ced4:	b590      	push	{r4, r7, lr}
 800ced6:	b087      	sub	sp, #28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10b      	bne.n	800cefe <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800cee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceea:	f383 8811 	msr	BASEPRI, r3
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	60fb      	str	r3, [r7, #12]
}
 800cef8:	bf00      	nop
 800cefa:	bf00      	nop
 800cefc:	e7fd      	b.n	800cefa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	689c      	ldr	r4, [r3, #8]
 800cf02:	f001 fda3 	bl	800ea4c <xTaskGetCurrentTaskHandle>
 800cf06:	4603      	mov	r3, r0
 800cf08:	429c      	cmp	r4, r3
 800cf0a:	d111      	bne.n	800cf30 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	1e5a      	subs	r2, r3, #1
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d105      	bne.n	800cf2a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cf1e:	2300      	movs	r3, #0
 800cf20:	2200      	movs	r2, #0
 800cf22:	2100      	movs	r1, #0
 800cf24:	6938      	ldr	r0, [r7, #16]
 800cf26:	f000 f8af 	bl	800d088 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	e001      	b.n	800cf34 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cf30:	2300      	movs	r3, #0
 800cf32:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cf34:	697b      	ldr	r3, [r7, #20]
	}
 800cf36:	4618      	mov	r0, r3
 800cf38:	371c      	adds	r7, #28
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd90      	pop	{r4, r7, pc}

0800cf3e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cf3e:	b590      	push	{r4, r7, lr}
 800cf40:	b087      	sub	sp, #28
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10b      	bne.n	800cf6a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	60fb      	str	r3, [r7, #12]
}
 800cf64:	bf00      	nop
 800cf66:	bf00      	nop
 800cf68:	e7fd      	b.n	800cf66 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	689c      	ldr	r4, [r3, #8]
 800cf6e:	f001 fd6d 	bl	800ea4c <xTaskGetCurrentTaskHandle>
 800cf72:	4603      	mov	r3, r0
 800cf74:	429c      	cmp	r4, r3
 800cf76:	d107      	bne.n	800cf88 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	1c5a      	adds	r2, r3, #1
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cf82:	2301      	movs	r3, #1
 800cf84:	617b      	str	r3, [r7, #20]
 800cf86:	e00c      	b.n	800cfa2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6938      	ldr	r0, [r7, #16]
 800cf8c:	f000 fb8e 	bl	800d6ac <xQueueSemaphoreTake>
 800cf90:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d004      	beq.n	800cfa2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	1c5a      	adds	r2, r3, #1
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cfa2:	697b      	ldr	r3, [r7, #20]
	}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	371c      	adds	r7, #28
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd90      	pop	{r4, r7, pc}

0800cfac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b08a      	sub	sp, #40	@ 0x28
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10b      	bne.n	800cfd6 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	61bb      	str	r3, [r7, #24]
}
 800cfd0:	bf00      	nop
 800cfd2:	bf00      	nop
 800cfd4:	e7fd      	b.n	800cfd2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d90b      	bls.n	800cff6 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	617b      	str	r3, [r7, #20]
}
 800cff0:	bf00      	nop
 800cff2:	bf00      	nop
 800cff4:	e7fd      	b.n	800cff2 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cff6:	2302      	movs	r3, #2
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	2100      	movs	r1, #0
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f7ff fe3f 	bl	800cc84 <xQueueGenericCreateStatic>
 800d006:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d002      	beq.n	800d014 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d014:	69fb      	ldr	r3, [r7, #28]
	}
 800d016:	4618      	mov	r0, r3
 800d018:	3720      	adds	r7, #32
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b086      	sub	sp, #24
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
 800d026:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10b      	bne.n	800d046 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	613b      	str	r3, [r7, #16]
}
 800d040:	bf00      	nop
 800d042:	bf00      	nop
 800d044:	e7fd      	b.n	800d042 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d90b      	bls.n	800d066 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	60fb      	str	r3, [r7, #12]
}
 800d060:	bf00      	nop
 800d062:	bf00      	nop
 800d064:	e7fd      	b.n	800d062 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d066:	2202      	movs	r2, #2
 800d068:	2100      	movs	r1, #0
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff fe87 	bl	800cd7e <xQueueGenericCreate>
 800d070:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d002      	beq.n	800d07e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	683a      	ldr	r2, [r7, #0]
 800d07c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d07e:	697b      	ldr	r3, [r7, #20]
	}
 800d080:	4618      	mov	r0, r3
 800d082:	3718      	adds	r7, #24
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08e      	sub	sp, #56	@ 0x38
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d096:	2300      	movs	r3, #0
 800d098:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10b      	bne.n	800d0bc <xQueueGenericSend+0x34>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d0b6:	bf00      	nop
 800d0b8:	bf00      	nop
 800d0ba:	e7fd      	b.n	800d0b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d103      	bne.n	800d0ca <xQueueGenericSend+0x42>
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <xQueueGenericSend+0x46>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e000      	b.n	800d0d0 <xQueueGenericSend+0x48>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10b      	bne.n	800d0ec <xQueueGenericSend+0x64>
	__asm volatile
 800d0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d0e6:	bf00      	nop
 800d0e8:	bf00      	nop
 800d0ea:	e7fd      	b.n	800d0e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d103      	bne.n	800d0fa <xQueueGenericSend+0x72>
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d101      	bne.n	800d0fe <xQueueGenericSend+0x76>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e000      	b.n	800d100 <xQueueGenericSend+0x78>
 800d0fe:	2300      	movs	r3, #0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10b      	bne.n	800d11c <xQueueGenericSend+0x94>
	__asm volatile
 800d104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d108:	f383 8811 	msr	BASEPRI, r3
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	623b      	str	r3, [r7, #32]
}
 800d116:	bf00      	nop
 800d118:	bf00      	nop
 800d11a:	e7fd      	b.n	800d118 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d11c:	f001 fca6 	bl	800ea6c <xTaskGetSchedulerState>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d102      	bne.n	800d12c <xQueueGenericSend+0xa4>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <xQueueGenericSend+0xa8>
 800d12c:	2301      	movs	r3, #1
 800d12e:	e000      	b.n	800d132 <xQueueGenericSend+0xaa>
 800d130:	2300      	movs	r3, #0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10b      	bne.n	800d14e <xQueueGenericSend+0xc6>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	61fb      	str	r3, [r7, #28]
}
 800d148:	bf00      	nop
 800d14a:	bf00      	nop
 800d14c:	e7fd      	b.n	800d14a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d14e:	f002 fafb 	bl	800f748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d302      	bcc.n	800d164 <xQueueGenericSend+0xdc>
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b02      	cmp	r3, #2
 800d162:	d129      	bne.n	800d1b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	68b9      	ldr	r1, [r7, #8]
 800d168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d16a:	f000 fc6d 	bl	800da48 <prvCopyDataToQueue>
 800d16e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d174:	2b00      	cmp	r3, #0
 800d176:	d010      	beq.n	800d19a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17a:	3324      	adds	r3, #36	@ 0x24
 800d17c:	4618      	mov	r0, r3
 800d17e:	f001 fa9f 	bl	800e6c0 <xTaskRemoveFromEventList>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d013      	beq.n	800d1b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d188:	4b3f      	ldr	r3, [pc, #252]	@ (800d288 <xQueueGenericSend+0x200>)
 800d18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	e00a      	b.n	800d1b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d007      	beq.n	800d1b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d1a0:	4b39      	ldr	r3, [pc, #228]	@ (800d288 <xQueueGenericSend+0x200>)
 800d1a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1a6:	601a      	str	r2, [r3, #0]
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d1b0:	f002 fafc 	bl	800f7ac <vPortExitCritical>
				return pdPASS;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e063      	b.n	800d280 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d103      	bne.n	800d1c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1be:	f002 faf5 	bl	800f7ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e05c      	b.n	800d280 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d106      	bne.n	800d1da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1cc:	f107 0314 	add.w	r3, r7, #20
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f001 fad9 	bl	800e788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1da:	f002 fae7 	bl	800f7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1de:	f001 f82f 	bl	800e240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1e2:	f002 fab1 	bl	800f748 <vPortEnterCritical>
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1ec:	b25b      	sxtb	r3, r3
 800d1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f2:	d103      	bne.n	800d1fc <xQueueGenericSend+0x174>
 800d1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d202:	b25b      	sxtb	r3, r3
 800d204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d208:	d103      	bne.n	800d212 <xQueueGenericSend+0x18a>
 800d20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20c:	2200      	movs	r2, #0
 800d20e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d212:	f002 facb 	bl	800f7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d216:	1d3a      	adds	r2, r7, #4
 800d218:	f107 0314 	add.w	r3, r7, #20
 800d21c:	4611      	mov	r1, r2
 800d21e:	4618      	mov	r0, r3
 800d220:	f001 fac8 	bl	800e7b4 <xTaskCheckForTimeOut>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d124      	bne.n	800d274 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d22a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d22c:	f000 fd04 	bl	800dc38 <prvIsQueueFull>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d018      	beq.n	800d268 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d238:	3310      	adds	r3, #16
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	4611      	mov	r1, r2
 800d23e:	4618      	mov	r0, r3
 800d240:	f001 f9ec 	bl	800e61c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d246:	f000 fc8f 	bl	800db68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d24a:	f001 f807 	bl	800e25c <xTaskResumeAll>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	f47f af7c 	bne.w	800d14e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d256:	4b0c      	ldr	r3, [pc, #48]	@ (800d288 <xQueueGenericSend+0x200>)
 800d258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d25c:	601a      	str	r2, [r3, #0]
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	e772      	b.n	800d14e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d26a:	f000 fc7d 	bl	800db68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d26e:	f000 fff5 	bl	800e25c <xTaskResumeAll>
 800d272:	e76c      	b.n	800d14e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d274:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d276:	f000 fc77 	bl	800db68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d27a:	f000 ffef 	bl	800e25c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d27e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d280:	4618      	mov	r0, r3
 800d282:	3738      	adds	r7, #56	@ 0x38
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	e000ed04 	.word	0xe000ed04

0800d28c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b090      	sub	sp, #64	@ 0x40
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
 800d298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d10b      	bne.n	800d2bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a8:	f383 8811 	msr	BASEPRI, r3
 800d2ac:	f3bf 8f6f 	isb	sy
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d2b6:	bf00      	nop
 800d2b8:	bf00      	nop
 800d2ba:	e7fd      	b.n	800d2b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d103      	bne.n	800d2ca <xQueueGenericSendFromISR+0x3e>
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <xQueueGenericSendFromISR+0x42>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e000      	b.n	800d2d0 <xQueueGenericSendFromISR+0x44>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10b      	bne.n	800d2ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d8:	f383 8811 	msr	BASEPRI, r3
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d2e6:	bf00      	nop
 800d2e8:	bf00      	nop
 800d2ea:	e7fd      	b.n	800d2e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d103      	bne.n	800d2fa <xQueueGenericSendFromISR+0x6e>
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d101      	bne.n	800d2fe <xQueueGenericSendFromISR+0x72>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e000      	b.n	800d300 <xQueueGenericSendFromISR+0x74>
 800d2fe:	2300      	movs	r3, #0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10b      	bne.n	800d31c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	623b      	str	r3, [r7, #32]
}
 800d316:	bf00      	nop
 800d318:	bf00      	nop
 800d31a:	e7fd      	b.n	800d318 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d31c:	f002 faf4 	bl	800f908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d320:	f3ef 8211 	mrs	r2, BASEPRI
 800d324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	61fa      	str	r2, [r7, #28]
 800d336:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d338:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d33a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d33e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d344:	429a      	cmp	r2, r3
 800d346:	d302      	bcc.n	800d34e <xQueueGenericSendFromISR+0xc2>
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d12f      	bne.n	800d3ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d350:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d354:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	68b9      	ldr	r1, [r7, #8]
 800d362:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d364:	f000 fb70 	bl	800da48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d368:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d370:	d112      	bne.n	800d398 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d376:	2b00      	cmp	r3, #0
 800d378:	d016      	beq.n	800d3a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37c:	3324      	adds	r3, #36	@ 0x24
 800d37e:	4618      	mov	r0, r3
 800d380:	f001 f99e 	bl	800e6c0 <xTaskRemoveFromEventList>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00e      	beq.n	800d3a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00b      	beq.n	800d3a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	e007      	b.n	800d3a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d398:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d39c:	3301      	adds	r3, #1
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	b25a      	sxtb	r2, r3
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d3ac:	e001      	b.n	800d3b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d3bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3740      	adds	r7, #64	@ 0x40
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08e      	sub	sp, #56	@ 0x38
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10b      	bne.n	800d3f4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e0:	f383 8811 	msr	BASEPRI, r3
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	623b      	str	r3, [r7, #32]
}
 800d3ee:	bf00      	nop
 800d3f0:	bf00      	nop
 800d3f2:	e7fd      	b.n	800d3f0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00b      	beq.n	800d414 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	61fb      	str	r3, [r7, #28]
}
 800d40e:	bf00      	nop
 800d410:	bf00      	nop
 800d412:	e7fd      	b.n	800d410 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d103      	bne.n	800d424 <xQueueGiveFromISR+0x5c>
 800d41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d101      	bne.n	800d428 <xQueueGiveFromISR+0x60>
 800d424:	2301      	movs	r3, #1
 800d426:	e000      	b.n	800d42a <xQueueGiveFromISR+0x62>
 800d428:	2300      	movs	r3, #0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d10b      	bne.n	800d446 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	61bb      	str	r3, [r7, #24]
}
 800d440:	bf00      	nop
 800d442:	bf00      	nop
 800d444:	e7fd      	b.n	800d442 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d446:	f002 fa5f 	bl	800f908 <vPortValidateInterruptPriority>
	__asm volatile
 800d44a:	f3ef 8211 	mrs	r2, BASEPRI
 800d44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	617a      	str	r2, [r7, #20]
 800d460:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d462:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d464:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d46a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d46e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d472:	429a      	cmp	r2, r3
 800d474:	d22b      	bcs.n	800d4ce <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d47c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d486:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d488:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d490:	d112      	bne.n	800d4b8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d496:	2b00      	cmp	r3, #0
 800d498:	d016      	beq.n	800d4c8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49c:	3324      	adds	r3, #36	@ 0x24
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f001 f90e 	bl	800e6c0 <xTaskRemoveFromEventList>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00e      	beq.n	800d4c8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00b      	beq.n	800d4c8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	601a      	str	r2, [r3, #0]
 800d4b6:	e007      	b.n	800d4c8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4bc:	3301      	adds	r3, #1
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	b25a      	sxtb	r2, r3
 800d4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4cc:	e001      	b.n	800d4d2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f383 8811 	msr	BASEPRI, r3
}
 800d4dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3738      	adds	r7, #56	@ 0x38
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08c      	sub	sp, #48	@ 0x30
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10b      	bne.n	800d51a <xQueueReceive+0x32>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	623b      	str	r3, [r7, #32]
}
 800d514:	bf00      	nop
 800d516:	bf00      	nop
 800d518:	e7fd      	b.n	800d516 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d103      	bne.n	800d528 <xQueueReceive+0x40>
 800d520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d524:	2b00      	cmp	r3, #0
 800d526:	d101      	bne.n	800d52c <xQueueReceive+0x44>
 800d528:	2301      	movs	r3, #1
 800d52a:	e000      	b.n	800d52e <xQueueReceive+0x46>
 800d52c:	2300      	movs	r3, #0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d10b      	bne.n	800d54a <xQueueReceive+0x62>
	__asm volatile
 800d532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d536:	f383 8811 	msr	BASEPRI, r3
 800d53a:	f3bf 8f6f 	isb	sy
 800d53e:	f3bf 8f4f 	dsb	sy
 800d542:	61fb      	str	r3, [r7, #28]
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop
 800d548:	e7fd      	b.n	800d546 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d54a:	f001 fa8f 	bl	800ea6c <xTaskGetSchedulerState>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d102      	bne.n	800d55a <xQueueReceive+0x72>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d101      	bne.n	800d55e <xQueueReceive+0x76>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e000      	b.n	800d560 <xQueueReceive+0x78>
 800d55e:	2300      	movs	r3, #0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10b      	bne.n	800d57c <xQueueReceive+0x94>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	61bb      	str	r3, [r7, #24]
}
 800d576:	bf00      	nop
 800d578:	bf00      	nop
 800d57a:	e7fd      	b.n	800d578 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d57c:	f002 f8e4 	bl	800f748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d584:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d01f      	beq.n	800d5cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d58c:	68b9      	ldr	r1, [r7, #8]
 800d58e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d590:	f000 fac4 	bl	800db1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d596:	1e5a      	subs	r2, r3, #1
 800d598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00f      	beq.n	800d5c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a6:	3310      	adds	r3, #16
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f001 f889 	bl	800e6c0 <xTaskRemoveFromEventList>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d007      	beq.n	800d5c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d5b4:	4b3c      	ldr	r3, [pc, #240]	@ (800d6a8 <xQueueReceive+0x1c0>)
 800d5b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	f3bf 8f4f 	dsb	sy
 800d5c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d5c4:	f002 f8f2 	bl	800f7ac <vPortExitCritical>
				return pdPASS;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e069      	b.n	800d6a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d103      	bne.n	800d5da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5d2:	f002 f8eb 	bl	800f7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e062      	b.n	800d6a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d106      	bne.n	800d5ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5e0:	f107 0310 	add.w	r3, r7, #16
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f001 f8cf 	bl	800e788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5ee:	f002 f8dd 	bl	800f7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5f2:	f000 fe25 	bl	800e240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5f6:	f002 f8a7 	bl	800f748 <vPortEnterCritical>
 800d5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d600:	b25b      	sxtb	r3, r3
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d606:	d103      	bne.n	800d610 <xQueueReceive+0x128>
 800d608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d612:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d616:	b25b      	sxtb	r3, r3
 800d618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61c:	d103      	bne.n	800d626 <xQueueReceive+0x13e>
 800d61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d620:	2200      	movs	r2, #0
 800d622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d626:	f002 f8c1 	bl	800f7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d62a:	1d3a      	adds	r2, r7, #4
 800d62c:	f107 0310 	add.w	r3, r7, #16
 800d630:	4611      	mov	r1, r2
 800d632:	4618      	mov	r0, r3
 800d634:	f001 f8be 	bl	800e7b4 <xTaskCheckForTimeOut>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d123      	bne.n	800d686 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d63e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d640:	f000 fae4 	bl	800dc0c <prvIsQueueEmpty>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d017      	beq.n	800d67a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64c:	3324      	adds	r3, #36	@ 0x24
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	4611      	mov	r1, r2
 800d652:	4618      	mov	r0, r3
 800d654:	f000 ffe2 	bl	800e61c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d65a:	f000 fa85 	bl	800db68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d65e:	f000 fdfd 	bl	800e25c <xTaskResumeAll>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d189      	bne.n	800d57c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d668:	4b0f      	ldr	r3, [pc, #60]	@ (800d6a8 <xQueueReceive+0x1c0>)
 800d66a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d66e:	601a      	str	r2, [r3, #0]
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	e780      	b.n	800d57c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d67a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d67c:	f000 fa74 	bl	800db68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d680:	f000 fdec 	bl	800e25c <xTaskResumeAll>
 800d684:	e77a      	b.n	800d57c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d688:	f000 fa6e 	bl	800db68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d68c:	f000 fde6 	bl	800e25c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d692:	f000 fabb 	bl	800dc0c <prvIsQueueEmpty>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f43f af6f 	beq.w	800d57c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d69e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3730      	adds	r7, #48	@ 0x30
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	e000ed04 	.word	0xe000ed04

0800d6ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08e      	sub	sp, #56	@ 0x38
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10b      	bne.n	800d6e0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6cc:	f383 8811 	msr	BASEPRI, r3
 800d6d0:	f3bf 8f6f 	isb	sy
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	623b      	str	r3, [r7, #32]
}
 800d6da:	bf00      	nop
 800d6dc:	bf00      	nop
 800d6de:	e7fd      	b.n	800d6dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00b      	beq.n	800d700 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	61fb      	str	r3, [r7, #28]
}
 800d6fa:	bf00      	nop
 800d6fc:	bf00      	nop
 800d6fe:	e7fd      	b.n	800d6fc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d700:	f001 f9b4 	bl	800ea6c <xTaskGetSchedulerState>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d102      	bne.n	800d710 <xQueueSemaphoreTake+0x64>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <xQueueSemaphoreTake+0x68>
 800d710:	2301      	movs	r3, #1
 800d712:	e000      	b.n	800d716 <xQueueSemaphoreTake+0x6a>
 800d714:	2300      	movs	r3, #0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10b      	bne.n	800d732 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	61bb      	str	r3, [r7, #24]
}
 800d72c:	bf00      	nop
 800d72e:	bf00      	nop
 800d730:	e7fd      	b.n	800d72e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d732:	f002 f809 	bl	800f748 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d73a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d024      	beq.n	800d78c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d744:	1e5a      	subs	r2, r3, #1
 800d746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d748:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d104      	bne.n	800d75c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d752:	f001 fb05 	bl	800ed60 <pvTaskIncrementMutexHeldCount>
 800d756:	4602      	mov	r2, r0
 800d758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00f      	beq.n	800d784 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d766:	3310      	adds	r3, #16
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 ffa9 	bl	800e6c0 <xTaskRemoveFromEventList>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d007      	beq.n	800d784 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d774:	4b54      	ldr	r3, [pc, #336]	@ (800d8c8 <xQueueSemaphoreTake+0x21c>)
 800d776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d77a:	601a      	str	r2, [r3, #0]
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d784:	f002 f812 	bl	800f7ac <vPortExitCritical>
				return pdPASS;
 800d788:	2301      	movs	r3, #1
 800d78a:	e098      	b.n	800d8be <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d112      	bne.n	800d7b8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00b      	beq.n	800d7b0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d79c:	f383 8811 	msr	BASEPRI, r3
 800d7a0:	f3bf 8f6f 	isb	sy
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	617b      	str	r3, [r7, #20]
}
 800d7aa:	bf00      	nop
 800d7ac:	bf00      	nop
 800d7ae:	e7fd      	b.n	800d7ac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d7b0:	f001 fffc 	bl	800f7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	e082      	b.n	800d8be <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7be:	f107 030c 	add.w	r3, r7, #12
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 ffe0 	bl	800e788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7cc:	f001 ffee 	bl	800f7ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7d0:	f000 fd36 	bl	800e240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7d4:	f001 ffb8 	bl	800f748 <vPortEnterCritical>
 800d7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7de:	b25b      	sxtb	r3, r3
 800d7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e4:	d103      	bne.n	800d7ee <xQueueSemaphoreTake+0x142>
 800d7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7f4:	b25b      	sxtb	r3, r3
 800d7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fa:	d103      	bne.n	800d804 <xQueueSemaphoreTake+0x158>
 800d7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d804:	f001 ffd2 	bl	800f7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d808:	463a      	mov	r2, r7
 800d80a:	f107 030c 	add.w	r3, r7, #12
 800d80e:	4611      	mov	r1, r2
 800d810:	4618      	mov	r0, r3
 800d812:	f000 ffcf 	bl	800e7b4 <xTaskCheckForTimeOut>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d132      	bne.n	800d882 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d81c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d81e:	f000 f9f5 	bl	800dc0c <prvIsQueueEmpty>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d026      	beq.n	800d876 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d109      	bne.n	800d844 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d830:	f001 ff8a 	bl	800f748 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	4618      	mov	r0, r3
 800d83a:	f001 f935 	bl	800eaa8 <xTaskPriorityInherit>
 800d83e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d840:	f001 ffb4 	bl	800f7ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d846:	3324      	adds	r3, #36	@ 0x24
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	4611      	mov	r1, r2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 fee5 	bl	800e61c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d852:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d854:	f000 f988 	bl	800db68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d858:	f000 fd00 	bl	800e25c <xTaskResumeAll>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f47f af67 	bne.w	800d732 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d864:	4b18      	ldr	r3, [pc, #96]	@ (800d8c8 <xQueueSemaphoreTake+0x21c>)
 800d866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d86a:	601a      	str	r2, [r3, #0]
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	e75d      	b.n	800d732 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d876:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d878:	f000 f976 	bl	800db68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d87c:	f000 fcee 	bl	800e25c <xTaskResumeAll>
 800d880:	e757      	b.n	800d732 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d882:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d884:	f000 f970 	bl	800db68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d888:	f000 fce8 	bl	800e25c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d88c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d88e:	f000 f9bd 	bl	800dc0c <prvIsQueueEmpty>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	f43f af4c 	beq.w	800d732 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00d      	beq.n	800d8bc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d8a0:	f001 ff52 	bl	800f748 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d8a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8a6:	f000 f8b7 	bl	800da18 <prvGetDisinheritPriorityAfterTimeout>
 800d8aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f001 f9d0 	bl	800ec58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d8b8:	f001 ff78 	bl	800f7ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d8bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3738      	adds	r7, #56	@ 0x38
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	e000ed04 	.word	0xe000ed04

0800d8cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08e      	sub	sp, #56	@ 0x38
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10b      	bne.n	800d8fa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	623b      	str	r3, [r7, #32]
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop
 800d8f8:	e7fd      	b.n	800d8f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d103      	bne.n	800d908 <xQueueReceiveFromISR+0x3c>
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d904:	2b00      	cmp	r3, #0
 800d906:	d101      	bne.n	800d90c <xQueueReceiveFromISR+0x40>
 800d908:	2301      	movs	r3, #1
 800d90a:	e000      	b.n	800d90e <xQueueReceiveFromISR+0x42>
 800d90c:	2300      	movs	r3, #0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10b      	bne.n	800d92a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	61fb      	str	r3, [r7, #28]
}
 800d924:	bf00      	nop
 800d926:	bf00      	nop
 800d928:	e7fd      	b.n	800d926 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d92a:	f001 ffed 	bl	800f908 <vPortValidateInterruptPriority>
	__asm volatile
 800d92e:	f3ef 8211 	mrs	r2, BASEPRI
 800d932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	61ba      	str	r2, [r7, #24]
 800d944:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d946:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d948:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d94e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d952:	2b00      	cmp	r3, #0
 800d954:	d02f      	beq.n	800d9b6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d95c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d960:	68b9      	ldr	r1, [r7, #8]
 800d962:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d964:	f000 f8da 	bl	800db1c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96a:	1e5a      	subs	r2, r3, #1
 800d96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d970:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d978:	d112      	bne.n	800d9a0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d016      	beq.n	800d9b0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d984:	3310      	adds	r3, #16
 800d986:	4618      	mov	r0, r3
 800d988:	f000 fe9a 	bl	800e6c0 <xTaskRemoveFromEventList>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00e      	beq.n	800d9b0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00b      	beq.n	800d9b0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2201      	movs	r2, #1
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	e007      	b.n	800d9b0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	b25a      	sxtb	r2, r3
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9b4:	e001      	b.n	800d9ba <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	f383 8811 	msr	BASEPRI, r3
}
 800d9c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3738      	adds	r7, #56	@ 0x38
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10b      	bne.n	800d9fa <vQueueDelete+0x2a>
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	60bb      	str	r3, [r7, #8]
}
 800d9f4:	bf00      	nop
 800d9f6:	bf00      	nop
 800d9f8:	e7fd      	b.n	800d9f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f000 f95e 	bl	800dcbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800da06:	2b00      	cmp	r3, #0
 800da08:	d102      	bne.n	800da10 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f002 f88c 	bl	800fb28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800da10:	bf00      	nop
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da24:	2b00      	cmp	r3, #0
 800da26:	d006      	beq.n	800da36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800da32:	60fb      	str	r3, [r7, #12]
 800da34:	e001      	b.n	800da3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800da36:	2300      	movs	r3, #0
 800da38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da3a:	68fb      	ldr	r3, [r7, #12]
	}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da54:	2300      	movs	r3, #0
 800da56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da62:	2b00      	cmp	r3, #0
 800da64:	d10d      	bne.n	800da82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d14d      	bne.n	800db0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	4618      	mov	r0, r3
 800da74:	f001 f880 	bl	800eb78 <xTaskPriorityDisinherit>
 800da78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2200      	movs	r2, #0
 800da7e:	609a      	str	r2, [r3, #8]
 800da80:	e043      	b.n	800db0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d119      	bne.n	800dabc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6858      	ldr	r0, [r3, #4]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da90:	461a      	mov	r2, r3
 800da92:	68b9      	ldr	r1, [r7, #8]
 800da94:	f00d f9c7 	bl	801ae26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	685a      	ldr	r2, [r3, #4]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daa0:	441a      	add	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	685a      	ldr	r2, [r3, #4]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	689b      	ldr	r3, [r3, #8]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d32b      	bcc.n	800db0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	605a      	str	r2, [r3, #4]
 800daba:	e026      	b.n	800db0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	68d8      	ldr	r0, [r3, #12]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dac4:	461a      	mov	r2, r3
 800dac6:	68b9      	ldr	r1, [r7, #8]
 800dac8:	f00d f9ad 	bl	801ae26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	68da      	ldr	r2, [r3, #12]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dad4:	425b      	negs	r3, r3
 800dad6:	441a      	add	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	68da      	ldr	r2, [r3, #12]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d207      	bcs.n	800daf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	689a      	ldr	r2, [r3, #8]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf0:	425b      	negs	r3, r3
 800daf2:	441a      	add	r2, r3
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d105      	bne.n	800db0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	3b01      	subs	r3, #1
 800db08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	1c5a      	adds	r2, r3, #1
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800db12:	697b      	ldr	r3, [r7, #20]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3718      	adds	r7, #24
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d018      	beq.n	800db60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68da      	ldr	r2, [r3, #12]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db36:	441a      	add	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	68da      	ldr	r2, [r3, #12]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	429a      	cmp	r2, r3
 800db46:	d303      	bcc.n	800db50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68d9      	ldr	r1, [r3, #12]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db58:	461a      	mov	r2, r3
 800db5a:	6838      	ldr	r0, [r7, #0]
 800db5c:	f00d f963 	bl	801ae26 <memcpy>
	}
}
 800db60:	bf00      	nop
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db70:	f001 fdea 	bl	800f748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db7c:	e011      	b.n	800dba2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db82:	2b00      	cmp	r3, #0
 800db84:	d012      	beq.n	800dbac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	3324      	adds	r3, #36	@ 0x24
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 fd98 	bl	800e6c0 <xTaskRemoveFromEventList>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db96:	f000 fe71 	bl	800e87c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db9a:	7bfb      	ldrb	r3, [r7, #15]
 800db9c:	3b01      	subs	r3, #1
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	dce9      	bgt.n	800db7e <prvUnlockQueue+0x16>
 800dbaa:	e000      	b.n	800dbae <prvUnlockQueue+0x46>
					break;
 800dbac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	22ff      	movs	r2, #255	@ 0xff
 800dbb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dbb6:	f001 fdf9 	bl	800f7ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dbba:	f001 fdc5 	bl	800f748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dbc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbc6:	e011      	b.n	800dbec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	691b      	ldr	r3, [r3, #16]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d012      	beq.n	800dbf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	3310      	adds	r3, #16
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f000 fd73 	bl	800e6c0 <xTaskRemoveFromEventList>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dbe0:	f000 fe4c 	bl	800e87c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dbe4:	7bbb      	ldrb	r3, [r7, #14]
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	dce9      	bgt.n	800dbc8 <prvUnlockQueue+0x60>
 800dbf4:	e000      	b.n	800dbf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dbf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	22ff      	movs	r2, #255	@ 0xff
 800dbfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dc00:	f001 fdd4 	bl	800f7ac <vPortExitCritical>
}
 800dc04:	bf00      	nop
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc14:	f001 fd98 	bl	800f748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d102      	bne.n	800dc26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc20:	2301      	movs	r3, #1
 800dc22:	60fb      	str	r3, [r7, #12]
 800dc24:	e001      	b.n	800dc2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc26:	2300      	movs	r3, #0
 800dc28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc2a:	f001 fdbf 	bl	800f7ac <vPortExitCritical>

	return xReturn;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3710      	adds	r7, #16
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc40:	f001 fd82 	bl	800f748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d102      	bne.n	800dc56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc50:	2301      	movs	r3, #1
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	e001      	b.n	800dc5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc56:	2300      	movs	r3, #0
 800dc58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc5a:	f001 fda7 	bl	800f7ac <vPortExitCritical>

	return xReturn;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dc68:	b480      	push	{r7}
 800dc6a:	b085      	sub	sp, #20
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc72:	2300      	movs	r3, #0
 800dc74:	60fb      	str	r3, [r7, #12]
 800dc76:	e014      	b.n	800dca2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc78:	4a0f      	ldr	r2, [pc, #60]	@ (800dcb8 <vQueueAddToRegistry+0x50>)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d10b      	bne.n	800dc9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc84:	490c      	ldr	r1, [pc, #48]	@ (800dcb8 <vQueueAddToRegistry+0x50>)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc8e:	4a0a      	ldr	r2, [pc, #40]	@ (800dcb8 <vQueueAddToRegistry+0x50>)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	00db      	lsls	r3, r3, #3
 800dc94:	4413      	add	r3, r2
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc9a:	e006      	b.n	800dcaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	60fb      	str	r3, [r7, #12]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2b07      	cmp	r3, #7
 800dca6:	d9e7      	bls.n	800dc78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dca8:	bf00      	nop
 800dcaa:	bf00      	nop
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	240061cc 	.word	0x240061cc

0800dcbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	e016      	b.n	800dcf8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dcca:	4a10      	ldr	r2, [pc, #64]	@ (800dd0c <vQueueUnregisterQueue+0x50>)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	4413      	add	r3, r2
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d10b      	bne.n	800dcf2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dcda:	4a0c      	ldr	r2, [pc, #48]	@ (800dd0c <vQueueUnregisterQueue+0x50>)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2100      	movs	r1, #0
 800dce0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dce4:	4a09      	ldr	r2, [pc, #36]	@ (800dd0c <vQueueUnregisterQueue+0x50>)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	00db      	lsls	r3, r3, #3
 800dcea:	4413      	add	r3, r2
 800dcec:	2200      	movs	r2, #0
 800dcee:	605a      	str	r2, [r3, #4]
				break;
 800dcf0:	e006      	b.n	800dd00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	60fb      	str	r3, [r7, #12]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2b07      	cmp	r3, #7
 800dcfc:	d9e5      	bls.n	800dcca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dcfe:	bf00      	nop
 800dd00:	bf00      	nop
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	240061cc 	.word	0x240061cc

0800dd10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd20:	f001 fd12 	bl	800f748 <vPortEnterCritical>
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd2a:	b25b      	sxtb	r3, r3
 800dd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd30:	d103      	bne.n	800dd3a <vQueueWaitForMessageRestricted+0x2a>
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	2200      	movs	r2, #0
 800dd36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd40:	b25b      	sxtb	r3, r3
 800dd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd46:	d103      	bne.n	800dd50 <vQueueWaitForMessageRestricted+0x40>
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd50:	f001 fd2c 	bl	800f7ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d106      	bne.n	800dd6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	3324      	adds	r3, #36	@ 0x24
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	68b9      	ldr	r1, [r7, #8]
 800dd64:	4618      	mov	r0, r3
 800dd66:	f000 fc7f 	bl	800e668 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd6a:	6978      	ldr	r0, [r7, #20]
 800dd6c:	f7ff fefc 	bl	800db68 <prvUnlockQueue>
	}
 800dd70:	bf00      	nop
 800dd72:	3718      	adds	r7, #24
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b08e      	sub	sp, #56	@ 0x38
 800dd7c:	af04      	add	r7, sp, #16
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
 800dd84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10b      	bne.n	800dda4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800dd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd90:	f383 8811 	msr	BASEPRI, r3
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	623b      	str	r3, [r7, #32]
}
 800dd9e:	bf00      	nop
 800dda0:	bf00      	nop
 800dda2:	e7fd      	b.n	800dda0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10b      	bne.n	800ddc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ddaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	61fb      	str	r3, [r7, #28]
}
 800ddbc:	bf00      	nop
 800ddbe:	bf00      	nop
 800ddc0:	e7fd      	b.n	800ddbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ddc2:	23a8      	movs	r3, #168	@ 0xa8
 800ddc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	2ba8      	cmp	r3, #168	@ 0xa8
 800ddca:	d00b      	beq.n	800dde4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	61bb      	str	r3, [r7, #24]
}
 800ddde:	bf00      	nop
 800dde0:	bf00      	nop
 800dde2:	e7fd      	b.n	800dde0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dde4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d01e      	beq.n	800de2a <xTaskCreateStatic+0xb2>
 800ddec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d01b      	beq.n	800de2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ddf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddfa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfe:	2202      	movs	r2, #2
 800de00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de04:	2300      	movs	r3, #0
 800de06:	9303      	str	r3, [sp, #12]
 800de08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0a:	9302      	str	r3, [sp, #8]
 800de0c:	f107 0314 	add.w	r3, r7, #20
 800de10:	9301      	str	r3, [sp, #4]
 800de12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	68b9      	ldr	r1, [r7, #8]
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f000 f851 	bl	800dec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de24:	f000 f8f6 	bl	800e014 <prvAddNewTaskToReadyList>
 800de28:	e001      	b.n	800de2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800de2a:	2300      	movs	r3, #0
 800de2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de2e:	697b      	ldr	r3, [r7, #20]
	}
 800de30:	4618      	mov	r0, r3
 800de32:	3728      	adds	r7, #40	@ 0x28
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08c      	sub	sp, #48	@ 0x30
 800de3c:	af04      	add	r7, sp, #16
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	4613      	mov	r3, r2
 800de46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de48:	88fb      	ldrh	r3, [r7, #6]
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4618      	mov	r0, r3
 800de4e:	f001 fd9d 	bl	800f98c <pvPortMalloc>
 800de52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00e      	beq.n	800de78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de5a:	20a8      	movs	r0, #168	@ 0xa8
 800de5c:	f001 fd96 	bl	800f98c <pvPortMalloc>
 800de60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d003      	beq.n	800de70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	631a      	str	r2, [r3, #48]	@ 0x30
 800de6e:	e005      	b.n	800de7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de70:	6978      	ldr	r0, [r7, #20]
 800de72:	f001 fe59 	bl	800fb28 <vPortFree>
 800de76:	e001      	b.n	800de7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de78:	2300      	movs	r3, #0
 800de7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d017      	beq.n	800deb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	2200      	movs	r2, #0
 800de86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de8a:	88fa      	ldrh	r2, [r7, #6]
 800de8c:	2300      	movs	r3, #0
 800de8e:	9303      	str	r3, [sp, #12]
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	9302      	str	r3, [sp, #8]
 800de94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	68b9      	ldr	r1, [r7, #8]
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f000 f80f 	bl	800dec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dea6:	69f8      	ldr	r0, [r7, #28]
 800dea8:	f000 f8b4 	bl	800e014 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800deac:	2301      	movs	r3, #1
 800deae:	61bb      	str	r3, [r7, #24]
 800deb0:	e002      	b.n	800deb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800deb2:	f04f 33ff 	mov.w	r3, #4294967295
 800deb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800deb8:	69bb      	ldr	r3, [r7, #24]
	}
 800deba:	4618      	mov	r0, r3
 800debc:	3720      	adds	r7, #32
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
	...

0800dec4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b088      	sub	sp, #32
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ded2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	461a      	mov	r2, r3
 800dedc:	21a5      	movs	r1, #165	@ 0xa5
 800dede:	f00c fece 	bl	801ac7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dee6:	6879      	ldr	r1, [r7, #4]
 800dee8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800deec:	440b      	add	r3, r1
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4413      	add	r3, r2
 800def2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	f023 0307 	bic.w	r3, r3, #7
 800defa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	f003 0307 	and.w	r3, r3, #7
 800df02:	2b00      	cmp	r3, #0
 800df04:	d00b      	beq.n	800df1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	617b      	str	r3, [r7, #20]
}
 800df18:	bf00      	nop
 800df1a:	bf00      	nop
 800df1c:	e7fd      	b.n	800df1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d01f      	beq.n	800df64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df24:	2300      	movs	r3, #0
 800df26:	61fb      	str	r3, [r7, #28]
 800df28:	e012      	b.n	800df50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	4413      	add	r3, r2
 800df30:	7819      	ldrb	r1, [r3, #0]
 800df32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	4413      	add	r3, r2
 800df38:	3334      	adds	r3, #52	@ 0x34
 800df3a:	460a      	mov	r2, r1
 800df3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df3e:	68ba      	ldr	r2, [r7, #8]
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	4413      	add	r3, r2
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d006      	beq.n	800df58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	3301      	adds	r3, #1
 800df4e:	61fb      	str	r3, [r7, #28]
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	2b0f      	cmp	r3, #15
 800df54:	d9e9      	bls.n	800df2a <prvInitialiseNewTask+0x66>
 800df56:	e000      	b.n	800df5a <prvInitialiseNewTask+0x96>
			{
				break;
 800df58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df5c:	2200      	movs	r2, #0
 800df5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800df62:	e003      	b.n	800df6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df66:	2200      	movs	r2, #0
 800df68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df6e:	2b37      	cmp	r3, #55	@ 0x37
 800df70:	d901      	bls.n	800df76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df72:	2337      	movs	r3, #55	@ 0x37
 800df74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800df82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df84:	2200      	movs	r2, #0
 800df86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df8a:	3304      	adds	r3, #4
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fe fd7b 	bl	800ca88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df94:	3318      	adds	r3, #24
 800df96:	4618      	mov	r0, r3
 800df98:	f7fe fd76 	bl	800ca88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc4:	3354      	adds	r3, #84	@ 0x54
 800dfc6:	224c      	movs	r2, #76	@ 0x4c
 800dfc8:	2100      	movs	r1, #0
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f00c fe57 	bl	801ac7e <memset>
 800dfd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd2:	4a0d      	ldr	r2, [pc, #52]	@ (800e008 <prvInitialiseNewTask+0x144>)
 800dfd4:	659a      	str	r2, [r3, #88]	@ 0x58
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd8:	4a0c      	ldr	r2, [pc, #48]	@ (800e00c <prvInitialiseNewTask+0x148>)
 800dfda:	65da      	str	r2, [r3, #92]	@ 0x5c
 800dfdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfde:	4a0c      	ldr	r2, [pc, #48]	@ (800e010 <prvInitialiseNewTask+0x14c>)
 800dfe0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	68f9      	ldr	r1, [r7, #12]
 800dfe6:	69b8      	ldr	r0, [r7, #24]
 800dfe8:	f001 fa7c 	bl	800f4e4 <pxPortInitialiseStack>
 800dfec:	4602      	mov	r2, r0
 800dfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dffe:	bf00      	nop
 800e000:	3720      	adds	r7, #32
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	24014d1c 	.word	0x24014d1c
 800e00c:	24014d84 	.word	0x24014d84
 800e010:	24014dec 	.word	0x24014dec

0800e014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e01c:	f001 fb94 	bl	800f748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e020:	4b2d      	ldr	r3, [pc, #180]	@ (800e0d8 <prvAddNewTaskToReadyList+0xc4>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3301      	adds	r3, #1
 800e026:	4a2c      	ldr	r2, [pc, #176]	@ (800e0d8 <prvAddNewTaskToReadyList+0xc4>)
 800e028:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e02a:	4b2c      	ldr	r3, [pc, #176]	@ (800e0dc <prvAddNewTaskToReadyList+0xc8>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d109      	bne.n	800e046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e032:	4a2a      	ldr	r2, [pc, #168]	@ (800e0dc <prvAddNewTaskToReadyList+0xc8>)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e038:	4b27      	ldr	r3, [pc, #156]	@ (800e0d8 <prvAddNewTaskToReadyList+0xc4>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d110      	bne.n	800e062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e040:	f000 fc40 	bl	800e8c4 <prvInitialiseTaskLists>
 800e044:	e00d      	b.n	800e062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e046:	4b26      	ldr	r3, [pc, #152]	@ (800e0e0 <prvAddNewTaskToReadyList+0xcc>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d109      	bne.n	800e062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e04e:	4b23      	ldr	r3, [pc, #140]	@ (800e0dc <prvAddNewTaskToReadyList+0xc8>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e058:	429a      	cmp	r2, r3
 800e05a:	d802      	bhi.n	800e062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e05c:	4a1f      	ldr	r2, [pc, #124]	@ (800e0dc <prvAddNewTaskToReadyList+0xc8>)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e062:	4b20      	ldr	r3, [pc, #128]	@ (800e0e4 <prvAddNewTaskToReadyList+0xd0>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	3301      	adds	r3, #1
 800e068:	4a1e      	ldr	r2, [pc, #120]	@ (800e0e4 <prvAddNewTaskToReadyList+0xd0>)
 800e06a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e06c:	4b1d      	ldr	r3, [pc, #116]	@ (800e0e4 <prvAddNewTaskToReadyList+0xd0>)
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e078:	4b1b      	ldr	r3, [pc, #108]	@ (800e0e8 <prvAddNewTaskToReadyList+0xd4>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d903      	bls.n	800e088 <prvAddNewTaskToReadyList+0x74>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e084:	4a18      	ldr	r2, [pc, #96]	@ (800e0e8 <prvAddNewTaskToReadyList+0xd4>)
 800e086:	6013      	str	r3, [r2, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e08c:	4613      	mov	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	4a15      	ldr	r2, [pc, #84]	@ (800e0ec <prvAddNewTaskToReadyList+0xd8>)
 800e096:	441a      	add	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	3304      	adds	r3, #4
 800e09c:	4619      	mov	r1, r3
 800e09e:	4610      	mov	r0, r2
 800e0a0:	f7fe fcff 	bl	800caa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0a4:	f001 fb82 	bl	800f7ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800e0e0 <prvAddNewTaskToReadyList+0xcc>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00e      	beq.n	800e0ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e0dc <prvAddNewTaskToReadyList+0xc8>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d207      	bcs.n	800e0ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0be:	4b0c      	ldr	r3, [pc, #48]	@ (800e0f0 <prvAddNewTaskToReadyList+0xdc>)
 800e0c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0c4:	601a      	str	r2, [r3, #0]
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0ce:	bf00      	nop
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	240066e0 	.word	0x240066e0
 800e0dc:	2400620c 	.word	0x2400620c
 800e0e0:	240066ec 	.word	0x240066ec
 800e0e4:	240066fc 	.word	0x240066fc
 800e0e8:	240066e8 	.word	0x240066e8
 800e0ec:	24006210 	.word	0x24006210
 800e0f0:	e000ed04 	.word	0xe000ed04

0800e0f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d018      	beq.n	800e138 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e106:	4b14      	ldr	r3, [pc, #80]	@ (800e158 <vTaskDelay+0x64>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00b      	beq.n	800e126 <vTaskDelay+0x32>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	60bb      	str	r3, [r7, #8]
}
 800e120:	bf00      	nop
 800e122:	bf00      	nop
 800e124:	e7fd      	b.n	800e122 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e126:	f000 f88b 	bl	800e240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e12a:	2100      	movs	r1, #0
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 fe2b 	bl	800ed88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e132:	f000 f893 	bl	800e25c <xTaskResumeAll>
 800e136:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d107      	bne.n	800e14e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e13e:	4b07      	ldr	r3, [pc, #28]	@ (800e15c <vTaskDelay+0x68>)
 800e140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	f3bf 8f4f 	dsb	sy
 800e14a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e14e:	bf00      	nop
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	24006708 	.word	0x24006708
 800e15c:	e000ed04 	.word	0xe000ed04

0800e160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b08a      	sub	sp, #40	@ 0x28
 800e164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e16a:	2300      	movs	r3, #0
 800e16c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e16e:	463a      	mov	r2, r7
 800e170:	1d39      	adds	r1, r7, #4
 800e172:	f107 0308 	add.w	r3, r7, #8
 800e176:	4618      	mov	r0, r3
 800e178:	f7fe fc32 	bl	800c9e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e17c:	6839      	ldr	r1, [r7, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	68ba      	ldr	r2, [r7, #8]
 800e182:	9202      	str	r2, [sp, #8]
 800e184:	9301      	str	r3, [sp, #4]
 800e186:	2300      	movs	r3, #0
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	2300      	movs	r3, #0
 800e18c:	460a      	mov	r2, r1
 800e18e:	4924      	ldr	r1, [pc, #144]	@ (800e220 <vTaskStartScheduler+0xc0>)
 800e190:	4824      	ldr	r0, [pc, #144]	@ (800e224 <vTaskStartScheduler+0xc4>)
 800e192:	f7ff fdf1 	bl	800dd78 <xTaskCreateStatic>
 800e196:	4603      	mov	r3, r0
 800e198:	4a23      	ldr	r2, [pc, #140]	@ (800e228 <vTaskStartScheduler+0xc8>)
 800e19a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e19c:	4b22      	ldr	r3, [pc, #136]	@ (800e228 <vTaskStartScheduler+0xc8>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	617b      	str	r3, [r7, #20]
 800e1a8:	e001      	b.n	800e1ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d102      	bne.n	800e1ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1b4:	f000 fe3c 	bl	800ee30 <xTimerCreateTimerTask>
 800e1b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d11b      	bne.n	800e1f8 <vTaskStartScheduler+0x98>
	__asm volatile
 800e1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	613b      	str	r3, [r7, #16]
}
 800e1d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1d4:	4b15      	ldr	r3, [pc, #84]	@ (800e22c <vTaskStartScheduler+0xcc>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	3354      	adds	r3, #84	@ 0x54
 800e1da:	4a15      	ldr	r2, [pc, #84]	@ (800e230 <vTaskStartScheduler+0xd0>)
 800e1dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e1de:	4b15      	ldr	r3, [pc, #84]	@ (800e234 <vTaskStartScheduler+0xd4>)
 800e1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e1e6:	4b14      	ldr	r3, [pc, #80]	@ (800e238 <vTaskStartScheduler+0xd8>)
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e1ec:	4b13      	ldr	r3, [pc, #76]	@ (800e23c <vTaskStartScheduler+0xdc>)
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e1f2:	f001 fa05 	bl	800f600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e1f6:	e00f      	b.n	800e218 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1fe:	d10b      	bne.n	800e218 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	60fb      	str	r3, [r7, #12]
}
 800e212:	bf00      	nop
 800e214:	bf00      	nop
 800e216:	e7fd      	b.n	800e214 <vTaskStartScheduler+0xb4>
}
 800e218:	bf00      	nop
 800e21a:	3718      	adds	r7, #24
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	0801bb18 	.word	0x0801bb18
 800e224:	0800e895 	.word	0x0800e895
 800e228:	24006704 	.word	0x24006704
 800e22c:	2400620c 	.word	0x2400620c
 800e230:	24004a00 	.word	0x24004a00
 800e234:	24006700 	.word	0x24006700
 800e238:	240066ec 	.word	0x240066ec
 800e23c:	240066e4 	.word	0x240066e4

0800e240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e240:	b480      	push	{r7}
 800e242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e244:	4b04      	ldr	r3, [pc, #16]	@ (800e258 <vTaskSuspendAll+0x18>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	3301      	adds	r3, #1
 800e24a:	4a03      	ldr	r2, [pc, #12]	@ (800e258 <vTaskSuspendAll+0x18>)
 800e24c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e24e:	bf00      	nop
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr
 800e258:	24006708 	.word	0x24006708

0800e25c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e262:	2300      	movs	r3, #0
 800e264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e266:	2300      	movs	r3, #0
 800e268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e26a:	4b42      	ldr	r3, [pc, #264]	@ (800e374 <xTaskResumeAll+0x118>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10b      	bne.n	800e28a <xTaskResumeAll+0x2e>
	__asm volatile
 800e272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e276:	f383 8811 	msr	BASEPRI, r3
 800e27a:	f3bf 8f6f 	isb	sy
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	603b      	str	r3, [r7, #0]
}
 800e284:	bf00      	nop
 800e286:	bf00      	nop
 800e288:	e7fd      	b.n	800e286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e28a:	f001 fa5d 	bl	800f748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e28e:	4b39      	ldr	r3, [pc, #228]	@ (800e374 <xTaskResumeAll+0x118>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3b01      	subs	r3, #1
 800e294:	4a37      	ldr	r2, [pc, #220]	@ (800e374 <xTaskResumeAll+0x118>)
 800e296:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e298:	4b36      	ldr	r3, [pc, #216]	@ (800e374 <xTaskResumeAll+0x118>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d162      	bne.n	800e366 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2a0:	4b35      	ldr	r3, [pc, #212]	@ (800e378 <xTaskResumeAll+0x11c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d05e      	beq.n	800e366 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2a8:	e02f      	b.n	800e30a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2aa:	4b34      	ldr	r3, [pc, #208]	@ (800e37c <xTaskResumeAll+0x120>)
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	3318      	adds	r3, #24
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fe fc50 	bl	800cb5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	3304      	adds	r3, #4
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7fe fc4b 	bl	800cb5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ca:	4b2d      	ldr	r3, [pc, #180]	@ (800e380 <xTaskResumeAll+0x124>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d903      	bls.n	800e2da <xTaskResumeAll+0x7e>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d6:	4a2a      	ldr	r2, [pc, #168]	@ (800e380 <xTaskResumeAll+0x124>)
 800e2d8:	6013      	str	r3, [r2, #0]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2de:	4613      	mov	r3, r2
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4a27      	ldr	r2, [pc, #156]	@ (800e384 <xTaskResumeAll+0x128>)
 800e2e8:	441a      	add	r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	4610      	mov	r0, r2
 800e2f2:	f7fe fbd6 	bl	800caa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2fa:	4b23      	ldr	r3, [pc, #140]	@ (800e388 <xTaskResumeAll+0x12c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e300:	429a      	cmp	r2, r3
 800e302:	d302      	bcc.n	800e30a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e304:	4b21      	ldr	r3, [pc, #132]	@ (800e38c <xTaskResumeAll+0x130>)
 800e306:	2201      	movs	r2, #1
 800e308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e30a:	4b1c      	ldr	r3, [pc, #112]	@ (800e37c <xTaskResumeAll+0x120>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1cb      	bne.n	800e2aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d001      	beq.n	800e31c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e318:	f000 fb78 	bl	800ea0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e31c:	4b1c      	ldr	r3, [pc, #112]	@ (800e390 <xTaskResumeAll+0x134>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d010      	beq.n	800e34a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e328:	f000 f858 	bl	800e3dc <xTaskIncrementTick>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d002      	beq.n	800e338 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e332:	4b16      	ldr	r3, [pc, #88]	@ (800e38c <xTaskResumeAll+0x130>)
 800e334:	2201      	movs	r2, #1
 800e336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	3b01      	subs	r3, #1
 800e33c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1f1      	bne.n	800e328 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e344:	4b12      	ldr	r3, [pc, #72]	@ (800e390 <xTaskResumeAll+0x134>)
 800e346:	2200      	movs	r2, #0
 800e348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e34a:	4b10      	ldr	r3, [pc, #64]	@ (800e38c <xTaskResumeAll+0x130>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d009      	beq.n	800e366 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e352:	2301      	movs	r3, #1
 800e354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e356:	4b0f      	ldr	r3, [pc, #60]	@ (800e394 <xTaskResumeAll+0x138>)
 800e358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e35c:	601a      	str	r2, [r3, #0]
 800e35e:	f3bf 8f4f 	dsb	sy
 800e362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e366:	f001 fa21 	bl	800f7ac <vPortExitCritical>

	return xAlreadyYielded;
 800e36a:	68bb      	ldr	r3, [r7, #8]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	24006708 	.word	0x24006708
 800e378:	240066e0 	.word	0x240066e0
 800e37c:	240066a0 	.word	0x240066a0
 800e380:	240066e8 	.word	0x240066e8
 800e384:	24006210 	.word	0x24006210
 800e388:	2400620c 	.word	0x2400620c
 800e38c:	240066f4 	.word	0x240066f4
 800e390:	240066f0 	.word	0x240066f0
 800e394:	e000ed04 	.word	0xe000ed04

0800e398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e39e:	4b05      	ldr	r3, [pc, #20]	@ (800e3b4 <xTaskGetTickCount+0x1c>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e3a4:	687b      	ldr	r3, [r7, #4]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	240066e4 	.word	0x240066e4

0800e3b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3be:	f001 faa3 	bl	800f908 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e3c6:	4b04      	ldr	r3, [pc, #16]	@ (800e3d8 <xTaskGetTickCountFromISR+0x20>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e3cc:	683b      	ldr	r3, [r7, #0]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3708      	adds	r7, #8
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	240066e4 	.word	0x240066e4

0800e3dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b086      	sub	sp, #24
 800e3e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e6:	4b4f      	ldr	r3, [pc, #316]	@ (800e524 <xTaskIncrementTick+0x148>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f040 8090 	bne.w	800e510 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3f0:	4b4d      	ldr	r3, [pc, #308]	@ (800e528 <xTaskIncrementTick+0x14c>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3f8:	4a4b      	ldr	r2, [pc, #300]	@ (800e528 <xTaskIncrementTick+0x14c>)
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d121      	bne.n	800e448 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e404:	4b49      	ldr	r3, [pc, #292]	@ (800e52c <xTaskIncrementTick+0x150>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00b      	beq.n	800e426 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	603b      	str	r3, [r7, #0]
}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	e7fd      	b.n	800e422 <xTaskIncrementTick+0x46>
 800e426:	4b41      	ldr	r3, [pc, #260]	@ (800e52c <xTaskIncrementTick+0x150>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	60fb      	str	r3, [r7, #12]
 800e42c:	4b40      	ldr	r3, [pc, #256]	@ (800e530 <xTaskIncrementTick+0x154>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a3e      	ldr	r2, [pc, #248]	@ (800e52c <xTaskIncrementTick+0x150>)
 800e432:	6013      	str	r3, [r2, #0]
 800e434:	4a3e      	ldr	r2, [pc, #248]	@ (800e530 <xTaskIncrementTick+0x154>)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	6013      	str	r3, [r2, #0]
 800e43a:	4b3e      	ldr	r3, [pc, #248]	@ (800e534 <xTaskIncrementTick+0x158>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	3301      	adds	r3, #1
 800e440:	4a3c      	ldr	r2, [pc, #240]	@ (800e534 <xTaskIncrementTick+0x158>)
 800e442:	6013      	str	r3, [r2, #0]
 800e444:	f000 fae2 	bl	800ea0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e448:	4b3b      	ldr	r3, [pc, #236]	@ (800e538 <xTaskIncrementTick+0x15c>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	693a      	ldr	r2, [r7, #16]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d349      	bcc.n	800e4e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e452:	4b36      	ldr	r3, [pc, #216]	@ (800e52c <xTaskIncrementTick+0x150>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d104      	bne.n	800e466 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e45c:	4b36      	ldr	r3, [pc, #216]	@ (800e538 <xTaskIncrementTick+0x15c>)
 800e45e:	f04f 32ff 	mov.w	r2, #4294967295
 800e462:	601a      	str	r2, [r3, #0]
					break;
 800e464:	e03f      	b.n	800e4e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e466:	4b31      	ldr	r3, [pc, #196]	@ (800e52c <xTaskIncrementTick+0x150>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e476:	693a      	ldr	r2, [r7, #16]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d203      	bcs.n	800e486 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e47e:	4a2e      	ldr	r2, [pc, #184]	@ (800e538 <xTaskIncrementTick+0x15c>)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e484:	e02f      	b.n	800e4e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	3304      	adds	r3, #4
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fe fb66 	bl	800cb5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e494:	2b00      	cmp	r3, #0
 800e496:	d004      	beq.n	800e4a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	3318      	adds	r3, #24
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fe fb5d 	bl	800cb5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a6:	4b25      	ldr	r3, [pc, #148]	@ (800e53c <xTaskIncrementTick+0x160>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d903      	bls.n	800e4b6 <xTaskIncrementTick+0xda>
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b2:	4a22      	ldr	r2, [pc, #136]	@ (800e53c <xTaskIncrementTick+0x160>)
 800e4b4:	6013      	str	r3, [r2, #0]
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4413      	add	r3, r2
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	4a1f      	ldr	r2, [pc, #124]	@ (800e540 <xTaskIncrementTick+0x164>)
 800e4c4:	441a      	add	r2, r3
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	4610      	mov	r0, r2
 800e4ce:	f7fe fae8 	bl	800caa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4d6:	4b1b      	ldr	r3, [pc, #108]	@ (800e544 <xTaskIncrementTick+0x168>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d3b8      	bcc.n	800e452 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4e4:	e7b5      	b.n	800e452 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4e6:	4b17      	ldr	r3, [pc, #92]	@ (800e544 <xTaskIncrementTick+0x168>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ec:	4914      	ldr	r1, [pc, #80]	@ (800e540 <xTaskIncrementTick+0x164>)
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	4413      	add	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	440b      	add	r3, r1
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d901      	bls.n	800e502 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e4fe:	2301      	movs	r3, #1
 800e500:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e502:	4b11      	ldr	r3, [pc, #68]	@ (800e548 <xTaskIncrementTick+0x16c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d007      	beq.n	800e51a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e50a:	2301      	movs	r3, #1
 800e50c:	617b      	str	r3, [r7, #20]
 800e50e:	e004      	b.n	800e51a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e510:	4b0e      	ldr	r3, [pc, #56]	@ (800e54c <xTaskIncrementTick+0x170>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3301      	adds	r3, #1
 800e516:	4a0d      	ldr	r2, [pc, #52]	@ (800e54c <xTaskIncrementTick+0x170>)
 800e518:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e51a:	697b      	ldr	r3, [r7, #20]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3718      	adds	r7, #24
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	24006708 	.word	0x24006708
 800e528:	240066e4 	.word	0x240066e4
 800e52c:	24006698 	.word	0x24006698
 800e530:	2400669c 	.word	0x2400669c
 800e534:	240066f8 	.word	0x240066f8
 800e538:	24006700 	.word	0x24006700
 800e53c:	240066e8 	.word	0x240066e8
 800e540:	24006210 	.word	0x24006210
 800e544:	2400620c 	.word	0x2400620c
 800e548:	240066f4 	.word	0x240066f4
 800e54c:	240066f0 	.word	0x240066f0

0800e550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e556:	4b2b      	ldr	r3, [pc, #172]	@ (800e604 <vTaskSwitchContext+0xb4>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d003      	beq.n	800e566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e55e:	4b2a      	ldr	r3, [pc, #168]	@ (800e608 <vTaskSwitchContext+0xb8>)
 800e560:	2201      	movs	r2, #1
 800e562:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e564:	e047      	b.n	800e5f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e566:	4b28      	ldr	r3, [pc, #160]	@ (800e608 <vTaskSwitchContext+0xb8>)
 800e568:	2200      	movs	r2, #0
 800e56a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e56c:	4b27      	ldr	r3, [pc, #156]	@ (800e60c <vTaskSwitchContext+0xbc>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	60fb      	str	r3, [r7, #12]
 800e572:	e011      	b.n	800e598 <vTaskSwitchContext+0x48>
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d10b      	bne.n	800e592 <vTaskSwitchContext+0x42>
	__asm volatile
 800e57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57e:	f383 8811 	msr	BASEPRI, r3
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	f3bf 8f4f 	dsb	sy
 800e58a:	607b      	str	r3, [r7, #4]
}
 800e58c:	bf00      	nop
 800e58e:	bf00      	nop
 800e590:	e7fd      	b.n	800e58e <vTaskSwitchContext+0x3e>
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	3b01      	subs	r3, #1
 800e596:	60fb      	str	r3, [r7, #12]
 800e598:	491d      	ldr	r1, [pc, #116]	@ (800e610 <vTaskSwitchContext+0xc0>)
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	4613      	mov	r3, r2
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	4413      	add	r3, r2
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	440b      	add	r3, r1
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d0e3      	beq.n	800e574 <vTaskSwitchContext+0x24>
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4a16      	ldr	r2, [pc, #88]	@ (800e610 <vTaskSwitchContext+0xc0>)
 800e5b8:	4413      	add	r3, r2
 800e5ba:	60bb      	str	r3, [r7, #8]
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	605a      	str	r2, [r3, #4]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	685a      	ldr	r2, [r3, #4]
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	3308      	adds	r3, #8
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d104      	bne.n	800e5dc <vTaskSwitchContext+0x8c>
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	685a      	ldr	r2, [r3, #4]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	605a      	str	r2, [r3, #4]
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	4a0c      	ldr	r2, [pc, #48]	@ (800e614 <vTaskSwitchContext+0xc4>)
 800e5e4:	6013      	str	r3, [r2, #0]
 800e5e6:	4a09      	ldr	r2, [pc, #36]	@ (800e60c <vTaskSwitchContext+0xbc>)
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5ec:	4b09      	ldr	r3, [pc, #36]	@ (800e614 <vTaskSwitchContext+0xc4>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	3354      	adds	r3, #84	@ 0x54
 800e5f2:	4a09      	ldr	r2, [pc, #36]	@ (800e618 <vTaskSwitchContext+0xc8>)
 800e5f4:	6013      	str	r3, [r2, #0]
}
 800e5f6:	bf00      	nop
 800e5f8:	3714      	adds	r7, #20
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	24006708 	.word	0x24006708
 800e608:	240066f4 	.word	0x240066f4
 800e60c:	240066e8 	.word	0x240066e8
 800e610:	24006210 	.word	0x24006210
 800e614:	2400620c 	.word	0x2400620c
 800e618:	24004a00 	.word	0x24004a00

0800e61c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d10b      	bne.n	800e644 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	60fb      	str	r3, [r7, #12]
}
 800e63e:	bf00      	nop
 800e640:	bf00      	nop
 800e642:	e7fd      	b.n	800e640 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e644:	4b07      	ldr	r3, [pc, #28]	@ (800e664 <vTaskPlaceOnEventList+0x48>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	3318      	adds	r3, #24
 800e64a:	4619      	mov	r1, r3
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7fe fa4c 	bl	800caea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e652:	2101      	movs	r1, #1
 800e654:	6838      	ldr	r0, [r7, #0]
 800e656:	f000 fb97 	bl	800ed88 <prvAddCurrentTaskToDelayedList>
}
 800e65a:	bf00      	nop
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	2400620c 	.word	0x2400620c

0800e668 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d10b      	bne.n	800e692 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e67e:	f383 8811 	msr	BASEPRI, r3
 800e682:	f3bf 8f6f 	isb	sy
 800e686:	f3bf 8f4f 	dsb	sy
 800e68a:	617b      	str	r3, [r7, #20]
}
 800e68c:	bf00      	nop
 800e68e:	bf00      	nop
 800e690:	e7fd      	b.n	800e68e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e692:	4b0a      	ldr	r3, [pc, #40]	@ (800e6bc <vTaskPlaceOnEventListRestricted+0x54>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3318      	adds	r3, #24
 800e698:	4619      	mov	r1, r3
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f7fe fa01 	bl	800caa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d002      	beq.n	800e6ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6ac:	6879      	ldr	r1, [r7, #4]
 800e6ae:	68b8      	ldr	r0, [r7, #8]
 800e6b0:	f000 fb6a 	bl	800ed88 <prvAddCurrentTaskToDelayedList>
	}
 800e6b4:	bf00      	nop
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	2400620c 	.word	0x2400620c

0800e6c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10b      	bne.n	800e6ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	60fb      	str	r3, [r7, #12]
}
 800e6e8:	bf00      	nop
 800e6ea:	bf00      	nop
 800e6ec:	e7fd      	b.n	800e6ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	3318      	adds	r3, #24
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe fa32 	bl	800cb5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800e770 <xTaskRemoveFromEventList+0xb0>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d11d      	bne.n	800e73c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	3304      	adds	r3, #4
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe fa29 	bl	800cb5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e70e:	4b19      	ldr	r3, [pc, #100]	@ (800e774 <xTaskRemoveFromEventList+0xb4>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	429a      	cmp	r2, r3
 800e714:	d903      	bls.n	800e71e <xTaskRemoveFromEventList+0x5e>
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e71a:	4a16      	ldr	r2, [pc, #88]	@ (800e774 <xTaskRemoveFromEventList+0xb4>)
 800e71c:	6013      	str	r3, [r2, #0]
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e722:	4613      	mov	r3, r2
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	4413      	add	r3, r2
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	4a13      	ldr	r2, [pc, #76]	@ (800e778 <xTaskRemoveFromEventList+0xb8>)
 800e72c:	441a      	add	r2, r3
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	3304      	adds	r3, #4
 800e732:	4619      	mov	r1, r3
 800e734:	4610      	mov	r0, r2
 800e736:	f7fe f9b4 	bl	800caa2 <vListInsertEnd>
 800e73a:	e005      	b.n	800e748 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	3318      	adds	r3, #24
 800e740:	4619      	mov	r1, r3
 800e742:	480e      	ldr	r0, [pc, #56]	@ (800e77c <xTaskRemoveFromEventList+0xbc>)
 800e744:	f7fe f9ad 	bl	800caa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e74c:	4b0c      	ldr	r3, [pc, #48]	@ (800e780 <xTaskRemoveFromEventList+0xc0>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e752:	429a      	cmp	r2, r3
 800e754:	d905      	bls.n	800e762 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e756:	2301      	movs	r3, #1
 800e758:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e75a:	4b0a      	ldr	r3, [pc, #40]	@ (800e784 <xTaskRemoveFromEventList+0xc4>)
 800e75c:	2201      	movs	r2, #1
 800e75e:	601a      	str	r2, [r3, #0]
 800e760:	e001      	b.n	800e766 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e762:	2300      	movs	r3, #0
 800e764:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e766:	697b      	ldr	r3, [r7, #20]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3718      	adds	r7, #24
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	24006708 	.word	0x24006708
 800e774:	240066e8 	.word	0x240066e8
 800e778:	24006210 	.word	0x24006210
 800e77c:	240066a0 	.word	0x240066a0
 800e780:	2400620c 	.word	0x2400620c
 800e784:	240066f4 	.word	0x240066f4

0800e788 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e790:	4b06      	ldr	r3, [pc, #24]	@ (800e7ac <vTaskInternalSetTimeOutState+0x24>)
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e798:	4b05      	ldr	r3, [pc, #20]	@ (800e7b0 <vTaskInternalSetTimeOutState+0x28>)
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	605a      	str	r2, [r3, #4]
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr
 800e7ac:	240066f8 	.word	0x240066f8
 800e7b0:	240066e4 	.word	0x240066e4

0800e7b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b088      	sub	sp, #32
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d10b      	bne.n	800e7dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	613b      	str	r3, [r7, #16]
}
 800e7d6:	bf00      	nop
 800e7d8:	bf00      	nop
 800e7da:	e7fd      	b.n	800e7d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d10b      	bne.n	800e7fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	60fb      	str	r3, [r7, #12]
}
 800e7f4:	bf00      	nop
 800e7f6:	bf00      	nop
 800e7f8:	e7fd      	b.n	800e7f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e7fa:	f000 ffa5 	bl	800f748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e7fe:	4b1d      	ldr	r3, [pc, #116]	@ (800e874 <xTaskCheckForTimeOut+0xc0>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	69ba      	ldr	r2, [r7, #24]
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e816:	d102      	bne.n	800e81e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e818:	2300      	movs	r3, #0
 800e81a:	61fb      	str	r3, [r7, #28]
 800e81c:	e023      	b.n	800e866 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	4b15      	ldr	r3, [pc, #84]	@ (800e878 <xTaskCheckForTimeOut+0xc4>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	429a      	cmp	r2, r3
 800e828:	d007      	beq.n	800e83a <xTaskCheckForTimeOut+0x86>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	69ba      	ldr	r2, [r7, #24]
 800e830:	429a      	cmp	r2, r3
 800e832:	d302      	bcc.n	800e83a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e834:	2301      	movs	r3, #1
 800e836:	61fb      	str	r3, [r7, #28]
 800e838:	e015      	b.n	800e866 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	697a      	ldr	r2, [r7, #20]
 800e840:	429a      	cmp	r2, r3
 800e842:	d20b      	bcs.n	800e85c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	1ad2      	subs	r2, r2, r3
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f7ff ff99 	bl	800e788 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e856:	2300      	movs	r3, #0
 800e858:	61fb      	str	r3, [r7, #28]
 800e85a:	e004      	b.n	800e866 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	2200      	movs	r2, #0
 800e860:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e862:	2301      	movs	r3, #1
 800e864:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e866:	f000 ffa1 	bl	800f7ac <vPortExitCritical>

	return xReturn;
 800e86a:	69fb      	ldr	r3, [r7, #28]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3720      	adds	r7, #32
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	240066e4 	.word	0x240066e4
 800e878:	240066f8 	.word	0x240066f8

0800e87c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e87c:	b480      	push	{r7}
 800e87e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e880:	4b03      	ldr	r3, [pc, #12]	@ (800e890 <vTaskMissedYield+0x14>)
 800e882:	2201      	movs	r2, #1
 800e884:	601a      	str	r2, [r3, #0]
}
 800e886:	bf00      	nop
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	240066f4 	.word	0x240066f4

0800e894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e89c:	f000 f852 	bl	800e944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8a0:	4b06      	ldr	r3, [pc, #24]	@ (800e8bc <prvIdleTask+0x28>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d9f9      	bls.n	800e89c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e8a8:	4b05      	ldr	r3, [pc, #20]	@ (800e8c0 <prvIdleTask+0x2c>)
 800e8aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8ae:	601a      	str	r2, [r3, #0]
 800e8b0:	f3bf 8f4f 	dsb	sy
 800e8b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8b8:	e7f0      	b.n	800e89c <prvIdleTask+0x8>
 800e8ba:	bf00      	nop
 800e8bc:	24006210 	.word	0x24006210
 800e8c0:	e000ed04 	.word	0xe000ed04

0800e8c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	607b      	str	r3, [r7, #4]
 800e8ce:	e00c      	b.n	800e8ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4a12      	ldr	r2, [pc, #72]	@ (800e924 <prvInitialiseTaskLists+0x60>)
 800e8dc:	4413      	add	r3, r2
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fe f8b2 	bl	800ca48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	607b      	str	r3, [r7, #4]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b37      	cmp	r3, #55	@ 0x37
 800e8ee:	d9ef      	bls.n	800e8d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e8f0:	480d      	ldr	r0, [pc, #52]	@ (800e928 <prvInitialiseTaskLists+0x64>)
 800e8f2:	f7fe f8a9 	bl	800ca48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e8f6:	480d      	ldr	r0, [pc, #52]	@ (800e92c <prvInitialiseTaskLists+0x68>)
 800e8f8:	f7fe f8a6 	bl	800ca48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e8fc:	480c      	ldr	r0, [pc, #48]	@ (800e930 <prvInitialiseTaskLists+0x6c>)
 800e8fe:	f7fe f8a3 	bl	800ca48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e902:	480c      	ldr	r0, [pc, #48]	@ (800e934 <prvInitialiseTaskLists+0x70>)
 800e904:	f7fe f8a0 	bl	800ca48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e908:	480b      	ldr	r0, [pc, #44]	@ (800e938 <prvInitialiseTaskLists+0x74>)
 800e90a:	f7fe f89d 	bl	800ca48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e90e:	4b0b      	ldr	r3, [pc, #44]	@ (800e93c <prvInitialiseTaskLists+0x78>)
 800e910:	4a05      	ldr	r2, [pc, #20]	@ (800e928 <prvInitialiseTaskLists+0x64>)
 800e912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e914:	4b0a      	ldr	r3, [pc, #40]	@ (800e940 <prvInitialiseTaskLists+0x7c>)
 800e916:	4a05      	ldr	r2, [pc, #20]	@ (800e92c <prvInitialiseTaskLists+0x68>)
 800e918:	601a      	str	r2, [r3, #0]
}
 800e91a:	bf00      	nop
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	24006210 	.word	0x24006210
 800e928:	24006670 	.word	0x24006670
 800e92c:	24006684 	.word	0x24006684
 800e930:	240066a0 	.word	0x240066a0
 800e934:	240066b4 	.word	0x240066b4
 800e938:	240066cc 	.word	0x240066cc
 800e93c:	24006698 	.word	0x24006698
 800e940:	2400669c 	.word	0x2400669c

0800e944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e94a:	e019      	b.n	800e980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e94c:	f000 fefc 	bl	800f748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e950:	4b10      	ldr	r3, [pc, #64]	@ (800e994 <prvCheckTasksWaitingTermination+0x50>)
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	3304      	adds	r3, #4
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7fe f8fd 	bl	800cb5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e962:	4b0d      	ldr	r3, [pc, #52]	@ (800e998 <prvCheckTasksWaitingTermination+0x54>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	3b01      	subs	r3, #1
 800e968:	4a0b      	ldr	r2, [pc, #44]	@ (800e998 <prvCheckTasksWaitingTermination+0x54>)
 800e96a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e96c:	4b0b      	ldr	r3, [pc, #44]	@ (800e99c <prvCheckTasksWaitingTermination+0x58>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3b01      	subs	r3, #1
 800e972:	4a0a      	ldr	r2, [pc, #40]	@ (800e99c <prvCheckTasksWaitingTermination+0x58>)
 800e974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e976:	f000 ff19 	bl	800f7ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 f810 	bl	800e9a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e980:	4b06      	ldr	r3, [pc, #24]	@ (800e99c <prvCheckTasksWaitingTermination+0x58>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d1e1      	bne.n	800e94c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e988:	bf00      	nop
 800e98a:	bf00      	nop
 800e98c:	3708      	adds	r7, #8
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	240066b4 	.word	0x240066b4
 800e998:	240066e0 	.word	0x240066e0
 800e99c:	240066c8 	.word	0x240066c8

0800e9a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	3354      	adds	r3, #84	@ 0x54
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f00c f97f 	bl	801acb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d108      	bne.n	800e9ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f001 f8b1 	bl	800fb28 <vPortFree>
				vPortFree( pxTCB );
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f001 f8ae 	bl	800fb28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9cc:	e019      	b.n	800ea02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d103      	bne.n	800e9e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f001 f8a5 	bl	800fb28 <vPortFree>
	}
 800e9de:	e010      	b.n	800ea02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d00b      	beq.n	800ea02 <prvDeleteTCB+0x62>
	__asm volatile
 800e9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	60fb      	str	r3, [r7, #12]
}
 800e9fc:	bf00      	nop
 800e9fe:	bf00      	nop
 800ea00:	e7fd      	b.n	800e9fe <prvDeleteTCB+0x5e>
	}
 800ea02:	bf00      	nop
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
	...

0800ea0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea12:	4b0c      	ldr	r3, [pc, #48]	@ (800ea44 <prvResetNextTaskUnblockTime+0x38>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d104      	bne.n	800ea26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea48 <prvResetNextTaskUnblockTime+0x3c>)
 800ea1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea24:	e008      	b.n	800ea38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea26:	4b07      	ldr	r3, [pc, #28]	@ (800ea44 <prvResetNextTaskUnblockTime+0x38>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	4a04      	ldr	r2, [pc, #16]	@ (800ea48 <prvResetNextTaskUnblockTime+0x3c>)
 800ea36:	6013      	str	r3, [r2, #0]
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr
 800ea44:	24006698 	.word	0x24006698
 800ea48:	24006700 	.word	0x24006700

0800ea4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ea52:	4b05      	ldr	r3, [pc, #20]	@ (800ea68 <xTaskGetCurrentTaskHandle+0x1c>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ea58:	687b      	ldr	r3, [r7, #4]
	}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop
 800ea68:	2400620c 	.word	0x2400620c

0800ea6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea72:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa0 <xTaskGetSchedulerState+0x34>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d102      	bne.n	800ea80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	607b      	str	r3, [r7, #4]
 800ea7e:	e008      	b.n	800ea92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea80:	4b08      	ldr	r3, [pc, #32]	@ (800eaa4 <xTaskGetSchedulerState+0x38>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d102      	bne.n	800ea8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea88:	2302      	movs	r3, #2
 800ea8a:	607b      	str	r3, [r7, #4]
 800ea8c:	e001      	b.n	800ea92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea92:	687b      	ldr	r3, [r7, #4]
	}
 800ea94:	4618      	mov	r0, r3
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	240066ec 	.word	0x240066ec
 800eaa4:	24006708 	.word	0x24006708

0800eaa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eab4:	2300      	movs	r3, #0
 800eab6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d051      	beq.n	800eb62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eac2:	4b2a      	ldr	r3, [pc, #168]	@ (800eb6c <xTaskPriorityInherit+0xc4>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d241      	bcs.n	800eb50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	699b      	ldr	r3, [r3, #24]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	db06      	blt.n	800eae2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ead4:	4b25      	ldr	r3, [pc, #148]	@ (800eb6c <xTaskPriorityInherit+0xc4>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eada:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	6959      	ldr	r1, [r3, #20]
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaea:	4613      	mov	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4413      	add	r3, r2
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	4a1f      	ldr	r2, [pc, #124]	@ (800eb70 <xTaskPriorityInherit+0xc8>)
 800eaf4:	4413      	add	r3, r2
 800eaf6:	4299      	cmp	r1, r3
 800eaf8:	d122      	bne.n	800eb40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	3304      	adds	r3, #4
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe f82c 	bl	800cb5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb04:	4b19      	ldr	r3, [pc, #100]	@ (800eb6c <xTaskPriorityInherit+0xc4>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb12:	4b18      	ldr	r3, [pc, #96]	@ (800eb74 <xTaskPriorityInherit+0xcc>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d903      	bls.n	800eb22 <xTaskPriorityInherit+0x7a>
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1e:	4a15      	ldr	r2, [pc, #84]	@ (800eb74 <xTaskPriorityInherit+0xcc>)
 800eb20:	6013      	str	r3, [r2, #0]
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb26:	4613      	mov	r3, r2
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	4413      	add	r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4a10      	ldr	r2, [pc, #64]	@ (800eb70 <xTaskPriorityInherit+0xc8>)
 800eb30:	441a      	add	r2, r3
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	3304      	adds	r3, #4
 800eb36:	4619      	mov	r1, r3
 800eb38:	4610      	mov	r0, r2
 800eb3a:	f7fd ffb2 	bl	800caa2 <vListInsertEnd>
 800eb3e:	e004      	b.n	800eb4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb40:	4b0a      	ldr	r3, [pc, #40]	@ (800eb6c <xTaskPriorityInherit+0xc4>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	60fb      	str	r3, [r7, #12]
 800eb4e:	e008      	b.n	800eb62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eb54:	4b05      	ldr	r3, [pc, #20]	@ (800eb6c <xTaskPriorityInherit+0xc4>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d201      	bcs.n	800eb62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb62:	68fb      	ldr	r3, [r7, #12]
	}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	2400620c 	.word	0x2400620c
 800eb70:	24006210 	.word	0x24006210
 800eb74:	240066e8 	.word	0x240066e8

0800eb78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb84:	2300      	movs	r3, #0
 800eb86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d058      	beq.n	800ec40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ec4c <xTaskPriorityDisinherit+0xd4>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	693a      	ldr	r2, [r7, #16]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d00b      	beq.n	800ebb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9c:	f383 8811 	msr	BASEPRI, r3
 800eba0:	f3bf 8f6f 	isb	sy
 800eba4:	f3bf 8f4f 	dsb	sy
 800eba8:	60fb      	str	r3, [r7, #12]
}
 800ebaa:	bf00      	nop
 800ebac:	bf00      	nop
 800ebae:	e7fd      	b.n	800ebac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10b      	bne.n	800ebd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ebb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	60bb      	str	r3, [r7, #8]
}
 800ebca:	bf00      	nop
 800ebcc:	bf00      	nop
 800ebce:	e7fd      	b.n	800ebcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebd4:	1e5a      	subs	r2, r3, #1
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d02c      	beq.n	800ec40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d128      	bne.n	800ec40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7fd ffb2 	bl	800cb5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec10:	4b0f      	ldr	r3, [pc, #60]	@ (800ec50 <xTaskPriorityDisinherit+0xd8>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d903      	bls.n	800ec20 <xTaskPriorityDisinherit+0xa8>
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec1c:	4a0c      	ldr	r2, [pc, #48]	@ (800ec50 <xTaskPriorityDisinherit+0xd8>)
 800ec1e:	6013      	str	r3, [r2, #0]
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec24:	4613      	mov	r3, r2
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	4413      	add	r3, r2
 800ec2a:	009b      	lsls	r3, r3, #2
 800ec2c:	4a09      	ldr	r2, [pc, #36]	@ (800ec54 <xTaskPriorityDisinherit+0xdc>)
 800ec2e:	441a      	add	r2, r3
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	3304      	adds	r3, #4
 800ec34:	4619      	mov	r1, r3
 800ec36:	4610      	mov	r0, r2
 800ec38:	f7fd ff33 	bl	800caa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec40:	697b      	ldr	r3, [r7, #20]
	}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3718      	adds	r7, #24
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	2400620c 	.word	0x2400620c
 800ec50:	240066e8 	.word	0x240066e8
 800ec54:	24006210 	.word	0x24006210

0800ec58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b088      	sub	sp, #32
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec66:	2301      	movs	r3, #1
 800ec68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d06c      	beq.n	800ed4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d10b      	bne.n	800ec90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ec78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec7c:	f383 8811 	msr	BASEPRI, r3
 800ec80:	f3bf 8f6f 	isb	sy
 800ec84:	f3bf 8f4f 	dsb	sy
 800ec88:	60fb      	str	r3, [r7, #12]
}
 800ec8a:	bf00      	nop
 800ec8c:	bf00      	nop
 800ec8e:	e7fd      	b.n	800ec8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec94:	683a      	ldr	r2, [r7, #0]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d902      	bls.n	800eca0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	61fb      	str	r3, [r7, #28]
 800ec9e:	e002      	b.n	800eca6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eca4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecaa:	69fa      	ldr	r2, [r7, #28]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d04c      	beq.n	800ed4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecb4:	697a      	ldr	r2, [r7, #20]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d147      	bne.n	800ed4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ecba:	4b26      	ldr	r3, [pc, #152]	@ (800ed54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	69ba      	ldr	r2, [r7, #24]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d10b      	bne.n	800ecdc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ecc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc8:	f383 8811 	msr	BASEPRI, r3
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	60bb      	str	r3, [r7, #8]
}
 800ecd6:	bf00      	nop
 800ecd8:	bf00      	nop
 800ecda:	e7fd      	b.n	800ecd8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ece0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	69fa      	ldr	r2, [r7, #28]
 800ece6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	db04      	blt.n	800ecfa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	6959      	ldr	r1, [r3, #20]
 800ecfe:	693a      	ldr	r2, [r7, #16]
 800ed00:	4613      	mov	r3, r2
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	4413      	add	r3, r2
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	4a13      	ldr	r2, [pc, #76]	@ (800ed58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed0a:	4413      	add	r3, r2
 800ed0c:	4299      	cmp	r1, r3
 800ed0e:	d11c      	bne.n	800ed4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	3304      	adds	r3, #4
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7fd ff21 	bl	800cb5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ed5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d903      	bls.n	800ed2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ed5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ed2c:	6013      	str	r3, [r2, #0]
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed32:	4613      	mov	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	4413      	add	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4a07      	ldr	r2, [pc, #28]	@ (800ed58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed3c:	441a      	add	r2, r3
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	3304      	adds	r3, #4
 800ed42:	4619      	mov	r1, r3
 800ed44:	4610      	mov	r0, r2
 800ed46:	f7fd feac 	bl	800caa2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed4a:	bf00      	nop
 800ed4c:	3720      	adds	r7, #32
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	2400620c 	.word	0x2400620c
 800ed58:	24006210 	.word	0x24006210
 800ed5c:	240066e8 	.word	0x240066e8

0800ed60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ed60:	b480      	push	{r7}
 800ed62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed64:	4b07      	ldr	r3, [pc, #28]	@ (800ed84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d004      	beq.n	800ed76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed6c:	4b05      	ldr	r3, [pc, #20]	@ (800ed84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed72:	3201      	adds	r2, #1
 800ed74:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ed76:	4b03      	ldr	r3, [pc, #12]	@ (800ed84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed78:	681b      	ldr	r3, [r3, #0]
	}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr
 800ed84:	2400620c 	.word	0x2400620c

0800ed88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed92:	4b21      	ldr	r3, [pc, #132]	@ (800ee18 <prvAddCurrentTaskToDelayedList+0x90>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed98:	4b20      	ldr	r3, [pc, #128]	@ (800ee1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	3304      	adds	r3, #4
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fd fedc 	bl	800cb5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edaa:	d10a      	bne.n	800edc2 <prvAddCurrentTaskToDelayedList+0x3a>
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d007      	beq.n	800edc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edb2:	4b1a      	ldr	r3, [pc, #104]	@ (800ee1c <prvAddCurrentTaskToDelayedList+0x94>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	3304      	adds	r3, #4
 800edb8:	4619      	mov	r1, r3
 800edba:	4819      	ldr	r0, [pc, #100]	@ (800ee20 <prvAddCurrentTaskToDelayedList+0x98>)
 800edbc:	f7fd fe71 	bl	800caa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800edc0:	e026      	b.n	800ee10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4413      	add	r3, r2
 800edc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800edca:	4b14      	ldr	r3, [pc, #80]	@ (800ee1c <prvAddCurrentTaskToDelayedList+0x94>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d209      	bcs.n	800edee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edda:	4b12      	ldr	r3, [pc, #72]	@ (800ee24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	4b0f      	ldr	r3, [pc, #60]	@ (800ee1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	3304      	adds	r3, #4
 800ede4:	4619      	mov	r1, r3
 800ede6:	4610      	mov	r0, r2
 800ede8:	f7fd fe7f 	bl	800caea <vListInsert>
}
 800edec:	e010      	b.n	800ee10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edee:	4b0e      	ldr	r3, [pc, #56]	@ (800ee28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ee1c <prvAddCurrentTaskToDelayedList+0x94>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	3304      	adds	r3, #4
 800edf8:	4619      	mov	r1, r3
 800edfa:	4610      	mov	r0, r2
 800edfc:	f7fd fe75 	bl	800caea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee00:	4b0a      	ldr	r3, [pc, #40]	@ (800ee2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d202      	bcs.n	800ee10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee0a:	4a08      	ldr	r2, [pc, #32]	@ (800ee2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	6013      	str	r3, [r2, #0]
}
 800ee10:	bf00      	nop
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	240066e4 	.word	0x240066e4
 800ee1c:	2400620c 	.word	0x2400620c
 800ee20:	240066cc 	.word	0x240066cc
 800ee24:	2400669c 	.word	0x2400669c
 800ee28:	24006698 	.word	0x24006698
 800ee2c:	24006700 	.word	0x24006700

0800ee30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b08a      	sub	sp, #40	@ 0x28
 800ee34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ee36:	2300      	movs	r3, #0
 800ee38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ee3a:	f000 fb13 	bl	800f464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ee3e:	4b1d      	ldr	r3, [pc, #116]	@ (800eeb4 <xTimerCreateTimerTask+0x84>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d021      	beq.n	800ee8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ee46:	2300      	movs	r3, #0
 800ee48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee4e:	1d3a      	adds	r2, r7, #4
 800ee50:	f107 0108 	add.w	r1, r7, #8
 800ee54:	f107 030c 	add.w	r3, r7, #12
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fd fddb 	bl	800ca14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee5e:	6879      	ldr	r1, [r7, #4]
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	9202      	str	r2, [sp, #8]
 800ee66:	9301      	str	r3, [sp, #4]
 800ee68:	2302      	movs	r3, #2
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	460a      	mov	r2, r1
 800ee70:	4911      	ldr	r1, [pc, #68]	@ (800eeb8 <xTimerCreateTimerTask+0x88>)
 800ee72:	4812      	ldr	r0, [pc, #72]	@ (800eebc <xTimerCreateTimerTask+0x8c>)
 800ee74:	f7fe ff80 	bl	800dd78 <xTaskCreateStatic>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	4a11      	ldr	r2, [pc, #68]	@ (800eec0 <xTimerCreateTimerTask+0x90>)
 800ee7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ee7e:	4b10      	ldr	r3, [pc, #64]	@ (800eec0 <xTimerCreateTimerTask+0x90>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d001      	beq.n	800ee8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ee86:	2301      	movs	r3, #1
 800ee88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d10b      	bne.n	800eea8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ee90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee94:	f383 8811 	msr	BASEPRI, r3
 800ee98:	f3bf 8f6f 	isb	sy
 800ee9c:	f3bf 8f4f 	dsb	sy
 800eea0:	613b      	str	r3, [r7, #16]
}
 800eea2:	bf00      	nop
 800eea4:	bf00      	nop
 800eea6:	e7fd      	b.n	800eea4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eea8:	697b      	ldr	r3, [r7, #20]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3718      	adds	r7, #24
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	2400673c 	.word	0x2400673c
 800eeb8:	0801bb20 	.word	0x0801bb20
 800eebc:	0800effd 	.word	0x0800effd
 800eec0:	24006740 	.word	0x24006740

0800eec4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08a      	sub	sp, #40	@ 0x28
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
 800eed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d10b      	bne.n	800eef4 <xTimerGenericCommand+0x30>
	__asm volatile
 800eedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	623b      	str	r3, [r7, #32]
}
 800eeee:	bf00      	nop
 800eef0:	bf00      	nop
 800eef2:	e7fd      	b.n	800eef0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eef4:	4b19      	ldr	r3, [pc, #100]	@ (800ef5c <xTimerGenericCommand+0x98>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d02a      	beq.n	800ef52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	2b05      	cmp	r3, #5
 800ef0c:	dc18      	bgt.n	800ef40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef0e:	f7ff fdad 	bl	800ea6c <xTaskGetSchedulerState>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b02      	cmp	r3, #2
 800ef16:	d109      	bne.n	800ef2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef18:	4b10      	ldr	r3, [pc, #64]	@ (800ef5c <xTimerGenericCommand+0x98>)
 800ef1a:	6818      	ldr	r0, [r3, #0]
 800ef1c:	f107 0110 	add.w	r1, r7, #16
 800ef20:	2300      	movs	r3, #0
 800ef22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef24:	f7fe f8b0 	bl	800d088 <xQueueGenericSend>
 800ef28:	6278      	str	r0, [r7, #36]	@ 0x24
 800ef2a:	e012      	b.n	800ef52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ef5c <xTimerGenericCommand+0x98>)
 800ef2e:	6818      	ldr	r0, [r3, #0]
 800ef30:	f107 0110 	add.w	r1, r7, #16
 800ef34:	2300      	movs	r3, #0
 800ef36:	2200      	movs	r2, #0
 800ef38:	f7fe f8a6 	bl	800d088 <xQueueGenericSend>
 800ef3c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ef3e:	e008      	b.n	800ef52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef40:	4b06      	ldr	r3, [pc, #24]	@ (800ef5c <xTimerGenericCommand+0x98>)
 800ef42:	6818      	ldr	r0, [r3, #0]
 800ef44:	f107 0110 	add.w	r1, r7, #16
 800ef48:	2300      	movs	r3, #0
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	f7fe f99e 	bl	800d28c <xQueueGenericSendFromISR>
 800ef50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ef52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3728      	adds	r7, #40	@ 0x28
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	2400673c 	.word	0x2400673c

0800ef60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b088      	sub	sp, #32
 800ef64:	af02      	add	r7, sp, #8
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef6a:	4b23      	ldr	r3, [pc, #140]	@ (800eff8 <prvProcessExpiredTimer+0x98>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	3304      	adds	r3, #4
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fd fdef 	bl	800cb5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef84:	f003 0304 	and.w	r3, r3, #4
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d023      	beq.n	800efd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	699a      	ldr	r2, [r3, #24]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	18d1      	adds	r1, r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	6978      	ldr	r0, [r7, #20]
 800ef9a:	f000 f8d5 	bl	800f148 <prvInsertTimerInActiveList>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d020      	beq.n	800efe6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efa4:	2300      	movs	r3, #0
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	2300      	movs	r3, #0
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	2100      	movs	r1, #0
 800efae:	6978      	ldr	r0, [r7, #20]
 800efb0:	f7ff ff88 	bl	800eec4 <xTimerGenericCommand>
 800efb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d114      	bne.n	800efe6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800efbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	60fb      	str	r3, [r7, #12]
}
 800efce:	bf00      	nop
 800efd0:	bf00      	nop
 800efd2:	e7fd      	b.n	800efd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efda:	f023 0301 	bic.w	r3, r3, #1
 800efde:	b2da      	uxtb	r2, r3
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	6a1b      	ldr	r3, [r3, #32]
 800efea:	6978      	ldr	r0, [r7, #20]
 800efec:	4798      	blx	r3
}
 800efee:	bf00      	nop
 800eff0:	3718      	adds	r7, #24
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	24006734 	.word	0x24006734

0800effc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f004:	f107 0308 	add.w	r3, r7, #8
 800f008:	4618      	mov	r0, r3
 800f00a:	f000 f859 	bl	800f0c0 <prvGetNextExpireTime>
 800f00e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	4619      	mov	r1, r3
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f000 f805 	bl	800f024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f01a:	f000 f8d7 	bl	800f1cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f01e:	bf00      	nop
 800f020:	e7f0      	b.n	800f004 <prvTimerTask+0x8>
	...

0800f024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f02e:	f7ff f907 	bl	800e240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f032:	f107 0308 	add.w	r3, r7, #8
 800f036:	4618      	mov	r0, r3
 800f038:	f000 f866 	bl	800f108 <prvSampleTimeNow>
 800f03c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d130      	bne.n	800f0a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10a      	bne.n	800f060 <prvProcessTimerOrBlockTask+0x3c>
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d806      	bhi.n	800f060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f052:	f7ff f903 	bl	800e25c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f056:	68f9      	ldr	r1, [r7, #12]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7ff ff81 	bl	800ef60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f05e:	e024      	b.n	800f0aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d008      	beq.n	800f078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f066:	4b13      	ldr	r3, [pc, #76]	@ (800f0b4 <prvProcessTimerOrBlockTask+0x90>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d101      	bne.n	800f074 <prvProcessTimerOrBlockTask+0x50>
 800f070:	2301      	movs	r3, #1
 800f072:	e000      	b.n	800f076 <prvProcessTimerOrBlockTask+0x52>
 800f074:	2300      	movs	r3, #0
 800f076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f078:	4b0f      	ldr	r3, [pc, #60]	@ (800f0b8 <prvProcessTimerOrBlockTask+0x94>)
 800f07a:	6818      	ldr	r0, [r3, #0]
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	683a      	ldr	r2, [r7, #0]
 800f084:	4619      	mov	r1, r3
 800f086:	f7fe fe43 	bl	800dd10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f08a:	f7ff f8e7 	bl	800e25c <xTaskResumeAll>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d10a      	bne.n	800f0aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f094:	4b09      	ldr	r3, [pc, #36]	@ (800f0bc <prvProcessTimerOrBlockTask+0x98>)
 800f096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f09a:	601a      	str	r2, [r3, #0]
 800f09c:	f3bf 8f4f 	dsb	sy
 800f0a0:	f3bf 8f6f 	isb	sy
}
 800f0a4:	e001      	b.n	800f0aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f0a6:	f7ff f8d9 	bl	800e25c <xTaskResumeAll>
}
 800f0aa:	bf00      	nop
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	24006738 	.word	0x24006738
 800f0b8:	2400673c 	.word	0x2400673c
 800f0bc:	e000ed04 	.word	0xe000ed04

0800f0c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f104 <prvGetNextExpireTime+0x44>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d101      	bne.n	800f0d6 <prvGetNextExpireTime+0x16>
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	e000      	b.n	800f0d8 <prvGetNextExpireTime+0x18>
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d105      	bne.n	800f0f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0e4:	4b07      	ldr	r3, [pc, #28]	@ (800f104 <prvGetNextExpireTime+0x44>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	60fb      	str	r3, [r7, #12]
 800f0ee:	e001      	b.n	800f0f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	24006734 	.word	0x24006734

0800f108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f110:	f7ff f942 	bl	800e398 <xTaskGetTickCount>
 800f114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f116:	4b0b      	ldr	r3, [pc, #44]	@ (800f144 <prvSampleTimeNow+0x3c>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d205      	bcs.n	800f12c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f120:	f000 f93a 	bl	800f398 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2201      	movs	r2, #1
 800f128:	601a      	str	r2, [r3, #0]
 800f12a:	e002      	b.n	800f132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f132:	4a04      	ldr	r2, [pc, #16]	@ (800f144 <prvSampleTimeNow+0x3c>)
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f138:	68fb      	ldr	r3, [r7, #12]
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	24006744 	.word	0x24006744

0800f148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	607a      	str	r2, [r7, #4]
 800f154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f156:	2300      	movs	r3, #0
 800f158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	68ba      	ldr	r2, [r7, #8]
 800f15e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	68fa      	ldr	r2, [r7, #12]
 800f164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d812      	bhi.n	800f194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	1ad2      	subs	r2, r2, r3
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	699b      	ldr	r3, [r3, #24]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d302      	bcc.n	800f182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f17c:	2301      	movs	r3, #1
 800f17e:	617b      	str	r3, [r7, #20]
 800f180:	e01b      	b.n	800f1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f182:	4b10      	ldr	r3, [pc, #64]	@ (800f1c4 <prvInsertTimerInActiveList+0x7c>)
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	3304      	adds	r3, #4
 800f18a:	4619      	mov	r1, r3
 800f18c:	4610      	mov	r0, r2
 800f18e:	f7fd fcac 	bl	800caea <vListInsert>
 800f192:	e012      	b.n	800f1ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d206      	bcs.n	800f1aa <prvInsertTimerInActiveList+0x62>
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d302      	bcc.n	800f1aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	617b      	str	r3, [r7, #20]
 800f1a8:	e007      	b.n	800f1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1aa:	4b07      	ldr	r3, [pc, #28]	@ (800f1c8 <prvInsertTimerInActiveList+0x80>)
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3304      	adds	r3, #4
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	4610      	mov	r0, r2
 800f1b6:	f7fd fc98 	bl	800caea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f1ba:	697b      	ldr	r3, [r7, #20]
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3718      	adds	r7, #24
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	24006738 	.word	0x24006738
 800f1c8:	24006734 	.word	0x24006734

0800f1cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b08e      	sub	sp, #56	@ 0x38
 800f1d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1d2:	e0ce      	b.n	800f372 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	da19      	bge.n	800f20e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f1da:	1d3b      	adds	r3, r7, #4
 800f1dc:	3304      	adds	r3, #4
 800f1de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d10b      	bne.n	800f1fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ea:	f383 8811 	msr	BASEPRI, r3
 800f1ee:	f3bf 8f6f 	isb	sy
 800f1f2:	f3bf 8f4f 	dsb	sy
 800f1f6:	61fb      	str	r3, [r7, #28]
}
 800f1f8:	bf00      	nop
 800f1fa:	bf00      	nop
 800f1fc:	e7fd      	b.n	800f1fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f204:	6850      	ldr	r0, [r2, #4]
 800f206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f208:	6892      	ldr	r2, [r2, #8]
 800f20a:	4611      	mov	r1, r2
 800f20c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	f2c0 80ae 	blt.w	800f372 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f21c:	695b      	ldr	r3, [r3, #20]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d004      	beq.n	800f22c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f224:	3304      	adds	r3, #4
 800f226:	4618      	mov	r0, r3
 800f228:	f7fd fc98 	bl	800cb5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f22c:	463b      	mov	r3, r7
 800f22e:	4618      	mov	r0, r3
 800f230:	f7ff ff6a 	bl	800f108 <prvSampleTimeNow>
 800f234:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b09      	cmp	r3, #9
 800f23a:	f200 8097 	bhi.w	800f36c <prvProcessReceivedCommands+0x1a0>
 800f23e:	a201      	add	r2, pc, #4	@ (adr r2, 800f244 <prvProcessReceivedCommands+0x78>)
 800f240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f244:	0800f26d 	.word	0x0800f26d
 800f248:	0800f26d 	.word	0x0800f26d
 800f24c:	0800f26d 	.word	0x0800f26d
 800f250:	0800f2e3 	.word	0x0800f2e3
 800f254:	0800f2f7 	.word	0x0800f2f7
 800f258:	0800f343 	.word	0x0800f343
 800f25c:	0800f26d 	.word	0x0800f26d
 800f260:	0800f26d 	.word	0x0800f26d
 800f264:	0800f2e3 	.word	0x0800f2e3
 800f268:	0800f2f7 	.word	0x0800f2f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f26e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f272:	f043 0301 	orr.w	r3, r3, #1
 800f276:	b2da      	uxtb	r2, r3
 800f278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f27a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f27e:	68ba      	ldr	r2, [r7, #8]
 800f280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f282:	699b      	ldr	r3, [r3, #24]
 800f284:	18d1      	adds	r1, r2, r3
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f28a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f28c:	f7ff ff5c 	bl	800f148 <prvInsertTimerInActiveList>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d06c      	beq.n	800f370 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f298:	6a1b      	ldr	r3, [r3, #32]
 800f29a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f29c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2a4:	f003 0304 	and.w	r3, r3, #4
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d061      	beq.n	800f370 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b0:	699b      	ldr	r3, [r3, #24]
 800f2b2:	441a      	add	r2, r3
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2be:	f7ff fe01 	bl	800eec4 <xTimerGenericCommand>
 800f2c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f2c4:	6a3b      	ldr	r3, [r7, #32]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d152      	bne.n	800f370 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ce:	f383 8811 	msr	BASEPRI, r3
 800f2d2:	f3bf 8f6f 	isb	sy
 800f2d6:	f3bf 8f4f 	dsb	sy
 800f2da:	61bb      	str	r3, [r7, #24]
}
 800f2dc:	bf00      	nop
 800f2de:	bf00      	nop
 800f2e0:	e7fd      	b.n	800f2de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2e8:	f023 0301 	bic.w	r3, r3, #1
 800f2ec:	b2da      	uxtb	r2, r3
 800f2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f2f4:	e03d      	b.n	800f372 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2fc:	f043 0301 	orr.w	r3, r3, #1
 800f300:	b2da      	uxtb	r2, r3
 800f302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f308:	68ba      	ldr	r2, [r7, #8]
 800f30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f30c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f310:	699b      	ldr	r3, [r3, #24]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d10b      	bne.n	800f32e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	617b      	str	r3, [r7, #20]
}
 800f328:	bf00      	nop
 800f32a:	bf00      	nop
 800f32c:	e7fd      	b.n	800f32a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f330:	699a      	ldr	r2, [r3, #24]
 800f332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f334:	18d1      	adds	r1, r2, r3
 800f336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f33a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f33c:	f7ff ff04 	bl	800f148 <prvInsertTimerInActiveList>
					break;
 800f340:	e017      	b.n	800f372 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f348:	f003 0302 	and.w	r3, r3, #2
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d103      	bne.n	800f358 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f352:	f000 fbe9 	bl	800fb28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f356:	e00c      	b.n	800f372 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f35e:	f023 0301 	bic.w	r3, r3, #1
 800f362:	b2da      	uxtb	r2, r3
 800f364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f36a:	e002      	b.n	800f372 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f36c:	bf00      	nop
 800f36e:	e000      	b.n	800f372 <prvProcessReceivedCommands+0x1a6>
					break;
 800f370:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f372:	4b08      	ldr	r3, [pc, #32]	@ (800f394 <prvProcessReceivedCommands+0x1c8>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	1d39      	adds	r1, r7, #4
 800f378:	2200      	movs	r2, #0
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fe f8b4 	bl	800d4e8 <xQueueReceive>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	f47f af26 	bne.w	800f1d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f388:	bf00      	nop
 800f38a:	bf00      	nop
 800f38c:	3730      	adds	r7, #48	@ 0x30
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	2400673c 	.word	0x2400673c

0800f398 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b088      	sub	sp, #32
 800f39c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f39e:	e049      	b.n	800f434 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3a0:	4b2e      	ldr	r3, [pc, #184]	@ (800f45c <prvSwitchTimerLists+0xc4>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3aa:	4b2c      	ldr	r3, [pc, #176]	@ (800f45c <prvSwitchTimerLists+0xc4>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	3304      	adds	r3, #4
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fd fbcf 	bl	800cb5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6a1b      	ldr	r3, [r3, #32]
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f3cc:	f003 0304 	and.w	r3, r3, #4
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d02f      	beq.n	800f434 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	699b      	ldr	r3, [r3, #24]
 800f3d8:	693a      	ldr	r2, [r7, #16]
 800f3da:	4413      	add	r3, r2
 800f3dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d90e      	bls.n	800f404 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3f2:	4b1a      	ldr	r3, [pc, #104]	@ (800f45c <prvSwitchTimerLists+0xc4>)
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	3304      	adds	r3, #4
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	f7fd fb74 	bl	800caea <vListInsert>
 800f402:	e017      	b.n	800f434 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f404:	2300      	movs	r3, #0
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	2300      	movs	r3, #0
 800f40a:	693a      	ldr	r2, [r7, #16]
 800f40c:	2100      	movs	r1, #0
 800f40e:	68f8      	ldr	r0, [r7, #12]
 800f410:	f7ff fd58 	bl	800eec4 <xTimerGenericCommand>
 800f414:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d10b      	bne.n	800f434 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	603b      	str	r3, [r7, #0]
}
 800f42e:	bf00      	nop
 800f430:	bf00      	nop
 800f432:	e7fd      	b.n	800f430 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f434:	4b09      	ldr	r3, [pc, #36]	@ (800f45c <prvSwitchTimerLists+0xc4>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d1b0      	bne.n	800f3a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f43e:	4b07      	ldr	r3, [pc, #28]	@ (800f45c <prvSwitchTimerLists+0xc4>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f444:	4b06      	ldr	r3, [pc, #24]	@ (800f460 <prvSwitchTimerLists+0xc8>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a04      	ldr	r2, [pc, #16]	@ (800f45c <prvSwitchTimerLists+0xc4>)
 800f44a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f44c:	4a04      	ldr	r2, [pc, #16]	@ (800f460 <prvSwitchTimerLists+0xc8>)
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	6013      	str	r3, [r2, #0]
}
 800f452:	bf00      	nop
 800f454:	3718      	adds	r7, #24
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	24006734 	.word	0x24006734
 800f460:	24006738 	.word	0x24006738

0800f464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f46a:	f000 f96d 	bl	800f748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f46e:	4b15      	ldr	r3, [pc, #84]	@ (800f4c4 <prvCheckForValidListAndQueue+0x60>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d120      	bne.n	800f4b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f476:	4814      	ldr	r0, [pc, #80]	@ (800f4c8 <prvCheckForValidListAndQueue+0x64>)
 800f478:	f7fd fae6 	bl	800ca48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f47c:	4813      	ldr	r0, [pc, #76]	@ (800f4cc <prvCheckForValidListAndQueue+0x68>)
 800f47e:	f7fd fae3 	bl	800ca48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f482:	4b13      	ldr	r3, [pc, #76]	@ (800f4d0 <prvCheckForValidListAndQueue+0x6c>)
 800f484:	4a10      	ldr	r2, [pc, #64]	@ (800f4c8 <prvCheckForValidListAndQueue+0x64>)
 800f486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f488:	4b12      	ldr	r3, [pc, #72]	@ (800f4d4 <prvCheckForValidListAndQueue+0x70>)
 800f48a:	4a10      	ldr	r2, [pc, #64]	@ (800f4cc <prvCheckForValidListAndQueue+0x68>)
 800f48c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f48e:	2300      	movs	r3, #0
 800f490:	9300      	str	r3, [sp, #0]
 800f492:	4b11      	ldr	r3, [pc, #68]	@ (800f4d8 <prvCheckForValidListAndQueue+0x74>)
 800f494:	4a11      	ldr	r2, [pc, #68]	@ (800f4dc <prvCheckForValidListAndQueue+0x78>)
 800f496:	2110      	movs	r1, #16
 800f498:	200a      	movs	r0, #10
 800f49a:	f7fd fbf3 	bl	800cc84 <xQueueGenericCreateStatic>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	4a08      	ldr	r2, [pc, #32]	@ (800f4c4 <prvCheckForValidListAndQueue+0x60>)
 800f4a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f4a4:	4b07      	ldr	r3, [pc, #28]	@ (800f4c4 <prvCheckForValidListAndQueue+0x60>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d005      	beq.n	800f4b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4ac:	4b05      	ldr	r3, [pc, #20]	@ (800f4c4 <prvCheckForValidListAndQueue+0x60>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	490b      	ldr	r1, [pc, #44]	@ (800f4e0 <prvCheckForValidListAndQueue+0x7c>)
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fe fbd8 	bl	800dc68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f4b8:	f000 f978 	bl	800f7ac <vPortExitCritical>
}
 800f4bc:	bf00      	nop
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	2400673c 	.word	0x2400673c
 800f4c8:	2400670c 	.word	0x2400670c
 800f4cc:	24006720 	.word	0x24006720
 800f4d0:	24006734 	.word	0x24006734
 800f4d4:	24006738 	.word	0x24006738
 800f4d8:	240067e8 	.word	0x240067e8
 800f4dc:	24006748 	.word	0x24006748
 800f4e0:	0801bb28 	.word	0x0801bb28

0800f4e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	3b04      	subs	r3, #4
 800f4f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	3b04      	subs	r3, #4
 800f502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	f023 0201 	bic.w	r2, r3, #1
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	3b04      	subs	r3, #4
 800f512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f514:	4a0c      	ldr	r2, [pc, #48]	@ (800f548 <pxPortInitialiseStack+0x64>)
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	3b14      	subs	r3, #20
 800f51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	3b04      	subs	r3, #4
 800f52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f06f 0202 	mvn.w	r2, #2
 800f532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	3b20      	subs	r3, #32
 800f538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f53a:	68fb      	ldr	r3, [r7, #12]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3714      	adds	r7, #20
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr
 800f548:	0800f54d 	.word	0x0800f54d

0800f54c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f552:	2300      	movs	r3, #0
 800f554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f556:	4b13      	ldr	r3, [pc, #76]	@ (800f5a4 <prvTaskExitError+0x58>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f55e:	d00b      	beq.n	800f578 <prvTaskExitError+0x2c>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	60fb      	str	r3, [r7, #12]
}
 800f572:	bf00      	nop
 800f574:	bf00      	nop
 800f576:	e7fd      	b.n	800f574 <prvTaskExitError+0x28>
	__asm volatile
 800f578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f57c:	f383 8811 	msr	BASEPRI, r3
 800f580:	f3bf 8f6f 	isb	sy
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	60bb      	str	r3, [r7, #8]
}
 800f58a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f58c:	bf00      	nop
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d0fc      	beq.n	800f58e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f594:	bf00      	nop
 800f596:	bf00      	nop
 800f598:	3714      	adds	r7, #20
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
 800f5a2:	bf00      	nop
 800f5a4:	240049e4 	.word	0x240049e4
	...

0800f5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f5b0:	4b07      	ldr	r3, [pc, #28]	@ (800f5d0 <pxCurrentTCBConst2>)
 800f5b2:	6819      	ldr	r1, [r3, #0]
 800f5b4:	6808      	ldr	r0, [r1, #0]
 800f5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ba:	f380 8809 	msr	PSP, r0
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f04f 0000 	mov.w	r0, #0
 800f5c6:	f380 8811 	msr	BASEPRI, r0
 800f5ca:	4770      	bx	lr
 800f5cc:	f3af 8000 	nop.w

0800f5d0 <pxCurrentTCBConst2>:
 800f5d0:	2400620c 	.word	0x2400620c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5d4:	bf00      	nop
 800f5d6:	bf00      	nop

0800f5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f5d8:	4808      	ldr	r0, [pc, #32]	@ (800f5fc <prvPortStartFirstTask+0x24>)
 800f5da:	6800      	ldr	r0, [r0, #0]
 800f5dc:	6800      	ldr	r0, [r0, #0]
 800f5de:	f380 8808 	msr	MSP, r0
 800f5e2:	f04f 0000 	mov.w	r0, #0
 800f5e6:	f380 8814 	msr	CONTROL, r0
 800f5ea:	b662      	cpsie	i
 800f5ec:	b661      	cpsie	f
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	df00      	svc	0
 800f5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f5fa:	bf00      	nop
 800f5fc:	e000ed08 	.word	0xe000ed08

0800f600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f606:	4b47      	ldr	r3, [pc, #284]	@ (800f724 <xPortStartScheduler+0x124>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a47      	ldr	r2, [pc, #284]	@ (800f728 <xPortStartScheduler+0x128>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d10b      	bne.n	800f628 <xPortStartScheduler+0x28>
	__asm volatile
 800f610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	60fb      	str	r3, [r7, #12]
}
 800f622:	bf00      	nop
 800f624:	bf00      	nop
 800f626:	e7fd      	b.n	800f624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f628:	4b3e      	ldr	r3, [pc, #248]	@ (800f724 <xPortStartScheduler+0x124>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a3f      	ldr	r2, [pc, #252]	@ (800f72c <xPortStartScheduler+0x12c>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d10b      	bne.n	800f64a <xPortStartScheduler+0x4a>
	__asm volatile
 800f632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	613b      	str	r3, [r7, #16]
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop
 800f648:	e7fd      	b.n	800f646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f64a:	4b39      	ldr	r3, [pc, #228]	@ (800f730 <xPortStartScheduler+0x130>)
 800f64c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	b2db      	uxtb	r3, r3
 800f654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	22ff      	movs	r2, #255	@ 0xff
 800f65a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	b2db      	uxtb	r3, r3
 800f662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f664:	78fb      	ldrb	r3, [r7, #3]
 800f666:	b2db      	uxtb	r3, r3
 800f668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	4b31      	ldr	r3, [pc, #196]	@ (800f734 <xPortStartScheduler+0x134>)
 800f670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f672:	4b31      	ldr	r3, [pc, #196]	@ (800f738 <xPortStartScheduler+0x138>)
 800f674:	2207      	movs	r2, #7
 800f676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f678:	e009      	b.n	800f68e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f67a:	4b2f      	ldr	r3, [pc, #188]	@ (800f738 <xPortStartScheduler+0x138>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	3b01      	subs	r3, #1
 800f680:	4a2d      	ldr	r2, [pc, #180]	@ (800f738 <xPortStartScheduler+0x138>)
 800f682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f684:	78fb      	ldrb	r3, [r7, #3]
 800f686:	b2db      	uxtb	r3, r3
 800f688:	005b      	lsls	r3, r3, #1
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f68e:	78fb      	ldrb	r3, [r7, #3]
 800f690:	b2db      	uxtb	r3, r3
 800f692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f696:	2b80      	cmp	r3, #128	@ 0x80
 800f698:	d0ef      	beq.n	800f67a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f69a:	4b27      	ldr	r3, [pc, #156]	@ (800f738 <xPortStartScheduler+0x138>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f1c3 0307 	rsb	r3, r3, #7
 800f6a2:	2b04      	cmp	r3, #4
 800f6a4:	d00b      	beq.n	800f6be <xPortStartScheduler+0xbe>
	__asm volatile
 800f6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6aa:	f383 8811 	msr	BASEPRI, r3
 800f6ae:	f3bf 8f6f 	isb	sy
 800f6b2:	f3bf 8f4f 	dsb	sy
 800f6b6:	60bb      	str	r3, [r7, #8]
}
 800f6b8:	bf00      	nop
 800f6ba:	bf00      	nop
 800f6bc:	e7fd      	b.n	800f6ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f6be:	4b1e      	ldr	r3, [pc, #120]	@ (800f738 <xPortStartScheduler+0x138>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	021b      	lsls	r3, r3, #8
 800f6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800f738 <xPortStartScheduler+0x138>)
 800f6c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6c8:	4b1b      	ldr	r3, [pc, #108]	@ (800f738 <xPortStartScheduler+0x138>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f6d0:	4a19      	ldr	r2, [pc, #100]	@ (800f738 <xPortStartScheduler+0x138>)
 800f6d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	b2da      	uxtb	r2, r3
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6dc:	4b17      	ldr	r3, [pc, #92]	@ (800f73c <xPortStartScheduler+0x13c>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a16      	ldr	r2, [pc, #88]	@ (800f73c <xPortStartScheduler+0x13c>)
 800f6e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f6e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f6e8:	4b14      	ldr	r3, [pc, #80]	@ (800f73c <xPortStartScheduler+0x13c>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a13      	ldr	r2, [pc, #76]	@ (800f73c <xPortStartScheduler+0x13c>)
 800f6ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f6f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f6f4:	f000 f8da 	bl	800f8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f6f8:	4b11      	ldr	r3, [pc, #68]	@ (800f740 <xPortStartScheduler+0x140>)
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f6fe:	f000 f8f9 	bl	800f8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f702:	4b10      	ldr	r3, [pc, #64]	@ (800f744 <xPortStartScheduler+0x144>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4a0f      	ldr	r2, [pc, #60]	@ (800f744 <xPortStartScheduler+0x144>)
 800f708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f70c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f70e:	f7ff ff63 	bl	800f5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f712:	f7fe ff1d 	bl	800e550 <vTaskSwitchContext>
	prvTaskExitError();
 800f716:	f7ff ff19 	bl	800f54c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f71a:	2300      	movs	r3, #0
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	e000ed00 	.word	0xe000ed00
 800f728:	410fc271 	.word	0x410fc271
 800f72c:	410fc270 	.word	0x410fc270
 800f730:	e000e400 	.word	0xe000e400
 800f734:	24006838 	.word	0x24006838
 800f738:	2400683c 	.word	0x2400683c
 800f73c:	e000ed20 	.word	0xe000ed20
 800f740:	240049e4 	.word	0x240049e4
 800f744:	e000ef34 	.word	0xe000ef34

0800f748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	607b      	str	r3, [r7, #4]
}
 800f760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f762:	4b10      	ldr	r3, [pc, #64]	@ (800f7a4 <vPortEnterCritical+0x5c>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	3301      	adds	r3, #1
 800f768:	4a0e      	ldr	r2, [pc, #56]	@ (800f7a4 <vPortEnterCritical+0x5c>)
 800f76a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f76c:	4b0d      	ldr	r3, [pc, #52]	@ (800f7a4 <vPortEnterCritical+0x5c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2b01      	cmp	r3, #1
 800f772:	d110      	bne.n	800f796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f774:	4b0c      	ldr	r3, [pc, #48]	@ (800f7a8 <vPortEnterCritical+0x60>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00b      	beq.n	800f796 <vPortEnterCritical+0x4e>
	__asm volatile
 800f77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	603b      	str	r3, [r7, #0]
}
 800f790:	bf00      	nop
 800f792:	bf00      	nop
 800f794:	e7fd      	b.n	800f792 <vPortEnterCritical+0x4a>
	}
}
 800f796:	bf00      	nop
 800f798:	370c      	adds	r7, #12
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	240049e4 	.word	0x240049e4
 800f7a8:	e000ed04 	.word	0xe000ed04

0800f7ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f7b2:	4b12      	ldr	r3, [pc, #72]	@ (800f7fc <vPortExitCritical+0x50>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d10b      	bne.n	800f7d2 <vPortExitCritical+0x26>
	__asm volatile
 800f7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7be:	f383 8811 	msr	BASEPRI, r3
 800f7c2:	f3bf 8f6f 	isb	sy
 800f7c6:	f3bf 8f4f 	dsb	sy
 800f7ca:	607b      	str	r3, [r7, #4]
}
 800f7cc:	bf00      	nop
 800f7ce:	bf00      	nop
 800f7d0:	e7fd      	b.n	800f7ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f7d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f7fc <vPortExitCritical+0x50>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	4a08      	ldr	r2, [pc, #32]	@ (800f7fc <vPortExitCritical+0x50>)
 800f7da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f7dc:	4b07      	ldr	r3, [pc, #28]	@ (800f7fc <vPortExitCritical+0x50>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d105      	bne.n	800f7f0 <vPortExitCritical+0x44>
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	f383 8811 	msr	BASEPRI, r3
}
 800f7ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f7f0:	bf00      	nop
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr
 800f7fc:	240049e4 	.word	0x240049e4

0800f800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f800:	f3ef 8009 	mrs	r0, PSP
 800f804:	f3bf 8f6f 	isb	sy
 800f808:	4b15      	ldr	r3, [pc, #84]	@ (800f860 <pxCurrentTCBConst>)
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	f01e 0f10 	tst.w	lr, #16
 800f810:	bf08      	it	eq
 800f812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81a:	6010      	str	r0, [r2, #0]
 800f81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f824:	f380 8811 	msr	BASEPRI, r0
 800f828:	f3bf 8f4f 	dsb	sy
 800f82c:	f3bf 8f6f 	isb	sy
 800f830:	f7fe fe8e 	bl	800e550 <vTaskSwitchContext>
 800f834:	f04f 0000 	mov.w	r0, #0
 800f838:	f380 8811 	msr	BASEPRI, r0
 800f83c:	bc09      	pop	{r0, r3}
 800f83e:	6819      	ldr	r1, [r3, #0]
 800f840:	6808      	ldr	r0, [r1, #0]
 800f842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f846:	f01e 0f10 	tst.w	lr, #16
 800f84a:	bf08      	it	eq
 800f84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f850:	f380 8809 	msr	PSP, r0
 800f854:	f3bf 8f6f 	isb	sy
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	f3af 8000 	nop.w

0800f860 <pxCurrentTCBConst>:
 800f860:	2400620c 	.word	0x2400620c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f864:	bf00      	nop
 800f866:	bf00      	nop

0800f868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
	__asm volatile
 800f86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f872:	f383 8811 	msr	BASEPRI, r3
 800f876:	f3bf 8f6f 	isb	sy
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	607b      	str	r3, [r7, #4]
}
 800f880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f882:	f7fe fdab 	bl	800e3dc <xTaskIncrementTick>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d003      	beq.n	800f894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f88c:	4b06      	ldr	r3, [pc, #24]	@ (800f8a8 <xPortSysTickHandler+0x40>)
 800f88e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f892:	601a      	str	r2, [r3, #0]
 800f894:	2300      	movs	r3, #0
 800f896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	f383 8811 	msr	BASEPRI, r3
}
 800f89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f8a0:	bf00      	nop
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	e000ed04 	.word	0xe000ed04

0800f8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800f8e0 <vPortSetupTimerInterrupt+0x34>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800f8e4 <vPortSetupTimerInterrupt+0x38>)
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f8e8 <vPortSetupTimerInterrupt+0x3c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a0a      	ldr	r2, [pc, #40]	@ (800f8ec <vPortSetupTimerInterrupt+0x40>)
 800f8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8c6:	099b      	lsrs	r3, r3, #6
 800f8c8:	4a09      	ldr	r2, [pc, #36]	@ (800f8f0 <vPortSetupTimerInterrupt+0x44>)
 800f8ca:	3b01      	subs	r3, #1
 800f8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f8ce:	4b04      	ldr	r3, [pc, #16]	@ (800f8e0 <vPortSetupTimerInterrupt+0x34>)
 800f8d0:	2207      	movs	r2, #7
 800f8d2:	601a      	str	r2, [r3, #0]
}
 800f8d4:	bf00      	nop
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	e000e010 	.word	0xe000e010
 800f8e4:	e000e018 	.word	0xe000e018
 800f8e8:	240049c0 	.word	0x240049c0
 800f8ec:	10624dd3 	.word	0x10624dd3
 800f8f0:	e000e014 	.word	0xe000e014

0800f8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f904 <vPortEnableVFP+0x10>
 800f8f8:	6801      	ldr	r1, [r0, #0]
 800f8fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f8fe:	6001      	str	r1, [r0, #0]
 800f900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f902:	bf00      	nop
 800f904:	e000ed88 	.word	0xe000ed88

0800f908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f90e:	f3ef 8305 	mrs	r3, IPSR
 800f912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2b0f      	cmp	r3, #15
 800f918:	d915      	bls.n	800f946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f91a:	4a18      	ldr	r2, [pc, #96]	@ (800f97c <vPortValidateInterruptPriority+0x74>)
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	4413      	add	r3, r2
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f924:	4b16      	ldr	r3, [pc, #88]	@ (800f980 <vPortValidateInterruptPriority+0x78>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	7afa      	ldrb	r2, [r7, #11]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d20b      	bcs.n	800f946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	607b      	str	r3, [r7, #4]
}
 800f940:	bf00      	nop
 800f942:	bf00      	nop
 800f944:	e7fd      	b.n	800f942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f946:	4b0f      	ldr	r3, [pc, #60]	@ (800f984 <vPortValidateInterruptPriority+0x7c>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f94e:	4b0e      	ldr	r3, [pc, #56]	@ (800f988 <vPortValidateInterruptPriority+0x80>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	429a      	cmp	r2, r3
 800f954:	d90b      	bls.n	800f96e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f95a:	f383 8811 	msr	BASEPRI, r3
 800f95e:	f3bf 8f6f 	isb	sy
 800f962:	f3bf 8f4f 	dsb	sy
 800f966:	603b      	str	r3, [r7, #0]
}
 800f968:	bf00      	nop
 800f96a:	bf00      	nop
 800f96c:	e7fd      	b.n	800f96a <vPortValidateInterruptPriority+0x62>
	}
 800f96e:	bf00      	nop
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr
 800f97a:	bf00      	nop
 800f97c:	e000e3f0 	.word	0xe000e3f0
 800f980:	24006838 	.word	0x24006838
 800f984:	e000ed0c 	.word	0xe000ed0c
 800f988:	2400683c 	.word	0x2400683c

0800f98c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b08a      	sub	sp, #40	@ 0x28
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f994:	2300      	movs	r3, #0
 800f996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f998:	f7fe fc52 	bl	800e240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f99c:	4b5c      	ldr	r3, [pc, #368]	@ (800fb10 <pvPortMalloc+0x184>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d101      	bne.n	800f9a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f9a4:	f000 f924 	bl	800fbf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f9a8:	4b5a      	ldr	r3, [pc, #360]	@ (800fb14 <pvPortMalloc+0x188>)
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4013      	ands	r3, r2
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	f040 8095 	bne.w	800fae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d01e      	beq.n	800f9fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f9bc:	2208      	movs	r2, #8
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f003 0307 	and.w	r3, r3, #7
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d015      	beq.n	800f9fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f023 0307 	bic.w	r3, r3, #7
 800f9d4:	3308      	adds	r3, #8
 800f9d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f003 0307 	and.w	r3, r3, #7
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d00b      	beq.n	800f9fa <pvPortMalloc+0x6e>
	__asm volatile
 800f9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e6:	f383 8811 	msr	BASEPRI, r3
 800f9ea:	f3bf 8f6f 	isb	sy
 800f9ee:	f3bf 8f4f 	dsb	sy
 800f9f2:	617b      	str	r3, [r7, #20]
}
 800f9f4:	bf00      	nop
 800f9f6:	bf00      	nop
 800f9f8:	e7fd      	b.n	800f9f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d06f      	beq.n	800fae0 <pvPortMalloc+0x154>
 800fa00:	4b45      	ldr	r3, [pc, #276]	@ (800fb18 <pvPortMalloc+0x18c>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d86a      	bhi.n	800fae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa0a:	4b44      	ldr	r3, [pc, #272]	@ (800fb1c <pvPortMalloc+0x190>)
 800fa0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa0e:	4b43      	ldr	r3, [pc, #268]	@ (800fb1c <pvPortMalloc+0x190>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa14:	e004      	b.n	800fa20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d903      	bls.n	800fa32 <pvPortMalloc+0xa6>
 800fa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1f1      	bne.n	800fa16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa32:	4b37      	ldr	r3, [pc, #220]	@ (800fb10 <pvPortMalloc+0x184>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d051      	beq.n	800fae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa3c:	6a3b      	ldr	r3, [r7, #32]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2208      	movs	r2, #8
 800fa42:	4413      	add	r3, r2
 800fa44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	6a3b      	ldr	r3, [r7, #32]
 800fa4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa50:	685a      	ldr	r2, [r3, #4]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	1ad2      	subs	r2, r2, r3
 800fa56:	2308      	movs	r3, #8
 800fa58:	005b      	lsls	r3, r3, #1
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d920      	bls.n	800faa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fa5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4413      	add	r3, r2
 800fa64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	f003 0307 	and.w	r3, r3, #7
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d00b      	beq.n	800fa88 <pvPortMalloc+0xfc>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	613b      	str	r3, [r7, #16]
}
 800fa82:	bf00      	nop
 800fa84:	bf00      	nop
 800fa86:	e7fd      	b.n	800fa84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8a:	685a      	ldr	r2, [r3, #4]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	1ad2      	subs	r2, r2, r3
 800fa90:	69bb      	ldr	r3, [r7, #24]
 800fa92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa9a:	69b8      	ldr	r0, [r7, #24]
 800fa9c:	f000 f90a 	bl	800fcb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800faa0:	4b1d      	ldr	r3, [pc, #116]	@ (800fb18 <pvPortMalloc+0x18c>)
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	4a1b      	ldr	r2, [pc, #108]	@ (800fb18 <pvPortMalloc+0x18c>)
 800faac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800faae:	4b1a      	ldr	r3, [pc, #104]	@ (800fb18 <pvPortMalloc+0x18c>)
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	4b1b      	ldr	r3, [pc, #108]	@ (800fb20 <pvPortMalloc+0x194>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d203      	bcs.n	800fac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800faba:	4b17      	ldr	r3, [pc, #92]	@ (800fb18 <pvPortMalloc+0x18c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4a18      	ldr	r2, [pc, #96]	@ (800fb20 <pvPortMalloc+0x194>)
 800fac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac4:	685a      	ldr	r2, [r3, #4]
 800fac6:	4b13      	ldr	r3, [pc, #76]	@ (800fb14 <pvPortMalloc+0x188>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	431a      	orrs	r2, r3
 800facc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800face:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad2:	2200      	movs	r2, #0
 800fad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fad6:	4b13      	ldr	r3, [pc, #76]	@ (800fb24 <pvPortMalloc+0x198>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	3301      	adds	r3, #1
 800fadc:	4a11      	ldr	r2, [pc, #68]	@ (800fb24 <pvPortMalloc+0x198>)
 800fade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fae0:	f7fe fbbc 	bl	800e25c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	f003 0307 	and.w	r3, r3, #7
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00b      	beq.n	800fb06 <pvPortMalloc+0x17a>
	__asm volatile
 800faee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf2:	f383 8811 	msr	BASEPRI, r3
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	60fb      	str	r3, [r7, #12]
}
 800fb00:	bf00      	nop
 800fb02:	bf00      	nop
 800fb04:	e7fd      	b.n	800fb02 <pvPortMalloc+0x176>
	return pvReturn;
 800fb06:	69fb      	ldr	r3, [r7, #28]
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3728      	adds	r7, #40	@ 0x28
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	2400e048 	.word	0x2400e048
 800fb14:	2400e05c 	.word	0x2400e05c
 800fb18:	2400e04c 	.word	0x2400e04c
 800fb1c:	2400e040 	.word	0x2400e040
 800fb20:	2400e050 	.word	0x2400e050
 800fb24:	2400e054 	.word	0x2400e054

0800fb28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b086      	sub	sp, #24
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d04f      	beq.n	800fbda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb3a:	2308      	movs	r3, #8
 800fb3c:	425b      	negs	r3, r3
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	4413      	add	r3, r2
 800fb42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	685a      	ldr	r2, [r3, #4]
 800fb4c:	4b25      	ldr	r3, [pc, #148]	@ (800fbe4 <vPortFree+0xbc>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4013      	ands	r3, r2
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d10b      	bne.n	800fb6e <vPortFree+0x46>
	__asm volatile
 800fb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	60fb      	str	r3, [r7, #12]
}
 800fb68:	bf00      	nop
 800fb6a:	bf00      	nop
 800fb6c:	e7fd      	b.n	800fb6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00b      	beq.n	800fb8e <vPortFree+0x66>
	__asm volatile
 800fb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb7a:	f383 8811 	msr	BASEPRI, r3
 800fb7e:	f3bf 8f6f 	isb	sy
 800fb82:	f3bf 8f4f 	dsb	sy
 800fb86:	60bb      	str	r3, [r7, #8]
}
 800fb88:	bf00      	nop
 800fb8a:	bf00      	nop
 800fb8c:	e7fd      	b.n	800fb8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	685a      	ldr	r2, [r3, #4]
 800fb92:	4b14      	ldr	r3, [pc, #80]	@ (800fbe4 <vPortFree+0xbc>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4013      	ands	r3, r2
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d01e      	beq.n	800fbda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d11a      	bne.n	800fbda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	685a      	ldr	r2, [r3, #4]
 800fba8:	4b0e      	ldr	r3, [pc, #56]	@ (800fbe4 <vPortFree+0xbc>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	43db      	mvns	r3, r3
 800fbae:	401a      	ands	r2, r3
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fbb4:	f7fe fb44 	bl	800e240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	685a      	ldr	r2, [r3, #4]
 800fbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe8 <vPortFree+0xc0>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	4a09      	ldr	r2, [pc, #36]	@ (800fbe8 <vPortFree+0xc0>)
 800fbc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fbc6:	6938      	ldr	r0, [r7, #16]
 800fbc8:	f000 f874 	bl	800fcb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fbcc:	4b07      	ldr	r3, [pc, #28]	@ (800fbec <vPortFree+0xc4>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	4a06      	ldr	r2, [pc, #24]	@ (800fbec <vPortFree+0xc4>)
 800fbd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fbd6:	f7fe fb41 	bl	800e25c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fbda:	bf00      	nop
 800fbdc:	3718      	adds	r7, #24
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	2400e05c 	.word	0x2400e05c
 800fbe8:	2400e04c 	.word	0x2400e04c
 800fbec:	2400e058 	.word	0x2400e058

0800fbf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fbf6:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800fbfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fbfc:	4b27      	ldr	r3, [pc, #156]	@ (800fc9c <prvHeapInit+0xac>)
 800fbfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f003 0307 	and.w	r3, r3, #7
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00c      	beq.n	800fc24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	3307      	adds	r3, #7
 800fc0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f023 0307 	bic.w	r3, r3, #7
 800fc16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc18:	68ba      	ldr	r2, [r7, #8]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	1ad3      	subs	r3, r2, r3
 800fc1e:	4a1f      	ldr	r2, [pc, #124]	@ (800fc9c <prvHeapInit+0xac>)
 800fc20:	4413      	add	r3, r2
 800fc22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc28:	4a1d      	ldr	r2, [pc, #116]	@ (800fca0 <prvHeapInit+0xb0>)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc2e:	4b1c      	ldr	r3, [pc, #112]	@ (800fca0 <prvHeapInit+0xb0>)
 800fc30:	2200      	movs	r2, #0
 800fc32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	68ba      	ldr	r2, [r7, #8]
 800fc38:	4413      	add	r3, r2
 800fc3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc3c:	2208      	movs	r2, #8
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	1a9b      	subs	r3, r3, r2
 800fc42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f023 0307 	bic.w	r3, r3, #7
 800fc4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	4a15      	ldr	r2, [pc, #84]	@ (800fca4 <prvHeapInit+0xb4>)
 800fc50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fc52:	4b14      	ldr	r3, [pc, #80]	@ (800fca4 <prvHeapInit+0xb4>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2200      	movs	r2, #0
 800fc58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc5a:	4b12      	ldr	r3, [pc, #72]	@ (800fca4 <prvHeapInit+0xb4>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	68fa      	ldr	r2, [r7, #12]
 800fc6a:	1ad2      	subs	r2, r2, r3
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fc70:	4b0c      	ldr	r3, [pc, #48]	@ (800fca4 <prvHeapInit+0xb4>)
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	4a0a      	ldr	r2, [pc, #40]	@ (800fca8 <prvHeapInit+0xb8>)
 800fc7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	4a09      	ldr	r2, [pc, #36]	@ (800fcac <prvHeapInit+0xbc>)
 800fc86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc88:	4b09      	ldr	r3, [pc, #36]	@ (800fcb0 <prvHeapInit+0xc0>)
 800fc8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fc8e:	601a      	str	r2, [r3, #0]
}
 800fc90:	bf00      	nop
 800fc92:	3714      	adds	r7, #20
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	24006840 	.word	0x24006840
 800fca0:	2400e040 	.word	0x2400e040
 800fca4:	2400e048 	.word	0x2400e048
 800fca8:	2400e050 	.word	0x2400e050
 800fcac:	2400e04c 	.word	0x2400e04c
 800fcb0:	2400e05c 	.word	0x2400e05c

0800fcb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b085      	sub	sp, #20
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fcbc:	4b28      	ldr	r3, [pc, #160]	@ (800fd60 <prvInsertBlockIntoFreeList+0xac>)
 800fcbe:	60fb      	str	r3, [r7, #12]
 800fcc0:	e002      	b.n	800fcc8 <prvInsertBlockIntoFreeList+0x14>
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	60fb      	str	r3, [r7, #12]
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d8f7      	bhi.n	800fcc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	68ba      	ldr	r2, [r7, #8]
 800fcdc:	4413      	add	r3, r2
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d108      	bne.n	800fcf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	685a      	ldr	r2, [r3, #4]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	441a      	add	r2, r3
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	68ba      	ldr	r2, [r7, #8]
 800fd00:	441a      	add	r2, r3
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d118      	bne.n	800fd3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	4b15      	ldr	r3, [pc, #84]	@ (800fd64 <prvInsertBlockIntoFreeList+0xb0>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d00d      	beq.n	800fd32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	685a      	ldr	r2, [r3, #4]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	441a      	add	r2, r3
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	601a      	str	r2, [r3, #0]
 800fd30:	e008      	b.n	800fd44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd32:	4b0c      	ldr	r3, [pc, #48]	@ (800fd64 <prvInsertBlockIntoFreeList+0xb0>)
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	601a      	str	r2, [r3, #0]
 800fd3a:	e003      	b.n	800fd44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d002      	beq.n	800fd52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd52:	bf00      	nop
 800fd54:	3714      	adds	r7, #20
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	2400e040 	.word	0x2400e040
 800fd64:	2400e048 	.word	0x2400e048

0800fd68 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800fd72:	f007 fc83 	bl	801767c <sys_timeouts_sleeptime>
 800fd76:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd7e:	d10b      	bne.n	800fd98 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800fd80:	4813      	ldr	r0, [pc, #76]	@ (800fdd0 <tcpip_timeouts_mbox_fetch+0x68>)
 800fd82:	f00a fdcc 	bl	801a91e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800fd86:	2200      	movs	r2, #0
 800fd88:	6839      	ldr	r1, [r7, #0]
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f00a fd54 	bl	801a838 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800fd90:	480f      	ldr	r0, [pc, #60]	@ (800fdd0 <tcpip_timeouts_mbox_fetch+0x68>)
 800fd92:	f00a fdb5 	bl	801a900 <sys_mutex_lock>
    return;
 800fd96:	e018      	b.n	800fdca <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d102      	bne.n	800fda4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800fd9e:	f007 fc33 	bl	8017608 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fda2:	e7e6      	b.n	800fd72 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800fda4:	480a      	ldr	r0, [pc, #40]	@ (800fdd0 <tcpip_timeouts_mbox_fetch+0x68>)
 800fda6:	f00a fdba 	bl	801a91e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800fdaa:	68fa      	ldr	r2, [r7, #12]
 800fdac:	6839      	ldr	r1, [r7, #0]
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f00a fd42 	bl	801a838 <sys_arch_mbox_fetch>
 800fdb4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800fdb6:	4806      	ldr	r0, [pc, #24]	@ (800fdd0 <tcpip_timeouts_mbox_fetch+0x68>)
 800fdb8:	f00a fda2 	bl	801a900 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc2:	d102      	bne.n	800fdca <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800fdc4:	f007 fc20 	bl	8017608 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fdc8:	e7d3      	b.n	800fd72 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800fdca:	3710      	adds	r7, #16
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	2400e06c 	.word	0x2400e06c

0800fdd4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800fddc:	4810      	ldr	r0, [pc, #64]	@ (800fe20 <tcpip_thread+0x4c>)
 800fdde:	f00a fd8f 	bl	801a900 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800fde2:	4b10      	ldr	r3, [pc, #64]	@ (800fe24 <tcpip_thread+0x50>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d005      	beq.n	800fdf6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800fdea:	4b0e      	ldr	r3, [pc, #56]	@ (800fe24 <tcpip_thread+0x50>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4a0e      	ldr	r2, [pc, #56]	@ (800fe28 <tcpip_thread+0x54>)
 800fdf0:	6812      	ldr	r2, [r2, #0]
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fdf6:	f107 030c 	add.w	r3, r7, #12
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	480b      	ldr	r0, [pc, #44]	@ (800fe2c <tcpip_thread+0x58>)
 800fdfe:	f7ff ffb3 	bl	800fd68 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d106      	bne.n	800fe16 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fe08:	4b09      	ldr	r3, [pc, #36]	@ (800fe30 <tcpip_thread+0x5c>)
 800fe0a:	2291      	movs	r2, #145	@ 0x91
 800fe0c:	4909      	ldr	r1, [pc, #36]	@ (800fe34 <tcpip_thread+0x60>)
 800fe0e:	480a      	ldr	r0, [pc, #40]	@ (800fe38 <tcpip_thread+0x64>)
 800fe10:	f00a fed0 	bl	801abb4 <iprintf>
      continue;
 800fe14:	e003      	b.n	800fe1e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f000 f80f 	bl	800fe3c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fe1e:	e7ea      	b.n	800fdf6 <tcpip_thread+0x22>
 800fe20:	2400e06c 	.word	0x2400e06c
 800fe24:	2400e060 	.word	0x2400e060
 800fe28:	2400e064 	.word	0x2400e064
 800fe2c:	2400e068 	.word	0x2400e068
 800fe30:	0801bb30 	.word	0x0801bb30
 800fe34:	0801bb60 	.word	0x0801bb60
 800fe38:	0801bb80 	.word	0x0801bb80

0800fe3c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	2b02      	cmp	r3, #2
 800fe4a:	d026      	beq.n	800fe9a <tcpip_thread_handle_msg+0x5e>
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	dc2b      	bgt.n	800fea8 <tcpip_thread_handle_msg+0x6c>
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <tcpip_thread_handle_msg+0x1e>
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d015      	beq.n	800fe84 <tcpip_thread_handle_msg+0x48>
 800fe58:	e026      	b.n	800fea8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	6850      	ldr	r0, [r2, #4]
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	6892      	ldr	r2, [r2, #8]
 800fe66:	4611      	mov	r1, r2
 800fe68:	4798      	blx	r3
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d004      	beq.n	800fe7a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f001 fdcb 	bl	8011a10 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fe7a:	6879      	ldr	r1, [r7, #4]
 800fe7c:	200a      	movs	r0, #10
 800fe7e:	f000 ff1b 	bl	8010cb8 <memp_free>
      break;
 800fe82:	e018      	b.n	800feb6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	6892      	ldr	r2, [r2, #8]
 800fe8c:	4610      	mov	r0, r2
 800fe8e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800fe90:	6879      	ldr	r1, [r7, #4]
 800fe92:	2009      	movs	r0, #9
 800fe94:	f000 ff10 	bl	8010cb8 <memp_free>
      break;
 800fe98:	e00d      	b.n	800feb6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	6892      	ldr	r2, [r2, #8]
 800fea2:	4610      	mov	r0, r2
 800fea4:	4798      	blx	r3
      break;
 800fea6:	e006      	b.n	800feb6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fea8:	4b05      	ldr	r3, [pc, #20]	@ (800fec0 <tcpip_thread_handle_msg+0x84>)
 800feaa:	22cf      	movs	r2, #207	@ 0xcf
 800feac:	4905      	ldr	r1, [pc, #20]	@ (800fec4 <tcpip_thread_handle_msg+0x88>)
 800feae:	4806      	ldr	r0, [pc, #24]	@ (800fec8 <tcpip_thread_handle_msg+0x8c>)
 800feb0:	f00a fe80 	bl	801abb4 <iprintf>
      break;
 800feb4:	bf00      	nop
  }
}
 800feb6:	bf00      	nop
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	0801bb30 	.word	0x0801bb30
 800fec4:	0801bb60 	.word	0x0801bb60
 800fec8:	0801bb80 	.word	0x0801bb80

0800fecc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b086      	sub	sp, #24
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	60f8      	str	r0, [r7, #12]
 800fed4:	60b9      	str	r1, [r7, #8]
 800fed6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fed8:	481a      	ldr	r0, [pc, #104]	@ (800ff44 <tcpip_inpkt+0x78>)
 800feda:	f00a fcde 	bl	801a89a <sys_mbox_valid>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d105      	bne.n	800fef0 <tcpip_inpkt+0x24>
 800fee4:	4b18      	ldr	r3, [pc, #96]	@ (800ff48 <tcpip_inpkt+0x7c>)
 800fee6:	22fc      	movs	r2, #252	@ 0xfc
 800fee8:	4918      	ldr	r1, [pc, #96]	@ (800ff4c <tcpip_inpkt+0x80>)
 800feea:	4819      	ldr	r0, [pc, #100]	@ (800ff50 <tcpip_inpkt+0x84>)
 800feec:	f00a fe62 	bl	801abb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800fef0:	200a      	movs	r0, #10
 800fef2:	f000 fe6b 	bl	8010bcc <memp_malloc>
 800fef6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d102      	bne.n	800ff04 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800fefe:	f04f 33ff 	mov.w	r3, #4294967295
 800ff02:	e01a      	b.n	800ff3a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	2200      	movs	r2, #0
 800ff08:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	68fa      	ldr	r2, [r7, #12]
 800ff0e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ff1c:	6979      	ldr	r1, [r7, #20]
 800ff1e:	4809      	ldr	r0, [pc, #36]	@ (800ff44 <tcpip_inpkt+0x78>)
 800ff20:	f00a fc70 	bl	801a804 <sys_mbox_trypost>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d006      	beq.n	800ff38 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ff2a:	6979      	ldr	r1, [r7, #20]
 800ff2c:	200a      	movs	r0, #10
 800ff2e:	f000 fec3 	bl	8010cb8 <memp_free>
    return ERR_MEM;
 800ff32:	f04f 33ff 	mov.w	r3, #4294967295
 800ff36:	e000      	b.n	800ff3a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ff38:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3718      	adds	r7, #24
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	2400e068 	.word	0x2400e068
 800ff48:	0801bb30 	.word	0x0801bb30
 800ff4c:	0801bba8 	.word	0x0801bba8
 800ff50:	0801bb80 	.word	0x0801bb80

0800ff54 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ff64:	f003 0318 	and.w	r3, r3, #24
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d006      	beq.n	800ff7a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ff6c:	4a08      	ldr	r2, [pc, #32]	@ (800ff90 <tcpip_input+0x3c>)
 800ff6e:	6839      	ldr	r1, [r7, #0]
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f7ff ffab 	bl	800fecc <tcpip_inpkt>
 800ff76:	4603      	mov	r3, r0
 800ff78:	e005      	b.n	800ff86 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ff7a:	4a06      	ldr	r2, [pc, #24]	@ (800ff94 <tcpip_input+0x40>)
 800ff7c:	6839      	ldr	r1, [r7, #0]
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f7ff ffa4 	bl	800fecc <tcpip_inpkt>
 800ff84:	4603      	mov	r3, r0
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	0801a625 	.word	0x0801a625
 800ff94:	080193f5 	.word	0x080193f5

0800ff98 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ffa2:	4819      	ldr	r0, [pc, #100]	@ (8010008 <tcpip_try_callback+0x70>)
 800ffa4:	f00a fc79 	bl	801a89a <sys_mbox_valid>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d106      	bne.n	800ffbc <tcpip_try_callback+0x24>
 800ffae:	4b17      	ldr	r3, [pc, #92]	@ (801000c <tcpip_try_callback+0x74>)
 800ffb0:	f240 125d 	movw	r2, #349	@ 0x15d
 800ffb4:	4916      	ldr	r1, [pc, #88]	@ (8010010 <tcpip_try_callback+0x78>)
 800ffb6:	4817      	ldr	r0, [pc, #92]	@ (8010014 <tcpip_try_callback+0x7c>)
 800ffb8:	f00a fdfc 	bl	801abb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ffbc:	2009      	movs	r0, #9
 800ffbe:	f000 fe05 	bl	8010bcc <memp_malloc>
 800ffc2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d102      	bne.n	800ffd0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ffca:	f04f 33ff 	mov.w	r3, #4294967295
 800ffce:	e017      	b.n	8010000 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	683a      	ldr	r2, [r7, #0]
 800ffe0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ffe2:	68f9      	ldr	r1, [r7, #12]
 800ffe4:	4808      	ldr	r0, [pc, #32]	@ (8010008 <tcpip_try_callback+0x70>)
 800ffe6:	f00a fc0d 	bl	801a804 <sys_mbox_trypost>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d006      	beq.n	800fffe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800fff0:	68f9      	ldr	r1, [r7, #12]
 800fff2:	2009      	movs	r0, #9
 800fff4:	f000 fe60 	bl	8010cb8 <memp_free>
    return ERR_MEM;
 800fff8:	f04f 33ff 	mov.w	r3, #4294967295
 800fffc:	e000      	b.n	8010000 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3710      	adds	r7, #16
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	2400e068 	.word	0x2400e068
 801000c:	0801bb30 	.word	0x0801bb30
 8010010:	0801bba8 	.word	0x0801bba8
 8010014:	0801bb80 	.word	0x0801bb80

08010018 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af02      	add	r7, sp, #8
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010022:	f000 f92e 	bl	8010282 <lwip_init>

  tcpip_init_done = initfunc;
 8010026:	4a17      	ldr	r2, [pc, #92]	@ (8010084 <tcpip_init+0x6c>)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801002c:	4a16      	ldr	r2, [pc, #88]	@ (8010088 <tcpip_init+0x70>)
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010032:	2106      	movs	r1, #6
 8010034:	4815      	ldr	r0, [pc, #84]	@ (801008c <tcpip_init+0x74>)
 8010036:	f00a fbcb 	bl	801a7d0 <sys_mbox_new>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d006      	beq.n	801004e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010040:	4b13      	ldr	r3, [pc, #76]	@ (8010090 <tcpip_init+0x78>)
 8010042:	f240 2261 	movw	r2, #609	@ 0x261
 8010046:	4913      	ldr	r1, [pc, #76]	@ (8010094 <tcpip_init+0x7c>)
 8010048:	4813      	ldr	r0, [pc, #76]	@ (8010098 <tcpip_init+0x80>)
 801004a:	f00a fdb3 	bl	801abb4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801004e:	4813      	ldr	r0, [pc, #76]	@ (801009c <tcpip_init+0x84>)
 8010050:	f00a fc40 	bl	801a8d4 <sys_mutex_new>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d006      	beq.n	8010068 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801005a:	4b0d      	ldr	r3, [pc, #52]	@ (8010090 <tcpip_init+0x78>)
 801005c:	f240 2265 	movw	r2, #613	@ 0x265
 8010060:	490f      	ldr	r1, [pc, #60]	@ (80100a0 <tcpip_init+0x88>)
 8010062:	480d      	ldr	r0, [pc, #52]	@ (8010098 <tcpip_init+0x80>)
 8010064:	f00a fda6 	bl	801abb4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010068:	2318      	movs	r3, #24
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010070:	2200      	movs	r2, #0
 8010072:	490c      	ldr	r1, [pc, #48]	@ (80100a4 <tcpip_init+0x8c>)
 8010074:	480c      	ldr	r0, [pc, #48]	@ (80100a8 <tcpip_init+0x90>)
 8010076:	f00a fc5f 	bl	801a938 <sys_thread_new>
}
 801007a:	bf00      	nop
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	2400e060 	.word	0x2400e060
 8010088:	2400e064 	.word	0x2400e064
 801008c:	2400e068 	.word	0x2400e068
 8010090:	0801bb30 	.word	0x0801bb30
 8010094:	0801bbb8 	.word	0x0801bbb8
 8010098:	0801bb80 	.word	0x0801bb80
 801009c:	2400e06c 	.word	0x2400e06c
 80100a0:	0801bbdc 	.word	0x0801bbdc
 80100a4:	0800fdd5 	.word	0x0800fdd5
 80100a8:	0801bc00 	.word	0x0801bc00

080100ac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80100b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80100ba:	021b      	lsls	r3, r3, #8
 80100bc:	b21a      	sxth	r2, r3
 80100be:	88fb      	ldrh	r3, [r7, #6]
 80100c0:	0a1b      	lsrs	r3, r3, #8
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	b21b      	sxth	r3, r3
 80100c6:	4313      	orrs	r3, r2
 80100c8:	b21b      	sxth	r3, r3
 80100ca:	b29b      	uxth	r3, r3
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	061a      	lsls	r2, r3, #24
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	021b      	lsls	r3, r3, #8
 80100e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80100ec:	431a      	orrs	r2, r3
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	0a1b      	lsrs	r3, r3, #8
 80100f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80100f6:	431a      	orrs	r2, r3
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	0e1b      	lsrs	r3, r3, #24
 80100fc:	4313      	orrs	r3, r2
}
 80100fe:	4618      	mov	r0, r3
 8010100:	370c      	adds	r7, #12
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr

0801010a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801010a:	b480      	push	{r7}
 801010c:	b089      	sub	sp, #36	@ 0x24
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
 8010112:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8010118:	2300      	movs	r3, #0
 801011a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801011c:	2300      	movs	r3, #0
 801011e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	f003 0301 	and.w	r3, r3, #1
 8010126:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00d      	beq.n	801014a <lwip_standard_chksum+0x40>
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	dd0a      	ble.n	801014a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8010134:	69fa      	ldr	r2, [r7, #28]
 8010136:	1c53      	adds	r3, r2, #1
 8010138:	61fb      	str	r3, [r7, #28]
 801013a:	f107 030e 	add.w	r3, r7, #14
 801013e:	3301      	adds	r3, #1
 8010140:	7812      	ldrb	r2, [r2, #0]
 8010142:	701a      	strb	r2, [r3, #0]
    len--;
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	3b01      	subs	r3, #1
 8010148:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801014a:	69fb      	ldr	r3, [r7, #28]
 801014c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801014e:	e00a      	b.n	8010166 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8010150:	69bb      	ldr	r3, [r7, #24]
 8010152:	1c9a      	adds	r2, r3, #2
 8010154:	61ba      	str	r2, [r7, #24]
 8010156:	881b      	ldrh	r3, [r3, #0]
 8010158:	461a      	mov	r2, r3
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	4413      	add	r3, r2
 801015e:	617b      	str	r3, [r7, #20]
    len -= 2;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	3b02      	subs	r3, #2
 8010164:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	2b01      	cmp	r3, #1
 801016a:	dcf1      	bgt.n	8010150 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	dd04      	ble.n	801017c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010172:	f107 030e 	add.w	r3, r7, #14
 8010176:	69ba      	ldr	r2, [r7, #24]
 8010178:	7812      	ldrb	r2, [r2, #0]
 801017a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801017c:	89fb      	ldrh	r3, [r7, #14]
 801017e:	461a      	mov	r2, r3
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	4413      	add	r3, r2
 8010184:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	0c1a      	lsrs	r2, r3, #16
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	b29b      	uxth	r3, r3
 801018e:	4413      	add	r3, r2
 8010190:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	0c1a      	lsrs	r2, r3, #16
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	b29b      	uxth	r3, r3
 801019a:	4413      	add	r3, r2
 801019c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d007      	beq.n	80101b4 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	021b      	lsls	r3, r3, #8
 80101a8:	b29a      	uxth	r2, r3
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	0a1b      	lsrs	r3, r3, #8
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	4313      	orrs	r3, r2
 80101b2:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	b29b      	uxth	r3, r3
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3724      	adds	r7, #36	@ 0x24
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr

080101c4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	460b      	mov	r3, r1
 80101ce:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80101d0:	887b      	ldrh	r3, [r7, #2]
 80101d2:	4619      	mov	r1, r3
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f7ff ff98 	bl	801010a <lwip_standard_chksum>
 80101da:	4603      	mov	r3, r0
 80101dc:	43db      	mvns	r3, r3
 80101de:	b29b      	uxth	r3, r3
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b086      	sub	sp, #24
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80101f0:	2300      	movs	r3, #0
 80101f2:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80101f4:	2300      	movs	r3, #0
 80101f6:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	613b      	str	r3, [r7, #16]
 80101fc:	e02b      	b.n	8010256 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	685a      	ldr	r2, [r3, #4]
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	895b      	ldrh	r3, [r3, #10]
 8010206:	4619      	mov	r1, r3
 8010208:	4610      	mov	r0, r2
 801020a:	f7ff ff7e 	bl	801010a <lwip_standard_chksum>
 801020e:	4603      	mov	r3, r0
 8010210:	461a      	mov	r2, r3
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	4413      	add	r3, r2
 8010216:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	0c1a      	lsrs	r2, r3, #16
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	b29b      	uxth	r3, r3
 8010220:	4413      	add	r3, r2
 8010222:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	895b      	ldrh	r3, [r3, #10]
 8010228:	f003 0301 	and.w	r3, r3, #1
 801022c:	b29b      	uxth	r3, r3
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00e      	beq.n	8010250 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2b00      	cmp	r3, #0
 8010236:	bf0c      	ite	eq
 8010238:	2301      	moveq	r3, #1
 801023a:	2300      	movne	r3, #0
 801023c:	b2db      	uxtb	r3, r3
 801023e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	021b      	lsls	r3, r3, #8
 8010244:	b29a      	uxth	r2, r3
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	0a1b      	lsrs	r3, r3, #8
 801024a:	b2db      	uxtb	r3, r3
 801024c:	4313      	orrs	r3, r2
 801024e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	613b      	str	r3, [r7, #16]
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d1d0      	bne.n	80101fe <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d007      	beq.n	8010272 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	021b      	lsls	r3, r3, #8
 8010266:	b29a      	uxth	r2, r3
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	0a1b      	lsrs	r3, r3, #8
 801026c:	b2db      	uxtb	r3, r3
 801026e:	4313      	orrs	r3, r2
 8010270:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	b29b      	uxth	r3, r3
 8010276:	43db      	mvns	r3, r3
 8010278:	b29b      	uxth	r3, r3
}
 801027a:	4618      	mov	r0, r3
 801027c:	3718      	adds	r7, #24
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b082      	sub	sp, #8
 8010286:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010288:	2300      	movs	r3, #0
 801028a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801028c:	f00a fb16 	bl	801a8bc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010290:	f000 f8d4 	bl	801043c <mem_init>
  memp_init();
 8010294:	f000 fc2c 	bl	8010af0 <memp_init>
  pbuf_init();
  netif_init();
 8010298:	f000 fd38 	bl	8010d0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801029c:	f007 fa26 	bl	80176ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80102a0:	f001 ff4c 	bl	801213c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80102a4:	f007 f968 	bl	8017578 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80102a8:	bf00      	nop
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	4603      	mov	r3, r0
 80102b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80102ba:	4b05      	ldr	r3, [pc, #20]	@ (80102d0 <ptr_to_mem+0x20>)
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	88fb      	ldrh	r3, [r7, #6]
 80102c0:	4413      	add	r3, r2
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	2400e088 	.word	0x2400e088

080102d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80102dc:	4b05      	ldr	r3, [pc, #20]	@ (80102f4 <mem_to_ptr+0x20>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	1ad3      	subs	r3, r2, r3
 80102e4:	b29b      	uxth	r3, r3
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	370c      	adds	r7, #12
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	2400e088 	.word	0x2400e088

080102f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80102f8:	b590      	push	{r4, r7, lr}
 80102fa:	b085      	sub	sp, #20
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010300:	4b45      	ldr	r3, [pc, #276]	@ (8010418 <plug_holes+0x120>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	429a      	cmp	r2, r3
 8010308:	d206      	bcs.n	8010318 <plug_holes+0x20>
 801030a:	4b44      	ldr	r3, [pc, #272]	@ (801041c <plug_holes+0x124>)
 801030c:	f240 12df 	movw	r2, #479	@ 0x1df
 8010310:	4943      	ldr	r1, [pc, #268]	@ (8010420 <plug_holes+0x128>)
 8010312:	4844      	ldr	r0, [pc, #272]	@ (8010424 <plug_holes+0x12c>)
 8010314:	f00a fc4e 	bl	801abb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010318:	4b43      	ldr	r3, [pc, #268]	@ (8010428 <plug_holes+0x130>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	429a      	cmp	r2, r3
 8010320:	d306      	bcc.n	8010330 <plug_holes+0x38>
 8010322:	4b3e      	ldr	r3, [pc, #248]	@ (801041c <plug_holes+0x124>)
 8010324:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010328:	4940      	ldr	r1, [pc, #256]	@ (801042c <plug_holes+0x134>)
 801032a:	483e      	ldr	r0, [pc, #248]	@ (8010424 <plug_holes+0x12c>)
 801032c:	f00a fc42 	bl	801abb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	791b      	ldrb	r3, [r3, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d006      	beq.n	8010346 <plug_holes+0x4e>
 8010338:	4b38      	ldr	r3, [pc, #224]	@ (801041c <plug_holes+0x124>)
 801033a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801033e:	493c      	ldr	r1, [pc, #240]	@ (8010430 <plug_holes+0x138>)
 8010340:	4838      	ldr	r0, [pc, #224]	@ (8010424 <plug_holes+0x12c>)
 8010342:	f00a fc37 	bl	801abb4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	881b      	ldrh	r3, [r3, #0]
 801034a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801034e:	d906      	bls.n	801035e <plug_holes+0x66>
 8010350:	4b32      	ldr	r3, [pc, #200]	@ (801041c <plug_holes+0x124>)
 8010352:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010356:	4937      	ldr	r1, [pc, #220]	@ (8010434 <plug_holes+0x13c>)
 8010358:	4832      	ldr	r0, [pc, #200]	@ (8010424 <plug_holes+0x12c>)
 801035a:	f00a fc2b 	bl	801abb4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	881b      	ldrh	r3, [r3, #0]
 8010362:	4618      	mov	r0, r3
 8010364:	f7ff ffa4 	bl	80102b0 <ptr_to_mem>
 8010368:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	429a      	cmp	r2, r3
 8010370:	d024      	beq.n	80103bc <plug_holes+0xc4>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	791b      	ldrb	r3, [r3, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d120      	bne.n	80103bc <plug_holes+0xc4>
 801037a:	4b2b      	ldr	r3, [pc, #172]	@ (8010428 <plug_holes+0x130>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	68fa      	ldr	r2, [r7, #12]
 8010380:	429a      	cmp	r2, r3
 8010382:	d01b      	beq.n	80103bc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010384:	4b2c      	ldr	r3, [pc, #176]	@ (8010438 <plug_holes+0x140>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	429a      	cmp	r2, r3
 801038c:	d102      	bne.n	8010394 <plug_holes+0x9c>
      lfree = mem;
 801038e:	4a2a      	ldr	r2, [pc, #168]	@ (8010438 <plug_holes+0x140>)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	881a      	ldrh	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	881b      	ldrh	r3, [r3, #0]
 80103a0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80103a4:	d00a      	beq.n	80103bc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	881b      	ldrh	r3, [r3, #0]
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7ff ff80 	bl	80102b0 <ptr_to_mem>
 80103b0:	4604      	mov	r4, r0
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7ff ff8e 	bl	80102d4 <mem_to_ptr>
 80103b8:	4603      	mov	r3, r0
 80103ba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	885b      	ldrh	r3, [r3, #2]
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7ff ff75 	bl	80102b0 <ptr_to_mem>
 80103c6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80103c8:	68ba      	ldr	r2, [r7, #8]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d01f      	beq.n	8010410 <plug_holes+0x118>
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	791b      	ldrb	r3, [r3, #4]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d11b      	bne.n	8010410 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80103d8:	4b17      	ldr	r3, [pc, #92]	@ (8010438 <plug_holes+0x140>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d102      	bne.n	80103e8 <plug_holes+0xf0>
      lfree = pmem;
 80103e2:	4a15      	ldr	r2, [pc, #84]	@ (8010438 <plug_holes+0x140>)
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	881a      	ldrh	r2, [r3, #0]
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80103f8:	d00a      	beq.n	8010410 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	881b      	ldrh	r3, [r3, #0]
 80103fe:	4618      	mov	r0, r3
 8010400:	f7ff ff56 	bl	80102b0 <ptr_to_mem>
 8010404:	4604      	mov	r4, r0
 8010406:	68b8      	ldr	r0, [r7, #8]
 8010408:	f7ff ff64 	bl	80102d4 <mem_to_ptr>
 801040c:	4603      	mov	r3, r0
 801040e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010410:	bf00      	nop
 8010412:	3714      	adds	r7, #20
 8010414:	46bd      	mov	sp, r7
 8010416:	bd90      	pop	{r4, r7, pc}
 8010418:	2400e088 	.word	0x2400e088
 801041c:	0801bc10 	.word	0x0801bc10
 8010420:	0801bc40 	.word	0x0801bc40
 8010424:	0801bc58 	.word	0x0801bc58
 8010428:	2400e08c 	.word	0x2400e08c
 801042c:	0801bc80 	.word	0x0801bc80
 8010430:	0801bc9c 	.word	0x0801bc9c
 8010434:	0801bcb8 	.word	0x0801bcb8
 8010438:	2400e094 	.word	0x2400e094

0801043c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010442:	4b1d      	ldr	r3, [pc, #116]	@ (80104b8 <mem_init+0x7c>)
 8010444:	4a1d      	ldr	r2, [pc, #116]	@ (80104bc <mem_init+0x80>)
 8010446:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010448:	4b1b      	ldr	r3, [pc, #108]	@ (80104b8 <mem_init+0x7c>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010454:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2200      	movs	r2, #0
 801045a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010462:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8010466:	f7ff ff23 	bl	80102b0 <ptr_to_mem>
 801046a:	4603      	mov	r3, r0
 801046c:	4a14      	ldr	r2, [pc, #80]	@ (80104c0 <mem_init+0x84>)
 801046e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010470:	4b13      	ldr	r3, [pc, #76]	@ (80104c0 <mem_init+0x84>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2201      	movs	r2, #1
 8010476:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010478:	4b11      	ldr	r3, [pc, #68]	@ (80104c0 <mem_init+0x84>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010480:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010482:	4b0f      	ldr	r3, [pc, #60]	@ (80104c0 <mem_init+0x84>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 801048a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801048c:	4b0a      	ldr	r3, [pc, #40]	@ (80104b8 <mem_init+0x7c>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a0c      	ldr	r2, [pc, #48]	@ (80104c4 <mem_init+0x88>)
 8010492:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010494:	480c      	ldr	r0, [pc, #48]	@ (80104c8 <mem_init+0x8c>)
 8010496:	f00a fa1d 	bl	801a8d4 <sys_mutex_new>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d006      	beq.n	80104ae <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80104a0:	4b0a      	ldr	r3, [pc, #40]	@ (80104cc <mem_init+0x90>)
 80104a2:	f240 221f 	movw	r2, #543	@ 0x21f
 80104a6:	490a      	ldr	r1, [pc, #40]	@ (80104d0 <mem_init+0x94>)
 80104a8:	480a      	ldr	r0, [pc, #40]	@ (80104d4 <mem_init+0x98>)
 80104aa:	f00a fb83 	bl	801abb4 <iprintf>
  }
}
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	2400e088 	.word	0x2400e088
 80104bc:	30000200 	.word	0x30000200
 80104c0:	2400e08c 	.word	0x2400e08c
 80104c4:	2400e094 	.word	0x2400e094
 80104c8:	2400e090 	.word	0x2400e090
 80104cc:	0801bc10 	.word	0x0801bc10
 80104d0:	0801bce4 	.word	0x0801bce4
 80104d4:	0801bc58 	.word	0x0801bc58

080104d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b086      	sub	sp, #24
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7ff fef7 	bl	80102d4 <mem_to_ptr>
 80104e6:	4603      	mov	r3, r0
 80104e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	881b      	ldrh	r3, [r3, #0]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7ff fede 	bl	80102b0 <ptr_to_mem>
 80104f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	885b      	ldrh	r3, [r3, #2]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7ff fed8 	bl	80102b0 <ptr_to_mem>
 8010500:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	881b      	ldrh	r3, [r3, #0]
 8010506:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801050a:	d818      	bhi.n	801053e <mem_link_valid+0x66>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	885b      	ldrh	r3, [r3, #2]
 8010510:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010514:	d813      	bhi.n	801053e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801051a:	8afa      	ldrh	r2, [r7, #22]
 801051c:	429a      	cmp	r2, r3
 801051e:	d004      	beq.n	801052a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	881b      	ldrh	r3, [r3, #0]
 8010524:	8afa      	ldrh	r2, [r7, #22]
 8010526:	429a      	cmp	r2, r3
 8010528:	d109      	bne.n	801053e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801052a:	4b08      	ldr	r3, [pc, #32]	@ (801054c <mem_link_valid+0x74>)
 801052c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801052e:	693a      	ldr	r2, [r7, #16]
 8010530:	429a      	cmp	r2, r3
 8010532:	d006      	beq.n	8010542 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	885b      	ldrh	r3, [r3, #2]
 8010538:	8afa      	ldrh	r2, [r7, #22]
 801053a:	429a      	cmp	r2, r3
 801053c:	d001      	beq.n	8010542 <mem_link_valid+0x6a>
    return 0;
 801053e:	2300      	movs	r3, #0
 8010540:	e000      	b.n	8010544 <mem_link_valid+0x6c>
  }
  return 1;
 8010542:	2301      	movs	r3, #1
}
 8010544:	4618      	mov	r0, r3
 8010546:	3718      	adds	r7, #24
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}
 801054c:	2400e08c 	.word	0x2400e08c

08010550 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b088      	sub	sp, #32
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d070      	beq.n	8010640 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f003 0303 	and.w	r3, r3, #3
 8010564:	2b00      	cmp	r3, #0
 8010566:	d00d      	beq.n	8010584 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010568:	4b37      	ldr	r3, [pc, #220]	@ (8010648 <mem_free+0xf8>)
 801056a:	f240 2273 	movw	r2, #627	@ 0x273
 801056e:	4937      	ldr	r1, [pc, #220]	@ (801064c <mem_free+0xfc>)
 8010570:	4837      	ldr	r0, [pc, #220]	@ (8010650 <mem_free+0x100>)
 8010572:	f00a fb1f 	bl	801abb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010576:	f00a f9ff 	bl	801a978 <sys_arch_protect>
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f00a fa09 	bl	801a994 <sys_arch_unprotect>
    return;
 8010582:	e05e      	b.n	8010642 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	3b08      	subs	r3, #8
 8010588:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801058a:	4b32      	ldr	r3, [pc, #200]	@ (8010654 <mem_free+0x104>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	69fa      	ldr	r2, [r7, #28]
 8010590:	429a      	cmp	r2, r3
 8010592:	d306      	bcc.n	80105a2 <mem_free+0x52>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f103 020c 	add.w	r2, r3, #12
 801059a:	4b2f      	ldr	r3, [pc, #188]	@ (8010658 <mem_free+0x108>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d90d      	bls.n	80105be <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80105a2:	4b29      	ldr	r3, [pc, #164]	@ (8010648 <mem_free+0xf8>)
 80105a4:	f240 227f 	movw	r2, #639	@ 0x27f
 80105a8:	492c      	ldr	r1, [pc, #176]	@ (801065c <mem_free+0x10c>)
 80105aa:	4829      	ldr	r0, [pc, #164]	@ (8010650 <mem_free+0x100>)
 80105ac:	f00a fb02 	bl	801abb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80105b0:	f00a f9e2 	bl	801a978 <sys_arch_protect>
 80105b4:	6138      	str	r0, [r7, #16]
 80105b6:	6938      	ldr	r0, [r7, #16]
 80105b8:	f00a f9ec 	bl	801a994 <sys_arch_unprotect>
    return;
 80105bc:	e041      	b.n	8010642 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80105be:	4828      	ldr	r0, [pc, #160]	@ (8010660 <mem_free+0x110>)
 80105c0:	f00a f99e 	bl	801a900 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	791b      	ldrb	r3, [r3, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d110      	bne.n	80105ee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80105cc:	4b1e      	ldr	r3, [pc, #120]	@ (8010648 <mem_free+0xf8>)
 80105ce:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80105d2:	4924      	ldr	r1, [pc, #144]	@ (8010664 <mem_free+0x114>)
 80105d4:	481e      	ldr	r0, [pc, #120]	@ (8010650 <mem_free+0x100>)
 80105d6:	f00a faed 	bl	801abb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80105da:	4821      	ldr	r0, [pc, #132]	@ (8010660 <mem_free+0x110>)
 80105dc:	f00a f99f 	bl	801a91e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80105e0:	f00a f9ca 	bl	801a978 <sys_arch_protect>
 80105e4:	6178      	str	r0, [r7, #20]
 80105e6:	6978      	ldr	r0, [r7, #20]
 80105e8:	f00a f9d4 	bl	801a994 <sys_arch_unprotect>
    return;
 80105ec:	e029      	b.n	8010642 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80105ee:	69f8      	ldr	r0, [r7, #28]
 80105f0:	f7ff ff72 	bl	80104d8 <mem_link_valid>
 80105f4:	4603      	mov	r3, r0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d110      	bne.n	801061c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80105fa:	4b13      	ldr	r3, [pc, #76]	@ (8010648 <mem_free+0xf8>)
 80105fc:	f240 2295 	movw	r2, #661	@ 0x295
 8010600:	4919      	ldr	r1, [pc, #100]	@ (8010668 <mem_free+0x118>)
 8010602:	4813      	ldr	r0, [pc, #76]	@ (8010650 <mem_free+0x100>)
 8010604:	f00a fad6 	bl	801abb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010608:	4815      	ldr	r0, [pc, #84]	@ (8010660 <mem_free+0x110>)
 801060a:	f00a f988 	bl	801a91e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801060e:	f00a f9b3 	bl	801a978 <sys_arch_protect>
 8010612:	61b8      	str	r0, [r7, #24]
 8010614:	69b8      	ldr	r0, [r7, #24]
 8010616:	f00a f9bd 	bl	801a994 <sys_arch_unprotect>
    return;
 801061a:	e012      	b.n	8010642 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	2200      	movs	r2, #0
 8010620:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010622:	4b12      	ldr	r3, [pc, #72]	@ (801066c <mem_free+0x11c>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	69fa      	ldr	r2, [r7, #28]
 8010628:	429a      	cmp	r2, r3
 801062a:	d202      	bcs.n	8010632 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801062c:	4a0f      	ldr	r2, [pc, #60]	@ (801066c <mem_free+0x11c>)
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010632:	69f8      	ldr	r0, [r7, #28]
 8010634:	f7ff fe60 	bl	80102f8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010638:	4809      	ldr	r0, [pc, #36]	@ (8010660 <mem_free+0x110>)
 801063a:	f00a f970 	bl	801a91e <sys_mutex_unlock>
 801063e:	e000      	b.n	8010642 <mem_free+0xf2>
    return;
 8010640:	bf00      	nop
}
 8010642:	3720      	adds	r7, #32
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	0801bc10 	.word	0x0801bc10
 801064c:	0801bd00 	.word	0x0801bd00
 8010650:	0801bc58 	.word	0x0801bc58
 8010654:	2400e088 	.word	0x2400e088
 8010658:	2400e08c 	.word	0x2400e08c
 801065c:	0801bd24 	.word	0x0801bd24
 8010660:	2400e090 	.word	0x2400e090
 8010664:	0801bd40 	.word	0x0801bd40
 8010668:	0801bd68 	.word	0x0801bd68
 801066c:	2400e094 	.word	0x2400e094

08010670 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b088      	sub	sp, #32
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	460b      	mov	r3, r1
 801067a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801067c:	887b      	ldrh	r3, [r7, #2]
 801067e:	3303      	adds	r3, #3
 8010680:	b29b      	uxth	r3, r3
 8010682:	f023 0303 	bic.w	r3, r3, #3
 8010686:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010688:	8bfb      	ldrh	r3, [r7, #30]
 801068a:	2b0b      	cmp	r3, #11
 801068c:	d801      	bhi.n	8010692 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801068e:	230c      	movs	r3, #12
 8010690:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010692:	8bfb      	ldrh	r3, [r7, #30]
 8010694:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010698:	d803      	bhi.n	80106a2 <mem_trim+0x32>
 801069a:	8bfa      	ldrh	r2, [r7, #30]
 801069c:	887b      	ldrh	r3, [r7, #2]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d201      	bcs.n	80106a6 <mem_trim+0x36>
    return NULL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	e0d8      	b.n	8010858 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80106a6:	4b6e      	ldr	r3, [pc, #440]	@ (8010860 <mem_trim+0x1f0>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d304      	bcc.n	80106ba <mem_trim+0x4a>
 80106b0:	4b6c      	ldr	r3, [pc, #432]	@ (8010864 <mem_trim+0x1f4>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	687a      	ldr	r2, [r7, #4]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d306      	bcc.n	80106c8 <mem_trim+0x58>
 80106ba:	4b6b      	ldr	r3, [pc, #428]	@ (8010868 <mem_trim+0x1f8>)
 80106bc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80106c0:	496a      	ldr	r1, [pc, #424]	@ (801086c <mem_trim+0x1fc>)
 80106c2:	486b      	ldr	r0, [pc, #428]	@ (8010870 <mem_trim+0x200>)
 80106c4:	f00a fa76 	bl	801abb4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80106c8:	4b65      	ldr	r3, [pc, #404]	@ (8010860 <mem_trim+0x1f0>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d304      	bcc.n	80106dc <mem_trim+0x6c>
 80106d2:	4b64      	ldr	r3, [pc, #400]	@ (8010864 <mem_trim+0x1f4>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d307      	bcc.n	80106ec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80106dc:	f00a f94c 	bl	801a978 <sys_arch_protect>
 80106e0:	60b8      	str	r0, [r7, #8]
 80106e2:	68b8      	ldr	r0, [r7, #8]
 80106e4:	f00a f956 	bl	801a994 <sys_arch_unprotect>
    return rmem;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	e0b5      	b.n	8010858 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	3b08      	subs	r3, #8
 80106f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80106f2:	69b8      	ldr	r0, [r7, #24]
 80106f4:	f7ff fdee 	bl	80102d4 <mem_to_ptr>
 80106f8:	4603      	mov	r3, r0
 80106fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	881a      	ldrh	r2, [r3, #0]
 8010700:	8afb      	ldrh	r3, [r7, #22]
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	b29b      	uxth	r3, r3
 8010706:	3b08      	subs	r3, #8
 8010708:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801070a:	8bfa      	ldrh	r2, [r7, #30]
 801070c:	8abb      	ldrh	r3, [r7, #20]
 801070e:	429a      	cmp	r2, r3
 8010710:	d906      	bls.n	8010720 <mem_trim+0xb0>
 8010712:	4b55      	ldr	r3, [pc, #340]	@ (8010868 <mem_trim+0x1f8>)
 8010714:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8010718:	4956      	ldr	r1, [pc, #344]	@ (8010874 <mem_trim+0x204>)
 801071a:	4855      	ldr	r0, [pc, #340]	@ (8010870 <mem_trim+0x200>)
 801071c:	f00a fa4a 	bl	801abb4 <iprintf>
  if (newsize > size) {
 8010720:	8bfa      	ldrh	r2, [r7, #30]
 8010722:	8abb      	ldrh	r3, [r7, #20]
 8010724:	429a      	cmp	r2, r3
 8010726:	d901      	bls.n	801072c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010728:	2300      	movs	r3, #0
 801072a:	e095      	b.n	8010858 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801072c:	8bfa      	ldrh	r2, [r7, #30]
 801072e:	8abb      	ldrh	r3, [r7, #20]
 8010730:	429a      	cmp	r2, r3
 8010732:	d101      	bne.n	8010738 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	e08f      	b.n	8010858 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010738:	484f      	ldr	r0, [pc, #316]	@ (8010878 <mem_trim+0x208>)
 801073a:	f00a f8e1 	bl	801a900 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801073e:	69bb      	ldr	r3, [r7, #24]
 8010740:	881b      	ldrh	r3, [r3, #0]
 8010742:	4618      	mov	r0, r3
 8010744:	f7ff fdb4 	bl	80102b0 <ptr_to_mem>
 8010748:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	791b      	ldrb	r3, [r3, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d13f      	bne.n	80107d2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	881b      	ldrh	r3, [r3, #0]
 8010756:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801075a:	d106      	bne.n	801076a <mem_trim+0xfa>
 801075c:	4b42      	ldr	r3, [pc, #264]	@ (8010868 <mem_trim+0x1f8>)
 801075e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8010762:	4946      	ldr	r1, [pc, #280]	@ (801087c <mem_trim+0x20c>)
 8010764:	4842      	ldr	r0, [pc, #264]	@ (8010870 <mem_trim+0x200>)
 8010766:	f00a fa25 	bl	801abb4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	881b      	ldrh	r3, [r3, #0]
 801076e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010770:	8afa      	ldrh	r2, [r7, #22]
 8010772:	8bfb      	ldrh	r3, [r7, #30]
 8010774:	4413      	add	r3, r2
 8010776:	b29b      	uxth	r3, r3
 8010778:	3308      	adds	r3, #8
 801077a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801077c:	4b40      	ldr	r3, [pc, #256]	@ (8010880 <mem_trim+0x210>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	693a      	ldr	r2, [r7, #16]
 8010782:	429a      	cmp	r2, r3
 8010784:	d106      	bne.n	8010794 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010786:	89fb      	ldrh	r3, [r7, #14]
 8010788:	4618      	mov	r0, r3
 801078a:	f7ff fd91 	bl	80102b0 <ptr_to_mem>
 801078e:	4603      	mov	r3, r0
 8010790:	4a3b      	ldr	r2, [pc, #236]	@ (8010880 <mem_trim+0x210>)
 8010792:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010794:	89fb      	ldrh	r3, [r7, #14]
 8010796:	4618      	mov	r0, r3
 8010798:	f7ff fd8a 	bl	80102b0 <ptr_to_mem>
 801079c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	2200      	movs	r2, #0
 80107a2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	89ba      	ldrh	r2, [r7, #12]
 80107a8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	8afa      	ldrh	r2, [r7, #22]
 80107ae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	89fa      	ldrh	r2, [r7, #14]
 80107b4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	881b      	ldrh	r3, [r3, #0]
 80107ba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80107be:	d047      	beq.n	8010850 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	881b      	ldrh	r3, [r3, #0]
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7ff fd73 	bl	80102b0 <ptr_to_mem>
 80107ca:	4602      	mov	r2, r0
 80107cc:	89fb      	ldrh	r3, [r7, #14]
 80107ce:	8053      	strh	r3, [r2, #2]
 80107d0:	e03e      	b.n	8010850 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80107d2:	8bfb      	ldrh	r3, [r7, #30]
 80107d4:	f103 0214 	add.w	r2, r3, #20
 80107d8:	8abb      	ldrh	r3, [r7, #20]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d838      	bhi.n	8010850 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80107de:	8afa      	ldrh	r2, [r7, #22]
 80107e0:	8bfb      	ldrh	r3, [r7, #30]
 80107e2:	4413      	add	r3, r2
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	3308      	adds	r3, #8
 80107e8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	881b      	ldrh	r3, [r3, #0]
 80107ee:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80107f2:	d106      	bne.n	8010802 <mem_trim+0x192>
 80107f4:	4b1c      	ldr	r3, [pc, #112]	@ (8010868 <mem_trim+0x1f8>)
 80107f6:	f240 3216 	movw	r2, #790	@ 0x316
 80107fa:	4920      	ldr	r1, [pc, #128]	@ (801087c <mem_trim+0x20c>)
 80107fc:	481c      	ldr	r0, [pc, #112]	@ (8010870 <mem_trim+0x200>)
 80107fe:	f00a f9d9 	bl	801abb4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010802:	89fb      	ldrh	r3, [r7, #14]
 8010804:	4618      	mov	r0, r3
 8010806:	f7ff fd53 	bl	80102b0 <ptr_to_mem>
 801080a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801080c:	4b1c      	ldr	r3, [pc, #112]	@ (8010880 <mem_trim+0x210>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	693a      	ldr	r2, [r7, #16]
 8010812:	429a      	cmp	r2, r3
 8010814:	d202      	bcs.n	801081c <mem_trim+0x1ac>
      lfree = mem2;
 8010816:	4a1a      	ldr	r2, [pc, #104]	@ (8010880 <mem_trim+0x210>)
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	2200      	movs	r2, #0
 8010820:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	881a      	ldrh	r2, [r3, #0]
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801082a:	693b      	ldr	r3, [r7, #16]
 801082c:	8afa      	ldrh	r2, [r7, #22]
 801082e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010830:	69bb      	ldr	r3, [r7, #24]
 8010832:	89fa      	ldrh	r2, [r7, #14]
 8010834:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	881b      	ldrh	r3, [r3, #0]
 801083a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801083e:	d007      	beq.n	8010850 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	881b      	ldrh	r3, [r3, #0]
 8010844:	4618      	mov	r0, r3
 8010846:	f7ff fd33 	bl	80102b0 <ptr_to_mem>
 801084a:	4602      	mov	r2, r0
 801084c:	89fb      	ldrh	r3, [r7, #14]
 801084e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010850:	4809      	ldr	r0, [pc, #36]	@ (8010878 <mem_trim+0x208>)
 8010852:	f00a f864 	bl	801a91e <sys_mutex_unlock>
  return rmem;
 8010856:	687b      	ldr	r3, [r7, #4]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3720      	adds	r7, #32
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	2400e088 	.word	0x2400e088
 8010864:	2400e08c 	.word	0x2400e08c
 8010868:	0801bc10 	.word	0x0801bc10
 801086c:	0801bd9c 	.word	0x0801bd9c
 8010870:	0801bc58 	.word	0x0801bc58
 8010874:	0801bdb4 	.word	0x0801bdb4
 8010878:	2400e090 	.word	0x2400e090
 801087c:	0801bdd4 	.word	0x0801bdd4
 8010880:	2400e094 	.word	0x2400e094

08010884 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b088      	sub	sp, #32
 8010888:	af00      	add	r7, sp, #0
 801088a:	4603      	mov	r3, r0
 801088c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801088e:	88fb      	ldrh	r3, [r7, #6]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d101      	bne.n	8010898 <mem_malloc+0x14>
    return NULL;
 8010894:	2300      	movs	r3, #0
 8010896:	e0e2      	b.n	8010a5e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010898:	88fb      	ldrh	r3, [r7, #6]
 801089a:	3303      	adds	r3, #3
 801089c:	b29b      	uxth	r3, r3
 801089e:	f023 0303 	bic.w	r3, r3, #3
 80108a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80108a4:	8bbb      	ldrh	r3, [r7, #28]
 80108a6:	2b0b      	cmp	r3, #11
 80108a8:	d801      	bhi.n	80108ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80108aa:	230c      	movs	r3, #12
 80108ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80108ae:	8bbb      	ldrh	r3, [r7, #28]
 80108b0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80108b4:	d803      	bhi.n	80108be <mem_malloc+0x3a>
 80108b6:	8bba      	ldrh	r2, [r7, #28]
 80108b8:	88fb      	ldrh	r3, [r7, #6]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d201      	bcs.n	80108c2 <mem_malloc+0x3e>
    return NULL;
 80108be:	2300      	movs	r3, #0
 80108c0:	e0cd      	b.n	8010a5e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80108c2:	4869      	ldr	r0, [pc, #420]	@ (8010a68 <mem_malloc+0x1e4>)
 80108c4:	f00a f81c 	bl	801a900 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80108c8:	4b68      	ldr	r3, [pc, #416]	@ (8010a6c <mem_malloc+0x1e8>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7ff fd01 	bl	80102d4 <mem_to_ptr>
 80108d2:	4603      	mov	r3, r0
 80108d4:	83fb      	strh	r3, [r7, #30]
 80108d6:	e0b7      	b.n	8010a48 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80108d8:	8bfb      	ldrh	r3, [r7, #30]
 80108da:	4618      	mov	r0, r3
 80108dc:	f7ff fce8 	bl	80102b0 <ptr_to_mem>
 80108e0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	791b      	ldrb	r3, [r3, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	f040 80a7 	bne.w	8010a3a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	461a      	mov	r2, r3
 80108f2:	8bfb      	ldrh	r3, [r7, #30]
 80108f4:	1ad3      	subs	r3, r2, r3
 80108f6:	f1a3 0208 	sub.w	r2, r3, #8
 80108fa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80108fc:	429a      	cmp	r2, r3
 80108fe:	f0c0 809c 	bcc.w	8010a3a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	881b      	ldrh	r3, [r3, #0]
 8010906:	461a      	mov	r2, r3
 8010908:	8bfb      	ldrh	r3, [r7, #30]
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	f1a3 0208 	sub.w	r2, r3, #8
 8010910:	8bbb      	ldrh	r3, [r7, #28]
 8010912:	3314      	adds	r3, #20
 8010914:	429a      	cmp	r2, r3
 8010916:	d333      	bcc.n	8010980 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010918:	8bfa      	ldrh	r2, [r7, #30]
 801091a:	8bbb      	ldrh	r3, [r7, #28]
 801091c:	4413      	add	r3, r2
 801091e:	b29b      	uxth	r3, r3
 8010920:	3308      	adds	r3, #8
 8010922:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010924:	8a7b      	ldrh	r3, [r7, #18]
 8010926:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801092a:	d106      	bne.n	801093a <mem_malloc+0xb6>
 801092c:	4b50      	ldr	r3, [pc, #320]	@ (8010a70 <mem_malloc+0x1ec>)
 801092e:	f240 3287 	movw	r2, #903	@ 0x387
 8010932:	4950      	ldr	r1, [pc, #320]	@ (8010a74 <mem_malloc+0x1f0>)
 8010934:	4850      	ldr	r0, [pc, #320]	@ (8010a78 <mem_malloc+0x1f4>)
 8010936:	f00a f93d 	bl	801abb4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801093a:	8a7b      	ldrh	r3, [r7, #18]
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff fcb7 	bl	80102b0 <ptr_to_mem>
 8010942:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2200      	movs	r2, #0
 8010948:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	881a      	ldrh	r2, [r3, #0]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	8bfa      	ldrh	r2, [r7, #30]
 8010956:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	8a7a      	ldrh	r2, [r7, #18]
 801095c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	2201      	movs	r2, #1
 8010962:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801096c:	d00b      	beq.n	8010986 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	881b      	ldrh	r3, [r3, #0]
 8010972:	4618      	mov	r0, r3
 8010974:	f7ff fc9c 	bl	80102b0 <ptr_to_mem>
 8010978:	4602      	mov	r2, r0
 801097a:	8a7b      	ldrh	r3, [r7, #18]
 801097c:	8053      	strh	r3, [r2, #2]
 801097e:	e002      	b.n	8010986 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	2201      	movs	r2, #1
 8010984:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010986:	4b39      	ldr	r3, [pc, #228]	@ (8010a6c <mem_malloc+0x1e8>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	697a      	ldr	r2, [r7, #20]
 801098c:	429a      	cmp	r2, r3
 801098e:	d127      	bne.n	80109e0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010990:	4b36      	ldr	r3, [pc, #216]	@ (8010a6c <mem_malloc+0x1e8>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010996:	e005      	b.n	80109a4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	881b      	ldrh	r3, [r3, #0]
 801099c:	4618      	mov	r0, r3
 801099e:	f7ff fc87 	bl	80102b0 <ptr_to_mem>
 80109a2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	791b      	ldrb	r3, [r3, #4]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d004      	beq.n	80109b6 <mem_malloc+0x132>
 80109ac:	4b33      	ldr	r3, [pc, #204]	@ (8010a7c <mem_malloc+0x1f8>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	69ba      	ldr	r2, [r7, #24]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d1f0      	bne.n	8010998 <mem_malloc+0x114>
          }
          lfree = cur;
 80109b6:	4a2d      	ldr	r2, [pc, #180]	@ (8010a6c <mem_malloc+0x1e8>)
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80109bc:	4b2b      	ldr	r3, [pc, #172]	@ (8010a6c <mem_malloc+0x1e8>)
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	4b2e      	ldr	r3, [pc, #184]	@ (8010a7c <mem_malloc+0x1f8>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d00b      	beq.n	80109e0 <mem_malloc+0x15c>
 80109c8:	4b28      	ldr	r3, [pc, #160]	@ (8010a6c <mem_malloc+0x1e8>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	791b      	ldrb	r3, [r3, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d006      	beq.n	80109e0 <mem_malloc+0x15c>
 80109d2:	4b27      	ldr	r3, [pc, #156]	@ (8010a70 <mem_malloc+0x1ec>)
 80109d4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80109d8:	4929      	ldr	r1, [pc, #164]	@ (8010a80 <mem_malloc+0x1fc>)
 80109da:	4827      	ldr	r0, [pc, #156]	@ (8010a78 <mem_malloc+0x1f4>)
 80109dc:	f00a f8ea 	bl	801abb4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80109e0:	4821      	ldr	r0, [pc, #132]	@ (8010a68 <mem_malloc+0x1e4>)
 80109e2:	f009 ff9c 	bl	801a91e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80109e6:	8bba      	ldrh	r2, [r7, #28]
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	4413      	add	r3, r2
 80109ec:	3308      	adds	r3, #8
 80109ee:	4a23      	ldr	r2, [pc, #140]	@ (8010a7c <mem_malloc+0x1f8>)
 80109f0:	6812      	ldr	r2, [r2, #0]
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d906      	bls.n	8010a04 <mem_malloc+0x180>
 80109f6:	4b1e      	ldr	r3, [pc, #120]	@ (8010a70 <mem_malloc+0x1ec>)
 80109f8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80109fc:	4921      	ldr	r1, [pc, #132]	@ (8010a84 <mem_malloc+0x200>)
 80109fe:	481e      	ldr	r0, [pc, #120]	@ (8010a78 <mem_malloc+0x1f4>)
 8010a00:	f00a f8d8 	bl	801abb4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	f003 0303 	and.w	r3, r3, #3
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d006      	beq.n	8010a1c <mem_malloc+0x198>
 8010a0e:	4b18      	ldr	r3, [pc, #96]	@ (8010a70 <mem_malloc+0x1ec>)
 8010a10:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8010a14:	491c      	ldr	r1, [pc, #112]	@ (8010a88 <mem_malloc+0x204>)
 8010a16:	4818      	ldr	r0, [pc, #96]	@ (8010a78 <mem_malloc+0x1f4>)
 8010a18:	f00a f8cc 	bl	801abb4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	f003 0303 	and.w	r3, r3, #3
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d006      	beq.n	8010a34 <mem_malloc+0x1b0>
 8010a26:	4b12      	ldr	r3, [pc, #72]	@ (8010a70 <mem_malloc+0x1ec>)
 8010a28:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8010a2c:	4917      	ldr	r1, [pc, #92]	@ (8010a8c <mem_malloc+0x208>)
 8010a2e:	4812      	ldr	r0, [pc, #72]	@ (8010a78 <mem_malloc+0x1f4>)
 8010a30:	f00a f8c0 	bl	801abb4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	3308      	adds	r3, #8
 8010a38:	e011      	b.n	8010a5e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010a3a:	8bfb      	ldrh	r3, [r7, #30]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7ff fc37 	bl	80102b0 <ptr_to_mem>
 8010a42:	4603      	mov	r3, r0
 8010a44:	881b      	ldrh	r3, [r3, #0]
 8010a46:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010a48:	8bfa      	ldrh	r2, [r7, #30]
 8010a4a:	8bbb      	ldrh	r3, [r7, #28]
 8010a4c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8010a50:	429a      	cmp	r2, r3
 8010a52:	f4ff af41 	bcc.w	80108d8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010a56:	4804      	ldr	r0, [pc, #16]	@ (8010a68 <mem_malloc+0x1e4>)
 8010a58:	f009 ff61 	bl	801a91e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3720      	adds	r7, #32
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	2400e090 	.word	0x2400e090
 8010a6c:	2400e094 	.word	0x2400e094
 8010a70:	0801bc10 	.word	0x0801bc10
 8010a74:	0801bdd4 	.word	0x0801bdd4
 8010a78:	0801bc58 	.word	0x0801bc58
 8010a7c:	2400e08c 	.word	0x2400e08c
 8010a80:	0801bde8 	.word	0x0801bde8
 8010a84:	0801be04 	.word	0x0801be04
 8010a88:	0801be34 	.word	0x0801be34
 8010a8c:	0801be64 	.word	0x0801be64

08010a90 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b085      	sub	sp, #20
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	3303      	adds	r3, #3
 8010aa6:	f023 0303 	bic.w	r3, r3, #3
 8010aaa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010aac:	2300      	movs	r3, #0
 8010aae:	60fb      	str	r3, [r7, #12]
 8010ab0:	e011      	b.n	8010ad6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	689b      	ldr	r3, [r3, #8]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	689b      	ldr	r3, [r3, #8]
 8010ac0:	68ba      	ldr	r2, [r7, #8]
 8010ac2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	881b      	ldrh	r3, [r3, #0]
 8010ac8:	461a      	mov	r2, r3
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	4413      	add	r3, r2
 8010ace:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	60fb      	str	r3, [r7, #12]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	885b      	ldrh	r3, [r3, #2]
 8010ada:	461a      	mov	r2, r3
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	dbe7      	blt.n	8010ab2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010ae2:	bf00      	nop
 8010ae4:	bf00      	nop
 8010ae6:	3714      	adds	r7, #20
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010af6:	2300      	movs	r3, #0
 8010af8:	80fb      	strh	r3, [r7, #6]
 8010afa:	e009      	b.n	8010b10 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010afc:	88fb      	ldrh	r3, [r7, #6]
 8010afe:	4a08      	ldr	r2, [pc, #32]	@ (8010b20 <memp_init+0x30>)
 8010b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff ffc3 	bl	8010a90 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010b0a:	88fb      	ldrh	r3, [r7, #6]
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	80fb      	strh	r3, [r7, #6]
 8010b10:	88fb      	ldrh	r3, [r7, #6]
 8010b12:	2b0d      	cmp	r3, #13
 8010b14:	d9f2      	bls.n	8010afc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010b16:	bf00      	nop
 8010b18:	bf00      	nop
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	0801e798 	.word	0x0801e798

08010b24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010b2c:	f009 ff24 	bl	801a978 <sys_arch_protect>
 8010b30:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	689b      	ldr	r3, [r3, #8]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d015      	beq.n	8010b6c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	6812      	ldr	r2, [r2, #0]
 8010b48:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	f003 0303 	and.w	r3, r3, #3
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d006      	beq.n	8010b62 <do_memp_malloc_pool+0x3e>
 8010b54:	4b09      	ldr	r3, [pc, #36]	@ (8010b7c <do_memp_malloc_pool+0x58>)
 8010b56:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8010b5a:	4909      	ldr	r1, [pc, #36]	@ (8010b80 <do_memp_malloc_pool+0x5c>)
 8010b5c:	4809      	ldr	r0, [pc, #36]	@ (8010b84 <do_memp_malloc_pool+0x60>)
 8010b5e:	f00a f829 	bl	801abb4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010b62:	68f8      	ldr	r0, [r7, #12]
 8010b64:	f009 ff16 	bl	801a994 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	e003      	b.n	8010b74 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f009 ff11 	bl	801a994 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010b72:	2300      	movs	r3, #0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3710      	adds	r7, #16
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	0801be88 	.word	0x0801be88
 8010b80:	0801beb8 	.word	0x0801beb8
 8010b84:	0801bedc 	.word	0x0801bedc

08010b88 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d106      	bne.n	8010ba4 <memp_malloc_pool+0x1c>
 8010b96:	4b0a      	ldr	r3, [pc, #40]	@ (8010bc0 <memp_malloc_pool+0x38>)
 8010b98:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8010b9c:	4909      	ldr	r1, [pc, #36]	@ (8010bc4 <memp_malloc_pool+0x3c>)
 8010b9e:	480a      	ldr	r0, [pc, #40]	@ (8010bc8 <memp_malloc_pool+0x40>)
 8010ba0:	f00a f808 	bl	801abb4 <iprintf>
  if (desc == NULL) {
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d101      	bne.n	8010bae <memp_malloc_pool+0x26>
    return NULL;
 8010baa:	2300      	movs	r3, #0
 8010bac:	e003      	b.n	8010bb6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f7ff ffb8 	bl	8010b24 <do_memp_malloc_pool>
 8010bb4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	0801be88 	.word	0x0801be88
 8010bc4:	0801bf04 	.word	0x0801bf04
 8010bc8:	0801bedc 	.word	0x0801bedc

08010bcc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010bd6:	79fb      	ldrb	r3, [r7, #7]
 8010bd8:	2b0d      	cmp	r3, #13
 8010bda:	d908      	bls.n	8010bee <memp_malloc+0x22>
 8010bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8010c08 <memp_malloc+0x3c>)
 8010bde:	f240 1257 	movw	r2, #343	@ 0x157
 8010be2:	490a      	ldr	r1, [pc, #40]	@ (8010c0c <memp_malloc+0x40>)
 8010be4:	480a      	ldr	r0, [pc, #40]	@ (8010c10 <memp_malloc+0x44>)
 8010be6:	f009 ffe5 	bl	801abb4 <iprintf>
 8010bea:	2300      	movs	r3, #0
 8010bec:	e008      	b.n	8010c00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010bee:	79fb      	ldrb	r3, [r7, #7]
 8010bf0:	4a08      	ldr	r2, [pc, #32]	@ (8010c14 <memp_malloc+0x48>)
 8010bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7ff ff94 	bl	8010b24 <do_memp_malloc_pool>
 8010bfc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	0801be88 	.word	0x0801be88
 8010c0c:	0801bf18 	.word	0x0801bf18
 8010c10:	0801bedc 	.word	0x0801bedc
 8010c14:	0801e798 	.word	0x0801e798

08010c18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	f003 0303 	and.w	r3, r3, #3
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d006      	beq.n	8010c3a <do_memp_free_pool+0x22>
 8010c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8010c64 <do_memp_free_pool+0x4c>)
 8010c2e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8010c32:	490d      	ldr	r1, [pc, #52]	@ (8010c68 <do_memp_free_pool+0x50>)
 8010c34:	480d      	ldr	r0, [pc, #52]	@ (8010c6c <do_memp_free_pool+0x54>)
 8010c36:	f009 ffbd 	bl	801abb4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010c3e:	f009 fe9b 	bl	801a978 <sys_arch_protect>
 8010c42:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	689b      	ldr	r3, [r3, #8]
 8010c48:	681a      	ldr	r2, [r3, #0]
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	689b      	ldr	r3, [r3, #8]
 8010c52:	68fa      	ldr	r2, [r7, #12]
 8010c54:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010c56:	68b8      	ldr	r0, [r7, #8]
 8010c58:	f009 fe9c 	bl	801a994 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010c5c:	bf00      	nop
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	0801be88 	.word	0x0801be88
 8010c68:	0801bf38 	.word	0x0801bf38
 8010c6c:	0801bedc 	.word	0x0801bedc

08010c70 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d106      	bne.n	8010c8e <memp_free_pool+0x1e>
 8010c80:	4b0a      	ldr	r3, [pc, #40]	@ (8010cac <memp_free_pool+0x3c>)
 8010c82:	f240 1295 	movw	r2, #405	@ 0x195
 8010c86:	490a      	ldr	r1, [pc, #40]	@ (8010cb0 <memp_free_pool+0x40>)
 8010c88:	480a      	ldr	r0, [pc, #40]	@ (8010cb4 <memp_free_pool+0x44>)
 8010c8a:	f009 ff93 	bl	801abb4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d007      	beq.n	8010ca4 <memp_free_pool+0x34>
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d004      	beq.n	8010ca4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010c9a:	6839      	ldr	r1, [r7, #0]
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7ff ffbb 	bl	8010c18 <do_memp_free_pool>
 8010ca2:	e000      	b.n	8010ca6 <memp_free_pool+0x36>
    return;
 8010ca4:	bf00      	nop
}
 8010ca6:	3708      	adds	r7, #8
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	0801be88 	.word	0x0801be88
 8010cb0:	0801bf04 	.word	0x0801bf04
 8010cb4:	0801bedc 	.word	0x0801bedc

08010cb8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	6039      	str	r1, [r7, #0]
 8010cc2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	2b0d      	cmp	r3, #13
 8010cc8:	d907      	bls.n	8010cda <memp_free+0x22>
 8010cca:	4b0c      	ldr	r3, [pc, #48]	@ (8010cfc <memp_free+0x44>)
 8010ccc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8010cd0:	490b      	ldr	r1, [pc, #44]	@ (8010d00 <memp_free+0x48>)
 8010cd2:	480c      	ldr	r0, [pc, #48]	@ (8010d04 <memp_free+0x4c>)
 8010cd4:	f009 ff6e 	bl	801abb4 <iprintf>
 8010cd8:	e00c      	b.n	8010cf4 <memp_free+0x3c>

  if (mem == NULL) {
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d008      	beq.n	8010cf2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
 8010ce2:	4a09      	ldr	r2, [pc, #36]	@ (8010d08 <memp_free+0x50>)
 8010ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ce8:	6839      	ldr	r1, [r7, #0]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7ff ff94 	bl	8010c18 <do_memp_free_pool>
 8010cf0:	e000      	b.n	8010cf4 <memp_free+0x3c>
    return;
 8010cf2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010cf4:	3708      	adds	r7, #8
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	0801be88 	.word	0x0801be88
 8010d00:	0801bf58 	.word	0x0801bf58
 8010d04:	0801bedc 	.word	0x0801bedc
 8010d08:	0801e798 	.word	0x0801e798

08010d0c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010d10:	bf00      	nop
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr
	...

08010d1c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b086      	sub	sp, #24
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	60f8      	str	r0, [r7, #12]
 8010d24:	60b9      	str	r1, [r7, #8]
 8010d26:	607a      	str	r2, [r7, #4]
 8010d28:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d108      	bne.n	8010d42 <netif_add+0x26>
 8010d30:	4b57      	ldr	r3, [pc, #348]	@ (8010e90 <netif_add+0x174>)
 8010d32:	f240 1227 	movw	r2, #295	@ 0x127
 8010d36:	4957      	ldr	r1, [pc, #348]	@ (8010e94 <netif_add+0x178>)
 8010d38:	4857      	ldr	r0, [pc, #348]	@ (8010e98 <netif_add+0x17c>)
 8010d3a:	f009 ff3b 	bl	801abb4 <iprintf>
 8010d3e:	2300      	movs	r3, #0
 8010d40:	e0a2      	b.n	8010e88 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d108      	bne.n	8010d5a <netif_add+0x3e>
 8010d48:	4b51      	ldr	r3, [pc, #324]	@ (8010e90 <netif_add+0x174>)
 8010d4a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8010d4e:	4953      	ldr	r1, [pc, #332]	@ (8010e9c <netif_add+0x180>)
 8010d50:	4851      	ldr	r0, [pc, #324]	@ (8010e98 <netif_add+0x17c>)
 8010d52:	f009 ff2f 	bl	801abb4 <iprintf>
 8010d56:	2300      	movs	r3, #0
 8010d58:	e096      	b.n	8010e88 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d101      	bne.n	8010d64 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010d60:	4b4f      	ldr	r3, [pc, #316]	@ (8010ea0 <netif_add+0x184>)
 8010d62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8010ea0 <netif_add+0x184>)
 8010d6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d101      	bne.n	8010d78 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010d74:	4b4a      	ldr	r3, [pc, #296]	@ (8010ea0 <netif_add+0x184>)
 8010d76:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2200      	movs	r2, #0
 8010d82:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	2200      	movs	r2, #0
 8010d88:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	4a45      	ldr	r2, [pc, #276]	@ (8010ea4 <netif_add+0x188>)
 8010d8e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2200      	movs	r2, #0
 8010d94:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2200      	movs	r2, #0
 8010da2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	6a3a      	ldr	r2, [r7, #32]
 8010da8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010daa:	4b3f      	ldr	r3, [pc, #252]	@ (8010ea8 <netif_add+0x18c>)
 8010dac:	781a      	ldrb	r2, [r3, #0]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010db8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	68b9      	ldr	r1, [r7, #8]
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f000 f917 	bl	8010ff4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	4798      	blx	r3
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d001      	beq.n	8010dd6 <netif_add+0xba>
    return NULL;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	e058      	b.n	8010e88 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010ddc:	2bff      	cmp	r3, #255	@ 0xff
 8010dde:	d103      	bne.n	8010de8 <netif_add+0xcc>
        netif->num = 0;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2200      	movs	r2, #0
 8010de4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8010de8:	2300      	movs	r3, #0
 8010dea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010dec:	4b2f      	ldr	r3, [pc, #188]	@ (8010eac <netif_add+0x190>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	617b      	str	r3, [r7, #20]
 8010df2:	e02b      	b.n	8010e4c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010df4:	697a      	ldr	r2, [r7, #20]
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d106      	bne.n	8010e0a <netif_add+0xee>
 8010dfc:	4b24      	ldr	r3, [pc, #144]	@ (8010e90 <netif_add+0x174>)
 8010dfe:	f240 128b 	movw	r2, #395	@ 0x18b
 8010e02:	492b      	ldr	r1, [pc, #172]	@ (8010eb0 <netif_add+0x194>)
 8010e04:	4824      	ldr	r0, [pc, #144]	@ (8010e98 <netif_add+0x17c>)
 8010e06:	f009 fed5 	bl	801abb4 <iprintf>
        num_netifs++;
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	2bff      	cmp	r3, #255	@ 0xff
 8010e14:	dd06      	ble.n	8010e24 <netif_add+0x108>
 8010e16:	4b1e      	ldr	r3, [pc, #120]	@ (8010e90 <netif_add+0x174>)
 8010e18:	f240 128d 	movw	r2, #397	@ 0x18d
 8010e1c:	4925      	ldr	r1, [pc, #148]	@ (8010eb4 <netif_add+0x198>)
 8010e1e:	481e      	ldr	r0, [pc, #120]	@ (8010e98 <netif_add+0x17c>)
 8010e20:	f009 fec8 	bl	801abb4 <iprintf>
        if (netif2->num == netif->num) {
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d108      	bne.n	8010e46 <netif_add+0x12a>
          netif->num++;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	b2da      	uxtb	r2, r3
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8010e44:	e005      	b.n	8010e52 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	617b      	str	r3, [r7, #20]
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d1d0      	bne.n	8010df4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1be      	bne.n	8010dd6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010e5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8010e60:	d103      	bne.n	8010e6a <netif_add+0x14e>
    netif_num = 0;
 8010e62:	4b11      	ldr	r3, [pc, #68]	@ (8010ea8 <netif_add+0x18c>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	701a      	strb	r2, [r3, #0]
 8010e68:	e006      	b.n	8010e78 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010e70:	3301      	adds	r3, #1
 8010e72:	b2da      	uxtb	r2, r3
 8010e74:	4b0c      	ldr	r3, [pc, #48]	@ (8010ea8 <netif_add+0x18c>)
 8010e76:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010e78:	4b0c      	ldr	r3, [pc, #48]	@ (8010eac <netif_add+0x190>)
 8010e7a:	681a      	ldr	r2, [r3, #0]
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010e80:	4a0a      	ldr	r2, [pc, #40]	@ (8010eac <netif_add+0x190>)
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010e86:	68fb      	ldr	r3, [r7, #12]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3718      	adds	r7, #24
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}
 8010e90:	0801bf74 	.word	0x0801bf74
 8010e94:	0801c008 	.word	0x0801c008
 8010e98:	0801bfc4 	.word	0x0801bfc4
 8010e9c:	0801c024 	.word	0x0801c024
 8010ea0:	0801e810 	.word	0x0801e810
 8010ea4:	080112cf 	.word	0x080112cf
 8010ea8:	24014ba4 	.word	0x24014ba4
 8010eac:	24014b9c 	.word	0x24014b9c
 8010eb0:	0801c048 	.word	0x0801c048
 8010eb4:	0801c05c 	.word	0x0801c05c

08010eb8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010ec2:	6839      	ldr	r1, [r7, #0]
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f002 fc87 	bl	80137d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010eca:	6839      	ldr	r1, [r7, #0]
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f007 f8c7 	bl	8018060 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8010ed2:	6839      	ldr	r1, [r7, #0]
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f001 f901 	bl	80120dc <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 8010eda:	bf00      	nop
 8010edc:	3708      	adds	r7, #8
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
	...

08010ee4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b086      	sub	sp, #24
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d106      	bne.n	8010f04 <netif_do_set_ipaddr+0x20>
 8010ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8010f6c <netif_do_set_ipaddr+0x88>)
 8010ef8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8010efc:	491c      	ldr	r1, [pc, #112]	@ (8010f70 <netif_do_set_ipaddr+0x8c>)
 8010efe:	481d      	ldr	r0, [pc, #116]	@ (8010f74 <netif_do_set_ipaddr+0x90>)
 8010f00:	f009 fe58 	bl	801abb4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d106      	bne.n	8010f18 <netif_do_set_ipaddr+0x34>
 8010f0a:	4b18      	ldr	r3, [pc, #96]	@ (8010f6c <netif_do_set_ipaddr+0x88>)
 8010f0c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8010f10:	4917      	ldr	r1, [pc, #92]	@ (8010f70 <netif_do_set_ipaddr+0x8c>)
 8010f12:	4818      	ldr	r0, [pc, #96]	@ (8010f74 <netif_do_set_ipaddr+0x90>)
 8010f14:	f009 fe4e 	bl	801abb4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	3304      	adds	r3, #4
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d01c      	beq.n	8010f60 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	3304      	adds	r3, #4
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010f36:	f107 0314 	add.w	r3, r7, #20
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7ff ffbb 	bl	8010eb8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d002      	beq.n	8010f4e <netif_do_set_ipaddr+0x6a>
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	e000      	b.n	8010f50 <netif_do_set_ipaddr+0x6c>
 8010f4e:	2300      	movs	r3, #0
 8010f50:	68fa      	ldr	r2, [r7, #12]
 8010f52:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010f54:	2101      	movs	r1, #1
 8010f56:	68f8      	ldr	r0, [r7, #12]
 8010f58:	f000 f8d2 	bl	8011100 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	e000      	b.n	8010f62 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010f60:	2300      	movs	r3, #0
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3718      	adds	r7, #24
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	0801bf74 	.word	0x0801bf74
 8010f70:	0801c08c 	.word	0x0801c08c
 8010f74:	0801bfc4 	.word	0x0801bfc4

08010f78 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b085      	sub	sp, #20
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	60b9      	str	r1, [r7, #8]
 8010f82:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	3308      	adds	r3, #8
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d00a      	beq.n	8010fa8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d002      	beq.n	8010f9e <netif_do_set_netmask+0x26>
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	e000      	b.n	8010fa0 <netif_do_set_netmask+0x28>
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e000      	b.n	8010faa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010fa8:	2300      	movs	r3, #0
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3714      	adds	r7, #20
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb4:	4770      	bx	lr

08010fb6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010fb6:	b480      	push	{r7}
 8010fb8:	b085      	sub	sp, #20
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	60f8      	str	r0, [r7, #12]
 8010fbe:	60b9      	str	r1, [r7, #8]
 8010fc0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	330c      	adds	r3, #12
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d00a      	beq.n	8010fe6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d002      	beq.n	8010fdc <netif_do_set_gw+0x26>
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	e000      	b.n	8010fde <netif_do_set_gw+0x28>
 8010fdc:	2300      	movs	r3, #0
 8010fde:	68fa      	ldr	r2, [r7, #12]
 8010fe0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	e000      	b.n	8010fe8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010fe6:	2300      	movs	r3, #0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3714      	adds	r7, #20
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr

08010ff4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b088      	sub	sp, #32
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	60f8      	str	r0, [r7, #12]
 8010ffc:	60b9      	str	r1, [r7, #8]
 8010ffe:	607a      	str	r2, [r7, #4]
 8011000:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011002:	2300      	movs	r3, #0
 8011004:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011006:	2300      	movs	r3, #0
 8011008:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d101      	bne.n	8011014 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011010:	4b1c      	ldr	r3, [pc, #112]	@ (8011084 <netif_set_addr+0x90>)
 8011012:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d101      	bne.n	801101e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801101a:	4b1a      	ldr	r3, [pc, #104]	@ (8011084 <netif_set_addr+0x90>)
 801101c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d101      	bne.n	8011028 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011024:	4b17      	ldr	r3, [pc, #92]	@ (8011084 <netif_set_addr+0x90>)
 8011026:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d003      	beq.n	8011036 <netif_set_addr+0x42>
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d101      	bne.n	801103a <netif_set_addr+0x46>
 8011036:	2301      	movs	r3, #1
 8011038:	e000      	b.n	801103c <netif_set_addr+0x48>
 801103a:	2300      	movs	r3, #0
 801103c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d006      	beq.n	8011052 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011044:	f107 0310 	add.w	r3, r7, #16
 8011048:	461a      	mov	r2, r3
 801104a:	68b9      	ldr	r1, [r7, #8]
 801104c:	68f8      	ldr	r0, [r7, #12]
 801104e:	f7ff ff49 	bl	8010ee4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011052:	69fa      	ldr	r2, [r7, #28]
 8011054:	6879      	ldr	r1, [r7, #4]
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f7ff ff8e 	bl	8010f78 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801105c:	69ba      	ldr	r2, [r7, #24]
 801105e:	6839      	ldr	r1, [r7, #0]
 8011060:	68f8      	ldr	r0, [r7, #12]
 8011062:	f7ff ffa8 	bl	8010fb6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d106      	bne.n	801107a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801106c:	f107 0310 	add.w	r3, r7, #16
 8011070:	461a      	mov	r2, r3
 8011072:	68b9      	ldr	r1, [r7, #8]
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f7ff ff35 	bl	8010ee4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801107a:	bf00      	nop
 801107c:	3720      	adds	r7, #32
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	0801e810 	.word	0x0801e810

08011088 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011090:	4a04      	ldr	r2, [pc, #16]	@ (80110a4 <netif_set_default+0x1c>)
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011096:	bf00      	nop
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop
 80110a4:	24014ba0 	.word	0x24014ba0

080110a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d107      	bne.n	80110c6 <netif_set_up+0x1e>
 80110b6:	4b0f      	ldr	r3, [pc, #60]	@ (80110f4 <netif_set_up+0x4c>)
 80110b8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80110bc:	490e      	ldr	r1, [pc, #56]	@ (80110f8 <netif_set_up+0x50>)
 80110be:	480f      	ldr	r0, [pc, #60]	@ (80110fc <netif_set_up+0x54>)
 80110c0:	f009 fd78 	bl	801abb4 <iprintf>
 80110c4:	e013      	b.n	80110ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d10c      	bne.n	80110ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80110da:	f043 0301 	orr.w	r3, r3, #1
 80110de:	b2da      	uxtb	r2, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80110e6:	2103      	movs	r1, #3
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 f809 	bl	8011100 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	0801bf74 	.word	0x0801bf74
 80110f8:	0801c0fc 	.word	0x0801c0fc
 80110fc:	0801bfc4 	.word	0x0801bfc4

08011100 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	460b      	mov	r3, r1
 801110a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d106      	bne.n	8011120 <netif_issue_reports+0x20>
 8011112:	4b18      	ldr	r3, [pc, #96]	@ (8011174 <netif_issue_reports+0x74>)
 8011114:	f240 326d 	movw	r2, #877	@ 0x36d
 8011118:	4917      	ldr	r1, [pc, #92]	@ (8011178 <netif_issue_reports+0x78>)
 801111a:	4818      	ldr	r0, [pc, #96]	@ (801117c <netif_issue_reports+0x7c>)
 801111c:	f009 fd4a 	bl	801abb4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011126:	f003 0304 	and.w	r3, r3, #4
 801112a:	2b00      	cmp	r3, #0
 801112c:	d01e      	beq.n	801116c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011134:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011138:	2b00      	cmp	r3, #0
 801113a:	d017      	beq.n	801116c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801113c:	78fb      	ldrb	r3, [r7, #3]
 801113e:	f003 0301 	and.w	r3, r3, #1
 8011142:	2b00      	cmp	r3, #0
 8011144:	d013      	beq.n	801116e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	3304      	adds	r3, #4
 801114a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00e      	beq.n	801116e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011156:	f003 0308 	and.w	r3, r3, #8
 801115a:	2b00      	cmp	r3, #0
 801115c:	d007      	beq.n	801116e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	3304      	adds	r3, #4
 8011162:	4619      	mov	r1, r3
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f007 fee5 	bl	8018f34 <etharp_request>
 801116a:	e000      	b.n	801116e <netif_issue_reports+0x6e>
    return;
 801116c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	0801bf74 	.word	0x0801bf74
 8011178:	0801c118 	.word	0x0801c118
 801117c:	0801bfc4 	.word	0x0801bfc4

08011180 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d107      	bne.n	801119e <netif_set_down+0x1e>
 801118e:	4b12      	ldr	r3, [pc, #72]	@ (80111d8 <netif_set_down+0x58>)
 8011190:	f240 329b 	movw	r2, #923	@ 0x39b
 8011194:	4911      	ldr	r1, [pc, #68]	@ (80111dc <netif_set_down+0x5c>)
 8011196:	4812      	ldr	r0, [pc, #72]	@ (80111e0 <netif_set_down+0x60>)
 8011198:	f009 fd0c 	bl	801abb4 <iprintf>
 801119c:	e019      	b.n	80111d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80111a4:	f003 0301 	and.w	r3, r3, #1
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d012      	beq.n	80111d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80111b2:	f023 0301 	bic.w	r3, r3, #1
 80111b6:	b2da      	uxtb	r2, r3
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80111c4:	f003 0308 	and.w	r3, r3, #8
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d002      	beq.n	80111d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f007 fa6f 	bl	80186b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	0801bf74 	.word	0x0801bf74
 80111dc:	0801c13c 	.word	0x0801c13c
 80111e0:	0801bfc4 	.word	0x0801bfc4

080111e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d107      	bne.n	8011202 <netif_set_link_up+0x1e>
 80111f2:	4b13      	ldr	r3, [pc, #76]	@ (8011240 <netif_set_link_up+0x5c>)
 80111f4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80111f8:	4912      	ldr	r1, [pc, #72]	@ (8011244 <netif_set_link_up+0x60>)
 80111fa:	4813      	ldr	r0, [pc, #76]	@ (8011248 <netif_set_link_up+0x64>)
 80111fc:	f009 fcda 	bl	801abb4 <iprintf>
 8011200:	e01b      	b.n	801123a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011208:	f003 0304 	and.w	r3, r3, #4
 801120c:	2b00      	cmp	r3, #0
 801120e:	d114      	bne.n	801123a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011216:	f043 0304 	orr.w	r3, r3, #4
 801121a:	b2da      	uxtb	r2, r3
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011222:	2103      	movs	r1, #3
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7ff ff6b 	bl	8011100 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	69db      	ldr	r3, [r3, #28]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d003      	beq.n	801123a <netif_set_link_up+0x56>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	69db      	ldr	r3, [r3, #28]
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801123a:	3708      	adds	r7, #8
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	0801bf74 	.word	0x0801bf74
 8011244:	0801c15c 	.word	0x0801c15c
 8011248:	0801bfc4 	.word	0x0801bfc4

0801124c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d107      	bne.n	801126a <netif_set_link_down+0x1e>
 801125a:	4b11      	ldr	r3, [pc, #68]	@ (80112a0 <netif_set_link_down+0x54>)
 801125c:	f240 4206 	movw	r2, #1030	@ 0x406
 8011260:	4910      	ldr	r1, [pc, #64]	@ (80112a4 <netif_set_link_down+0x58>)
 8011262:	4811      	ldr	r0, [pc, #68]	@ (80112a8 <netif_set_link_down+0x5c>)
 8011264:	f009 fca6 	bl	801abb4 <iprintf>
 8011268:	e017      	b.n	801129a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011270:	f003 0304 	and.w	r3, r3, #4
 8011274:	2b00      	cmp	r3, #0
 8011276:	d010      	beq.n	801129a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801127e:	f023 0304 	bic.w	r3, r3, #4
 8011282:	b2da      	uxtb	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	69db      	ldr	r3, [r3, #28]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d003      	beq.n	801129a <netif_set_link_down+0x4e>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	69db      	ldr	r3, [r3, #28]
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}
 80112a0:	0801bf74 	.word	0x0801bf74
 80112a4:	0801c180 	.word	0x0801c180
 80112a8:	0801bfc4 	.word	0x0801bfc4

080112ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b083      	sub	sp, #12
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d002      	beq.n	80112c2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	683a      	ldr	r2, [r7, #0]
 80112c0:	61da      	str	r2, [r3, #28]
  }
}
 80112c2:	bf00      	nop
 80112c4:	370c      	adds	r7, #12
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr

080112ce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80112ce:	b480      	push	{r7}
 80112d0:	b085      	sub	sp, #20
 80112d2:	af00      	add	r7, sp, #0
 80112d4:	60f8      	str	r0, [r7, #12]
 80112d6:	60b9      	str	r1, [r7, #8]
 80112d8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80112da:	f06f 030b 	mvn.w	r3, #11
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
	...

080112ec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b085      	sub	sp, #20
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	4603      	mov	r3, r0
 80112f4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80112f6:	79fb      	ldrb	r3, [r7, #7]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d013      	beq.n	8011324 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80112fc:	4b0d      	ldr	r3, [pc, #52]	@ (8011334 <netif_get_by_index+0x48>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	60fb      	str	r3, [r7, #12]
 8011302:	e00c      	b.n	801131e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801130a:	3301      	adds	r3, #1
 801130c:	b2db      	uxtb	r3, r3
 801130e:	79fa      	ldrb	r2, [r7, #7]
 8011310:	429a      	cmp	r2, r3
 8011312:	d101      	bne.n	8011318 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	e006      	b.n	8011326 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	60fb      	str	r3, [r7, #12]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1ef      	bne.n	8011304 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011324:	2300      	movs	r3, #0
}
 8011326:	4618      	mov	r0, r3
 8011328:	3714      	adds	r7, #20
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	24014b9c 	.word	0x24014b9c

08011338 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801133e:	f009 fb1b 	bl	801a978 <sys_arch_protect>
 8011342:	6038      	str	r0, [r7, #0]
 8011344:	4b0d      	ldr	r3, [pc, #52]	@ (801137c <pbuf_free_ooseq+0x44>)
 8011346:	2200      	movs	r2, #0
 8011348:	701a      	strb	r2, [r3, #0]
 801134a:	6838      	ldr	r0, [r7, #0]
 801134c:	f009 fb22 	bl	801a994 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011350:	4b0b      	ldr	r3, [pc, #44]	@ (8011380 <pbuf_free_ooseq+0x48>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	607b      	str	r3, [r7, #4]
 8011356:	e00a      	b.n	801136e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801135c:	2b00      	cmp	r3, #0
 801135e:	d003      	beq.n	8011368 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f002 fa77 	bl	8013854 <tcp_free_ooseq>
      return;
 8011366:	e005      	b.n	8011374 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	607b      	str	r3, [r7, #4]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1f1      	bne.n	8011358 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011374:	3708      	adds	r7, #8
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	24014ba5 	.word	0x24014ba5
 8011380:	24014bb8 	.word	0x24014bb8

08011384 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801138c:	f7ff ffd4 	bl	8011338 <pbuf_free_ooseq>
}
 8011390:	bf00      	nop
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801139e:	f009 faeb 	bl	801a978 <sys_arch_protect>
 80113a2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80113a4:	4b0f      	ldr	r3, [pc, #60]	@ (80113e4 <pbuf_pool_is_empty+0x4c>)
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80113aa:	4b0e      	ldr	r3, [pc, #56]	@ (80113e4 <pbuf_pool_is_empty+0x4c>)
 80113ac:	2201      	movs	r2, #1
 80113ae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f009 faef 	bl	801a994 <sys_arch_unprotect>

  if (!queued) {
 80113b6:	78fb      	ldrb	r3, [r7, #3]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d10f      	bne.n	80113dc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80113bc:	2100      	movs	r1, #0
 80113be:	480a      	ldr	r0, [pc, #40]	@ (80113e8 <pbuf_pool_is_empty+0x50>)
 80113c0:	f7fe fdea 	bl	800ff98 <tcpip_try_callback>
 80113c4:	4603      	mov	r3, r0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d008      	beq.n	80113dc <pbuf_pool_is_empty+0x44>
 80113ca:	f009 fad5 	bl	801a978 <sys_arch_protect>
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	4b04      	ldr	r3, [pc, #16]	@ (80113e4 <pbuf_pool_is_empty+0x4c>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	701a      	strb	r2, [r3, #0]
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f009 fadc 	bl	801a994 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80113dc:	bf00      	nop
 80113de:	3708      	adds	r7, #8
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	24014ba5 	.word	0x24014ba5
 80113e8:	08011385 	.word	0x08011385

080113ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b085      	sub	sp, #20
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	4611      	mov	r1, r2
 80113f8:	461a      	mov	r2, r3
 80113fa:	460b      	mov	r3, r1
 80113fc:	80fb      	strh	r3, [r7, #6]
 80113fe:	4613      	mov	r3, r2
 8011400:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2200      	movs	r2, #0
 8011406:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	88fa      	ldrh	r2, [r7, #6]
 8011412:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	88ba      	ldrh	r2, [r7, #4]
 8011418:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801141a:	8b3b      	ldrh	r3, [r7, #24]
 801141c:	b2da      	uxtb	r2, r3
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	7f3a      	ldrb	r2, [r7, #28]
 8011426:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2201      	movs	r2, #1
 801142c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2200      	movs	r2, #0
 8011432:	73da      	strb	r2, [r3, #15]
}
 8011434:	bf00      	nop
 8011436:	3714      	adds	r7, #20
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b08c      	sub	sp, #48	@ 0x30
 8011444:	af02      	add	r7, sp, #8
 8011446:	4603      	mov	r3, r0
 8011448:	71fb      	strb	r3, [r7, #7]
 801144a:	460b      	mov	r3, r1
 801144c:	80bb      	strh	r3, [r7, #4]
 801144e:	4613      	mov	r3, r2
 8011450:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011452:	79fb      	ldrb	r3, [r7, #7]
 8011454:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011456:	887b      	ldrh	r3, [r7, #2]
 8011458:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801145c:	f000 8082 	beq.w	8011564 <pbuf_alloc+0x124>
 8011460:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011464:	f300 80ca 	bgt.w	80115fc <pbuf_alloc+0x1bc>
 8011468:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801146c:	d010      	beq.n	8011490 <pbuf_alloc+0x50>
 801146e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011472:	f300 80c3 	bgt.w	80115fc <pbuf_alloc+0x1bc>
 8011476:	2b01      	cmp	r3, #1
 8011478:	d002      	beq.n	8011480 <pbuf_alloc+0x40>
 801147a:	2b41      	cmp	r3, #65	@ 0x41
 801147c:	f040 80be 	bne.w	80115fc <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011480:	887a      	ldrh	r2, [r7, #2]
 8011482:	88bb      	ldrh	r3, [r7, #4]
 8011484:	4619      	mov	r1, r3
 8011486:	2000      	movs	r0, #0
 8011488:	f000 f8d4 	bl	8011634 <pbuf_alloc_reference>
 801148c:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801148e:	e0bf      	b.n	8011610 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011490:	2300      	movs	r3, #0
 8011492:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011494:	2300      	movs	r3, #0
 8011496:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011498:	88bb      	ldrh	r3, [r7, #4]
 801149a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801149c:	200d      	movs	r0, #13
 801149e:	f7ff fb95 	bl	8010bcc <memp_malloc>
 80114a2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d109      	bne.n	80114be <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 80114aa:	f7ff ff75 	bl	8011398 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80114ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d002      	beq.n	80114ba <pbuf_alloc+0x7a>
            pbuf_free(p);
 80114b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80114b6:	f000 faab 	bl	8011a10 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80114ba:	2300      	movs	r3, #0
 80114bc:	e0a9      	b.n	8011612 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80114be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114c0:	3303      	adds	r3, #3
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	f023 0303 	bic.w	r3, r3, #3
 80114c8:	b29a      	uxth	r2, r3
 80114ca:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 80114ce:	1a9b      	subs	r3, r3, r2
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	8b7a      	ldrh	r2, [r7, #26]
 80114d4:	4293      	cmp	r3, r2
 80114d6:	bf28      	it	cs
 80114d8:	4613      	movcs	r3, r2
 80114da:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80114dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114de:	3310      	adds	r3, #16
 80114e0:	693a      	ldr	r2, [r7, #16]
 80114e2:	4413      	add	r3, r2
 80114e4:	3303      	adds	r3, #3
 80114e6:	f023 0303 	bic.w	r3, r3, #3
 80114ea:	4618      	mov	r0, r3
 80114ec:	89f9      	ldrh	r1, [r7, #14]
 80114ee:	8b7a      	ldrh	r2, [r7, #26]
 80114f0:	2300      	movs	r3, #0
 80114f2:	9301      	str	r3, [sp, #4]
 80114f4:	887b      	ldrh	r3, [r7, #2]
 80114f6:	9300      	str	r3, [sp, #0]
 80114f8:	460b      	mov	r3, r1
 80114fa:	4601      	mov	r1, r0
 80114fc:	6938      	ldr	r0, [r7, #16]
 80114fe:	f7ff ff75 	bl	80113ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011502:	693b      	ldr	r3, [r7, #16]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	f003 0303 	and.w	r3, r3, #3
 801150a:	2b00      	cmp	r3, #0
 801150c:	d006      	beq.n	801151c <pbuf_alloc+0xdc>
 801150e:	4b43      	ldr	r3, [pc, #268]	@ (801161c <pbuf_alloc+0x1dc>)
 8011510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011514:	4942      	ldr	r1, [pc, #264]	@ (8011620 <pbuf_alloc+0x1e0>)
 8011516:	4843      	ldr	r0, [pc, #268]	@ (8011624 <pbuf_alloc+0x1e4>)
 8011518:	f009 fb4c 	bl	801abb4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801151c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801151e:	3303      	adds	r3, #3
 8011520:	f023 0303 	bic.w	r3, r3, #3
 8011524:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 8011528:	4293      	cmp	r3, r2
 801152a:	d106      	bne.n	801153a <pbuf_alloc+0xfa>
 801152c:	4b3b      	ldr	r3, [pc, #236]	@ (801161c <pbuf_alloc+0x1dc>)
 801152e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011532:	493d      	ldr	r1, [pc, #244]	@ (8011628 <pbuf_alloc+0x1e8>)
 8011534:	483b      	ldr	r0, [pc, #236]	@ (8011624 <pbuf_alloc+0x1e4>)
 8011536:	f009 fb3d 	bl	801abb4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801153c:	2b00      	cmp	r3, #0
 801153e:	d102      	bne.n	8011546 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	627b      	str	r3, [r7, #36]	@ 0x24
 8011544:	e002      	b.n	801154c <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011546:	69fb      	ldr	r3, [r7, #28]
 8011548:	693a      	ldr	r2, [r7, #16]
 801154a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011550:	8b7a      	ldrh	r2, [r7, #26]
 8011552:	89fb      	ldrh	r3, [r7, #14]
 8011554:	1ad3      	subs	r3, r2, r3
 8011556:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011558:	2300      	movs	r3, #0
 801155a:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801155c:	8b7b      	ldrh	r3, [r7, #26]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d19c      	bne.n	801149c <pbuf_alloc+0x5c>
      break;
 8011562:	e055      	b.n	8011610 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011564:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011566:	3303      	adds	r3, #3
 8011568:	b29b      	uxth	r3, r3
 801156a:	f023 0303 	bic.w	r3, r3, #3
 801156e:	b29a      	uxth	r2, r3
 8011570:	88bb      	ldrh	r3, [r7, #4]
 8011572:	3303      	adds	r3, #3
 8011574:	b29b      	uxth	r3, r3
 8011576:	f023 0303 	bic.w	r3, r3, #3
 801157a:	b29b      	uxth	r3, r3
 801157c:	4413      	add	r3, r2
 801157e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011580:	8b3b      	ldrh	r3, [r7, #24]
 8011582:	3310      	adds	r3, #16
 8011584:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011586:	8b3a      	ldrh	r2, [r7, #24]
 8011588:	88bb      	ldrh	r3, [r7, #4]
 801158a:	3303      	adds	r3, #3
 801158c:	f023 0303 	bic.w	r3, r3, #3
 8011590:	429a      	cmp	r2, r3
 8011592:	d306      	bcc.n	80115a2 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011594:	8afa      	ldrh	r2, [r7, #22]
 8011596:	88bb      	ldrh	r3, [r7, #4]
 8011598:	3303      	adds	r3, #3
 801159a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801159e:	429a      	cmp	r2, r3
 80115a0:	d201      	bcs.n	80115a6 <pbuf_alloc+0x166>
        return NULL;
 80115a2:	2300      	movs	r3, #0
 80115a4:	e035      	b.n	8011612 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80115a6:	8afb      	ldrh	r3, [r7, #22]
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7ff f96b 	bl	8010884 <mem_malloc>
 80115ae:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80115b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d101      	bne.n	80115ba <pbuf_alloc+0x17a>
        return NULL;
 80115b6:	2300      	movs	r3, #0
 80115b8:	e02b      	b.n	8011612 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80115ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80115bc:	3310      	adds	r3, #16
 80115be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115c0:	4413      	add	r3, r2
 80115c2:	3303      	adds	r3, #3
 80115c4:	f023 0303 	bic.w	r3, r3, #3
 80115c8:	4618      	mov	r0, r3
 80115ca:	88b9      	ldrh	r1, [r7, #4]
 80115cc:	88ba      	ldrh	r2, [r7, #4]
 80115ce:	2300      	movs	r3, #0
 80115d0:	9301      	str	r3, [sp, #4]
 80115d2:	887b      	ldrh	r3, [r7, #2]
 80115d4:	9300      	str	r3, [sp, #0]
 80115d6:	460b      	mov	r3, r1
 80115d8:	4601      	mov	r1, r0
 80115da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80115dc:	f7ff ff06 	bl	80113ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80115e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	f003 0303 	and.w	r3, r3, #3
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d010      	beq.n	801160e <pbuf_alloc+0x1ce>
 80115ec:	4b0b      	ldr	r3, [pc, #44]	@ (801161c <pbuf_alloc+0x1dc>)
 80115ee:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80115f2:	490e      	ldr	r1, [pc, #56]	@ (801162c <pbuf_alloc+0x1ec>)
 80115f4:	480b      	ldr	r0, [pc, #44]	@ (8011624 <pbuf_alloc+0x1e4>)
 80115f6:	f009 fadd 	bl	801abb4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80115fa:	e008      	b.n	801160e <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80115fc:	4b07      	ldr	r3, [pc, #28]	@ (801161c <pbuf_alloc+0x1dc>)
 80115fe:	f240 1227 	movw	r2, #295	@ 0x127
 8011602:	490b      	ldr	r1, [pc, #44]	@ (8011630 <pbuf_alloc+0x1f0>)
 8011604:	4807      	ldr	r0, [pc, #28]	@ (8011624 <pbuf_alloc+0x1e4>)
 8011606:	f009 fad5 	bl	801abb4 <iprintf>
      return NULL;
 801160a:	2300      	movs	r3, #0
 801160c:	e001      	b.n	8011612 <pbuf_alloc+0x1d2>
      break;
 801160e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011612:	4618      	mov	r0, r3
 8011614:	3728      	adds	r7, #40	@ 0x28
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	0801c1a4 	.word	0x0801c1a4
 8011620:	0801c1d4 	.word	0x0801c1d4
 8011624:	0801c204 	.word	0x0801c204
 8011628:	0801c22c 	.word	0x0801c22c
 801162c:	0801c260 	.word	0x0801c260
 8011630:	0801c28c 	.word	0x0801c28c

08011634 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b086      	sub	sp, #24
 8011638:	af02      	add	r7, sp, #8
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	460b      	mov	r3, r1
 801163e:	807b      	strh	r3, [r7, #2]
 8011640:	4613      	mov	r3, r2
 8011642:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011644:	883b      	ldrh	r3, [r7, #0]
 8011646:	2b41      	cmp	r3, #65	@ 0x41
 8011648:	d009      	beq.n	801165e <pbuf_alloc_reference+0x2a>
 801164a:	883b      	ldrh	r3, [r7, #0]
 801164c:	2b01      	cmp	r3, #1
 801164e:	d006      	beq.n	801165e <pbuf_alloc_reference+0x2a>
 8011650:	4b0f      	ldr	r3, [pc, #60]	@ (8011690 <pbuf_alloc_reference+0x5c>)
 8011652:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8011656:	490f      	ldr	r1, [pc, #60]	@ (8011694 <pbuf_alloc_reference+0x60>)
 8011658:	480f      	ldr	r0, [pc, #60]	@ (8011698 <pbuf_alloc_reference+0x64>)
 801165a:	f009 faab 	bl	801abb4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801165e:	200c      	movs	r0, #12
 8011660:	f7ff fab4 	bl	8010bcc <memp_malloc>
 8011664:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d101      	bne.n	8011670 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801166c:	2300      	movs	r3, #0
 801166e:	e00b      	b.n	8011688 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011670:	8879      	ldrh	r1, [r7, #2]
 8011672:	887a      	ldrh	r2, [r7, #2]
 8011674:	2300      	movs	r3, #0
 8011676:	9301      	str	r3, [sp, #4]
 8011678:	883b      	ldrh	r3, [r7, #0]
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	460b      	mov	r3, r1
 801167e:	6879      	ldr	r1, [r7, #4]
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f7ff feb3 	bl	80113ec <pbuf_init_alloced_pbuf>
  return p;
 8011686:	68fb      	ldr	r3, [r7, #12]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	0801c1a4 	.word	0x0801c1a4
 8011694:	0801c2a8 	.word	0x0801c2a8
 8011698:	0801c204 	.word	0x0801c204

0801169c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b088      	sub	sp, #32
 80116a0:	af02      	add	r7, sp, #8
 80116a2:	607b      	str	r3, [r7, #4]
 80116a4:	4603      	mov	r3, r0
 80116a6:	73fb      	strb	r3, [r7, #15]
 80116a8:	460b      	mov	r3, r1
 80116aa:	81bb      	strh	r3, [r7, #12]
 80116ac:	4613      	mov	r3, r2
 80116ae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80116b0:	7bfb      	ldrb	r3, [r7, #15]
 80116b2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80116b4:	8a7b      	ldrh	r3, [r7, #18]
 80116b6:	3303      	adds	r3, #3
 80116b8:	f023 0203 	bic.w	r2, r3, #3
 80116bc:	89bb      	ldrh	r3, [r7, #12]
 80116be:	441a      	add	r2, r3
 80116c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d901      	bls.n	80116ca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80116c6:	2300      	movs	r3, #0
 80116c8:	e018      	b.n	80116fc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80116ca:	6a3b      	ldr	r3, [r7, #32]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d007      	beq.n	80116e0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80116d0:	8a7b      	ldrh	r3, [r7, #18]
 80116d2:	3303      	adds	r3, #3
 80116d4:	f023 0303 	bic.w	r3, r3, #3
 80116d8:	6a3a      	ldr	r2, [r7, #32]
 80116da:	4413      	add	r3, r2
 80116dc:	617b      	str	r3, [r7, #20]
 80116de:	e001      	b.n	80116e4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80116e0:	2300      	movs	r3, #0
 80116e2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	89b9      	ldrh	r1, [r7, #12]
 80116e8:	89ba      	ldrh	r2, [r7, #12]
 80116ea:	2302      	movs	r3, #2
 80116ec:	9301      	str	r3, [sp, #4]
 80116ee:	897b      	ldrh	r3, [r7, #10]
 80116f0:	9300      	str	r3, [sp, #0]
 80116f2:	460b      	mov	r3, r1
 80116f4:	6979      	ldr	r1, [r7, #20]
 80116f6:	f7ff fe79 	bl	80113ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80116fa:	687b      	ldr	r3, [r7, #4]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3718      	adds	r7, #24
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b084      	sub	sp, #16
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	460b      	mov	r3, r1
 801170e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d106      	bne.n	8011724 <pbuf_realloc+0x20>
 8011716:	4b3a      	ldr	r3, [pc, #232]	@ (8011800 <pbuf_realloc+0xfc>)
 8011718:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801171c:	4939      	ldr	r1, [pc, #228]	@ (8011804 <pbuf_realloc+0x100>)
 801171e:	483a      	ldr	r0, [pc, #232]	@ (8011808 <pbuf_realloc+0x104>)
 8011720:	f009 fa48 	bl	801abb4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	891b      	ldrh	r3, [r3, #8]
 8011728:	887a      	ldrh	r2, [r7, #2]
 801172a:	429a      	cmp	r2, r3
 801172c:	d263      	bcs.n	80117f6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	891a      	ldrh	r2, [r3, #8]
 8011732:	887b      	ldrh	r3, [r7, #2]
 8011734:	1ad3      	subs	r3, r2, r3
 8011736:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011738:	887b      	ldrh	r3, [r7, #2]
 801173a:	817b      	strh	r3, [r7, #10]
  q = p;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011740:	e018      	b.n	8011774 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	895b      	ldrh	r3, [r3, #10]
 8011746:	897a      	ldrh	r2, [r7, #10]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	891a      	ldrh	r2, [r3, #8]
 8011750:	893b      	ldrh	r3, [r7, #8]
 8011752:	1ad3      	subs	r3, r2, r3
 8011754:	b29a      	uxth	r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d106      	bne.n	8011774 <pbuf_realloc+0x70>
 8011766:	4b26      	ldr	r3, [pc, #152]	@ (8011800 <pbuf_realloc+0xfc>)
 8011768:	f240 12af 	movw	r2, #431	@ 0x1af
 801176c:	4927      	ldr	r1, [pc, #156]	@ (801180c <pbuf_realloc+0x108>)
 801176e:	4826      	ldr	r0, [pc, #152]	@ (8011808 <pbuf_realloc+0x104>)
 8011770:	f009 fa20 	bl	801abb4 <iprintf>
  while (rem_len > q->len) {
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	895b      	ldrh	r3, [r3, #10]
 8011778:	897a      	ldrh	r2, [r7, #10]
 801177a:	429a      	cmp	r2, r3
 801177c:	d8e1      	bhi.n	8011742 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	7b1b      	ldrb	r3, [r3, #12]
 8011782:	f003 030f 	and.w	r3, r3, #15
 8011786:	2b00      	cmp	r3, #0
 8011788:	d121      	bne.n	80117ce <pbuf_realloc+0xca>
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	895b      	ldrh	r3, [r3, #10]
 801178e:	897a      	ldrh	r2, [r7, #10]
 8011790:	429a      	cmp	r2, r3
 8011792:	d01c      	beq.n	80117ce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	7b5b      	ldrb	r3, [r3, #13]
 8011798:	f003 0302 	and.w	r3, r3, #2
 801179c:	2b00      	cmp	r3, #0
 801179e:	d116      	bne.n	80117ce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	685a      	ldr	r2, [r3, #4]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	1ad3      	subs	r3, r2, r3
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	897b      	ldrh	r3, [r7, #10]
 80117ac:	4413      	add	r3, r2
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	4619      	mov	r1, r3
 80117b2:	68f8      	ldr	r0, [r7, #12]
 80117b4:	f7fe ff5c 	bl	8010670 <mem_trim>
 80117b8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d106      	bne.n	80117ce <pbuf_realloc+0xca>
 80117c0:	4b0f      	ldr	r3, [pc, #60]	@ (8011800 <pbuf_realloc+0xfc>)
 80117c2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80117c6:	4912      	ldr	r1, [pc, #72]	@ (8011810 <pbuf_realloc+0x10c>)
 80117c8:	480f      	ldr	r0, [pc, #60]	@ (8011808 <pbuf_realloc+0x104>)
 80117ca:	f009 f9f3 	bl	801abb4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	897a      	ldrh	r2, [r7, #10]
 80117d2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	895a      	ldrh	r2, [r3, #10]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d004      	beq.n	80117ee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4618      	mov	r0, r3
 80117ea:	f000 f911 	bl	8011a10 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2200      	movs	r2, #0
 80117f2:	601a      	str	r2, [r3, #0]
 80117f4:	e000      	b.n	80117f8 <pbuf_realloc+0xf4>
    return;
 80117f6:	bf00      	nop

}
 80117f8:	3710      	adds	r7, #16
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	0801c1a4 	.word	0x0801c1a4
 8011804:	0801c2bc 	.word	0x0801c2bc
 8011808:	0801c204 	.word	0x0801c204
 801180c:	0801c2d4 	.word	0x0801c2d4
 8011810:	0801c2ec 	.word	0x0801c2ec

08011814 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	4613      	mov	r3, r2
 8011820:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d106      	bne.n	8011836 <pbuf_add_header_impl+0x22>
 8011828:	4b2b      	ldr	r3, [pc, #172]	@ (80118d8 <pbuf_add_header_impl+0xc4>)
 801182a:	f240 12df 	movw	r2, #479	@ 0x1df
 801182e:	492b      	ldr	r1, [pc, #172]	@ (80118dc <pbuf_add_header_impl+0xc8>)
 8011830:	482b      	ldr	r0, [pc, #172]	@ (80118e0 <pbuf_add_header_impl+0xcc>)
 8011832:	f009 f9bf 	bl	801abb4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d003      	beq.n	8011844 <pbuf_add_header_impl+0x30>
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011842:	d301      	bcc.n	8011848 <pbuf_add_header_impl+0x34>
    return 1;
 8011844:	2301      	movs	r3, #1
 8011846:	e043      	b.n	80118d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d101      	bne.n	8011852 <pbuf_add_header_impl+0x3e>
    return 0;
 801184e:	2300      	movs	r3, #0
 8011850:	e03e      	b.n	80118d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	891a      	ldrh	r2, [r3, #8]
 801185a:	8a7b      	ldrh	r3, [r7, #18]
 801185c:	4413      	add	r3, r2
 801185e:	b29b      	uxth	r3, r3
 8011860:	8a7a      	ldrh	r2, [r7, #18]
 8011862:	429a      	cmp	r2, r3
 8011864:	d901      	bls.n	801186a <pbuf_add_header_impl+0x56>
    return 1;
 8011866:	2301      	movs	r3, #1
 8011868:	e032      	b.n	80118d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	7b1b      	ldrb	r3, [r3, #12]
 801186e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011870:	8a3b      	ldrh	r3, [r7, #16]
 8011872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011876:	2b00      	cmp	r3, #0
 8011878:	d00c      	beq.n	8011894 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	685a      	ldr	r2, [r3, #4]
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	425b      	negs	r3, r3
 8011882:	4413      	add	r3, r2
 8011884:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	3310      	adds	r3, #16
 801188a:	697a      	ldr	r2, [r7, #20]
 801188c:	429a      	cmp	r2, r3
 801188e:	d20d      	bcs.n	80118ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011890:	2301      	movs	r3, #1
 8011892:	e01d      	b.n	80118d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011894:	79fb      	ldrb	r3, [r7, #7]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d006      	beq.n	80118a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	685a      	ldr	r2, [r3, #4]
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	425b      	negs	r3, r3
 80118a2:	4413      	add	r3, r2
 80118a4:	617b      	str	r3, [r7, #20]
 80118a6:	e001      	b.n	80118ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80118a8:	2301      	movs	r3, #1
 80118aa:	e011      	b.n	80118d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	697a      	ldr	r2, [r7, #20]
 80118b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	895a      	ldrh	r2, [r3, #10]
 80118b6:	8a7b      	ldrh	r3, [r7, #18]
 80118b8:	4413      	add	r3, r2
 80118ba:	b29a      	uxth	r2, r3
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	891a      	ldrh	r2, [r3, #8]
 80118c4:	8a7b      	ldrh	r3, [r7, #18]
 80118c6:	4413      	add	r3, r2
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	811a      	strh	r2, [r3, #8]


  return 0;
 80118ce:	2300      	movs	r3, #0
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3718      	adds	r7, #24
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	0801c1a4 	.word	0x0801c1a4
 80118dc:	0801c308 	.word	0x0801c308
 80118e0:	0801c204 	.word	0x0801c204

080118e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80118ee:	2200      	movs	r2, #0
 80118f0:	6839      	ldr	r1, [r7, #0]
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f7ff ff8e 	bl	8011814 <pbuf_add_header_impl>
 80118f8:	4603      	mov	r3, r0
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3708      	adds	r7, #8
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
	...

08011904 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d106      	bne.n	8011922 <pbuf_remove_header+0x1e>
 8011914:	4b20      	ldr	r3, [pc, #128]	@ (8011998 <pbuf_remove_header+0x94>)
 8011916:	f240 224b 	movw	r2, #587	@ 0x24b
 801191a:	4920      	ldr	r1, [pc, #128]	@ (801199c <pbuf_remove_header+0x98>)
 801191c:	4820      	ldr	r0, [pc, #128]	@ (80119a0 <pbuf_remove_header+0x9c>)
 801191e:	f009 f949 	bl	801abb4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d003      	beq.n	8011930 <pbuf_remove_header+0x2c>
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801192e:	d301      	bcc.n	8011934 <pbuf_remove_header+0x30>
    return 1;
 8011930:	2301      	movs	r3, #1
 8011932:	e02c      	b.n	801198e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d101      	bne.n	801193e <pbuf_remove_header+0x3a>
    return 0;
 801193a:	2300      	movs	r3, #0
 801193c:	e027      	b.n	801198e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	895b      	ldrh	r3, [r3, #10]
 8011946:	89fa      	ldrh	r2, [r7, #14]
 8011948:	429a      	cmp	r2, r3
 801194a:	d908      	bls.n	801195e <pbuf_remove_header+0x5a>
 801194c:	4b12      	ldr	r3, [pc, #72]	@ (8011998 <pbuf_remove_header+0x94>)
 801194e:	f240 2255 	movw	r2, #597	@ 0x255
 8011952:	4914      	ldr	r1, [pc, #80]	@ (80119a4 <pbuf_remove_header+0xa0>)
 8011954:	4812      	ldr	r0, [pc, #72]	@ (80119a0 <pbuf_remove_header+0x9c>)
 8011956:	f009 f92d 	bl	801abb4 <iprintf>
 801195a:	2301      	movs	r3, #1
 801195c:	e017      	b.n	801198e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	685a      	ldr	r2, [r3, #4]
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	441a      	add	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	895a      	ldrh	r2, [r3, #10]
 8011974:	89fb      	ldrh	r3, [r7, #14]
 8011976:	1ad3      	subs	r3, r2, r3
 8011978:	b29a      	uxth	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	891a      	ldrh	r2, [r3, #8]
 8011982:	89fb      	ldrh	r3, [r7, #14]
 8011984:	1ad3      	subs	r3, r2, r3
 8011986:	b29a      	uxth	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	0801c1a4 	.word	0x0801c1a4
 801199c:	0801c308 	.word	0x0801c308
 80119a0:	0801c204 	.word	0x0801c204
 80119a4:	0801c314 	.word	0x0801c314

080119a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	460b      	mov	r3, r1
 80119b2:	807b      	strh	r3, [r7, #2]
 80119b4:	4613      	mov	r3, r2
 80119b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80119b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	da08      	bge.n	80119d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80119c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80119c4:	425b      	negs	r3, r3
 80119c6:	4619      	mov	r1, r3
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f7ff ff9b 	bl	8011904 <pbuf_remove_header>
 80119ce:	4603      	mov	r3, r0
 80119d0:	e007      	b.n	80119e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80119d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80119d6:	787a      	ldrb	r2, [r7, #1]
 80119d8:	4619      	mov	r1, r3
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f7ff ff1a 	bl	8011814 <pbuf_add_header_impl>
 80119e0:	4603      	mov	r3, r0
  }
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3708      	adds	r7, #8
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b082      	sub	sp, #8
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
 80119f2:	460b      	mov	r3, r1
 80119f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80119f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80119fa:	2201      	movs	r2, #1
 80119fc:	4619      	mov	r1, r3
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7ff ffd2 	bl	80119a8 <pbuf_header_impl>
 8011a04:	4603      	mov	r3, r0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3708      	adds	r7, #8
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
	...

08011a10 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b088      	sub	sp, #32
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d10b      	bne.n	8011a36 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d106      	bne.n	8011a32 <pbuf_free+0x22>
 8011a24:	4b3b      	ldr	r3, [pc, #236]	@ (8011b14 <pbuf_free+0x104>)
 8011a26:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8011a2a:	493b      	ldr	r1, [pc, #236]	@ (8011b18 <pbuf_free+0x108>)
 8011a2c:	483b      	ldr	r0, [pc, #236]	@ (8011b1c <pbuf_free+0x10c>)
 8011a2e:	f009 f8c1 	bl	801abb4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011a32:	2300      	movs	r3, #0
 8011a34:	e069      	b.n	8011b0a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011a36:	2300      	movs	r3, #0
 8011a38:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011a3a:	e062      	b.n	8011b02 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011a3c:	f008 ff9c 	bl	801a978 <sys_arch_protect>
 8011a40:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	7b9b      	ldrb	r3, [r3, #14]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d106      	bne.n	8011a58 <pbuf_free+0x48>
 8011a4a:	4b32      	ldr	r3, [pc, #200]	@ (8011b14 <pbuf_free+0x104>)
 8011a4c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8011a50:	4933      	ldr	r1, [pc, #204]	@ (8011b20 <pbuf_free+0x110>)
 8011a52:	4832      	ldr	r0, [pc, #200]	@ (8011b1c <pbuf_free+0x10c>)
 8011a54:	f009 f8ae 	bl	801abb4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	7b9b      	ldrb	r3, [r3, #14]
 8011a5c:	3b01      	subs	r3, #1
 8011a5e:	b2da      	uxtb	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	739a      	strb	r2, [r3, #14]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	7b9b      	ldrb	r3, [r3, #14]
 8011a68:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011a6a:	69b8      	ldr	r0, [r7, #24]
 8011a6c:	f008 ff92 	bl	801a994 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011a70:	7dfb      	ldrb	r3, [r7, #23]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d143      	bne.n	8011afe <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	7b1b      	ldrb	r3, [r3, #12]
 8011a80:	f003 030f 	and.w	r3, r3, #15
 8011a84:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	7b5b      	ldrb	r3, [r3, #13]
 8011a8a:	f003 0302 	and.w	r3, r3, #2
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d011      	beq.n	8011ab6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	691b      	ldr	r3, [r3, #16]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d106      	bne.n	8011aac <pbuf_free+0x9c>
 8011a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8011b14 <pbuf_free+0x104>)
 8011aa0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8011aa4:	491f      	ldr	r1, [pc, #124]	@ (8011b24 <pbuf_free+0x114>)
 8011aa6:	481d      	ldr	r0, [pc, #116]	@ (8011b1c <pbuf_free+0x10c>)
 8011aa8:	f009 f884 	bl	801abb4 <iprintf>
        pc->custom_free_function(p);
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	691b      	ldr	r3, [r3, #16]
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	4798      	blx	r3
 8011ab4:	e01d      	b.n	8011af2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011ab6:	7bfb      	ldrb	r3, [r7, #15]
 8011ab8:	2b02      	cmp	r3, #2
 8011aba:	d104      	bne.n	8011ac6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011abc:	6879      	ldr	r1, [r7, #4]
 8011abe:	200d      	movs	r0, #13
 8011ac0:	f7ff f8fa 	bl	8010cb8 <memp_free>
 8011ac4:	e015      	b.n	8011af2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011ac6:	7bfb      	ldrb	r3, [r7, #15]
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d104      	bne.n	8011ad6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011acc:	6879      	ldr	r1, [r7, #4]
 8011ace:	200c      	movs	r0, #12
 8011ad0:	f7ff f8f2 	bl	8010cb8 <memp_free>
 8011ad4:	e00d      	b.n	8011af2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011ad6:	7bfb      	ldrb	r3, [r7, #15]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d103      	bne.n	8011ae4 <pbuf_free+0xd4>
          mem_free(p);
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7fe fd37 	bl	8010550 <mem_free>
 8011ae2:	e006      	b.n	8011af2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8011b14 <pbuf_free+0x104>)
 8011ae6:	f240 320f 	movw	r2, #783	@ 0x30f
 8011aea:	490f      	ldr	r1, [pc, #60]	@ (8011b28 <pbuf_free+0x118>)
 8011aec:	480b      	ldr	r0, [pc, #44]	@ (8011b1c <pbuf_free+0x10c>)
 8011aee:	f009 f861 	bl	801abb4 <iprintf>
        }
      }
      count++;
 8011af2:	7ffb      	ldrb	r3, [r7, #31]
 8011af4:	3301      	adds	r3, #1
 8011af6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	607b      	str	r3, [r7, #4]
 8011afc:	e001      	b.n	8011b02 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d199      	bne.n	8011a3c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011b08:	7ffb      	ldrb	r3, [r7, #31]
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3720      	adds	r7, #32
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	0801c1a4 	.word	0x0801c1a4
 8011b18:	0801c308 	.word	0x0801c308
 8011b1c:	0801c204 	.word	0x0801c204
 8011b20:	0801c334 	.word	0x0801c334
 8011b24:	0801c34c 	.word	0x0801c34c
 8011b28:	0801c370 	.word	0x0801c370

08011b2c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b085      	sub	sp, #20
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011b34:	2300      	movs	r3, #0
 8011b36:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011b38:	e005      	b.n	8011b46 <pbuf_clen+0x1a>
    ++len;
 8011b3a:	89fb      	ldrh	r3, [r7, #14]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d1f6      	bne.n	8011b3a <pbuf_clen+0xe>
  }
  return len;
 8011b4c:	89fb      	ldrh	r3, [r7, #14]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3714      	adds	r7, #20
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr
	...

08011b5c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b084      	sub	sp, #16
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d016      	beq.n	8011b98 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011b6a:	f008 ff05 	bl	801a978 <sys_arch_protect>
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	7b9b      	ldrb	r3, [r3, #14]
 8011b74:	3301      	adds	r3, #1
 8011b76:	b2da      	uxtb	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	739a      	strb	r2, [r3, #14]
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	f008 ff09 	bl	801a994 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	7b9b      	ldrb	r3, [r3, #14]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d106      	bne.n	8011b98 <pbuf_ref+0x3c>
 8011b8a:	4b05      	ldr	r3, [pc, #20]	@ (8011ba0 <pbuf_ref+0x44>)
 8011b8c:	f240 3242 	movw	r2, #834	@ 0x342
 8011b90:	4904      	ldr	r1, [pc, #16]	@ (8011ba4 <pbuf_ref+0x48>)
 8011b92:	4805      	ldr	r0, [pc, #20]	@ (8011ba8 <pbuf_ref+0x4c>)
 8011b94:	f009 f80e 	bl	801abb4 <iprintf>
  }
}
 8011b98:	bf00      	nop
 8011b9a:	3710      	adds	r7, #16
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	0801c1a4 	.word	0x0801c1a4
 8011ba4:	0801c384 	.word	0x0801c384
 8011ba8:	0801c204 	.word	0x0801c204

08011bac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b084      	sub	sp, #16
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d002      	beq.n	8011bc2 <pbuf_cat+0x16>
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d107      	bne.n	8011bd2 <pbuf_cat+0x26>
 8011bc2:	4b20      	ldr	r3, [pc, #128]	@ (8011c44 <pbuf_cat+0x98>)
 8011bc4:	f240 3259 	movw	r2, #857	@ 0x359
 8011bc8:	491f      	ldr	r1, [pc, #124]	@ (8011c48 <pbuf_cat+0x9c>)
 8011bca:	4820      	ldr	r0, [pc, #128]	@ (8011c4c <pbuf_cat+0xa0>)
 8011bcc:	f008 fff2 	bl	801abb4 <iprintf>
 8011bd0:	e034      	b.n	8011c3c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	60fb      	str	r3, [r7, #12]
 8011bd6:	e00a      	b.n	8011bee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	891a      	ldrh	r2, [r3, #8]
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	891b      	ldrh	r3, [r3, #8]
 8011be0:	4413      	add	r3, r2
 8011be2:	b29a      	uxth	r2, r3
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	60fb      	str	r3, [r7, #12]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d1f0      	bne.n	8011bd8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	891a      	ldrh	r2, [r3, #8]
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	895b      	ldrh	r3, [r3, #10]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d006      	beq.n	8011c10 <pbuf_cat+0x64>
 8011c02:	4b10      	ldr	r3, [pc, #64]	@ (8011c44 <pbuf_cat+0x98>)
 8011c04:	f240 3262 	movw	r2, #866	@ 0x362
 8011c08:	4911      	ldr	r1, [pc, #68]	@ (8011c50 <pbuf_cat+0xa4>)
 8011c0a:	4810      	ldr	r0, [pc, #64]	@ (8011c4c <pbuf_cat+0xa0>)
 8011c0c:	f008 ffd2 	bl	801abb4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d006      	beq.n	8011c26 <pbuf_cat+0x7a>
 8011c18:	4b0a      	ldr	r3, [pc, #40]	@ (8011c44 <pbuf_cat+0x98>)
 8011c1a:	f240 3263 	movw	r2, #867	@ 0x363
 8011c1e:	490d      	ldr	r1, [pc, #52]	@ (8011c54 <pbuf_cat+0xa8>)
 8011c20:	480a      	ldr	r0, [pc, #40]	@ (8011c4c <pbuf_cat+0xa0>)
 8011c22:	f008 ffc7 	bl	801abb4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	891a      	ldrh	r2, [r3, #8]
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	891b      	ldrh	r3, [r3, #8]
 8011c2e:	4413      	add	r3, r2
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	683a      	ldr	r2, [r7, #0]
 8011c3a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011c3c:	3710      	adds	r7, #16
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	0801c1a4 	.word	0x0801c1a4
 8011c48:	0801c398 	.word	0x0801c398
 8011c4c:	0801c204 	.word	0x0801c204
 8011c50:	0801c3d0 	.word	0x0801c3d0
 8011c54:	0801c400 	.word	0x0801c400

08011c58 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011c62:	6839      	ldr	r1, [r7, #0]
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f7ff ffa1 	bl	8011bac <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011c6a:	6838      	ldr	r0, [r7, #0]
 8011c6c:	f7ff ff76 	bl	8011b5c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011c70:	bf00      	nop
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b086      	sub	sp, #24
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011c82:	2300      	movs	r3, #0
 8011c84:	617b      	str	r3, [r7, #20]
 8011c86:	2300      	movs	r3, #0
 8011c88:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d008      	beq.n	8011ca2 <pbuf_copy+0x2a>
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d005      	beq.n	8011ca2 <pbuf_copy+0x2a>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	891a      	ldrh	r2, [r3, #8]
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	891b      	ldrh	r3, [r3, #8]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d209      	bcs.n	8011cb6 <pbuf_copy+0x3e>
 8011ca2:	4b57      	ldr	r3, [pc, #348]	@ (8011e00 <pbuf_copy+0x188>)
 8011ca4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8011ca8:	4956      	ldr	r1, [pc, #344]	@ (8011e04 <pbuf_copy+0x18c>)
 8011caa:	4857      	ldr	r0, [pc, #348]	@ (8011e08 <pbuf_copy+0x190>)
 8011cac:	f008 ff82 	bl	801abb4 <iprintf>
 8011cb0:	f06f 030f 	mvn.w	r3, #15
 8011cb4:	e09f      	b.n	8011df6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	895b      	ldrh	r3, [r3, #10]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	1ad2      	subs	r2, r2, r3
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	895b      	ldrh	r3, [r3, #10]
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	1acb      	subs	r3, r1, r3
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d306      	bcc.n	8011cdc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	895b      	ldrh	r3, [r3, #10]
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	60fb      	str	r3, [r7, #12]
 8011cda:	e005      	b.n	8011ce8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	895b      	ldrh	r3, [r3, #10]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	1ad3      	subs	r3, r2, r3
 8011ce6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	685a      	ldr	r2, [r3, #4]
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	18d0      	adds	r0, r2, r3
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	685a      	ldr	r2, [r3, #4]
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	f009 f893 	bl	801ae26 <memcpy>
    offset_to += len;
 8011d00:	697a      	ldr	r2, [r7, #20]
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	4413      	add	r3, r2
 8011d06:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011d08:	693a      	ldr	r2, [r7, #16]
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	4413      	add	r3, r2
 8011d0e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	895b      	ldrh	r3, [r3, #10]
 8011d14:	461a      	mov	r2, r3
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d906      	bls.n	8011d2a <pbuf_copy+0xb2>
 8011d1c:	4b38      	ldr	r3, [pc, #224]	@ (8011e00 <pbuf_copy+0x188>)
 8011d1e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8011d22:	493a      	ldr	r1, [pc, #232]	@ (8011e0c <pbuf_copy+0x194>)
 8011d24:	4838      	ldr	r0, [pc, #224]	@ (8011e08 <pbuf_copy+0x190>)
 8011d26:	f008 ff45 	bl	801abb4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	895b      	ldrh	r3, [r3, #10]
 8011d2e:	461a      	mov	r2, r3
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	4293      	cmp	r3, r2
 8011d34:	d906      	bls.n	8011d44 <pbuf_copy+0xcc>
 8011d36:	4b32      	ldr	r3, [pc, #200]	@ (8011e00 <pbuf_copy+0x188>)
 8011d38:	f240 32da 	movw	r2, #986	@ 0x3da
 8011d3c:	4934      	ldr	r1, [pc, #208]	@ (8011e10 <pbuf_copy+0x198>)
 8011d3e:	4832      	ldr	r0, [pc, #200]	@ (8011e08 <pbuf_copy+0x190>)
 8011d40:	f008 ff38 	bl	801abb4 <iprintf>
    if (offset_from >= p_from->len) {
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	895b      	ldrh	r3, [r3, #10]
 8011d48:	461a      	mov	r2, r3
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	d304      	bcc.n	8011d5a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011d50:	2300      	movs	r3, #0
 8011d52:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	895b      	ldrh	r3, [r3, #10]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d114      	bne.n	8011d90 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011d66:	2300      	movs	r3, #0
 8011d68:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10c      	bne.n	8011d90 <pbuf_copy+0x118>
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d009      	beq.n	8011d90 <pbuf_copy+0x118>
 8011d7c:	4b20      	ldr	r3, [pc, #128]	@ (8011e00 <pbuf_copy+0x188>)
 8011d7e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8011d82:	4924      	ldr	r1, [pc, #144]	@ (8011e14 <pbuf_copy+0x19c>)
 8011d84:	4820      	ldr	r0, [pc, #128]	@ (8011e08 <pbuf_copy+0x190>)
 8011d86:	f008 ff15 	bl	801abb4 <iprintf>
 8011d8a:	f06f 030f 	mvn.w	r3, #15
 8011d8e:	e032      	b.n	8011df6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d013      	beq.n	8011dbe <pbuf_copy+0x146>
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	895a      	ldrh	r2, [r3, #10]
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	891b      	ldrh	r3, [r3, #8]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d10d      	bne.n	8011dbe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d009      	beq.n	8011dbe <pbuf_copy+0x146>
 8011daa:	4b15      	ldr	r3, [pc, #84]	@ (8011e00 <pbuf_copy+0x188>)
 8011dac:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8011db0:	4919      	ldr	r1, [pc, #100]	@ (8011e18 <pbuf_copy+0x1a0>)
 8011db2:	4815      	ldr	r0, [pc, #84]	@ (8011e08 <pbuf_copy+0x190>)
 8011db4:	f008 fefe 	bl	801abb4 <iprintf>
 8011db8:	f06f 0305 	mvn.w	r3, #5
 8011dbc:	e01b      	b.n	8011df6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d013      	beq.n	8011dec <pbuf_copy+0x174>
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	895a      	ldrh	r2, [r3, #10]
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	891b      	ldrh	r3, [r3, #8]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d10d      	bne.n	8011dec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d009      	beq.n	8011dec <pbuf_copy+0x174>
 8011dd8:	4b09      	ldr	r3, [pc, #36]	@ (8011e00 <pbuf_copy+0x188>)
 8011dda:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8011dde:	490e      	ldr	r1, [pc, #56]	@ (8011e18 <pbuf_copy+0x1a0>)
 8011de0:	4809      	ldr	r0, [pc, #36]	@ (8011e08 <pbuf_copy+0x190>)
 8011de2:	f008 fee7 	bl	801abb4 <iprintf>
 8011de6:	f06f 0305 	mvn.w	r3, #5
 8011dea:	e004      	b.n	8011df6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	f47f af61 	bne.w	8011cb6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	0801c1a4 	.word	0x0801c1a4
 8011e04:	0801c44c 	.word	0x0801c44c
 8011e08:	0801c204 	.word	0x0801c204
 8011e0c:	0801c47c 	.word	0x0801c47c
 8011e10:	0801c494 	.word	0x0801c494
 8011e14:	0801c4b0 	.word	0x0801c4b0
 8011e18:	0801c4c0 	.word	0x0801c4c0

08011e1c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b088      	sub	sp, #32
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	4611      	mov	r1, r2
 8011e28:	461a      	mov	r2, r3
 8011e2a:	460b      	mov	r3, r1
 8011e2c:	80fb      	strh	r3, [r7, #6]
 8011e2e:	4613      	mov	r3, r2
 8011e30:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011e32:	2300      	movs	r3, #0
 8011e34:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011e36:	2300      	movs	r3, #0
 8011e38:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d108      	bne.n	8011e52 <pbuf_copy_partial+0x36>
 8011e40:	4b2b      	ldr	r3, [pc, #172]	@ (8011ef0 <pbuf_copy_partial+0xd4>)
 8011e42:	f240 420a 	movw	r2, #1034	@ 0x40a
 8011e46:	492b      	ldr	r1, [pc, #172]	@ (8011ef4 <pbuf_copy_partial+0xd8>)
 8011e48:	482b      	ldr	r0, [pc, #172]	@ (8011ef8 <pbuf_copy_partial+0xdc>)
 8011e4a:	f008 feb3 	bl	801abb4 <iprintf>
 8011e4e:	2300      	movs	r3, #0
 8011e50:	e04a      	b.n	8011ee8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d108      	bne.n	8011e6a <pbuf_copy_partial+0x4e>
 8011e58:	4b25      	ldr	r3, [pc, #148]	@ (8011ef0 <pbuf_copy_partial+0xd4>)
 8011e5a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8011e5e:	4927      	ldr	r1, [pc, #156]	@ (8011efc <pbuf_copy_partial+0xe0>)
 8011e60:	4825      	ldr	r0, [pc, #148]	@ (8011ef8 <pbuf_copy_partial+0xdc>)
 8011e62:	f008 fea7 	bl	801abb4 <iprintf>
 8011e66:	2300      	movs	r3, #0
 8011e68:	e03e      	b.n	8011ee8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	61fb      	str	r3, [r7, #28]
 8011e6e:	e034      	b.n	8011eda <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011e70:	88bb      	ldrh	r3, [r7, #4]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00a      	beq.n	8011e8c <pbuf_copy_partial+0x70>
 8011e76:	69fb      	ldr	r3, [r7, #28]
 8011e78:	895b      	ldrh	r3, [r3, #10]
 8011e7a:	88ba      	ldrh	r2, [r7, #4]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d305      	bcc.n	8011e8c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	895b      	ldrh	r3, [r3, #10]
 8011e84:	88ba      	ldrh	r2, [r7, #4]
 8011e86:	1ad3      	subs	r3, r2, r3
 8011e88:	80bb      	strh	r3, [r7, #4]
 8011e8a:	e023      	b.n	8011ed4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	895a      	ldrh	r2, [r3, #10]
 8011e90:	88bb      	ldrh	r3, [r7, #4]
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011e96:	8b3a      	ldrh	r2, [r7, #24]
 8011e98:	88fb      	ldrh	r3, [r7, #6]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d901      	bls.n	8011ea2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011e9e:	88fb      	ldrh	r3, [r7, #6]
 8011ea0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011ea2:	8b7b      	ldrh	r3, [r7, #26]
 8011ea4:	68ba      	ldr	r2, [r7, #8]
 8011ea6:	18d0      	adds	r0, r2, r3
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	685a      	ldr	r2, [r3, #4]
 8011eac:	88bb      	ldrh	r3, [r7, #4]
 8011eae:	4413      	add	r3, r2
 8011eb0:	8b3a      	ldrh	r2, [r7, #24]
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	f008 ffb7 	bl	801ae26 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011eb8:	8afa      	ldrh	r2, [r7, #22]
 8011eba:	8b3b      	ldrh	r3, [r7, #24]
 8011ebc:	4413      	add	r3, r2
 8011ebe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011ec0:	8b7a      	ldrh	r2, [r7, #26]
 8011ec2:	8b3b      	ldrh	r3, [r7, #24]
 8011ec4:	4413      	add	r3, r2
 8011ec6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011ec8:	88fa      	ldrh	r2, [r7, #6]
 8011eca:	8b3b      	ldrh	r3, [r7, #24]
 8011ecc:	1ad3      	subs	r3, r2, r3
 8011ece:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	61fb      	str	r3, [r7, #28]
 8011eda:	88fb      	ldrh	r3, [r7, #6]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d002      	beq.n	8011ee6 <pbuf_copy_partial+0xca>
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d1c4      	bne.n	8011e70 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011ee6:	8afb      	ldrh	r3, [r7, #22]
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3720      	adds	r7, #32
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	0801c1a4 	.word	0x0801c1a4
 8011ef4:	0801c4ec 	.word	0x0801c4ec
 8011ef8:	0801c204 	.word	0x0801c204
 8011efc:	0801c50c 	.word	0x0801c50c

08011f00 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	4603      	mov	r3, r0
 8011f08:	603a      	str	r2, [r7, #0]
 8011f0a:	71fb      	strb	r3, [r7, #7]
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	8919      	ldrh	r1, [r3, #8]
 8011f14:	88ba      	ldrh	r2, [r7, #4]
 8011f16:	79fb      	ldrb	r3, [r7, #7]
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7ff fa91 	bl	8011440 <pbuf_alloc>
 8011f1e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d101      	bne.n	8011f2a <pbuf_clone+0x2a>
    return NULL;
 8011f26:	2300      	movs	r3, #0
 8011f28:	e011      	b.n	8011f4e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011f2a:	6839      	ldr	r1, [r7, #0]
 8011f2c:	68f8      	ldr	r0, [r7, #12]
 8011f2e:	f7ff fea3 	bl	8011c78 <pbuf_copy>
 8011f32:	4603      	mov	r3, r0
 8011f34:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011f36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d006      	beq.n	8011f4c <pbuf_clone+0x4c>
 8011f3e:	4b06      	ldr	r3, [pc, #24]	@ (8011f58 <pbuf_clone+0x58>)
 8011f40:	f240 5224 	movw	r2, #1316	@ 0x524
 8011f44:	4905      	ldr	r1, [pc, #20]	@ (8011f5c <pbuf_clone+0x5c>)
 8011f46:	4806      	ldr	r0, [pc, #24]	@ (8011f60 <pbuf_clone+0x60>)
 8011f48:	f008 fe34 	bl	801abb4 <iprintf>
  return q;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3710      	adds	r7, #16
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
 8011f56:	bf00      	nop
 8011f58:	0801c1a4 	.word	0x0801c1a4
 8011f5c:	0801c618 	.word	0x0801c618
 8011f60:	0801c204 	.word	0x0801c204

08011f64 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	7a1b      	ldrb	r3, [r3, #8]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d00b      	beq.n	8011f90 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	7a1a      	ldrb	r2, [r3, #8]
 8011f7c:	4b15      	ldr	r3, [pc, #84]	@ (8011fd4 <raw_input_local_match+0x70>)
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011f84:	3301      	adds	r3, #1
 8011f86:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d001      	beq.n	8011f90 <raw_input_local_match+0x2c>
    return 0;
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	e01b      	b.n	8011fc8 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011f90:	78fb      	ldrb	r3, [r7, #3]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d008      	beq.n	8011fa8 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d003      	beq.n	8011fa4 <raw_input_local_match+0x40>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d110      	bne.n	8011fc6 <raw_input_local_match+0x62>
          return 1;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e00f      	b.n	8011fc8 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d009      	beq.n	8011fc2 <raw_input_local_match+0x5e>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d005      	beq.n	8011fc2 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	4b06      	ldr	r3, [pc, #24]	@ (8011fd4 <raw_input_local_match+0x70>)
 8011fbc:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d101      	bne.n	8011fc6 <raw_input_local_match+0x62>
        return 1;
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	e000      	b.n	8011fc8 <raw_input_local_match+0x64>
      }
  }

  return 0;
 8011fc6:	2300      	movs	r3, #0
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	370c      	adds	r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr
 8011fd4:	2400e070 	.word	0x2400e070

08011fd8 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8011fd8:	b590      	push	{r4, r7, lr}
 8011fda:	b089      	sub	sp, #36	@ 0x24
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011fe6:	4b37      	ldr	r3, [pc, #220]	@ (80120c4 <raw_input+0xec>)
 8011fe8:	695b      	ldr	r3, [r3, #20]
 8011fea:	4a36      	ldr	r2, [pc, #216]	@ (80120c4 <raw_input+0xec>)
 8011fec:	6812      	ldr	r2, [r2, #0]
 8011fee:	4611      	mov	r1, r2
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f007 fc07 	bl	8019804 <ip4_addr_isbroadcast_u32>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	7a5b      	ldrb	r3, [r3, #9]
 8012000:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 8012002:	2300      	movs	r3, #0
 8012004:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8012006:	4b30      	ldr	r3, [pc, #192]	@ (80120c8 <raw_input+0xf0>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801200c:	e052      	b.n	80120b4 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801200e:	69fb      	ldr	r3, [r7, #28]
 8012010:	7c1b      	ldrb	r3, [r3, #16]
 8012012:	461a      	mov	r2, r3
 8012014:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012018:	429a      	cmp	r2, r3
 801201a:	d146      	bne.n	80120aa <raw_input+0xd2>
 801201c:	7dbb      	ldrb	r3, [r7, #22]
 801201e:	4619      	mov	r1, r3
 8012020:	69f8      	ldr	r0, [r7, #28]
 8012022:	f7ff ff9f 	bl	8011f64 <raw_input_local_match>
 8012026:	4603      	mov	r3, r0
 8012028:	2b00      	cmp	r3, #0
 801202a:	d03e      	beq.n	80120aa <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	7c5b      	ldrb	r3, [r3, #17]
 8012030:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8012034:	2b00      	cmp	r3, #0
 8012036:	d005      	beq.n	8012044 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	685a      	ldr	r2, [r3, #4]
 801203c:	4b21      	ldr	r3, [pc, #132]	@ (80120c4 <raw_input+0xec>)
 801203e:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8012040:	429a      	cmp	r2, r3
 8012042:	d132      	bne.n	80120aa <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8012044:	69fb      	ldr	r3, [r7, #28]
 8012046:	695b      	ldr	r3, [r3, #20]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d02e      	beq.n	80120aa <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 8012052:	2302      	movs	r3, #2
 8012054:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	695c      	ldr	r4, [r3, #20]
 801205a:	69fb      	ldr	r3, [r7, #28]
 801205c:	6998      	ldr	r0, [r3, #24]
 801205e:	4b1b      	ldr	r3, [pc, #108]	@ (80120cc <raw_input+0xf4>)
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	69f9      	ldr	r1, [r7, #28]
 8012064:	47a0      	blx	r4
 8012066:	4603      	mov	r3, r0
 8012068:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 801206a:	7bfb      	ldrb	r3, [r7, #15]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d011      	beq.n	8012094 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 8012070:	2300      	movs	r3, #0
 8012072:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8012074:	69bb      	ldr	r3, [r7, #24]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d00a      	beq.n	8012090 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 801207a:	69fb      	ldr	r3, [r7, #28]
 801207c:	68da      	ldr	r2, [r3, #12]
 801207e:	69bb      	ldr	r3, [r7, #24]
 8012080:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8012082:	4b11      	ldr	r3, [pc, #68]	@ (80120c8 <raw_input+0xf0>)
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	69fb      	ldr	r3, [r7, #28]
 8012088:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 801208a:	4a0f      	ldr	r2, [pc, #60]	@ (80120c8 <raw_input+0xf0>)
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8012090:	2301      	movs	r3, #1
 8012092:	e013      	b.n	80120bc <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	693a      	ldr	r2, [r7, #16]
 801209a:	429a      	cmp	r2, r3
 801209c:	d005      	beq.n	80120aa <raw_input+0xd2>
 801209e:	4b0c      	ldr	r3, [pc, #48]	@ (80120d0 <raw_input+0xf8>)
 80120a0:	22c0      	movs	r2, #192	@ 0xc0
 80120a2:	490c      	ldr	r1, [pc, #48]	@ (80120d4 <raw_input+0xfc>)
 80120a4:	480c      	ldr	r0, [pc, #48]	@ (80120d8 <raw_input+0x100>)
 80120a6:	f008 fd85 	bl	801abb4 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d1a9      	bne.n	801200e <raw_input+0x36>
  }
  return ret;
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3724      	adds	r7, #36	@ 0x24
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd90      	pop	{r4, r7, pc}
 80120c4:	2400e070 	.word	0x2400e070
 80120c8:	24014ba8 	.word	0x24014ba8
 80120cc:	2400e080 	.word	0x2400e080
 80120d0:	0801c62c 	.word	0x0801c62c
 80120d4:	0801c65c 	.word	0x0801c65c
 80120d8:	0801c6a8 	.word	0x0801c6a8

080120dc <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80120dc:	b480      	push	{r7}
 80120de:	b085      	sub	sp, #20
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d01e      	beq.n	801212a <raw_netif_ip_addr_changed+0x4e>
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d01a      	beq.n	801212a <raw_netif_ip_addr_changed+0x4e>
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d017      	beq.n	801212a <raw_netif_ip_addr_changed+0x4e>
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d013      	beq.n	801212a <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8012102:	4b0d      	ldr	r3, [pc, #52]	@ (8012138 <raw_netif_ip_addr_changed+0x5c>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	60fb      	str	r3, [r7, #12]
 8012108:	e00c      	b.n	8012124 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	681a      	ldr	r2, [r3, #0]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	429a      	cmp	r2, r3
 8012114:	d103      	bne.n	801211e <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	68db      	ldr	r3, [r3, #12]
 8012122:	60fb      	str	r3, [r7, #12]
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d1ef      	bne.n	801210a <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801212a:	bf00      	nop
 801212c:	3714      	adds	r7, #20
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr
 8012136:	bf00      	nop
 8012138:	24014ba8 	.word	0x24014ba8

0801213c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012140:	f008 fc38 	bl	801a9b4 <rand>
 8012144:	4603      	mov	r3, r0
 8012146:	b29b      	uxth	r3, r3
 8012148:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801214c:	b29b      	uxth	r3, r3
 801214e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012152:	b29a      	uxth	r2, r3
 8012154:	4b01      	ldr	r3, [pc, #4]	@ (801215c <tcp_init+0x20>)
 8012156:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012158:	bf00      	nop
 801215a:	bd80      	pop	{r7, pc}
 801215c:	240049e8 	.word	0x240049e8

08012160 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	7d1b      	ldrb	r3, [r3, #20]
 801216c:	2b01      	cmp	r3, #1
 801216e:	d105      	bne.n	801217c <tcp_free+0x1c>
 8012170:	4b06      	ldr	r3, [pc, #24]	@ (801218c <tcp_free+0x2c>)
 8012172:	22d4      	movs	r2, #212	@ 0xd4
 8012174:	4906      	ldr	r1, [pc, #24]	@ (8012190 <tcp_free+0x30>)
 8012176:	4807      	ldr	r0, [pc, #28]	@ (8012194 <tcp_free+0x34>)
 8012178:	f008 fd1c 	bl	801abb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801217c:	6879      	ldr	r1, [r7, #4]
 801217e:	2002      	movs	r0, #2
 8012180:	f7fe fd9a 	bl	8010cb8 <memp_free>
}
 8012184:	bf00      	nop
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	0801c770 	.word	0x0801c770
 8012190:	0801c7a0 	.word	0x0801c7a0
 8012194:	0801c7b4 	.word	0x0801c7b4

08012198 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	7d1b      	ldrb	r3, [r3, #20]
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d105      	bne.n	80121b4 <tcp_free_listen+0x1c>
 80121a8:	4b06      	ldr	r3, [pc, #24]	@ (80121c4 <tcp_free_listen+0x2c>)
 80121aa:	22df      	movs	r2, #223	@ 0xdf
 80121ac:	4906      	ldr	r1, [pc, #24]	@ (80121c8 <tcp_free_listen+0x30>)
 80121ae:	4807      	ldr	r0, [pc, #28]	@ (80121cc <tcp_free_listen+0x34>)
 80121b0:	f008 fd00 	bl	801abb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80121b4:	6879      	ldr	r1, [r7, #4]
 80121b6:	2003      	movs	r0, #3
 80121b8:	f7fe fd7e 	bl	8010cb8 <memp_free>
}
 80121bc:	bf00      	nop
 80121be:	3708      	adds	r7, #8
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	0801c770 	.word	0x0801c770
 80121c8:	0801c7dc 	.word	0x0801c7dc
 80121cc:	0801c7b4 	.word	0x0801c7b4

080121d0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80121d4:	f000 fea6 	bl	8012f24 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80121d8:	4b07      	ldr	r3, [pc, #28]	@ (80121f8 <tcp_tmr+0x28>)
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	3301      	adds	r3, #1
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	4b05      	ldr	r3, [pc, #20]	@ (80121f8 <tcp_tmr+0x28>)
 80121e2:	701a      	strb	r2, [r3, #0]
 80121e4:	4b04      	ldr	r3, [pc, #16]	@ (80121f8 <tcp_tmr+0x28>)
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	f003 0301 	and.w	r3, r3, #1
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d001      	beq.n	80121f4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80121f0:	f000 fb56 	bl	80128a0 <tcp_slowtmr>
  }
}
 80121f4:	bf00      	nop
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	24014bc1 	.word	0x24014bc1

080121fc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d105      	bne.n	8012218 <tcp_remove_listener+0x1c>
 801220c:	4b0d      	ldr	r3, [pc, #52]	@ (8012244 <tcp_remove_listener+0x48>)
 801220e:	22ff      	movs	r2, #255	@ 0xff
 8012210:	490d      	ldr	r1, [pc, #52]	@ (8012248 <tcp_remove_listener+0x4c>)
 8012212:	480e      	ldr	r0, [pc, #56]	@ (801224c <tcp_remove_listener+0x50>)
 8012214:	f008 fcce 	bl	801abb4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	60fb      	str	r3, [r7, #12]
 801221c:	e00a      	b.n	8012234 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012222:	683a      	ldr	r2, [r7, #0]
 8012224:	429a      	cmp	r2, r3
 8012226:	d102      	bne.n	801222e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	2200      	movs	r2, #0
 801222c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	60fb      	str	r3, [r7, #12]
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d1f1      	bne.n	801221e <tcp_remove_listener+0x22>
    }
  }
}
 801223a:	bf00      	nop
 801223c:	bf00      	nop
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	0801c770 	.word	0x0801c770
 8012248:	0801c7f8 	.word	0x0801c7f8
 801224c:	0801c7b4 	.word	0x0801c7b4

08012250 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b084      	sub	sp, #16
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <tcp_listen_closed+0x1c>
 801225e:	4b14      	ldr	r3, [pc, #80]	@ (80122b0 <tcp_listen_closed+0x60>)
 8012260:	f240 1211 	movw	r2, #273	@ 0x111
 8012264:	4913      	ldr	r1, [pc, #76]	@ (80122b4 <tcp_listen_closed+0x64>)
 8012266:	4814      	ldr	r0, [pc, #80]	@ (80122b8 <tcp_listen_closed+0x68>)
 8012268:	f008 fca4 	bl	801abb4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	7d1b      	ldrb	r3, [r3, #20]
 8012270:	2b01      	cmp	r3, #1
 8012272:	d006      	beq.n	8012282 <tcp_listen_closed+0x32>
 8012274:	4b0e      	ldr	r3, [pc, #56]	@ (80122b0 <tcp_listen_closed+0x60>)
 8012276:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801227a:	4910      	ldr	r1, [pc, #64]	@ (80122bc <tcp_listen_closed+0x6c>)
 801227c:	480e      	ldr	r0, [pc, #56]	@ (80122b8 <tcp_listen_closed+0x68>)
 801227e:	f008 fc99 	bl	801abb4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012282:	2301      	movs	r3, #1
 8012284:	60fb      	str	r3, [r7, #12]
 8012286:	e00b      	b.n	80122a0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012288:	4a0d      	ldr	r2, [pc, #52]	@ (80122c0 <tcp_listen_closed+0x70>)
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	6879      	ldr	r1, [r7, #4]
 8012294:	4618      	mov	r0, r3
 8012296:	f7ff ffb1 	bl	80121fc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	3301      	adds	r3, #1
 801229e:	60fb      	str	r3, [r7, #12]
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2b03      	cmp	r3, #3
 80122a4:	d9f0      	bls.n	8012288 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80122a6:	bf00      	nop
 80122a8:	bf00      	nop
 80122aa:	3710      	adds	r7, #16
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}
 80122b0:	0801c770 	.word	0x0801c770
 80122b4:	0801c820 	.word	0x0801c820
 80122b8:	0801c7b4 	.word	0x0801c7b4
 80122bc:	0801c82c 	.word	0x0801c82c
 80122c0:	0801e7e8 	.word	0x0801e7e8

080122c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80122c4:	b5b0      	push	{r4, r5, r7, lr}
 80122c6:	b088      	sub	sp, #32
 80122c8:	af04      	add	r7, sp, #16
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	460b      	mov	r3, r1
 80122ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d106      	bne.n	80122e4 <tcp_close_shutdown+0x20>
 80122d6:	4b63      	ldr	r3, [pc, #396]	@ (8012464 <tcp_close_shutdown+0x1a0>)
 80122d8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80122dc:	4962      	ldr	r1, [pc, #392]	@ (8012468 <tcp_close_shutdown+0x1a4>)
 80122de:	4863      	ldr	r0, [pc, #396]	@ (801246c <tcp_close_shutdown+0x1a8>)
 80122e0:	f008 fc68 	bl	801abb4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80122e4:	78fb      	ldrb	r3, [r7, #3]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d067      	beq.n	80123ba <tcp_close_shutdown+0xf6>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	7d1b      	ldrb	r3, [r3, #20]
 80122ee:	2b04      	cmp	r3, #4
 80122f0:	d003      	beq.n	80122fa <tcp_close_shutdown+0x36>
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	7d1b      	ldrb	r3, [r3, #20]
 80122f6:	2b07      	cmp	r3, #7
 80122f8:	d15f      	bne.n	80123ba <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d105      	bne.n	801230e <tcp_close_shutdown+0x4a>
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012306:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801230a:	4293      	cmp	r3, r2
 801230c:	d055      	beq.n	80123ba <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	8b5b      	ldrh	r3, [r3, #26]
 8012312:	f003 0310 	and.w	r3, r3, #16
 8012316:	2b00      	cmp	r3, #0
 8012318:	d106      	bne.n	8012328 <tcp_close_shutdown+0x64>
 801231a:	4b52      	ldr	r3, [pc, #328]	@ (8012464 <tcp_close_shutdown+0x1a0>)
 801231c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012320:	4953      	ldr	r1, [pc, #332]	@ (8012470 <tcp_close_shutdown+0x1ac>)
 8012322:	4852      	ldr	r0, [pc, #328]	@ (801246c <tcp_close_shutdown+0x1a8>)
 8012324:	f008 fc46 	bl	801abb4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012330:	687d      	ldr	r5, [r7, #4]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	3304      	adds	r3, #4
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	8ad2      	ldrh	r2, [r2, #22]
 801233a:	6879      	ldr	r1, [r7, #4]
 801233c:	8b09      	ldrh	r1, [r1, #24]
 801233e:	9102      	str	r1, [sp, #8]
 8012340:	9201      	str	r2, [sp, #4]
 8012342:	9300      	str	r3, [sp, #0]
 8012344:	462b      	mov	r3, r5
 8012346:	4622      	mov	r2, r4
 8012348:	4601      	mov	r1, r0
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f004 fe92 	bl	8017074 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f001 f8cb 	bl	80134ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012356:	4b47      	ldr	r3, [pc, #284]	@ (8012474 <tcp_close_shutdown+0x1b0>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	687a      	ldr	r2, [r7, #4]
 801235c:	429a      	cmp	r2, r3
 801235e:	d105      	bne.n	801236c <tcp_close_shutdown+0xa8>
 8012360:	4b44      	ldr	r3, [pc, #272]	@ (8012474 <tcp_close_shutdown+0x1b0>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	4a43      	ldr	r2, [pc, #268]	@ (8012474 <tcp_close_shutdown+0x1b0>)
 8012368:	6013      	str	r3, [r2, #0]
 801236a:	e013      	b.n	8012394 <tcp_close_shutdown+0xd0>
 801236c:	4b41      	ldr	r3, [pc, #260]	@ (8012474 <tcp_close_shutdown+0x1b0>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	60fb      	str	r3, [r7, #12]
 8012372:	e00c      	b.n	801238e <tcp_close_shutdown+0xca>
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	429a      	cmp	r2, r3
 801237c:	d104      	bne.n	8012388 <tcp_close_shutdown+0xc4>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	68da      	ldr	r2, [r3, #12]
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	60da      	str	r2, [r3, #12]
 8012386:	e005      	b.n	8012394 <tcp_close_shutdown+0xd0>
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	60fb      	str	r3, [r7, #12]
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d1ef      	bne.n	8012374 <tcp_close_shutdown+0xb0>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	60da      	str	r2, [r3, #12]
 801239a:	4b37      	ldr	r3, [pc, #220]	@ (8012478 <tcp_close_shutdown+0x1b4>)
 801239c:	2201      	movs	r2, #1
 801239e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80123a0:	4b36      	ldr	r3, [pc, #216]	@ (801247c <tcp_close_shutdown+0x1b8>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d102      	bne.n	80123b0 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80123aa:	f003 fd61 	bl	8015e70 <tcp_trigger_input_pcb_close>
 80123ae:	e002      	b.n	80123b6 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7ff fed5 	bl	8012160 <tcp_free>
      }
      return ERR_OK;
 80123b6:	2300      	movs	r3, #0
 80123b8:	e050      	b.n	801245c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	7d1b      	ldrb	r3, [r3, #20]
 80123be:	2b02      	cmp	r3, #2
 80123c0:	d03b      	beq.n	801243a <tcp_close_shutdown+0x176>
 80123c2:	2b02      	cmp	r3, #2
 80123c4:	dc44      	bgt.n	8012450 <tcp_close_shutdown+0x18c>
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d002      	beq.n	80123d0 <tcp_close_shutdown+0x10c>
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d02a      	beq.n	8012424 <tcp_close_shutdown+0x160>
 80123ce:	e03f      	b.n	8012450 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	8adb      	ldrh	r3, [r3, #22]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d021      	beq.n	801241c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80123d8:	4b29      	ldr	r3, [pc, #164]	@ (8012480 <tcp_close_shutdown+0x1bc>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d105      	bne.n	80123ee <tcp_close_shutdown+0x12a>
 80123e2:	4b27      	ldr	r3, [pc, #156]	@ (8012480 <tcp_close_shutdown+0x1bc>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	4a25      	ldr	r2, [pc, #148]	@ (8012480 <tcp_close_shutdown+0x1bc>)
 80123ea:	6013      	str	r3, [r2, #0]
 80123ec:	e013      	b.n	8012416 <tcp_close_shutdown+0x152>
 80123ee:	4b24      	ldr	r3, [pc, #144]	@ (8012480 <tcp_close_shutdown+0x1bc>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	60bb      	str	r3, [r7, #8]
 80123f4:	e00c      	b.n	8012410 <tcp_close_shutdown+0x14c>
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	687a      	ldr	r2, [r7, #4]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d104      	bne.n	801240a <tcp_close_shutdown+0x146>
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	68da      	ldr	r2, [r3, #12]
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	60da      	str	r2, [r3, #12]
 8012408:	e005      	b.n	8012416 <tcp_close_shutdown+0x152>
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	68db      	ldr	r3, [r3, #12]
 801240e:	60bb      	str	r3, [r7, #8]
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d1ef      	bne.n	80123f6 <tcp_close_shutdown+0x132>
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2200      	movs	r2, #0
 801241a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f7ff fe9f 	bl	8012160 <tcp_free>
      break;
 8012422:	e01a      	b.n	801245a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f7ff ff13 	bl	8012250 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801242a:	6879      	ldr	r1, [r7, #4]
 801242c:	4815      	ldr	r0, [pc, #84]	@ (8012484 <tcp_close_shutdown+0x1c0>)
 801242e:	f001 f8ad 	bl	801358c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f7ff feb0 	bl	8012198 <tcp_free_listen>
      break;
 8012438:	e00f      	b.n	801245a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801243a:	6879      	ldr	r1, [r7, #4]
 801243c:	480d      	ldr	r0, [pc, #52]	@ (8012474 <tcp_close_shutdown+0x1b0>)
 801243e:	f001 f8a5 	bl	801358c <tcp_pcb_remove>
 8012442:	4b0d      	ldr	r3, [pc, #52]	@ (8012478 <tcp_close_shutdown+0x1b4>)
 8012444:	2201      	movs	r2, #1
 8012446:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f7ff fe89 	bl	8012160 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801244e:	e004      	b.n	801245a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f000 f819 	bl	8012488 <tcp_close_shutdown_fin>
 8012456:	4603      	mov	r3, r0
 8012458:	e000      	b.n	801245c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801245a:	2300      	movs	r3, #0
}
 801245c:	4618      	mov	r0, r3
 801245e:	3710      	adds	r7, #16
 8012460:	46bd      	mov	sp, r7
 8012462:	bdb0      	pop	{r4, r5, r7, pc}
 8012464:	0801c770 	.word	0x0801c770
 8012468:	0801c844 	.word	0x0801c844
 801246c:	0801c7b4 	.word	0x0801c7b4
 8012470:	0801c864 	.word	0x0801c864
 8012474:	24014bb8 	.word	0x24014bb8
 8012478:	24014bc0 	.word	0x24014bc0
 801247c:	24014bf8 	.word	0x24014bf8
 8012480:	24014bb0 	.word	0x24014bb0
 8012484:	24014bb4 	.word	0x24014bb4

08012488 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d106      	bne.n	80124a4 <tcp_close_shutdown_fin+0x1c>
 8012496:	4b2e      	ldr	r3, [pc, #184]	@ (8012550 <tcp_close_shutdown_fin+0xc8>)
 8012498:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801249c:	492d      	ldr	r1, [pc, #180]	@ (8012554 <tcp_close_shutdown_fin+0xcc>)
 801249e:	482e      	ldr	r0, [pc, #184]	@ (8012558 <tcp_close_shutdown_fin+0xd0>)
 80124a0:	f008 fb88 	bl	801abb4 <iprintf>

  switch (pcb->state) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	7d1b      	ldrb	r3, [r3, #20]
 80124a8:	2b07      	cmp	r3, #7
 80124aa:	d020      	beq.n	80124ee <tcp_close_shutdown_fin+0x66>
 80124ac:	2b07      	cmp	r3, #7
 80124ae:	dc2b      	bgt.n	8012508 <tcp_close_shutdown_fin+0x80>
 80124b0:	2b03      	cmp	r3, #3
 80124b2:	d002      	beq.n	80124ba <tcp_close_shutdown_fin+0x32>
 80124b4:	2b04      	cmp	r3, #4
 80124b6:	d00d      	beq.n	80124d4 <tcp_close_shutdown_fin+0x4c>
 80124b8:	e026      	b.n	8012508 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f003 fee8 	bl	8016290 <tcp_send_fin>
 80124c0:	4603      	mov	r3, r0
 80124c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80124c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d11f      	bne.n	801250c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2205      	movs	r2, #5
 80124d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80124d2:	e01b      	b.n	801250c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f003 fedb 	bl	8016290 <tcp_send_fin>
 80124da:	4603      	mov	r3, r0
 80124dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80124de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d114      	bne.n	8012510 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2205      	movs	r2, #5
 80124ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80124ec:	e010      	b.n	8012510 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f003 fece 	bl	8016290 <tcp_send_fin>
 80124f4:	4603      	mov	r3, r0
 80124f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80124f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d109      	bne.n	8012514 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2209      	movs	r2, #9
 8012504:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012506:	e005      	b.n	8012514 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012508:	2300      	movs	r3, #0
 801250a:	e01c      	b.n	8012546 <tcp_close_shutdown_fin+0xbe>
      break;
 801250c:	bf00      	nop
 801250e:	e002      	b.n	8012516 <tcp_close_shutdown_fin+0x8e>
      break;
 8012510:	bf00      	nop
 8012512:	e000      	b.n	8012516 <tcp_close_shutdown_fin+0x8e>
      break;
 8012514:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d103      	bne.n	8012526 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f003 fff4 	bl	801650c <tcp_output>
 8012524:	e00d      	b.n	8012542 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801252e:	d108      	bne.n	8012542 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	8b5b      	ldrh	r3, [r3, #26]
 8012534:	f043 0308 	orr.w	r3, r3, #8
 8012538:	b29a      	uxth	r2, r3
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801253e:	2300      	movs	r3, #0
 8012540:	e001      	b.n	8012546 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012546:	4618      	mov	r0, r3
 8012548:	3710      	adds	r7, #16
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
 801254e:	bf00      	nop
 8012550:	0801c770 	.word	0x0801c770
 8012554:	0801c820 	.word	0x0801c820
 8012558:	0801c7b4 	.word	0x0801c7b4

0801255c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d109      	bne.n	801257e <tcp_close+0x22>
 801256a:	4b0f      	ldr	r3, [pc, #60]	@ (80125a8 <tcp_close+0x4c>)
 801256c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012570:	490e      	ldr	r1, [pc, #56]	@ (80125ac <tcp_close+0x50>)
 8012572:	480f      	ldr	r0, [pc, #60]	@ (80125b0 <tcp_close+0x54>)
 8012574:	f008 fb1e 	bl	801abb4 <iprintf>
 8012578:	f06f 030f 	mvn.w	r3, #15
 801257c:	e00f      	b.n	801259e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	7d1b      	ldrb	r3, [r3, #20]
 8012582:	2b01      	cmp	r3, #1
 8012584:	d006      	beq.n	8012594 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	8b5b      	ldrh	r3, [r3, #26]
 801258a:	f043 0310 	orr.w	r3, r3, #16
 801258e:	b29a      	uxth	r2, r3
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012594:	2101      	movs	r1, #1
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f7ff fe94 	bl	80122c4 <tcp_close_shutdown>
 801259c:	4603      	mov	r3, r0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	0801c770 	.word	0x0801c770
 80125ac:	0801c880 	.word	0x0801c880
 80125b0:	0801c7b4 	.word	0x0801c7b4

080125b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b08e      	sub	sp, #56	@ 0x38
 80125b8:	af04      	add	r7, sp, #16
 80125ba:	6078      	str	r0, [r7, #4]
 80125bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d107      	bne.n	80125d4 <tcp_abandon+0x20>
 80125c4:	4b52      	ldr	r3, [pc, #328]	@ (8012710 <tcp_abandon+0x15c>)
 80125c6:	f240 223d 	movw	r2, #573	@ 0x23d
 80125ca:	4952      	ldr	r1, [pc, #328]	@ (8012714 <tcp_abandon+0x160>)
 80125cc:	4852      	ldr	r0, [pc, #328]	@ (8012718 <tcp_abandon+0x164>)
 80125ce:	f008 faf1 	bl	801abb4 <iprintf>
 80125d2:	e099      	b.n	8012708 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	7d1b      	ldrb	r3, [r3, #20]
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d106      	bne.n	80125ea <tcp_abandon+0x36>
 80125dc:	4b4c      	ldr	r3, [pc, #304]	@ (8012710 <tcp_abandon+0x15c>)
 80125de:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80125e2:	494e      	ldr	r1, [pc, #312]	@ (801271c <tcp_abandon+0x168>)
 80125e4:	484c      	ldr	r0, [pc, #304]	@ (8012718 <tcp_abandon+0x164>)
 80125e6:	f008 fae5 	bl	801abb4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	7d1b      	ldrb	r3, [r3, #20]
 80125ee:	2b0a      	cmp	r3, #10
 80125f0:	d107      	bne.n	8012602 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80125f2:	6879      	ldr	r1, [r7, #4]
 80125f4:	484a      	ldr	r0, [pc, #296]	@ (8012720 <tcp_abandon+0x16c>)
 80125f6:	f000 ffc9 	bl	801358c <tcp_pcb_remove>
    tcp_free(pcb);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7ff fdb0 	bl	8012160 <tcp_free>
 8012600:	e082      	b.n	8012708 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012602:	2300      	movs	r3, #0
 8012604:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8012606:	2300      	movs	r3, #0
 8012608:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801260e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012614:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801261c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	691b      	ldr	r3, [r3, #16]
 8012622:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	7d1b      	ldrb	r3, [r3, #20]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d126      	bne.n	801267a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	8adb      	ldrh	r3, [r3, #22]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d02e      	beq.n	8012692 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012634:	4b3b      	ldr	r3, [pc, #236]	@ (8012724 <tcp_abandon+0x170>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	429a      	cmp	r2, r3
 801263c:	d105      	bne.n	801264a <tcp_abandon+0x96>
 801263e:	4b39      	ldr	r3, [pc, #228]	@ (8012724 <tcp_abandon+0x170>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	4a37      	ldr	r2, [pc, #220]	@ (8012724 <tcp_abandon+0x170>)
 8012646:	6013      	str	r3, [r2, #0]
 8012648:	e013      	b.n	8012672 <tcp_abandon+0xbe>
 801264a:	4b36      	ldr	r3, [pc, #216]	@ (8012724 <tcp_abandon+0x170>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	61fb      	str	r3, [r7, #28]
 8012650:	e00c      	b.n	801266c <tcp_abandon+0xb8>
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	68db      	ldr	r3, [r3, #12]
 8012656:	687a      	ldr	r2, [r7, #4]
 8012658:	429a      	cmp	r2, r3
 801265a:	d104      	bne.n	8012666 <tcp_abandon+0xb2>
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	68da      	ldr	r2, [r3, #12]
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	60da      	str	r2, [r3, #12]
 8012664:	e005      	b.n	8012672 <tcp_abandon+0xbe>
 8012666:	69fb      	ldr	r3, [r7, #28]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	61fb      	str	r3, [r7, #28]
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1ef      	bne.n	8012652 <tcp_abandon+0x9e>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2200      	movs	r2, #0
 8012676:	60da      	str	r2, [r3, #12]
 8012678:	e00b      	b.n	8012692 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	8adb      	ldrh	r3, [r3, #22]
 8012682:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012684:	6879      	ldr	r1, [r7, #4]
 8012686:	4828      	ldr	r0, [pc, #160]	@ (8012728 <tcp_abandon+0x174>)
 8012688:	f000 ff80 	bl	801358c <tcp_pcb_remove>
 801268c:	4b27      	ldr	r3, [pc, #156]	@ (801272c <tcp_abandon+0x178>)
 801268e:	2201      	movs	r2, #1
 8012690:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012696:	2b00      	cmp	r3, #0
 8012698:	d004      	beq.n	80126a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801269e:	4618      	mov	r0, r3
 80126a0:	f000 fd22 	bl	80130e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d004      	beq.n	80126b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126b0:	4618      	mov	r0, r3
 80126b2:	f000 fd19 	bl	80130e8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d004      	beq.n	80126c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80126c2:	4618      	mov	r0, r3
 80126c4:	f000 fd10 	bl	80130e8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80126c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00e      	beq.n	80126ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80126ce:	6879      	ldr	r1, [r7, #4]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3304      	adds	r3, #4
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	8b12      	ldrh	r2, [r2, #24]
 80126d8:	9202      	str	r2, [sp, #8]
 80126da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80126dc:	9201      	str	r2, [sp, #4]
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	460b      	mov	r3, r1
 80126e2:	697a      	ldr	r2, [r7, #20]
 80126e4:	69b9      	ldr	r1, [r7, #24]
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f004 fcc4 	bl	8017074 <tcp_rst>
    }
    last_state = pcb->state;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	7d1b      	ldrb	r3, [r3, #20]
 80126f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f7ff fd34 	bl	8012160 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d004      	beq.n	8012708 <tcp_abandon+0x154>
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	f06f 010c 	mvn.w	r1, #12
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	4798      	blx	r3
  }
}
 8012708:	3728      	adds	r7, #40	@ 0x28
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	0801c770 	.word	0x0801c770
 8012714:	0801c8b4 	.word	0x0801c8b4
 8012718:	0801c7b4 	.word	0x0801c7b4
 801271c:	0801c8d0 	.word	0x0801c8d0
 8012720:	24014bbc 	.word	0x24014bbc
 8012724:	24014bb0 	.word	0x24014bb0
 8012728:	24014bb8 	.word	0x24014bb8
 801272c:	24014bc0 	.word	0x24014bc0

08012730 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012738:	2101      	movs	r1, #1
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f7ff ff3a 	bl	80125b4 <tcp_abandon>
}
 8012740:	bf00      	nop
 8012742:	3708      	adds	r7, #8
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b084      	sub	sp, #16
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d106      	bne.n	8012764 <tcp_update_rcv_ann_wnd+0x1c>
 8012756:	4b25      	ldr	r3, [pc, #148]	@ (80127ec <tcp_update_rcv_ann_wnd+0xa4>)
 8012758:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801275c:	4924      	ldr	r1, [pc, #144]	@ (80127f0 <tcp_update_rcv_ann_wnd+0xa8>)
 801275e:	4825      	ldr	r0, [pc, #148]	@ (80127f4 <tcp_update_rcv_ann_wnd+0xac>)
 8012760:	f008 fa28 	bl	801abb4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801276c:	4413      	add	r3, r2
 801276e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012778:	f640 3168 	movw	r1, #2920	@ 0xb68
 801277c:	428a      	cmp	r2, r1
 801277e:	bf28      	it	cs
 8012780:	460a      	movcs	r2, r1
 8012782:	b292      	uxth	r2, r2
 8012784:	4413      	add	r3, r2
 8012786:	68fa      	ldr	r2, [r7, #12]
 8012788:	1ad3      	subs	r3, r2, r3
 801278a:	2b00      	cmp	r3, #0
 801278c:	db08      	blt.n	80127a0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801279a:	68fa      	ldr	r2, [r7, #12]
 801279c:	1ad3      	subs	r3, r2, r3
 801279e:	e020      	b.n	80127e2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127a8:	1ad3      	subs	r3, r2, r3
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	dd03      	ble.n	80127b6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2200      	movs	r2, #0
 80127b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80127b4:	e014      	b.n	80127e0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80127c8:	d306      	bcc.n	80127d8 <tcp_update_rcv_ann_wnd+0x90>
 80127ca:	4b08      	ldr	r3, [pc, #32]	@ (80127ec <tcp_update_rcv_ann_wnd+0xa4>)
 80127cc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80127d0:	4909      	ldr	r1, [pc, #36]	@ (80127f8 <tcp_update_rcv_ann_wnd+0xb0>)
 80127d2:	4808      	ldr	r0, [pc, #32]	@ (80127f4 <tcp_update_rcv_ann_wnd+0xac>)
 80127d4:	f008 f9ee 	bl	801abb4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	b29a      	uxth	r2, r3
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80127e0:	2300      	movs	r3, #0
  }
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	0801c770 	.word	0x0801c770
 80127f0:	0801c9cc 	.word	0x0801c9cc
 80127f4:	0801c7b4 	.word	0x0801c7b4
 80127f8:	0801c9f0 	.word	0x0801c9f0

080127fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	460b      	mov	r3, r1
 8012806:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d107      	bne.n	801281e <tcp_recved+0x22>
 801280e:	4b20      	ldr	r3, [pc, #128]	@ (8012890 <tcp_recved+0x94>)
 8012810:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012814:	491f      	ldr	r1, [pc, #124]	@ (8012894 <tcp_recved+0x98>)
 8012816:	4820      	ldr	r0, [pc, #128]	@ (8012898 <tcp_recved+0x9c>)
 8012818:	f008 f9cc 	bl	801abb4 <iprintf>
 801281c:	e034      	b.n	8012888 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	7d1b      	ldrb	r3, [r3, #20]
 8012822:	2b01      	cmp	r3, #1
 8012824:	d106      	bne.n	8012834 <tcp_recved+0x38>
 8012826:	4b1a      	ldr	r3, [pc, #104]	@ (8012890 <tcp_recved+0x94>)
 8012828:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801282c:	491b      	ldr	r1, [pc, #108]	@ (801289c <tcp_recved+0xa0>)
 801282e:	481a      	ldr	r0, [pc, #104]	@ (8012898 <tcp_recved+0x9c>)
 8012830:	f008 f9c0 	bl	801abb4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012838:	887b      	ldrh	r3, [r7, #2]
 801283a:	4413      	add	r3, r2
 801283c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801283e:	89fb      	ldrh	r3, [r7, #14]
 8012840:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012844:	4293      	cmp	r3, r2
 8012846:	d804      	bhi.n	8012852 <tcp_recved+0x56>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801284c:	89fa      	ldrh	r2, [r7, #14]
 801284e:	429a      	cmp	r2, r3
 8012850:	d204      	bcs.n	801285c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012858:	851a      	strh	r2, [r3, #40]	@ 0x28
 801285a:	e002      	b.n	8012862 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	89fa      	ldrh	r2, [r7, #14]
 8012860:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff ff70 	bl	8012748 <tcp_update_rcv_ann_wnd>
 8012868:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8012870:	4293      	cmp	r3, r2
 8012872:	d909      	bls.n	8012888 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	8b5b      	ldrh	r3, [r3, #26]
 8012878:	f043 0302 	orr.w	r3, r3, #2
 801287c:	b29a      	uxth	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f003 fe42 	bl	801650c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012888:	3710      	adds	r7, #16
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	0801c770 	.word	0x0801c770
 8012894:	0801ca0c 	.word	0x0801ca0c
 8012898:	0801c7b4 	.word	0x0801c7b4
 801289c:	0801ca24 	.word	0x0801ca24

080128a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80128a0:	b5b0      	push	{r4, r5, r7, lr}
 80128a2:	b090      	sub	sp, #64	@ 0x40
 80128a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80128a6:	2300      	movs	r3, #0
 80128a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80128ac:	4b95      	ldr	r3, [pc, #596]	@ (8012b04 <tcp_slowtmr+0x264>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	3301      	adds	r3, #1
 80128b2:	4a94      	ldr	r2, [pc, #592]	@ (8012b04 <tcp_slowtmr+0x264>)
 80128b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80128b6:	4b94      	ldr	r3, [pc, #592]	@ (8012b08 <tcp_slowtmr+0x268>)
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	3301      	adds	r3, #1
 80128bc:	b2da      	uxtb	r2, r3
 80128be:	4b92      	ldr	r3, [pc, #584]	@ (8012b08 <tcp_slowtmr+0x268>)
 80128c0:	701a      	strb	r2, [r3, #0]
 80128c2:	e000      	b.n	80128c6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80128c4:	bf00      	nop
  prev = NULL;
 80128c6:	2300      	movs	r3, #0
 80128c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80128ca:	4b90      	ldr	r3, [pc, #576]	@ (8012b0c <tcp_slowtmr+0x26c>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80128d0:	e29d      	b.n	8012e0e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80128d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128d4:	7d1b      	ldrb	r3, [r3, #20]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d106      	bne.n	80128e8 <tcp_slowtmr+0x48>
 80128da:	4b8d      	ldr	r3, [pc, #564]	@ (8012b10 <tcp_slowtmr+0x270>)
 80128dc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80128e0:	498c      	ldr	r1, [pc, #560]	@ (8012b14 <tcp_slowtmr+0x274>)
 80128e2:	488d      	ldr	r0, [pc, #564]	@ (8012b18 <tcp_slowtmr+0x278>)
 80128e4:	f008 f966 	bl	801abb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80128e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ea:	7d1b      	ldrb	r3, [r3, #20]
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d106      	bne.n	80128fe <tcp_slowtmr+0x5e>
 80128f0:	4b87      	ldr	r3, [pc, #540]	@ (8012b10 <tcp_slowtmr+0x270>)
 80128f2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80128f6:	4989      	ldr	r1, [pc, #548]	@ (8012b1c <tcp_slowtmr+0x27c>)
 80128f8:	4887      	ldr	r0, [pc, #540]	@ (8012b18 <tcp_slowtmr+0x278>)
 80128fa:	f008 f95b 	bl	801abb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80128fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012900:	7d1b      	ldrb	r3, [r3, #20]
 8012902:	2b0a      	cmp	r3, #10
 8012904:	d106      	bne.n	8012914 <tcp_slowtmr+0x74>
 8012906:	4b82      	ldr	r3, [pc, #520]	@ (8012b10 <tcp_slowtmr+0x270>)
 8012908:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801290c:	4984      	ldr	r1, [pc, #528]	@ (8012b20 <tcp_slowtmr+0x280>)
 801290e:	4882      	ldr	r0, [pc, #520]	@ (8012b18 <tcp_slowtmr+0x278>)
 8012910:	f008 f950 	bl	801abb4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012916:	7f9a      	ldrb	r2, [r3, #30]
 8012918:	4b7b      	ldr	r3, [pc, #492]	@ (8012b08 <tcp_slowtmr+0x268>)
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	429a      	cmp	r2, r3
 801291e:	d105      	bne.n	801292c <tcp_slowtmr+0x8c>
      prev = pcb;
 8012920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012922:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801292a:	e270      	b.n	8012e0e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801292c:	4b76      	ldr	r3, [pc, #472]	@ (8012b08 <tcp_slowtmr+0x268>)
 801292e:	781a      	ldrb	r2, [r3, #0]
 8012930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012932:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012934:	2300      	movs	r3, #0
 8012936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801293a:	2300      	movs	r3, #0
 801293c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012942:	7d1b      	ldrb	r3, [r3, #20]
 8012944:	2b02      	cmp	r3, #2
 8012946:	d10a      	bne.n	801295e <tcp_slowtmr+0xbe>
 8012948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801294a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801294e:	2b05      	cmp	r3, #5
 8012950:	d905      	bls.n	801295e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012956:	3301      	adds	r3, #1
 8012958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801295c:	e11e      	b.n	8012b9c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801295e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012960:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012964:	2b0b      	cmp	r3, #11
 8012966:	d905      	bls.n	8012974 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8012968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801296c:	3301      	adds	r3, #1
 801296e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012972:	e113      	b.n	8012b9c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8012974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012976:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801297a:	2b00      	cmp	r3, #0
 801297c:	d075      	beq.n	8012a6a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801297e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012982:	2b00      	cmp	r3, #0
 8012984:	d006      	beq.n	8012994 <tcp_slowtmr+0xf4>
 8012986:	4b62      	ldr	r3, [pc, #392]	@ (8012b10 <tcp_slowtmr+0x270>)
 8012988:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801298c:	4965      	ldr	r1, [pc, #404]	@ (8012b24 <tcp_slowtmr+0x284>)
 801298e:	4862      	ldr	r0, [pc, #392]	@ (8012b18 <tcp_slowtmr+0x278>)
 8012990:	f008 f910 	bl	801abb4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012998:	2b00      	cmp	r3, #0
 801299a:	d106      	bne.n	80129aa <tcp_slowtmr+0x10a>
 801299c:	4b5c      	ldr	r3, [pc, #368]	@ (8012b10 <tcp_slowtmr+0x270>)
 801299e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80129a2:	4961      	ldr	r1, [pc, #388]	@ (8012b28 <tcp_slowtmr+0x288>)
 80129a4:	485c      	ldr	r0, [pc, #368]	@ (8012b18 <tcp_slowtmr+0x278>)
 80129a6:	f008 f905 	bl	801abb4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80129aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ac:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80129b0:	2b0b      	cmp	r3, #11
 80129b2:	d905      	bls.n	80129c0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80129b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129b8:	3301      	adds	r3, #1
 80129ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80129be:	e0ed      	b.n	8012b9c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80129c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80129c6:	3b01      	subs	r3, #1
 80129c8:	4a58      	ldr	r2, [pc, #352]	@ (8012b2c <tcp_slowtmr+0x28c>)
 80129ca:	5cd3      	ldrb	r3, [r2, r3]
 80129cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80129ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80129d4:	7c7a      	ldrb	r2, [r7, #17]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d907      	bls.n	80129ea <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80129da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80129e0:	3301      	adds	r3, #1
 80129e2:	b2da      	uxtb	r2, r3
 80129e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80129ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80129f0:	7c7a      	ldrb	r2, [r7, #17]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	f200 80d2 	bhi.w	8012b9c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80129f8:	2301      	movs	r3, #1
 80129fa:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80129fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d108      	bne.n	8012a18 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012a06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012a08:	f004 fc28 	bl	801725c <tcp_zero_window_probe>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d014      	beq.n	8012a3c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012a12:	2300      	movs	r3, #0
 8012a14:	623b      	str	r3, [r7, #32]
 8012a16:	e011      	b.n	8012a3c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012a1e:	4619      	mov	r1, r3
 8012a20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012a22:	f003 faed 	bl	8016000 <tcp_split_unsent_seg>
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d107      	bne.n	8012a3c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012a2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012a2e:	f003 fd6d 	bl	801650c <tcp_output>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d101      	bne.n	8012a3c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012a3c:	6a3b      	ldr	r3, [r7, #32]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	f000 80ac 	beq.w	8012b9c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a46:	2200      	movs	r2, #0
 8012a48:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a4e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012a52:	2b06      	cmp	r3, #6
 8012a54:	f200 80a2 	bhi.w	8012b9c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8012a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a5a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012a5e:	3301      	adds	r3, #1
 8012a60:	b2da      	uxtb	r2, r3
 8012a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a64:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8012a68:	e098      	b.n	8012b9c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	db0f      	blt.n	8012a94 <tcp_slowtmr+0x1f4>
 8012a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012a7a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d008      	beq.n	8012a94 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8012a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	b21a      	sxth	r2, r3
 8012a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a92:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8012a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a96:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8012a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a9c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	db7b      	blt.n	8012b9c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012aa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012aa6:	f004 f825 	bl	8016af4 <tcp_rexmit_rto_prepare>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d007      	beq.n	8012ac0 <tcp_slowtmr+0x220>
 8012ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d171      	bne.n	8012b9c <tcp_slowtmr+0x2fc>
 8012ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d06d      	beq.n	8012b9c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8012ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ac2:	7d1b      	ldrb	r3, [r3, #20]
 8012ac4:	2b02      	cmp	r3, #2
 8012ac6:	d03a      	beq.n	8012b3e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012ace:	2b0c      	cmp	r3, #12
 8012ad0:	bf28      	it	cs
 8012ad2:	230c      	movcs	r3, #12
 8012ad4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012adc:	10db      	asrs	r3, r3, #3
 8012ade:	b21b      	sxth	r3, r3
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ae4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012ae8:	4413      	add	r3, r2
 8012aea:	7efa      	ldrb	r2, [r7, #27]
 8012aec:	4910      	ldr	r1, [pc, #64]	@ (8012b30 <tcp_slowtmr+0x290>)
 8012aee:	5c8a      	ldrb	r2, [r1, r2]
 8012af0:	4093      	lsls	r3, r2
 8012af2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012afa:	4293      	cmp	r3, r2
 8012afc:	dc1a      	bgt.n	8012b34 <tcp_slowtmr+0x294>
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	b21a      	sxth	r2, r3
 8012b02:	e019      	b.n	8012b38 <tcp_slowtmr+0x298>
 8012b04:	24014bac 	.word	0x24014bac
 8012b08:	24014bc2 	.word	0x24014bc2
 8012b0c:	24014bb8 	.word	0x24014bb8
 8012b10:	0801c770 	.word	0x0801c770
 8012b14:	0801cab4 	.word	0x0801cab4
 8012b18:	0801c7b4 	.word	0x0801c7b4
 8012b1c:	0801cae0 	.word	0x0801cae0
 8012b20:	0801cb0c 	.word	0x0801cb0c
 8012b24:	0801cb3c 	.word	0x0801cb3c
 8012b28:	0801cb70 	.word	0x0801cb70
 8012b2c:	0801e7e0 	.word	0x0801e7e0
 8012b30:	0801e7d0 	.word	0x0801e7d0
 8012b34:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b40:	2200      	movs	r2, #0
 8012b42:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012b50:	4293      	cmp	r3, r2
 8012b52:	bf28      	it	cs
 8012b54:	4613      	movcs	r3, r2
 8012b56:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012b58:	8a7b      	ldrh	r3, [r7, #18]
 8012b5a:	085b      	lsrs	r3, r3, #1
 8012b5c:	b29a      	uxth	r2, r3
 8012b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b60:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b6e:	005b      	lsls	r3, r3, #1
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d206      	bcs.n	8012b84 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b7a:	005b      	lsls	r3, r3, #1
 8012b7c:	b29a      	uxth	r2, r3
 8012b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b80:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8012b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b86:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8012b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8012b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b90:	2200      	movs	r2, #0
 8012b92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8012b96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012b98:	f004 f81c 	bl	8016bd4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8012b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b9e:	7d1b      	ldrb	r3, [r3, #20]
 8012ba0:	2b06      	cmp	r3, #6
 8012ba2:	d111      	bne.n	8012bc8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8012ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ba6:	8b5b      	ldrh	r3, [r3, #26]
 8012ba8:	f003 0310 	and.w	r3, r3, #16
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d00b      	beq.n	8012bc8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012bb0:	4b9c      	ldr	r3, [pc, #624]	@ (8012e24 <tcp_slowtmr+0x584>)
 8012bb2:	681a      	ldr	r2, [r3, #0]
 8012bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bb6:	6a1b      	ldr	r3, [r3, #32]
 8012bb8:	1ad3      	subs	r3, r2, r3
 8012bba:	2b28      	cmp	r3, #40	@ 0x28
 8012bbc:	d904      	bls.n	8012bc8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8012bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bca:	7a5b      	ldrb	r3, [r3, #9]
 8012bcc:	f003 0308 	and.w	r3, r3, #8
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d04a      	beq.n	8012c6a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bd6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012bd8:	2b04      	cmp	r3, #4
 8012bda:	d003      	beq.n	8012be4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bde:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012be0:	2b07      	cmp	r3, #7
 8012be2:	d142      	bne.n	8012c6a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012be4:	4b8f      	ldr	r3, [pc, #572]	@ (8012e24 <tcp_slowtmr+0x584>)
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bea:	6a1b      	ldr	r3, [r3, #32]
 8012bec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bf0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8012e28 <tcp_slowtmr+0x588>)
 8012bf6:	440b      	add	r3, r1
 8012bf8:	498c      	ldr	r1, [pc, #560]	@ (8012e2c <tcp_slowtmr+0x58c>)
 8012bfa:	fba1 1303 	umull	r1, r3, r1, r3
 8012bfe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d90a      	bls.n	8012c1a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8012c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c08:	3301      	adds	r3, #1
 8012c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012c12:	3301      	adds	r3, #1
 8012c14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012c18:	e027      	b.n	8012c6a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c1a:	4b82      	ldr	r3, [pc, #520]	@ (8012e24 <tcp_slowtmr+0x584>)
 8012c1c:	681a      	ldr	r2, [r3, #0]
 8012c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c20:	6a1b      	ldr	r3, [r3, #32]
 8012c22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c26:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c2c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012c30:	4618      	mov	r0, r3
 8012c32:	4b7f      	ldr	r3, [pc, #508]	@ (8012e30 <tcp_slowtmr+0x590>)
 8012c34:	fb00 f303 	mul.w	r3, r0, r3
 8012c38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012c3a:	497c      	ldr	r1, [pc, #496]	@ (8012e2c <tcp_slowtmr+0x58c>)
 8012c3c:	fba1 1303 	umull	r1, r3, r1, r3
 8012c40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d911      	bls.n	8012c6a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8012c46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c48:	f004 fac8 	bl	80171dc <tcp_keepalive>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8012c52:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d107      	bne.n	8012c6a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8012c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c5c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012c60:	3301      	adds	r3, #1
 8012c62:	b2da      	uxtb	r2, r3
 8012c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c66:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8012c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d011      	beq.n	8012c96 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012c72:	4b6c      	ldr	r3, [pc, #432]	@ (8012e24 <tcp_slowtmr+0x584>)
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c78:	6a1b      	ldr	r3, [r3, #32]
 8012c7a:	1ad2      	subs	r2, r2, r3
 8012c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012c82:	4619      	mov	r1, r3
 8012c84:	460b      	mov	r3, r1
 8012c86:	005b      	lsls	r3, r3, #1
 8012c88:	440b      	add	r3, r1
 8012c8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d302      	bcc.n	8012c96 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8012c90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c92:	f000 fddf 	bl	8013854 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8012c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c98:	7d1b      	ldrb	r3, [r3, #20]
 8012c9a:	2b03      	cmp	r3, #3
 8012c9c:	d10b      	bne.n	8012cb6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c9e:	4b61      	ldr	r3, [pc, #388]	@ (8012e24 <tcp_slowtmr+0x584>)
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca4:	6a1b      	ldr	r3, [r3, #32]
 8012ca6:	1ad3      	subs	r3, r2, r3
 8012ca8:	2b28      	cmp	r3, #40	@ 0x28
 8012caa:	d904      	bls.n	8012cb6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8012cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8012cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb8:	7d1b      	ldrb	r3, [r3, #20]
 8012cba:	2b09      	cmp	r3, #9
 8012cbc:	d10b      	bne.n	8012cd6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012cbe:	4b59      	ldr	r3, [pc, #356]	@ (8012e24 <tcp_slowtmr+0x584>)
 8012cc0:	681a      	ldr	r2, [r3, #0]
 8012cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cc4:	6a1b      	ldr	r3, [r3, #32]
 8012cc6:	1ad3      	subs	r3, r2, r3
 8012cc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8012cca:	d904      	bls.n	8012cd6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8012cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d060      	beq.n	8012da0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8012cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ce4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8012ce6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ce8:	f000 fc00 	bl	80134ec <tcp_pcb_purge>
      if (prev != NULL) {
 8012cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d010      	beq.n	8012d14 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012cf2:	4b50      	ldr	r3, [pc, #320]	@ (8012e34 <tcp_slowtmr+0x594>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d106      	bne.n	8012d0a <tcp_slowtmr+0x46a>
 8012cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8012e38 <tcp_slowtmr+0x598>)
 8012cfe:	f240 526d 	movw	r2, #1389	@ 0x56d
 8012d02:	494e      	ldr	r1, [pc, #312]	@ (8012e3c <tcp_slowtmr+0x59c>)
 8012d04:	484e      	ldr	r0, [pc, #312]	@ (8012e40 <tcp_slowtmr+0x5a0>)
 8012d06:	f007 ff55 	bl	801abb4 <iprintf>
        prev->next = pcb->next;
 8012d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d0c:	68da      	ldr	r2, [r3, #12]
 8012d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d10:	60da      	str	r2, [r3, #12]
 8012d12:	e00f      	b.n	8012d34 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012d14:	4b47      	ldr	r3, [pc, #284]	@ (8012e34 <tcp_slowtmr+0x594>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d006      	beq.n	8012d2c <tcp_slowtmr+0x48c>
 8012d1e:	4b46      	ldr	r3, [pc, #280]	@ (8012e38 <tcp_slowtmr+0x598>)
 8012d20:	f240 5271 	movw	r2, #1393	@ 0x571
 8012d24:	4947      	ldr	r1, [pc, #284]	@ (8012e44 <tcp_slowtmr+0x5a4>)
 8012d26:	4846      	ldr	r0, [pc, #280]	@ (8012e40 <tcp_slowtmr+0x5a0>)
 8012d28:	f007 ff44 	bl	801abb4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	4a40      	ldr	r2, [pc, #256]	@ (8012e34 <tcp_slowtmr+0x594>)
 8012d32:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8012d34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d013      	beq.n	8012d64 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d3e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d42:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012d44:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8012d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d48:	3304      	adds	r3, #4
 8012d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d4c:	8ad2      	ldrh	r2, [r2, #22]
 8012d4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012d50:	8b09      	ldrh	r1, [r1, #24]
 8012d52:	9102      	str	r1, [sp, #8]
 8012d54:	9201      	str	r2, [sp, #4]
 8012d56:	9300      	str	r3, [sp, #0]
 8012d58:	462b      	mov	r3, r5
 8012d5a:	4622      	mov	r2, r4
 8012d5c:	4601      	mov	r1, r0
 8012d5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012d60:	f004 f988 	bl	8017074 <tcp_rst>
      err_arg = pcb->callback_arg;
 8012d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d66:	691b      	ldr	r3, [r3, #16]
 8012d68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d6c:	7d1b      	ldrb	r3, [r3, #20]
 8012d6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d76:	68db      	ldr	r3, [r3, #12]
 8012d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012d7a:	6838      	ldr	r0, [r7, #0]
 8012d7c:	f7ff f9f0 	bl	8012160 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8012d80:	4b31      	ldr	r3, [pc, #196]	@ (8012e48 <tcp_slowtmr+0x5a8>)
 8012d82:	2200      	movs	r2, #0
 8012d84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d004      	beq.n	8012d96 <tcp_slowtmr+0x4f6>
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	f06f 010c 	mvn.w	r1, #12
 8012d92:	68b8      	ldr	r0, [r7, #8]
 8012d94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012d96:	4b2c      	ldr	r3, [pc, #176]	@ (8012e48 <tcp_slowtmr+0x5a8>)
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d037      	beq.n	8012e0e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8012d9e:	e592      	b.n	80128c6 <tcp_slowtmr+0x26>
      prev = pcb;
 8012da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012da2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8012daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dac:	7f1b      	ldrb	r3, [r3, #28]
 8012dae:	3301      	adds	r3, #1
 8012db0:	b2da      	uxtb	r2, r3
 8012db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012db4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012db8:	7f1a      	ldrb	r2, [r3, #28]
 8012dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dbc:	7f5b      	ldrb	r3, [r3, #29]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d325      	bcc.n	8012e0e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8012dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8012e48 <tcp_slowtmr+0x5a8>)
 8012dca:	2200      	movs	r2, #0
 8012dcc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d00b      	beq.n	8012df0 <tcp_slowtmr+0x550>
 8012dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012de0:	6912      	ldr	r2, [r2, #16]
 8012de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012de4:	4610      	mov	r0, r2
 8012de6:	4798      	blx	r3
 8012de8:	4603      	mov	r3, r0
 8012dea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8012dee:	e002      	b.n	8012df6 <tcp_slowtmr+0x556>
 8012df0:	2300      	movs	r3, #0
 8012df2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8012df6:	4b14      	ldr	r3, [pc, #80]	@ (8012e48 <tcp_slowtmr+0x5a8>)
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	f47f ad62 	bne.w	80128c4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012e00:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d102      	bne.n	8012e0e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012e08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e0a:	f003 fb7f 	bl	801650c <tcp_output>
  while (pcb != NULL) {
 8012e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f47f ad5e 	bne.w	80128d2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012e16:	2300      	movs	r3, #0
 8012e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8012e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8012e4c <tcp_slowtmr+0x5ac>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012e20:	e069      	b.n	8012ef6 <tcp_slowtmr+0x656>
 8012e22:	bf00      	nop
 8012e24:	24014bac 	.word	0x24014bac
 8012e28:	000a4cb8 	.word	0x000a4cb8
 8012e2c:	10624dd3 	.word	0x10624dd3
 8012e30:	000124f8 	.word	0x000124f8
 8012e34:	24014bb8 	.word	0x24014bb8
 8012e38:	0801c770 	.word	0x0801c770
 8012e3c:	0801cba8 	.word	0x0801cba8
 8012e40:	0801c7b4 	.word	0x0801c7b4
 8012e44:	0801cbd4 	.word	0x0801cbd4
 8012e48:	24014bc0 	.word	0x24014bc0
 8012e4c:	24014bbc 	.word	0x24014bbc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e52:	7d1b      	ldrb	r3, [r3, #20]
 8012e54:	2b0a      	cmp	r3, #10
 8012e56:	d006      	beq.n	8012e66 <tcp_slowtmr+0x5c6>
 8012e58:	4b2b      	ldr	r3, [pc, #172]	@ (8012f08 <tcp_slowtmr+0x668>)
 8012e5a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8012e5e:	492b      	ldr	r1, [pc, #172]	@ (8012f0c <tcp_slowtmr+0x66c>)
 8012e60:	482b      	ldr	r0, [pc, #172]	@ (8012f10 <tcp_slowtmr+0x670>)
 8012e62:	f007 fea7 	bl	801abb4 <iprintf>
    pcb_remove = 0;
 8012e66:	2300      	movs	r3, #0
 8012e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012e6c:	4b29      	ldr	r3, [pc, #164]	@ (8012f14 <tcp_slowtmr+0x674>)
 8012e6e:	681a      	ldr	r2, [r3, #0]
 8012e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e72:	6a1b      	ldr	r3, [r3, #32]
 8012e74:	1ad3      	subs	r3, r2, r3
 8012e76:	2bf0      	cmp	r3, #240	@ 0xf0
 8012e78:	d904      	bls.n	8012e84 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8012e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e7e:	3301      	adds	r3, #1
 8012e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d02f      	beq.n	8012eec <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012e8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012e8e:	f000 fb2d 	bl	80134ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d010      	beq.n	8012eba <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012e98:	4b1f      	ldr	r3, [pc, #124]	@ (8012f18 <tcp_slowtmr+0x678>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d106      	bne.n	8012eb0 <tcp_slowtmr+0x610>
 8012ea2:	4b19      	ldr	r3, [pc, #100]	@ (8012f08 <tcp_slowtmr+0x668>)
 8012ea4:	f240 52af 	movw	r2, #1455	@ 0x5af
 8012ea8:	491c      	ldr	r1, [pc, #112]	@ (8012f1c <tcp_slowtmr+0x67c>)
 8012eaa:	4819      	ldr	r0, [pc, #100]	@ (8012f10 <tcp_slowtmr+0x670>)
 8012eac:	f007 fe82 	bl	801abb4 <iprintf>
        prev->next = pcb->next;
 8012eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eb2:	68da      	ldr	r2, [r3, #12]
 8012eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eb6:	60da      	str	r2, [r3, #12]
 8012eb8:	e00f      	b.n	8012eda <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012eba:	4b17      	ldr	r3, [pc, #92]	@ (8012f18 <tcp_slowtmr+0x678>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d006      	beq.n	8012ed2 <tcp_slowtmr+0x632>
 8012ec4:	4b10      	ldr	r3, [pc, #64]	@ (8012f08 <tcp_slowtmr+0x668>)
 8012ec6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8012eca:	4915      	ldr	r1, [pc, #84]	@ (8012f20 <tcp_slowtmr+0x680>)
 8012ecc:	4810      	ldr	r0, [pc, #64]	@ (8012f10 <tcp_slowtmr+0x670>)
 8012ece:	f007 fe71 	bl	801abb4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ed4:	68db      	ldr	r3, [r3, #12]
 8012ed6:	4a10      	ldr	r2, [pc, #64]	@ (8012f18 <tcp_slowtmr+0x678>)
 8012ed8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012edc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee0:	68db      	ldr	r3, [r3, #12]
 8012ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012ee4:	69f8      	ldr	r0, [r7, #28]
 8012ee6:	f7ff f93b 	bl	8012160 <tcp_free>
 8012eea:	e004      	b.n	8012ef6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8012eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ef2:	68db      	ldr	r3, [r3, #12]
 8012ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1a9      	bne.n	8012e50 <tcp_slowtmr+0x5b0>
    }
  }
}
 8012efc:	bf00      	nop
 8012efe:	bf00      	nop
 8012f00:	3730      	adds	r7, #48	@ 0x30
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bdb0      	pop	{r4, r5, r7, pc}
 8012f06:	bf00      	nop
 8012f08:	0801c770 	.word	0x0801c770
 8012f0c:	0801cc00 	.word	0x0801cc00
 8012f10:	0801c7b4 	.word	0x0801c7b4
 8012f14:	24014bac 	.word	0x24014bac
 8012f18:	24014bbc 	.word	0x24014bbc
 8012f1c:	0801cc30 	.word	0x0801cc30
 8012f20:	0801cc58 	.word	0x0801cc58

08012f24 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8012fe0 <tcp_fasttmr+0xbc>)
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	3301      	adds	r3, #1
 8012f30:	b2da      	uxtb	r2, r3
 8012f32:	4b2b      	ldr	r3, [pc, #172]	@ (8012fe0 <tcp_fasttmr+0xbc>)
 8012f34:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012f36:	4b2b      	ldr	r3, [pc, #172]	@ (8012fe4 <tcp_fasttmr+0xc0>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012f3c:	e048      	b.n	8012fd0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	7f9a      	ldrb	r2, [r3, #30]
 8012f42:	4b27      	ldr	r3, [pc, #156]	@ (8012fe0 <tcp_fasttmr+0xbc>)
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d03f      	beq.n	8012fca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012f4a:	4b25      	ldr	r3, [pc, #148]	@ (8012fe0 <tcp_fasttmr+0xbc>)
 8012f4c:	781a      	ldrb	r2, [r3, #0]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	8b5b      	ldrh	r3, [r3, #26]
 8012f56:	f003 0301 	and.w	r3, r3, #1
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d010      	beq.n	8012f80 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	8b5b      	ldrh	r3, [r3, #26]
 8012f62:	f043 0302 	orr.w	r3, r3, #2
 8012f66:	b29a      	uxth	r2, r3
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f003 facd 	bl	801650c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	8b5b      	ldrh	r3, [r3, #26]
 8012f76:	f023 0303 	bic.w	r3, r3, #3
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	8b5b      	ldrh	r3, [r3, #26]
 8012f84:	f003 0308 	and.w	r3, r3, #8
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d009      	beq.n	8012fa0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	8b5b      	ldrh	r3, [r3, #26]
 8012f90:	f023 0308 	bic.w	r3, r3, #8
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f7ff fa74 	bl	8012488 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	68db      	ldr	r3, [r3, #12]
 8012fa4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d00a      	beq.n	8012fc4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012fae:	4b0e      	ldr	r3, [pc, #56]	@ (8012fe8 <tcp_fasttmr+0xc4>)
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f000 f819 	bl	8012fec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012fba:	4b0b      	ldr	r3, [pc, #44]	@ (8012fe8 <tcp_fasttmr+0xc4>)
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d000      	beq.n	8012fc4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012fc2:	e7b8      	b.n	8012f36 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	607b      	str	r3, [r7, #4]
 8012fc8:	e002      	b.n	8012fd0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d1b3      	bne.n	8012f3e <tcp_fasttmr+0x1a>
    }
  }
}
 8012fd6:	bf00      	nop
 8012fd8:	bf00      	nop
 8012fda:	3708      	adds	r7, #8
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	24014bc2 	.word	0x24014bc2
 8012fe4:	24014bb8 	.word	0x24014bb8
 8012fe8:	24014bc0 	.word	0x24014bc0

08012fec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012fec:	b590      	push	{r4, r7, lr}
 8012fee:	b085      	sub	sp, #20
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d109      	bne.n	801300e <tcp_process_refused_data+0x22>
 8012ffa:	4b38      	ldr	r3, [pc, #224]	@ (80130dc <tcp_process_refused_data+0xf0>)
 8012ffc:	f240 6209 	movw	r2, #1545	@ 0x609
 8013000:	4937      	ldr	r1, [pc, #220]	@ (80130e0 <tcp_process_refused_data+0xf4>)
 8013002:	4838      	ldr	r0, [pc, #224]	@ (80130e4 <tcp_process_refused_data+0xf8>)
 8013004:	f007 fdd6 	bl	801abb4 <iprintf>
 8013008:	f06f 030f 	mvn.w	r3, #15
 801300c:	e061      	b.n	80130d2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013012:	7b5b      	ldrb	r3, [r3, #13]
 8013014:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801301a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013028:	2b00      	cmp	r3, #0
 801302a:	d00b      	beq.n	8013044 <tcp_process_refused_data+0x58>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6918      	ldr	r0, [r3, #16]
 8013036:	2300      	movs	r3, #0
 8013038:	68ba      	ldr	r2, [r7, #8]
 801303a:	6879      	ldr	r1, [r7, #4]
 801303c:	47a0      	blx	r4
 801303e:	4603      	mov	r3, r0
 8013040:	73fb      	strb	r3, [r7, #15]
 8013042:	e007      	b.n	8013054 <tcp_process_refused_data+0x68>
 8013044:	2300      	movs	r3, #0
 8013046:	68ba      	ldr	r2, [r7, #8]
 8013048:	6879      	ldr	r1, [r7, #4]
 801304a:	2000      	movs	r0, #0
 801304c:	f000 f8a6 	bl	801319c <tcp_recv_null>
 8013050:	4603      	mov	r3, r0
 8013052:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d12b      	bne.n	80130b4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801305c:	7bbb      	ldrb	r3, [r7, #14]
 801305e:	f003 0320 	and.w	r3, r3, #32
 8013062:	2b00      	cmp	r3, #0
 8013064:	d034      	beq.n	80130d0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801306a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801306e:	4293      	cmp	r3, r2
 8013070:	d005      	beq.n	801307e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013076:	3301      	adds	r3, #1
 8013078:	b29a      	uxth	r2, r3
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013084:	2b00      	cmp	r3, #0
 8013086:	d00b      	beq.n	80130a0 <tcp_process_refused_data+0xb4>
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6918      	ldr	r0, [r3, #16]
 8013092:	2300      	movs	r3, #0
 8013094:	2200      	movs	r2, #0
 8013096:	6879      	ldr	r1, [r7, #4]
 8013098:	47a0      	blx	r4
 801309a:	4603      	mov	r3, r0
 801309c:	73fb      	strb	r3, [r7, #15]
 801309e:	e001      	b.n	80130a4 <tcp_process_refused_data+0xb8>
 80130a0:	2300      	movs	r3, #0
 80130a2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80130a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130a8:	f113 0f0d 	cmn.w	r3, #13
 80130ac:	d110      	bne.n	80130d0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80130ae:	f06f 030c 	mvn.w	r3, #12
 80130b2:	e00e      	b.n	80130d2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80130b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130b8:	f113 0f0d 	cmn.w	r3, #13
 80130bc:	d102      	bne.n	80130c4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80130be:	f06f 030c 	mvn.w	r3, #12
 80130c2:	e006      	b.n	80130d2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	68ba      	ldr	r2, [r7, #8]
 80130c8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80130ca:	f06f 0304 	mvn.w	r3, #4
 80130ce:	e000      	b.n	80130d2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80130d0:	2300      	movs	r3, #0
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3714      	adds	r7, #20
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd90      	pop	{r4, r7, pc}
 80130da:	bf00      	nop
 80130dc:	0801c770 	.word	0x0801c770
 80130e0:	0801cc80 	.word	0x0801cc80
 80130e4:	0801c7b4 	.word	0x0801c7b4

080130e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b084      	sub	sp, #16
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80130f0:	e007      	b.n	8013102 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f000 f80a 	bl	8013112 <tcp_seg_free>
    seg = next;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d1f4      	bne.n	80130f2 <tcp_segs_free+0xa>
  }
}
 8013108:	bf00      	nop
 801310a:	bf00      	nop
 801310c:	3710      	adds	r7, #16
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}

08013112 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013112:	b580      	push	{r7, lr}
 8013114:	b082      	sub	sp, #8
 8013116:	af00      	add	r7, sp, #0
 8013118:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00c      	beq.n	801313a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d004      	beq.n	8013132 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	4618      	mov	r0, r3
 801312e:	f7fe fc6f 	bl	8011a10 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013132:	6879      	ldr	r1, [r7, #4]
 8013134:	2004      	movs	r0, #4
 8013136:	f7fd fdbf 	bl	8010cb8 <memp_free>
  }
}
 801313a:	bf00      	nop
 801313c:	3708      	adds	r7, #8
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
	...

08013144 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b084      	sub	sp, #16
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d106      	bne.n	8013160 <tcp_seg_copy+0x1c>
 8013152:	4b0f      	ldr	r3, [pc, #60]	@ (8013190 <tcp_seg_copy+0x4c>)
 8013154:	f240 6282 	movw	r2, #1666	@ 0x682
 8013158:	490e      	ldr	r1, [pc, #56]	@ (8013194 <tcp_seg_copy+0x50>)
 801315a:	480f      	ldr	r0, [pc, #60]	@ (8013198 <tcp_seg_copy+0x54>)
 801315c:	f007 fd2a 	bl	801abb4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013160:	2004      	movs	r0, #4
 8013162:	f7fd fd33 	bl	8010bcc <memp_malloc>
 8013166:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d101      	bne.n	8013172 <tcp_seg_copy+0x2e>
    return NULL;
 801316e:	2300      	movs	r3, #0
 8013170:	e00a      	b.n	8013188 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013172:	2210      	movs	r2, #16
 8013174:	6879      	ldr	r1, [r7, #4]
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f007 fe55 	bl	801ae26 <memcpy>
  pbuf_ref(cseg->p);
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	4618      	mov	r0, r3
 8013182:	f7fe fceb 	bl	8011b5c <pbuf_ref>
  return cseg;
 8013186:	68fb      	ldr	r3, [r7, #12]
}
 8013188:	4618      	mov	r0, r3
 801318a:	3710      	adds	r7, #16
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}
 8013190:	0801c770 	.word	0x0801c770
 8013194:	0801ccc4 	.word	0x0801ccc4
 8013198:	0801c7b4 	.word	0x0801c7b4

0801319c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	60f8      	str	r0, [r7, #12]
 80131a4:	60b9      	str	r1, [r7, #8]
 80131a6:	607a      	str	r2, [r7, #4]
 80131a8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d109      	bne.n	80131c4 <tcp_recv_null+0x28>
 80131b0:	4b12      	ldr	r3, [pc, #72]	@ (80131fc <tcp_recv_null+0x60>)
 80131b2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80131b6:	4912      	ldr	r1, [pc, #72]	@ (8013200 <tcp_recv_null+0x64>)
 80131b8:	4812      	ldr	r0, [pc, #72]	@ (8013204 <tcp_recv_null+0x68>)
 80131ba:	f007 fcfb 	bl	801abb4 <iprintf>
 80131be:	f06f 030f 	mvn.w	r3, #15
 80131c2:	e016      	b.n	80131f2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d009      	beq.n	80131de <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	891b      	ldrh	r3, [r3, #8]
 80131ce:	4619      	mov	r1, r3
 80131d0:	68b8      	ldr	r0, [r7, #8]
 80131d2:	f7ff fb13 	bl	80127fc <tcp_recved>
    pbuf_free(p);
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f7fe fc1a 	bl	8011a10 <pbuf_free>
 80131dc:	e008      	b.n	80131f0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80131de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d104      	bne.n	80131f0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80131e6:	68b8      	ldr	r0, [r7, #8]
 80131e8:	f7ff f9b8 	bl	801255c <tcp_close>
 80131ec:	4603      	mov	r3, r0
 80131ee:	e000      	b.n	80131f2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3710      	adds	r7, #16
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	0801c770 	.word	0x0801c770
 8013200:	0801cce0 	.word	0x0801cce0
 8013204:	0801c7b4 	.word	0x0801c7b4

08013208 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b086      	sub	sp, #24
 801320c:	af00      	add	r7, sp, #0
 801320e:	4603      	mov	r3, r0
 8013210:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013216:	2b00      	cmp	r3, #0
 8013218:	db01      	blt.n	801321e <tcp_kill_prio+0x16>
 801321a:	79fb      	ldrb	r3, [r7, #7]
 801321c:	e000      	b.n	8013220 <tcp_kill_prio+0x18>
 801321e:	237f      	movs	r3, #127	@ 0x7f
 8013220:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013222:	7afb      	ldrb	r3, [r7, #11]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d034      	beq.n	8013292 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013228:	7afb      	ldrb	r3, [r7, #11]
 801322a:	3b01      	subs	r3, #1
 801322c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801322e:	2300      	movs	r3, #0
 8013230:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013232:	2300      	movs	r3, #0
 8013234:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013236:	4b19      	ldr	r3, [pc, #100]	@ (801329c <tcp_kill_prio+0x94>)
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	617b      	str	r3, [r7, #20]
 801323c:	e01f      	b.n	801327e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	7d5b      	ldrb	r3, [r3, #21]
 8013242:	7afa      	ldrb	r2, [r7, #11]
 8013244:	429a      	cmp	r2, r3
 8013246:	d80c      	bhi.n	8013262 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801324c:	7afa      	ldrb	r2, [r7, #11]
 801324e:	429a      	cmp	r2, r3
 8013250:	d112      	bne.n	8013278 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013252:	4b13      	ldr	r3, [pc, #76]	@ (80132a0 <tcp_kill_prio+0x98>)
 8013254:	681a      	ldr	r2, [r3, #0]
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	6a1b      	ldr	r3, [r3, #32]
 801325a:	1ad3      	subs	r3, r2, r3
 801325c:	68fa      	ldr	r2, [r7, #12]
 801325e:	429a      	cmp	r2, r3
 8013260:	d80a      	bhi.n	8013278 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013262:	4b0f      	ldr	r3, [pc, #60]	@ (80132a0 <tcp_kill_prio+0x98>)
 8013264:	681a      	ldr	r2, [r3, #0]
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	6a1b      	ldr	r3, [r3, #32]
 801326a:	1ad3      	subs	r3, r2, r3
 801326c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	7d5b      	ldrb	r3, [r3, #21]
 8013276:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	617b      	str	r3, [r7, #20]
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d1dc      	bne.n	801323e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d004      	beq.n	8013294 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801328a:	6938      	ldr	r0, [r7, #16]
 801328c:	f7ff fa50 	bl	8012730 <tcp_abort>
 8013290:	e000      	b.n	8013294 <tcp_kill_prio+0x8c>
    return;
 8013292:	bf00      	nop
  }
}
 8013294:	3718      	adds	r7, #24
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	24014bb8 	.word	0x24014bb8
 80132a0:	24014bac 	.word	0x24014bac

080132a4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b086      	sub	sp, #24
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	4603      	mov	r3, r0
 80132ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80132ae:	79fb      	ldrb	r3, [r7, #7]
 80132b0:	2b08      	cmp	r3, #8
 80132b2:	d009      	beq.n	80132c8 <tcp_kill_state+0x24>
 80132b4:	79fb      	ldrb	r3, [r7, #7]
 80132b6:	2b09      	cmp	r3, #9
 80132b8:	d006      	beq.n	80132c8 <tcp_kill_state+0x24>
 80132ba:	4b1a      	ldr	r3, [pc, #104]	@ (8013324 <tcp_kill_state+0x80>)
 80132bc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80132c0:	4919      	ldr	r1, [pc, #100]	@ (8013328 <tcp_kill_state+0x84>)
 80132c2:	481a      	ldr	r0, [pc, #104]	@ (801332c <tcp_kill_state+0x88>)
 80132c4:	f007 fc76 	bl	801abb4 <iprintf>

  inactivity = 0;
 80132c8:	2300      	movs	r3, #0
 80132ca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80132cc:	2300      	movs	r3, #0
 80132ce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80132d0:	4b17      	ldr	r3, [pc, #92]	@ (8013330 <tcp_kill_state+0x8c>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	617b      	str	r3, [r7, #20]
 80132d6:	e017      	b.n	8013308 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	7d1b      	ldrb	r3, [r3, #20]
 80132dc:	79fa      	ldrb	r2, [r7, #7]
 80132de:	429a      	cmp	r2, r3
 80132e0:	d10f      	bne.n	8013302 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80132e2:	4b14      	ldr	r3, [pc, #80]	@ (8013334 <tcp_kill_state+0x90>)
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	6a1b      	ldr	r3, [r3, #32]
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	68fa      	ldr	r2, [r7, #12]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d807      	bhi.n	8013302 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80132f2:	4b10      	ldr	r3, [pc, #64]	@ (8013334 <tcp_kill_state+0x90>)
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	6a1b      	ldr	r3, [r3, #32]
 80132fa:	1ad3      	subs	r3, r2, r3
 80132fc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	68db      	ldr	r3, [r3, #12]
 8013306:	617b      	str	r3, [r7, #20]
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d1e4      	bne.n	80132d8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d003      	beq.n	801331c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013314:	2100      	movs	r1, #0
 8013316:	6938      	ldr	r0, [r7, #16]
 8013318:	f7ff f94c 	bl	80125b4 <tcp_abandon>
  }
}
 801331c:	bf00      	nop
 801331e:	3718      	adds	r7, #24
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}
 8013324:	0801c770 	.word	0x0801c770
 8013328:	0801ccfc 	.word	0x0801ccfc
 801332c:	0801c7b4 	.word	0x0801c7b4
 8013330:	24014bb8 	.word	0x24014bb8
 8013334:	24014bac 	.word	0x24014bac

08013338 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801333e:	2300      	movs	r3, #0
 8013340:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013342:	2300      	movs	r3, #0
 8013344:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013346:	4b12      	ldr	r3, [pc, #72]	@ (8013390 <tcp_kill_timewait+0x58>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	60fb      	str	r3, [r7, #12]
 801334c:	e012      	b.n	8013374 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801334e:	4b11      	ldr	r3, [pc, #68]	@ (8013394 <tcp_kill_timewait+0x5c>)
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	6a1b      	ldr	r3, [r3, #32]
 8013356:	1ad3      	subs	r3, r2, r3
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	429a      	cmp	r2, r3
 801335c:	d807      	bhi.n	801336e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801335e:	4b0d      	ldr	r3, [pc, #52]	@ (8013394 <tcp_kill_timewait+0x5c>)
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	6a1b      	ldr	r3, [r3, #32]
 8013366:	1ad3      	subs	r3, r2, r3
 8013368:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	68db      	ldr	r3, [r3, #12]
 8013372:	60fb      	str	r3, [r7, #12]
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d1e9      	bne.n	801334e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d002      	beq.n	8013386 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013380:	68b8      	ldr	r0, [r7, #8]
 8013382:	f7ff f9d5 	bl	8012730 <tcp_abort>
  }
}
 8013386:	bf00      	nop
 8013388:	3710      	adds	r7, #16
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	24014bbc 	.word	0x24014bbc
 8013394:	24014bac 	.word	0x24014bac

08013398 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b082      	sub	sp, #8
 801339c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801339e:	4b10      	ldr	r3, [pc, #64]	@ (80133e0 <tcp_handle_closepend+0x48>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80133a4:	e014      	b.n	80133d0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	68db      	ldr	r3, [r3, #12]
 80133aa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	8b5b      	ldrh	r3, [r3, #26]
 80133b0:	f003 0308 	and.w	r3, r3, #8
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d009      	beq.n	80133cc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	8b5b      	ldrh	r3, [r3, #26]
 80133bc:	f023 0308 	bic.w	r3, r3, #8
 80133c0:	b29a      	uxth	r2, r3
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f7ff f85e 	bl	8012488 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d1e7      	bne.n	80133a6 <tcp_handle_closepend+0xe>
  }
}
 80133d6:	bf00      	nop
 80133d8:	bf00      	nop
 80133da:	3708      	adds	r7, #8
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	24014bb8 	.word	0x24014bb8

080133e4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	4603      	mov	r3, r0
 80133ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80133ee:	2002      	movs	r0, #2
 80133f0:	f7fd fbec 	bl	8010bcc <memp_malloc>
 80133f4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d126      	bne.n	801344a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80133fc:	f7ff ffcc 	bl	8013398 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013400:	f7ff ff9a 	bl	8013338 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013404:	2002      	movs	r0, #2
 8013406:	f7fd fbe1 	bl	8010bcc <memp_malloc>
 801340a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d11b      	bne.n	801344a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013412:	2009      	movs	r0, #9
 8013414:	f7ff ff46 	bl	80132a4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013418:	2002      	movs	r0, #2
 801341a:	f7fd fbd7 	bl	8010bcc <memp_malloc>
 801341e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d111      	bne.n	801344a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013426:	2008      	movs	r0, #8
 8013428:	f7ff ff3c 	bl	80132a4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801342c:	2002      	movs	r0, #2
 801342e:	f7fd fbcd 	bl	8010bcc <memp_malloc>
 8013432:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d107      	bne.n	801344a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801343a:	79fb      	ldrb	r3, [r7, #7]
 801343c:	4618      	mov	r0, r3
 801343e:	f7ff fee3 	bl	8013208 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013442:	2002      	movs	r0, #2
 8013444:	f7fd fbc2 	bl	8010bcc <memp_malloc>
 8013448:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d03f      	beq.n	80134d0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013450:	229c      	movs	r2, #156	@ 0x9c
 8013452:	2100      	movs	r1, #0
 8013454:	68f8      	ldr	r0, [r7, #12]
 8013456:	f007 fc12 	bl	801ac7e <memset>
    pcb->prio = prio;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	79fa      	ldrb	r2, [r7, #7]
 801345e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8013466:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8013470:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	22ff      	movs	r2, #255	@ 0xff
 801347e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013486:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2206      	movs	r2, #6
 801348c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2206      	movs	r2, #6
 8013494:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801349c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2201      	movs	r2, #1
 80134a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80134a6:	4b0d      	ldr	r3, [pc, #52]	@ (80134dc <tcp_alloc+0xf8>)
 80134a8:	681a      	ldr	r2, [r3, #0]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80134ae:	4b0c      	ldr	r3, [pc, #48]	@ (80134e0 <tcp_alloc+0xfc>)
 80134b0:	781a      	ldrb	r2, [r3, #0]
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80134bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	4a08      	ldr	r2, [pc, #32]	@ (80134e4 <tcp_alloc+0x100>)
 80134c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	4a07      	ldr	r2, [pc, #28]	@ (80134e8 <tcp_alloc+0x104>)
 80134cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80134d0:	68fb      	ldr	r3, [r7, #12]
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3710      	adds	r7, #16
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	24014bac 	.word	0x24014bac
 80134e0:	24014bc2 	.word	0x24014bc2
 80134e4:	0801319d 	.word	0x0801319d
 80134e8:	006ddd00 	.word	0x006ddd00

080134ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d107      	bne.n	801350a <tcp_pcb_purge+0x1e>
 80134fa:	4b21      	ldr	r3, [pc, #132]	@ (8013580 <tcp_pcb_purge+0x94>)
 80134fc:	f640 0251 	movw	r2, #2129	@ 0x851
 8013500:	4920      	ldr	r1, [pc, #128]	@ (8013584 <tcp_pcb_purge+0x98>)
 8013502:	4821      	ldr	r0, [pc, #132]	@ (8013588 <tcp_pcb_purge+0x9c>)
 8013504:	f007 fb56 	bl	801abb4 <iprintf>
 8013508:	e037      	b.n	801357a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	7d1b      	ldrb	r3, [r3, #20]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d033      	beq.n	801357a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013516:	2b0a      	cmp	r3, #10
 8013518:	d02f      	beq.n	801357a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801351e:	2b01      	cmp	r3, #1
 8013520:	d02b      	beq.n	801357a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013526:	2b00      	cmp	r3, #0
 8013528:	d007      	beq.n	801353a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801352e:	4618      	mov	r0, r3
 8013530:	f7fe fa6e 	bl	8011a10 <pbuf_free>
      pcb->refused_data = NULL;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2200      	movs	r2, #0
 8013538:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801353e:	2b00      	cmp	r3, #0
 8013540:	d002      	beq.n	8013548 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f000 f986 	bl	8013854 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801354e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013554:	4618      	mov	r0, r3
 8013556:	f7ff fdc7 	bl	80130e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801355e:	4618      	mov	r0, r3
 8013560:	f7ff fdc2 	bl	80130e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	66da      	str	r2, [r3, #108]	@ 0x6c
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2200      	movs	r2, #0
 8013576:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801357a:	3708      	adds	r7, #8
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}
 8013580:	0801c770 	.word	0x0801c770
 8013584:	0801cdbc 	.word	0x0801cdbc
 8013588:	0801c7b4 	.word	0x0801c7b4

0801358c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d106      	bne.n	80135aa <tcp_pcb_remove+0x1e>
 801359c:	4b3e      	ldr	r3, [pc, #248]	@ (8013698 <tcp_pcb_remove+0x10c>)
 801359e:	f640 0283 	movw	r2, #2179	@ 0x883
 80135a2:	493e      	ldr	r1, [pc, #248]	@ (801369c <tcp_pcb_remove+0x110>)
 80135a4:	483e      	ldr	r0, [pc, #248]	@ (80136a0 <tcp_pcb_remove+0x114>)
 80135a6:	f007 fb05 	bl	801abb4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d106      	bne.n	80135be <tcp_pcb_remove+0x32>
 80135b0:	4b39      	ldr	r3, [pc, #228]	@ (8013698 <tcp_pcb_remove+0x10c>)
 80135b2:	f640 0284 	movw	r2, #2180	@ 0x884
 80135b6:	493b      	ldr	r1, [pc, #236]	@ (80136a4 <tcp_pcb_remove+0x118>)
 80135b8:	4839      	ldr	r0, [pc, #228]	@ (80136a0 <tcp_pcb_remove+0x114>)
 80135ba:	f007 fafb 	bl	801abb4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	683a      	ldr	r2, [r7, #0]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d105      	bne.n	80135d4 <tcp_pcb_remove+0x48>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	68da      	ldr	r2, [r3, #12]
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	601a      	str	r2, [r3, #0]
 80135d2:	e013      	b.n	80135fc <tcp_pcb_remove+0x70>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	60fb      	str	r3, [r7, #12]
 80135da:	e00c      	b.n	80135f6 <tcp_pcb_remove+0x6a>
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	683a      	ldr	r2, [r7, #0]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d104      	bne.n	80135f0 <tcp_pcb_remove+0x64>
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	68da      	ldr	r2, [r3, #12]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	60da      	str	r2, [r3, #12]
 80135ee:	e005      	b.n	80135fc <tcp_pcb_remove+0x70>
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	60fb      	str	r3, [r7, #12]
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d1ef      	bne.n	80135dc <tcp_pcb_remove+0x50>
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	2200      	movs	r2, #0
 8013600:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013602:	6838      	ldr	r0, [r7, #0]
 8013604:	f7ff ff72 	bl	80134ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	7d1b      	ldrb	r3, [r3, #20]
 801360c:	2b0a      	cmp	r3, #10
 801360e:	d013      	beq.n	8013638 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013614:	2b01      	cmp	r3, #1
 8013616:	d00f      	beq.n	8013638 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	8b5b      	ldrh	r3, [r3, #26]
 801361c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013620:	2b00      	cmp	r3, #0
 8013622:	d009      	beq.n	8013638 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	8b5b      	ldrh	r3, [r3, #26]
 8013628:	f043 0302 	orr.w	r3, r3, #2
 801362c:	b29a      	uxth	r2, r3
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013632:	6838      	ldr	r0, [r7, #0]
 8013634:	f002 ff6a 	bl	801650c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	7d1b      	ldrb	r3, [r3, #20]
 801363c:	2b01      	cmp	r3, #1
 801363e:	d020      	beq.n	8013682 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013644:	2b00      	cmp	r3, #0
 8013646:	d006      	beq.n	8013656 <tcp_pcb_remove+0xca>
 8013648:	4b13      	ldr	r3, [pc, #76]	@ (8013698 <tcp_pcb_remove+0x10c>)
 801364a:	f640 0293 	movw	r2, #2195	@ 0x893
 801364e:	4916      	ldr	r1, [pc, #88]	@ (80136a8 <tcp_pcb_remove+0x11c>)
 8013650:	4813      	ldr	r0, [pc, #76]	@ (80136a0 <tcp_pcb_remove+0x114>)
 8013652:	f007 faaf 	bl	801abb4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801365a:	2b00      	cmp	r3, #0
 801365c:	d006      	beq.n	801366c <tcp_pcb_remove+0xe0>
 801365e:	4b0e      	ldr	r3, [pc, #56]	@ (8013698 <tcp_pcb_remove+0x10c>)
 8013660:	f640 0294 	movw	r2, #2196	@ 0x894
 8013664:	4911      	ldr	r1, [pc, #68]	@ (80136ac <tcp_pcb_remove+0x120>)
 8013666:	480e      	ldr	r0, [pc, #56]	@ (80136a0 <tcp_pcb_remove+0x114>)
 8013668:	f007 faa4 	bl	801abb4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013670:	2b00      	cmp	r3, #0
 8013672:	d006      	beq.n	8013682 <tcp_pcb_remove+0xf6>
 8013674:	4b08      	ldr	r3, [pc, #32]	@ (8013698 <tcp_pcb_remove+0x10c>)
 8013676:	f640 0296 	movw	r2, #2198	@ 0x896
 801367a:	490d      	ldr	r1, [pc, #52]	@ (80136b0 <tcp_pcb_remove+0x124>)
 801367c:	4808      	ldr	r0, [pc, #32]	@ (80136a0 <tcp_pcb_remove+0x114>)
 801367e:	f007 fa99 	bl	801abb4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	2200      	movs	r2, #0
 8013686:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	2200      	movs	r2, #0
 801368c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801368e:	bf00      	nop
 8013690:	3710      	adds	r7, #16
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	0801c770 	.word	0x0801c770
 801369c:	0801cdd8 	.word	0x0801cdd8
 80136a0:	0801c7b4 	.word	0x0801c7b4
 80136a4:	0801cdf4 	.word	0x0801cdf4
 80136a8:	0801ce14 	.word	0x0801ce14
 80136ac:	0801ce2c 	.word	0x0801ce2c
 80136b0:	0801ce48 	.word	0x0801ce48

080136b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b082      	sub	sp, #8
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d106      	bne.n	80136d0 <tcp_next_iss+0x1c>
 80136c2:	4b0a      	ldr	r3, [pc, #40]	@ (80136ec <tcp_next_iss+0x38>)
 80136c4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80136c8:	4909      	ldr	r1, [pc, #36]	@ (80136f0 <tcp_next_iss+0x3c>)
 80136ca:	480a      	ldr	r0, [pc, #40]	@ (80136f4 <tcp_next_iss+0x40>)
 80136cc:	f007 fa72 	bl	801abb4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80136d0:	4b09      	ldr	r3, [pc, #36]	@ (80136f8 <tcp_next_iss+0x44>)
 80136d2:	681a      	ldr	r2, [r3, #0]
 80136d4:	4b09      	ldr	r3, [pc, #36]	@ (80136fc <tcp_next_iss+0x48>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	4413      	add	r3, r2
 80136da:	4a07      	ldr	r2, [pc, #28]	@ (80136f8 <tcp_next_iss+0x44>)
 80136dc:	6013      	str	r3, [r2, #0]
  return iss;
 80136de:	4b06      	ldr	r3, [pc, #24]	@ (80136f8 <tcp_next_iss+0x44>)
 80136e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3708      	adds	r7, #8
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	0801c770 	.word	0x0801c770
 80136f0:	0801ce60 	.word	0x0801ce60
 80136f4:	0801c7b4 	.word	0x0801c7b4
 80136f8:	240049ec 	.word	0x240049ec
 80136fc:	24014bac 	.word	0x24014bac

08013700 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b086      	sub	sp, #24
 8013704:	af00      	add	r7, sp, #0
 8013706:	4603      	mov	r3, r0
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
 801370c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d106      	bne.n	8013722 <tcp_eff_send_mss_netif+0x22>
 8013714:	4b14      	ldr	r3, [pc, #80]	@ (8013768 <tcp_eff_send_mss_netif+0x68>)
 8013716:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801371a:	4914      	ldr	r1, [pc, #80]	@ (801376c <tcp_eff_send_mss_netif+0x6c>)
 801371c:	4814      	ldr	r0, [pc, #80]	@ (8013770 <tcp_eff_send_mss_netif+0x70>)
 801371e:	f007 fa49 	bl	801abb4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d101      	bne.n	801372c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013728:	89fb      	ldrh	r3, [r7, #14]
 801372a:	e019      	b.n	8013760 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013730:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013732:	8afb      	ldrh	r3, [r7, #22]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d012      	beq.n	801375e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013738:	2328      	movs	r3, #40	@ 0x28
 801373a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801373c:	8afa      	ldrh	r2, [r7, #22]
 801373e:	8abb      	ldrh	r3, [r7, #20]
 8013740:	429a      	cmp	r2, r3
 8013742:	d904      	bls.n	801374e <tcp_eff_send_mss_netif+0x4e>
 8013744:	8afa      	ldrh	r2, [r7, #22]
 8013746:	8abb      	ldrh	r3, [r7, #20]
 8013748:	1ad3      	subs	r3, r2, r3
 801374a:	b29b      	uxth	r3, r3
 801374c:	e000      	b.n	8013750 <tcp_eff_send_mss_netif+0x50>
 801374e:	2300      	movs	r3, #0
 8013750:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013752:	8a7a      	ldrh	r2, [r7, #18]
 8013754:	89fb      	ldrh	r3, [r7, #14]
 8013756:	4293      	cmp	r3, r2
 8013758:	bf28      	it	cs
 801375a:	4613      	movcs	r3, r2
 801375c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801375e:	89fb      	ldrh	r3, [r7, #14]
}
 8013760:	4618      	mov	r0, r3
 8013762:	3718      	adds	r7, #24
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}
 8013768:	0801c770 	.word	0x0801c770
 801376c:	0801ce7c 	.word	0x0801ce7c
 8013770:	0801c7b4 	.word	0x0801c7b4

08013774 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b084      	sub	sp, #16
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d119      	bne.n	80137bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013788:	4b10      	ldr	r3, [pc, #64]	@ (80137cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801378a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801378e:	4910      	ldr	r1, [pc, #64]	@ (80137d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013790:	4810      	ldr	r0, [pc, #64]	@ (80137d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013792:	f007 fa0f 	bl	801abb4 <iprintf>

  while (pcb != NULL) {
 8013796:	e011      	b.n	80137bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	681a      	ldr	r2, [r3, #0]
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d108      	bne.n	80137b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80137aa:	68f8      	ldr	r0, [r7, #12]
 80137ac:	f7fe ffc0 	bl	8012730 <tcp_abort>
      pcb = next;
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	60fb      	str	r3, [r7, #12]
 80137b4:	e002      	b.n	80137bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d1ea      	bne.n	8013798 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80137c2:	bf00      	nop
 80137c4:	bf00      	nop
 80137c6:	3710      	adds	r7, #16
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	0801c770 	.word	0x0801c770
 80137d0:	0801cea4 	.word	0x0801cea4
 80137d4:	0801c7b4 	.word	0x0801c7b4

080137d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d02a      	beq.n	801383e <tcp_netif_ip_addr_changed+0x66>
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d026      	beq.n	801383e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80137f0:	4b15      	ldr	r3, [pc, #84]	@ (8013848 <tcp_netif_ip_addr_changed+0x70>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	4619      	mov	r1, r3
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f7ff ffbc 	bl	8013774 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80137fc:	4b13      	ldr	r3, [pc, #76]	@ (801384c <tcp_netif_ip_addr_changed+0x74>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	4619      	mov	r1, r3
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f7ff ffb6 	bl	8013774 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d017      	beq.n	801383e <tcp_netif_ip_addr_changed+0x66>
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d013      	beq.n	801383e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013816:	4b0e      	ldr	r3, [pc, #56]	@ (8013850 <tcp_netif_ip_addr_changed+0x78>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	60fb      	str	r3, [r7, #12]
 801381c:	e00c      	b.n	8013838 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	681a      	ldr	r2, [r3, #0]
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	429a      	cmp	r2, r3
 8013828:	d103      	bne.n	8013832 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	681a      	ldr	r2, [r3, #0]
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	68db      	ldr	r3, [r3, #12]
 8013836:	60fb      	str	r3, [r7, #12]
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d1ef      	bne.n	801381e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801383e:	bf00      	nop
 8013840:	3710      	adds	r7, #16
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	24014bb8 	.word	0x24014bb8
 801384c:	24014bb0 	.word	0x24014bb0
 8013850:	24014bb4 	.word	0x24014bb4

08013854 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013860:	2b00      	cmp	r3, #0
 8013862:	d007      	beq.n	8013874 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013868:	4618      	mov	r0, r3
 801386a:	f7ff fc3d 	bl	80130e8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2200      	movs	r2, #0
 8013872:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013874:	bf00      	nop
 8013876:	3708      	adds	r7, #8
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801387c:	b590      	push	{r4, r7, lr}
 801387e:	b08d      	sub	sp, #52	@ 0x34
 8013880:	af04      	add	r7, sp, #16
 8013882:	6078      	str	r0, [r7, #4]
 8013884:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d105      	bne.n	8013898 <tcp_input+0x1c>
 801388c:	4b9b      	ldr	r3, [pc, #620]	@ (8013afc <tcp_input+0x280>)
 801388e:	2283      	movs	r2, #131	@ 0x83
 8013890:	499b      	ldr	r1, [pc, #620]	@ (8013b00 <tcp_input+0x284>)
 8013892:	489c      	ldr	r0, [pc, #624]	@ (8013b04 <tcp_input+0x288>)
 8013894:	f007 f98e 	bl	801abb4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	4a9a      	ldr	r2, [pc, #616]	@ (8013b08 <tcp_input+0x28c>)
 801389e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	895b      	ldrh	r3, [r3, #10]
 80138a4:	2b13      	cmp	r3, #19
 80138a6:	f240 83d1 	bls.w	801404c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80138aa:	4b98      	ldr	r3, [pc, #608]	@ (8013b0c <tcp_input+0x290>)
 80138ac:	695b      	ldr	r3, [r3, #20]
 80138ae:	4a97      	ldr	r2, [pc, #604]	@ (8013b0c <tcp_input+0x290>)
 80138b0:	6812      	ldr	r2, [r2, #0]
 80138b2:	4611      	mov	r1, r2
 80138b4:	4618      	mov	r0, r3
 80138b6:	f005 ffa5 	bl	8019804 <ip4_addr_isbroadcast_u32>
 80138ba:	4603      	mov	r3, r0
 80138bc:	2b00      	cmp	r3, #0
 80138be:	f040 83c7 	bne.w	8014050 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80138c2:	4b92      	ldr	r3, [pc, #584]	@ (8013b0c <tcp_input+0x290>)
 80138c4:	695b      	ldr	r3, [r3, #20]
 80138c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80138ca:	2be0      	cmp	r3, #224	@ 0xe0
 80138cc:	f000 83c0 	beq.w	8014050 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80138d0:	4b8d      	ldr	r3, [pc, #564]	@ (8013b08 <tcp_input+0x28c>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	899b      	ldrh	r3, [r3, #12]
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	4618      	mov	r0, r3
 80138da:	f7fc fbe7 	bl	80100ac <lwip_htons>
 80138de:	4603      	mov	r3, r0
 80138e0:	0b1b      	lsrs	r3, r3, #12
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80138ea:	7cbb      	ldrb	r3, [r7, #18]
 80138ec:	2b13      	cmp	r3, #19
 80138ee:	f240 83b1 	bls.w	8014054 <tcp_input+0x7d8>
 80138f2:	7cbb      	ldrb	r3, [r7, #18]
 80138f4:	b29a      	uxth	r2, r3
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	891b      	ldrh	r3, [r3, #8]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	f200 83aa 	bhi.w	8014054 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013900:	7cbb      	ldrb	r3, [r7, #18]
 8013902:	b29b      	uxth	r3, r3
 8013904:	3b14      	subs	r3, #20
 8013906:	b29a      	uxth	r2, r3
 8013908:	4b81      	ldr	r3, [pc, #516]	@ (8013b10 <tcp_input+0x294>)
 801390a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801390c:	4b81      	ldr	r3, [pc, #516]	@ (8013b14 <tcp_input+0x298>)
 801390e:	2200      	movs	r2, #0
 8013910:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	895a      	ldrh	r2, [r3, #10]
 8013916:	7cbb      	ldrb	r3, [r7, #18]
 8013918:	b29b      	uxth	r3, r3
 801391a:	429a      	cmp	r2, r3
 801391c:	d309      	bcc.n	8013932 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801391e:	4b7c      	ldr	r3, [pc, #496]	@ (8013b10 <tcp_input+0x294>)
 8013920:	881a      	ldrh	r2, [r3, #0]
 8013922:	4b7d      	ldr	r3, [pc, #500]	@ (8013b18 <tcp_input+0x29c>)
 8013924:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013926:	7cbb      	ldrb	r3, [r7, #18]
 8013928:	4619      	mov	r1, r3
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7fd ffea 	bl	8011904 <pbuf_remove_header>
 8013930:	e04e      	b.n	80139d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d105      	bne.n	8013946 <tcp_input+0xca>
 801393a:	4b70      	ldr	r3, [pc, #448]	@ (8013afc <tcp_input+0x280>)
 801393c:	22c2      	movs	r2, #194	@ 0xc2
 801393e:	4977      	ldr	r1, [pc, #476]	@ (8013b1c <tcp_input+0x2a0>)
 8013940:	4870      	ldr	r0, [pc, #448]	@ (8013b04 <tcp_input+0x288>)
 8013942:	f007 f937 	bl	801abb4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013946:	2114      	movs	r1, #20
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f7fd ffdb 	bl	8011904 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	895a      	ldrh	r2, [r3, #10]
 8013952:	4b71      	ldr	r3, [pc, #452]	@ (8013b18 <tcp_input+0x29c>)
 8013954:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013956:	4b6e      	ldr	r3, [pc, #440]	@ (8013b10 <tcp_input+0x294>)
 8013958:	881a      	ldrh	r2, [r3, #0]
 801395a:	4b6f      	ldr	r3, [pc, #444]	@ (8013b18 <tcp_input+0x29c>)
 801395c:	881b      	ldrh	r3, [r3, #0]
 801395e:	1ad3      	subs	r3, r2, r3
 8013960:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013962:	4b6d      	ldr	r3, [pc, #436]	@ (8013b18 <tcp_input+0x29c>)
 8013964:	881b      	ldrh	r3, [r3, #0]
 8013966:	4619      	mov	r1, r3
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f7fd ffcb 	bl	8011904 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	895b      	ldrh	r3, [r3, #10]
 8013974:	8a3a      	ldrh	r2, [r7, #16]
 8013976:	429a      	cmp	r2, r3
 8013978:	f200 836e 	bhi.w	8014058 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	685b      	ldr	r3, [r3, #4]
 8013982:	4a64      	ldr	r2, [pc, #400]	@ (8013b14 <tcp_input+0x298>)
 8013984:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	8a3a      	ldrh	r2, [r7, #16]
 801398c:	4611      	mov	r1, r2
 801398e:	4618      	mov	r0, r3
 8013990:	f7fd ffb8 	bl	8011904 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	891a      	ldrh	r2, [r3, #8]
 8013998:	8a3b      	ldrh	r3, [r7, #16]
 801399a:	1ad3      	subs	r3, r2, r3
 801399c:	b29a      	uxth	r2, r3
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	895b      	ldrh	r3, [r3, #10]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d005      	beq.n	80139b6 <tcp_input+0x13a>
 80139aa:	4b54      	ldr	r3, [pc, #336]	@ (8013afc <tcp_input+0x280>)
 80139ac:	22df      	movs	r2, #223	@ 0xdf
 80139ae:	495c      	ldr	r1, [pc, #368]	@ (8013b20 <tcp_input+0x2a4>)
 80139b0:	4854      	ldr	r0, [pc, #336]	@ (8013b04 <tcp_input+0x288>)
 80139b2:	f007 f8ff 	bl	801abb4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	891a      	ldrh	r2, [r3, #8]
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	891b      	ldrh	r3, [r3, #8]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d005      	beq.n	80139d0 <tcp_input+0x154>
 80139c4:	4b4d      	ldr	r3, [pc, #308]	@ (8013afc <tcp_input+0x280>)
 80139c6:	22e0      	movs	r2, #224	@ 0xe0
 80139c8:	4956      	ldr	r1, [pc, #344]	@ (8013b24 <tcp_input+0x2a8>)
 80139ca:	484e      	ldr	r0, [pc, #312]	@ (8013b04 <tcp_input+0x288>)
 80139cc:	f007 f8f2 	bl	801abb4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80139d0:	4b4d      	ldr	r3, [pc, #308]	@ (8013b08 <tcp_input+0x28c>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	881b      	ldrh	r3, [r3, #0]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	4a4b      	ldr	r2, [pc, #300]	@ (8013b08 <tcp_input+0x28c>)
 80139da:	6814      	ldr	r4, [r2, #0]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fc fb65 	bl	80100ac <lwip_htons>
 80139e2:	4603      	mov	r3, r0
 80139e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80139e6:	4b48      	ldr	r3, [pc, #288]	@ (8013b08 <tcp_input+0x28c>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	885b      	ldrh	r3, [r3, #2]
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	4a46      	ldr	r2, [pc, #280]	@ (8013b08 <tcp_input+0x28c>)
 80139f0:	6814      	ldr	r4, [r2, #0]
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fc fb5a 	bl	80100ac <lwip_htons>
 80139f8:	4603      	mov	r3, r0
 80139fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80139fc:	4b42      	ldr	r3, [pc, #264]	@ (8013b08 <tcp_input+0x28c>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	4a41      	ldr	r2, [pc, #260]	@ (8013b08 <tcp_input+0x28c>)
 8013a04:	6814      	ldr	r4, [r2, #0]
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fc fb66 	bl	80100d8 <lwip_htonl>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	6063      	str	r3, [r4, #4]
 8013a10:	6863      	ldr	r3, [r4, #4]
 8013a12:	4a45      	ldr	r2, [pc, #276]	@ (8013b28 <tcp_input+0x2ac>)
 8013a14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013a16:	4b3c      	ldr	r3, [pc, #240]	@ (8013b08 <tcp_input+0x28c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	689b      	ldr	r3, [r3, #8]
 8013a1c:	4a3a      	ldr	r2, [pc, #232]	@ (8013b08 <tcp_input+0x28c>)
 8013a1e:	6814      	ldr	r4, [r2, #0]
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7fc fb59 	bl	80100d8 <lwip_htonl>
 8013a26:	4603      	mov	r3, r0
 8013a28:	60a3      	str	r3, [r4, #8]
 8013a2a:	68a3      	ldr	r3, [r4, #8]
 8013a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8013b2c <tcp_input+0x2b0>)
 8013a2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013a30:	4b35      	ldr	r3, [pc, #212]	@ (8013b08 <tcp_input+0x28c>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	89db      	ldrh	r3, [r3, #14]
 8013a36:	b29b      	uxth	r3, r3
 8013a38:	4a33      	ldr	r2, [pc, #204]	@ (8013b08 <tcp_input+0x28c>)
 8013a3a:	6814      	ldr	r4, [r2, #0]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7fc fb35 	bl	80100ac <lwip_htons>
 8013a42:	4603      	mov	r3, r0
 8013a44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013a46:	4b30      	ldr	r3, [pc, #192]	@ (8013b08 <tcp_input+0x28c>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	899b      	ldrh	r3, [r3, #12]
 8013a4c:	b29b      	uxth	r3, r3
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7fc fb2c 	bl	80100ac <lwip_htons>
 8013a54:	4603      	mov	r3, r0
 8013a56:	b2db      	uxtb	r3, r3
 8013a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a5c:	b2da      	uxtb	r2, r3
 8013a5e:	4b34      	ldr	r3, [pc, #208]	@ (8013b30 <tcp_input+0x2b4>)
 8013a60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	891a      	ldrh	r2, [r3, #8]
 8013a66:	4b33      	ldr	r3, [pc, #204]	@ (8013b34 <tcp_input+0x2b8>)
 8013a68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013a6a:	4b31      	ldr	r3, [pc, #196]	@ (8013b30 <tcp_input+0x2b4>)
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	f003 0303 	and.w	r3, r3, #3
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d00c      	beq.n	8013a90 <tcp_input+0x214>
    tcplen++;
 8013a76:	4b2f      	ldr	r3, [pc, #188]	@ (8013b34 <tcp_input+0x2b8>)
 8013a78:	881b      	ldrh	r3, [r3, #0]
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	b29a      	uxth	r2, r3
 8013a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8013b34 <tcp_input+0x2b8>)
 8013a80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	891a      	ldrh	r2, [r3, #8]
 8013a86:	4b2b      	ldr	r3, [pc, #172]	@ (8013b34 <tcp_input+0x2b8>)
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	f200 82e6 	bhi.w	801405c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013a90:	2300      	movs	r3, #0
 8013a92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a94:	4b28      	ldr	r3, [pc, #160]	@ (8013b38 <tcp_input+0x2bc>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	61fb      	str	r3, [r7, #28]
 8013a9a:	e09d      	b.n	8013bd8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	7d1b      	ldrb	r3, [r3, #20]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d105      	bne.n	8013ab0 <tcp_input+0x234>
 8013aa4:	4b15      	ldr	r3, [pc, #84]	@ (8013afc <tcp_input+0x280>)
 8013aa6:	22fb      	movs	r2, #251	@ 0xfb
 8013aa8:	4924      	ldr	r1, [pc, #144]	@ (8013b3c <tcp_input+0x2c0>)
 8013aaa:	4816      	ldr	r0, [pc, #88]	@ (8013b04 <tcp_input+0x288>)
 8013aac:	f007 f882 	bl	801abb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	7d1b      	ldrb	r3, [r3, #20]
 8013ab4:	2b0a      	cmp	r3, #10
 8013ab6:	d105      	bne.n	8013ac4 <tcp_input+0x248>
 8013ab8:	4b10      	ldr	r3, [pc, #64]	@ (8013afc <tcp_input+0x280>)
 8013aba:	22fc      	movs	r2, #252	@ 0xfc
 8013abc:	4920      	ldr	r1, [pc, #128]	@ (8013b40 <tcp_input+0x2c4>)
 8013abe:	4811      	ldr	r0, [pc, #68]	@ (8013b04 <tcp_input+0x288>)
 8013ac0:	f007 f878 	bl	801abb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	7d1b      	ldrb	r3, [r3, #20]
 8013ac8:	2b01      	cmp	r3, #1
 8013aca:	d105      	bne.n	8013ad8 <tcp_input+0x25c>
 8013acc:	4b0b      	ldr	r3, [pc, #44]	@ (8013afc <tcp_input+0x280>)
 8013ace:	22fd      	movs	r2, #253	@ 0xfd
 8013ad0:	491c      	ldr	r1, [pc, #112]	@ (8013b44 <tcp_input+0x2c8>)
 8013ad2:	480c      	ldr	r0, [pc, #48]	@ (8013b04 <tcp_input+0x288>)
 8013ad4:	f007 f86e 	bl	801abb4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ad8:	69fb      	ldr	r3, [r7, #28]
 8013ada:	7a1b      	ldrb	r3, [r3, #8]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d033      	beq.n	8013b48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ae0:	69fb      	ldr	r3, [r7, #28]
 8013ae2:	7a1a      	ldrb	r2, [r3, #8]
 8013ae4:	4b09      	ldr	r3, [pc, #36]	@ (8013b0c <tcp_input+0x290>)
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013aec:	3301      	adds	r3, #1
 8013aee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d029      	beq.n	8013b48 <tcp_input+0x2cc>
      prev = pcb;
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	61bb      	str	r3, [r7, #24]
      continue;
 8013af8:	e06b      	b.n	8013bd2 <tcp_input+0x356>
 8013afa:	bf00      	nop
 8013afc:	0801ced8 	.word	0x0801ced8
 8013b00:	0801cf0c 	.word	0x0801cf0c
 8013b04:	0801cf24 	.word	0x0801cf24
 8013b08:	24014bd4 	.word	0x24014bd4
 8013b0c:	2400e070 	.word	0x2400e070
 8013b10:	24014bd8 	.word	0x24014bd8
 8013b14:	24014bdc 	.word	0x24014bdc
 8013b18:	24014bda 	.word	0x24014bda
 8013b1c:	0801cf4c 	.word	0x0801cf4c
 8013b20:	0801cf5c 	.word	0x0801cf5c
 8013b24:	0801cf68 	.word	0x0801cf68
 8013b28:	24014be4 	.word	0x24014be4
 8013b2c:	24014be8 	.word	0x24014be8
 8013b30:	24014bf0 	.word	0x24014bf0
 8013b34:	24014bee 	.word	0x24014bee
 8013b38:	24014bb8 	.word	0x24014bb8
 8013b3c:	0801cf88 	.word	0x0801cf88
 8013b40:	0801cfb0 	.word	0x0801cfb0
 8013b44:	0801cfdc 	.word	0x0801cfdc
    }

    if (pcb->remote_port == tcphdr->src &&
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	8b1a      	ldrh	r2, [r3, #24]
 8013b4c:	4b72      	ldr	r3, [pc, #456]	@ (8013d18 <tcp_input+0x49c>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	881b      	ldrh	r3, [r3, #0]
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d13a      	bne.n	8013bce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	8ada      	ldrh	r2, [r3, #22]
 8013b5c:	4b6e      	ldr	r3, [pc, #440]	@ (8013d18 <tcp_input+0x49c>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	885b      	ldrh	r3, [r3, #2]
 8013b62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d132      	bne.n	8013bce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	685a      	ldr	r2, [r3, #4]
 8013b6c:	4b6b      	ldr	r3, [pc, #428]	@ (8013d1c <tcp_input+0x4a0>)
 8013b6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d12c      	bne.n	8013bce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013b74:	69fb      	ldr	r3, [r7, #28]
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	4b68      	ldr	r3, [pc, #416]	@ (8013d1c <tcp_input+0x4a0>)
 8013b7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d126      	bne.n	8013bce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	69fa      	ldr	r2, [r7, #28]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d106      	bne.n	8013b98 <tcp_input+0x31c>
 8013b8a:	4b65      	ldr	r3, [pc, #404]	@ (8013d20 <tcp_input+0x4a4>)
 8013b8c:	f240 120d 	movw	r2, #269	@ 0x10d
 8013b90:	4964      	ldr	r1, [pc, #400]	@ (8013d24 <tcp_input+0x4a8>)
 8013b92:	4865      	ldr	r0, [pc, #404]	@ (8013d28 <tcp_input+0x4ac>)
 8013b94:	f007 f80e 	bl	801abb4 <iprintf>
      if (prev != NULL) {
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d00a      	beq.n	8013bb4 <tcp_input+0x338>
        prev->next = pcb->next;
 8013b9e:	69fb      	ldr	r3, [r7, #28]
 8013ba0:	68da      	ldr	r2, [r3, #12]
 8013ba2:	69bb      	ldr	r3, [r7, #24]
 8013ba4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013ba6:	4b61      	ldr	r3, [pc, #388]	@ (8013d2c <tcp_input+0x4b0>)
 8013ba8:	681a      	ldr	r2, [r3, #0]
 8013baa:	69fb      	ldr	r3, [r7, #28]
 8013bac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013bae:	4a5f      	ldr	r2, [pc, #380]	@ (8013d2c <tcp_input+0x4b0>)
 8013bb0:	69fb      	ldr	r3, [r7, #28]
 8013bb2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013bb4:	69fb      	ldr	r3, [r7, #28]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	69fa      	ldr	r2, [r7, #28]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d111      	bne.n	8013be2 <tcp_input+0x366>
 8013bbe:	4b58      	ldr	r3, [pc, #352]	@ (8013d20 <tcp_input+0x4a4>)
 8013bc0:	f240 1215 	movw	r2, #277	@ 0x115
 8013bc4:	495a      	ldr	r1, [pc, #360]	@ (8013d30 <tcp_input+0x4b4>)
 8013bc6:	4858      	ldr	r0, [pc, #352]	@ (8013d28 <tcp_input+0x4ac>)
 8013bc8:	f006 fff4 	bl	801abb4 <iprintf>
      break;
 8013bcc:	e009      	b.n	8013be2 <tcp_input+0x366>
    }
    prev = pcb;
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bd2:	69fb      	ldr	r3, [r7, #28]
 8013bd4:	68db      	ldr	r3, [r3, #12]
 8013bd6:	61fb      	str	r3, [r7, #28]
 8013bd8:	69fb      	ldr	r3, [r7, #28]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f47f af5e 	bne.w	8013a9c <tcp_input+0x220>
 8013be0:	e000      	b.n	8013be4 <tcp_input+0x368>
      break;
 8013be2:	bf00      	nop
  }

  if (pcb == NULL) {
 8013be4:	69fb      	ldr	r3, [r7, #28]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	f040 80aa 	bne.w	8013d40 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bec:	4b51      	ldr	r3, [pc, #324]	@ (8013d34 <tcp_input+0x4b8>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	61fb      	str	r3, [r7, #28]
 8013bf2:	e03f      	b.n	8013c74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	7d1b      	ldrb	r3, [r3, #20]
 8013bf8:	2b0a      	cmp	r3, #10
 8013bfa:	d006      	beq.n	8013c0a <tcp_input+0x38e>
 8013bfc:	4b48      	ldr	r3, [pc, #288]	@ (8013d20 <tcp_input+0x4a4>)
 8013bfe:	f240 121f 	movw	r2, #287	@ 0x11f
 8013c02:	494d      	ldr	r1, [pc, #308]	@ (8013d38 <tcp_input+0x4bc>)
 8013c04:	4848      	ldr	r0, [pc, #288]	@ (8013d28 <tcp_input+0x4ac>)
 8013c06:	f006 ffd5 	bl	801abb4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c0a:	69fb      	ldr	r3, [r7, #28]
 8013c0c:	7a1b      	ldrb	r3, [r3, #8]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d009      	beq.n	8013c26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c12:	69fb      	ldr	r3, [r7, #28]
 8013c14:	7a1a      	ldrb	r2, [r3, #8]
 8013c16:	4b41      	ldr	r3, [pc, #260]	@ (8013d1c <tcp_input+0x4a0>)
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c1e:	3301      	adds	r3, #1
 8013c20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d122      	bne.n	8013c6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013c26:	69fb      	ldr	r3, [r7, #28]
 8013c28:	8b1a      	ldrh	r2, [r3, #24]
 8013c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8013d18 <tcp_input+0x49c>)
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	881b      	ldrh	r3, [r3, #0]
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d11b      	bne.n	8013c6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	8ada      	ldrh	r2, [r3, #22]
 8013c3a:	4b37      	ldr	r3, [pc, #220]	@ (8013d18 <tcp_input+0x49c>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	885b      	ldrh	r3, [r3, #2]
 8013c40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d113      	bne.n	8013c6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013c46:	69fb      	ldr	r3, [r7, #28]
 8013c48:	685a      	ldr	r2, [r3, #4]
 8013c4a:	4b34      	ldr	r3, [pc, #208]	@ (8013d1c <tcp_input+0x4a0>)
 8013c4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d10d      	bne.n	8013c6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013c52:	69fb      	ldr	r3, [r7, #28]
 8013c54:	681a      	ldr	r2, [r3, #0]
 8013c56:	4b31      	ldr	r3, [pc, #196]	@ (8013d1c <tcp_input+0x4a0>)
 8013c58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d107      	bne.n	8013c6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013c5e:	69f8      	ldr	r0, [r7, #28]
 8013c60:	f000 fb56 	bl	8014310 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f7fd fed3 	bl	8011a10 <pbuf_free>
        return;
 8013c6a:	e1fd      	b.n	8014068 <tcp_input+0x7ec>
        continue;
 8013c6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c6e:	69fb      	ldr	r3, [r7, #28]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	61fb      	str	r3, [r7, #28]
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1bc      	bne.n	8013bf4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8013d3c <tcp_input+0x4c0>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	617b      	str	r3, [r7, #20]
 8013c84:	e02a      	b.n	8013cdc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	7a1b      	ldrb	r3, [r3, #8]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d00c      	beq.n	8013ca8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	7a1a      	ldrb	r2, [r3, #8]
 8013c92:	4b22      	ldr	r3, [pc, #136]	@ (8013d1c <tcp_input+0x4a0>)
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d002      	beq.n	8013ca8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	61bb      	str	r3, [r7, #24]
        continue;
 8013ca6:	e016      	b.n	8013cd6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	8ada      	ldrh	r2, [r3, #22]
 8013cac:	4b1a      	ldr	r3, [pc, #104]	@ (8013d18 <tcp_input+0x49c>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	885b      	ldrh	r3, [r3, #2]
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d10c      	bne.n	8013cd2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	4b17      	ldr	r3, [pc, #92]	@ (8013d1c <tcp_input+0x4a0>)
 8013cbe:	695b      	ldr	r3, [r3, #20]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d00f      	beq.n	8013ce4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d00d      	beq.n	8013ce6 <tcp_input+0x46a>
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d009      	beq.n	8013ce6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	68db      	ldr	r3, [r3, #12]
 8013cda:	617b      	str	r3, [r7, #20]
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d1d1      	bne.n	8013c86 <tcp_input+0x40a>
 8013ce2:	e000      	b.n	8013ce6 <tcp_input+0x46a>
            break;
 8013ce4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d029      	beq.n	8013d40 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013cec:	69bb      	ldr	r3, [r7, #24]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00a      	beq.n	8013d08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	68da      	ldr	r2, [r3, #12]
 8013cf6:	69bb      	ldr	r3, [r7, #24]
 8013cf8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013cfa:	4b10      	ldr	r3, [pc, #64]	@ (8013d3c <tcp_input+0x4c0>)
 8013cfc:	681a      	ldr	r2, [r3, #0]
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013d02:	4a0e      	ldr	r2, [pc, #56]	@ (8013d3c <tcp_input+0x4c0>)
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013d08:	6978      	ldr	r0, [r7, #20]
 8013d0a:	f000 fa03 	bl	8014114 <tcp_listen_input>
      }
      pbuf_free(p);
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7fd fe7e 	bl	8011a10 <pbuf_free>
      return;
 8013d14:	e1a8      	b.n	8014068 <tcp_input+0x7ec>
 8013d16:	bf00      	nop
 8013d18:	24014bd4 	.word	0x24014bd4
 8013d1c:	2400e070 	.word	0x2400e070
 8013d20:	0801ced8 	.word	0x0801ced8
 8013d24:	0801d004 	.word	0x0801d004
 8013d28:	0801cf24 	.word	0x0801cf24
 8013d2c:	24014bb8 	.word	0x24014bb8
 8013d30:	0801d030 	.word	0x0801d030
 8013d34:	24014bbc 	.word	0x24014bbc
 8013d38:	0801d05c 	.word	0x0801d05c
 8013d3c:	24014bb4 	.word	0x24014bb4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013d40:	69fb      	ldr	r3, [r7, #28]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	f000 8158 	beq.w	8013ff8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013d48:	4b95      	ldr	r3, [pc, #596]	@ (8013fa0 <tcp_input+0x724>)
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	891a      	ldrh	r2, [r3, #8]
 8013d52:	4b93      	ldr	r3, [pc, #588]	@ (8013fa0 <tcp_input+0x724>)
 8013d54:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013d56:	4a92      	ldr	r2, [pc, #584]	@ (8013fa0 <tcp_input+0x724>)
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013d5c:	4b91      	ldr	r3, [pc, #580]	@ (8013fa4 <tcp_input+0x728>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	4a8f      	ldr	r2, [pc, #572]	@ (8013fa0 <tcp_input+0x724>)
 8013d62:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013d64:	4b90      	ldr	r3, [pc, #576]	@ (8013fa8 <tcp_input+0x72c>)
 8013d66:	2200      	movs	r2, #0
 8013d68:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013d6a:	4b90      	ldr	r3, [pc, #576]	@ (8013fac <tcp_input+0x730>)
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013d70:	4b8f      	ldr	r3, [pc, #572]	@ (8013fb0 <tcp_input+0x734>)
 8013d72:	2200      	movs	r2, #0
 8013d74:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013d76:	4b8f      	ldr	r3, [pc, #572]	@ (8013fb4 <tcp_input+0x738>)
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	f003 0308 	and.w	r3, r3, #8
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d006      	beq.n	8013d90 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	7b5b      	ldrb	r3, [r3, #13]
 8013d86:	f043 0301 	orr.w	r3, r3, #1
 8013d8a:	b2da      	uxtb	r2, r3
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d017      	beq.n	8013dc8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013d98:	69f8      	ldr	r0, [r7, #28]
 8013d9a:	f7ff f927 	bl	8012fec <tcp_process_refused_data>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	f113 0f0d 	cmn.w	r3, #13
 8013da4:	d007      	beq.n	8013db6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013da6:	69fb      	ldr	r3, [r7, #28]
 8013da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d00c      	beq.n	8013dc8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013dae:	4b82      	ldr	r3, [pc, #520]	@ (8013fb8 <tcp_input+0x73c>)
 8013db0:	881b      	ldrh	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d008      	beq.n	8013dc8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013db6:	69fb      	ldr	r3, [r7, #28]
 8013db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	f040 80e4 	bne.w	8013f88 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013dc0:	69f8      	ldr	r0, [r7, #28]
 8013dc2:	f003 f9a9 	bl	8017118 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013dc6:	e0df      	b.n	8013f88 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013dc8:	4a7c      	ldr	r2, [pc, #496]	@ (8013fbc <tcp_input+0x740>)
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013dce:	69f8      	ldr	r0, [r7, #28]
 8013dd0:	f000 fb18 	bl	8014404 <tcp_process>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013dd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ddc:	f113 0f0d 	cmn.w	r3, #13
 8013de0:	f000 80d4 	beq.w	8013f8c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013de4:	4b71      	ldr	r3, [pc, #452]	@ (8013fac <tcp_input+0x730>)
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	f003 0308 	and.w	r3, r3, #8
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d015      	beq.n	8013e1c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013df0:	69fb      	ldr	r3, [r7, #28]
 8013df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d008      	beq.n	8013e0c <tcp_input+0x590>
 8013dfa:	69fb      	ldr	r3, [r7, #28]
 8013dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013e00:	69fa      	ldr	r2, [r7, #28]
 8013e02:	6912      	ldr	r2, [r2, #16]
 8013e04:	f06f 010d 	mvn.w	r1, #13
 8013e08:	4610      	mov	r0, r2
 8013e0a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013e0c:	69f9      	ldr	r1, [r7, #28]
 8013e0e:	486c      	ldr	r0, [pc, #432]	@ (8013fc0 <tcp_input+0x744>)
 8013e10:	f7ff fbbc 	bl	801358c <tcp_pcb_remove>
        tcp_free(pcb);
 8013e14:	69f8      	ldr	r0, [r7, #28]
 8013e16:	f7fe f9a3 	bl	8012160 <tcp_free>
 8013e1a:	e0da      	b.n	8013fd2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013e20:	4b63      	ldr	r3, [pc, #396]	@ (8013fb0 <tcp_input+0x734>)
 8013e22:	881b      	ldrh	r3, [r3, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d01d      	beq.n	8013e64 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013e28:	4b61      	ldr	r3, [pc, #388]	@ (8013fb0 <tcp_input+0x734>)
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013e2e:	69fb      	ldr	r3, [r7, #28]
 8013e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d00a      	beq.n	8013e4e <tcp_input+0x5d2>
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e3e:	69fa      	ldr	r2, [r7, #28]
 8013e40:	6910      	ldr	r0, [r2, #16]
 8013e42:	89fa      	ldrh	r2, [r7, #14]
 8013e44:	69f9      	ldr	r1, [r7, #28]
 8013e46:	4798      	blx	r3
 8013e48:	4603      	mov	r3, r0
 8013e4a:	74fb      	strb	r3, [r7, #19]
 8013e4c:	e001      	b.n	8013e52 <tcp_input+0x5d6>
 8013e4e:	2300      	movs	r3, #0
 8013e50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013e52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013e56:	f113 0f0d 	cmn.w	r3, #13
 8013e5a:	f000 8099 	beq.w	8013f90 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013e5e:	4b54      	ldr	r3, [pc, #336]	@ (8013fb0 <tcp_input+0x734>)
 8013e60:	2200      	movs	r2, #0
 8013e62:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013e64:	69f8      	ldr	r0, [r7, #28]
 8013e66:	f000 f915 	bl	8014094 <tcp_input_delayed_close>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	f040 8091 	bne.w	8013f94 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013e72:	4b4d      	ldr	r3, [pc, #308]	@ (8013fa8 <tcp_input+0x72c>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d041      	beq.n	8013efe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013e7a:	69fb      	ldr	r3, [r7, #28]
 8013e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d006      	beq.n	8013e90 <tcp_input+0x614>
 8013e82:	4b50      	ldr	r3, [pc, #320]	@ (8013fc4 <tcp_input+0x748>)
 8013e84:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013e88:	494f      	ldr	r1, [pc, #316]	@ (8013fc8 <tcp_input+0x74c>)
 8013e8a:	4850      	ldr	r0, [pc, #320]	@ (8013fcc <tcp_input+0x750>)
 8013e8c:	f006 fe92 	bl	801abb4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013e90:	69fb      	ldr	r3, [r7, #28]
 8013e92:	8b5b      	ldrh	r3, [r3, #26]
 8013e94:	f003 0310 	and.w	r3, r3, #16
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d008      	beq.n	8013eae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013e9c:	4b42      	ldr	r3, [pc, #264]	@ (8013fa8 <tcp_input+0x72c>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7fd fdb5 	bl	8011a10 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013ea6:	69f8      	ldr	r0, [r7, #28]
 8013ea8:	f7fe fc42 	bl	8012730 <tcp_abort>
            goto aborted;
 8013eac:	e091      	b.n	8013fd2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013eae:	69fb      	ldr	r3, [r7, #28]
 8013eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d00c      	beq.n	8013ed2 <tcp_input+0x656>
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013ebe:	69fb      	ldr	r3, [r7, #28]
 8013ec0:	6918      	ldr	r0, [r3, #16]
 8013ec2:	4b39      	ldr	r3, [pc, #228]	@ (8013fa8 <tcp_input+0x72c>)
 8013ec4:	681a      	ldr	r2, [r3, #0]
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	69f9      	ldr	r1, [r7, #28]
 8013eca:	47a0      	blx	r4
 8013ecc:	4603      	mov	r3, r0
 8013ece:	74fb      	strb	r3, [r7, #19]
 8013ed0:	e008      	b.n	8013ee4 <tcp_input+0x668>
 8013ed2:	4b35      	ldr	r3, [pc, #212]	@ (8013fa8 <tcp_input+0x72c>)
 8013ed4:	681a      	ldr	r2, [r3, #0]
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	69f9      	ldr	r1, [r7, #28]
 8013eda:	2000      	movs	r0, #0
 8013edc:	f7ff f95e 	bl	801319c <tcp_recv_null>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013ee4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ee8:	f113 0f0d 	cmn.w	r3, #13
 8013eec:	d054      	beq.n	8013f98 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013eee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d003      	beq.n	8013efe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8013fa8 <tcp_input+0x72c>)
 8013ef8:	681a      	ldr	r2, [r3, #0]
 8013efa:	69fb      	ldr	r3, [r7, #28]
 8013efc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013efe:	4b2b      	ldr	r3, [pc, #172]	@ (8013fac <tcp_input+0x730>)
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	f003 0320 	and.w	r3, r3, #32
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d031      	beq.n	8013f6e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013f0a:	69fb      	ldr	r3, [r7, #28]
 8013f0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d009      	beq.n	8013f26 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013f16:	7b5a      	ldrb	r2, [r3, #13]
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013f1c:	f042 0220 	orr.w	r2, r2, #32
 8013f20:	b2d2      	uxtb	r2, r2
 8013f22:	735a      	strb	r2, [r3, #13]
 8013f24:	e023      	b.n	8013f6e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f2a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	d005      	beq.n	8013f3e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f36:	3301      	adds	r3, #1
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	69fb      	ldr	r3, [r7, #28]
 8013f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d00b      	beq.n	8013f60 <tcp_input+0x6e4>
 8013f48:	69fb      	ldr	r3, [r7, #28]
 8013f4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013f4e:	69fb      	ldr	r3, [r7, #28]
 8013f50:	6918      	ldr	r0, [r3, #16]
 8013f52:	2300      	movs	r3, #0
 8013f54:	2200      	movs	r2, #0
 8013f56:	69f9      	ldr	r1, [r7, #28]
 8013f58:	47a0      	blx	r4
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	74fb      	strb	r3, [r7, #19]
 8013f5e:	e001      	b.n	8013f64 <tcp_input+0x6e8>
 8013f60:	2300      	movs	r3, #0
 8013f62:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013f64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f68:	f113 0f0d 	cmn.w	r3, #13
 8013f6c:	d016      	beq.n	8013f9c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013f6e:	4b13      	ldr	r3, [pc, #76]	@ (8013fbc <tcp_input+0x740>)
 8013f70:	2200      	movs	r2, #0
 8013f72:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013f74:	69f8      	ldr	r0, [r7, #28]
 8013f76:	f000 f88d 	bl	8014094 <tcp_input_delayed_close>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d127      	bne.n	8013fd0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013f80:	69f8      	ldr	r0, [r7, #28]
 8013f82:	f002 fac3 	bl	801650c <tcp_output>
 8013f86:	e024      	b.n	8013fd2 <tcp_input+0x756>
        goto aborted;
 8013f88:	bf00      	nop
 8013f8a:	e022      	b.n	8013fd2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013f8c:	bf00      	nop
 8013f8e:	e020      	b.n	8013fd2 <tcp_input+0x756>
              goto aborted;
 8013f90:	bf00      	nop
 8013f92:	e01e      	b.n	8013fd2 <tcp_input+0x756>
          goto aborted;
 8013f94:	bf00      	nop
 8013f96:	e01c      	b.n	8013fd2 <tcp_input+0x756>
            goto aborted;
 8013f98:	bf00      	nop
 8013f9a:	e01a      	b.n	8013fd2 <tcp_input+0x756>
              goto aborted;
 8013f9c:	bf00      	nop
 8013f9e:	e018      	b.n	8013fd2 <tcp_input+0x756>
 8013fa0:	24014bc4 	.word	0x24014bc4
 8013fa4:	24014bd4 	.word	0x24014bd4
 8013fa8:	24014bf4 	.word	0x24014bf4
 8013fac:	24014bf1 	.word	0x24014bf1
 8013fb0:	24014bec 	.word	0x24014bec
 8013fb4:	24014bf0 	.word	0x24014bf0
 8013fb8:	24014bee 	.word	0x24014bee
 8013fbc:	24014bf8 	.word	0x24014bf8
 8013fc0:	24014bb8 	.word	0x24014bb8
 8013fc4:	0801ced8 	.word	0x0801ced8
 8013fc8:	0801d08c 	.word	0x0801d08c
 8013fcc:	0801cf24 	.word	0x0801cf24
          goto aborted;
 8013fd0:	bf00      	nop
    tcp_input_pcb = NULL;
 8013fd2:	4b27      	ldr	r3, [pc, #156]	@ (8014070 <tcp_input+0x7f4>)
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013fd8:	4b26      	ldr	r3, [pc, #152]	@ (8014074 <tcp_input+0x7f8>)
 8013fda:	2200      	movs	r2, #0
 8013fdc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013fde:	4b26      	ldr	r3, [pc, #152]	@ (8014078 <tcp_input+0x7fc>)
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d03f      	beq.n	8014066 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013fe6:	4b24      	ldr	r3, [pc, #144]	@ (8014078 <tcp_input+0x7fc>)
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7fd fd10 	bl	8011a10 <pbuf_free>
      inseg.p = NULL;
 8013ff0:	4b21      	ldr	r3, [pc, #132]	@ (8014078 <tcp_input+0x7fc>)
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013ff6:	e036      	b.n	8014066 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013ff8:	4b20      	ldr	r3, [pc, #128]	@ (801407c <tcp_input+0x800>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	899b      	ldrh	r3, [r3, #12]
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	4618      	mov	r0, r3
 8014002:	f7fc f853 	bl	80100ac <lwip_htons>
 8014006:	4603      	mov	r3, r0
 8014008:	b2db      	uxtb	r3, r3
 801400a:	f003 0304 	and.w	r3, r3, #4
 801400e:	2b00      	cmp	r3, #0
 8014010:	d118      	bne.n	8014044 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014012:	4b1b      	ldr	r3, [pc, #108]	@ (8014080 <tcp_input+0x804>)
 8014014:	6819      	ldr	r1, [r3, #0]
 8014016:	4b1b      	ldr	r3, [pc, #108]	@ (8014084 <tcp_input+0x808>)
 8014018:	881b      	ldrh	r3, [r3, #0]
 801401a:	461a      	mov	r2, r3
 801401c:	4b1a      	ldr	r3, [pc, #104]	@ (8014088 <tcp_input+0x80c>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014022:	4b16      	ldr	r3, [pc, #88]	@ (801407c <tcp_input+0x800>)
 8014024:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014026:	885b      	ldrh	r3, [r3, #2]
 8014028:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801402a:	4a14      	ldr	r2, [pc, #80]	@ (801407c <tcp_input+0x800>)
 801402c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801402e:	8812      	ldrh	r2, [r2, #0]
 8014030:	b292      	uxth	r2, r2
 8014032:	9202      	str	r2, [sp, #8]
 8014034:	9301      	str	r3, [sp, #4]
 8014036:	4b15      	ldr	r3, [pc, #84]	@ (801408c <tcp_input+0x810>)
 8014038:	9300      	str	r3, [sp, #0]
 801403a:	4b15      	ldr	r3, [pc, #84]	@ (8014090 <tcp_input+0x814>)
 801403c:	4602      	mov	r2, r0
 801403e:	2000      	movs	r0, #0
 8014040:	f003 f818 	bl	8017074 <tcp_rst>
    pbuf_free(p);
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f7fd fce3 	bl	8011a10 <pbuf_free>
  return;
 801404a:	e00c      	b.n	8014066 <tcp_input+0x7ea>
    goto dropped;
 801404c:	bf00      	nop
 801404e:	e006      	b.n	801405e <tcp_input+0x7e2>
    goto dropped;
 8014050:	bf00      	nop
 8014052:	e004      	b.n	801405e <tcp_input+0x7e2>
    goto dropped;
 8014054:	bf00      	nop
 8014056:	e002      	b.n	801405e <tcp_input+0x7e2>
      goto dropped;
 8014058:	bf00      	nop
 801405a:	e000      	b.n	801405e <tcp_input+0x7e2>
      goto dropped;
 801405c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f7fd fcd6 	bl	8011a10 <pbuf_free>
 8014064:	e000      	b.n	8014068 <tcp_input+0x7ec>
  return;
 8014066:	bf00      	nop
}
 8014068:	3724      	adds	r7, #36	@ 0x24
 801406a:	46bd      	mov	sp, r7
 801406c:	bd90      	pop	{r4, r7, pc}
 801406e:	bf00      	nop
 8014070:	24014bf8 	.word	0x24014bf8
 8014074:	24014bf4 	.word	0x24014bf4
 8014078:	24014bc4 	.word	0x24014bc4
 801407c:	24014bd4 	.word	0x24014bd4
 8014080:	24014be8 	.word	0x24014be8
 8014084:	24014bee 	.word	0x24014bee
 8014088:	24014be4 	.word	0x24014be4
 801408c:	2400e080 	.word	0x2400e080
 8014090:	2400e084 	.word	0x2400e084

08014094 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d106      	bne.n	80140b0 <tcp_input_delayed_close+0x1c>
 80140a2:	4b17      	ldr	r3, [pc, #92]	@ (8014100 <tcp_input_delayed_close+0x6c>)
 80140a4:	f240 225a 	movw	r2, #602	@ 0x25a
 80140a8:	4916      	ldr	r1, [pc, #88]	@ (8014104 <tcp_input_delayed_close+0x70>)
 80140aa:	4817      	ldr	r0, [pc, #92]	@ (8014108 <tcp_input_delayed_close+0x74>)
 80140ac:	f006 fd82 	bl	801abb4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80140b0:	4b16      	ldr	r3, [pc, #88]	@ (801410c <tcp_input_delayed_close+0x78>)
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	f003 0310 	and.w	r3, r3, #16
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d01c      	beq.n	80140f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	8b5b      	ldrh	r3, [r3, #26]
 80140c0:	f003 0310 	and.w	r3, r3, #16
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d10d      	bne.n	80140e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d008      	beq.n	80140e4 <tcp_input_delayed_close+0x50>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	6912      	ldr	r2, [r2, #16]
 80140dc:	f06f 010e 	mvn.w	r1, #14
 80140e0:	4610      	mov	r0, r2
 80140e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80140e4:	6879      	ldr	r1, [r7, #4]
 80140e6:	480a      	ldr	r0, [pc, #40]	@ (8014110 <tcp_input_delayed_close+0x7c>)
 80140e8:	f7ff fa50 	bl	801358c <tcp_pcb_remove>
    tcp_free(pcb);
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f7fe f837 	bl	8012160 <tcp_free>
    return 1;
 80140f2:	2301      	movs	r3, #1
 80140f4:	e000      	b.n	80140f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80140f6:	2300      	movs	r3, #0
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3708      	adds	r7, #8
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	0801ced8 	.word	0x0801ced8
 8014104:	0801d0a8 	.word	0x0801d0a8
 8014108:	0801cf24 	.word	0x0801cf24
 801410c:	24014bf1 	.word	0x24014bf1
 8014110:	24014bb8 	.word	0x24014bb8

08014114 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014114:	b590      	push	{r4, r7, lr}
 8014116:	b08b      	sub	sp, #44	@ 0x2c
 8014118:	af04      	add	r7, sp, #16
 801411a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801411c:	4b6f      	ldr	r3, [pc, #444]	@ (80142dc <tcp_listen_input+0x1c8>)
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	f003 0304 	and.w	r3, r3, #4
 8014124:	2b00      	cmp	r3, #0
 8014126:	f040 80d2 	bne.w	80142ce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d106      	bne.n	801413e <tcp_listen_input+0x2a>
 8014130:	4b6b      	ldr	r3, [pc, #428]	@ (80142e0 <tcp_listen_input+0x1cc>)
 8014132:	f240 2281 	movw	r2, #641	@ 0x281
 8014136:	496b      	ldr	r1, [pc, #428]	@ (80142e4 <tcp_listen_input+0x1d0>)
 8014138:	486b      	ldr	r0, [pc, #428]	@ (80142e8 <tcp_listen_input+0x1d4>)
 801413a:	f006 fd3b 	bl	801abb4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801413e:	4b67      	ldr	r3, [pc, #412]	@ (80142dc <tcp_listen_input+0x1c8>)
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	f003 0310 	and.w	r3, r3, #16
 8014146:	2b00      	cmp	r3, #0
 8014148:	d019      	beq.n	801417e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801414a:	4b68      	ldr	r3, [pc, #416]	@ (80142ec <tcp_listen_input+0x1d8>)
 801414c:	6819      	ldr	r1, [r3, #0]
 801414e:	4b68      	ldr	r3, [pc, #416]	@ (80142f0 <tcp_listen_input+0x1dc>)
 8014150:	881b      	ldrh	r3, [r3, #0]
 8014152:	461a      	mov	r2, r3
 8014154:	4b67      	ldr	r3, [pc, #412]	@ (80142f4 <tcp_listen_input+0x1e0>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801415a:	4b67      	ldr	r3, [pc, #412]	@ (80142f8 <tcp_listen_input+0x1e4>)
 801415c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801415e:	885b      	ldrh	r3, [r3, #2]
 8014160:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014162:	4a65      	ldr	r2, [pc, #404]	@ (80142f8 <tcp_listen_input+0x1e4>)
 8014164:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014166:	8812      	ldrh	r2, [r2, #0]
 8014168:	b292      	uxth	r2, r2
 801416a:	9202      	str	r2, [sp, #8]
 801416c:	9301      	str	r3, [sp, #4]
 801416e:	4b63      	ldr	r3, [pc, #396]	@ (80142fc <tcp_listen_input+0x1e8>)
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	4b63      	ldr	r3, [pc, #396]	@ (8014300 <tcp_listen_input+0x1ec>)
 8014174:	4602      	mov	r2, r0
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f002 ff7c 	bl	8017074 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801417c:	e0a9      	b.n	80142d2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801417e:	4b57      	ldr	r3, [pc, #348]	@ (80142dc <tcp_listen_input+0x1c8>)
 8014180:	781b      	ldrb	r3, [r3, #0]
 8014182:	f003 0302 	and.w	r3, r3, #2
 8014186:	2b00      	cmp	r3, #0
 8014188:	f000 80a3 	beq.w	80142d2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	7d5b      	ldrb	r3, [r3, #21]
 8014190:	4618      	mov	r0, r3
 8014192:	f7ff f927 	bl	80133e4 <tcp_alloc>
 8014196:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d111      	bne.n	80141c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	699b      	ldr	r3, [r3, #24]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00a      	beq.n	80141bc <tcp_listen_input+0xa8>
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	699b      	ldr	r3, [r3, #24]
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	6910      	ldr	r0, [r2, #16]
 80141ae:	f04f 32ff 	mov.w	r2, #4294967295
 80141b2:	2100      	movs	r1, #0
 80141b4:	4798      	blx	r3
 80141b6:	4603      	mov	r3, r0
 80141b8:	73bb      	strb	r3, [r7, #14]
      return;
 80141ba:	e08b      	b.n	80142d4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80141bc:	23f0      	movs	r3, #240	@ 0xf0
 80141be:	73bb      	strb	r3, [r7, #14]
      return;
 80141c0:	e088      	b.n	80142d4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80141c2:	4b50      	ldr	r3, [pc, #320]	@ (8014304 <tcp_listen_input+0x1f0>)
 80141c4:	695a      	ldr	r2, [r3, #20]
 80141c6:	697b      	ldr	r3, [r7, #20]
 80141c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80141ca:	4b4e      	ldr	r3, [pc, #312]	@ (8014304 <tcp_listen_input+0x1f0>)
 80141cc:	691a      	ldr	r2, [r3, #16]
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	8ada      	ldrh	r2, [r3, #22]
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80141da:	4b47      	ldr	r3, [pc, #284]	@ (80142f8 <tcp_listen_input+0x1e4>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	881b      	ldrh	r3, [r3, #0]
 80141e0:	b29a      	uxth	r2, r3
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	2203      	movs	r2, #3
 80141ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80141ec:	4b41      	ldr	r3, [pc, #260]	@ (80142f4 <tcp_listen_input+0x1e0>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	1c5a      	adds	r2, r3, #1
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80141fe:	6978      	ldr	r0, [r7, #20]
 8014200:	f7ff fa58 	bl	80136b4 <tcp_next_iss>
 8014204:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	693a      	ldr	r2, [r7, #16]
 801420a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	693a      	ldr	r2, [r7, #16]
 8014210:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	693a      	ldr	r2, [r7, #16]
 8014216:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	693a      	ldr	r2, [r7, #16]
 801421c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801421e:	4b35      	ldr	r3, [pc, #212]	@ (80142f4 <tcp_listen_input+0x1e0>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	1e5a      	subs	r2, r3, #1
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	691a      	ldr	r2, [r3, #16]
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	687a      	ldr	r2, [r7, #4]
 8014234:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	7a5b      	ldrb	r3, [r3, #9]
 801423a:	f003 030c 	and.w	r3, r3, #12
 801423e:	b2da      	uxtb	r2, r3
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	7a1a      	ldrb	r2, [r3, #8]
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801424c:	4b2e      	ldr	r3, [pc, #184]	@ (8014308 <tcp_listen_input+0x1f4>)
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	60da      	str	r2, [r3, #12]
 8014254:	4a2c      	ldr	r2, [pc, #176]	@ (8014308 <tcp_listen_input+0x1f4>)
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	6013      	str	r3, [r2, #0]
 801425a:	f003 f8cd 	bl	80173f8 <tcp_timer_needed>
 801425e:	4b2b      	ldr	r3, [pc, #172]	@ (801430c <tcp_listen_input+0x1f8>)
 8014260:	2201      	movs	r2, #1
 8014262:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014264:	6978      	ldr	r0, [r7, #20]
 8014266:	f001 fd8b 	bl	8015d80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801426a:	4b23      	ldr	r3, [pc, #140]	@ (80142f8 <tcp_listen_input+0x1e4>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	89db      	ldrh	r3, [r3, #14]
 8014270:	b29a      	uxth	r2, r3
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014288:	697b      	ldr	r3, [r7, #20]
 801428a:	3304      	adds	r3, #4
 801428c:	4618      	mov	r0, r3
 801428e:	f005 f817 	bl	80192c0 <ip4_route>
 8014292:	4601      	mov	r1, r0
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	3304      	adds	r3, #4
 8014298:	461a      	mov	r2, r3
 801429a:	4620      	mov	r0, r4
 801429c:	f7ff fa30 	bl	8013700 <tcp_eff_send_mss_netif>
 80142a0:	4603      	mov	r3, r0
 80142a2:	461a      	mov	r2, r3
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80142a8:	2112      	movs	r1, #18
 80142aa:	6978      	ldr	r0, [r7, #20]
 80142ac:	f002 f840 	bl	8016330 <tcp_enqueue_flags>
 80142b0:	4603      	mov	r3, r0
 80142b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80142b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d004      	beq.n	80142c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80142bc:	2100      	movs	r1, #0
 80142be:	6978      	ldr	r0, [r7, #20]
 80142c0:	f7fe f978 	bl	80125b4 <tcp_abandon>
      return;
 80142c4:	e006      	b.n	80142d4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80142c6:	6978      	ldr	r0, [r7, #20]
 80142c8:	f002 f920 	bl	801650c <tcp_output>
  return;
 80142cc:	e001      	b.n	80142d2 <tcp_listen_input+0x1be>
    return;
 80142ce:	bf00      	nop
 80142d0:	e000      	b.n	80142d4 <tcp_listen_input+0x1c0>
  return;
 80142d2:	bf00      	nop
}
 80142d4:	371c      	adds	r7, #28
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd90      	pop	{r4, r7, pc}
 80142da:	bf00      	nop
 80142dc:	24014bf0 	.word	0x24014bf0
 80142e0:	0801ced8 	.word	0x0801ced8
 80142e4:	0801d0d0 	.word	0x0801d0d0
 80142e8:	0801cf24 	.word	0x0801cf24
 80142ec:	24014be8 	.word	0x24014be8
 80142f0:	24014bee 	.word	0x24014bee
 80142f4:	24014be4 	.word	0x24014be4
 80142f8:	24014bd4 	.word	0x24014bd4
 80142fc:	2400e080 	.word	0x2400e080
 8014300:	2400e084 	.word	0x2400e084
 8014304:	2400e070 	.word	0x2400e070
 8014308:	24014bb8 	.word	0x24014bb8
 801430c:	24014bc0 	.word	0x24014bc0

08014310 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b086      	sub	sp, #24
 8014314:	af04      	add	r7, sp, #16
 8014316:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014318:	4b2f      	ldr	r3, [pc, #188]	@ (80143d8 <tcp_timewait_input+0xc8>)
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	f003 0304 	and.w	r3, r3, #4
 8014320:	2b00      	cmp	r3, #0
 8014322:	d153      	bne.n	80143cc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d106      	bne.n	8014338 <tcp_timewait_input+0x28>
 801432a:	4b2c      	ldr	r3, [pc, #176]	@ (80143dc <tcp_timewait_input+0xcc>)
 801432c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014330:	492b      	ldr	r1, [pc, #172]	@ (80143e0 <tcp_timewait_input+0xd0>)
 8014332:	482c      	ldr	r0, [pc, #176]	@ (80143e4 <tcp_timewait_input+0xd4>)
 8014334:	f006 fc3e 	bl	801abb4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014338:	4b27      	ldr	r3, [pc, #156]	@ (80143d8 <tcp_timewait_input+0xc8>)
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	f003 0302 	and.w	r3, r3, #2
 8014340:	2b00      	cmp	r3, #0
 8014342:	d02a      	beq.n	801439a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014344:	4b28      	ldr	r3, [pc, #160]	@ (80143e8 <tcp_timewait_input+0xd8>)
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801434c:	1ad3      	subs	r3, r2, r3
 801434e:	2b00      	cmp	r3, #0
 8014350:	db2d      	blt.n	80143ae <tcp_timewait_input+0x9e>
 8014352:	4b25      	ldr	r3, [pc, #148]	@ (80143e8 <tcp_timewait_input+0xd8>)
 8014354:	681a      	ldr	r2, [r3, #0]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801435a:	6879      	ldr	r1, [r7, #4]
 801435c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801435e:	440b      	add	r3, r1
 8014360:	1ad3      	subs	r3, r2, r3
 8014362:	2b00      	cmp	r3, #0
 8014364:	dc23      	bgt.n	80143ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014366:	4b21      	ldr	r3, [pc, #132]	@ (80143ec <tcp_timewait_input+0xdc>)
 8014368:	6819      	ldr	r1, [r3, #0]
 801436a:	4b21      	ldr	r3, [pc, #132]	@ (80143f0 <tcp_timewait_input+0xe0>)
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	461a      	mov	r2, r3
 8014370:	4b1d      	ldr	r3, [pc, #116]	@ (80143e8 <tcp_timewait_input+0xd8>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014376:	4b1f      	ldr	r3, [pc, #124]	@ (80143f4 <tcp_timewait_input+0xe4>)
 8014378:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801437a:	885b      	ldrh	r3, [r3, #2]
 801437c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801437e:	4a1d      	ldr	r2, [pc, #116]	@ (80143f4 <tcp_timewait_input+0xe4>)
 8014380:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014382:	8812      	ldrh	r2, [r2, #0]
 8014384:	b292      	uxth	r2, r2
 8014386:	9202      	str	r2, [sp, #8]
 8014388:	9301      	str	r3, [sp, #4]
 801438a:	4b1b      	ldr	r3, [pc, #108]	@ (80143f8 <tcp_timewait_input+0xe8>)
 801438c:	9300      	str	r3, [sp, #0]
 801438e:	4b1b      	ldr	r3, [pc, #108]	@ (80143fc <tcp_timewait_input+0xec>)
 8014390:	4602      	mov	r2, r0
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f002 fe6e 	bl	8017074 <tcp_rst>
      return;
 8014398:	e01b      	b.n	80143d2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801439a:	4b0f      	ldr	r3, [pc, #60]	@ (80143d8 <tcp_timewait_input+0xc8>)
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	f003 0301 	and.w	r3, r3, #1
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d003      	beq.n	80143ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80143a6:	4b16      	ldr	r3, [pc, #88]	@ (8014400 <tcp_timewait_input+0xf0>)
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80143ae:	4b10      	ldr	r3, [pc, #64]	@ (80143f0 <tcp_timewait_input+0xe0>)
 80143b0:	881b      	ldrh	r3, [r3, #0]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d00c      	beq.n	80143d0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	8b5b      	ldrh	r3, [r3, #26]
 80143ba:	f043 0302 	orr.w	r3, r3, #2
 80143be:	b29a      	uxth	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f002 f8a1 	bl	801650c <tcp_output>
  }
  return;
 80143ca:	e001      	b.n	80143d0 <tcp_timewait_input+0xc0>
    return;
 80143cc:	bf00      	nop
 80143ce:	e000      	b.n	80143d2 <tcp_timewait_input+0xc2>
  return;
 80143d0:	bf00      	nop
}
 80143d2:	3708      	adds	r7, #8
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}
 80143d8:	24014bf0 	.word	0x24014bf0
 80143dc:	0801ced8 	.word	0x0801ced8
 80143e0:	0801d0f0 	.word	0x0801d0f0
 80143e4:	0801cf24 	.word	0x0801cf24
 80143e8:	24014be4 	.word	0x24014be4
 80143ec:	24014be8 	.word	0x24014be8
 80143f0:	24014bee 	.word	0x24014bee
 80143f4:	24014bd4 	.word	0x24014bd4
 80143f8:	2400e080 	.word	0x2400e080
 80143fc:	2400e084 	.word	0x2400e084
 8014400:	24014bac 	.word	0x24014bac

08014404 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014404:	b590      	push	{r4, r7, lr}
 8014406:	b08d      	sub	sp, #52	@ 0x34
 8014408:	af04      	add	r7, sp, #16
 801440a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801440c:	2300      	movs	r3, #0
 801440e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014410:	2300      	movs	r3, #0
 8014412:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d106      	bne.n	8014428 <tcp_process+0x24>
 801441a:	4b9d      	ldr	r3, [pc, #628]	@ (8014690 <tcp_process+0x28c>)
 801441c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014420:	499c      	ldr	r1, [pc, #624]	@ (8014694 <tcp_process+0x290>)
 8014422:	489d      	ldr	r0, [pc, #628]	@ (8014698 <tcp_process+0x294>)
 8014424:	f006 fbc6 	bl	801abb4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014428:	4b9c      	ldr	r3, [pc, #624]	@ (801469c <tcp_process+0x298>)
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	f003 0304 	and.w	r3, r3, #4
 8014430:	2b00      	cmp	r3, #0
 8014432:	d04e      	beq.n	80144d2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	7d1b      	ldrb	r3, [r3, #20]
 8014438:	2b02      	cmp	r3, #2
 801443a:	d108      	bne.n	801444e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014440:	4b97      	ldr	r3, [pc, #604]	@ (80146a0 <tcp_process+0x29c>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	429a      	cmp	r2, r3
 8014446:	d123      	bne.n	8014490 <tcp_process+0x8c>
        acceptable = 1;
 8014448:	2301      	movs	r3, #1
 801444a:	76fb      	strb	r3, [r7, #27]
 801444c:	e020      	b.n	8014490 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014452:	4b94      	ldr	r3, [pc, #592]	@ (80146a4 <tcp_process+0x2a0>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	429a      	cmp	r2, r3
 8014458:	d102      	bne.n	8014460 <tcp_process+0x5c>
        acceptable = 1;
 801445a:	2301      	movs	r3, #1
 801445c:	76fb      	strb	r3, [r7, #27]
 801445e:	e017      	b.n	8014490 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014460:	4b90      	ldr	r3, [pc, #576]	@ (80146a4 <tcp_process+0x2a0>)
 8014462:	681a      	ldr	r2, [r3, #0]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014468:	1ad3      	subs	r3, r2, r3
 801446a:	2b00      	cmp	r3, #0
 801446c:	db10      	blt.n	8014490 <tcp_process+0x8c>
 801446e:	4b8d      	ldr	r3, [pc, #564]	@ (80146a4 <tcp_process+0x2a0>)
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014476:	6879      	ldr	r1, [r7, #4]
 8014478:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801447a:	440b      	add	r3, r1
 801447c:	1ad3      	subs	r3, r2, r3
 801447e:	2b00      	cmp	r3, #0
 8014480:	dc06      	bgt.n	8014490 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	8b5b      	ldrh	r3, [r3, #26]
 8014486:	f043 0302 	orr.w	r3, r3, #2
 801448a:	b29a      	uxth	r2, r3
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014490:	7efb      	ldrb	r3, [r7, #27]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d01b      	beq.n	80144ce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	7d1b      	ldrb	r3, [r3, #20]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d106      	bne.n	80144ac <tcp_process+0xa8>
 801449e:	4b7c      	ldr	r3, [pc, #496]	@ (8014690 <tcp_process+0x28c>)
 80144a0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80144a4:	4980      	ldr	r1, [pc, #512]	@ (80146a8 <tcp_process+0x2a4>)
 80144a6:	487c      	ldr	r0, [pc, #496]	@ (8014698 <tcp_process+0x294>)
 80144a8:	f006 fb84 	bl	801abb4 <iprintf>
      recv_flags |= TF_RESET;
 80144ac:	4b7f      	ldr	r3, [pc, #508]	@ (80146ac <tcp_process+0x2a8>)
 80144ae:	781b      	ldrb	r3, [r3, #0]
 80144b0:	f043 0308 	orr.w	r3, r3, #8
 80144b4:	b2da      	uxtb	r2, r3
 80144b6:	4b7d      	ldr	r3, [pc, #500]	@ (80146ac <tcp_process+0x2a8>)
 80144b8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	8b5b      	ldrh	r3, [r3, #26]
 80144be:	f023 0301 	bic.w	r3, r3, #1
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80144c8:	f06f 030d 	mvn.w	r3, #13
 80144cc:	e37a      	b.n	8014bc4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80144ce:	2300      	movs	r3, #0
 80144d0:	e378      	b.n	8014bc4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80144d2:	4b72      	ldr	r3, [pc, #456]	@ (801469c <tcp_process+0x298>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	f003 0302 	and.w	r3, r3, #2
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d010      	beq.n	8014500 <tcp_process+0xfc>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	7d1b      	ldrb	r3, [r3, #20]
 80144e2:	2b02      	cmp	r3, #2
 80144e4:	d00c      	beq.n	8014500 <tcp_process+0xfc>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	7d1b      	ldrb	r3, [r3, #20]
 80144ea:	2b03      	cmp	r3, #3
 80144ec:	d008      	beq.n	8014500 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	8b5b      	ldrh	r3, [r3, #26]
 80144f2:	f043 0302 	orr.w	r3, r3, #2
 80144f6:	b29a      	uxth	r2, r3
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80144fc:	2300      	movs	r3, #0
 80144fe:	e361      	b.n	8014bc4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	8b5b      	ldrh	r3, [r3, #26]
 8014504:	f003 0310 	and.w	r3, r3, #16
 8014508:	2b00      	cmp	r3, #0
 801450a:	d103      	bne.n	8014514 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801450c:	4b68      	ldr	r3, [pc, #416]	@ (80146b0 <tcp_process+0x2ac>)
 801450e:	681a      	ldr	r2, [r3, #0]
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2200      	movs	r2, #0
 8014518:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2200      	movs	r2, #0
 8014520:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f001 fc2b 	bl	8015d80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	7d1b      	ldrb	r3, [r3, #20]
 801452e:	3b02      	subs	r3, #2
 8014530:	2b07      	cmp	r3, #7
 8014532:	f200 8337 	bhi.w	8014ba4 <tcp_process+0x7a0>
 8014536:	a201      	add	r2, pc, #4	@ (adr r2, 801453c <tcp_process+0x138>)
 8014538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801453c:	0801455d 	.word	0x0801455d
 8014540:	0801478d 	.word	0x0801478d
 8014544:	08014905 	.word	0x08014905
 8014548:	0801492f 	.word	0x0801492f
 801454c:	08014a53 	.word	0x08014a53
 8014550:	08014905 	.word	0x08014905
 8014554:	08014adf 	.word	0x08014adf
 8014558:	08014b6f 	.word	0x08014b6f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801455c:	4b4f      	ldr	r3, [pc, #316]	@ (801469c <tcp_process+0x298>)
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	f003 0310 	and.w	r3, r3, #16
 8014564:	2b00      	cmp	r3, #0
 8014566:	f000 80e4 	beq.w	8014732 <tcp_process+0x32e>
 801456a:	4b4c      	ldr	r3, [pc, #304]	@ (801469c <tcp_process+0x298>)
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	f003 0302 	and.w	r3, r3, #2
 8014572:	2b00      	cmp	r3, #0
 8014574:	f000 80dd 	beq.w	8014732 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801457c:	1c5a      	adds	r2, r3, #1
 801457e:	4b48      	ldr	r3, [pc, #288]	@ (80146a0 <tcp_process+0x29c>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	429a      	cmp	r2, r3
 8014584:	f040 80d5 	bne.w	8014732 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014588:	4b46      	ldr	r3, [pc, #280]	@ (80146a4 <tcp_process+0x2a0>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	1c5a      	adds	r2, r3, #1
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801459a:	4b41      	ldr	r3, [pc, #260]	@ (80146a0 <tcp_process+0x29c>)
 801459c:	681a      	ldr	r2, [r3, #0]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80145a2:	4b44      	ldr	r3, [pc, #272]	@ (80146b4 <tcp_process+0x2b0>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	89db      	ldrh	r3, [r3, #14]
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80145bc:	4b39      	ldr	r3, [pc, #228]	@ (80146a4 <tcp_process+0x2a0>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	1e5a      	subs	r2, r3, #1
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2204      	movs	r2, #4
 80145ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	3304      	adds	r3, #4
 80145d4:	4618      	mov	r0, r3
 80145d6:	f004 fe73 	bl	80192c0 <ip4_route>
 80145da:	4601      	mov	r1, r0
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	3304      	adds	r3, #4
 80145e0:	461a      	mov	r2, r3
 80145e2:	4620      	mov	r0, r4
 80145e4:	f7ff f88c 	bl	8013700 <tcp_eff_send_mss_netif>
 80145e8:	4603      	mov	r3, r0
 80145ea:	461a      	mov	r2, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80145f4:	009a      	lsls	r2, r3, #2
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80145fa:	005b      	lsls	r3, r3, #1
 80145fc:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014600:	428b      	cmp	r3, r1
 8014602:	bf38      	it	cc
 8014604:	460b      	movcc	r3, r1
 8014606:	429a      	cmp	r2, r3
 8014608:	d204      	bcs.n	8014614 <tcp_process+0x210>
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	b29b      	uxth	r3, r3
 8014612:	e00d      	b.n	8014630 <tcp_process+0x22c>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014618:	005b      	lsls	r3, r3, #1
 801461a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801461e:	4293      	cmp	r3, r2
 8014620:	d904      	bls.n	801462c <tcp_process+0x228>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014626:	005b      	lsls	r3, r3, #1
 8014628:	b29b      	uxth	r3, r3
 801462a:	e001      	b.n	8014630 <tcp_process+0x22c>
 801462c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801463c:	2b00      	cmp	r3, #0
 801463e:	d106      	bne.n	801464e <tcp_process+0x24a>
 8014640:	4b13      	ldr	r3, [pc, #76]	@ (8014690 <tcp_process+0x28c>)
 8014642:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014646:	491c      	ldr	r1, [pc, #112]	@ (80146b8 <tcp_process+0x2b4>)
 8014648:	4813      	ldr	r0, [pc, #76]	@ (8014698 <tcp_process+0x294>)
 801464a:	f006 fab3 	bl	801abb4 <iprintf>
        --pcb->snd_queuelen;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014654:	3b01      	subs	r3, #1
 8014656:	b29a      	uxth	r2, r3
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014662:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014664:	69fb      	ldr	r3, [r7, #28]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d12a      	bne.n	80146c0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801466e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014670:	69fb      	ldr	r3, [r7, #28]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d106      	bne.n	8014684 <tcp_process+0x280>
 8014676:	4b06      	ldr	r3, [pc, #24]	@ (8014690 <tcp_process+0x28c>)
 8014678:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801467c:	490f      	ldr	r1, [pc, #60]	@ (80146bc <tcp_process+0x2b8>)
 801467e:	4806      	ldr	r0, [pc, #24]	@ (8014698 <tcp_process+0x294>)
 8014680:	f006 fa98 	bl	801abb4 <iprintf>
          pcb->unsent = rseg->next;
 8014684:	69fb      	ldr	r3, [r7, #28]
 8014686:	681a      	ldr	r2, [r3, #0]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801468c:	e01c      	b.n	80146c8 <tcp_process+0x2c4>
 801468e:	bf00      	nop
 8014690:	0801ced8 	.word	0x0801ced8
 8014694:	0801d110 	.word	0x0801d110
 8014698:	0801cf24 	.word	0x0801cf24
 801469c:	24014bf0 	.word	0x24014bf0
 80146a0:	24014be8 	.word	0x24014be8
 80146a4:	24014be4 	.word	0x24014be4
 80146a8:	0801d12c 	.word	0x0801d12c
 80146ac:	24014bf1 	.word	0x24014bf1
 80146b0:	24014bac 	.word	0x24014bac
 80146b4:	24014bd4 	.word	0x24014bd4
 80146b8:	0801d14c 	.word	0x0801d14c
 80146bc:	0801d164 	.word	0x0801d164
        } else {
          pcb->unacked = rseg->next;
 80146c0:	69fb      	ldr	r3, [r7, #28]
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80146c8:	69f8      	ldr	r0, [r7, #28]
 80146ca:	f7fe fd22 	bl	8013112 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d104      	bne.n	80146e0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80146dc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80146de:	e006      	b.n	80146ee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2200      	movs	r2, #0
 80146e4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2200      	movs	r2, #0
 80146ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00a      	beq.n	801470e <tcp_process+0x30a>
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80146fe:	687a      	ldr	r2, [r7, #4]
 8014700:	6910      	ldr	r0, [r2, #16]
 8014702:	2200      	movs	r2, #0
 8014704:	6879      	ldr	r1, [r7, #4]
 8014706:	4798      	blx	r3
 8014708:	4603      	mov	r3, r0
 801470a:	76bb      	strb	r3, [r7, #26]
 801470c:	e001      	b.n	8014712 <tcp_process+0x30e>
 801470e:	2300      	movs	r3, #0
 8014710:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014712:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014716:	f113 0f0d 	cmn.w	r3, #13
 801471a:	d102      	bne.n	8014722 <tcp_process+0x31e>
          return ERR_ABRT;
 801471c:	f06f 030c 	mvn.w	r3, #12
 8014720:	e250      	b.n	8014bc4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	8b5b      	ldrh	r3, [r3, #26]
 8014726:	f043 0302 	orr.w	r3, r3, #2
 801472a:	b29a      	uxth	r2, r3
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014730:	e23a      	b.n	8014ba8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014732:	4b98      	ldr	r3, [pc, #608]	@ (8014994 <tcp_process+0x590>)
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	f003 0310 	and.w	r3, r3, #16
 801473a:	2b00      	cmp	r3, #0
 801473c:	f000 8234 	beq.w	8014ba8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014740:	4b95      	ldr	r3, [pc, #596]	@ (8014998 <tcp_process+0x594>)
 8014742:	6819      	ldr	r1, [r3, #0]
 8014744:	4b95      	ldr	r3, [pc, #596]	@ (801499c <tcp_process+0x598>)
 8014746:	881b      	ldrh	r3, [r3, #0]
 8014748:	461a      	mov	r2, r3
 801474a:	4b95      	ldr	r3, [pc, #596]	@ (80149a0 <tcp_process+0x59c>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014750:	4b94      	ldr	r3, [pc, #592]	@ (80149a4 <tcp_process+0x5a0>)
 8014752:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014754:	885b      	ldrh	r3, [r3, #2]
 8014756:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014758:	4a92      	ldr	r2, [pc, #584]	@ (80149a4 <tcp_process+0x5a0>)
 801475a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801475c:	8812      	ldrh	r2, [r2, #0]
 801475e:	b292      	uxth	r2, r2
 8014760:	9202      	str	r2, [sp, #8]
 8014762:	9301      	str	r3, [sp, #4]
 8014764:	4b90      	ldr	r3, [pc, #576]	@ (80149a8 <tcp_process+0x5a4>)
 8014766:	9300      	str	r3, [sp, #0]
 8014768:	4b90      	ldr	r3, [pc, #576]	@ (80149ac <tcp_process+0x5a8>)
 801476a:	4602      	mov	r2, r0
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f002 fc81 	bl	8017074 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014778:	2b05      	cmp	r3, #5
 801477a:	f200 8215 	bhi.w	8014ba8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2200      	movs	r2, #0
 8014782:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f002 fa4d 	bl	8016c24 <tcp_rexmit_rto>
      break;
 801478a:	e20d      	b.n	8014ba8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801478c:	4b81      	ldr	r3, [pc, #516]	@ (8014994 <tcp_process+0x590>)
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	f003 0310 	and.w	r3, r3, #16
 8014794:	2b00      	cmp	r3, #0
 8014796:	f000 80a1 	beq.w	80148dc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801479a:	4b7f      	ldr	r3, [pc, #508]	@ (8014998 <tcp_process+0x594>)
 801479c:	681a      	ldr	r2, [r3, #0]
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147a2:	1ad3      	subs	r3, r2, r3
 80147a4:	3b01      	subs	r3, #1
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	db7e      	blt.n	80148a8 <tcp_process+0x4a4>
 80147aa:	4b7b      	ldr	r3, [pc, #492]	@ (8014998 <tcp_process+0x594>)
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80147b2:	1ad3      	subs	r3, r2, r3
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	dc77      	bgt.n	80148a8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2204      	movs	r2, #4
 80147bc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d102      	bne.n	80147cc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80147c6:	23fa      	movs	r3, #250	@ 0xfa
 80147c8:	76bb      	strb	r3, [r7, #26]
 80147ca:	e01d      	b.n	8014808 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80147d0:	699b      	ldr	r3, [r3, #24]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d106      	bne.n	80147e4 <tcp_process+0x3e0>
 80147d6:	4b76      	ldr	r3, [pc, #472]	@ (80149b0 <tcp_process+0x5ac>)
 80147d8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80147dc:	4975      	ldr	r1, [pc, #468]	@ (80149b4 <tcp_process+0x5b0>)
 80147de:	4876      	ldr	r0, [pc, #472]	@ (80149b8 <tcp_process+0x5b4>)
 80147e0:	f006 f9e8 	bl	801abb4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80147e8:	699b      	ldr	r3, [r3, #24]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d00a      	beq.n	8014804 <tcp_process+0x400>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80147f2:	699b      	ldr	r3, [r3, #24]
 80147f4:	687a      	ldr	r2, [r7, #4]
 80147f6:	6910      	ldr	r0, [r2, #16]
 80147f8:	2200      	movs	r2, #0
 80147fa:	6879      	ldr	r1, [r7, #4]
 80147fc:	4798      	blx	r3
 80147fe:	4603      	mov	r3, r0
 8014800:	76bb      	strb	r3, [r7, #26]
 8014802:	e001      	b.n	8014808 <tcp_process+0x404>
 8014804:	23f0      	movs	r3, #240	@ 0xf0
 8014806:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014808:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d00a      	beq.n	8014826 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014810:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014814:	f113 0f0d 	cmn.w	r3, #13
 8014818:	d002      	beq.n	8014820 <tcp_process+0x41c>
              tcp_abort(pcb);
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f7fd ff88 	bl	8012730 <tcp_abort>
            }
            return ERR_ABRT;
 8014820:	f06f 030c 	mvn.w	r3, #12
 8014824:	e1ce      	b.n	8014bc4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f000 fae0 	bl	8014dec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801482c:	4b63      	ldr	r3, [pc, #396]	@ (80149bc <tcp_process+0x5b8>)
 801482e:	881b      	ldrh	r3, [r3, #0]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d005      	beq.n	8014840 <tcp_process+0x43c>
            recv_acked--;
 8014834:	4b61      	ldr	r3, [pc, #388]	@ (80149bc <tcp_process+0x5b8>)
 8014836:	881b      	ldrh	r3, [r3, #0]
 8014838:	3b01      	subs	r3, #1
 801483a:	b29a      	uxth	r2, r3
 801483c:	4b5f      	ldr	r3, [pc, #380]	@ (80149bc <tcp_process+0x5b8>)
 801483e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014844:	009a      	lsls	r2, r3, #2
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014850:	428b      	cmp	r3, r1
 8014852:	bf38      	it	cc
 8014854:	460b      	movcc	r3, r1
 8014856:	429a      	cmp	r2, r3
 8014858:	d204      	bcs.n	8014864 <tcp_process+0x460>
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801485e:	009b      	lsls	r3, r3, #2
 8014860:	b29b      	uxth	r3, r3
 8014862:	e00d      	b.n	8014880 <tcp_process+0x47c>
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014868:	005b      	lsls	r3, r3, #1
 801486a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801486e:	4293      	cmp	r3, r2
 8014870:	d904      	bls.n	801487c <tcp_process+0x478>
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014876:	005b      	lsls	r3, r3, #1
 8014878:	b29b      	uxth	r3, r3
 801487a:	e001      	b.n	8014880 <tcp_process+0x47c>
 801487c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014886:	4b4e      	ldr	r3, [pc, #312]	@ (80149c0 <tcp_process+0x5bc>)
 8014888:	781b      	ldrb	r3, [r3, #0]
 801488a:	f003 0320 	and.w	r3, r3, #32
 801488e:	2b00      	cmp	r3, #0
 8014890:	d037      	beq.n	8014902 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	8b5b      	ldrh	r3, [r3, #26]
 8014896:	f043 0302 	orr.w	r3, r3, #2
 801489a:	b29a      	uxth	r2, r3
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	2207      	movs	r2, #7
 80148a4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80148a6:	e02c      	b.n	8014902 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148a8:	4b3b      	ldr	r3, [pc, #236]	@ (8014998 <tcp_process+0x594>)
 80148aa:	6819      	ldr	r1, [r3, #0]
 80148ac:	4b3b      	ldr	r3, [pc, #236]	@ (801499c <tcp_process+0x598>)
 80148ae:	881b      	ldrh	r3, [r3, #0]
 80148b0:	461a      	mov	r2, r3
 80148b2:	4b3b      	ldr	r3, [pc, #236]	@ (80149a0 <tcp_process+0x59c>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148b8:	4b3a      	ldr	r3, [pc, #232]	@ (80149a4 <tcp_process+0x5a0>)
 80148ba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148bc:	885b      	ldrh	r3, [r3, #2]
 80148be:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148c0:	4a38      	ldr	r2, [pc, #224]	@ (80149a4 <tcp_process+0x5a0>)
 80148c2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148c4:	8812      	ldrh	r2, [r2, #0]
 80148c6:	b292      	uxth	r2, r2
 80148c8:	9202      	str	r2, [sp, #8]
 80148ca:	9301      	str	r3, [sp, #4]
 80148cc:	4b36      	ldr	r3, [pc, #216]	@ (80149a8 <tcp_process+0x5a4>)
 80148ce:	9300      	str	r3, [sp, #0]
 80148d0:	4b36      	ldr	r3, [pc, #216]	@ (80149ac <tcp_process+0x5a8>)
 80148d2:	4602      	mov	r2, r0
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	f002 fbcd 	bl	8017074 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80148da:	e167      	b.n	8014bac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80148dc:	4b2d      	ldr	r3, [pc, #180]	@ (8014994 <tcp_process+0x590>)
 80148de:	781b      	ldrb	r3, [r3, #0]
 80148e0:	f003 0302 	and.w	r3, r3, #2
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	f000 8161 	beq.w	8014bac <tcp_process+0x7a8>
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ee:	1e5a      	subs	r2, r3, #1
 80148f0:	4b2b      	ldr	r3, [pc, #172]	@ (80149a0 <tcp_process+0x59c>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	f040 8159 	bne.w	8014bac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f002 f9b4 	bl	8016c68 <tcp_rexmit>
      break;
 8014900:	e154      	b.n	8014bac <tcp_process+0x7a8>
 8014902:	e153      	b.n	8014bac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f000 fa71 	bl	8014dec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801490a:	4b2d      	ldr	r3, [pc, #180]	@ (80149c0 <tcp_process+0x5bc>)
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	f003 0320 	and.w	r3, r3, #32
 8014912:	2b00      	cmp	r3, #0
 8014914:	f000 814c 	beq.w	8014bb0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	8b5b      	ldrh	r3, [r3, #26]
 801491c:	f043 0302 	orr.w	r3, r3, #2
 8014920:	b29a      	uxth	r2, r3
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	2207      	movs	r2, #7
 801492a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801492c:	e140      	b.n	8014bb0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f000 fa5c 	bl	8014dec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014934:	4b22      	ldr	r3, [pc, #136]	@ (80149c0 <tcp_process+0x5bc>)
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	f003 0320 	and.w	r3, r3, #32
 801493c:	2b00      	cmp	r3, #0
 801493e:	d071      	beq.n	8014a24 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014940:	4b14      	ldr	r3, [pc, #80]	@ (8014994 <tcp_process+0x590>)
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	f003 0310 	and.w	r3, r3, #16
 8014948:	2b00      	cmp	r3, #0
 801494a:	d060      	beq.n	8014a0e <tcp_process+0x60a>
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014950:	4b11      	ldr	r3, [pc, #68]	@ (8014998 <tcp_process+0x594>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	429a      	cmp	r2, r3
 8014956:	d15a      	bne.n	8014a0e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801495c:	2b00      	cmp	r3, #0
 801495e:	d156      	bne.n	8014a0e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	8b5b      	ldrh	r3, [r3, #26]
 8014964:	f043 0302 	orr.w	r3, r3, #2
 8014968:	b29a      	uxth	r2, r3
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f7fe fdbc 	bl	80134ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014974:	4b13      	ldr	r3, [pc, #76]	@ (80149c4 <tcp_process+0x5c0>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	687a      	ldr	r2, [r7, #4]
 801497a:	429a      	cmp	r2, r3
 801497c:	d105      	bne.n	801498a <tcp_process+0x586>
 801497e:	4b11      	ldr	r3, [pc, #68]	@ (80149c4 <tcp_process+0x5c0>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	68db      	ldr	r3, [r3, #12]
 8014984:	4a0f      	ldr	r2, [pc, #60]	@ (80149c4 <tcp_process+0x5c0>)
 8014986:	6013      	str	r3, [r2, #0]
 8014988:	e02e      	b.n	80149e8 <tcp_process+0x5e4>
 801498a:	4b0e      	ldr	r3, [pc, #56]	@ (80149c4 <tcp_process+0x5c0>)
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	617b      	str	r3, [r7, #20]
 8014990:	e027      	b.n	80149e2 <tcp_process+0x5de>
 8014992:	bf00      	nop
 8014994:	24014bf0 	.word	0x24014bf0
 8014998:	24014be8 	.word	0x24014be8
 801499c:	24014bee 	.word	0x24014bee
 80149a0:	24014be4 	.word	0x24014be4
 80149a4:	24014bd4 	.word	0x24014bd4
 80149a8:	2400e080 	.word	0x2400e080
 80149ac:	2400e084 	.word	0x2400e084
 80149b0:	0801ced8 	.word	0x0801ced8
 80149b4:	0801d178 	.word	0x0801d178
 80149b8:	0801cf24 	.word	0x0801cf24
 80149bc:	24014bec 	.word	0x24014bec
 80149c0:	24014bf1 	.word	0x24014bf1
 80149c4:	24014bb8 	.word	0x24014bb8
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d104      	bne.n	80149dc <tcp_process+0x5d8>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	68da      	ldr	r2, [r3, #12]
 80149d6:	697b      	ldr	r3, [r7, #20]
 80149d8:	60da      	str	r2, [r3, #12]
 80149da:	e005      	b.n	80149e8 <tcp_process+0x5e4>
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	68db      	ldr	r3, [r3, #12]
 80149e0:	617b      	str	r3, [r7, #20]
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d1ef      	bne.n	80149c8 <tcp_process+0x5c4>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2200      	movs	r2, #0
 80149ec:	60da      	str	r2, [r3, #12]
 80149ee:	4b77      	ldr	r3, [pc, #476]	@ (8014bcc <tcp_process+0x7c8>)
 80149f0:	2201      	movs	r2, #1
 80149f2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	220a      	movs	r2, #10
 80149f8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80149fa:	4b75      	ldr	r3, [pc, #468]	@ (8014bd0 <tcp_process+0x7cc>)
 80149fc:	681a      	ldr	r2, [r3, #0]
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	60da      	str	r2, [r3, #12]
 8014a02:	4a73      	ldr	r2, [pc, #460]	@ (8014bd0 <tcp_process+0x7cc>)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6013      	str	r3, [r2, #0]
 8014a08:	f002 fcf6 	bl	80173f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014a0c:	e0d2      	b.n	8014bb4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	8b5b      	ldrh	r3, [r3, #26]
 8014a12:	f043 0302 	orr.w	r3, r3, #2
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	2208      	movs	r2, #8
 8014a20:	751a      	strb	r2, [r3, #20]
      break;
 8014a22:	e0c7      	b.n	8014bb4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a24:	4b6b      	ldr	r3, [pc, #428]	@ (8014bd4 <tcp_process+0x7d0>)
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	f003 0310 	and.w	r3, r3, #16
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	f000 80c1 	beq.w	8014bb4 <tcp_process+0x7b0>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a36:	4b68      	ldr	r3, [pc, #416]	@ (8014bd8 <tcp_process+0x7d4>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	f040 80ba 	bne.w	8014bb4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	f040 80b5 	bne.w	8014bb4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2206      	movs	r2, #6
 8014a4e:	751a      	strb	r2, [r3, #20]
      break;
 8014a50:	e0b0      	b.n	8014bb4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f000 f9ca 	bl	8014dec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014a58:	4b60      	ldr	r3, [pc, #384]	@ (8014bdc <tcp_process+0x7d8>)
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	f003 0320 	and.w	r3, r3, #32
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	f000 80a9 	beq.w	8014bb8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	8b5b      	ldrh	r3, [r3, #26]
 8014a6a:	f043 0302 	orr.w	r3, r3, #2
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f7fe fd39 	bl	80134ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014a7a:	4b59      	ldr	r3, [pc, #356]	@ (8014be0 <tcp_process+0x7dc>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d105      	bne.n	8014a90 <tcp_process+0x68c>
 8014a84:	4b56      	ldr	r3, [pc, #344]	@ (8014be0 <tcp_process+0x7dc>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	68db      	ldr	r3, [r3, #12]
 8014a8a:	4a55      	ldr	r2, [pc, #340]	@ (8014be0 <tcp_process+0x7dc>)
 8014a8c:	6013      	str	r3, [r2, #0]
 8014a8e:	e013      	b.n	8014ab8 <tcp_process+0x6b4>
 8014a90:	4b53      	ldr	r3, [pc, #332]	@ (8014be0 <tcp_process+0x7dc>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	613b      	str	r3, [r7, #16]
 8014a96:	e00c      	b.n	8014ab2 <tcp_process+0x6ae>
 8014a98:	693b      	ldr	r3, [r7, #16]
 8014a9a:	68db      	ldr	r3, [r3, #12]
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d104      	bne.n	8014aac <tcp_process+0x6a8>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	68da      	ldr	r2, [r3, #12]
 8014aa6:	693b      	ldr	r3, [r7, #16]
 8014aa8:	60da      	str	r2, [r3, #12]
 8014aaa:	e005      	b.n	8014ab8 <tcp_process+0x6b4>
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	613b      	str	r3, [r7, #16]
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d1ef      	bne.n	8014a98 <tcp_process+0x694>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2200      	movs	r2, #0
 8014abc:	60da      	str	r2, [r3, #12]
 8014abe:	4b43      	ldr	r3, [pc, #268]	@ (8014bcc <tcp_process+0x7c8>)
 8014ac0:	2201      	movs	r2, #1
 8014ac2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	220a      	movs	r2, #10
 8014ac8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014aca:	4b41      	ldr	r3, [pc, #260]	@ (8014bd0 <tcp_process+0x7cc>)
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	60da      	str	r2, [r3, #12]
 8014ad2:	4a3f      	ldr	r2, [pc, #252]	@ (8014bd0 <tcp_process+0x7cc>)
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	6013      	str	r3, [r2, #0]
 8014ad8:	f002 fc8e 	bl	80173f8 <tcp_timer_needed>
      }
      break;
 8014adc:	e06c      	b.n	8014bb8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f000 f984 	bl	8014dec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8014bd4 <tcp_process+0x7d0>)
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	f003 0310 	and.w	r3, r3, #16
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d065      	beq.n	8014bbc <tcp_process+0x7b8>
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014af4:	4b38      	ldr	r3, [pc, #224]	@ (8014bd8 <tcp_process+0x7d4>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d15f      	bne.n	8014bbc <tcp_process+0x7b8>
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d15b      	bne.n	8014bbc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f7fe fcf1 	bl	80134ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014b0a:	4b35      	ldr	r3, [pc, #212]	@ (8014be0 <tcp_process+0x7dc>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	687a      	ldr	r2, [r7, #4]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d105      	bne.n	8014b20 <tcp_process+0x71c>
 8014b14:	4b32      	ldr	r3, [pc, #200]	@ (8014be0 <tcp_process+0x7dc>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	68db      	ldr	r3, [r3, #12]
 8014b1a:	4a31      	ldr	r2, [pc, #196]	@ (8014be0 <tcp_process+0x7dc>)
 8014b1c:	6013      	str	r3, [r2, #0]
 8014b1e:	e013      	b.n	8014b48 <tcp_process+0x744>
 8014b20:	4b2f      	ldr	r3, [pc, #188]	@ (8014be0 <tcp_process+0x7dc>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	60fb      	str	r3, [r7, #12]
 8014b26:	e00c      	b.n	8014b42 <tcp_process+0x73e>
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d104      	bne.n	8014b3c <tcp_process+0x738>
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	68da      	ldr	r2, [r3, #12]
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	60da      	str	r2, [r3, #12]
 8014b3a:	e005      	b.n	8014b48 <tcp_process+0x744>
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	60fb      	str	r3, [r7, #12]
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d1ef      	bne.n	8014b28 <tcp_process+0x724>
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	60da      	str	r2, [r3, #12]
 8014b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8014bcc <tcp_process+0x7c8>)
 8014b50:	2201      	movs	r2, #1
 8014b52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	220a      	movs	r2, #10
 8014b58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8014bd0 <tcp_process+0x7cc>)
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	60da      	str	r2, [r3, #12]
 8014b62:	4a1b      	ldr	r2, [pc, #108]	@ (8014bd0 <tcp_process+0x7cc>)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	6013      	str	r3, [r2, #0]
 8014b68:	f002 fc46 	bl	80173f8 <tcp_timer_needed>
      }
      break;
 8014b6c:	e026      	b.n	8014bbc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f000 f93c 	bl	8014dec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014b74:	4b17      	ldr	r3, [pc, #92]	@ (8014bd4 <tcp_process+0x7d0>)
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	f003 0310 	and.w	r3, r3, #16
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d01f      	beq.n	8014bc0 <tcp_process+0x7bc>
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b84:	4b14      	ldr	r3, [pc, #80]	@ (8014bd8 <tcp_process+0x7d4>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	d119      	bne.n	8014bc0 <tcp_process+0x7bc>
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d115      	bne.n	8014bc0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014b94:	4b11      	ldr	r3, [pc, #68]	@ (8014bdc <tcp_process+0x7d8>)
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	f043 0310 	orr.w	r3, r3, #16
 8014b9c:	b2da      	uxtb	r2, r3
 8014b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8014bdc <tcp_process+0x7d8>)
 8014ba0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014ba2:	e00d      	b.n	8014bc0 <tcp_process+0x7bc>
    default:
      break;
 8014ba4:	bf00      	nop
 8014ba6:	e00c      	b.n	8014bc2 <tcp_process+0x7be>
      break;
 8014ba8:	bf00      	nop
 8014baa:	e00a      	b.n	8014bc2 <tcp_process+0x7be>
      break;
 8014bac:	bf00      	nop
 8014bae:	e008      	b.n	8014bc2 <tcp_process+0x7be>
      break;
 8014bb0:	bf00      	nop
 8014bb2:	e006      	b.n	8014bc2 <tcp_process+0x7be>
      break;
 8014bb4:	bf00      	nop
 8014bb6:	e004      	b.n	8014bc2 <tcp_process+0x7be>
      break;
 8014bb8:	bf00      	nop
 8014bba:	e002      	b.n	8014bc2 <tcp_process+0x7be>
      break;
 8014bbc:	bf00      	nop
 8014bbe:	e000      	b.n	8014bc2 <tcp_process+0x7be>
      break;
 8014bc0:	bf00      	nop
  }
  return ERR_OK;
 8014bc2:	2300      	movs	r3, #0
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	3724      	adds	r7, #36	@ 0x24
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd90      	pop	{r4, r7, pc}
 8014bcc:	24014bc0 	.word	0x24014bc0
 8014bd0:	24014bbc 	.word	0x24014bbc
 8014bd4:	24014bf0 	.word	0x24014bf0
 8014bd8:	24014be8 	.word	0x24014be8
 8014bdc:	24014bf1 	.word	0x24014bf1
 8014be0:	24014bb8 	.word	0x24014bb8

08014be4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014be4:	b590      	push	{r4, r7, lr}
 8014be6:	b085      	sub	sp, #20
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d106      	bne.n	8014c02 <tcp_oos_insert_segment+0x1e>
 8014bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8014ce4 <tcp_oos_insert_segment+0x100>)
 8014bf6:	f240 421f 	movw	r2, #1055	@ 0x41f
 8014bfa:	493b      	ldr	r1, [pc, #236]	@ (8014ce8 <tcp_oos_insert_segment+0x104>)
 8014bfc:	483b      	ldr	r0, [pc, #236]	@ (8014cec <tcp_oos_insert_segment+0x108>)
 8014bfe:	f005 ffd9 	bl	801abb4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	68db      	ldr	r3, [r3, #12]
 8014c06:	899b      	ldrh	r3, [r3, #12]
 8014c08:	b29b      	uxth	r3, r3
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7fb fa4e 	bl	80100ac <lwip_htons>
 8014c10:	4603      	mov	r3, r0
 8014c12:	b2db      	uxtb	r3, r3
 8014c14:	f003 0301 	and.w	r3, r3, #1
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d028      	beq.n	8014c6e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014c1c:	6838      	ldr	r0, [r7, #0]
 8014c1e:	f7fe fa63 	bl	80130e8 <tcp_segs_free>
    next = NULL;
 8014c22:	2300      	movs	r3, #0
 8014c24:	603b      	str	r3, [r7, #0]
 8014c26:	e056      	b.n	8014cd6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	899b      	ldrh	r3, [r3, #12]
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7fb fa3b 	bl	80100ac <lwip_htons>
 8014c36:	4603      	mov	r3, r0
 8014c38:	b2db      	uxtb	r3, r3
 8014c3a:	f003 0301 	and.w	r3, r3, #1
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d00d      	beq.n	8014c5e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	68db      	ldr	r3, [r3, #12]
 8014c46:	899b      	ldrh	r3, [r3, #12]
 8014c48:	b29c      	uxth	r4, r3
 8014c4a:	2001      	movs	r0, #1
 8014c4c:	f7fb fa2e 	bl	80100ac <lwip_htons>
 8014c50:	4603      	mov	r3, r0
 8014c52:	461a      	mov	r2, r3
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	4322      	orrs	r2, r4
 8014c5a:	b292      	uxth	r2, r2
 8014c5c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014c68:	68f8      	ldr	r0, [r7, #12]
 8014c6a:	f7fe fa52 	bl	8013112 <tcp_seg_free>
    while (next &&
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d00e      	beq.n	8014c92 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	891b      	ldrh	r3, [r3, #8]
 8014c78:	461a      	mov	r2, r3
 8014c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8014cf0 <tcp_oos_insert_segment+0x10c>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	441a      	add	r2, r3
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	68db      	ldr	r3, [r3, #12]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	6839      	ldr	r1, [r7, #0]
 8014c88:	8909      	ldrh	r1, [r1, #8]
 8014c8a:	440b      	add	r3, r1
 8014c8c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	daca      	bge.n	8014c28 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d01e      	beq.n	8014cd6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	891b      	ldrh	r3, [r3, #8]
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	4b14      	ldr	r3, [pc, #80]	@ (8014cf0 <tcp_oos_insert_segment+0x10c>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	441a      	add	r2, r3
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	dd12      	ble.n	8014cd6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	68db      	ldr	r3, [r3, #12]
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	b29a      	uxth	r2, r3
 8014cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8014cf0 <tcp_oos_insert_segment+0x10c>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	b29a      	uxth	r2, r3
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	685a      	ldr	r2, [r3, #4]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	891b      	ldrh	r3, [r3, #8]
 8014cce:	4619      	mov	r1, r3
 8014cd0:	4610      	mov	r0, r2
 8014cd2:	f7fc fd17 	bl	8011704 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	683a      	ldr	r2, [r7, #0]
 8014cda:	601a      	str	r2, [r3, #0]
}
 8014cdc:	bf00      	nop
 8014cde:	3714      	adds	r7, #20
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd90      	pop	{r4, r7, pc}
 8014ce4:	0801ced8 	.word	0x0801ced8
 8014ce8:	0801d198 	.word	0x0801d198
 8014cec:	0801cf24 	.word	0x0801cf24
 8014cf0:	24014be4 	.word	0x24014be4

08014cf4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014cf4:	b5b0      	push	{r4, r5, r7, lr}
 8014cf6:	b086      	sub	sp, #24
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	60f8      	str	r0, [r7, #12]
 8014cfc:	60b9      	str	r1, [r7, #8]
 8014cfe:	607a      	str	r2, [r7, #4]
 8014d00:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014d02:	e03e      	b.n	8014d82 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	685b      	ldr	r3, [r3, #4]
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7fc ff0a 	bl	8011b2c <pbuf_clen>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d22:	8a7a      	ldrh	r2, [r7, #18]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d906      	bls.n	8014d36 <tcp_free_acked_segments+0x42>
 8014d28:	4b2a      	ldr	r3, [pc, #168]	@ (8014dd4 <tcp_free_acked_segments+0xe0>)
 8014d2a:	f240 4257 	movw	r2, #1111	@ 0x457
 8014d2e:	492a      	ldr	r1, [pc, #168]	@ (8014dd8 <tcp_free_acked_segments+0xe4>)
 8014d30:	482a      	ldr	r0, [pc, #168]	@ (8014ddc <tcp_free_acked_segments+0xe8>)
 8014d32:	f005 ff3f 	bl	801abb4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8014d3c:	8a7b      	ldrh	r3, [r7, #18]
 8014d3e:	1ad3      	subs	r3, r2, r3
 8014d40:	b29a      	uxth	r2, r3
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014d48:	697b      	ldr	r3, [r7, #20]
 8014d4a:	891a      	ldrh	r2, [r3, #8]
 8014d4c:	4b24      	ldr	r3, [pc, #144]	@ (8014de0 <tcp_free_acked_segments+0xec>)
 8014d4e:	881b      	ldrh	r3, [r3, #0]
 8014d50:	4413      	add	r3, r2
 8014d52:	b29a      	uxth	r2, r3
 8014d54:	4b22      	ldr	r3, [pc, #136]	@ (8014de0 <tcp_free_acked_segments+0xec>)
 8014d56:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014d58:	6978      	ldr	r0, [r7, #20]
 8014d5a:	f7fe f9da 	bl	8013112 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d00c      	beq.n	8014d82 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d109      	bne.n	8014d82 <tcp_free_acked_segments+0x8e>
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d106      	bne.n	8014d82 <tcp_free_acked_segments+0x8e>
 8014d74:	4b17      	ldr	r3, [pc, #92]	@ (8014dd4 <tcp_free_acked_segments+0xe0>)
 8014d76:	f240 4261 	movw	r2, #1121	@ 0x461
 8014d7a:	491a      	ldr	r1, [pc, #104]	@ (8014de4 <tcp_free_acked_segments+0xf0>)
 8014d7c:	4817      	ldr	r0, [pc, #92]	@ (8014ddc <tcp_free_acked_segments+0xe8>)
 8014d7e:	f005 ff19 	bl	801abb4 <iprintf>
  while (seg_list != NULL &&
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d020      	beq.n	8014dca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	685b      	ldr	r3, [r3, #4]
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fb f9a2 	bl	80100d8 <lwip_htonl>
 8014d94:	4604      	mov	r4, r0
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	891b      	ldrh	r3, [r3, #8]
 8014d9a:	461d      	mov	r5, r3
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	68db      	ldr	r3, [r3, #12]
 8014da0:	899b      	ldrh	r3, [r3, #12]
 8014da2:	b29b      	uxth	r3, r3
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7fb f981 	bl	80100ac <lwip_htons>
 8014daa:	4603      	mov	r3, r0
 8014dac:	b2db      	uxtb	r3, r3
 8014dae:	f003 0303 	and.w	r3, r3, #3
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d001      	beq.n	8014dba <tcp_free_acked_segments+0xc6>
 8014db6:	2301      	movs	r3, #1
 8014db8:	e000      	b.n	8014dbc <tcp_free_acked_segments+0xc8>
 8014dba:	2300      	movs	r3, #0
 8014dbc:	442b      	add	r3, r5
 8014dbe:	18e2      	adds	r2, r4, r3
 8014dc0:	4b09      	ldr	r3, [pc, #36]	@ (8014de8 <tcp_free_acked_segments+0xf4>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	dd9c      	ble.n	8014d04 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014dca:	68bb      	ldr	r3, [r7, #8]
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3718      	adds	r7, #24
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8014dd4:	0801ced8 	.word	0x0801ced8
 8014dd8:	0801d1c0 	.word	0x0801d1c0
 8014ddc:	0801cf24 	.word	0x0801cf24
 8014de0:	24014bec 	.word	0x24014bec
 8014de4:	0801d1e8 	.word	0x0801d1e8
 8014de8:	24014be8 	.word	0x24014be8

08014dec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014dec:	b5b0      	push	{r4, r5, r7, lr}
 8014dee:	b094      	sub	sp, #80	@ 0x50
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014df4:	2300      	movs	r3, #0
 8014df6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d106      	bne.n	8014e0c <tcp_receive+0x20>
 8014dfe:	4b91      	ldr	r3, [pc, #580]	@ (8015044 <tcp_receive+0x258>)
 8014e00:	f240 427b 	movw	r2, #1147	@ 0x47b
 8014e04:	4990      	ldr	r1, [pc, #576]	@ (8015048 <tcp_receive+0x25c>)
 8014e06:	4891      	ldr	r0, [pc, #580]	@ (801504c <tcp_receive+0x260>)
 8014e08:	f005 fed4 	bl	801abb4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	7d1b      	ldrb	r3, [r3, #20]
 8014e10:	2b03      	cmp	r3, #3
 8014e12:	d806      	bhi.n	8014e22 <tcp_receive+0x36>
 8014e14:	4b8b      	ldr	r3, [pc, #556]	@ (8015044 <tcp_receive+0x258>)
 8014e16:	f240 427c 	movw	r2, #1148	@ 0x47c
 8014e1a:	498d      	ldr	r1, [pc, #564]	@ (8015050 <tcp_receive+0x264>)
 8014e1c:	488b      	ldr	r0, [pc, #556]	@ (801504c <tcp_receive+0x260>)
 8014e1e:	f005 fec9 	bl	801abb4 <iprintf>

  if (flags & TCP_ACK) {
 8014e22:	4b8c      	ldr	r3, [pc, #560]	@ (8015054 <tcp_receive+0x268>)
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	f003 0310 	and.w	r3, r3, #16
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	f000 8264 	beq.w	80152f8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014e36:	461a      	mov	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014e3c:	4413      	add	r3, r2
 8014e3e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014e44:	4b84      	ldr	r3, [pc, #528]	@ (8015058 <tcp_receive+0x26c>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	1ad3      	subs	r3, r2, r3
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	db1b      	blt.n	8014e86 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014e52:	4b81      	ldr	r3, [pc, #516]	@ (8015058 <tcp_receive+0x26c>)
 8014e54:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d106      	bne.n	8014e68 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014e5e:	4b7f      	ldr	r3, [pc, #508]	@ (801505c <tcp_receive+0x270>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	1ad3      	subs	r3, r2, r3
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	db0e      	blt.n	8014e86 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014e6c:	4b7b      	ldr	r3, [pc, #492]	@ (801505c <tcp_receive+0x270>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d125      	bne.n	8014ec0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014e74:	4b7a      	ldr	r3, [pc, #488]	@ (8015060 <tcp_receive+0x274>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	89db      	ldrh	r3, [r3, #14]
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d91c      	bls.n	8014ec0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014e86:	4b76      	ldr	r3, [pc, #472]	@ (8015060 <tcp_receive+0x274>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	89db      	ldrh	r3, [r3, #14]
 8014e8c:	b29a      	uxth	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d205      	bcs.n	8014eb0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8014eb0:	4b69      	ldr	r3, [pc, #420]	@ (8015058 <tcp_receive+0x26c>)
 8014eb2:	681a      	ldr	r2, [r3, #0]
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8014eb8:	4b68      	ldr	r3, [pc, #416]	@ (801505c <tcp_receive+0x270>)
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014ec0:	4b66      	ldr	r3, [pc, #408]	@ (801505c <tcp_receive+0x270>)
 8014ec2:	681a      	ldr	r2, [r3, #0]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ec8:	1ad3      	subs	r3, r2, r3
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	dc58      	bgt.n	8014f80 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014ece:	4b65      	ldr	r3, [pc, #404]	@ (8015064 <tcp_receive+0x278>)
 8014ed0:	881b      	ldrh	r3, [r3, #0]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d14b      	bne.n	8014f6e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014eda:	687a      	ldr	r2, [r7, #4]
 8014edc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8014ee0:	4413      	add	r3, r2
 8014ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d142      	bne.n	8014f6e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	db3d      	blt.n	8014f6e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014ef6:	4b59      	ldr	r3, [pc, #356]	@ (801505c <tcp_receive+0x270>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	429a      	cmp	r2, r3
 8014efc:	d137      	bne.n	8014f6e <tcp_receive+0x182>
              found_dupack = 1;
 8014efe:	2301      	movs	r3, #1
 8014f00:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014f08:	2bff      	cmp	r3, #255	@ 0xff
 8014f0a:	d007      	beq.n	8014f1c <tcp_receive+0x130>
                ++pcb->dupacks;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014f12:	3301      	adds	r3, #1
 8014f14:	b2da      	uxtb	r2, r3
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014f22:	2b03      	cmp	r3, #3
 8014f24:	d91b      	bls.n	8014f5e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f30:	4413      	add	r3, r2
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d30a      	bcc.n	8014f54 <tcp_receive+0x168>
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f48:	4413      	add	r3, r2
 8014f4a:	b29a      	uxth	r2, r3
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014f52:	e004      	b.n	8014f5e <tcp_receive+0x172>
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014f64:	2b02      	cmp	r3, #2
 8014f66:	d902      	bls.n	8014f6e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f001 fee9 	bl	8016d40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	f040 8161 	bne.w	8015238 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014f7e:	e15b      	b.n	8015238 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f80:	4b36      	ldr	r3, [pc, #216]	@ (801505c <tcp_receive+0x270>)
 8014f82:	681a      	ldr	r2, [r3, #0]
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f88:	1ad3      	subs	r3, r2, r3
 8014f8a:	3b01      	subs	r3, #1
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	f2c0 814e 	blt.w	801522e <tcp_receive+0x442>
 8014f92:	4b32      	ldr	r3, [pc, #200]	@ (801505c <tcp_receive+0x270>)
 8014f94:	681a      	ldr	r2, [r3, #0]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f9a:	1ad3      	subs	r3, r2, r3
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f300 8146 	bgt.w	801522e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	8b5b      	ldrh	r3, [r3, #26]
 8014fa6:	f003 0304 	and.w	r3, r3, #4
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d010      	beq.n	8014fd0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	8b5b      	ldrh	r3, [r3, #26]
 8014fb2:	f023 0304 	bic.w	r3, r3, #4
 8014fb6:	b29a      	uxth	r2, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014fde:	10db      	asrs	r3, r3, #3
 8014fe0:	b21b      	sxth	r3, r3
 8014fe2:	b29a      	uxth	r2, r3
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	4413      	add	r3, r2
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	b21a      	sxth	r2, r3
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014ff8:	4b18      	ldr	r3, [pc, #96]	@ (801505c <tcp_receive+0x270>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	b29a      	uxth	r2, r3
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015002:	b29b      	uxth	r3, r3
 8015004:	1ad3      	subs	r3, r2, r3
 8015006:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2200      	movs	r2, #0
 801500c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015010:	4b12      	ldr	r3, [pc, #72]	@ (801505c <tcp_receive+0x270>)
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	7d1b      	ldrb	r3, [r3, #20]
 801501c:	2b03      	cmp	r3, #3
 801501e:	f240 8097 	bls.w	8015150 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801502e:	429a      	cmp	r2, r3
 8015030:	d245      	bcs.n	80150be <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	8b5b      	ldrh	r3, [r3, #26]
 8015036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801503a:	2b00      	cmp	r3, #0
 801503c:	d014      	beq.n	8015068 <tcp_receive+0x27c>
 801503e:	2301      	movs	r3, #1
 8015040:	e013      	b.n	801506a <tcp_receive+0x27e>
 8015042:	bf00      	nop
 8015044:	0801ced8 	.word	0x0801ced8
 8015048:	0801d208 	.word	0x0801d208
 801504c:	0801cf24 	.word	0x0801cf24
 8015050:	0801d224 	.word	0x0801d224
 8015054:	24014bf0 	.word	0x24014bf0
 8015058:	24014be4 	.word	0x24014be4
 801505c:	24014be8 	.word	0x24014be8
 8015060:	24014bd4 	.word	0x24014bd4
 8015064:	24014bee 	.word	0x24014bee
 8015068:	2302      	movs	r3, #2
 801506a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801506e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015072:	b29a      	uxth	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015078:	fb12 f303 	smulbb	r3, r2, r3
 801507c:	b29b      	uxth	r3, r3
 801507e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015080:	4293      	cmp	r3, r2
 8015082:	bf28      	it	cs
 8015084:	4613      	movcs	r3, r2
 8015086:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801508e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015090:	4413      	add	r3, r2
 8015092:	b29a      	uxth	r2, r3
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801509a:	429a      	cmp	r2, r3
 801509c:	d309      	bcc.n	80150b2 <tcp_receive+0x2c6>
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80150a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80150a6:	4413      	add	r3, r2
 80150a8:	b29a      	uxth	r2, r3
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80150b0:	e04e      	b.n	8015150 <tcp_receive+0x364>
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80150b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80150bc:	e048      	b.n	8015150 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80150c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80150c6:	4413      	add	r3, r2
 80150c8:	b29a      	uxth	r2, r3
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d309      	bcc.n	80150e8 <tcp_receive+0x2fc>
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80150da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80150dc:	4413      	add	r3, r2
 80150de:	b29a      	uxth	r2, r3
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150e6:	e004      	b.n	80150f2 <tcp_receive+0x306>
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80150ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80150fe:	429a      	cmp	r2, r3
 8015100:	d326      	bcc.n	8015150 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801510e:	1ad3      	subs	r3, r2, r3
 8015110:	b29a      	uxth	r2, r3
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015122:	4413      	add	r3, r2
 8015124:	b29a      	uxth	r2, r3
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801512c:	429a      	cmp	r2, r3
 801512e:	d30a      	bcc.n	8015146 <tcp_receive+0x35a>
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801513a:	4413      	add	r3, r2
 801513c:	b29a      	uxth	r2, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015144:	e004      	b.n	8015150 <tcp_receive+0x364>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801514c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015158:	4a98      	ldr	r2, [pc, #608]	@ (80153bc <tcp_receive+0x5d0>)
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	f7ff fdca 	bl	8014cf4 <tcp_free_acked_segments>
 8015160:	4602      	mov	r2, r0
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801516e:	4a94      	ldr	r2, [pc, #592]	@ (80153c0 <tcp_receive+0x5d4>)
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f7ff fdbf 	bl	8014cf4 <tcp_free_acked_segments>
 8015176:	4602      	mov	r2, r0
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015180:	2b00      	cmp	r3, #0
 8015182:	d104      	bne.n	801518e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801518a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801518c:	e002      	b.n	8015194 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2200      	movs	r2, #0
 8015192:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2200      	movs	r2, #0
 8015198:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d103      	bne.n	80151aa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2200      	movs	r2, #0
 80151a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80151b0:	4b84      	ldr	r3, [pc, #528]	@ (80153c4 <tcp_receive+0x5d8>)
 80151b2:	881b      	ldrh	r3, [r3, #0]
 80151b4:	4413      	add	r3, r2
 80151b6:	b29a      	uxth	r2, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	8b5b      	ldrh	r3, [r3, #26]
 80151c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d035      	beq.n	8015236 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d118      	bne.n	8015204 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00c      	beq.n	80151f4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151e2:	68db      	ldr	r3, [r3, #12]
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	4618      	mov	r0, r3
 80151e8:	f7fa ff76 	bl	80100d8 <lwip_htonl>
 80151ec:	4603      	mov	r3, r0
 80151ee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	dc20      	bgt.n	8015236 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	8b5b      	ldrh	r3, [r3, #26]
 80151f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015202:	e018      	b.n	8015236 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	4618      	mov	r0, r3
 8015212:	f7fa ff61 	bl	80100d8 <lwip_htonl>
 8015216:	4603      	mov	r3, r0
 8015218:	1ae3      	subs	r3, r4, r3
 801521a:	2b00      	cmp	r3, #0
 801521c:	dc0b      	bgt.n	8015236 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	8b5b      	ldrh	r3, [r3, #26]
 8015222:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015226:	b29a      	uxth	r2, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801522c:	e003      	b.n	8015236 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f001 ff72 	bl	8017118 <tcp_send_empty_ack>
 8015234:	e000      	b.n	8015238 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015236:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801523c:	2b00      	cmp	r3, #0
 801523e:	d05b      	beq.n	80152f8 <tcp_receive+0x50c>
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015244:	4b60      	ldr	r3, [pc, #384]	@ (80153c8 <tcp_receive+0x5dc>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	1ad3      	subs	r3, r2, r3
 801524a:	2b00      	cmp	r3, #0
 801524c:	da54      	bge.n	80152f8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801524e:	4b5f      	ldr	r3, [pc, #380]	@ (80153cc <tcp_receive+0x5e0>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	b29a      	uxth	r2, r3
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015258:	b29b      	uxth	r3, r3
 801525a:	1ad3      	subs	r3, r2, r3
 801525c:	b29b      	uxth	r3, r3
 801525e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015262:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801526c:	10db      	asrs	r3, r3, #3
 801526e:	b21b      	sxth	r3, r3
 8015270:	b29b      	uxth	r3, r3
 8015272:	1ad3      	subs	r3, r2, r3
 8015274:	b29b      	uxth	r3, r3
 8015276:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015280:	b29a      	uxth	r2, r3
 8015282:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015286:	4413      	add	r3, r2
 8015288:	b29b      	uxth	r3, r3
 801528a:	b21a      	sxth	r2, r3
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015290:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015294:	2b00      	cmp	r3, #0
 8015296:	da05      	bge.n	80152a4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015298:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801529c:	425b      	negs	r3, r3
 801529e:	b29b      	uxth	r3, r3
 80152a0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80152a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80152ae:	109b      	asrs	r3, r3, #2
 80152b0:	b21b      	sxth	r3, r3
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	1ad3      	subs	r3, r2, r3
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80152c2:	b29a      	uxth	r2, r3
 80152c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80152c8:	4413      	add	r3, r2
 80152ca:	b29b      	uxth	r3, r3
 80152cc:	b21a      	sxth	r2, r3
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80152d8:	10db      	asrs	r3, r3, #3
 80152da:	b21b      	sxth	r3, r3
 80152dc:	b29a      	uxth	r2, r3
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80152e4:	b29b      	uxth	r3, r3
 80152e6:	4413      	add	r3, r2
 80152e8:	b29b      	uxth	r3, r3
 80152ea:	b21a      	sxth	r2, r3
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2200      	movs	r2, #0
 80152f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80152f8:	4b35      	ldr	r3, [pc, #212]	@ (80153d0 <tcp_receive+0x5e4>)
 80152fa:	881b      	ldrh	r3, [r3, #0]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	f000 84df 	beq.w	8015cc0 <tcp_receive+0xed4>
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	7d1b      	ldrb	r3, [r3, #20]
 8015306:	2b06      	cmp	r3, #6
 8015308:	f200 84da 	bhi.w	8015cc0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015310:	4b30      	ldr	r3, [pc, #192]	@ (80153d4 <tcp_receive+0x5e8>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	1ad3      	subs	r3, r2, r3
 8015316:	3b01      	subs	r3, #1
 8015318:	2b00      	cmp	r3, #0
 801531a:	f2c0 808f 	blt.w	801543c <tcp_receive+0x650>
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015322:	4b2b      	ldr	r3, [pc, #172]	@ (80153d0 <tcp_receive+0x5e4>)
 8015324:	881b      	ldrh	r3, [r3, #0]
 8015326:	4619      	mov	r1, r3
 8015328:	4b2a      	ldr	r3, [pc, #168]	@ (80153d4 <tcp_receive+0x5e8>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	440b      	add	r3, r1
 801532e:	1ad3      	subs	r3, r2, r3
 8015330:	3301      	adds	r3, #1
 8015332:	2b00      	cmp	r3, #0
 8015334:	f300 8082 	bgt.w	801543c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015338:	4b27      	ldr	r3, [pc, #156]	@ (80153d8 <tcp_receive+0x5ec>)
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015342:	4b24      	ldr	r3, [pc, #144]	@ (80153d4 <tcp_receive+0x5e8>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	1ad3      	subs	r3, r2, r3
 8015348:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801534a:	4b23      	ldr	r3, [pc, #140]	@ (80153d8 <tcp_receive+0x5ec>)
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d106      	bne.n	8015360 <tcp_receive+0x574>
 8015352:	4b22      	ldr	r3, [pc, #136]	@ (80153dc <tcp_receive+0x5f0>)
 8015354:	f240 5294 	movw	r2, #1428	@ 0x594
 8015358:	4921      	ldr	r1, [pc, #132]	@ (80153e0 <tcp_receive+0x5f4>)
 801535a:	4822      	ldr	r0, [pc, #136]	@ (80153e4 <tcp_receive+0x5f8>)
 801535c:	f005 fc2a 	bl	801abb4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015362:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015366:	4293      	cmp	r3, r2
 8015368:	d906      	bls.n	8015378 <tcp_receive+0x58c>
 801536a:	4b1c      	ldr	r3, [pc, #112]	@ (80153dc <tcp_receive+0x5f0>)
 801536c:	f240 5295 	movw	r2, #1429	@ 0x595
 8015370:	491d      	ldr	r1, [pc, #116]	@ (80153e8 <tcp_receive+0x5fc>)
 8015372:	481c      	ldr	r0, [pc, #112]	@ (80153e4 <tcp_receive+0x5f8>)
 8015374:	f005 fc1e 	bl	801abb4 <iprintf>
      off = (u16_t)off32;
 8015378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801537a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801537e:	4b16      	ldr	r3, [pc, #88]	@ (80153d8 <tcp_receive+0x5ec>)
 8015380:	685b      	ldr	r3, [r3, #4]
 8015382:	891b      	ldrh	r3, [r3, #8]
 8015384:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015388:	429a      	cmp	r2, r3
 801538a:	d906      	bls.n	801539a <tcp_receive+0x5ae>
 801538c:	4b13      	ldr	r3, [pc, #76]	@ (80153dc <tcp_receive+0x5f0>)
 801538e:	f240 5297 	movw	r2, #1431	@ 0x597
 8015392:	4916      	ldr	r1, [pc, #88]	@ (80153ec <tcp_receive+0x600>)
 8015394:	4813      	ldr	r0, [pc, #76]	@ (80153e4 <tcp_receive+0x5f8>)
 8015396:	f005 fc0d 	bl	801abb4 <iprintf>
      inseg.len -= off;
 801539a:	4b0f      	ldr	r3, [pc, #60]	@ (80153d8 <tcp_receive+0x5ec>)
 801539c:	891a      	ldrh	r2, [r3, #8]
 801539e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80153a2:	1ad3      	subs	r3, r2, r3
 80153a4:	b29a      	uxth	r2, r3
 80153a6:	4b0c      	ldr	r3, [pc, #48]	@ (80153d8 <tcp_receive+0x5ec>)
 80153a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80153aa:	4b0b      	ldr	r3, [pc, #44]	@ (80153d8 <tcp_receive+0x5ec>)
 80153ac:	685b      	ldr	r3, [r3, #4]
 80153ae:	891a      	ldrh	r2, [r3, #8]
 80153b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80153b4:	1ad3      	subs	r3, r2, r3
 80153b6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80153b8:	e02a      	b.n	8015410 <tcp_receive+0x624>
 80153ba:	bf00      	nop
 80153bc:	0801d240 	.word	0x0801d240
 80153c0:	0801d248 	.word	0x0801d248
 80153c4:	24014bec 	.word	0x24014bec
 80153c8:	24014be8 	.word	0x24014be8
 80153cc:	24014bac 	.word	0x24014bac
 80153d0:	24014bee 	.word	0x24014bee
 80153d4:	24014be4 	.word	0x24014be4
 80153d8:	24014bc4 	.word	0x24014bc4
 80153dc:	0801ced8 	.word	0x0801ced8
 80153e0:	0801d250 	.word	0x0801d250
 80153e4:	0801cf24 	.word	0x0801cf24
 80153e8:	0801d260 	.word	0x0801d260
 80153ec:	0801d270 	.word	0x0801d270
        off -= p->len;
 80153f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80153f2:	895b      	ldrh	r3, [r3, #10]
 80153f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80153f8:	1ad3      	subs	r3, r2, r3
 80153fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80153fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015400:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015402:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015406:	2200      	movs	r2, #0
 8015408:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801540a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015412:	895b      	ldrh	r3, [r3, #10]
 8015414:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015418:	429a      	cmp	r2, r3
 801541a:	d8e9      	bhi.n	80153f0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801541c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015420:	4619      	mov	r1, r3
 8015422:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015424:	f7fc fa6e 	bl	8011904 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801542c:	4a90      	ldr	r2, [pc, #576]	@ (8015670 <tcp_receive+0x884>)
 801542e:	6013      	str	r3, [r2, #0]
 8015430:	4b90      	ldr	r3, [pc, #576]	@ (8015674 <tcp_receive+0x888>)
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	4a8e      	ldr	r2, [pc, #568]	@ (8015670 <tcp_receive+0x884>)
 8015436:	6812      	ldr	r2, [r2, #0]
 8015438:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801543a:	e00d      	b.n	8015458 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801543c:	4b8c      	ldr	r3, [pc, #560]	@ (8015670 <tcp_receive+0x884>)
 801543e:	681a      	ldr	r2, [r3, #0]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015444:	1ad3      	subs	r3, r2, r3
 8015446:	2b00      	cmp	r3, #0
 8015448:	da06      	bge.n	8015458 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	8b5b      	ldrh	r3, [r3, #26]
 801544e:	f043 0302 	orr.w	r3, r3, #2
 8015452:	b29a      	uxth	r2, r3
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015458:	4b85      	ldr	r3, [pc, #532]	@ (8015670 <tcp_receive+0x884>)
 801545a:	681a      	ldr	r2, [r3, #0]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015460:	1ad3      	subs	r3, r2, r3
 8015462:	2b00      	cmp	r3, #0
 8015464:	f2c0 8427 	blt.w	8015cb6 <tcp_receive+0xeca>
 8015468:	4b81      	ldr	r3, [pc, #516]	@ (8015670 <tcp_receive+0x884>)
 801546a:	681a      	ldr	r2, [r3, #0]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015470:	6879      	ldr	r1, [r7, #4]
 8015472:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015474:	440b      	add	r3, r1
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	3301      	adds	r3, #1
 801547a:	2b00      	cmp	r3, #0
 801547c:	f300 841b 	bgt.w	8015cb6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015484:	4b7a      	ldr	r3, [pc, #488]	@ (8015670 <tcp_receive+0x884>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	429a      	cmp	r2, r3
 801548a:	f040 8298 	bne.w	80159be <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801548e:	4b79      	ldr	r3, [pc, #484]	@ (8015674 <tcp_receive+0x888>)
 8015490:	891c      	ldrh	r4, [r3, #8]
 8015492:	4b78      	ldr	r3, [pc, #480]	@ (8015674 <tcp_receive+0x888>)
 8015494:	68db      	ldr	r3, [r3, #12]
 8015496:	899b      	ldrh	r3, [r3, #12]
 8015498:	b29b      	uxth	r3, r3
 801549a:	4618      	mov	r0, r3
 801549c:	f7fa fe06 	bl	80100ac <lwip_htons>
 80154a0:	4603      	mov	r3, r0
 80154a2:	b2db      	uxtb	r3, r3
 80154a4:	f003 0303 	and.w	r3, r3, #3
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d001      	beq.n	80154b0 <tcp_receive+0x6c4>
 80154ac:	2301      	movs	r3, #1
 80154ae:	e000      	b.n	80154b2 <tcp_receive+0x6c6>
 80154b0:	2300      	movs	r3, #0
 80154b2:	4423      	add	r3, r4
 80154b4:	b29a      	uxth	r2, r3
 80154b6:	4b70      	ldr	r3, [pc, #448]	@ (8015678 <tcp_receive+0x88c>)
 80154b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80154be:	4b6e      	ldr	r3, [pc, #440]	@ (8015678 <tcp_receive+0x88c>)
 80154c0:	881b      	ldrh	r3, [r3, #0]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d274      	bcs.n	80155b0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80154c6:	4b6b      	ldr	r3, [pc, #428]	@ (8015674 <tcp_receive+0x888>)
 80154c8:	68db      	ldr	r3, [r3, #12]
 80154ca:	899b      	ldrh	r3, [r3, #12]
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7fa fdec 	bl	80100ac <lwip_htons>
 80154d4:	4603      	mov	r3, r0
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	f003 0301 	and.w	r3, r3, #1
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d01e      	beq.n	801551e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80154e0:	4b64      	ldr	r3, [pc, #400]	@ (8015674 <tcp_receive+0x888>)
 80154e2:	68db      	ldr	r3, [r3, #12]
 80154e4:	899b      	ldrh	r3, [r3, #12]
 80154e6:	b29b      	uxth	r3, r3
 80154e8:	b21b      	sxth	r3, r3
 80154ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80154ee:	b21c      	sxth	r4, r3
 80154f0:	4b60      	ldr	r3, [pc, #384]	@ (8015674 <tcp_receive+0x888>)
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	899b      	ldrh	r3, [r3, #12]
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7fa fdd7 	bl	80100ac <lwip_htons>
 80154fe:	4603      	mov	r3, r0
 8015500:	b2db      	uxtb	r3, r3
 8015502:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015506:	b29b      	uxth	r3, r3
 8015508:	4618      	mov	r0, r3
 801550a:	f7fa fdcf 	bl	80100ac <lwip_htons>
 801550e:	4603      	mov	r3, r0
 8015510:	b21b      	sxth	r3, r3
 8015512:	4323      	orrs	r3, r4
 8015514:	b21a      	sxth	r2, r3
 8015516:	4b57      	ldr	r3, [pc, #348]	@ (8015674 <tcp_receive+0x888>)
 8015518:	68db      	ldr	r3, [r3, #12]
 801551a:	b292      	uxth	r2, r2
 801551c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015522:	4b54      	ldr	r3, [pc, #336]	@ (8015674 <tcp_receive+0x888>)
 8015524:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015526:	4b53      	ldr	r3, [pc, #332]	@ (8015674 <tcp_receive+0x888>)
 8015528:	68db      	ldr	r3, [r3, #12]
 801552a:	899b      	ldrh	r3, [r3, #12]
 801552c:	b29b      	uxth	r3, r3
 801552e:	4618      	mov	r0, r3
 8015530:	f7fa fdbc 	bl	80100ac <lwip_htons>
 8015534:	4603      	mov	r3, r0
 8015536:	b2db      	uxtb	r3, r3
 8015538:	f003 0302 	and.w	r3, r3, #2
 801553c:	2b00      	cmp	r3, #0
 801553e:	d005      	beq.n	801554c <tcp_receive+0x760>
            inseg.len -= 1;
 8015540:	4b4c      	ldr	r3, [pc, #304]	@ (8015674 <tcp_receive+0x888>)
 8015542:	891b      	ldrh	r3, [r3, #8]
 8015544:	3b01      	subs	r3, #1
 8015546:	b29a      	uxth	r2, r3
 8015548:	4b4a      	ldr	r3, [pc, #296]	@ (8015674 <tcp_receive+0x888>)
 801554a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801554c:	4b49      	ldr	r3, [pc, #292]	@ (8015674 <tcp_receive+0x888>)
 801554e:	685b      	ldr	r3, [r3, #4]
 8015550:	4a48      	ldr	r2, [pc, #288]	@ (8015674 <tcp_receive+0x888>)
 8015552:	8912      	ldrh	r2, [r2, #8]
 8015554:	4611      	mov	r1, r2
 8015556:	4618      	mov	r0, r3
 8015558:	f7fc f8d4 	bl	8011704 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801555c:	4b45      	ldr	r3, [pc, #276]	@ (8015674 <tcp_receive+0x888>)
 801555e:	891c      	ldrh	r4, [r3, #8]
 8015560:	4b44      	ldr	r3, [pc, #272]	@ (8015674 <tcp_receive+0x888>)
 8015562:	68db      	ldr	r3, [r3, #12]
 8015564:	899b      	ldrh	r3, [r3, #12]
 8015566:	b29b      	uxth	r3, r3
 8015568:	4618      	mov	r0, r3
 801556a:	f7fa fd9f 	bl	80100ac <lwip_htons>
 801556e:	4603      	mov	r3, r0
 8015570:	b2db      	uxtb	r3, r3
 8015572:	f003 0303 	and.w	r3, r3, #3
 8015576:	2b00      	cmp	r3, #0
 8015578:	d001      	beq.n	801557e <tcp_receive+0x792>
 801557a:	2301      	movs	r3, #1
 801557c:	e000      	b.n	8015580 <tcp_receive+0x794>
 801557e:	2300      	movs	r3, #0
 8015580:	4423      	add	r3, r4
 8015582:	b29a      	uxth	r2, r3
 8015584:	4b3c      	ldr	r3, [pc, #240]	@ (8015678 <tcp_receive+0x88c>)
 8015586:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015588:	4b3b      	ldr	r3, [pc, #236]	@ (8015678 <tcp_receive+0x88c>)
 801558a:	881b      	ldrh	r3, [r3, #0]
 801558c:	461a      	mov	r2, r3
 801558e:	4b38      	ldr	r3, [pc, #224]	@ (8015670 <tcp_receive+0x884>)
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	441a      	add	r2, r3
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015598:	6879      	ldr	r1, [r7, #4]
 801559a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801559c:	440b      	add	r3, r1
 801559e:	429a      	cmp	r2, r3
 80155a0:	d006      	beq.n	80155b0 <tcp_receive+0x7c4>
 80155a2:	4b36      	ldr	r3, [pc, #216]	@ (801567c <tcp_receive+0x890>)
 80155a4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80155a8:	4935      	ldr	r1, [pc, #212]	@ (8015680 <tcp_receive+0x894>)
 80155aa:	4836      	ldr	r0, [pc, #216]	@ (8015684 <tcp_receive+0x898>)
 80155ac:	f005 fb02 	bl	801abb4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	f000 80e6 	beq.w	8015786 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80155ba:	4b2e      	ldr	r3, [pc, #184]	@ (8015674 <tcp_receive+0x888>)
 80155bc:	68db      	ldr	r3, [r3, #12]
 80155be:	899b      	ldrh	r3, [r3, #12]
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7fa fd72 	bl	80100ac <lwip_htons>
 80155c8:	4603      	mov	r3, r0
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	f003 0301 	and.w	r3, r3, #1
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d010      	beq.n	80155f6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80155d4:	e00a      	b.n	80155ec <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155da:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155e0:	681a      	ldr	r2, [r3, #0]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80155e6:	68f8      	ldr	r0, [r7, #12]
 80155e8:	f7fd fd93 	bl	8013112 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d1f0      	bne.n	80155d6 <tcp_receive+0x7ea>
 80155f4:	e0c7      	b.n	8015786 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80155fc:	e051      	b.n	80156a2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80155fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	899b      	ldrh	r3, [r3, #12]
 8015604:	b29b      	uxth	r3, r3
 8015606:	4618      	mov	r0, r3
 8015608:	f7fa fd50 	bl	80100ac <lwip_htons>
 801560c:	4603      	mov	r3, r0
 801560e:	b2db      	uxtb	r3, r3
 8015610:	f003 0301 	and.w	r3, r3, #1
 8015614:	2b00      	cmp	r3, #0
 8015616:	d03c      	beq.n	8015692 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015618:	4b16      	ldr	r3, [pc, #88]	@ (8015674 <tcp_receive+0x888>)
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	899b      	ldrh	r3, [r3, #12]
 801561e:	b29b      	uxth	r3, r3
 8015620:	4618      	mov	r0, r3
 8015622:	f7fa fd43 	bl	80100ac <lwip_htons>
 8015626:	4603      	mov	r3, r0
 8015628:	b2db      	uxtb	r3, r3
 801562a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801562e:	2b00      	cmp	r3, #0
 8015630:	d12f      	bne.n	8015692 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015632:	4b10      	ldr	r3, [pc, #64]	@ (8015674 <tcp_receive+0x888>)
 8015634:	68db      	ldr	r3, [r3, #12]
 8015636:	899b      	ldrh	r3, [r3, #12]
 8015638:	b29c      	uxth	r4, r3
 801563a:	2001      	movs	r0, #1
 801563c:	f7fa fd36 	bl	80100ac <lwip_htons>
 8015640:	4603      	mov	r3, r0
 8015642:	461a      	mov	r2, r3
 8015644:	4b0b      	ldr	r3, [pc, #44]	@ (8015674 <tcp_receive+0x888>)
 8015646:	68db      	ldr	r3, [r3, #12]
 8015648:	4322      	orrs	r2, r4
 801564a:	b292      	uxth	r2, r2
 801564c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801564e:	4b09      	ldr	r3, [pc, #36]	@ (8015674 <tcp_receive+0x888>)
 8015650:	891c      	ldrh	r4, [r3, #8]
 8015652:	4b08      	ldr	r3, [pc, #32]	@ (8015674 <tcp_receive+0x888>)
 8015654:	68db      	ldr	r3, [r3, #12]
 8015656:	899b      	ldrh	r3, [r3, #12]
 8015658:	b29b      	uxth	r3, r3
 801565a:	4618      	mov	r0, r3
 801565c:	f7fa fd26 	bl	80100ac <lwip_htons>
 8015660:	4603      	mov	r3, r0
 8015662:	b2db      	uxtb	r3, r3
 8015664:	f003 0303 	and.w	r3, r3, #3
 8015668:	2b00      	cmp	r3, #0
 801566a:	d00d      	beq.n	8015688 <tcp_receive+0x89c>
 801566c:	2301      	movs	r3, #1
 801566e:	e00c      	b.n	801568a <tcp_receive+0x89e>
 8015670:	24014be4 	.word	0x24014be4
 8015674:	24014bc4 	.word	0x24014bc4
 8015678:	24014bee 	.word	0x24014bee
 801567c:	0801ced8 	.word	0x0801ced8
 8015680:	0801d280 	.word	0x0801d280
 8015684:	0801cf24 	.word	0x0801cf24
 8015688:	2300      	movs	r3, #0
 801568a:	4423      	add	r3, r4
 801568c:	b29a      	uxth	r2, r3
 801568e:	4b98      	ldr	r3, [pc, #608]	@ (80158f0 <tcp_receive+0xb04>)
 8015690:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015694:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801569c:	6938      	ldr	r0, [r7, #16]
 801569e:	f7fd fd38 	bl	8013112 <tcp_seg_free>
            while (next &&
 80156a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d00e      	beq.n	80156c6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80156a8:	4b91      	ldr	r3, [pc, #580]	@ (80158f0 <tcp_receive+0xb04>)
 80156aa:	881b      	ldrh	r3, [r3, #0]
 80156ac:	461a      	mov	r2, r3
 80156ae:	4b91      	ldr	r3, [pc, #580]	@ (80158f4 <tcp_receive+0xb08>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	441a      	add	r2, r3
 80156b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156b6:	68db      	ldr	r3, [r3, #12]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80156bc:	8909      	ldrh	r1, [r1, #8]
 80156be:	440b      	add	r3, r1
 80156c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	da9b      	bge.n	80155fe <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80156c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d059      	beq.n	8015780 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80156cc:	4b88      	ldr	r3, [pc, #544]	@ (80158f0 <tcp_receive+0xb04>)
 80156ce:	881b      	ldrh	r3, [r3, #0]
 80156d0:	461a      	mov	r2, r3
 80156d2:	4b88      	ldr	r3, [pc, #544]	@ (80158f4 <tcp_receive+0xb08>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	441a      	add	r2, r3
 80156d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156da:	68db      	ldr	r3, [r3, #12]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	1ad3      	subs	r3, r2, r3
            if (next &&
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	dd4d      	ble.n	8015780 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80156e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156e6:	68db      	ldr	r3, [r3, #12]
 80156e8:	685b      	ldr	r3, [r3, #4]
 80156ea:	b29a      	uxth	r2, r3
 80156ec:	4b81      	ldr	r3, [pc, #516]	@ (80158f4 <tcp_receive+0xb08>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	b29b      	uxth	r3, r3
 80156f2:	1ad3      	subs	r3, r2, r3
 80156f4:	b29a      	uxth	r2, r3
 80156f6:	4b80      	ldr	r3, [pc, #512]	@ (80158f8 <tcp_receive+0xb0c>)
 80156f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80156fa:	4b7f      	ldr	r3, [pc, #508]	@ (80158f8 <tcp_receive+0xb0c>)
 80156fc:	68db      	ldr	r3, [r3, #12]
 80156fe:	899b      	ldrh	r3, [r3, #12]
 8015700:	b29b      	uxth	r3, r3
 8015702:	4618      	mov	r0, r3
 8015704:	f7fa fcd2 	bl	80100ac <lwip_htons>
 8015708:	4603      	mov	r3, r0
 801570a:	b2db      	uxtb	r3, r3
 801570c:	f003 0302 	and.w	r3, r3, #2
 8015710:	2b00      	cmp	r3, #0
 8015712:	d005      	beq.n	8015720 <tcp_receive+0x934>
                inseg.len -= 1;
 8015714:	4b78      	ldr	r3, [pc, #480]	@ (80158f8 <tcp_receive+0xb0c>)
 8015716:	891b      	ldrh	r3, [r3, #8]
 8015718:	3b01      	subs	r3, #1
 801571a:	b29a      	uxth	r2, r3
 801571c:	4b76      	ldr	r3, [pc, #472]	@ (80158f8 <tcp_receive+0xb0c>)
 801571e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015720:	4b75      	ldr	r3, [pc, #468]	@ (80158f8 <tcp_receive+0xb0c>)
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	4a74      	ldr	r2, [pc, #464]	@ (80158f8 <tcp_receive+0xb0c>)
 8015726:	8912      	ldrh	r2, [r2, #8]
 8015728:	4611      	mov	r1, r2
 801572a:	4618      	mov	r0, r3
 801572c:	f7fb ffea 	bl	8011704 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015730:	4b71      	ldr	r3, [pc, #452]	@ (80158f8 <tcp_receive+0xb0c>)
 8015732:	891c      	ldrh	r4, [r3, #8]
 8015734:	4b70      	ldr	r3, [pc, #448]	@ (80158f8 <tcp_receive+0xb0c>)
 8015736:	68db      	ldr	r3, [r3, #12]
 8015738:	899b      	ldrh	r3, [r3, #12]
 801573a:	b29b      	uxth	r3, r3
 801573c:	4618      	mov	r0, r3
 801573e:	f7fa fcb5 	bl	80100ac <lwip_htons>
 8015742:	4603      	mov	r3, r0
 8015744:	b2db      	uxtb	r3, r3
 8015746:	f003 0303 	and.w	r3, r3, #3
 801574a:	2b00      	cmp	r3, #0
 801574c:	d001      	beq.n	8015752 <tcp_receive+0x966>
 801574e:	2301      	movs	r3, #1
 8015750:	e000      	b.n	8015754 <tcp_receive+0x968>
 8015752:	2300      	movs	r3, #0
 8015754:	4423      	add	r3, r4
 8015756:	b29a      	uxth	r2, r3
 8015758:	4b65      	ldr	r3, [pc, #404]	@ (80158f0 <tcp_receive+0xb04>)
 801575a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801575c:	4b64      	ldr	r3, [pc, #400]	@ (80158f0 <tcp_receive+0xb04>)
 801575e:	881b      	ldrh	r3, [r3, #0]
 8015760:	461a      	mov	r2, r3
 8015762:	4b64      	ldr	r3, [pc, #400]	@ (80158f4 <tcp_receive+0xb08>)
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	441a      	add	r2, r3
 8015768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801576a:	68db      	ldr	r3, [r3, #12]
 801576c:	685b      	ldr	r3, [r3, #4]
 801576e:	429a      	cmp	r2, r3
 8015770:	d006      	beq.n	8015780 <tcp_receive+0x994>
 8015772:	4b62      	ldr	r3, [pc, #392]	@ (80158fc <tcp_receive+0xb10>)
 8015774:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015778:	4961      	ldr	r1, [pc, #388]	@ (8015900 <tcp_receive+0xb14>)
 801577a:	4862      	ldr	r0, [pc, #392]	@ (8015904 <tcp_receive+0xb18>)
 801577c:	f005 fa1a 	bl	801abb4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015784:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015786:	4b5a      	ldr	r3, [pc, #360]	@ (80158f0 <tcp_receive+0xb04>)
 8015788:	881b      	ldrh	r3, [r3, #0]
 801578a:	461a      	mov	r2, r3
 801578c:	4b59      	ldr	r3, [pc, #356]	@ (80158f4 <tcp_receive+0xb08>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	441a      	add	r2, r3
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801579a:	4b55      	ldr	r3, [pc, #340]	@ (80158f0 <tcp_receive+0xb04>)
 801579c:	881b      	ldrh	r3, [r3, #0]
 801579e:	429a      	cmp	r2, r3
 80157a0:	d206      	bcs.n	80157b0 <tcp_receive+0x9c4>
 80157a2:	4b56      	ldr	r3, [pc, #344]	@ (80158fc <tcp_receive+0xb10>)
 80157a4:	f240 6207 	movw	r2, #1543	@ 0x607
 80157a8:	4957      	ldr	r1, [pc, #348]	@ (8015908 <tcp_receive+0xb1c>)
 80157aa:	4856      	ldr	r0, [pc, #344]	@ (8015904 <tcp_receive+0xb18>)
 80157ac:	f005 fa02 	bl	801abb4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80157b4:	4b4e      	ldr	r3, [pc, #312]	@ (80158f0 <tcp_receive+0xb04>)
 80157b6:	881b      	ldrh	r3, [r3, #0]
 80157b8:	1ad3      	subs	r3, r2, r3
 80157ba:	b29a      	uxth	r2, r3
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f7fc ffc1 	bl	8012748 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80157c6:	4b4c      	ldr	r3, [pc, #304]	@ (80158f8 <tcp_receive+0xb0c>)
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	891b      	ldrh	r3, [r3, #8]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d006      	beq.n	80157de <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80157d0:	4b49      	ldr	r3, [pc, #292]	@ (80158f8 <tcp_receive+0xb0c>)
 80157d2:	685b      	ldr	r3, [r3, #4]
 80157d4:	4a4d      	ldr	r2, [pc, #308]	@ (801590c <tcp_receive+0xb20>)
 80157d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80157d8:	4b47      	ldr	r3, [pc, #284]	@ (80158f8 <tcp_receive+0xb0c>)
 80157da:	2200      	movs	r2, #0
 80157dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80157de:	4b46      	ldr	r3, [pc, #280]	@ (80158f8 <tcp_receive+0xb0c>)
 80157e0:	68db      	ldr	r3, [r3, #12]
 80157e2:	899b      	ldrh	r3, [r3, #12]
 80157e4:	b29b      	uxth	r3, r3
 80157e6:	4618      	mov	r0, r3
 80157e8:	f7fa fc60 	bl	80100ac <lwip_htons>
 80157ec:	4603      	mov	r3, r0
 80157ee:	b2db      	uxtb	r3, r3
 80157f0:	f003 0301 	and.w	r3, r3, #1
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f000 80b8 	beq.w	801596a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80157fa:	4b45      	ldr	r3, [pc, #276]	@ (8015910 <tcp_receive+0xb24>)
 80157fc:	781b      	ldrb	r3, [r3, #0]
 80157fe:	f043 0320 	orr.w	r3, r3, #32
 8015802:	b2da      	uxtb	r2, r3
 8015804:	4b42      	ldr	r3, [pc, #264]	@ (8015910 <tcp_receive+0xb24>)
 8015806:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015808:	e0af      	b.n	801596a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801580e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	685b      	ldr	r3, [r3, #4]
 8015818:	4a36      	ldr	r2, [pc, #216]	@ (80158f4 <tcp_receive+0xb08>)
 801581a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	891b      	ldrh	r3, [r3, #8]
 8015820:	461c      	mov	r4, r3
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	68db      	ldr	r3, [r3, #12]
 8015826:	899b      	ldrh	r3, [r3, #12]
 8015828:	b29b      	uxth	r3, r3
 801582a:	4618      	mov	r0, r3
 801582c:	f7fa fc3e 	bl	80100ac <lwip_htons>
 8015830:	4603      	mov	r3, r0
 8015832:	b2db      	uxtb	r3, r3
 8015834:	f003 0303 	and.w	r3, r3, #3
 8015838:	2b00      	cmp	r3, #0
 801583a:	d001      	beq.n	8015840 <tcp_receive+0xa54>
 801583c:	2301      	movs	r3, #1
 801583e:	e000      	b.n	8015842 <tcp_receive+0xa56>
 8015840:	2300      	movs	r3, #0
 8015842:	191a      	adds	r2, r3, r4
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015848:	441a      	add	r2, r3
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015852:	461c      	mov	r4, r3
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	891b      	ldrh	r3, [r3, #8]
 8015858:	461d      	mov	r5, r3
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	68db      	ldr	r3, [r3, #12]
 801585e:	899b      	ldrh	r3, [r3, #12]
 8015860:	b29b      	uxth	r3, r3
 8015862:	4618      	mov	r0, r3
 8015864:	f7fa fc22 	bl	80100ac <lwip_htons>
 8015868:	4603      	mov	r3, r0
 801586a:	b2db      	uxtb	r3, r3
 801586c:	f003 0303 	and.w	r3, r3, #3
 8015870:	2b00      	cmp	r3, #0
 8015872:	d001      	beq.n	8015878 <tcp_receive+0xa8c>
 8015874:	2301      	movs	r3, #1
 8015876:	e000      	b.n	801587a <tcp_receive+0xa8e>
 8015878:	2300      	movs	r3, #0
 801587a:	442b      	add	r3, r5
 801587c:	429c      	cmp	r4, r3
 801587e:	d206      	bcs.n	801588e <tcp_receive+0xaa2>
 8015880:	4b1e      	ldr	r3, [pc, #120]	@ (80158fc <tcp_receive+0xb10>)
 8015882:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015886:	4923      	ldr	r1, [pc, #140]	@ (8015914 <tcp_receive+0xb28>)
 8015888:	481e      	ldr	r0, [pc, #120]	@ (8015904 <tcp_receive+0xb18>)
 801588a:	f005 f993 	bl	801abb4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801588e:	68bb      	ldr	r3, [r7, #8]
 8015890:	891b      	ldrh	r3, [r3, #8]
 8015892:	461c      	mov	r4, r3
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	899b      	ldrh	r3, [r3, #12]
 801589a:	b29b      	uxth	r3, r3
 801589c:	4618      	mov	r0, r3
 801589e:	f7fa fc05 	bl	80100ac <lwip_htons>
 80158a2:	4603      	mov	r3, r0
 80158a4:	b2db      	uxtb	r3, r3
 80158a6:	f003 0303 	and.w	r3, r3, #3
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d001      	beq.n	80158b2 <tcp_receive+0xac6>
 80158ae:	2301      	movs	r3, #1
 80158b0:	e000      	b.n	80158b4 <tcp_receive+0xac8>
 80158b2:	2300      	movs	r3, #0
 80158b4:	1919      	adds	r1, r3, r4
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80158ba:	b28b      	uxth	r3, r1
 80158bc:	1ad3      	subs	r3, r2, r3
 80158be:	b29a      	uxth	r2, r3
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f7fc ff3f 	bl	8012748 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	685b      	ldr	r3, [r3, #4]
 80158ce:	891b      	ldrh	r3, [r3, #8]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d028      	beq.n	8015926 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80158d4:	4b0d      	ldr	r3, [pc, #52]	@ (801590c <tcp_receive+0xb20>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d01d      	beq.n	8015918 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80158dc:	4b0b      	ldr	r3, [pc, #44]	@ (801590c <tcp_receive+0xb20>)
 80158de:	681a      	ldr	r2, [r3, #0]
 80158e0:	68bb      	ldr	r3, [r7, #8]
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	4619      	mov	r1, r3
 80158e6:	4610      	mov	r0, r2
 80158e8:	f7fc f960 	bl	8011bac <pbuf_cat>
 80158ec:	e018      	b.n	8015920 <tcp_receive+0xb34>
 80158ee:	bf00      	nop
 80158f0:	24014bee 	.word	0x24014bee
 80158f4:	24014be4 	.word	0x24014be4
 80158f8:	24014bc4 	.word	0x24014bc4
 80158fc:	0801ced8 	.word	0x0801ced8
 8015900:	0801d2b8 	.word	0x0801d2b8
 8015904:	0801cf24 	.word	0x0801cf24
 8015908:	0801d2f4 	.word	0x0801d2f4
 801590c:	24014bf4 	.word	0x24014bf4
 8015910:	24014bf1 	.word	0x24014bf1
 8015914:	0801d314 	.word	0x0801d314
            } else {
              recv_data = cseg->p;
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	685b      	ldr	r3, [r3, #4]
 801591c:	4a70      	ldr	r2, [pc, #448]	@ (8015ae0 <tcp_receive+0xcf4>)
 801591e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	2200      	movs	r2, #0
 8015924:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	68db      	ldr	r3, [r3, #12]
 801592a:	899b      	ldrh	r3, [r3, #12]
 801592c:	b29b      	uxth	r3, r3
 801592e:	4618      	mov	r0, r3
 8015930:	f7fa fbbc 	bl	80100ac <lwip_htons>
 8015934:	4603      	mov	r3, r0
 8015936:	b2db      	uxtb	r3, r3
 8015938:	f003 0301 	and.w	r3, r3, #1
 801593c:	2b00      	cmp	r3, #0
 801593e:	d00d      	beq.n	801595c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015940:	4b68      	ldr	r3, [pc, #416]	@ (8015ae4 <tcp_receive+0xcf8>)
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	f043 0320 	orr.w	r3, r3, #32
 8015948:	b2da      	uxtb	r2, r3
 801594a:	4b66      	ldr	r3, [pc, #408]	@ (8015ae4 <tcp_receive+0xcf8>)
 801594c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	7d1b      	ldrb	r3, [r3, #20]
 8015952:	2b04      	cmp	r3, #4
 8015954:	d102      	bne.n	801595c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	2207      	movs	r2, #7
 801595a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015964:	68b8      	ldr	r0, [r7, #8]
 8015966:	f7fd fbd4 	bl	8013112 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801596e:	2b00      	cmp	r3, #0
 8015970:	d008      	beq.n	8015984 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015976:	68db      	ldr	r3, [r3, #12]
 8015978:	685a      	ldr	r2, [r3, #4]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801597e:	429a      	cmp	r2, r3
 8015980:	f43f af43 	beq.w	801580a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	8b5b      	ldrh	r3, [r3, #26]
 8015988:	f003 0301 	and.w	r3, r3, #1
 801598c:	2b00      	cmp	r3, #0
 801598e:	d00e      	beq.n	80159ae <tcp_receive+0xbc2>
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	8b5b      	ldrh	r3, [r3, #26]
 8015994:	f023 0301 	bic.w	r3, r3, #1
 8015998:	b29a      	uxth	r2, r3
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	835a      	strh	r2, [r3, #26]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	8b5b      	ldrh	r3, [r3, #26]
 80159a2:	f043 0302 	orr.w	r3, r3, #2
 80159a6:	b29a      	uxth	r2, r3
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80159ac:	e187      	b.n	8015cbe <tcp_receive+0xed2>
        tcp_ack(pcb);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	8b5b      	ldrh	r3, [r3, #26]
 80159b2:	f043 0301 	orr.w	r3, r3, #1
 80159b6:	b29a      	uxth	r2, r3
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80159bc:	e17f      	b.n	8015cbe <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d106      	bne.n	80159d4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80159c6:	4848      	ldr	r0, [pc, #288]	@ (8015ae8 <tcp_receive+0xcfc>)
 80159c8:	f7fd fbbc 	bl	8013144 <tcp_seg_copy>
 80159cc:	4602      	mov	r2, r0
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80159d2:	e16c      	b.n	8015cae <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80159d4:	2300      	movs	r3, #0
 80159d6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80159dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80159de:	e156      	b.n	8015c8e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80159e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159e2:	68db      	ldr	r3, [r3, #12]
 80159e4:	685a      	ldr	r2, [r3, #4]
 80159e6:	4b41      	ldr	r3, [pc, #260]	@ (8015aec <tcp_receive+0xd00>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d11d      	bne.n	8015a2a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80159ee:	4b3e      	ldr	r3, [pc, #248]	@ (8015ae8 <tcp_receive+0xcfc>)
 80159f0:	891a      	ldrh	r2, [r3, #8]
 80159f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159f4:	891b      	ldrh	r3, [r3, #8]
 80159f6:	429a      	cmp	r2, r3
 80159f8:	f240 814e 	bls.w	8015c98 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80159fc:	483a      	ldr	r0, [pc, #232]	@ (8015ae8 <tcp_receive+0xcfc>)
 80159fe:	f7fd fba1 	bl	8013144 <tcp_seg_copy>
 8015a02:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	f000 8148 	beq.w	8015c9c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8015a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d003      	beq.n	8015a1a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a14:	697a      	ldr	r2, [r7, #20]
 8015a16:	601a      	str	r2, [r3, #0]
 8015a18:	e002      	b.n	8015a20 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	697a      	ldr	r2, [r7, #20]
 8015a1e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015a20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015a22:	6978      	ldr	r0, [r7, #20]
 8015a24:	f7ff f8de 	bl	8014be4 <tcp_oos_insert_segment>
                }
                break;
 8015a28:	e138      	b.n	8015c9c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d117      	bne.n	8015a60 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015a30:	4b2e      	ldr	r3, [pc, #184]	@ (8015aec <tcp_receive+0xd00>)
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	685b      	ldr	r3, [r3, #4]
 8015a3a:	1ad3      	subs	r3, r2, r3
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	da57      	bge.n	8015af0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015a40:	4829      	ldr	r0, [pc, #164]	@ (8015ae8 <tcp_receive+0xcfc>)
 8015a42:	f7fd fb7f 	bl	8013144 <tcp_seg_copy>
 8015a46:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015a48:	69bb      	ldr	r3, [r7, #24]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	f000 8128 	beq.w	8015ca0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	69ba      	ldr	r2, [r7, #24]
 8015a54:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015a56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015a58:	69b8      	ldr	r0, [r7, #24]
 8015a5a:	f7ff f8c3 	bl	8014be4 <tcp_oos_insert_segment>
                  }
                  break;
 8015a5e:	e11f      	b.n	8015ca0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015a60:	4b22      	ldr	r3, [pc, #136]	@ (8015aec <tcp_receive+0xd00>)
 8015a62:	681a      	ldr	r2, [r3, #0]
 8015a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a66:	68db      	ldr	r3, [r3, #12]
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	1ad3      	subs	r3, r2, r3
 8015a6c:	3b01      	subs	r3, #1
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	db3e      	blt.n	8015af0 <tcp_receive+0xd04>
 8015a72:	4b1e      	ldr	r3, [pc, #120]	@ (8015aec <tcp_receive+0xd00>)
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a78:	68db      	ldr	r3, [r3, #12]
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	1ad3      	subs	r3, r2, r3
 8015a7e:	3301      	adds	r3, #1
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	dc35      	bgt.n	8015af0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015a84:	4818      	ldr	r0, [pc, #96]	@ (8015ae8 <tcp_receive+0xcfc>)
 8015a86:	f7fd fb5d 	bl	8013144 <tcp_seg_copy>
 8015a8a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015a8c:	69fb      	ldr	r3, [r7, #28]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	f000 8108 	beq.w	8015ca4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a96:	68db      	ldr	r3, [r3, #12]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015a9c:	8912      	ldrh	r2, [r2, #8]
 8015a9e:	441a      	add	r2, r3
 8015aa0:	4b12      	ldr	r3, [pc, #72]	@ (8015aec <tcp_receive+0xd00>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	1ad3      	subs	r3, r2, r3
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	dd12      	ble.n	8015ad0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015aaa:	4b10      	ldr	r3, [pc, #64]	@ (8015aec <tcp_receive+0xd00>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	b29a      	uxth	r2, r3
 8015ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ab2:	68db      	ldr	r3, [r3, #12]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	1ad3      	subs	r3, r2, r3
 8015aba:	b29a      	uxth	r2, r3
 8015abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015abe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ac2:	685a      	ldr	r2, [r3, #4]
 8015ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ac6:	891b      	ldrh	r3, [r3, #8]
 8015ac8:	4619      	mov	r1, r3
 8015aca:	4610      	mov	r0, r2
 8015acc:	f7fb fe1a 	bl	8011704 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ad2:	69fa      	ldr	r2, [r7, #28]
 8015ad4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015ad6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015ad8:	69f8      	ldr	r0, [r7, #28]
 8015ada:	f7ff f883 	bl	8014be4 <tcp_oos_insert_segment>
                  }
                  break;
 8015ade:	e0e1      	b.n	8015ca4 <tcp_receive+0xeb8>
 8015ae0:	24014bf4 	.word	0x24014bf4
 8015ae4:	24014bf1 	.word	0x24014bf1
 8015ae8:	24014bc4 	.word	0x24014bc4
 8015aec:	24014be4 	.word	0x24014be4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015af2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	f040 80c5 	bne.w	8015c88 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015afe:	4b7f      	ldr	r3, [pc, #508]	@ (8015cfc <tcp_receive+0xf10>)
 8015b00:	681a      	ldr	r2, [r3, #0]
 8015b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	f340 80bc 	ble.w	8015c88 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	899b      	ldrh	r3, [r3, #12]
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7fa fac7 	bl	80100ac <lwip_htons>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	b2db      	uxtb	r3, r3
 8015b22:	f003 0301 	and.w	r3, r3, #1
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	f040 80be 	bne.w	8015ca8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015b2c:	4874      	ldr	r0, [pc, #464]	@ (8015d00 <tcp_receive+0xf14>)
 8015b2e:	f7fd fb09 	bl	8013144 <tcp_seg_copy>
 8015b32:	4602      	mov	r2, r0
 8015b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	f000 80b5 	beq.w	8015cac <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b44:	68db      	ldr	r3, [r3, #12]
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015b4a:	8912      	ldrh	r2, [r2, #8]
 8015b4c:	441a      	add	r2, r3
 8015b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8015cfc <tcp_receive+0xf10>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	1ad3      	subs	r3, r2, r3
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	dd12      	ble.n	8015b7e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015b58:	4b68      	ldr	r3, [pc, #416]	@ (8015cfc <tcp_receive+0xf10>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	b29a      	uxth	r2, r3
 8015b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b60:	68db      	ldr	r3, [r3, #12]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	b29b      	uxth	r3, r3
 8015b66:	1ad3      	subs	r3, r2, r3
 8015b68:	b29a      	uxth	r2, r3
 8015b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b70:	685a      	ldr	r2, [r3, #4]
 8015b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b74:	891b      	ldrh	r3, [r3, #8]
 8015b76:	4619      	mov	r1, r3
 8015b78:	4610      	mov	r0, r2
 8015b7a:	f7fb fdc3 	bl	8011704 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015b7e:	4b61      	ldr	r3, [pc, #388]	@ (8015d04 <tcp_receive+0xf18>)
 8015b80:	881b      	ldrh	r3, [r3, #0]
 8015b82:	461a      	mov	r2, r3
 8015b84:	4b5d      	ldr	r3, [pc, #372]	@ (8015cfc <tcp_receive+0xf10>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	441a      	add	r2, r3
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b8e:	6879      	ldr	r1, [r7, #4]
 8015b90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015b92:	440b      	add	r3, r1
 8015b94:	1ad3      	subs	r3, r2, r3
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	f340 8088 	ble.w	8015cac <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	68db      	ldr	r3, [r3, #12]
 8015ba2:	899b      	ldrh	r3, [r3, #12]
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7fa fa80 	bl	80100ac <lwip_htons>
 8015bac:	4603      	mov	r3, r0
 8015bae:	b2db      	uxtb	r3, r3
 8015bb0:	f003 0301 	and.w	r3, r3, #1
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d021      	beq.n	8015bfc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	68db      	ldr	r3, [r3, #12]
 8015bbe:	899b      	ldrh	r3, [r3, #12]
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	b21b      	sxth	r3, r3
 8015bc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015bc8:	b21c      	sxth	r4, r3
 8015bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	68db      	ldr	r3, [r3, #12]
 8015bd0:	899b      	ldrh	r3, [r3, #12]
 8015bd2:	b29b      	uxth	r3, r3
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f7fa fa69 	bl	80100ac <lwip_htons>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	b2db      	uxtb	r3, r3
 8015bde:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015be2:	b29b      	uxth	r3, r3
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7fa fa61 	bl	80100ac <lwip_htons>
 8015bea:	4603      	mov	r3, r0
 8015bec:	b21b      	sxth	r3, r3
 8015bee:	4323      	orrs	r3, r4
 8015bf0:	b21a      	sxth	r2, r3
 8015bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	68db      	ldr	r3, [r3, #12]
 8015bf8:	b292      	uxth	r2, r2
 8015bfa:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c00:	b29a      	uxth	r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c06:	4413      	add	r3, r2
 8015c08:	b299      	uxth	r1, r3
 8015c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8015cfc <tcp_receive+0xf10>)
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	b29a      	uxth	r2, r3
 8015c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	1a8a      	subs	r2, r1, r2
 8015c16:	b292      	uxth	r2, r2
 8015c18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	685a      	ldr	r2, [r3, #4]
 8015c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	891b      	ldrh	r3, [r3, #8]
 8015c26:	4619      	mov	r1, r3
 8015c28:	4610      	mov	r0, r2
 8015c2a:	f7fb fd6b 	bl	8011704 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	891c      	ldrh	r4, [r3, #8]
 8015c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	68db      	ldr	r3, [r3, #12]
 8015c3a:	899b      	ldrh	r3, [r3, #12]
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7fa fa34 	bl	80100ac <lwip_htons>
 8015c44:	4603      	mov	r3, r0
 8015c46:	b2db      	uxtb	r3, r3
 8015c48:	f003 0303 	and.w	r3, r3, #3
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d001      	beq.n	8015c54 <tcp_receive+0xe68>
 8015c50:	2301      	movs	r3, #1
 8015c52:	e000      	b.n	8015c56 <tcp_receive+0xe6a>
 8015c54:	2300      	movs	r3, #0
 8015c56:	4423      	add	r3, r4
 8015c58:	b29a      	uxth	r2, r3
 8015c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8015d04 <tcp_receive+0xf18>)
 8015c5c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015c5e:	4b29      	ldr	r3, [pc, #164]	@ (8015d04 <tcp_receive+0xf18>)
 8015c60:	881b      	ldrh	r3, [r3, #0]
 8015c62:	461a      	mov	r2, r3
 8015c64:	4b25      	ldr	r3, [pc, #148]	@ (8015cfc <tcp_receive+0xf10>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	441a      	add	r2, r3
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c6e:	6879      	ldr	r1, [r7, #4]
 8015c70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015c72:	440b      	add	r3, r1
 8015c74:	429a      	cmp	r2, r3
 8015c76:	d019      	beq.n	8015cac <tcp_receive+0xec0>
 8015c78:	4b23      	ldr	r3, [pc, #140]	@ (8015d08 <tcp_receive+0xf1c>)
 8015c7a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8015c7e:	4923      	ldr	r1, [pc, #140]	@ (8015d0c <tcp_receive+0xf20>)
 8015c80:	4823      	ldr	r0, [pc, #140]	@ (8015d10 <tcp_receive+0xf24>)
 8015c82:	f004 ff97 	bl	801abb4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015c86:	e011      	b.n	8015cac <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f47f aea5 	bne.w	80159e0 <tcp_receive+0xbf4>
 8015c96:	e00a      	b.n	8015cae <tcp_receive+0xec2>
                break;
 8015c98:	bf00      	nop
 8015c9a:	e008      	b.n	8015cae <tcp_receive+0xec2>
                break;
 8015c9c:	bf00      	nop
 8015c9e:	e006      	b.n	8015cae <tcp_receive+0xec2>
                  break;
 8015ca0:	bf00      	nop
 8015ca2:	e004      	b.n	8015cae <tcp_receive+0xec2>
                  break;
 8015ca4:	bf00      	nop
 8015ca6:	e002      	b.n	8015cae <tcp_receive+0xec2>
                  break;
 8015ca8:	bf00      	nop
 8015caa:	e000      	b.n	8015cae <tcp_receive+0xec2>
                break;
 8015cac:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f001 fa32 	bl	8017118 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015cb4:	e003      	b.n	8015cbe <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f001 fa2e 	bl	8017118 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015cbc:	e01a      	b.n	8015cf4 <tcp_receive+0xf08>
 8015cbe:	e019      	b.n	8015cf4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8015cfc <tcp_receive+0xf10>)
 8015cc2:	681a      	ldr	r2, [r3, #0]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cc8:	1ad3      	subs	r3, r2, r3
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	db0a      	blt.n	8015ce4 <tcp_receive+0xef8>
 8015cce:	4b0b      	ldr	r3, [pc, #44]	@ (8015cfc <tcp_receive+0xf10>)
 8015cd0:	681a      	ldr	r2, [r3, #0]
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cd6:	6879      	ldr	r1, [r7, #4]
 8015cd8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015cda:	440b      	add	r3, r1
 8015cdc:	1ad3      	subs	r3, r2, r3
 8015cde:	3301      	adds	r3, #1
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	dd07      	ble.n	8015cf4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	8b5b      	ldrh	r3, [r3, #26]
 8015ce8:	f043 0302 	orr.w	r3, r3, #2
 8015cec:	b29a      	uxth	r2, r3
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015cf2:	e7ff      	b.n	8015cf4 <tcp_receive+0xf08>
 8015cf4:	bf00      	nop
 8015cf6:	3750      	adds	r7, #80	@ 0x50
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8015cfc:	24014be4 	.word	0x24014be4
 8015d00:	24014bc4 	.word	0x24014bc4
 8015d04:	24014bee 	.word	0x24014bee
 8015d08:	0801ced8 	.word	0x0801ced8
 8015d0c:	0801d280 	.word	0x0801d280
 8015d10:	0801cf24 	.word	0x0801cf24

08015d14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015d14:	b480      	push	{r7}
 8015d16:	b083      	sub	sp, #12
 8015d18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015d1a:	4b15      	ldr	r3, [pc, #84]	@ (8015d70 <tcp_get_next_optbyte+0x5c>)
 8015d1c:	881b      	ldrh	r3, [r3, #0]
 8015d1e:	1c5a      	adds	r2, r3, #1
 8015d20:	b291      	uxth	r1, r2
 8015d22:	4a13      	ldr	r2, [pc, #76]	@ (8015d70 <tcp_get_next_optbyte+0x5c>)
 8015d24:	8011      	strh	r1, [r2, #0]
 8015d26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015d28:	4b12      	ldr	r3, [pc, #72]	@ (8015d74 <tcp_get_next_optbyte+0x60>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d004      	beq.n	8015d3a <tcp_get_next_optbyte+0x26>
 8015d30:	4b11      	ldr	r3, [pc, #68]	@ (8015d78 <tcp_get_next_optbyte+0x64>)
 8015d32:	881b      	ldrh	r3, [r3, #0]
 8015d34:	88fa      	ldrh	r2, [r7, #6]
 8015d36:	429a      	cmp	r2, r3
 8015d38:	d208      	bcs.n	8015d4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015d3a:	4b10      	ldr	r3, [pc, #64]	@ (8015d7c <tcp_get_next_optbyte+0x68>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	3314      	adds	r3, #20
 8015d40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015d42:	88fb      	ldrh	r3, [r7, #6]
 8015d44:	683a      	ldr	r2, [r7, #0]
 8015d46:	4413      	add	r3, r2
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	e00b      	b.n	8015d64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015d4c:	88fb      	ldrh	r3, [r7, #6]
 8015d4e:	b2da      	uxtb	r2, r3
 8015d50:	4b09      	ldr	r3, [pc, #36]	@ (8015d78 <tcp_get_next_optbyte+0x64>)
 8015d52:	881b      	ldrh	r3, [r3, #0]
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	1ad3      	subs	r3, r2, r3
 8015d58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015d5a:	4b06      	ldr	r3, [pc, #24]	@ (8015d74 <tcp_get_next_optbyte+0x60>)
 8015d5c:	681a      	ldr	r2, [r3, #0]
 8015d5e:	797b      	ldrb	r3, [r7, #5]
 8015d60:	4413      	add	r3, r2
 8015d62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	370c      	adds	r7, #12
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6e:	4770      	bx	lr
 8015d70:	24014be0 	.word	0x24014be0
 8015d74:	24014bdc 	.word	0x24014bdc
 8015d78:	24014bda 	.word	0x24014bda
 8015d7c:	24014bd4 	.word	0x24014bd4

08015d80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b084      	sub	sp, #16
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d106      	bne.n	8015d9c <tcp_parseopt+0x1c>
 8015d8e:	4b33      	ldr	r3, [pc, #204]	@ (8015e5c <tcp_parseopt+0xdc>)
 8015d90:	f240 727d 	movw	r2, #1917	@ 0x77d
 8015d94:	4932      	ldr	r1, [pc, #200]	@ (8015e60 <tcp_parseopt+0xe0>)
 8015d96:	4833      	ldr	r0, [pc, #204]	@ (8015e64 <tcp_parseopt+0xe4>)
 8015d98:	f004 ff0c 	bl	801abb4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015d9c:	4b32      	ldr	r3, [pc, #200]	@ (8015e68 <tcp_parseopt+0xe8>)
 8015d9e:	881b      	ldrh	r3, [r3, #0]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d057      	beq.n	8015e54 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015da4:	4b31      	ldr	r3, [pc, #196]	@ (8015e6c <tcp_parseopt+0xec>)
 8015da6:	2200      	movs	r2, #0
 8015da8:	801a      	strh	r2, [r3, #0]
 8015daa:	e047      	b.n	8015e3c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8015dac:	f7ff ffb2 	bl	8015d14 <tcp_get_next_optbyte>
 8015db0:	4603      	mov	r3, r0
 8015db2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015db4:	7bfb      	ldrb	r3, [r7, #15]
 8015db6:	2b02      	cmp	r3, #2
 8015db8:	d006      	beq.n	8015dc8 <tcp_parseopt+0x48>
 8015dba:	2b02      	cmp	r3, #2
 8015dbc:	dc2b      	bgt.n	8015e16 <tcp_parseopt+0x96>
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d043      	beq.n	8015e4a <tcp_parseopt+0xca>
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d039      	beq.n	8015e3a <tcp_parseopt+0xba>
 8015dc6:	e026      	b.n	8015e16 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015dc8:	f7ff ffa4 	bl	8015d14 <tcp_get_next_optbyte>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	2b04      	cmp	r3, #4
 8015dd0:	d13d      	bne.n	8015e4e <tcp_parseopt+0xce>
 8015dd2:	4b26      	ldr	r3, [pc, #152]	@ (8015e6c <tcp_parseopt+0xec>)
 8015dd4:	881b      	ldrh	r3, [r3, #0]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	4a23      	ldr	r2, [pc, #140]	@ (8015e68 <tcp_parseopt+0xe8>)
 8015dda:	8812      	ldrh	r2, [r2, #0]
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	da36      	bge.n	8015e4e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015de0:	f7ff ff98 	bl	8015d14 <tcp_get_next_optbyte>
 8015de4:	4603      	mov	r3, r0
 8015de6:	021b      	lsls	r3, r3, #8
 8015de8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015dea:	f7ff ff93 	bl	8015d14 <tcp_get_next_optbyte>
 8015dee:	4603      	mov	r3, r0
 8015df0:	461a      	mov	r2, r3
 8015df2:	89bb      	ldrh	r3, [r7, #12]
 8015df4:	4313      	orrs	r3, r2
 8015df6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015df8:	89bb      	ldrh	r3, [r7, #12]
 8015dfa:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	d804      	bhi.n	8015e0c <tcp_parseopt+0x8c>
 8015e02:	89bb      	ldrh	r3, [r7, #12]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d001      	beq.n	8015e0c <tcp_parseopt+0x8c>
 8015e08:	89ba      	ldrh	r2, [r7, #12]
 8015e0a:	e001      	b.n	8015e10 <tcp_parseopt+0x90>
 8015e0c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8015e14:	e012      	b.n	8015e3c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015e16:	f7ff ff7d 	bl	8015d14 <tcp_get_next_optbyte>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015e1e:	7afb      	ldrb	r3, [r7, #11]
 8015e20:	2b01      	cmp	r3, #1
 8015e22:	d916      	bls.n	8015e52 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015e24:	7afb      	ldrb	r3, [r7, #11]
 8015e26:	b29a      	uxth	r2, r3
 8015e28:	4b10      	ldr	r3, [pc, #64]	@ (8015e6c <tcp_parseopt+0xec>)
 8015e2a:	881b      	ldrh	r3, [r3, #0]
 8015e2c:	4413      	add	r3, r2
 8015e2e:	b29b      	uxth	r3, r3
 8015e30:	3b02      	subs	r3, #2
 8015e32:	b29a      	uxth	r2, r3
 8015e34:	4b0d      	ldr	r3, [pc, #52]	@ (8015e6c <tcp_parseopt+0xec>)
 8015e36:	801a      	strh	r2, [r3, #0]
 8015e38:	e000      	b.n	8015e3c <tcp_parseopt+0xbc>
          break;
 8015e3a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8015e6c <tcp_parseopt+0xec>)
 8015e3e:	881a      	ldrh	r2, [r3, #0]
 8015e40:	4b09      	ldr	r3, [pc, #36]	@ (8015e68 <tcp_parseopt+0xe8>)
 8015e42:	881b      	ldrh	r3, [r3, #0]
 8015e44:	429a      	cmp	r2, r3
 8015e46:	d3b1      	bcc.n	8015dac <tcp_parseopt+0x2c>
 8015e48:	e004      	b.n	8015e54 <tcp_parseopt+0xd4>
          return;
 8015e4a:	bf00      	nop
 8015e4c:	e002      	b.n	8015e54 <tcp_parseopt+0xd4>
            return;
 8015e4e:	bf00      	nop
 8015e50:	e000      	b.n	8015e54 <tcp_parseopt+0xd4>
            return;
 8015e52:	bf00      	nop
      }
    }
  }
}
 8015e54:	3710      	adds	r7, #16
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bd80      	pop	{r7, pc}
 8015e5a:	bf00      	nop
 8015e5c:	0801ced8 	.word	0x0801ced8
 8015e60:	0801d33c 	.word	0x0801d33c
 8015e64:	0801cf24 	.word	0x0801cf24
 8015e68:	24014bd8 	.word	0x24014bd8
 8015e6c:	24014be0 	.word	0x24014be0

08015e70 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015e70:	b480      	push	{r7}
 8015e72:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015e74:	4b05      	ldr	r3, [pc, #20]	@ (8015e8c <tcp_trigger_input_pcb_close+0x1c>)
 8015e76:	781b      	ldrb	r3, [r3, #0]
 8015e78:	f043 0310 	orr.w	r3, r3, #16
 8015e7c:	b2da      	uxtb	r2, r3
 8015e7e:	4b03      	ldr	r3, [pc, #12]	@ (8015e8c <tcp_trigger_input_pcb_close+0x1c>)
 8015e80:	701a      	strb	r2, [r3, #0]
}
 8015e82:	bf00      	nop
 8015e84:	46bd      	mov	sp, r7
 8015e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8a:	4770      	bx	lr
 8015e8c:	24014bf1 	.word	0x24014bf1

08015e90 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b084      	sub	sp, #16
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	60f8      	str	r0, [r7, #12]
 8015e98:	60b9      	str	r1, [r7, #8]
 8015e9a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d00a      	beq.n	8015eb8 <tcp_route+0x28>
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	7a1b      	ldrb	r3, [r3, #8]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d006      	beq.n	8015eb8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	7a1b      	ldrb	r3, [r3, #8]
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7fb fa1c 	bl	80112ec <netif_get_by_index>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	e003      	b.n	8015ec0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f003 fa01 	bl	80192c0 <ip4_route>
 8015ebe:	4603      	mov	r3, r0
  }
}
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	3710      	adds	r7, #16
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015ec8:	b590      	push	{r4, r7, lr}
 8015eca:	b087      	sub	sp, #28
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	60f8      	str	r0, [r7, #12]
 8015ed0:	60b9      	str	r1, [r7, #8]
 8015ed2:	603b      	str	r3, [r7, #0]
 8015ed4:	4613      	mov	r3, r2
 8015ed6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d105      	bne.n	8015eea <tcp_create_segment+0x22>
 8015ede:	4b43      	ldr	r3, [pc, #268]	@ (8015fec <tcp_create_segment+0x124>)
 8015ee0:	22a3      	movs	r2, #163	@ 0xa3
 8015ee2:	4943      	ldr	r1, [pc, #268]	@ (8015ff0 <tcp_create_segment+0x128>)
 8015ee4:	4843      	ldr	r0, [pc, #268]	@ (8015ff4 <tcp_create_segment+0x12c>)
 8015ee6:	f004 fe65 	bl	801abb4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015eea:	68bb      	ldr	r3, [r7, #8]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d105      	bne.n	8015efc <tcp_create_segment+0x34>
 8015ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8015fec <tcp_create_segment+0x124>)
 8015ef2:	22a4      	movs	r2, #164	@ 0xa4
 8015ef4:	4940      	ldr	r1, [pc, #256]	@ (8015ff8 <tcp_create_segment+0x130>)
 8015ef6:	483f      	ldr	r0, [pc, #252]	@ (8015ff4 <tcp_create_segment+0x12c>)
 8015ef8:	f004 fe5c 	bl	801abb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015efc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015f00:	009b      	lsls	r3, r3, #2
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	f003 0304 	and.w	r3, r3, #4
 8015f08:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015f0a:	2004      	movs	r0, #4
 8015f0c:	f7fa fe5e 	bl	8010bcc <memp_malloc>
 8015f10:	6138      	str	r0, [r7, #16]
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d104      	bne.n	8015f22 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015f18:	68b8      	ldr	r0, [r7, #8]
 8015f1a:	f7fb fd79 	bl	8011a10 <pbuf_free>
    return NULL;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	e060      	b.n	8015fe4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015f28:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015f2a:	693b      	ldr	r3, [r7, #16]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	68ba      	ldr	r2, [r7, #8]
 8015f34:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015f36:	68bb      	ldr	r3, [r7, #8]
 8015f38:	891a      	ldrh	r2, [r3, #8]
 8015f3a:	7dfb      	ldrb	r3, [r7, #23]
 8015f3c:	b29b      	uxth	r3, r3
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d205      	bcs.n	8015f4e <tcp_create_segment+0x86>
 8015f42:	4b2a      	ldr	r3, [pc, #168]	@ (8015fec <tcp_create_segment+0x124>)
 8015f44:	22b0      	movs	r2, #176	@ 0xb0
 8015f46:	492d      	ldr	r1, [pc, #180]	@ (8015ffc <tcp_create_segment+0x134>)
 8015f48:	482a      	ldr	r0, [pc, #168]	@ (8015ff4 <tcp_create_segment+0x12c>)
 8015f4a:	f004 fe33 	bl	801abb4 <iprintf>
  seg->len = p->tot_len - optlen;
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	891a      	ldrh	r2, [r3, #8]
 8015f52:	7dfb      	ldrb	r3, [r7, #23]
 8015f54:	b29b      	uxth	r3, r3
 8015f56:	1ad3      	subs	r3, r2, r3
 8015f58:	b29a      	uxth	r2, r3
 8015f5a:	693b      	ldr	r3, [r7, #16]
 8015f5c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015f5e:	2114      	movs	r1, #20
 8015f60:	68b8      	ldr	r0, [r7, #8]
 8015f62:	f7fb fcbf 	bl	80118e4 <pbuf_add_header>
 8015f66:	4603      	mov	r3, r0
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d004      	beq.n	8015f76 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015f6c:	6938      	ldr	r0, [r7, #16]
 8015f6e:	f7fd f8d0 	bl	8013112 <tcp_seg_free>
    return NULL;
 8015f72:	2300      	movs	r3, #0
 8015f74:	e036      	b.n	8015fe4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	685b      	ldr	r3, [r3, #4]
 8015f7a:	685a      	ldr	r2, [r3, #4]
 8015f7c:	693b      	ldr	r3, [r7, #16]
 8015f7e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	8ada      	ldrh	r2, [r3, #22]
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	68dc      	ldr	r4, [r3, #12]
 8015f88:	4610      	mov	r0, r2
 8015f8a:	f7fa f88f 	bl	80100ac <lwip_htons>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	8b1a      	ldrh	r2, [r3, #24]
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	68dc      	ldr	r4, [r3, #12]
 8015f9a:	4610      	mov	r0, r2
 8015f9c:	f7fa f886 	bl	80100ac <lwip_htons>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	68dc      	ldr	r4, [r3, #12]
 8015fa8:	6838      	ldr	r0, [r7, #0]
 8015faa:	f7fa f895 	bl	80100d8 <lwip_htonl>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015fb2:	7dfb      	ldrb	r3, [r7, #23]
 8015fb4:	089b      	lsrs	r3, r3, #2
 8015fb6:	b2db      	uxtb	r3, r3
 8015fb8:	3305      	adds	r3, #5
 8015fba:	b29b      	uxth	r3, r3
 8015fbc:	031b      	lsls	r3, r3, #12
 8015fbe:	b29a      	uxth	r2, r3
 8015fc0:	79fb      	ldrb	r3, [r7, #7]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	4313      	orrs	r3, r2
 8015fc6:	b29a      	uxth	r2, r3
 8015fc8:	693b      	ldr	r3, [r7, #16]
 8015fca:	68dc      	ldr	r4, [r3, #12]
 8015fcc:	4610      	mov	r0, r2
 8015fce:	f7fa f86d 	bl	80100ac <lwip_htons>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	68db      	ldr	r3, [r3, #12]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	749a      	strb	r2, [r3, #18]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	74da      	strb	r2, [r3, #19]
  return seg;
 8015fe2:	693b      	ldr	r3, [r7, #16]
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	371c      	adds	r7, #28
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd90      	pop	{r4, r7, pc}
 8015fec:	0801d358 	.word	0x0801d358
 8015ff0:	0801d38c 	.word	0x0801d38c
 8015ff4:	0801d3ac 	.word	0x0801d3ac
 8015ff8:	0801d3d4 	.word	0x0801d3d4
 8015ffc:	0801d3f8 	.word	0x0801d3f8

08016000 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016000:	b590      	push	{r4, r7, lr}
 8016002:	b08b      	sub	sp, #44	@ 0x2c
 8016004:	af02      	add	r7, sp, #8
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	460b      	mov	r3, r1
 801600a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801600c:	2300      	movs	r3, #0
 801600e:	61fb      	str	r3, [r7, #28]
 8016010:	2300      	movs	r3, #0
 8016012:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016014:	2300      	movs	r3, #0
 8016016:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d106      	bne.n	801602c <tcp_split_unsent_seg+0x2c>
 801601e:	4b95      	ldr	r3, [pc, #596]	@ (8016274 <tcp_split_unsent_seg+0x274>)
 8016020:	f240 324b 	movw	r2, #843	@ 0x34b
 8016024:	4994      	ldr	r1, [pc, #592]	@ (8016278 <tcp_split_unsent_seg+0x278>)
 8016026:	4895      	ldr	r0, [pc, #596]	@ (801627c <tcp_split_unsent_seg+0x27c>)
 8016028:	f004 fdc4 	bl	801abb4 <iprintf>

  useg = pcb->unsent;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016030:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d102      	bne.n	801603e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016038:	f04f 33ff 	mov.w	r3, #4294967295
 801603c:	e116      	b.n	801626c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801603e:	887b      	ldrh	r3, [r7, #2]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d109      	bne.n	8016058 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016044:	4b8b      	ldr	r3, [pc, #556]	@ (8016274 <tcp_split_unsent_seg+0x274>)
 8016046:	f240 3253 	movw	r2, #851	@ 0x353
 801604a:	498d      	ldr	r1, [pc, #564]	@ (8016280 <tcp_split_unsent_seg+0x280>)
 801604c:	488b      	ldr	r0, [pc, #556]	@ (801627c <tcp_split_unsent_seg+0x27c>)
 801604e:	f004 fdb1 	bl	801abb4 <iprintf>
    return ERR_VAL;
 8016052:	f06f 0305 	mvn.w	r3, #5
 8016056:	e109      	b.n	801626c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	891b      	ldrh	r3, [r3, #8]
 801605c:	887a      	ldrh	r2, [r7, #2]
 801605e:	429a      	cmp	r2, r3
 8016060:	d301      	bcc.n	8016066 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016062:	2300      	movs	r3, #0
 8016064:	e102      	b.n	801626c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801606a:	887a      	ldrh	r2, [r7, #2]
 801606c:	429a      	cmp	r2, r3
 801606e:	d906      	bls.n	801607e <tcp_split_unsent_seg+0x7e>
 8016070:	4b80      	ldr	r3, [pc, #512]	@ (8016274 <tcp_split_unsent_seg+0x274>)
 8016072:	f240 325b 	movw	r2, #859	@ 0x35b
 8016076:	4983      	ldr	r1, [pc, #524]	@ (8016284 <tcp_split_unsent_seg+0x284>)
 8016078:	4880      	ldr	r0, [pc, #512]	@ (801627c <tcp_split_unsent_seg+0x27c>)
 801607a:	f004 fd9b 	bl	801abb4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801607e:	697b      	ldr	r3, [r7, #20]
 8016080:	891b      	ldrh	r3, [r3, #8]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d106      	bne.n	8016094 <tcp_split_unsent_seg+0x94>
 8016086:	4b7b      	ldr	r3, [pc, #492]	@ (8016274 <tcp_split_unsent_seg+0x274>)
 8016088:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801608c:	497e      	ldr	r1, [pc, #504]	@ (8016288 <tcp_split_unsent_seg+0x288>)
 801608e:	487b      	ldr	r0, [pc, #492]	@ (801627c <tcp_split_unsent_seg+0x27c>)
 8016090:	f004 fd90 	bl	801abb4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016094:	697b      	ldr	r3, [r7, #20]
 8016096:	7a9b      	ldrb	r3, [r3, #10]
 8016098:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801609a:	7bfb      	ldrb	r3, [r7, #15]
 801609c:	009b      	lsls	r3, r3, #2
 801609e:	b2db      	uxtb	r3, r3
 80160a0:	f003 0304 	and.w	r3, r3, #4
 80160a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80160a6:	697b      	ldr	r3, [r7, #20]
 80160a8:	891a      	ldrh	r2, [r3, #8]
 80160aa:	887b      	ldrh	r3, [r7, #2]
 80160ac:	1ad3      	subs	r3, r2, r3
 80160ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80160b0:	7bbb      	ldrb	r3, [r7, #14]
 80160b2:	b29a      	uxth	r2, r3
 80160b4:	89bb      	ldrh	r3, [r7, #12]
 80160b6:	4413      	add	r3, r2
 80160b8:	b29b      	uxth	r3, r3
 80160ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80160be:	4619      	mov	r1, r3
 80160c0:	2036      	movs	r0, #54	@ 0x36
 80160c2:	f7fb f9bd 	bl	8011440 <pbuf_alloc>
 80160c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	f000 80b7 	beq.w	801623e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80160d0:	697b      	ldr	r3, [r7, #20]
 80160d2:	685b      	ldr	r3, [r3, #4]
 80160d4:	891a      	ldrh	r2, [r3, #8]
 80160d6:	697b      	ldr	r3, [r7, #20]
 80160d8:	891b      	ldrh	r3, [r3, #8]
 80160da:	1ad3      	subs	r3, r2, r3
 80160dc:	b29a      	uxth	r2, r3
 80160de:	887b      	ldrh	r3, [r7, #2]
 80160e0:	4413      	add	r3, r2
 80160e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80160e4:	697b      	ldr	r3, [r7, #20]
 80160e6:	6858      	ldr	r0, [r3, #4]
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	685a      	ldr	r2, [r3, #4]
 80160ec:	7bbb      	ldrb	r3, [r7, #14]
 80160ee:	18d1      	adds	r1, r2, r3
 80160f0:	897b      	ldrh	r3, [r7, #10]
 80160f2:	89ba      	ldrh	r2, [r7, #12]
 80160f4:	f7fb fe92 	bl	8011e1c <pbuf_copy_partial>
 80160f8:	4603      	mov	r3, r0
 80160fa:	461a      	mov	r2, r3
 80160fc:	89bb      	ldrh	r3, [r7, #12]
 80160fe:	4293      	cmp	r3, r2
 8016100:	f040 809f 	bne.w	8016242 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016104:	697b      	ldr	r3, [r7, #20]
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	899b      	ldrh	r3, [r3, #12]
 801610a:	b29b      	uxth	r3, r3
 801610c:	4618      	mov	r0, r3
 801610e:	f7f9 ffcd 	bl	80100ac <lwip_htons>
 8016112:	4603      	mov	r3, r0
 8016114:	b2db      	uxtb	r3, r3
 8016116:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801611a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801611c:	2300      	movs	r3, #0
 801611e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016120:	7efb      	ldrb	r3, [r7, #27]
 8016122:	f003 0308 	and.w	r3, r3, #8
 8016126:	2b00      	cmp	r3, #0
 8016128:	d007      	beq.n	801613a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801612a:	7efb      	ldrb	r3, [r7, #27]
 801612c:	f023 0308 	bic.w	r3, r3, #8
 8016130:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016132:	7ebb      	ldrb	r3, [r7, #26]
 8016134:	f043 0308 	orr.w	r3, r3, #8
 8016138:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801613a:	7efb      	ldrb	r3, [r7, #27]
 801613c:	f003 0301 	and.w	r3, r3, #1
 8016140:	2b00      	cmp	r3, #0
 8016142:	d007      	beq.n	8016154 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016144:	7efb      	ldrb	r3, [r7, #27]
 8016146:	f023 0301 	bic.w	r3, r3, #1
 801614a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801614c:	7ebb      	ldrb	r3, [r7, #26]
 801614e:	f043 0301 	orr.w	r3, r3, #1
 8016152:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	68db      	ldr	r3, [r3, #12]
 8016158:	685b      	ldr	r3, [r3, #4]
 801615a:	4618      	mov	r0, r3
 801615c:	f7f9 ffbc 	bl	80100d8 <lwip_htonl>
 8016160:	4602      	mov	r2, r0
 8016162:	887b      	ldrh	r3, [r7, #2]
 8016164:	18d1      	adds	r1, r2, r3
 8016166:	7eba      	ldrb	r2, [r7, #26]
 8016168:	7bfb      	ldrb	r3, [r7, #15]
 801616a:	9300      	str	r3, [sp, #0]
 801616c:	460b      	mov	r3, r1
 801616e:	6939      	ldr	r1, [r7, #16]
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f7ff fea9 	bl	8015ec8 <tcp_create_segment>
 8016176:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016178:	69fb      	ldr	r3, [r7, #28]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d063      	beq.n	8016246 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801617e:	697b      	ldr	r3, [r7, #20]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	4618      	mov	r0, r3
 8016184:	f7fb fcd2 	bl	8011b2c <pbuf_clen>
 8016188:	4603      	mov	r3, r0
 801618a:	461a      	mov	r2, r3
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016192:	1a9b      	subs	r3, r3, r2
 8016194:	b29a      	uxth	r2, r3
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	6858      	ldr	r0, [r3, #4]
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	891a      	ldrh	r2, [r3, #8]
 80161a6:	89bb      	ldrh	r3, [r7, #12]
 80161a8:	1ad3      	subs	r3, r2, r3
 80161aa:	b29b      	uxth	r3, r3
 80161ac:	4619      	mov	r1, r3
 80161ae:	f7fb faa9 	bl	8011704 <pbuf_realloc>
  useg->len -= remainder;
 80161b2:	697b      	ldr	r3, [r7, #20]
 80161b4:	891a      	ldrh	r2, [r3, #8]
 80161b6:	89bb      	ldrh	r3, [r7, #12]
 80161b8:	1ad3      	subs	r3, r2, r3
 80161ba:	b29a      	uxth	r2, r3
 80161bc:	697b      	ldr	r3, [r7, #20]
 80161be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80161c0:	697b      	ldr	r3, [r7, #20]
 80161c2:	68db      	ldr	r3, [r3, #12]
 80161c4:	899b      	ldrh	r3, [r3, #12]
 80161c6:	b29c      	uxth	r4, r3
 80161c8:	7efb      	ldrb	r3, [r7, #27]
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7f9 ff6d 	bl	80100ac <lwip_htons>
 80161d2:	4603      	mov	r3, r0
 80161d4:	461a      	mov	r2, r3
 80161d6:	697b      	ldr	r3, [r7, #20]
 80161d8:	68db      	ldr	r3, [r3, #12]
 80161da:	4322      	orrs	r2, r4
 80161dc:	b292      	uxth	r2, r2
 80161de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7fb fca1 	bl	8011b2c <pbuf_clen>
 80161ea:	4603      	mov	r3, r0
 80161ec:	461a      	mov	r2, r3
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80161f4:	4413      	add	r3, r2
 80161f6:	b29a      	uxth	r2, r3
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80161fe:	69fb      	ldr	r3, [r7, #28]
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	4618      	mov	r0, r3
 8016204:	f7fb fc92 	bl	8011b2c <pbuf_clen>
 8016208:	4603      	mov	r3, r0
 801620a:	461a      	mov	r2, r3
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016212:	4413      	add	r3, r2
 8016214:	b29a      	uxth	r2, r3
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	69fb      	ldr	r3, [r7, #28]
 8016222:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	69fa      	ldr	r2, [r7, #28]
 8016228:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801622a:	69fb      	ldr	r3, [r7, #28]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d103      	bne.n	801623a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2200      	movs	r2, #0
 8016236:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801623a:	2300      	movs	r3, #0
 801623c:	e016      	b.n	801626c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801623e:	bf00      	nop
 8016240:	e002      	b.n	8016248 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016242:	bf00      	nop
 8016244:	e000      	b.n	8016248 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016246:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016248:	69fb      	ldr	r3, [r7, #28]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d006      	beq.n	801625c <tcp_split_unsent_seg+0x25c>
 801624e:	4b09      	ldr	r3, [pc, #36]	@ (8016274 <tcp_split_unsent_seg+0x274>)
 8016250:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016254:	490d      	ldr	r1, [pc, #52]	@ (801628c <tcp_split_unsent_seg+0x28c>)
 8016256:	4809      	ldr	r0, [pc, #36]	@ (801627c <tcp_split_unsent_seg+0x27c>)
 8016258:	f004 fcac 	bl	801abb4 <iprintf>
  if (p != NULL) {
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d002      	beq.n	8016268 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016262:	6938      	ldr	r0, [r7, #16]
 8016264:	f7fb fbd4 	bl	8011a10 <pbuf_free>
  }

  return ERR_MEM;
 8016268:	f04f 33ff 	mov.w	r3, #4294967295
}
 801626c:	4618      	mov	r0, r3
 801626e:	3724      	adds	r7, #36	@ 0x24
 8016270:	46bd      	mov	sp, r7
 8016272:	bd90      	pop	{r4, r7, pc}
 8016274:	0801d358 	.word	0x0801d358
 8016278:	0801d6ec 	.word	0x0801d6ec
 801627c:	0801d3ac 	.word	0x0801d3ac
 8016280:	0801d710 	.word	0x0801d710
 8016284:	0801d734 	.word	0x0801d734
 8016288:	0801d744 	.word	0x0801d744
 801628c:	0801d754 	.word	0x0801d754

08016290 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016290:	b590      	push	{r4, r7, lr}
 8016292:	b085      	sub	sp, #20
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d106      	bne.n	80162ac <tcp_send_fin+0x1c>
 801629e:	4b21      	ldr	r3, [pc, #132]	@ (8016324 <tcp_send_fin+0x94>)
 80162a0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80162a4:	4920      	ldr	r1, [pc, #128]	@ (8016328 <tcp_send_fin+0x98>)
 80162a6:	4821      	ldr	r0, [pc, #132]	@ (801632c <tcp_send_fin+0x9c>)
 80162a8:	f004 fc84 	bl	801abb4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d02e      	beq.n	8016312 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162b8:	60fb      	str	r3, [r7, #12]
 80162ba:	e002      	b.n	80162c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d1f8      	bne.n	80162bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	68db      	ldr	r3, [r3, #12]
 80162ce:	899b      	ldrh	r3, [r3, #12]
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7f9 feea 	bl	80100ac <lwip_htons>
 80162d8:	4603      	mov	r3, r0
 80162da:	b2db      	uxtb	r3, r3
 80162dc:	f003 0307 	and.w	r3, r3, #7
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d116      	bne.n	8016312 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	68db      	ldr	r3, [r3, #12]
 80162e8:	899b      	ldrh	r3, [r3, #12]
 80162ea:	b29c      	uxth	r4, r3
 80162ec:	2001      	movs	r0, #1
 80162ee:	f7f9 fedd 	bl	80100ac <lwip_htons>
 80162f2:	4603      	mov	r3, r0
 80162f4:	461a      	mov	r2, r3
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	68db      	ldr	r3, [r3, #12]
 80162fa:	4322      	orrs	r2, r4
 80162fc:	b292      	uxth	r2, r2
 80162fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	8b5b      	ldrh	r3, [r3, #26]
 8016304:	f043 0320 	orr.w	r3, r3, #32
 8016308:	b29a      	uxth	r2, r3
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801630e:	2300      	movs	r3, #0
 8016310:	e004      	b.n	801631c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016312:	2101      	movs	r1, #1
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f000 f80b 	bl	8016330 <tcp_enqueue_flags>
 801631a:	4603      	mov	r3, r0
}
 801631c:	4618      	mov	r0, r3
 801631e:	3714      	adds	r7, #20
 8016320:	46bd      	mov	sp, r7
 8016322:	bd90      	pop	{r4, r7, pc}
 8016324:	0801d358 	.word	0x0801d358
 8016328:	0801d760 	.word	0x0801d760
 801632c:	0801d3ac 	.word	0x0801d3ac

08016330 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b08a      	sub	sp, #40	@ 0x28
 8016334:	af02      	add	r7, sp, #8
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	460b      	mov	r3, r1
 801633a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801633c:	2300      	movs	r3, #0
 801633e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016340:	2300      	movs	r3, #0
 8016342:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016344:	78fb      	ldrb	r3, [r7, #3]
 8016346:	f003 0303 	and.w	r3, r3, #3
 801634a:	2b00      	cmp	r3, #0
 801634c:	d106      	bne.n	801635c <tcp_enqueue_flags+0x2c>
 801634e:	4b67      	ldr	r3, [pc, #412]	@ (80164ec <tcp_enqueue_flags+0x1bc>)
 8016350:	f240 4211 	movw	r2, #1041	@ 0x411
 8016354:	4966      	ldr	r1, [pc, #408]	@ (80164f0 <tcp_enqueue_flags+0x1c0>)
 8016356:	4867      	ldr	r0, [pc, #412]	@ (80164f4 <tcp_enqueue_flags+0x1c4>)
 8016358:	f004 fc2c 	bl	801abb4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d106      	bne.n	8016370 <tcp_enqueue_flags+0x40>
 8016362:	4b62      	ldr	r3, [pc, #392]	@ (80164ec <tcp_enqueue_flags+0x1bc>)
 8016364:	f240 4213 	movw	r2, #1043	@ 0x413
 8016368:	4963      	ldr	r1, [pc, #396]	@ (80164f8 <tcp_enqueue_flags+0x1c8>)
 801636a:	4862      	ldr	r0, [pc, #392]	@ (80164f4 <tcp_enqueue_flags+0x1c4>)
 801636c:	f004 fc22 	bl	801abb4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016370:	78fb      	ldrb	r3, [r7, #3]
 8016372:	f003 0302 	and.w	r3, r3, #2
 8016376:	2b00      	cmp	r3, #0
 8016378:	d001      	beq.n	801637e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801637a:	2301      	movs	r3, #1
 801637c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801637e:	7ffb      	ldrb	r3, [r7, #31]
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	b2db      	uxtb	r3, r3
 8016384:	f003 0304 	and.w	r3, r3, #4
 8016388:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801638a:	7dfb      	ldrb	r3, [r7, #23]
 801638c:	b29b      	uxth	r3, r3
 801638e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016392:	4619      	mov	r1, r3
 8016394:	2036      	movs	r0, #54	@ 0x36
 8016396:	f7fb f853 	bl	8011440 <pbuf_alloc>
 801639a:	6138      	str	r0, [r7, #16]
 801639c:	693b      	ldr	r3, [r7, #16]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d109      	bne.n	80163b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	8b5b      	ldrh	r3, [r3, #26]
 80163a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80163aa:	b29a      	uxth	r2, r3
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80163b0:	f04f 33ff 	mov.w	r3, #4294967295
 80163b4:	e095      	b.n	80164e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80163b6:	693b      	ldr	r3, [r7, #16]
 80163b8:	895a      	ldrh	r2, [r3, #10]
 80163ba:	7dfb      	ldrb	r3, [r7, #23]
 80163bc:	b29b      	uxth	r3, r3
 80163be:	429a      	cmp	r2, r3
 80163c0:	d206      	bcs.n	80163d0 <tcp_enqueue_flags+0xa0>
 80163c2:	4b4a      	ldr	r3, [pc, #296]	@ (80164ec <tcp_enqueue_flags+0x1bc>)
 80163c4:	f240 4239 	movw	r2, #1081	@ 0x439
 80163c8:	494c      	ldr	r1, [pc, #304]	@ (80164fc <tcp_enqueue_flags+0x1cc>)
 80163ca:	484a      	ldr	r0, [pc, #296]	@ (80164f4 <tcp_enqueue_flags+0x1c4>)
 80163cc:	f004 fbf2 	bl	801abb4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80163d4:	78fa      	ldrb	r2, [r7, #3]
 80163d6:	7ffb      	ldrb	r3, [r7, #31]
 80163d8:	9300      	str	r3, [sp, #0]
 80163da:	460b      	mov	r3, r1
 80163dc:	6939      	ldr	r1, [r7, #16]
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f7ff fd72 	bl	8015ec8 <tcp_create_segment>
 80163e4:	60f8      	str	r0, [r7, #12]
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d109      	bne.n	8016400 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	8b5b      	ldrh	r3, [r3, #26]
 80163f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80163f4:	b29a      	uxth	r2, r3
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80163fa:	f04f 33ff 	mov.w	r3, #4294967295
 80163fe:	e070      	b.n	80164e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	f003 0303 	and.w	r3, r3, #3
 8016408:	2b00      	cmp	r3, #0
 801640a:	d006      	beq.n	801641a <tcp_enqueue_flags+0xea>
 801640c:	4b37      	ldr	r3, [pc, #220]	@ (80164ec <tcp_enqueue_flags+0x1bc>)
 801640e:	f240 4242 	movw	r2, #1090	@ 0x442
 8016412:	493b      	ldr	r1, [pc, #236]	@ (8016500 <tcp_enqueue_flags+0x1d0>)
 8016414:	4837      	ldr	r0, [pc, #220]	@ (80164f4 <tcp_enqueue_flags+0x1c4>)
 8016416:	f004 fbcd 	bl	801abb4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	891b      	ldrh	r3, [r3, #8]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d006      	beq.n	8016430 <tcp_enqueue_flags+0x100>
 8016422:	4b32      	ldr	r3, [pc, #200]	@ (80164ec <tcp_enqueue_flags+0x1bc>)
 8016424:	f240 4243 	movw	r2, #1091	@ 0x443
 8016428:	4936      	ldr	r1, [pc, #216]	@ (8016504 <tcp_enqueue_flags+0x1d4>)
 801642a:	4832      	ldr	r0, [pc, #200]	@ (80164f4 <tcp_enqueue_flags+0x1c4>)
 801642c:	f004 fbc2 	bl	801abb4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016434:	2b00      	cmp	r3, #0
 8016436:	d103      	bne.n	8016440 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	68fa      	ldr	r2, [r7, #12]
 801643c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801643e:	e00d      	b.n	801645c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016444:	61bb      	str	r3, [r7, #24]
 8016446:	e002      	b.n	801644e <tcp_enqueue_flags+0x11e>
 8016448:	69bb      	ldr	r3, [r7, #24]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	61bb      	str	r3, [r7, #24]
 801644e:	69bb      	ldr	r3, [r7, #24]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d1f8      	bne.n	8016448 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016456:	69bb      	ldr	r3, [r7, #24]
 8016458:	68fa      	ldr	r2, [r7, #12]
 801645a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2200      	movs	r2, #0
 8016460:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016464:	78fb      	ldrb	r3, [r7, #3]
 8016466:	f003 0302 	and.w	r3, r3, #2
 801646a:	2b00      	cmp	r3, #0
 801646c:	d104      	bne.n	8016478 <tcp_enqueue_flags+0x148>
 801646e:	78fb      	ldrb	r3, [r7, #3]
 8016470:	f003 0301 	and.w	r3, r3, #1
 8016474:	2b00      	cmp	r3, #0
 8016476:	d004      	beq.n	8016482 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801647c:	1c5a      	adds	r2, r3, #1
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016482:	78fb      	ldrb	r3, [r7, #3]
 8016484:	f003 0301 	and.w	r3, r3, #1
 8016488:	2b00      	cmp	r3, #0
 801648a:	d006      	beq.n	801649a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	8b5b      	ldrh	r3, [r3, #26]
 8016490:	f043 0320 	orr.w	r3, r3, #32
 8016494:	b29a      	uxth	r2, r3
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	4618      	mov	r0, r3
 80164a0:	f7fb fb44 	bl	8011b2c <pbuf_clen>
 80164a4:	4603      	mov	r3, r0
 80164a6:	461a      	mov	r2, r3
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80164ae:	4413      	add	r3, r2
 80164b0:	b29a      	uxth	r2, r3
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d00e      	beq.n	80164e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d10a      	bne.n	80164e0 <tcp_enqueue_flags+0x1b0>
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d106      	bne.n	80164e0 <tcp_enqueue_flags+0x1b0>
 80164d2:	4b06      	ldr	r3, [pc, #24]	@ (80164ec <tcp_enqueue_flags+0x1bc>)
 80164d4:	f240 4265 	movw	r2, #1125	@ 0x465
 80164d8:	490b      	ldr	r1, [pc, #44]	@ (8016508 <tcp_enqueue_flags+0x1d8>)
 80164da:	4806      	ldr	r0, [pc, #24]	@ (80164f4 <tcp_enqueue_flags+0x1c4>)
 80164dc:	f004 fb6a 	bl	801abb4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80164e0:	2300      	movs	r3, #0
}
 80164e2:	4618      	mov	r0, r3
 80164e4:	3720      	adds	r7, #32
 80164e6:	46bd      	mov	sp, r7
 80164e8:	bd80      	pop	{r7, pc}
 80164ea:	bf00      	nop
 80164ec:	0801d358 	.word	0x0801d358
 80164f0:	0801d77c 	.word	0x0801d77c
 80164f4:	0801d3ac 	.word	0x0801d3ac
 80164f8:	0801d7d4 	.word	0x0801d7d4
 80164fc:	0801d7f4 	.word	0x0801d7f4
 8016500:	0801d830 	.word	0x0801d830
 8016504:	0801d848 	.word	0x0801d848
 8016508:	0801d874 	.word	0x0801d874

0801650c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801650c:	b5b0      	push	{r4, r5, r7, lr}
 801650e:	b08a      	sub	sp, #40	@ 0x28
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d106      	bne.n	8016528 <tcp_output+0x1c>
 801651a:	4b8a      	ldr	r3, [pc, #552]	@ (8016744 <tcp_output+0x238>)
 801651c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016520:	4989      	ldr	r1, [pc, #548]	@ (8016748 <tcp_output+0x23c>)
 8016522:	488a      	ldr	r0, [pc, #552]	@ (801674c <tcp_output+0x240>)
 8016524:	f004 fb46 	bl	801abb4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	7d1b      	ldrb	r3, [r3, #20]
 801652c:	2b01      	cmp	r3, #1
 801652e:	d106      	bne.n	801653e <tcp_output+0x32>
 8016530:	4b84      	ldr	r3, [pc, #528]	@ (8016744 <tcp_output+0x238>)
 8016532:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016536:	4986      	ldr	r1, [pc, #536]	@ (8016750 <tcp_output+0x244>)
 8016538:	4884      	ldr	r0, [pc, #528]	@ (801674c <tcp_output+0x240>)
 801653a:	f004 fb3b 	bl	801abb4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801653e:	4b85      	ldr	r3, [pc, #532]	@ (8016754 <tcp_output+0x248>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	687a      	ldr	r2, [r7, #4]
 8016544:	429a      	cmp	r2, r3
 8016546:	d101      	bne.n	801654c <tcp_output+0x40>
    return ERR_OK;
 8016548:	2300      	movs	r3, #0
 801654a:	e1ce      	b.n	80168ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016558:	4293      	cmp	r3, r2
 801655a:	bf28      	it	cs
 801655c:	4613      	movcs	r3, r2
 801655e:	b29b      	uxth	r3, r3
 8016560:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016566:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8016568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801656a:	2b00      	cmp	r3, #0
 801656c:	d10b      	bne.n	8016586 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	8b5b      	ldrh	r3, [r3, #26]
 8016572:	f003 0302 	and.w	r3, r3, #2
 8016576:	2b00      	cmp	r3, #0
 8016578:	f000 81aa 	beq.w	80168d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f000 fdcb 	bl	8017118 <tcp_send_empty_ack>
 8016582:	4603      	mov	r3, r0
 8016584:	e1b1      	b.n	80168ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016586:	6879      	ldr	r1, [r7, #4]
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	3304      	adds	r3, #4
 801658c:	461a      	mov	r2, r3
 801658e:	6878      	ldr	r0, [r7, #4]
 8016590:	f7ff fc7e 	bl	8015e90 <tcp_route>
 8016594:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d102      	bne.n	80165a2 <tcp_output+0x96>
    return ERR_RTE;
 801659c:	f06f 0303 	mvn.w	r3, #3
 80165a0:	e1a3      	b.n	80168ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d003      	beq.n	80165b0 <tcp_output+0xa4>
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d111      	bne.n	80165d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80165b0:	697b      	ldr	r3, [r7, #20]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d002      	beq.n	80165bc <tcp_output+0xb0>
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	3304      	adds	r3, #4
 80165ba:	e000      	b.n	80165be <tcp_output+0xb2>
 80165bc:	2300      	movs	r3, #0
 80165be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80165c0:	693b      	ldr	r3, [r7, #16]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d102      	bne.n	80165cc <tcp_output+0xc0>
      return ERR_RTE;
 80165c6:	f06f 0303 	mvn.w	r3, #3
 80165ca:	e18e      	b.n	80168ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80165cc:	693b      	ldr	r3, [r7, #16]
 80165ce:	681a      	ldr	r2, [r3, #0]
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80165d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	4618      	mov	r0, r3
 80165dc:	f7f9 fd7c 	bl	80100d8 <lwip_htonl>
 80165e0:	4602      	mov	r2, r0
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80165e6:	1ad3      	subs	r3, r2, r3
 80165e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165ea:	8912      	ldrh	r2, [r2, #8]
 80165ec:	4413      	add	r3, r2
 80165ee:	69ba      	ldr	r2, [r7, #24]
 80165f0:	429a      	cmp	r2, r3
 80165f2:	d227      	bcs.n	8016644 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80165fa:	461a      	mov	r2, r3
 80165fc:	69bb      	ldr	r3, [r7, #24]
 80165fe:	4293      	cmp	r3, r2
 8016600:	d114      	bne.n	801662c <tcp_output+0x120>
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016606:	2b00      	cmp	r3, #0
 8016608:	d110      	bne.n	801662c <tcp_output+0x120>
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016610:	2b00      	cmp	r3, #0
 8016612:	d10b      	bne.n	801662c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	2200      	movs	r2, #0
 8016618:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	2201      	movs	r2, #1
 8016620:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2200      	movs	r2, #0
 8016628:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	8b5b      	ldrh	r3, [r3, #26]
 8016630:	f003 0302 	and.w	r3, r3, #2
 8016634:	2b00      	cmp	r3, #0
 8016636:	f000 814d 	beq.w	80168d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f000 fd6c 	bl	8017118 <tcp_send_empty_ack>
 8016640:	4603      	mov	r3, r0
 8016642:	e152      	b.n	80168ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2200      	movs	r2, #0
 8016648:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016650:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016652:	6a3b      	ldr	r3, [r7, #32]
 8016654:	2b00      	cmp	r3, #0
 8016656:	f000 811c 	beq.w	8016892 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801665a:	e002      	b.n	8016662 <tcp_output+0x156>
 801665c:	6a3b      	ldr	r3, [r7, #32]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	623b      	str	r3, [r7, #32]
 8016662:	6a3b      	ldr	r3, [r7, #32]
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d1f8      	bne.n	801665c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801666a:	e112      	b.n	8016892 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801666e:	68db      	ldr	r3, [r3, #12]
 8016670:	899b      	ldrh	r3, [r3, #12]
 8016672:	b29b      	uxth	r3, r3
 8016674:	4618      	mov	r0, r3
 8016676:	f7f9 fd19 	bl	80100ac <lwip_htons>
 801667a:	4603      	mov	r3, r0
 801667c:	b2db      	uxtb	r3, r3
 801667e:	f003 0304 	and.w	r3, r3, #4
 8016682:	2b00      	cmp	r3, #0
 8016684:	d006      	beq.n	8016694 <tcp_output+0x188>
 8016686:	4b2f      	ldr	r3, [pc, #188]	@ (8016744 <tcp_output+0x238>)
 8016688:	f240 5236 	movw	r2, #1334	@ 0x536
 801668c:	4932      	ldr	r1, [pc, #200]	@ (8016758 <tcp_output+0x24c>)
 801668e:	482f      	ldr	r0, [pc, #188]	@ (801674c <tcp_output+0x240>)
 8016690:	f004 fa90 	bl	801abb4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016698:	2b00      	cmp	r3, #0
 801669a:	d01f      	beq.n	80166dc <tcp_output+0x1d0>
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	8b5b      	ldrh	r3, [r3, #26]
 80166a0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d119      	bne.n	80166dc <tcp_output+0x1d0>
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d00b      	beq.n	80166c8 <tcp_output+0x1bc>
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d110      	bne.n	80166dc <tcp_output+0x1d0>
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80166be:	891a      	ldrh	r2, [r3, #8]
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d209      	bcs.n	80166dc <tcp_output+0x1d0>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d004      	beq.n	80166dc <tcp_output+0x1d0>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80166d8:	2b0f      	cmp	r3, #15
 80166da:	d901      	bls.n	80166e0 <tcp_output+0x1d4>
 80166dc:	2301      	movs	r3, #1
 80166de:	e000      	b.n	80166e2 <tcp_output+0x1d6>
 80166e0:	2300      	movs	r3, #0
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d106      	bne.n	80166f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	8b5b      	ldrh	r3, [r3, #26]
 80166ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	f000 80e4 	beq.w	80168bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	7d1b      	ldrb	r3, [r3, #20]
 80166f8:	2b02      	cmp	r3, #2
 80166fa:	d00d      	beq.n	8016718 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80166fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166fe:	68db      	ldr	r3, [r3, #12]
 8016700:	899b      	ldrh	r3, [r3, #12]
 8016702:	b29c      	uxth	r4, r3
 8016704:	2010      	movs	r0, #16
 8016706:	f7f9 fcd1 	bl	80100ac <lwip_htons>
 801670a:	4603      	mov	r3, r0
 801670c:	461a      	mov	r2, r3
 801670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016710:	68db      	ldr	r3, [r3, #12]
 8016712:	4322      	orrs	r2, r4
 8016714:	b292      	uxth	r2, r2
 8016716:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016718:	697a      	ldr	r2, [r7, #20]
 801671a:	6879      	ldr	r1, [r7, #4]
 801671c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801671e:	f000 f909 	bl	8016934 <tcp_output_segment>
 8016722:	4603      	mov	r3, r0
 8016724:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d016      	beq.n	801675c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	8b5b      	ldrh	r3, [r3, #26]
 8016732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016736:	b29a      	uxth	r2, r3
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	835a      	strh	r2, [r3, #26]
      return err;
 801673c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016740:	e0d3      	b.n	80168ea <tcp_output+0x3de>
 8016742:	bf00      	nop
 8016744:	0801d358 	.word	0x0801d358
 8016748:	0801d89c 	.word	0x0801d89c
 801674c:	0801d3ac 	.word	0x0801d3ac
 8016750:	0801d8b4 	.word	0x0801d8b4
 8016754:	24014bf8 	.word	0x24014bf8
 8016758:	0801d8dc 	.word	0x0801d8dc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801675e:	681a      	ldr	r2, [r3, #0]
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	7d1b      	ldrb	r3, [r3, #20]
 8016768:	2b02      	cmp	r3, #2
 801676a:	d006      	beq.n	801677a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	8b5b      	ldrh	r3, [r3, #26]
 8016770:	f023 0303 	bic.w	r3, r3, #3
 8016774:	b29a      	uxth	r2, r3
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801677c:	68db      	ldr	r3, [r3, #12]
 801677e:	685b      	ldr	r3, [r3, #4]
 8016780:	4618      	mov	r0, r3
 8016782:	f7f9 fca9 	bl	80100d8 <lwip_htonl>
 8016786:	4604      	mov	r4, r0
 8016788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801678a:	891b      	ldrh	r3, [r3, #8]
 801678c:	461d      	mov	r5, r3
 801678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016790:	68db      	ldr	r3, [r3, #12]
 8016792:	899b      	ldrh	r3, [r3, #12]
 8016794:	b29b      	uxth	r3, r3
 8016796:	4618      	mov	r0, r3
 8016798:	f7f9 fc88 	bl	80100ac <lwip_htons>
 801679c:	4603      	mov	r3, r0
 801679e:	b2db      	uxtb	r3, r3
 80167a0:	f003 0303 	and.w	r3, r3, #3
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d001      	beq.n	80167ac <tcp_output+0x2a0>
 80167a8:	2301      	movs	r3, #1
 80167aa:	e000      	b.n	80167ae <tcp_output+0x2a2>
 80167ac:	2300      	movs	r3, #0
 80167ae:	442b      	add	r3, r5
 80167b0:	4423      	add	r3, r4
 80167b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	1ad3      	subs	r3, r2, r3
 80167bc:	2b00      	cmp	r3, #0
 80167be:	da02      	bge.n	80167c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	68ba      	ldr	r2, [r7, #8]
 80167c4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80167c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167c8:	891b      	ldrh	r3, [r3, #8]
 80167ca:	461c      	mov	r4, r3
 80167cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	899b      	ldrh	r3, [r3, #12]
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7f9 fc69 	bl	80100ac <lwip_htons>
 80167da:	4603      	mov	r3, r0
 80167dc:	b2db      	uxtb	r3, r3
 80167de:	f003 0303 	and.w	r3, r3, #3
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d001      	beq.n	80167ea <tcp_output+0x2de>
 80167e6:	2301      	movs	r3, #1
 80167e8:	e000      	b.n	80167ec <tcp_output+0x2e0>
 80167ea:	2300      	movs	r3, #0
 80167ec:	4423      	add	r3, r4
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d049      	beq.n	8016886 <tcp_output+0x37a>
      seg->next = NULL;
 80167f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167f4:	2200      	movs	r2, #0
 80167f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d105      	bne.n	801680c <tcp_output+0x300>
        pcb->unacked = seg;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016804:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016808:	623b      	str	r3, [r7, #32]
 801680a:	e03f      	b.n	801688c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801680e:	68db      	ldr	r3, [r3, #12]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	4618      	mov	r0, r3
 8016814:	f7f9 fc60 	bl	80100d8 <lwip_htonl>
 8016818:	4604      	mov	r4, r0
 801681a:	6a3b      	ldr	r3, [r7, #32]
 801681c:	68db      	ldr	r3, [r3, #12]
 801681e:	685b      	ldr	r3, [r3, #4]
 8016820:	4618      	mov	r0, r3
 8016822:	f7f9 fc59 	bl	80100d8 <lwip_htonl>
 8016826:	4603      	mov	r3, r0
 8016828:	1ae3      	subs	r3, r4, r3
 801682a:	2b00      	cmp	r3, #0
 801682c:	da24      	bge.n	8016878 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	3370      	adds	r3, #112	@ 0x70
 8016832:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016834:	e002      	b.n	801683c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016836:	69fb      	ldr	r3, [r7, #28]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801683c:	69fb      	ldr	r3, [r7, #28]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d011      	beq.n	8016868 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	68db      	ldr	r3, [r3, #12]
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	4618      	mov	r0, r3
 801684e:	f7f9 fc43 	bl	80100d8 <lwip_htonl>
 8016852:	4604      	mov	r4, r0
 8016854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016856:	68db      	ldr	r3, [r3, #12]
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	4618      	mov	r0, r3
 801685c:	f7f9 fc3c 	bl	80100d8 <lwip_htonl>
 8016860:	4603      	mov	r3, r0
 8016862:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016864:	2b00      	cmp	r3, #0
 8016866:	dbe6      	blt.n	8016836 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801686e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016874:	601a      	str	r2, [r3, #0]
 8016876:	e009      	b.n	801688c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016878:	6a3b      	ldr	r3, [r7, #32]
 801687a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801687c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801687e:	6a3b      	ldr	r3, [r7, #32]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	623b      	str	r3, [r7, #32]
 8016884:	e002      	b.n	801688c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016886:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016888:	f7fc fc43 	bl	8013112 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016890:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8016892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016894:	2b00      	cmp	r3, #0
 8016896:	d012      	beq.n	80168be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801689a:	68db      	ldr	r3, [r3, #12]
 801689c:	685b      	ldr	r3, [r3, #4]
 801689e:	4618      	mov	r0, r3
 80168a0:	f7f9 fc1a 	bl	80100d8 <lwip_htonl>
 80168a4:	4602      	mov	r2, r0
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80168aa:	1ad3      	subs	r3, r2, r3
 80168ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80168ae:	8912      	ldrh	r2, [r2, #8]
 80168b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80168b2:	69ba      	ldr	r2, [r7, #24]
 80168b4:	429a      	cmp	r2, r3
 80168b6:	f4bf aed9 	bcs.w	801666c <tcp_output+0x160>
 80168ba:	e000      	b.n	80168be <tcp_output+0x3b2>
      break;
 80168bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d108      	bne.n	80168d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	2200      	movs	r2, #0
 80168ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80168ce:	e004      	b.n	80168da <tcp_output+0x3ce>
    goto output_done;
 80168d0:	bf00      	nop
 80168d2:	e002      	b.n	80168da <tcp_output+0x3ce>
    goto output_done;
 80168d4:	bf00      	nop
 80168d6:	e000      	b.n	80168da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80168d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	8b5b      	ldrh	r3, [r3, #26]
 80168de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80168e2:	b29a      	uxth	r2, r3
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80168e8:	2300      	movs	r3, #0
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3728      	adds	r7, #40	@ 0x28
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bdb0      	pop	{r4, r5, r7, pc}
 80168f2:	bf00      	nop

080168f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d106      	bne.n	8016910 <tcp_output_segment_busy+0x1c>
 8016902:	4b09      	ldr	r3, [pc, #36]	@ (8016928 <tcp_output_segment_busy+0x34>)
 8016904:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016908:	4908      	ldr	r1, [pc, #32]	@ (801692c <tcp_output_segment_busy+0x38>)
 801690a:	4809      	ldr	r0, [pc, #36]	@ (8016930 <tcp_output_segment_busy+0x3c>)
 801690c:	f004 f952 	bl	801abb4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	685b      	ldr	r3, [r3, #4]
 8016914:	7b9b      	ldrb	r3, [r3, #14]
 8016916:	2b01      	cmp	r3, #1
 8016918:	d001      	beq.n	801691e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801691a:	2301      	movs	r3, #1
 801691c:	e000      	b.n	8016920 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801691e:	2300      	movs	r3, #0
}
 8016920:	4618      	mov	r0, r3
 8016922:	3708      	adds	r7, #8
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}
 8016928:	0801d358 	.word	0x0801d358
 801692c:	0801d8f4 	.word	0x0801d8f4
 8016930:	0801d3ac 	.word	0x0801d3ac

08016934 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016934:	b5b0      	push	{r4, r5, r7, lr}
 8016936:	b08c      	sub	sp, #48	@ 0x30
 8016938:	af04      	add	r7, sp, #16
 801693a:	60f8      	str	r0, [r7, #12]
 801693c:	60b9      	str	r1, [r7, #8]
 801693e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d106      	bne.n	8016954 <tcp_output_segment+0x20>
 8016946:	4b64      	ldr	r3, [pc, #400]	@ (8016ad8 <tcp_output_segment+0x1a4>)
 8016948:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801694c:	4963      	ldr	r1, [pc, #396]	@ (8016adc <tcp_output_segment+0x1a8>)
 801694e:	4864      	ldr	r0, [pc, #400]	@ (8016ae0 <tcp_output_segment+0x1ac>)
 8016950:	f004 f930 	bl	801abb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d106      	bne.n	8016968 <tcp_output_segment+0x34>
 801695a:	4b5f      	ldr	r3, [pc, #380]	@ (8016ad8 <tcp_output_segment+0x1a4>)
 801695c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8016960:	4960      	ldr	r1, [pc, #384]	@ (8016ae4 <tcp_output_segment+0x1b0>)
 8016962:	485f      	ldr	r0, [pc, #380]	@ (8016ae0 <tcp_output_segment+0x1ac>)
 8016964:	f004 f926 	bl	801abb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d106      	bne.n	801697c <tcp_output_segment+0x48>
 801696e:	4b5a      	ldr	r3, [pc, #360]	@ (8016ad8 <tcp_output_segment+0x1a4>)
 8016970:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8016974:	495c      	ldr	r1, [pc, #368]	@ (8016ae8 <tcp_output_segment+0x1b4>)
 8016976:	485a      	ldr	r0, [pc, #360]	@ (8016ae0 <tcp_output_segment+0x1ac>)
 8016978:	f004 f91c 	bl	801abb4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801697c:	68f8      	ldr	r0, [r7, #12]
 801697e:	f7ff ffb9 	bl	80168f4 <tcp_output_segment_busy>
 8016982:	4603      	mov	r3, r0
 8016984:	2b00      	cmp	r3, #0
 8016986:	d001      	beq.n	801698c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016988:	2300      	movs	r3, #0
 801698a:	e0a1      	b.n	8016ad0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801698c:	68bb      	ldr	r3, [r7, #8]
 801698e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	68dc      	ldr	r4, [r3, #12]
 8016994:	4610      	mov	r0, r2
 8016996:	f7f9 fb9f 	bl	80100d8 <lwip_htonl>
 801699a:	4603      	mov	r3, r0
 801699c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801699e:	68bb      	ldr	r3, [r7, #8]
 80169a0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	68dc      	ldr	r4, [r3, #12]
 80169a6:	4610      	mov	r0, r2
 80169a8:	f7f9 fb80 	bl	80100ac <lwip_htons>
 80169ac:	4603      	mov	r3, r0
 80169ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80169b0:	68bb      	ldr	r3, [r7, #8]
 80169b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169b4:	68ba      	ldr	r2, [r7, #8]
 80169b6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80169b8:	441a      	add	r2, r3
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	68db      	ldr	r3, [r3, #12]
 80169c2:	3314      	adds	r3, #20
 80169c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	7a9b      	ldrb	r3, [r3, #10]
 80169ca:	f003 0301 	and.w	r3, r3, #1
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d015      	beq.n	80169fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	3304      	adds	r3, #4
 80169d6:	461a      	mov	r2, r3
 80169d8:	6879      	ldr	r1, [r7, #4]
 80169da:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80169de:	f7fc fe8f 	bl	8013700 <tcp_eff_send_mss_netif>
 80169e2:	4603      	mov	r3, r0
 80169e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80169e6:	8b7b      	ldrh	r3, [r7, #26]
 80169e8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7f9 fb73 	bl	80100d8 <lwip_htonl>
 80169f2:	4602      	mov	r2, r0
 80169f4:	69fb      	ldr	r3, [r7, #28]
 80169f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80169f8:	69fb      	ldr	r3, [r7, #28]
 80169fa:	3304      	adds	r3, #4
 80169fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80169fe:	68bb      	ldr	r3, [r7, #8]
 8016a00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	da02      	bge.n	8016a0e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016a08:	68bb      	ldr	r3, [r7, #8]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8016a0e:	68bb      	ldr	r3, [r7, #8]
 8016a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d10c      	bne.n	8016a30 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016a16:	4b35      	ldr	r3, [pc, #212]	@ (8016aec <tcp_output_segment+0x1b8>)
 8016a18:	681a      	ldr	r2, [r3, #0]
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	68db      	ldr	r3, [r3, #12]
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	4618      	mov	r0, r3
 8016a26:	f7f9 fb57 	bl	80100d8 <lwip_htonl>
 8016a2a:	4602      	mov	r2, r0
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	68da      	ldr	r2, [r3, #12]
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	685b      	ldr	r3, [r3, #4]
 8016a38:	685b      	ldr	r3, [r3, #4]
 8016a3a:	1ad3      	subs	r3, r2, r3
 8016a3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	8959      	ldrh	r1, [r3, #10]
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	685b      	ldr	r3, [r3, #4]
 8016a48:	8b3a      	ldrh	r2, [r7, #24]
 8016a4a:	1a8a      	subs	r2, r1, r2
 8016a4c:	b292      	uxth	r2, r2
 8016a4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	8919      	ldrh	r1, [r3, #8]
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	685b      	ldr	r3, [r3, #4]
 8016a5a:	8b3a      	ldrh	r2, [r7, #24]
 8016a5c:	1a8a      	subs	r2, r1, r2
 8016a5e:	b292      	uxth	r2, r2
 8016a60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	685b      	ldr	r3, [r3, #4]
 8016a66:	68fa      	ldr	r2, [r7, #12]
 8016a68:	68d2      	ldr	r2, [r2, #12]
 8016a6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	68db      	ldr	r3, [r3, #12]
 8016a70:	2200      	movs	r2, #0
 8016a72:	741a      	strb	r2, [r3, #16]
 8016a74:	2200      	movs	r2, #0
 8016a76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	68da      	ldr	r2, [r3, #12]
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	7a9b      	ldrb	r3, [r3, #10]
 8016a80:	f003 0301 	and.w	r3, r3, #1
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d001      	beq.n	8016a8c <tcp_output_segment+0x158>
 8016a88:	2318      	movs	r3, #24
 8016a8a:	e000      	b.n	8016a8e <tcp_output_segment+0x15a>
 8016a8c:	2314      	movs	r3, #20
 8016a8e:	4413      	add	r3, r2
 8016a90:	69fa      	ldr	r2, [r7, #28]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d006      	beq.n	8016aa4 <tcp_output_segment+0x170>
 8016a96:	4b10      	ldr	r3, [pc, #64]	@ (8016ad8 <tcp_output_segment+0x1a4>)
 8016a98:	f240 621c 	movw	r2, #1564	@ 0x61c
 8016a9c:	4914      	ldr	r1, [pc, #80]	@ (8016af0 <tcp_output_segment+0x1bc>)
 8016a9e:	4810      	ldr	r0, [pc, #64]	@ (8016ae0 <tcp_output_segment+0x1ac>)
 8016aa0:	f004 f888 	bl	801abb4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	6858      	ldr	r0, [r3, #4]
 8016aa8:	68b9      	ldr	r1, [r7, #8]
 8016aaa:	68bb      	ldr	r3, [r7, #8]
 8016aac:	1d1c      	adds	r4, r3, #4
 8016aae:	68bb      	ldr	r3, [r7, #8]
 8016ab0:	7add      	ldrb	r5, [r3, #11]
 8016ab2:	68bb      	ldr	r3, [r7, #8]
 8016ab4:	7a9b      	ldrb	r3, [r3, #10]
 8016ab6:	687a      	ldr	r2, [r7, #4]
 8016ab8:	9202      	str	r2, [sp, #8]
 8016aba:	2206      	movs	r2, #6
 8016abc:	9201      	str	r2, [sp, #4]
 8016abe:	9300      	str	r3, [sp, #0]
 8016ac0:	462b      	mov	r3, r5
 8016ac2:	4622      	mov	r2, r4
 8016ac4:	f002 fdc6 	bl	8019654 <ip4_output_if>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	3720      	adds	r7, #32
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8016ad8:	0801d358 	.word	0x0801d358
 8016adc:	0801d91c 	.word	0x0801d91c
 8016ae0:	0801d3ac 	.word	0x0801d3ac
 8016ae4:	0801d93c 	.word	0x0801d93c
 8016ae8:	0801d95c 	.word	0x0801d95c
 8016aec:	24014bac 	.word	0x24014bac
 8016af0:	0801d980 	.word	0x0801d980

08016af4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016af4:	b5b0      	push	{r4, r5, r7, lr}
 8016af6:	b084      	sub	sp, #16
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d106      	bne.n	8016b10 <tcp_rexmit_rto_prepare+0x1c>
 8016b02:	4b31      	ldr	r3, [pc, #196]	@ (8016bc8 <tcp_rexmit_rto_prepare+0xd4>)
 8016b04:	f240 6263 	movw	r2, #1635	@ 0x663
 8016b08:	4930      	ldr	r1, [pc, #192]	@ (8016bcc <tcp_rexmit_rto_prepare+0xd8>)
 8016b0a:	4831      	ldr	r0, [pc, #196]	@ (8016bd0 <tcp_rexmit_rto_prepare+0xdc>)
 8016b0c:	f004 f852 	bl	801abb4 <iprintf>

  if (pcb->unacked == NULL) {
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d102      	bne.n	8016b1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016b18:	f06f 0305 	mvn.w	r3, #5
 8016b1c:	e050      	b.n	8016bc0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b22:	60fb      	str	r3, [r7, #12]
 8016b24:	e00b      	b.n	8016b3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016b26:	68f8      	ldr	r0, [r7, #12]
 8016b28:	f7ff fee4 	bl	80168f4 <tcp_output_segment_busy>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d002      	beq.n	8016b38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016b32:	f06f 0305 	mvn.w	r3, #5
 8016b36:	e043      	b.n	8016bc0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	60fb      	str	r3, [r7, #12]
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d1ef      	bne.n	8016b26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016b46:	68f8      	ldr	r0, [r7, #12]
 8016b48:	f7ff fed4 	bl	80168f4 <tcp_output_segment_busy>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d002      	beq.n	8016b58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016b52:	f06f 0305 	mvn.w	r3, #5
 8016b56:	e033      	b.n	8016bc0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	8b5b      	ldrh	r3, [r3, #26]
 8016b72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016b76:	b29a      	uxth	r2, r3
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	685b      	ldr	r3, [r3, #4]
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7f9 faa8 	bl	80100d8 <lwip_htonl>
 8016b88:	4604      	mov	r4, r0
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	891b      	ldrh	r3, [r3, #8]
 8016b8e:	461d      	mov	r5, r3
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	68db      	ldr	r3, [r3, #12]
 8016b94:	899b      	ldrh	r3, [r3, #12]
 8016b96:	b29b      	uxth	r3, r3
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f7f9 fa87 	bl	80100ac <lwip_htons>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	b2db      	uxtb	r3, r3
 8016ba2:	f003 0303 	and.w	r3, r3, #3
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d001      	beq.n	8016bae <tcp_rexmit_rto_prepare+0xba>
 8016baa:	2301      	movs	r3, #1
 8016bac:	e000      	b.n	8016bb0 <tcp_rexmit_rto_prepare+0xbc>
 8016bae:	2300      	movs	r3, #0
 8016bb0:	442b      	add	r3, r5
 8016bb2:	18e2      	adds	r2, r4, r3
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2200      	movs	r2, #0
 8016bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8016bbe:	2300      	movs	r3, #0
}
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	3710      	adds	r7, #16
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8016bc8:	0801d358 	.word	0x0801d358
 8016bcc:	0801d994 	.word	0x0801d994
 8016bd0:	0801d3ac 	.word	0x0801d3ac

08016bd4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d106      	bne.n	8016bf0 <tcp_rexmit_rto_commit+0x1c>
 8016be2:	4b0d      	ldr	r3, [pc, #52]	@ (8016c18 <tcp_rexmit_rto_commit+0x44>)
 8016be4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016be8:	490c      	ldr	r1, [pc, #48]	@ (8016c1c <tcp_rexmit_rto_commit+0x48>)
 8016bea:	480d      	ldr	r0, [pc, #52]	@ (8016c20 <tcp_rexmit_rto_commit+0x4c>)
 8016bec:	f003 ffe2 	bl	801abb4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016bf6:	2bff      	cmp	r3, #255	@ 0xff
 8016bf8:	d007      	beq.n	8016c0a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016c00:	3301      	adds	r3, #1
 8016c02:	b2da      	uxtb	r2, r3
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016c0a:	6878      	ldr	r0, [r7, #4]
 8016c0c:	f7ff fc7e 	bl	801650c <tcp_output>
}
 8016c10:	bf00      	nop
 8016c12:	3708      	adds	r7, #8
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}
 8016c18:	0801d358 	.word	0x0801d358
 8016c1c:	0801d9b8 	.word	0x0801d9b8
 8016c20:	0801d3ac 	.word	0x0801d3ac

08016c24 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d106      	bne.n	8016c40 <tcp_rexmit_rto+0x1c>
 8016c32:	4b0a      	ldr	r3, [pc, #40]	@ (8016c5c <tcp_rexmit_rto+0x38>)
 8016c34:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8016c38:	4909      	ldr	r1, [pc, #36]	@ (8016c60 <tcp_rexmit_rto+0x3c>)
 8016c3a:	480a      	ldr	r0, [pc, #40]	@ (8016c64 <tcp_rexmit_rto+0x40>)
 8016c3c:	f003 ffba 	bl	801abb4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f7ff ff57 	bl	8016af4 <tcp_rexmit_rto_prepare>
 8016c46:	4603      	mov	r3, r0
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d102      	bne.n	8016c52 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	f7ff ffc1 	bl	8016bd4 <tcp_rexmit_rto_commit>
  }
}
 8016c52:	bf00      	nop
 8016c54:	3708      	adds	r7, #8
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	0801d358 	.word	0x0801d358
 8016c60:	0801d9dc 	.word	0x0801d9dc
 8016c64:	0801d3ac 	.word	0x0801d3ac

08016c68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016c68:	b590      	push	{r4, r7, lr}
 8016c6a:	b085      	sub	sp, #20
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d106      	bne.n	8016c84 <tcp_rexmit+0x1c>
 8016c76:	4b2f      	ldr	r3, [pc, #188]	@ (8016d34 <tcp_rexmit+0xcc>)
 8016c78:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8016c7c:	492e      	ldr	r1, [pc, #184]	@ (8016d38 <tcp_rexmit+0xd0>)
 8016c7e:	482f      	ldr	r0, [pc, #188]	@ (8016d3c <tcp_rexmit+0xd4>)
 8016c80:	f003 ff98 	bl	801abb4 <iprintf>

  if (pcb->unacked == NULL) {
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d102      	bne.n	8016c92 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016c8c:	f06f 0305 	mvn.w	r3, #5
 8016c90:	e04c      	b.n	8016d2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c96:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016c98:	68b8      	ldr	r0, [r7, #8]
 8016c9a:	f7ff fe2b 	bl	80168f4 <tcp_output_segment_busy>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d002      	beq.n	8016caa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016ca4:	f06f 0305 	mvn.w	r3, #5
 8016ca8:	e040      	b.n	8016d2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	681a      	ldr	r2, [r3, #0]
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	336c      	adds	r3, #108	@ 0x6c
 8016cb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016cb8:	e002      	b.n	8016cc0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d011      	beq.n	8016cec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	68db      	ldr	r3, [r3, #12]
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7f9 fa01 	bl	80100d8 <lwip_htonl>
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	68bb      	ldr	r3, [r7, #8]
 8016cda:	68db      	ldr	r3, [r3, #12]
 8016cdc:	685b      	ldr	r3, [r3, #4]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7f9 f9fa 	bl	80100d8 <lwip_htonl>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	dbe6      	blt.n	8016cba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	681a      	ldr	r2, [r3, #0]
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	68ba      	ldr	r2, [r7, #8]
 8016cf8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d103      	bne.n	8016d0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	2200      	movs	r2, #0
 8016d06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016d10:	2bff      	cmp	r3, #255	@ 0xff
 8016d12:	d007      	beq.n	8016d24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016d1a:	3301      	adds	r3, #1
 8016d1c:	b2da      	uxtb	r2, r3
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2200      	movs	r2, #0
 8016d28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016d2a:	2300      	movs	r3, #0
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	3714      	adds	r7, #20
 8016d30:	46bd      	mov	sp, r7
 8016d32:	bd90      	pop	{r4, r7, pc}
 8016d34:	0801d358 	.word	0x0801d358
 8016d38:	0801d9f8 	.word	0x0801d9f8
 8016d3c:	0801d3ac 	.word	0x0801d3ac

08016d40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b082      	sub	sp, #8
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d106      	bne.n	8016d5c <tcp_rexmit_fast+0x1c>
 8016d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8016df8 <tcp_rexmit_fast+0xb8>)
 8016d50:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8016d54:	4929      	ldr	r1, [pc, #164]	@ (8016dfc <tcp_rexmit_fast+0xbc>)
 8016d56:	482a      	ldr	r0, [pc, #168]	@ (8016e00 <tcp_rexmit_fast+0xc0>)
 8016d58:	f003 ff2c 	bl	801abb4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d045      	beq.n	8016df0 <tcp_rexmit_fast+0xb0>
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	8b5b      	ldrh	r3, [r3, #26]
 8016d68:	f003 0304 	and.w	r3, r3, #4
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d13f      	bne.n	8016df0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016d70:	6878      	ldr	r0, [r7, #4]
 8016d72:	f7ff ff79 	bl	8016c68 <tcp_rexmit>
 8016d76:	4603      	mov	r3, r0
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d139      	bne.n	8016df0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016d88:	4293      	cmp	r3, r2
 8016d8a:	bf28      	it	cs
 8016d8c:	4613      	movcs	r3, r2
 8016d8e:	b29b      	uxth	r3, r3
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	da00      	bge.n	8016d96 <tcp_rexmit_fast+0x56>
 8016d94:	3301      	adds	r3, #1
 8016d96:	105b      	asrs	r3, r3, #1
 8016d98:	b29a      	uxth	r2, r3
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8016da6:	461a      	mov	r2, r3
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016dac:	005b      	lsls	r3, r3, #1
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d206      	bcs.n	8016dc0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016db6:	005b      	lsls	r3, r3, #1
 8016db8:	b29a      	uxth	r2, r3
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016dca:	4619      	mov	r1, r3
 8016dcc:	0049      	lsls	r1, r1, #1
 8016dce:	440b      	add	r3, r1
 8016dd0:	b29b      	uxth	r3, r3
 8016dd2:	4413      	add	r3, r2
 8016dd4:	b29a      	uxth	r2, r3
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	8b5b      	ldrh	r3, [r3, #26]
 8016de0:	f043 0304 	orr.w	r3, r3, #4
 8016de4:	b29a      	uxth	r2, r3
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2200      	movs	r2, #0
 8016dee:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8016df0:	bf00      	nop
 8016df2:	3708      	adds	r7, #8
 8016df4:	46bd      	mov	sp, r7
 8016df6:	bd80      	pop	{r7, pc}
 8016df8:	0801d358 	.word	0x0801d358
 8016dfc:	0801da10 	.word	0x0801da10
 8016e00:	0801d3ac 	.word	0x0801d3ac

08016e04 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b086      	sub	sp, #24
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	607b      	str	r3, [r7, #4]
 8016e0e:	460b      	mov	r3, r1
 8016e10:	817b      	strh	r3, [r7, #10]
 8016e12:	4613      	mov	r3, r2
 8016e14:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016e16:	897a      	ldrh	r2, [r7, #10]
 8016e18:	893b      	ldrh	r3, [r7, #8]
 8016e1a:	4413      	add	r3, r2
 8016e1c:	b29b      	uxth	r3, r3
 8016e1e:	3314      	adds	r3, #20
 8016e20:	b29b      	uxth	r3, r3
 8016e22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016e26:	4619      	mov	r1, r3
 8016e28:	2022      	movs	r0, #34	@ 0x22
 8016e2a:	f7fa fb09 	bl	8011440 <pbuf_alloc>
 8016e2e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016e30:	697b      	ldr	r3, [r7, #20]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d04d      	beq.n	8016ed2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016e36:	897b      	ldrh	r3, [r7, #10]
 8016e38:	3313      	adds	r3, #19
 8016e3a:	697a      	ldr	r2, [r7, #20]
 8016e3c:	8952      	ldrh	r2, [r2, #10]
 8016e3e:	4293      	cmp	r3, r2
 8016e40:	db06      	blt.n	8016e50 <tcp_output_alloc_header_common+0x4c>
 8016e42:	4b26      	ldr	r3, [pc, #152]	@ (8016edc <tcp_output_alloc_header_common+0xd8>)
 8016e44:	f240 7223 	movw	r2, #1827	@ 0x723
 8016e48:	4925      	ldr	r1, [pc, #148]	@ (8016ee0 <tcp_output_alloc_header_common+0xdc>)
 8016e4a:	4826      	ldr	r0, [pc, #152]	@ (8016ee4 <tcp_output_alloc_header_common+0xe0>)
 8016e4c:	f003 feb2 	bl	801abb4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	685b      	ldr	r3, [r3, #4]
 8016e54:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016e56:	8c3b      	ldrh	r3, [r7, #32]
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7f9 f927 	bl	80100ac <lwip_htons>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	461a      	mov	r2, r3
 8016e62:	693b      	ldr	r3, [r7, #16]
 8016e64:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016e66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f7f9 f91f 	bl	80100ac <lwip_htons>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	461a      	mov	r2, r3
 8016e72:	693b      	ldr	r3, [r7, #16]
 8016e74:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	687a      	ldr	r2, [r7, #4]
 8016e7a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016e7c:	68f8      	ldr	r0, [r7, #12]
 8016e7e:	f7f9 f92b 	bl	80100d8 <lwip_htonl>
 8016e82:	4602      	mov	r2, r0
 8016e84:	693b      	ldr	r3, [r7, #16]
 8016e86:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016e88:	897b      	ldrh	r3, [r7, #10]
 8016e8a:	089b      	lsrs	r3, r3, #2
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	3305      	adds	r3, #5
 8016e90:	b29b      	uxth	r3, r3
 8016e92:	031b      	lsls	r3, r3, #12
 8016e94:	b29a      	uxth	r2, r3
 8016e96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	4313      	orrs	r3, r2
 8016e9e:	b29b      	uxth	r3, r3
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7f9 f903 	bl	80100ac <lwip_htons>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	461a      	mov	r2, r3
 8016eaa:	693b      	ldr	r3, [r7, #16]
 8016eac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016eae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f7f9 f8fb 	bl	80100ac <lwip_htons>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	461a      	mov	r2, r3
 8016eba:	693b      	ldr	r3, [r7, #16]
 8016ebc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	741a      	strb	r2, [r3, #16]
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016ec8:	693b      	ldr	r3, [r7, #16]
 8016eca:	2200      	movs	r2, #0
 8016ecc:	749a      	strb	r2, [r3, #18]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016ed2:	697b      	ldr	r3, [r7, #20]
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3718      	adds	r7, #24
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}
 8016edc:	0801d358 	.word	0x0801d358
 8016ee0:	0801da30 	.word	0x0801da30
 8016ee4:	0801d3ac 	.word	0x0801d3ac

08016ee8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016ee8:	b5b0      	push	{r4, r5, r7, lr}
 8016eea:	b08a      	sub	sp, #40	@ 0x28
 8016eec:	af04      	add	r7, sp, #16
 8016eee:	60f8      	str	r0, [r7, #12]
 8016ef0:	607b      	str	r3, [r7, #4]
 8016ef2:	460b      	mov	r3, r1
 8016ef4:	817b      	strh	r3, [r7, #10]
 8016ef6:	4613      	mov	r3, r2
 8016ef8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d106      	bne.n	8016f0e <tcp_output_alloc_header+0x26>
 8016f00:	4b15      	ldr	r3, [pc, #84]	@ (8016f58 <tcp_output_alloc_header+0x70>)
 8016f02:	f240 7242 	movw	r2, #1858	@ 0x742
 8016f06:	4915      	ldr	r1, [pc, #84]	@ (8016f5c <tcp_output_alloc_header+0x74>)
 8016f08:	4815      	ldr	r0, [pc, #84]	@ (8016f60 <tcp_output_alloc_header+0x78>)
 8016f0a:	f003 fe53 	bl	801abb4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	8adb      	ldrh	r3, [r3, #22]
 8016f16:	68fa      	ldr	r2, [r7, #12]
 8016f18:	8b12      	ldrh	r2, [r2, #24]
 8016f1a:	68f9      	ldr	r1, [r7, #12]
 8016f1c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8016f1e:	893d      	ldrh	r5, [r7, #8]
 8016f20:	897c      	ldrh	r4, [r7, #10]
 8016f22:	9103      	str	r1, [sp, #12]
 8016f24:	2110      	movs	r1, #16
 8016f26:	9102      	str	r1, [sp, #8]
 8016f28:	9201      	str	r2, [sp, #4]
 8016f2a:	9300      	str	r3, [sp, #0]
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	462a      	mov	r2, r5
 8016f30:	4621      	mov	r1, r4
 8016f32:	f7ff ff67 	bl	8016e04 <tcp_output_alloc_header_common>
 8016f36:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016f38:	697b      	ldr	r3, [r7, #20]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d006      	beq.n	8016f4c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f42:	68fa      	ldr	r2, [r7, #12]
 8016f44:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8016f46:	441a      	add	r2, r3
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8016f4c:	697b      	ldr	r3, [r7, #20]
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3718      	adds	r7, #24
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bdb0      	pop	{r4, r5, r7, pc}
 8016f56:	bf00      	nop
 8016f58:	0801d358 	.word	0x0801d358
 8016f5c:	0801da60 	.word	0x0801da60
 8016f60:	0801d3ac 	.word	0x0801d3ac

08016f64 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b088      	sub	sp, #32
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	60f8      	str	r0, [r7, #12]
 8016f6c:	60b9      	str	r1, [r7, #8]
 8016f6e:	4611      	mov	r1, r2
 8016f70:	461a      	mov	r2, r3
 8016f72:	460b      	mov	r3, r1
 8016f74:	71fb      	strb	r3, [r7, #7]
 8016f76:	4613      	mov	r3, r2
 8016f78:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d106      	bne.n	8016f92 <tcp_output_fill_options+0x2e>
 8016f84:	4b12      	ldr	r3, [pc, #72]	@ (8016fd0 <tcp_output_fill_options+0x6c>)
 8016f86:	f240 7256 	movw	r2, #1878	@ 0x756
 8016f8a:	4912      	ldr	r1, [pc, #72]	@ (8016fd4 <tcp_output_fill_options+0x70>)
 8016f8c:	4812      	ldr	r0, [pc, #72]	@ (8016fd8 <tcp_output_fill_options+0x74>)
 8016f8e:	f003 fe11 	bl	801abb4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016f92:	68bb      	ldr	r3, [r7, #8]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016f98:	69bb      	ldr	r3, [r7, #24]
 8016f9a:	3314      	adds	r3, #20
 8016f9c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016f9e:	8bfb      	ldrh	r3, [r7, #30]
 8016fa0:	009b      	lsls	r3, r3, #2
 8016fa2:	461a      	mov	r2, r3
 8016fa4:	79fb      	ldrb	r3, [r7, #7]
 8016fa6:	009b      	lsls	r3, r3, #2
 8016fa8:	f003 0304 	and.w	r3, r3, #4
 8016fac:	4413      	add	r3, r2
 8016fae:	3314      	adds	r3, #20
 8016fb0:	69ba      	ldr	r2, [r7, #24]
 8016fb2:	4413      	add	r3, r2
 8016fb4:	697a      	ldr	r2, [r7, #20]
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d006      	beq.n	8016fc8 <tcp_output_fill_options+0x64>
 8016fba:	4b05      	ldr	r3, [pc, #20]	@ (8016fd0 <tcp_output_fill_options+0x6c>)
 8016fbc:	f240 7275 	movw	r2, #1909	@ 0x775
 8016fc0:	4906      	ldr	r1, [pc, #24]	@ (8016fdc <tcp_output_fill_options+0x78>)
 8016fc2:	4805      	ldr	r0, [pc, #20]	@ (8016fd8 <tcp_output_fill_options+0x74>)
 8016fc4:	f003 fdf6 	bl	801abb4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016fc8:	bf00      	nop
 8016fca:	3720      	adds	r7, #32
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}
 8016fd0:	0801d358 	.word	0x0801d358
 8016fd4:	0801da88 	.word	0x0801da88
 8016fd8:	0801d3ac 	.word	0x0801d3ac
 8016fdc:	0801d980 	.word	0x0801d980

08016fe0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b08a      	sub	sp, #40	@ 0x28
 8016fe4:	af04      	add	r7, sp, #16
 8016fe6:	60f8      	str	r0, [r7, #12]
 8016fe8:	60b9      	str	r1, [r7, #8]
 8016fea:	607a      	str	r2, [r7, #4]
 8016fec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016fee:	68bb      	ldr	r3, [r7, #8]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d106      	bne.n	8017002 <tcp_output_control_segment+0x22>
 8016ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8017068 <tcp_output_control_segment+0x88>)
 8016ff6:	f240 7287 	movw	r2, #1927	@ 0x787
 8016ffa:	491c      	ldr	r1, [pc, #112]	@ (801706c <tcp_output_control_segment+0x8c>)
 8016ffc:	481c      	ldr	r0, [pc, #112]	@ (8017070 <tcp_output_control_segment+0x90>)
 8016ffe:	f003 fdd9 	bl	801abb4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017002:	683a      	ldr	r2, [r7, #0]
 8017004:	6879      	ldr	r1, [r7, #4]
 8017006:	68f8      	ldr	r0, [r7, #12]
 8017008:	f7fe ff42 	bl	8015e90 <tcp_route>
 801700c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801700e:	693b      	ldr	r3, [r7, #16]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d102      	bne.n	801701a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017014:	23fc      	movs	r3, #252	@ 0xfc
 8017016:	75fb      	strb	r3, [r7, #23]
 8017018:	e01c      	b.n	8017054 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d006      	beq.n	801702e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	7adb      	ldrb	r3, [r3, #11]
 8017024:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	7a9b      	ldrb	r3, [r3, #10]
 801702a:	757b      	strb	r3, [r7, #21]
 801702c:	e003      	b.n	8017036 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801702e:	23ff      	movs	r3, #255	@ 0xff
 8017030:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017032:	2300      	movs	r3, #0
 8017034:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017036:	7dba      	ldrb	r2, [r7, #22]
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	9302      	str	r3, [sp, #8]
 801703c:	2306      	movs	r3, #6
 801703e:	9301      	str	r3, [sp, #4]
 8017040:	7d7b      	ldrb	r3, [r7, #21]
 8017042:	9300      	str	r3, [sp, #0]
 8017044:	4613      	mov	r3, r2
 8017046:	683a      	ldr	r2, [r7, #0]
 8017048:	6879      	ldr	r1, [r7, #4]
 801704a:	68b8      	ldr	r0, [r7, #8]
 801704c:	f002 fb02 	bl	8019654 <ip4_output_if>
 8017050:	4603      	mov	r3, r0
 8017052:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017054:	68b8      	ldr	r0, [r7, #8]
 8017056:	f7fa fcdb 	bl	8011a10 <pbuf_free>
  return err;
 801705a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801705e:	4618      	mov	r0, r3
 8017060:	3718      	adds	r7, #24
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}
 8017066:	bf00      	nop
 8017068:	0801d358 	.word	0x0801d358
 801706c:	0801dab0 	.word	0x0801dab0
 8017070:	0801d3ac 	.word	0x0801d3ac

08017074 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017074:	b590      	push	{r4, r7, lr}
 8017076:	b08b      	sub	sp, #44	@ 0x2c
 8017078:	af04      	add	r7, sp, #16
 801707a:	60f8      	str	r0, [r7, #12]
 801707c:	60b9      	str	r1, [r7, #8]
 801707e:	607a      	str	r2, [r7, #4]
 8017080:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d106      	bne.n	8017096 <tcp_rst+0x22>
 8017088:	4b1f      	ldr	r3, [pc, #124]	@ (8017108 <tcp_rst+0x94>)
 801708a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801708e:	491f      	ldr	r1, [pc, #124]	@ (801710c <tcp_rst+0x98>)
 8017090:	481f      	ldr	r0, [pc, #124]	@ (8017110 <tcp_rst+0x9c>)
 8017092:	f003 fd8f 	bl	801abb4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017098:	2b00      	cmp	r3, #0
 801709a:	d106      	bne.n	80170aa <tcp_rst+0x36>
 801709c:	4b1a      	ldr	r3, [pc, #104]	@ (8017108 <tcp_rst+0x94>)
 801709e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80170a2:	491c      	ldr	r1, [pc, #112]	@ (8017114 <tcp_rst+0xa0>)
 80170a4:	481a      	ldr	r0, [pc, #104]	@ (8017110 <tcp_rst+0x9c>)
 80170a6:	f003 fd85 	bl	801abb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80170aa:	2300      	movs	r3, #0
 80170ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80170ae:	f24d 0316 	movw	r3, #53270	@ 0xd016
 80170b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80170b4:	7dfb      	ldrb	r3, [r7, #23]
 80170b6:	b29c      	uxth	r4, r3
 80170b8:	68b8      	ldr	r0, [r7, #8]
 80170ba:	f7f9 f80d 	bl	80100d8 <lwip_htonl>
 80170be:	4602      	mov	r2, r0
 80170c0:	8abb      	ldrh	r3, [r7, #20]
 80170c2:	9303      	str	r3, [sp, #12]
 80170c4:	2314      	movs	r3, #20
 80170c6:	9302      	str	r3, [sp, #8]
 80170c8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80170ca:	9301      	str	r3, [sp, #4]
 80170cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80170ce:	9300      	str	r3, [sp, #0]
 80170d0:	4613      	mov	r3, r2
 80170d2:	2200      	movs	r2, #0
 80170d4:	4621      	mov	r1, r4
 80170d6:	6878      	ldr	r0, [r7, #4]
 80170d8:	f7ff fe94 	bl	8016e04 <tcp_output_alloc_header_common>
 80170dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d00c      	beq.n	80170fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80170e4:	7dfb      	ldrb	r3, [r7, #23]
 80170e6:	2200      	movs	r2, #0
 80170e8:	6939      	ldr	r1, [r7, #16]
 80170ea:	68f8      	ldr	r0, [r7, #12]
 80170ec:	f7ff ff3a 	bl	8016f64 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80170f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170f2:	683a      	ldr	r2, [r7, #0]
 80170f4:	6939      	ldr	r1, [r7, #16]
 80170f6:	68f8      	ldr	r0, [r7, #12]
 80170f8:	f7ff ff72 	bl	8016fe0 <tcp_output_control_segment>
 80170fc:	e000      	b.n	8017100 <tcp_rst+0x8c>
    return;
 80170fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017100:	371c      	adds	r7, #28
 8017102:	46bd      	mov	sp, r7
 8017104:	bd90      	pop	{r4, r7, pc}
 8017106:	bf00      	nop
 8017108:	0801d358 	.word	0x0801d358
 801710c:	0801dadc 	.word	0x0801dadc
 8017110:	0801d3ac 	.word	0x0801d3ac
 8017114:	0801daf8 	.word	0x0801daf8

08017118 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017118:	b590      	push	{r4, r7, lr}
 801711a:	b087      	sub	sp, #28
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017120:	2300      	movs	r3, #0
 8017122:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017124:	2300      	movs	r3, #0
 8017126:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d106      	bne.n	801713c <tcp_send_empty_ack+0x24>
 801712e:	4b28      	ldr	r3, [pc, #160]	@ (80171d0 <tcp_send_empty_ack+0xb8>)
 8017130:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017134:	4927      	ldr	r1, [pc, #156]	@ (80171d4 <tcp_send_empty_ack+0xbc>)
 8017136:	4828      	ldr	r0, [pc, #160]	@ (80171d8 <tcp_send_empty_ack+0xc0>)
 8017138:	f003 fd3c 	bl	801abb4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801713c:	7dfb      	ldrb	r3, [r7, #23]
 801713e:	009b      	lsls	r3, r3, #2
 8017140:	b2db      	uxtb	r3, r3
 8017142:	f003 0304 	and.w	r3, r3, #4
 8017146:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017148:	7d7b      	ldrb	r3, [r7, #21]
 801714a:	b29c      	uxth	r4, r3
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017150:	4618      	mov	r0, r3
 8017152:	f7f8 ffc1 	bl	80100d8 <lwip_htonl>
 8017156:	4603      	mov	r3, r0
 8017158:	2200      	movs	r2, #0
 801715a:	4621      	mov	r1, r4
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f7ff fec3 	bl	8016ee8 <tcp_output_alloc_header>
 8017162:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017164:	693b      	ldr	r3, [r7, #16]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d109      	bne.n	801717e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	8b5b      	ldrh	r3, [r3, #26]
 801716e:	f043 0303 	orr.w	r3, r3, #3
 8017172:	b29a      	uxth	r2, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017178:	f06f 0301 	mvn.w	r3, #1
 801717c:	e023      	b.n	80171c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801717e:	7dbb      	ldrb	r3, [r7, #22]
 8017180:	7dfa      	ldrb	r2, [r7, #23]
 8017182:	6939      	ldr	r1, [r7, #16]
 8017184:	6878      	ldr	r0, [r7, #4]
 8017186:	f7ff feed 	bl	8016f64 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801718a:	687a      	ldr	r2, [r7, #4]
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	3304      	adds	r3, #4
 8017190:	6939      	ldr	r1, [r7, #16]
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f7ff ff24 	bl	8016fe0 <tcp_output_control_segment>
 8017198:	4603      	mov	r3, r0
 801719a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801719c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d007      	beq.n	80171b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	8b5b      	ldrh	r3, [r3, #26]
 80171a8:	f043 0303 	orr.w	r3, r3, #3
 80171ac:	b29a      	uxth	r2, r3
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	835a      	strh	r2, [r3, #26]
 80171b2:	e006      	b.n	80171c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	8b5b      	ldrh	r3, [r3, #26]
 80171b8:	f023 0303 	bic.w	r3, r3, #3
 80171bc:	b29a      	uxth	r2, r3
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80171c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	371c      	adds	r7, #28
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd90      	pop	{r4, r7, pc}
 80171ce:	bf00      	nop
 80171d0:	0801d358 	.word	0x0801d358
 80171d4:	0801db14 	.word	0x0801db14
 80171d8:	0801d3ac 	.word	0x0801d3ac

080171dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80171dc:	b590      	push	{r4, r7, lr}
 80171de:	b087      	sub	sp, #28
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80171e4:	2300      	movs	r3, #0
 80171e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d106      	bne.n	80171fc <tcp_keepalive+0x20>
 80171ee:	4b18      	ldr	r3, [pc, #96]	@ (8017250 <tcp_keepalive+0x74>)
 80171f0:	f640 0224 	movw	r2, #2084	@ 0x824
 80171f4:	4917      	ldr	r1, [pc, #92]	@ (8017254 <tcp_keepalive+0x78>)
 80171f6:	4818      	ldr	r0, [pc, #96]	@ (8017258 <tcp_keepalive+0x7c>)
 80171f8:	f003 fcdc 	bl	801abb4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80171fc:	7dfb      	ldrb	r3, [r7, #23]
 80171fe:	b29c      	uxth	r4, r3
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017204:	3b01      	subs	r3, #1
 8017206:	4618      	mov	r0, r3
 8017208:	f7f8 ff66 	bl	80100d8 <lwip_htonl>
 801720c:	4603      	mov	r3, r0
 801720e:	2200      	movs	r2, #0
 8017210:	4621      	mov	r1, r4
 8017212:	6878      	ldr	r0, [r7, #4]
 8017214:	f7ff fe68 	bl	8016ee8 <tcp_output_alloc_header>
 8017218:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801721a:	693b      	ldr	r3, [r7, #16]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d102      	bne.n	8017226 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017220:	f04f 33ff 	mov.w	r3, #4294967295
 8017224:	e010      	b.n	8017248 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017226:	7dfb      	ldrb	r3, [r7, #23]
 8017228:	2200      	movs	r2, #0
 801722a:	6939      	ldr	r1, [r7, #16]
 801722c:	6878      	ldr	r0, [r7, #4]
 801722e:	f7ff fe99 	bl	8016f64 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017232:	687a      	ldr	r2, [r7, #4]
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	3304      	adds	r3, #4
 8017238:	6939      	ldr	r1, [r7, #16]
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f7ff fed0 	bl	8016fe0 <tcp_output_control_segment>
 8017240:	4603      	mov	r3, r0
 8017242:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017248:	4618      	mov	r0, r3
 801724a:	371c      	adds	r7, #28
 801724c:	46bd      	mov	sp, r7
 801724e:	bd90      	pop	{r4, r7, pc}
 8017250:	0801d358 	.word	0x0801d358
 8017254:	0801db34 	.word	0x0801db34
 8017258:	0801d3ac 	.word	0x0801d3ac

0801725c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801725c:	b590      	push	{r4, r7, lr}
 801725e:	b08b      	sub	sp, #44	@ 0x2c
 8017260:	af00      	add	r7, sp, #0
 8017262:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017264:	2300      	movs	r3, #0
 8017266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d106      	bne.n	801727e <tcp_zero_window_probe+0x22>
 8017270:	4b4c      	ldr	r3, [pc, #304]	@ (80173a4 <tcp_zero_window_probe+0x148>)
 8017272:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017276:	494c      	ldr	r1, [pc, #304]	@ (80173a8 <tcp_zero_window_probe+0x14c>)
 8017278:	484c      	ldr	r0, [pc, #304]	@ (80173ac <tcp_zero_window_probe+0x150>)
 801727a:	f003 fc9b 	bl	801abb4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017282:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017284:	6a3b      	ldr	r3, [r7, #32]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d101      	bne.n	801728e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801728a:	2300      	movs	r3, #0
 801728c:	e086      	b.n	801739c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017294:	2bff      	cmp	r3, #255	@ 0xff
 8017296:	d007      	beq.n	80172a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801729e:	3301      	adds	r3, #1
 80172a0:	b2da      	uxtb	r2, r3
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80172a8:	6a3b      	ldr	r3, [r7, #32]
 80172aa:	68db      	ldr	r3, [r3, #12]
 80172ac:	899b      	ldrh	r3, [r3, #12]
 80172ae:	b29b      	uxth	r3, r3
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7f8 fefb 	bl	80100ac <lwip_htons>
 80172b6:	4603      	mov	r3, r0
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	f003 0301 	and.w	r3, r3, #1
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d005      	beq.n	80172ce <tcp_zero_window_probe+0x72>
 80172c2:	6a3b      	ldr	r3, [r7, #32]
 80172c4:	891b      	ldrh	r3, [r3, #8]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d101      	bne.n	80172ce <tcp_zero_window_probe+0x72>
 80172ca:	2301      	movs	r3, #1
 80172cc:	e000      	b.n	80172d0 <tcp_zero_window_probe+0x74>
 80172ce:	2300      	movs	r3, #0
 80172d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80172d2:	7ffb      	ldrb	r3, [r7, #31]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	bf0c      	ite	eq
 80172d8:	2301      	moveq	r3, #1
 80172da:	2300      	movne	r3, #0
 80172dc:	b2db      	uxtb	r3, r3
 80172de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80172e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80172e4:	b299      	uxth	r1, r3
 80172e6:	6a3b      	ldr	r3, [r7, #32]
 80172e8:	68db      	ldr	r3, [r3, #12]
 80172ea:	685b      	ldr	r3, [r3, #4]
 80172ec:	8bba      	ldrh	r2, [r7, #28]
 80172ee:	6878      	ldr	r0, [r7, #4]
 80172f0:	f7ff fdfa 	bl	8016ee8 <tcp_output_alloc_header>
 80172f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80172f6:	69bb      	ldr	r3, [r7, #24]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d102      	bne.n	8017302 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80172fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017300:	e04c      	b.n	801739c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017302:	69bb      	ldr	r3, [r7, #24]
 8017304:	685b      	ldr	r3, [r3, #4]
 8017306:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017308:	7ffb      	ldrb	r3, [r7, #31]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d011      	beq.n	8017332 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	899b      	ldrh	r3, [r3, #12]
 8017312:	b29b      	uxth	r3, r3
 8017314:	b21b      	sxth	r3, r3
 8017316:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801731a:	b21c      	sxth	r4, r3
 801731c:	2011      	movs	r0, #17
 801731e:	f7f8 fec5 	bl	80100ac <lwip_htons>
 8017322:	4603      	mov	r3, r0
 8017324:	b21b      	sxth	r3, r3
 8017326:	4323      	orrs	r3, r4
 8017328:	b21b      	sxth	r3, r3
 801732a:	b29a      	uxth	r2, r3
 801732c:	697b      	ldr	r3, [r7, #20]
 801732e:	819a      	strh	r2, [r3, #12]
 8017330:	e010      	b.n	8017354 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017332:	69bb      	ldr	r3, [r7, #24]
 8017334:	685b      	ldr	r3, [r3, #4]
 8017336:	3314      	adds	r3, #20
 8017338:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801733a:	6a3b      	ldr	r3, [r7, #32]
 801733c:	6858      	ldr	r0, [r3, #4]
 801733e:	6a3b      	ldr	r3, [r7, #32]
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	891a      	ldrh	r2, [r3, #8]
 8017344:	6a3b      	ldr	r3, [r7, #32]
 8017346:	891b      	ldrh	r3, [r3, #8]
 8017348:	1ad3      	subs	r3, r2, r3
 801734a:	b29b      	uxth	r3, r3
 801734c:	2201      	movs	r2, #1
 801734e:	6939      	ldr	r1, [r7, #16]
 8017350:	f7fa fd64 	bl	8011e1c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017354:	6a3b      	ldr	r3, [r7, #32]
 8017356:	68db      	ldr	r3, [r3, #12]
 8017358:	685b      	ldr	r3, [r3, #4]
 801735a:	4618      	mov	r0, r3
 801735c:	f7f8 febc 	bl	80100d8 <lwip_htonl>
 8017360:	4603      	mov	r3, r0
 8017362:	3301      	adds	r3, #1
 8017364:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	1ad3      	subs	r3, r2, r3
 801736e:	2b00      	cmp	r3, #0
 8017370:	da02      	bge.n	8017378 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	68fa      	ldr	r2, [r7, #12]
 8017376:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801737c:	2200      	movs	r2, #0
 801737e:	69b9      	ldr	r1, [r7, #24]
 8017380:	6878      	ldr	r0, [r7, #4]
 8017382:	f7ff fdef 	bl	8016f64 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017386:	687a      	ldr	r2, [r7, #4]
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	3304      	adds	r3, #4
 801738c:	69b9      	ldr	r1, [r7, #24]
 801738e:	6878      	ldr	r0, [r7, #4]
 8017390:	f7ff fe26 	bl	8016fe0 <tcp_output_control_segment>
 8017394:	4603      	mov	r3, r0
 8017396:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017398:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801739c:	4618      	mov	r0, r3
 801739e:	372c      	adds	r7, #44	@ 0x2c
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd90      	pop	{r4, r7, pc}
 80173a4:	0801d358 	.word	0x0801d358
 80173a8:	0801db50 	.word	0x0801db50
 80173ac:	0801d3ac 	.word	0x0801d3ac

080173b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80173b8:	f7fa ff0a 	bl	80121d0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80173bc:	4b0a      	ldr	r3, [pc, #40]	@ (80173e8 <tcpip_tcp_timer+0x38>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d103      	bne.n	80173cc <tcpip_tcp_timer+0x1c>
 80173c4:	4b09      	ldr	r3, [pc, #36]	@ (80173ec <tcpip_tcp_timer+0x3c>)
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d005      	beq.n	80173d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80173cc:	2200      	movs	r2, #0
 80173ce:	4908      	ldr	r1, [pc, #32]	@ (80173f0 <tcpip_tcp_timer+0x40>)
 80173d0:	20fa      	movs	r0, #250	@ 0xfa
 80173d2:	f000 f8f3 	bl	80175bc <sys_timeout>
 80173d6:	e003      	b.n	80173e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80173d8:	4b06      	ldr	r3, [pc, #24]	@ (80173f4 <tcpip_tcp_timer+0x44>)
 80173da:	2200      	movs	r2, #0
 80173dc:	601a      	str	r2, [r3, #0]
  }
}
 80173de:	bf00      	nop
 80173e0:	bf00      	nop
 80173e2:	3708      	adds	r7, #8
 80173e4:	46bd      	mov	sp, r7
 80173e6:	bd80      	pop	{r7, pc}
 80173e8:	24014bb8 	.word	0x24014bb8
 80173ec:	24014bbc 	.word	0x24014bbc
 80173f0:	080173b1 	.word	0x080173b1
 80173f4:	24014c04 	.word	0x24014c04

080173f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80173fc:	4b0a      	ldr	r3, [pc, #40]	@ (8017428 <tcp_timer_needed+0x30>)
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d10f      	bne.n	8017424 <tcp_timer_needed+0x2c>
 8017404:	4b09      	ldr	r3, [pc, #36]	@ (801742c <tcp_timer_needed+0x34>)
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d103      	bne.n	8017414 <tcp_timer_needed+0x1c>
 801740c:	4b08      	ldr	r3, [pc, #32]	@ (8017430 <tcp_timer_needed+0x38>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d007      	beq.n	8017424 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017414:	4b04      	ldr	r3, [pc, #16]	@ (8017428 <tcp_timer_needed+0x30>)
 8017416:	2201      	movs	r2, #1
 8017418:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801741a:	2200      	movs	r2, #0
 801741c:	4905      	ldr	r1, [pc, #20]	@ (8017434 <tcp_timer_needed+0x3c>)
 801741e:	20fa      	movs	r0, #250	@ 0xfa
 8017420:	f000 f8cc 	bl	80175bc <sys_timeout>
  }
}
 8017424:	bf00      	nop
 8017426:	bd80      	pop	{r7, pc}
 8017428:	24014c04 	.word	0x24014c04
 801742c:	24014bb8 	.word	0x24014bb8
 8017430:	24014bbc 	.word	0x24014bbc
 8017434:	080173b1 	.word	0x080173b1

08017438 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b086      	sub	sp, #24
 801743c:	af00      	add	r7, sp, #0
 801743e:	60f8      	str	r0, [r7, #12]
 8017440:	60b9      	str	r1, [r7, #8]
 8017442:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017444:	200b      	movs	r0, #11
 8017446:	f7f9 fbc1 	bl	8010bcc <memp_malloc>
 801744a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801744c:	693b      	ldr	r3, [r7, #16]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d109      	bne.n	8017466 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017452:	693b      	ldr	r3, [r7, #16]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d151      	bne.n	80174fc <sys_timeout_abs+0xc4>
 8017458:	4b2a      	ldr	r3, [pc, #168]	@ (8017504 <sys_timeout_abs+0xcc>)
 801745a:	22be      	movs	r2, #190	@ 0xbe
 801745c:	492a      	ldr	r1, [pc, #168]	@ (8017508 <sys_timeout_abs+0xd0>)
 801745e:	482b      	ldr	r0, [pc, #172]	@ (801750c <sys_timeout_abs+0xd4>)
 8017460:	f003 fba8 	bl	801abb4 <iprintf>
    return;
 8017464:	e04a      	b.n	80174fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017466:	693b      	ldr	r3, [r7, #16]
 8017468:	2200      	movs	r2, #0
 801746a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801746c:	693b      	ldr	r3, [r7, #16]
 801746e:	68ba      	ldr	r2, [r7, #8]
 8017470:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017472:	693b      	ldr	r3, [r7, #16]
 8017474:	687a      	ldr	r2, [r7, #4]
 8017476:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	68fa      	ldr	r2, [r7, #12]
 801747c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801747e:	4b24      	ldr	r3, [pc, #144]	@ (8017510 <sys_timeout_abs+0xd8>)
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d103      	bne.n	801748e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017486:	4a22      	ldr	r2, [pc, #136]	@ (8017510 <sys_timeout_abs+0xd8>)
 8017488:	693b      	ldr	r3, [r7, #16]
 801748a:	6013      	str	r3, [r2, #0]
    return;
 801748c:	e037      	b.n	80174fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801748e:	693b      	ldr	r3, [r7, #16]
 8017490:	685a      	ldr	r2, [r3, #4]
 8017492:	4b1f      	ldr	r3, [pc, #124]	@ (8017510 <sys_timeout_abs+0xd8>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	1ad3      	subs	r3, r2, r3
 801749a:	0fdb      	lsrs	r3, r3, #31
 801749c:	f003 0301 	and.w	r3, r3, #1
 80174a0:	b2db      	uxtb	r3, r3
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d007      	beq.n	80174b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80174a6:	4b1a      	ldr	r3, [pc, #104]	@ (8017510 <sys_timeout_abs+0xd8>)
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80174ae:	4a18      	ldr	r2, [pc, #96]	@ (8017510 <sys_timeout_abs+0xd8>)
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	6013      	str	r3, [r2, #0]
 80174b4:	e023      	b.n	80174fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80174b6:	4b16      	ldr	r3, [pc, #88]	@ (8017510 <sys_timeout_abs+0xd8>)
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	617b      	str	r3, [r7, #20]
 80174bc:	e01a      	b.n	80174f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d00b      	beq.n	80174de <sys_timeout_abs+0xa6>
 80174c6:	693b      	ldr	r3, [r7, #16]
 80174c8:	685a      	ldr	r2, [r3, #4]
 80174ca:	697b      	ldr	r3, [r7, #20]
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	685b      	ldr	r3, [r3, #4]
 80174d0:	1ad3      	subs	r3, r2, r3
 80174d2:	0fdb      	lsrs	r3, r3, #31
 80174d4:	f003 0301 	and.w	r3, r3, #1
 80174d8:	b2db      	uxtb	r3, r3
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d007      	beq.n	80174ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80174de:	697b      	ldr	r3, [r7, #20]
 80174e0:	681a      	ldr	r2, [r3, #0]
 80174e2:	693b      	ldr	r3, [r7, #16]
 80174e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80174e6:	697b      	ldr	r3, [r7, #20]
 80174e8:	693a      	ldr	r2, [r7, #16]
 80174ea:	601a      	str	r2, [r3, #0]
        break;
 80174ec:	e007      	b.n	80174fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	617b      	str	r3, [r7, #20]
 80174f4:	697b      	ldr	r3, [r7, #20]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d1e1      	bne.n	80174be <sys_timeout_abs+0x86>
 80174fa:	e000      	b.n	80174fe <sys_timeout_abs+0xc6>
    return;
 80174fc:	bf00      	nop
      }
    }
  }
}
 80174fe:	3718      	adds	r7, #24
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}
 8017504:	0801db74 	.word	0x0801db74
 8017508:	0801dba8 	.word	0x0801dba8
 801750c:	0801dbe8 	.word	0x0801dbe8
 8017510:	24014bfc 	.word	0x24014bfc

08017514 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017514:	b580      	push	{r7, lr}
 8017516:	b086      	sub	sp, #24
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017520:	697b      	ldr	r3, [r7, #20]
 8017522:	685b      	ldr	r3, [r3, #4]
 8017524:	4798      	blx	r3

  now = sys_now();
 8017526:	f7f4 fb4d 	bl	800bbc4 <sys_now>
 801752a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801752c:	697b      	ldr	r3, [r7, #20]
 801752e:	681a      	ldr	r2, [r3, #0]
 8017530:	4b0f      	ldr	r3, [pc, #60]	@ (8017570 <lwip_cyclic_timer+0x5c>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	4413      	add	r3, r2
 8017536:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017538:	68fa      	ldr	r2, [r7, #12]
 801753a:	693b      	ldr	r3, [r7, #16]
 801753c:	1ad3      	subs	r3, r2, r3
 801753e:	0fdb      	lsrs	r3, r3, #31
 8017540:	f003 0301 	and.w	r3, r3, #1
 8017544:	b2db      	uxtb	r3, r3
 8017546:	2b00      	cmp	r3, #0
 8017548:	d009      	beq.n	801755e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	681a      	ldr	r2, [r3, #0]
 801754e:	693b      	ldr	r3, [r7, #16]
 8017550:	4413      	add	r3, r2
 8017552:	687a      	ldr	r2, [r7, #4]
 8017554:	4907      	ldr	r1, [pc, #28]	@ (8017574 <lwip_cyclic_timer+0x60>)
 8017556:	4618      	mov	r0, r3
 8017558:	f7ff ff6e 	bl	8017438 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801755c:	e004      	b.n	8017568 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801755e:	687a      	ldr	r2, [r7, #4]
 8017560:	4904      	ldr	r1, [pc, #16]	@ (8017574 <lwip_cyclic_timer+0x60>)
 8017562:	68f8      	ldr	r0, [r7, #12]
 8017564:	f7ff ff68 	bl	8017438 <sys_timeout_abs>
}
 8017568:	bf00      	nop
 801756a:	3718      	adds	r7, #24
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}
 8017570:	24014c00 	.word	0x24014c00
 8017574:	08017515 	.word	0x08017515

08017578 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801757e:	2301      	movs	r3, #1
 8017580:	607b      	str	r3, [r7, #4]
 8017582:	e00e      	b.n	80175a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017584:	4a0b      	ldr	r2, [pc, #44]	@ (80175b4 <sys_timeouts_init+0x3c>)
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	00db      	lsls	r3, r3, #3
 8017590:	4a08      	ldr	r2, [pc, #32]	@ (80175b4 <sys_timeouts_init+0x3c>)
 8017592:	4413      	add	r3, r2
 8017594:	461a      	mov	r2, r3
 8017596:	4908      	ldr	r1, [pc, #32]	@ (80175b8 <sys_timeouts_init+0x40>)
 8017598:	f000 f810 	bl	80175bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	3301      	adds	r3, #1
 80175a0:	607b      	str	r3, [r7, #4]
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	2b02      	cmp	r3, #2
 80175a6:	d9ed      	bls.n	8017584 <sys_timeouts_init+0xc>
  }
}
 80175a8:	bf00      	nop
 80175aa:	bf00      	nop
 80175ac:	3708      	adds	r7, #8
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}
 80175b2:	bf00      	nop
 80175b4:	0801e7f8 	.word	0x0801e7f8
 80175b8:	08017515 	.word	0x08017515

080175bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b086      	sub	sp, #24
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80175ce:	d306      	bcc.n	80175de <sys_timeout+0x22>
 80175d0:	4b0a      	ldr	r3, [pc, #40]	@ (80175fc <sys_timeout+0x40>)
 80175d2:	f240 1229 	movw	r2, #297	@ 0x129
 80175d6:	490a      	ldr	r1, [pc, #40]	@ (8017600 <sys_timeout+0x44>)
 80175d8:	480a      	ldr	r0, [pc, #40]	@ (8017604 <sys_timeout+0x48>)
 80175da:	f003 faeb 	bl	801abb4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80175de:	f7f4 faf1 	bl	800bbc4 <sys_now>
 80175e2:	4602      	mov	r2, r0
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	4413      	add	r3, r2
 80175e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80175ea:	687a      	ldr	r2, [r7, #4]
 80175ec:	68b9      	ldr	r1, [r7, #8]
 80175ee:	6978      	ldr	r0, [r7, #20]
 80175f0:	f7ff ff22 	bl	8017438 <sys_timeout_abs>
#endif
}
 80175f4:	bf00      	nop
 80175f6:	3718      	adds	r7, #24
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}
 80175fc:	0801db74 	.word	0x0801db74
 8017600:	0801dc10 	.word	0x0801dc10
 8017604:	0801dbe8 	.word	0x0801dbe8

08017608 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b084      	sub	sp, #16
 801760c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801760e:	f7f4 fad9 	bl	800bbc4 <sys_now>
 8017612:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017614:	4b17      	ldr	r3, [pc, #92]	@ (8017674 <sys_check_timeouts+0x6c>)
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801761a:	68bb      	ldr	r3, [r7, #8]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d022      	beq.n	8017666 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	68fa      	ldr	r2, [r7, #12]
 8017626:	1ad3      	subs	r3, r2, r3
 8017628:	0fdb      	lsrs	r3, r3, #31
 801762a:	f003 0301 	and.w	r3, r3, #1
 801762e:	b2db      	uxtb	r3, r3
 8017630:	2b00      	cmp	r3, #0
 8017632:	d11a      	bne.n	801766a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	4a0e      	ldr	r2, [pc, #56]	@ (8017674 <sys_check_timeouts+0x6c>)
 801763a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801763c:	68bb      	ldr	r3, [r7, #8]
 801763e:	689b      	ldr	r3, [r3, #8]
 8017640:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017642:	68bb      	ldr	r3, [r7, #8]
 8017644:	68db      	ldr	r3, [r3, #12]
 8017646:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017648:	68bb      	ldr	r3, [r7, #8]
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	4a0a      	ldr	r2, [pc, #40]	@ (8017678 <sys_check_timeouts+0x70>)
 801764e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017650:	68b9      	ldr	r1, [r7, #8]
 8017652:	200b      	movs	r0, #11
 8017654:	f7f9 fb30 	bl	8010cb8 <memp_free>
    if (handler != NULL) {
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d0da      	beq.n	8017614 <sys_check_timeouts+0xc>
      handler(arg);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	6838      	ldr	r0, [r7, #0]
 8017662:	4798      	blx	r3
  do {
 8017664:	e7d6      	b.n	8017614 <sys_check_timeouts+0xc>
      return;
 8017666:	bf00      	nop
 8017668:	e000      	b.n	801766c <sys_check_timeouts+0x64>
      return;
 801766a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801766c:	3710      	adds	r7, #16
 801766e:	46bd      	mov	sp, r7
 8017670:	bd80      	pop	{r7, pc}
 8017672:	bf00      	nop
 8017674:	24014bfc 	.word	0x24014bfc
 8017678:	24014c00 	.word	0x24014c00

0801767c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017682:	4b16      	ldr	r3, [pc, #88]	@ (80176dc <sys_timeouts_sleeptime+0x60>)
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d102      	bne.n	8017690 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801768a:	f04f 33ff 	mov.w	r3, #4294967295
 801768e:	e020      	b.n	80176d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017690:	f7f4 fa98 	bl	800bbc4 <sys_now>
 8017694:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017696:	4b11      	ldr	r3, [pc, #68]	@ (80176dc <sys_timeouts_sleeptime+0x60>)
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	685a      	ldr	r2, [r3, #4]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	1ad3      	subs	r3, r2, r3
 80176a0:	0fdb      	lsrs	r3, r3, #31
 80176a2:	f003 0301 	and.w	r3, r3, #1
 80176a6:	b2db      	uxtb	r3, r3
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d001      	beq.n	80176b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80176ac:	2300      	movs	r3, #0
 80176ae:	e010      	b.n	80176d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80176b0:	4b0a      	ldr	r3, [pc, #40]	@ (80176dc <sys_timeouts_sleeptime+0x60>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	685a      	ldr	r2, [r3, #4]
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	1ad3      	subs	r3, r2, r3
 80176ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80176bc:	683b      	ldr	r3, [r7, #0]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	da06      	bge.n	80176d0 <sys_timeouts_sleeptime+0x54>
 80176c2:	4b07      	ldr	r3, [pc, #28]	@ (80176e0 <sys_timeouts_sleeptime+0x64>)
 80176c4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80176c8:	4906      	ldr	r1, [pc, #24]	@ (80176e4 <sys_timeouts_sleeptime+0x68>)
 80176ca:	4807      	ldr	r0, [pc, #28]	@ (80176e8 <sys_timeouts_sleeptime+0x6c>)
 80176cc:	f003 fa72 	bl	801abb4 <iprintf>
    return ret;
 80176d0:	683b      	ldr	r3, [r7, #0]
  }
}
 80176d2:	4618      	mov	r0, r3
 80176d4:	3708      	adds	r7, #8
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bd80      	pop	{r7, pc}
 80176da:	bf00      	nop
 80176dc:	24014bfc 	.word	0x24014bfc
 80176e0:	0801db74 	.word	0x0801db74
 80176e4:	0801dc48 	.word	0x0801dc48
 80176e8:	0801dbe8 	.word	0x0801dbe8

080176ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80176f0:	f003 f960 	bl	801a9b4 <rand>
 80176f4:	4603      	mov	r3, r0
 80176f6:	b29b      	uxth	r3, r3
 80176f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80176fc:	b29b      	uxth	r3, r3
 80176fe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017702:	b29a      	uxth	r2, r3
 8017704:	4b01      	ldr	r3, [pc, #4]	@ (801770c <udp_init+0x20>)
 8017706:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017708:	bf00      	nop
 801770a:	bd80      	pop	{r7, pc}
 801770c:	240049f0 	.word	0x240049f0

08017710 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017710:	b480      	push	{r7}
 8017712:	b083      	sub	sp, #12
 8017714:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017716:	2300      	movs	r3, #0
 8017718:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801771a:	4b17      	ldr	r3, [pc, #92]	@ (8017778 <udp_new_port+0x68>)
 801771c:	881b      	ldrh	r3, [r3, #0]
 801771e:	1c5a      	adds	r2, r3, #1
 8017720:	b291      	uxth	r1, r2
 8017722:	4a15      	ldr	r2, [pc, #84]	@ (8017778 <udp_new_port+0x68>)
 8017724:	8011      	strh	r1, [r2, #0]
 8017726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801772a:	4293      	cmp	r3, r2
 801772c:	d103      	bne.n	8017736 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801772e:	4b12      	ldr	r3, [pc, #72]	@ (8017778 <udp_new_port+0x68>)
 8017730:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017734:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017736:	4b11      	ldr	r3, [pc, #68]	@ (801777c <udp_new_port+0x6c>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	603b      	str	r3, [r7, #0]
 801773c:	e011      	b.n	8017762 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	8a5a      	ldrh	r2, [r3, #18]
 8017742:	4b0d      	ldr	r3, [pc, #52]	@ (8017778 <udp_new_port+0x68>)
 8017744:	881b      	ldrh	r3, [r3, #0]
 8017746:	429a      	cmp	r2, r3
 8017748:	d108      	bne.n	801775c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801774a:	88fb      	ldrh	r3, [r7, #6]
 801774c:	3301      	adds	r3, #1
 801774e:	80fb      	strh	r3, [r7, #6]
 8017750:	88fb      	ldrh	r3, [r7, #6]
 8017752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017756:	d3e0      	bcc.n	801771a <udp_new_port+0xa>
        return 0;
 8017758:	2300      	movs	r3, #0
 801775a:	e007      	b.n	801776c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	68db      	ldr	r3, [r3, #12]
 8017760:	603b      	str	r3, [r7, #0]
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d1ea      	bne.n	801773e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017768:	4b03      	ldr	r3, [pc, #12]	@ (8017778 <udp_new_port+0x68>)
 801776a:	881b      	ldrh	r3, [r3, #0]
}
 801776c:	4618      	mov	r0, r3
 801776e:	370c      	adds	r7, #12
 8017770:	46bd      	mov	sp, r7
 8017772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017776:	4770      	bx	lr
 8017778:	240049f0 	.word	0x240049f0
 801777c:	24014c08 	.word	0x24014c08

08017780 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b084      	sub	sp, #16
 8017784:	af00      	add	r7, sp, #0
 8017786:	60f8      	str	r0, [r7, #12]
 8017788:	60b9      	str	r1, [r7, #8]
 801778a:	4613      	mov	r3, r2
 801778c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d105      	bne.n	80177a0 <udp_input_local_match+0x20>
 8017794:	4b27      	ldr	r3, [pc, #156]	@ (8017834 <udp_input_local_match+0xb4>)
 8017796:	2287      	movs	r2, #135	@ 0x87
 8017798:	4927      	ldr	r1, [pc, #156]	@ (8017838 <udp_input_local_match+0xb8>)
 801779a:	4828      	ldr	r0, [pc, #160]	@ (801783c <udp_input_local_match+0xbc>)
 801779c:	f003 fa0a 	bl	801abb4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d105      	bne.n	80177b2 <udp_input_local_match+0x32>
 80177a6:	4b23      	ldr	r3, [pc, #140]	@ (8017834 <udp_input_local_match+0xb4>)
 80177a8:	2288      	movs	r2, #136	@ 0x88
 80177aa:	4925      	ldr	r1, [pc, #148]	@ (8017840 <udp_input_local_match+0xc0>)
 80177ac:	4823      	ldr	r0, [pc, #140]	@ (801783c <udp_input_local_match+0xbc>)
 80177ae:	f003 fa01 	bl	801abb4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	7a1b      	ldrb	r3, [r3, #8]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d00b      	beq.n	80177d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	7a1a      	ldrb	r2, [r3, #8]
 80177be:	4b21      	ldr	r3, [pc, #132]	@ (8017844 <udp_input_local_match+0xc4>)
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80177c6:	3301      	adds	r3, #1
 80177c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d001      	beq.n	80177d2 <udp_input_local_match+0x52>
    return 0;
 80177ce:	2300      	movs	r3, #0
 80177d0:	e02b      	b.n	801782a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80177d2:	79fb      	ldrb	r3, [r7, #7]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d018      	beq.n	801780a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d013      	beq.n	8017806 <udp_input_local_match+0x86>
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d00f      	beq.n	8017806 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80177e6:	4b17      	ldr	r3, [pc, #92]	@ (8017844 <udp_input_local_match+0xc4>)
 80177e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80177ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177ee:	d00a      	beq.n	8017806 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	681a      	ldr	r2, [r3, #0]
 80177f4:	4b13      	ldr	r3, [pc, #76]	@ (8017844 <udp_input_local_match+0xc4>)
 80177f6:	695b      	ldr	r3, [r3, #20]
 80177f8:	405a      	eors	r2, r3
 80177fa:	68bb      	ldr	r3, [r7, #8]
 80177fc:	3308      	adds	r3, #8
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017802:	2b00      	cmp	r3, #0
 8017804:	d110      	bne.n	8017828 <udp_input_local_match+0xa8>
          return 1;
 8017806:	2301      	movs	r3, #1
 8017808:	e00f      	b.n	801782a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d009      	beq.n	8017824 <udp_input_local_match+0xa4>
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d005      	beq.n	8017824 <udp_input_local_match+0xa4>
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	681a      	ldr	r2, [r3, #0]
 801781c:	4b09      	ldr	r3, [pc, #36]	@ (8017844 <udp_input_local_match+0xc4>)
 801781e:	695b      	ldr	r3, [r3, #20]
 8017820:	429a      	cmp	r2, r3
 8017822:	d101      	bne.n	8017828 <udp_input_local_match+0xa8>
        return 1;
 8017824:	2301      	movs	r3, #1
 8017826:	e000      	b.n	801782a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017828:	2300      	movs	r3, #0
}
 801782a:	4618      	mov	r0, r3
 801782c:	3710      	adds	r7, #16
 801782e:	46bd      	mov	sp, r7
 8017830:	bd80      	pop	{r7, pc}
 8017832:	bf00      	nop
 8017834:	0801dc5c 	.word	0x0801dc5c
 8017838:	0801dc8c 	.word	0x0801dc8c
 801783c:	0801dcb0 	.word	0x0801dcb0
 8017840:	0801dcd8 	.word	0x0801dcd8
 8017844:	2400e070 	.word	0x2400e070

08017848 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017848:	b590      	push	{r4, r7, lr}
 801784a:	b08d      	sub	sp, #52	@ 0x34
 801784c:	af02      	add	r7, sp, #8
 801784e:	6078      	str	r0, [r7, #4]
 8017850:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017852:	2300      	movs	r3, #0
 8017854:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d105      	bne.n	8017868 <udp_input+0x20>
 801785c:	4b7c      	ldr	r3, [pc, #496]	@ (8017a50 <udp_input+0x208>)
 801785e:	22cf      	movs	r2, #207	@ 0xcf
 8017860:	497c      	ldr	r1, [pc, #496]	@ (8017a54 <udp_input+0x20c>)
 8017862:	487d      	ldr	r0, [pc, #500]	@ (8017a58 <udp_input+0x210>)
 8017864:	f003 f9a6 	bl	801abb4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017868:	683b      	ldr	r3, [r7, #0]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d105      	bne.n	801787a <udp_input+0x32>
 801786e:	4b78      	ldr	r3, [pc, #480]	@ (8017a50 <udp_input+0x208>)
 8017870:	22d0      	movs	r2, #208	@ 0xd0
 8017872:	497a      	ldr	r1, [pc, #488]	@ (8017a5c <udp_input+0x214>)
 8017874:	4878      	ldr	r0, [pc, #480]	@ (8017a58 <udp_input+0x210>)
 8017876:	f003 f99d 	bl	801abb4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	895b      	ldrh	r3, [r3, #10]
 801787e:	2b07      	cmp	r3, #7
 8017880:	d803      	bhi.n	801788a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017882:	6878      	ldr	r0, [r7, #4]
 8017884:	f7fa f8c4 	bl	8011a10 <pbuf_free>
    goto end;
 8017888:	e0de      	b.n	8017a48 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	685b      	ldr	r3, [r3, #4]
 801788e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017890:	4b73      	ldr	r3, [pc, #460]	@ (8017a60 <udp_input+0x218>)
 8017892:	695b      	ldr	r3, [r3, #20]
 8017894:	4a72      	ldr	r2, [pc, #456]	@ (8017a60 <udp_input+0x218>)
 8017896:	6812      	ldr	r2, [r2, #0]
 8017898:	4611      	mov	r1, r2
 801789a:	4618      	mov	r0, r3
 801789c:	f001 ffb2 	bl	8019804 <ip4_addr_isbroadcast_u32>
 80178a0:	4603      	mov	r3, r0
 80178a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80178a4:	697b      	ldr	r3, [r7, #20]
 80178a6:	881b      	ldrh	r3, [r3, #0]
 80178a8:	b29b      	uxth	r3, r3
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7f8 fbfe 	bl	80100ac <lwip_htons>
 80178b0:	4603      	mov	r3, r0
 80178b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80178b4:	697b      	ldr	r3, [r7, #20]
 80178b6:	885b      	ldrh	r3, [r3, #2]
 80178b8:	b29b      	uxth	r3, r3
 80178ba:	4618      	mov	r0, r3
 80178bc:	f7f8 fbf6 	bl	80100ac <lwip_htons>
 80178c0:	4603      	mov	r3, r0
 80178c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80178c4:	2300      	movs	r3, #0
 80178c6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80178c8:	2300      	movs	r3, #0
 80178ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80178cc:	2300      	movs	r3, #0
 80178ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80178d0:	4b64      	ldr	r3, [pc, #400]	@ (8017a64 <udp_input+0x21c>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80178d6:	e054      	b.n	8017982 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80178d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178da:	8a5b      	ldrh	r3, [r3, #18]
 80178dc:	89fa      	ldrh	r2, [r7, #14]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d14a      	bne.n	8017978 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80178e2:	7cfb      	ldrb	r3, [r7, #19]
 80178e4:	461a      	mov	r2, r3
 80178e6:	6839      	ldr	r1, [r7, #0]
 80178e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80178ea:	f7ff ff49 	bl	8017780 <udp_input_local_match>
 80178ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d041      	beq.n	8017978 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80178f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178f6:	7c1b      	ldrb	r3, [r3, #16]
 80178f8:	f003 0304 	and.w	r3, r3, #4
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d11d      	bne.n	801793c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017900:	69fb      	ldr	r3, [r7, #28]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d102      	bne.n	801790c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017908:	61fb      	str	r3, [r7, #28]
 801790a:	e017      	b.n	801793c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801790c:	7cfb      	ldrb	r3, [r7, #19]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d014      	beq.n	801793c <udp_input+0xf4>
 8017912:	4b53      	ldr	r3, [pc, #332]	@ (8017a60 <udp_input+0x218>)
 8017914:	695b      	ldr	r3, [r3, #20]
 8017916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801791a:	d10f      	bne.n	801793c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801791c:	69fb      	ldr	r3, [r7, #28]
 801791e:	681a      	ldr	r2, [r3, #0]
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	3304      	adds	r3, #4
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	429a      	cmp	r2, r3
 8017928:	d008      	beq.n	801793c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801792c:	681a      	ldr	r2, [r3, #0]
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	3304      	adds	r3, #4
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	429a      	cmp	r2, r3
 8017936:	d101      	bne.n	801793c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801793a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801793c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801793e:	8a9b      	ldrh	r3, [r3, #20]
 8017940:	8a3a      	ldrh	r2, [r7, #16]
 8017942:	429a      	cmp	r2, r3
 8017944:	d118      	bne.n	8017978 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017948:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801794a:	2b00      	cmp	r3, #0
 801794c:	d005      	beq.n	801795a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017950:	685a      	ldr	r2, [r3, #4]
 8017952:	4b43      	ldr	r3, [pc, #268]	@ (8017a60 <udp_input+0x218>)
 8017954:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017956:	429a      	cmp	r2, r3
 8017958:	d10e      	bne.n	8017978 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801795a:	6a3b      	ldr	r3, [r7, #32]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d014      	beq.n	801798a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017962:	68da      	ldr	r2, [r3, #12]
 8017964:	6a3b      	ldr	r3, [r7, #32]
 8017966:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017968:	4b3e      	ldr	r3, [pc, #248]	@ (8017a64 <udp_input+0x21c>)
 801796a:	681a      	ldr	r2, [r3, #0]
 801796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801796e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017970:	4a3c      	ldr	r2, [pc, #240]	@ (8017a64 <udp_input+0x21c>)
 8017972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017974:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017976:	e008      	b.n	801798a <udp_input+0x142>
      }
    }

    prev = pcb;
 8017978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801797a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801797c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801797e:	68db      	ldr	r3, [r3, #12]
 8017980:	627b      	str	r3, [r7, #36]	@ 0x24
 8017982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017984:	2b00      	cmp	r3, #0
 8017986:	d1a7      	bne.n	80178d8 <udp_input+0x90>
 8017988:	e000      	b.n	801798c <udp_input+0x144>
        break;
 801798a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801798e:	2b00      	cmp	r3, #0
 8017990:	d101      	bne.n	8017996 <udp_input+0x14e>
    pcb = uncon_pcb;
 8017992:	69fb      	ldr	r3, [r7, #28]
 8017994:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017998:	2b00      	cmp	r3, #0
 801799a:	d002      	beq.n	80179a2 <udp_input+0x15a>
    for_us = 1;
 801799c:	2301      	movs	r3, #1
 801799e:	76fb      	strb	r3, [r7, #27]
 80179a0:	e00a      	b.n	80179b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	3304      	adds	r3, #4
 80179a6:	681a      	ldr	r2, [r3, #0]
 80179a8:	4b2d      	ldr	r3, [pc, #180]	@ (8017a60 <udp_input+0x218>)
 80179aa:	695b      	ldr	r3, [r3, #20]
 80179ac:	429a      	cmp	r2, r3
 80179ae:	bf0c      	ite	eq
 80179b0:	2301      	moveq	r3, #1
 80179b2:	2300      	movne	r3, #0
 80179b4:	b2db      	uxtb	r3, r3
 80179b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80179b8:	7efb      	ldrb	r3, [r7, #27]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d041      	beq.n	8017a42 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80179be:	2108      	movs	r1, #8
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f7f9 ff9f 	bl	8011904 <pbuf_remove_header>
 80179c6:	4603      	mov	r3, r0
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d00a      	beq.n	80179e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80179cc:	4b20      	ldr	r3, [pc, #128]	@ (8017a50 <udp_input+0x208>)
 80179ce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80179d2:	4925      	ldr	r1, [pc, #148]	@ (8017a68 <udp_input+0x220>)
 80179d4:	4820      	ldr	r0, [pc, #128]	@ (8017a58 <udp_input+0x210>)
 80179d6:	f003 f8ed 	bl	801abb4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80179da:	6878      	ldr	r0, [r7, #4]
 80179dc:	f7fa f818 	bl	8011a10 <pbuf_free>
      goto end;
 80179e0:	e032      	b.n	8017a48 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80179e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d012      	beq.n	8017a0e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80179e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ea:	699b      	ldr	r3, [r3, #24]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d00a      	beq.n	8017a06 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80179f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179f2:	699c      	ldr	r4, [r3, #24]
 80179f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179f6:	69d8      	ldr	r0, [r3, #28]
 80179f8:	8a3b      	ldrh	r3, [r7, #16]
 80179fa:	9300      	str	r3, [sp, #0]
 80179fc:	4b1b      	ldr	r3, [pc, #108]	@ (8017a6c <udp_input+0x224>)
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017a02:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017a04:	e021      	b.n	8017a4a <udp_input+0x202>
        pbuf_free(p);
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f7fa f802 	bl	8011a10 <pbuf_free>
        goto end;
 8017a0c:	e01c      	b.n	8017a48 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017a0e:	7cfb      	ldrb	r3, [r7, #19]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d112      	bne.n	8017a3a <udp_input+0x1f2>
 8017a14:	4b12      	ldr	r3, [pc, #72]	@ (8017a60 <udp_input+0x218>)
 8017a16:	695b      	ldr	r3, [r3, #20]
 8017a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017a1c:	2be0      	cmp	r3, #224	@ 0xe0
 8017a1e:	d00c      	beq.n	8017a3a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017a20:	4b0f      	ldr	r3, [pc, #60]	@ (8017a60 <udp_input+0x218>)
 8017a22:	899b      	ldrh	r3, [r3, #12]
 8017a24:	3308      	adds	r3, #8
 8017a26:	b29b      	uxth	r3, r3
 8017a28:	b21b      	sxth	r3, r3
 8017a2a:	4619      	mov	r1, r3
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	f7f9 ffdc 	bl	80119ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017a32:	2103      	movs	r1, #3
 8017a34:	6878      	ldr	r0, [r7, #4]
 8017a36:	f001 fbaf 	bl	8019198 <icmp_dest_unreach>
      pbuf_free(p);
 8017a3a:	6878      	ldr	r0, [r7, #4]
 8017a3c:	f7f9 ffe8 	bl	8011a10 <pbuf_free>
  return;
 8017a40:	e003      	b.n	8017a4a <udp_input+0x202>
    pbuf_free(p);
 8017a42:	6878      	ldr	r0, [r7, #4]
 8017a44:	f7f9 ffe4 	bl	8011a10 <pbuf_free>
  return;
 8017a48:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017a4a:	372c      	adds	r7, #44	@ 0x2c
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd90      	pop	{r4, r7, pc}
 8017a50:	0801dc5c 	.word	0x0801dc5c
 8017a54:	0801dd00 	.word	0x0801dd00
 8017a58:	0801dcb0 	.word	0x0801dcb0
 8017a5c:	0801dd18 	.word	0x0801dd18
 8017a60:	2400e070 	.word	0x2400e070
 8017a64:	24014c08 	.word	0x24014c08
 8017a68:	0801dd34 	.word	0x0801dd34
 8017a6c:	2400e080 	.word	0x2400e080

08017a70 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b082      	sub	sp, #8
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
 8017a78:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d109      	bne.n	8017a94 <udp_send+0x24>
 8017a80:	4b11      	ldr	r3, [pc, #68]	@ (8017ac8 <udp_send+0x58>)
 8017a82:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8017a86:	4911      	ldr	r1, [pc, #68]	@ (8017acc <udp_send+0x5c>)
 8017a88:	4811      	ldr	r0, [pc, #68]	@ (8017ad0 <udp_send+0x60>)
 8017a8a:	f003 f893 	bl	801abb4 <iprintf>
 8017a8e:	f06f 030f 	mvn.w	r3, #15
 8017a92:	e015      	b.n	8017ac0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d109      	bne.n	8017aae <udp_send+0x3e>
 8017a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8017ac8 <udp_send+0x58>)
 8017a9c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8017aa0:	490c      	ldr	r1, [pc, #48]	@ (8017ad4 <udp_send+0x64>)
 8017aa2:	480b      	ldr	r0, [pc, #44]	@ (8017ad0 <udp_send+0x60>)
 8017aa4:	f003 f886 	bl	801abb4 <iprintf>
 8017aa8:	f06f 030f 	mvn.w	r3, #15
 8017aac:	e008      	b.n	8017ac0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	1d1a      	adds	r2, r3, #4
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	8a9b      	ldrh	r3, [r3, #20]
 8017ab6:	6839      	ldr	r1, [r7, #0]
 8017ab8:	6878      	ldr	r0, [r7, #4]
 8017aba:	f000 f80d 	bl	8017ad8 <udp_sendto>
 8017abe:	4603      	mov	r3, r0
}
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	3708      	adds	r7, #8
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}
 8017ac8:	0801dc5c 	.word	0x0801dc5c
 8017acc:	0801dd50 	.word	0x0801dd50
 8017ad0:	0801dcb0 	.word	0x0801dcb0
 8017ad4:	0801dd68 	.word	0x0801dd68

08017ad8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b088      	sub	sp, #32
 8017adc:	af02      	add	r7, sp, #8
 8017ade:	60f8      	str	r0, [r7, #12]
 8017ae0:	60b9      	str	r1, [r7, #8]
 8017ae2:	607a      	str	r2, [r7, #4]
 8017ae4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d109      	bne.n	8017b00 <udp_sendto+0x28>
 8017aec:	4b23      	ldr	r3, [pc, #140]	@ (8017b7c <udp_sendto+0xa4>)
 8017aee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017af2:	4923      	ldr	r1, [pc, #140]	@ (8017b80 <udp_sendto+0xa8>)
 8017af4:	4823      	ldr	r0, [pc, #140]	@ (8017b84 <udp_sendto+0xac>)
 8017af6:	f003 f85d 	bl	801abb4 <iprintf>
 8017afa:	f06f 030f 	mvn.w	r3, #15
 8017afe:	e038      	b.n	8017b72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d109      	bne.n	8017b1a <udp_sendto+0x42>
 8017b06:	4b1d      	ldr	r3, [pc, #116]	@ (8017b7c <udp_sendto+0xa4>)
 8017b08:	f240 2219 	movw	r2, #537	@ 0x219
 8017b0c:	491e      	ldr	r1, [pc, #120]	@ (8017b88 <udp_sendto+0xb0>)
 8017b0e:	481d      	ldr	r0, [pc, #116]	@ (8017b84 <udp_sendto+0xac>)
 8017b10:	f003 f850 	bl	801abb4 <iprintf>
 8017b14:	f06f 030f 	mvn.w	r3, #15
 8017b18:	e02b      	b.n	8017b72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d109      	bne.n	8017b34 <udp_sendto+0x5c>
 8017b20:	4b16      	ldr	r3, [pc, #88]	@ (8017b7c <udp_sendto+0xa4>)
 8017b22:	f240 221a 	movw	r2, #538	@ 0x21a
 8017b26:	4919      	ldr	r1, [pc, #100]	@ (8017b8c <udp_sendto+0xb4>)
 8017b28:	4816      	ldr	r0, [pc, #88]	@ (8017b84 <udp_sendto+0xac>)
 8017b2a:	f003 f843 	bl	801abb4 <iprintf>
 8017b2e:	f06f 030f 	mvn.w	r3, #15
 8017b32:	e01e      	b.n	8017b72 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	7a1b      	ldrb	r3, [r3, #8]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d006      	beq.n	8017b4a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	7a1b      	ldrb	r3, [r3, #8]
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7f9 fbd3 	bl	80112ec <netif_get_by_index>
 8017b46:	6178      	str	r0, [r7, #20]
 8017b48:	e003      	b.n	8017b52 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f001 fbb8 	bl	80192c0 <ip4_route>
 8017b50:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017b52:	697b      	ldr	r3, [r7, #20]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d102      	bne.n	8017b5e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017b58:	f06f 0303 	mvn.w	r3, #3
 8017b5c:	e009      	b.n	8017b72 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8017b5e:	887a      	ldrh	r2, [r7, #2]
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	9300      	str	r3, [sp, #0]
 8017b64:	4613      	mov	r3, r2
 8017b66:	687a      	ldr	r2, [r7, #4]
 8017b68:	68b9      	ldr	r1, [r7, #8]
 8017b6a:	68f8      	ldr	r0, [r7, #12]
 8017b6c:	f000 f810 	bl	8017b90 <udp_sendto_if>
 8017b70:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017b72:	4618      	mov	r0, r3
 8017b74:	3718      	adds	r7, #24
 8017b76:	46bd      	mov	sp, r7
 8017b78:	bd80      	pop	{r7, pc}
 8017b7a:	bf00      	nop
 8017b7c:	0801dc5c 	.word	0x0801dc5c
 8017b80:	0801dd80 	.word	0x0801dd80
 8017b84:	0801dcb0 	.word	0x0801dcb0
 8017b88:	0801dd98 	.word	0x0801dd98
 8017b8c:	0801ddb4 	.word	0x0801ddb4

08017b90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b088      	sub	sp, #32
 8017b94:	af02      	add	r7, sp, #8
 8017b96:	60f8      	str	r0, [r7, #12]
 8017b98:	60b9      	str	r1, [r7, #8]
 8017b9a:	607a      	str	r2, [r7, #4]
 8017b9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d109      	bne.n	8017bb8 <udp_sendto_if+0x28>
 8017ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8017c60 <udp_sendto_if+0xd0>)
 8017ba6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017baa:	492e      	ldr	r1, [pc, #184]	@ (8017c64 <udp_sendto_if+0xd4>)
 8017bac:	482e      	ldr	r0, [pc, #184]	@ (8017c68 <udp_sendto_if+0xd8>)
 8017bae:	f003 f801 	bl	801abb4 <iprintf>
 8017bb2:	f06f 030f 	mvn.w	r3, #15
 8017bb6:	e04f      	b.n	8017c58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017bb8:	68bb      	ldr	r3, [r7, #8]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d109      	bne.n	8017bd2 <udp_sendto_if+0x42>
 8017bbe:	4b28      	ldr	r3, [pc, #160]	@ (8017c60 <udp_sendto_if+0xd0>)
 8017bc0:	f240 2281 	movw	r2, #641	@ 0x281
 8017bc4:	4929      	ldr	r1, [pc, #164]	@ (8017c6c <udp_sendto_if+0xdc>)
 8017bc6:	4828      	ldr	r0, [pc, #160]	@ (8017c68 <udp_sendto_if+0xd8>)
 8017bc8:	f002 fff4 	bl	801abb4 <iprintf>
 8017bcc:	f06f 030f 	mvn.w	r3, #15
 8017bd0:	e042      	b.n	8017c58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d109      	bne.n	8017bec <udp_sendto_if+0x5c>
 8017bd8:	4b21      	ldr	r3, [pc, #132]	@ (8017c60 <udp_sendto_if+0xd0>)
 8017bda:	f240 2282 	movw	r2, #642	@ 0x282
 8017bde:	4924      	ldr	r1, [pc, #144]	@ (8017c70 <udp_sendto_if+0xe0>)
 8017be0:	4821      	ldr	r0, [pc, #132]	@ (8017c68 <udp_sendto_if+0xd8>)
 8017be2:	f002 ffe7 	bl	801abb4 <iprintf>
 8017be6:	f06f 030f 	mvn.w	r3, #15
 8017bea:	e035      	b.n	8017c58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017bec:	6a3b      	ldr	r3, [r7, #32]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d109      	bne.n	8017c06 <udp_sendto_if+0x76>
 8017bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8017c60 <udp_sendto_if+0xd0>)
 8017bf4:	f240 2283 	movw	r2, #643	@ 0x283
 8017bf8:	491e      	ldr	r1, [pc, #120]	@ (8017c74 <udp_sendto_if+0xe4>)
 8017bfa:	481b      	ldr	r0, [pc, #108]	@ (8017c68 <udp_sendto_if+0xd8>)
 8017bfc:	f002 ffda 	bl	801abb4 <iprintf>
 8017c00:	f06f 030f 	mvn.w	r3, #15
 8017c04:	e028      	b.n	8017c58 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d009      	beq.n	8017c20 <udp_sendto_if+0x90>
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d005      	beq.n	8017c20 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017c1c:	2be0      	cmp	r3, #224	@ 0xe0
 8017c1e:	d103      	bne.n	8017c28 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017c20:	6a3b      	ldr	r3, [r7, #32]
 8017c22:	3304      	adds	r3, #4
 8017c24:	617b      	str	r3, [r7, #20]
 8017c26:	e00b      	b.n	8017c40 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	681a      	ldr	r2, [r3, #0]
 8017c2c:	6a3b      	ldr	r3, [r7, #32]
 8017c2e:	3304      	adds	r3, #4
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	429a      	cmp	r2, r3
 8017c34:	d002      	beq.n	8017c3c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017c36:	f06f 0303 	mvn.w	r3, #3
 8017c3a:	e00d      	b.n	8017c58 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017c40:	887a      	ldrh	r2, [r7, #2]
 8017c42:	697b      	ldr	r3, [r7, #20]
 8017c44:	9301      	str	r3, [sp, #4]
 8017c46:	6a3b      	ldr	r3, [r7, #32]
 8017c48:	9300      	str	r3, [sp, #0]
 8017c4a:	4613      	mov	r3, r2
 8017c4c:	687a      	ldr	r2, [r7, #4]
 8017c4e:	68b9      	ldr	r1, [r7, #8]
 8017c50:	68f8      	ldr	r0, [r7, #12]
 8017c52:	f000 f811 	bl	8017c78 <udp_sendto_if_src>
 8017c56:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017c58:	4618      	mov	r0, r3
 8017c5a:	3718      	adds	r7, #24
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	bd80      	pop	{r7, pc}
 8017c60:	0801dc5c 	.word	0x0801dc5c
 8017c64:	0801ddd0 	.word	0x0801ddd0
 8017c68:	0801dcb0 	.word	0x0801dcb0
 8017c6c:	0801ddec 	.word	0x0801ddec
 8017c70:	0801de08 	.word	0x0801de08
 8017c74:	0801de28 	.word	0x0801de28

08017c78 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b08c      	sub	sp, #48	@ 0x30
 8017c7c:	af04      	add	r7, sp, #16
 8017c7e:	60f8      	str	r0, [r7, #12]
 8017c80:	60b9      	str	r1, [r7, #8]
 8017c82:	607a      	str	r2, [r7, #4]
 8017c84:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d109      	bne.n	8017ca0 <udp_sendto_if_src+0x28>
 8017c8c:	4b65      	ldr	r3, [pc, #404]	@ (8017e24 <udp_sendto_if_src+0x1ac>)
 8017c8e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8017c92:	4965      	ldr	r1, [pc, #404]	@ (8017e28 <udp_sendto_if_src+0x1b0>)
 8017c94:	4865      	ldr	r0, [pc, #404]	@ (8017e2c <udp_sendto_if_src+0x1b4>)
 8017c96:	f002 ff8d 	bl	801abb4 <iprintf>
 8017c9a:	f06f 030f 	mvn.w	r3, #15
 8017c9e:	e0bc      	b.n	8017e1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d109      	bne.n	8017cba <udp_sendto_if_src+0x42>
 8017ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8017e24 <udp_sendto_if_src+0x1ac>)
 8017ca8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8017cac:	4960      	ldr	r1, [pc, #384]	@ (8017e30 <udp_sendto_if_src+0x1b8>)
 8017cae:	485f      	ldr	r0, [pc, #380]	@ (8017e2c <udp_sendto_if_src+0x1b4>)
 8017cb0:	f002 ff80 	bl	801abb4 <iprintf>
 8017cb4:	f06f 030f 	mvn.w	r3, #15
 8017cb8:	e0af      	b.n	8017e1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d109      	bne.n	8017cd4 <udp_sendto_if_src+0x5c>
 8017cc0:	4b58      	ldr	r3, [pc, #352]	@ (8017e24 <udp_sendto_if_src+0x1ac>)
 8017cc2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8017cc6:	495b      	ldr	r1, [pc, #364]	@ (8017e34 <udp_sendto_if_src+0x1bc>)
 8017cc8:	4858      	ldr	r0, [pc, #352]	@ (8017e2c <udp_sendto_if_src+0x1b4>)
 8017cca:	f002 ff73 	bl	801abb4 <iprintf>
 8017cce:	f06f 030f 	mvn.w	r3, #15
 8017cd2:	e0a2      	b.n	8017e1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d109      	bne.n	8017cee <udp_sendto_if_src+0x76>
 8017cda:	4b52      	ldr	r3, [pc, #328]	@ (8017e24 <udp_sendto_if_src+0x1ac>)
 8017cdc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8017ce0:	4955      	ldr	r1, [pc, #340]	@ (8017e38 <udp_sendto_if_src+0x1c0>)
 8017ce2:	4852      	ldr	r0, [pc, #328]	@ (8017e2c <udp_sendto_if_src+0x1b4>)
 8017ce4:	f002 ff66 	bl	801abb4 <iprintf>
 8017ce8:	f06f 030f 	mvn.w	r3, #15
 8017cec:	e095      	b.n	8017e1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d109      	bne.n	8017d08 <udp_sendto_if_src+0x90>
 8017cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8017e24 <udp_sendto_if_src+0x1ac>)
 8017cf6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8017cfa:	4950      	ldr	r1, [pc, #320]	@ (8017e3c <udp_sendto_if_src+0x1c4>)
 8017cfc:	484b      	ldr	r0, [pc, #300]	@ (8017e2c <udp_sendto_if_src+0x1b4>)
 8017cfe:	f002 ff59 	bl	801abb4 <iprintf>
 8017d02:	f06f 030f 	mvn.w	r3, #15
 8017d06:	e088      	b.n	8017e1a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	8a5b      	ldrh	r3, [r3, #18]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d10f      	bne.n	8017d30 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017d10:	68f9      	ldr	r1, [r7, #12]
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	8a5b      	ldrh	r3, [r3, #18]
 8017d16:	461a      	mov	r2, r3
 8017d18:	68f8      	ldr	r0, [r7, #12]
 8017d1a:	f000 f893 	bl	8017e44 <udp_bind>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017d22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d002      	beq.n	8017d30 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017d2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017d2e:	e074      	b.n	8017e1a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	891b      	ldrh	r3, [r3, #8]
 8017d34:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8017d38:	4293      	cmp	r3, r2
 8017d3a:	d902      	bls.n	8017d42 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8017d40:	e06b      	b.n	8017e1a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017d42:	2108      	movs	r1, #8
 8017d44:	68b8      	ldr	r0, [r7, #8]
 8017d46:	f7f9 fdcd 	bl	80118e4 <pbuf_add_header>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d015      	beq.n	8017d7c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017d50:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017d54:	2108      	movs	r1, #8
 8017d56:	2022      	movs	r0, #34	@ 0x22
 8017d58:	f7f9 fb72 	bl	8011440 <pbuf_alloc>
 8017d5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017d5e:	69fb      	ldr	r3, [r7, #28]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d102      	bne.n	8017d6a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017d64:	f04f 33ff 	mov.w	r3, #4294967295
 8017d68:	e057      	b.n	8017e1a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8017d6a:	68bb      	ldr	r3, [r7, #8]
 8017d6c:	891b      	ldrh	r3, [r3, #8]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d006      	beq.n	8017d80 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017d72:	68b9      	ldr	r1, [r7, #8]
 8017d74:	69f8      	ldr	r0, [r7, #28]
 8017d76:	f7f9 ff6f 	bl	8011c58 <pbuf_chain>
 8017d7a:	e001      	b.n	8017d80 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017d80:	69fb      	ldr	r3, [r7, #28]
 8017d82:	895b      	ldrh	r3, [r3, #10]
 8017d84:	2b07      	cmp	r3, #7
 8017d86:	d806      	bhi.n	8017d96 <udp_sendto_if_src+0x11e>
 8017d88:	4b26      	ldr	r3, [pc, #152]	@ (8017e24 <udp_sendto_if_src+0x1ac>)
 8017d8a:	f240 320d 	movw	r2, #781	@ 0x30d
 8017d8e:	492c      	ldr	r1, [pc, #176]	@ (8017e40 <udp_sendto_if_src+0x1c8>)
 8017d90:	4826      	ldr	r0, [pc, #152]	@ (8017e2c <udp_sendto_if_src+0x1b4>)
 8017d92:	f002 ff0f 	bl	801abb4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017d96:	69fb      	ldr	r3, [r7, #28]
 8017d98:	685b      	ldr	r3, [r3, #4]
 8017d9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	8a5b      	ldrh	r3, [r3, #18]
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7f8 f983 	bl	80100ac <lwip_htons>
 8017da6:	4603      	mov	r3, r0
 8017da8:	461a      	mov	r2, r3
 8017daa:	697b      	ldr	r3, [r7, #20]
 8017dac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8017dae:	887b      	ldrh	r3, [r7, #2]
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7f8 f97b 	bl	80100ac <lwip_htons>
 8017db6:	4603      	mov	r3, r0
 8017db8:	461a      	mov	r2, r3
 8017dba:	697b      	ldr	r3, [r7, #20]
 8017dbc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8017dbe:	697b      	ldr	r3, [r7, #20]
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	719a      	strb	r2, [r3, #6]
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017dc8:	69fb      	ldr	r3, [r7, #28]
 8017dca:	891b      	ldrh	r3, [r3, #8]
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f7f8 f96d 	bl	80100ac <lwip_htons>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	461a      	mov	r2, r3
 8017dd6:	697b      	ldr	r3, [r7, #20]
 8017dd8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8017dda:	2311      	movs	r3, #17
 8017ddc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	7adb      	ldrb	r3, [r3, #11]
 8017de2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	7a9b      	ldrb	r3, [r3, #10]
 8017de8:	7cb9      	ldrb	r1, [r7, #18]
 8017dea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017dec:	9202      	str	r2, [sp, #8]
 8017dee:	7cfa      	ldrb	r2, [r7, #19]
 8017df0:	9201      	str	r2, [sp, #4]
 8017df2:	9300      	str	r3, [sp, #0]
 8017df4:	460b      	mov	r3, r1
 8017df6:	687a      	ldr	r2, [r7, #4]
 8017df8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017dfa:	69f8      	ldr	r0, [r7, #28]
 8017dfc:	f001 fc54 	bl	80196a8 <ip4_output_if_src>
 8017e00:	4603      	mov	r3, r0
 8017e02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017e04:	69fa      	ldr	r2, [r7, #28]
 8017e06:	68bb      	ldr	r3, [r7, #8]
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	d004      	beq.n	8017e16 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8017e0c:	69f8      	ldr	r0, [r7, #28]
 8017e0e:	f7f9 fdff 	bl	8011a10 <pbuf_free>
    q = NULL;
 8017e12:	2300      	movs	r3, #0
 8017e14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8017e16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	3720      	adds	r7, #32
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bd80      	pop	{r7, pc}
 8017e22:	bf00      	nop
 8017e24:	0801dc5c 	.word	0x0801dc5c
 8017e28:	0801de48 	.word	0x0801de48
 8017e2c:	0801dcb0 	.word	0x0801dcb0
 8017e30:	0801de68 	.word	0x0801de68
 8017e34:	0801de88 	.word	0x0801de88
 8017e38:	0801deac 	.word	0x0801deac
 8017e3c:	0801ded0 	.word	0x0801ded0
 8017e40:	0801def4 	.word	0x0801def4

08017e44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b086      	sub	sp, #24
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	60f8      	str	r0, [r7, #12]
 8017e4c:	60b9      	str	r1, [r7, #8]
 8017e4e:	4613      	mov	r3, r2
 8017e50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017e52:	68bb      	ldr	r3, [r7, #8]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d101      	bne.n	8017e5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017e58:	4b39      	ldr	r3, [pc, #228]	@ (8017f40 <udp_bind+0xfc>)
 8017e5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d109      	bne.n	8017e76 <udp_bind+0x32>
 8017e62:	4b38      	ldr	r3, [pc, #224]	@ (8017f44 <udp_bind+0x100>)
 8017e64:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8017e68:	4937      	ldr	r1, [pc, #220]	@ (8017f48 <udp_bind+0x104>)
 8017e6a:	4838      	ldr	r0, [pc, #224]	@ (8017f4c <udp_bind+0x108>)
 8017e6c:	f002 fea2 	bl	801abb4 <iprintf>
 8017e70:	f06f 030f 	mvn.w	r3, #15
 8017e74:	e060      	b.n	8017f38 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017e76:	2300      	movs	r3, #0
 8017e78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017e7a:	4b35      	ldr	r3, [pc, #212]	@ (8017f50 <udp_bind+0x10c>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	617b      	str	r3, [r7, #20]
 8017e80:	e009      	b.n	8017e96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017e82:	68fa      	ldr	r2, [r7, #12]
 8017e84:	697b      	ldr	r3, [r7, #20]
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d102      	bne.n	8017e90 <udp_bind+0x4c>
      rebind = 1;
 8017e8a:	2301      	movs	r3, #1
 8017e8c:	74fb      	strb	r3, [r7, #19]
      break;
 8017e8e:	e005      	b.n	8017e9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	68db      	ldr	r3, [r3, #12]
 8017e94:	617b      	str	r3, [r7, #20]
 8017e96:	697b      	ldr	r3, [r7, #20]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d1f2      	bne.n	8017e82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017e9c:	88fb      	ldrh	r3, [r7, #6]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d109      	bne.n	8017eb6 <udp_bind+0x72>
    port = udp_new_port();
 8017ea2:	f7ff fc35 	bl	8017710 <udp_new_port>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017eaa:	88fb      	ldrh	r3, [r7, #6]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d12c      	bne.n	8017f0a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017eb0:	f06f 0307 	mvn.w	r3, #7
 8017eb4:	e040      	b.n	8017f38 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017eb6:	4b26      	ldr	r3, [pc, #152]	@ (8017f50 <udp_bind+0x10c>)
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	617b      	str	r3, [r7, #20]
 8017ebc:	e022      	b.n	8017f04 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017ebe:	68fa      	ldr	r2, [r7, #12]
 8017ec0:	697b      	ldr	r3, [r7, #20]
 8017ec2:	429a      	cmp	r2, r3
 8017ec4:	d01b      	beq.n	8017efe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017ec6:	697b      	ldr	r3, [r7, #20]
 8017ec8:	8a5b      	ldrh	r3, [r3, #18]
 8017eca:	88fa      	ldrh	r2, [r7, #6]
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d116      	bne.n	8017efe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017ed0:	697b      	ldr	r3, [r7, #20]
 8017ed2:	681a      	ldr	r2, [r3, #0]
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	d00d      	beq.n	8017ef8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017edc:	68bb      	ldr	r3, [r7, #8]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d00a      	beq.n	8017ef8 <udp_bind+0xb4>
 8017ee2:	68bb      	ldr	r3, [r7, #8]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d006      	beq.n	8017ef8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017eea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d003      	beq.n	8017ef8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017ef0:	697b      	ldr	r3, [r7, #20]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d102      	bne.n	8017efe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017ef8:	f06f 0307 	mvn.w	r3, #7
 8017efc:	e01c      	b.n	8017f38 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017efe:	697b      	ldr	r3, [r7, #20]
 8017f00:	68db      	ldr	r3, [r3, #12]
 8017f02:	617b      	str	r3, [r7, #20]
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d1d9      	bne.n	8017ebe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017f0a:	68bb      	ldr	r3, [r7, #8]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d002      	beq.n	8017f16 <udp_bind+0xd2>
 8017f10:	68bb      	ldr	r3, [r7, #8]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	e000      	b.n	8017f18 <udp_bind+0xd4>
 8017f16:	2300      	movs	r3, #0
 8017f18:	68fa      	ldr	r2, [r7, #12]
 8017f1a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	88fa      	ldrh	r2, [r7, #6]
 8017f20:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017f22:	7cfb      	ldrb	r3, [r7, #19]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d106      	bne.n	8017f36 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017f28:	4b09      	ldr	r3, [pc, #36]	@ (8017f50 <udp_bind+0x10c>)
 8017f2a:	681a      	ldr	r2, [r3, #0]
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017f30:	4a07      	ldr	r2, [pc, #28]	@ (8017f50 <udp_bind+0x10c>)
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017f36:	2300      	movs	r3, #0
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3718      	adds	r7, #24
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}
 8017f40:	0801e810 	.word	0x0801e810
 8017f44:	0801dc5c 	.word	0x0801dc5c
 8017f48:	0801df24 	.word	0x0801df24
 8017f4c:	0801dcb0 	.word	0x0801dcb0
 8017f50:	24014c08 	.word	0x24014c08

08017f54 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b086      	sub	sp, #24
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	60f8      	str	r0, [r7, #12]
 8017f5c:	60b9      	str	r1, [r7, #8]
 8017f5e:	4613      	mov	r3, r2
 8017f60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d109      	bne.n	8017f7c <udp_connect+0x28>
 8017f68:	4b2c      	ldr	r3, [pc, #176]	@ (801801c <udp_connect+0xc8>)
 8017f6a:	f240 4235 	movw	r2, #1077	@ 0x435
 8017f6e:	492c      	ldr	r1, [pc, #176]	@ (8018020 <udp_connect+0xcc>)
 8017f70:	482c      	ldr	r0, [pc, #176]	@ (8018024 <udp_connect+0xd0>)
 8017f72:	f002 fe1f 	bl	801abb4 <iprintf>
 8017f76:	f06f 030f 	mvn.w	r3, #15
 8017f7a:	e04b      	b.n	8018014 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d109      	bne.n	8017f96 <udp_connect+0x42>
 8017f82:	4b26      	ldr	r3, [pc, #152]	@ (801801c <udp_connect+0xc8>)
 8017f84:	f240 4236 	movw	r2, #1078	@ 0x436
 8017f88:	4927      	ldr	r1, [pc, #156]	@ (8018028 <udp_connect+0xd4>)
 8017f8a:	4826      	ldr	r0, [pc, #152]	@ (8018024 <udp_connect+0xd0>)
 8017f8c:	f002 fe12 	bl	801abb4 <iprintf>
 8017f90:	f06f 030f 	mvn.w	r3, #15
 8017f94:	e03e      	b.n	8018014 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	8a5b      	ldrh	r3, [r3, #18]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d10f      	bne.n	8017fbe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017f9e:	68f9      	ldr	r1, [r7, #12]
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	8a5b      	ldrh	r3, [r3, #18]
 8017fa4:	461a      	mov	r2, r3
 8017fa6:	68f8      	ldr	r0, [r7, #12]
 8017fa8:	f7ff ff4c 	bl	8017e44 <udp_bind>
 8017fac:	4603      	mov	r3, r0
 8017fae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017fb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d002      	beq.n	8017fbe <udp_connect+0x6a>
      return err;
 8017fb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017fbc:	e02a      	b.n	8018014 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8017fbe:	68bb      	ldr	r3, [r7, #8]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d002      	beq.n	8017fca <udp_connect+0x76>
 8017fc4:	68bb      	ldr	r3, [r7, #8]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	e000      	b.n	8017fcc <udp_connect+0x78>
 8017fca:	2300      	movs	r3, #0
 8017fcc:	68fa      	ldr	r2, [r7, #12]
 8017fce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	88fa      	ldrh	r2, [r7, #6]
 8017fd4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	7c1b      	ldrb	r3, [r3, #16]
 8017fda:	f043 0304 	orr.w	r3, r3, #4
 8017fde:	b2da      	uxtb	r2, r3
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017fe4:	4b11      	ldr	r3, [pc, #68]	@ (801802c <udp_connect+0xd8>)
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	617b      	str	r3, [r7, #20]
 8017fea:	e008      	b.n	8017ffe <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017fec:	68fa      	ldr	r2, [r7, #12]
 8017fee:	697b      	ldr	r3, [r7, #20]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d101      	bne.n	8017ff8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	e00d      	b.n	8018014 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	68db      	ldr	r3, [r3, #12]
 8017ffc:	617b      	str	r3, [r7, #20]
 8017ffe:	697b      	ldr	r3, [r7, #20]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d1f3      	bne.n	8017fec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018004:	4b09      	ldr	r3, [pc, #36]	@ (801802c <udp_connect+0xd8>)
 8018006:	681a      	ldr	r2, [r3, #0]
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801800c:	4a07      	ldr	r2, [pc, #28]	@ (801802c <udp_connect+0xd8>)
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018012:	2300      	movs	r3, #0
}
 8018014:	4618      	mov	r0, r3
 8018016:	3718      	adds	r7, #24
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}
 801801c:	0801dc5c 	.word	0x0801dc5c
 8018020:	0801df3c 	.word	0x0801df3c
 8018024:	0801dcb0 	.word	0x0801dcb0
 8018028:	0801df58 	.word	0x0801df58
 801802c:	24014c08 	.word	0x24014c08

08018030 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b082      	sub	sp, #8
 8018034:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018036:	2001      	movs	r0, #1
 8018038:	f7f8 fdc8 	bl	8010bcc <memp_malloc>
 801803c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d007      	beq.n	8018054 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018044:	2220      	movs	r2, #32
 8018046:	2100      	movs	r1, #0
 8018048:	6878      	ldr	r0, [r7, #4]
 801804a:	f002 fe18 	bl	801ac7e <memset>
    pcb->ttl = UDP_TTL;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	22ff      	movs	r2, #255	@ 0xff
 8018052:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018054:	687b      	ldr	r3, [r7, #4]
}
 8018056:	4618      	mov	r0, r3
 8018058:	3708      	adds	r7, #8
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}
	...

08018060 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018060:	b480      	push	{r7}
 8018062:	b085      	sub	sp, #20
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d01e      	beq.n	80180ae <udp_netif_ip_addr_changed+0x4e>
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d01a      	beq.n	80180ae <udp_netif_ip_addr_changed+0x4e>
 8018078:	683b      	ldr	r3, [r7, #0]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d017      	beq.n	80180ae <udp_netif_ip_addr_changed+0x4e>
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d013      	beq.n	80180ae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018086:	4b0d      	ldr	r3, [pc, #52]	@ (80180bc <udp_netif_ip_addr_changed+0x5c>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	60fb      	str	r3, [r7, #12]
 801808c:	e00c      	b.n	80180a8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	681a      	ldr	r2, [r3, #0]
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	429a      	cmp	r2, r3
 8018098:	d103      	bne.n	80180a2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801809a:	683b      	ldr	r3, [r7, #0]
 801809c:	681a      	ldr	r2, [r3, #0]
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	68db      	ldr	r3, [r3, #12]
 80180a6:	60fb      	str	r3, [r7, #12]
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d1ef      	bne.n	801808e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80180ae:	bf00      	nop
 80180b0:	3714      	adds	r7, #20
 80180b2:	46bd      	mov	sp, r7
 80180b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b8:	4770      	bx	lr
 80180ba:	bf00      	nop
 80180bc:	24014c08 	.word	0x24014c08

080180c0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b082      	sub	sp, #8
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80180c8:	4915      	ldr	r1, [pc, #84]	@ (8018120 <etharp_free_entry+0x60>)
 80180ca:	687a      	ldr	r2, [r7, #4]
 80180cc:	4613      	mov	r3, r2
 80180ce:	005b      	lsls	r3, r3, #1
 80180d0:	4413      	add	r3, r2
 80180d2:	00db      	lsls	r3, r3, #3
 80180d4:	440b      	add	r3, r1
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d013      	beq.n	8018104 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80180dc:	4910      	ldr	r1, [pc, #64]	@ (8018120 <etharp_free_entry+0x60>)
 80180de:	687a      	ldr	r2, [r7, #4]
 80180e0:	4613      	mov	r3, r2
 80180e2:	005b      	lsls	r3, r3, #1
 80180e4:	4413      	add	r3, r2
 80180e6:	00db      	lsls	r3, r3, #3
 80180e8:	440b      	add	r3, r1
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7f9 fc8f 	bl	8011a10 <pbuf_free>
    arp_table[i].q = NULL;
 80180f2:	490b      	ldr	r1, [pc, #44]	@ (8018120 <etharp_free_entry+0x60>)
 80180f4:	687a      	ldr	r2, [r7, #4]
 80180f6:	4613      	mov	r3, r2
 80180f8:	005b      	lsls	r3, r3, #1
 80180fa:	4413      	add	r3, r2
 80180fc:	00db      	lsls	r3, r3, #3
 80180fe:	440b      	add	r3, r1
 8018100:	2200      	movs	r2, #0
 8018102:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018104:	4906      	ldr	r1, [pc, #24]	@ (8018120 <etharp_free_entry+0x60>)
 8018106:	687a      	ldr	r2, [r7, #4]
 8018108:	4613      	mov	r3, r2
 801810a:	005b      	lsls	r3, r3, #1
 801810c:	4413      	add	r3, r2
 801810e:	00db      	lsls	r3, r3, #3
 8018110:	440b      	add	r3, r1
 8018112:	3314      	adds	r3, #20
 8018114:	2200      	movs	r2, #0
 8018116:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018118:	bf00      	nop
 801811a:	3708      	adds	r7, #8
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}
 8018120:	24014c0c 	.word	0x24014c0c

08018124 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b082      	sub	sp, #8
 8018128:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801812a:	2300      	movs	r3, #0
 801812c:	607b      	str	r3, [r7, #4]
 801812e:	e096      	b.n	801825e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018130:	494f      	ldr	r1, [pc, #316]	@ (8018270 <etharp_tmr+0x14c>)
 8018132:	687a      	ldr	r2, [r7, #4]
 8018134:	4613      	mov	r3, r2
 8018136:	005b      	lsls	r3, r3, #1
 8018138:	4413      	add	r3, r2
 801813a:	00db      	lsls	r3, r3, #3
 801813c:	440b      	add	r3, r1
 801813e:	3314      	adds	r3, #20
 8018140:	781b      	ldrb	r3, [r3, #0]
 8018142:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018144:	78fb      	ldrb	r3, [r7, #3]
 8018146:	2b00      	cmp	r3, #0
 8018148:	f000 8086 	beq.w	8018258 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801814c:	4948      	ldr	r1, [pc, #288]	@ (8018270 <etharp_tmr+0x14c>)
 801814e:	687a      	ldr	r2, [r7, #4]
 8018150:	4613      	mov	r3, r2
 8018152:	005b      	lsls	r3, r3, #1
 8018154:	4413      	add	r3, r2
 8018156:	00db      	lsls	r3, r3, #3
 8018158:	440b      	add	r3, r1
 801815a:	3312      	adds	r3, #18
 801815c:	881b      	ldrh	r3, [r3, #0]
 801815e:	3301      	adds	r3, #1
 8018160:	b298      	uxth	r0, r3
 8018162:	4943      	ldr	r1, [pc, #268]	@ (8018270 <etharp_tmr+0x14c>)
 8018164:	687a      	ldr	r2, [r7, #4]
 8018166:	4613      	mov	r3, r2
 8018168:	005b      	lsls	r3, r3, #1
 801816a:	4413      	add	r3, r2
 801816c:	00db      	lsls	r3, r3, #3
 801816e:	440b      	add	r3, r1
 8018170:	3312      	adds	r3, #18
 8018172:	4602      	mov	r2, r0
 8018174:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018176:	493e      	ldr	r1, [pc, #248]	@ (8018270 <etharp_tmr+0x14c>)
 8018178:	687a      	ldr	r2, [r7, #4]
 801817a:	4613      	mov	r3, r2
 801817c:	005b      	lsls	r3, r3, #1
 801817e:	4413      	add	r3, r2
 8018180:	00db      	lsls	r3, r3, #3
 8018182:	440b      	add	r3, r1
 8018184:	3312      	adds	r3, #18
 8018186:	881b      	ldrh	r3, [r3, #0]
 8018188:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801818c:	d215      	bcs.n	80181ba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801818e:	4938      	ldr	r1, [pc, #224]	@ (8018270 <etharp_tmr+0x14c>)
 8018190:	687a      	ldr	r2, [r7, #4]
 8018192:	4613      	mov	r3, r2
 8018194:	005b      	lsls	r3, r3, #1
 8018196:	4413      	add	r3, r2
 8018198:	00db      	lsls	r3, r3, #3
 801819a:	440b      	add	r3, r1
 801819c:	3314      	adds	r3, #20
 801819e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d10e      	bne.n	80181c2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80181a4:	4932      	ldr	r1, [pc, #200]	@ (8018270 <etharp_tmr+0x14c>)
 80181a6:	687a      	ldr	r2, [r7, #4]
 80181a8:	4613      	mov	r3, r2
 80181aa:	005b      	lsls	r3, r3, #1
 80181ac:	4413      	add	r3, r2
 80181ae:	00db      	lsls	r3, r3, #3
 80181b0:	440b      	add	r3, r1
 80181b2:	3312      	adds	r3, #18
 80181b4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80181b6:	2b04      	cmp	r3, #4
 80181b8:	d903      	bls.n	80181c2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80181ba:	6878      	ldr	r0, [r7, #4]
 80181bc:	f7ff ff80 	bl	80180c0 <etharp_free_entry>
 80181c0:	e04a      	b.n	8018258 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80181c2:	492b      	ldr	r1, [pc, #172]	@ (8018270 <etharp_tmr+0x14c>)
 80181c4:	687a      	ldr	r2, [r7, #4]
 80181c6:	4613      	mov	r3, r2
 80181c8:	005b      	lsls	r3, r3, #1
 80181ca:	4413      	add	r3, r2
 80181cc:	00db      	lsls	r3, r3, #3
 80181ce:	440b      	add	r3, r1
 80181d0:	3314      	adds	r3, #20
 80181d2:	781b      	ldrb	r3, [r3, #0]
 80181d4:	2b03      	cmp	r3, #3
 80181d6:	d10a      	bne.n	80181ee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80181d8:	4925      	ldr	r1, [pc, #148]	@ (8018270 <etharp_tmr+0x14c>)
 80181da:	687a      	ldr	r2, [r7, #4]
 80181dc:	4613      	mov	r3, r2
 80181de:	005b      	lsls	r3, r3, #1
 80181e0:	4413      	add	r3, r2
 80181e2:	00db      	lsls	r3, r3, #3
 80181e4:	440b      	add	r3, r1
 80181e6:	3314      	adds	r3, #20
 80181e8:	2204      	movs	r2, #4
 80181ea:	701a      	strb	r2, [r3, #0]
 80181ec:	e034      	b.n	8018258 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80181ee:	4920      	ldr	r1, [pc, #128]	@ (8018270 <etharp_tmr+0x14c>)
 80181f0:	687a      	ldr	r2, [r7, #4]
 80181f2:	4613      	mov	r3, r2
 80181f4:	005b      	lsls	r3, r3, #1
 80181f6:	4413      	add	r3, r2
 80181f8:	00db      	lsls	r3, r3, #3
 80181fa:	440b      	add	r3, r1
 80181fc:	3314      	adds	r3, #20
 80181fe:	781b      	ldrb	r3, [r3, #0]
 8018200:	2b04      	cmp	r3, #4
 8018202:	d10a      	bne.n	801821a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018204:	491a      	ldr	r1, [pc, #104]	@ (8018270 <etharp_tmr+0x14c>)
 8018206:	687a      	ldr	r2, [r7, #4]
 8018208:	4613      	mov	r3, r2
 801820a:	005b      	lsls	r3, r3, #1
 801820c:	4413      	add	r3, r2
 801820e:	00db      	lsls	r3, r3, #3
 8018210:	440b      	add	r3, r1
 8018212:	3314      	adds	r3, #20
 8018214:	2202      	movs	r2, #2
 8018216:	701a      	strb	r2, [r3, #0]
 8018218:	e01e      	b.n	8018258 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801821a:	4915      	ldr	r1, [pc, #84]	@ (8018270 <etharp_tmr+0x14c>)
 801821c:	687a      	ldr	r2, [r7, #4]
 801821e:	4613      	mov	r3, r2
 8018220:	005b      	lsls	r3, r3, #1
 8018222:	4413      	add	r3, r2
 8018224:	00db      	lsls	r3, r3, #3
 8018226:	440b      	add	r3, r1
 8018228:	3314      	adds	r3, #20
 801822a:	781b      	ldrb	r3, [r3, #0]
 801822c:	2b01      	cmp	r3, #1
 801822e:	d113      	bne.n	8018258 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018230:	490f      	ldr	r1, [pc, #60]	@ (8018270 <etharp_tmr+0x14c>)
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	4613      	mov	r3, r2
 8018236:	005b      	lsls	r3, r3, #1
 8018238:	4413      	add	r3, r2
 801823a:	00db      	lsls	r3, r3, #3
 801823c:	440b      	add	r3, r1
 801823e:	3308      	adds	r3, #8
 8018240:	6818      	ldr	r0, [r3, #0]
 8018242:	687a      	ldr	r2, [r7, #4]
 8018244:	4613      	mov	r3, r2
 8018246:	005b      	lsls	r3, r3, #1
 8018248:	4413      	add	r3, r2
 801824a:	00db      	lsls	r3, r3, #3
 801824c:	4a08      	ldr	r2, [pc, #32]	@ (8018270 <etharp_tmr+0x14c>)
 801824e:	4413      	add	r3, r2
 8018250:	3304      	adds	r3, #4
 8018252:	4619      	mov	r1, r3
 8018254:	f000 fe6e 	bl	8018f34 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	3301      	adds	r3, #1
 801825c:	607b      	str	r3, [r7, #4]
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	2b09      	cmp	r3, #9
 8018262:	f77f af65 	ble.w	8018130 <etharp_tmr+0xc>
      }
    }
  }
}
 8018266:	bf00      	nop
 8018268:	bf00      	nop
 801826a:	3708      	adds	r7, #8
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}
 8018270:	24014c0c 	.word	0x24014c0c

08018274 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b08a      	sub	sp, #40	@ 0x28
 8018278:	af00      	add	r7, sp, #0
 801827a:	60f8      	str	r0, [r7, #12]
 801827c:	460b      	mov	r3, r1
 801827e:	607a      	str	r2, [r7, #4]
 8018280:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018282:	230a      	movs	r3, #10
 8018284:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018286:	230a      	movs	r3, #10
 8018288:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801828a:	230a      	movs	r3, #10
 801828c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801828e:	2300      	movs	r3, #0
 8018290:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018292:	230a      	movs	r3, #10
 8018294:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018296:	2300      	movs	r3, #0
 8018298:	83bb      	strh	r3, [r7, #28]
 801829a:	2300      	movs	r3, #0
 801829c:	837b      	strh	r3, [r7, #26]
 801829e:	2300      	movs	r3, #0
 80182a0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80182a2:	2300      	movs	r3, #0
 80182a4:	843b      	strh	r3, [r7, #32]
 80182a6:	e0ae      	b.n	8018406 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80182a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182ac:	49a6      	ldr	r1, [pc, #664]	@ (8018548 <etharp_find_entry+0x2d4>)
 80182ae:	4613      	mov	r3, r2
 80182b0:	005b      	lsls	r3, r3, #1
 80182b2:	4413      	add	r3, r2
 80182b4:	00db      	lsls	r3, r3, #3
 80182b6:	440b      	add	r3, r1
 80182b8:	3314      	adds	r3, #20
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80182be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80182c2:	2b0a      	cmp	r3, #10
 80182c4:	d105      	bne.n	80182d2 <etharp_find_entry+0x5e>
 80182c6:	7dfb      	ldrb	r3, [r7, #23]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d102      	bne.n	80182d2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80182cc:	8c3b      	ldrh	r3, [r7, #32]
 80182ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80182d0:	e095      	b.n	80183fe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80182d2:	7dfb      	ldrb	r3, [r7, #23]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	f000 8092 	beq.w	80183fe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80182da:	7dfb      	ldrb	r3, [r7, #23]
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d009      	beq.n	80182f4 <etharp_find_entry+0x80>
 80182e0:	7dfb      	ldrb	r3, [r7, #23]
 80182e2:	2b01      	cmp	r3, #1
 80182e4:	d806      	bhi.n	80182f4 <etharp_find_entry+0x80>
 80182e6:	4b99      	ldr	r3, [pc, #612]	@ (801854c <etharp_find_entry+0x2d8>)
 80182e8:	f240 1223 	movw	r2, #291	@ 0x123
 80182ec:	4998      	ldr	r1, [pc, #608]	@ (8018550 <etharp_find_entry+0x2dc>)
 80182ee:	4899      	ldr	r0, [pc, #612]	@ (8018554 <etharp_find_entry+0x2e0>)
 80182f0:	f002 fc60 	bl	801abb4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d020      	beq.n	801833c <etharp_find_entry+0xc8>
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	6819      	ldr	r1, [r3, #0]
 80182fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018302:	4891      	ldr	r0, [pc, #580]	@ (8018548 <etharp_find_entry+0x2d4>)
 8018304:	4613      	mov	r3, r2
 8018306:	005b      	lsls	r3, r3, #1
 8018308:	4413      	add	r3, r2
 801830a:	00db      	lsls	r3, r3, #3
 801830c:	4403      	add	r3, r0
 801830e:	3304      	adds	r3, #4
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	4299      	cmp	r1, r3
 8018314:	d112      	bne.n	801833c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d00c      	beq.n	8018336 <etharp_find_entry+0xc2>
 801831c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018320:	4989      	ldr	r1, [pc, #548]	@ (8018548 <etharp_find_entry+0x2d4>)
 8018322:	4613      	mov	r3, r2
 8018324:	005b      	lsls	r3, r3, #1
 8018326:	4413      	add	r3, r2
 8018328:	00db      	lsls	r3, r3, #3
 801832a:	440b      	add	r3, r1
 801832c:	3308      	adds	r3, #8
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	687a      	ldr	r2, [r7, #4]
 8018332:	429a      	cmp	r2, r3
 8018334:	d102      	bne.n	801833c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018336:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801833a:	e100      	b.n	801853e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801833c:	7dfb      	ldrb	r3, [r7, #23]
 801833e:	2b01      	cmp	r3, #1
 8018340:	d140      	bne.n	80183c4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018342:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018346:	4980      	ldr	r1, [pc, #512]	@ (8018548 <etharp_find_entry+0x2d4>)
 8018348:	4613      	mov	r3, r2
 801834a:	005b      	lsls	r3, r3, #1
 801834c:	4413      	add	r3, r2
 801834e:	00db      	lsls	r3, r3, #3
 8018350:	440b      	add	r3, r1
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d01a      	beq.n	801838e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018358:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801835c:	497a      	ldr	r1, [pc, #488]	@ (8018548 <etharp_find_entry+0x2d4>)
 801835e:	4613      	mov	r3, r2
 8018360:	005b      	lsls	r3, r3, #1
 8018362:	4413      	add	r3, r2
 8018364:	00db      	lsls	r3, r3, #3
 8018366:	440b      	add	r3, r1
 8018368:	3312      	adds	r3, #18
 801836a:	881b      	ldrh	r3, [r3, #0]
 801836c:	8bba      	ldrh	r2, [r7, #28]
 801836e:	429a      	cmp	r2, r3
 8018370:	d845      	bhi.n	80183fe <etharp_find_entry+0x18a>
            old_queue = i;
 8018372:	8c3b      	ldrh	r3, [r7, #32]
 8018374:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018376:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801837a:	4973      	ldr	r1, [pc, #460]	@ (8018548 <etharp_find_entry+0x2d4>)
 801837c:	4613      	mov	r3, r2
 801837e:	005b      	lsls	r3, r3, #1
 8018380:	4413      	add	r3, r2
 8018382:	00db      	lsls	r3, r3, #3
 8018384:	440b      	add	r3, r1
 8018386:	3312      	adds	r3, #18
 8018388:	881b      	ldrh	r3, [r3, #0]
 801838a:	83bb      	strh	r3, [r7, #28]
 801838c:	e037      	b.n	80183fe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801838e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018392:	496d      	ldr	r1, [pc, #436]	@ (8018548 <etharp_find_entry+0x2d4>)
 8018394:	4613      	mov	r3, r2
 8018396:	005b      	lsls	r3, r3, #1
 8018398:	4413      	add	r3, r2
 801839a:	00db      	lsls	r3, r3, #3
 801839c:	440b      	add	r3, r1
 801839e:	3312      	adds	r3, #18
 80183a0:	881b      	ldrh	r3, [r3, #0]
 80183a2:	8b7a      	ldrh	r2, [r7, #26]
 80183a4:	429a      	cmp	r2, r3
 80183a6:	d82a      	bhi.n	80183fe <etharp_find_entry+0x18a>
            old_pending = i;
 80183a8:	8c3b      	ldrh	r3, [r7, #32]
 80183aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80183ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183b0:	4965      	ldr	r1, [pc, #404]	@ (8018548 <etharp_find_entry+0x2d4>)
 80183b2:	4613      	mov	r3, r2
 80183b4:	005b      	lsls	r3, r3, #1
 80183b6:	4413      	add	r3, r2
 80183b8:	00db      	lsls	r3, r3, #3
 80183ba:	440b      	add	r3, r1
 80183bc:	3312      	adds	r3, #18
 80183be:	881b      	ldrh	r3, [r3, #0]
 80183c0:	837b      	strh	r3, [r7, #26]
 80183c2:	e01c      	b.n	80183fe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80183c4:	7dfb      	ldrb	r3, [r7, #23]
 80183c6:	2b01      	cmp	r3, #1
 80183c8:	d919      	bls.n	80183fe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80183ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183ce:	495e      	ldr	r1, [pc, #376]	@ (8018548 <etharp_find_entry+0x2d4>)
 80183d0:	4613      	mov	r3, r2
 80183d2:	005b      	lsls	r3, r3, #1
 80183d4:	4413      	add	r3, r2
 80183d6:	00db      	lsls	r3, r3, #3
 80183d8:	440b      	add	r3, r1
 80183da:	3312      	adds	r3, #18
 80183dc:	881b      	ldrh	r3, [r3, #0]
 80183de:	8b3a      	ldrh	r2, [r7, #24]
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d80c      	bhi.n	80183fe <etharp_find_entry+0x18a>
            old_stable = i;
 80183e4:	8c3b      	ldrh	r3, [r7, #32]
 80183e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80183e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183ec:	4956      	ldr	r1, [pc, #344]	@ (8018548 <etharp_find_entry+0x2d4>)
 80183ee:	4613      	mov	r3, r2
 80183f0:	005b      	lsls	r3, r3, #1
 80183f2:	4413      	add	r3, r2
 80183f4:	00db      	lsls	r3, r3, #3
 80183f6:	440b      	add	r3, r1
 80183f8:	3312      	adds	r3, #18
 80183fa:	881b      	ldrh	r3, [r3, #0]
 80183fc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80183fe:	8c3b      	ldrh	r3, [r7, #32]
 8018400:	3301      	adds	r3, #1
 8018402:	b29b      	uxth	r3, r3
 8018404:	843b      	strh	r3, [r7, #32]
 8018406:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801840a:	2b09      	cmp	r3, #9
 801840c:	f77f af4c 	ble.w	80182a8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018410:	7afb      	ldrb	r3, [r7, #11]
 8018412:	f003 0302 	and.w	r3, r3, #2
 8018416:	2b00      	cmp	r3, #0
 8018418:	d108      	bne.n	801842c <etharp_find_entry+0x1b8>
 801841a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801841e:	2b0a      	cmp	r3, #10
 8018420:	d107      	bne.n	8018432 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018422:	7afb      	ldrb	r3, [r7, #11]
 8018424:	f003 0301 	and.w	r3, r3, #1
 8018428:	2b00      	cmp	r3, #0
 801842a:	d102      	bne.n	8018432 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801842c:	f04f 33ff 	mov.w	r3, #4294967295
 8018430:	e085      	b.n	801853e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018432:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018436:	2b09      	cmp	r3, #9
 8018438:	dc02      	bgt.n	8018440 <etharp_find_entry+0x1cc>
    i = empty;
 801843a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801843c:	843b      	strh	r3, [r7, #32]
 801843e:	e039      	b.n	80184b4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018440:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018444:	2b09      	cmp	r3, #9
 8018446:	dc14      	bgt.n	8018472 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018448:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801844a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801844c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018450:	493d      	ldr	r1, [pc, #244]	@ (8018548 <etharp_find_entry+0x2d4>)
 8018452:	4613      	mov	r3, r2
 8018454:	005b      	lsls	r3, r3, #1
 8018456:	4413      	add	r3, r2
 8018458:	00db      	lsls	r3, r3, #3
 801845a:	440b      	add	r3, r1
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d018      	beq.n	8018494 <etharp_find_entry+0x220>
 8018462:	4b3a      	ldr	r3, [pc, #232]	@ (801854c <etharp_find_entry+0x2d8>)
 8018464:	f240 126d 	movw	r2, #365	@ 0x16d
 8018468:	493b      	ldr	r1, [pc, #236]	@ (8018558 <etharp_find_entry+0x2e4>)
 801846a:	483a      	ldr	r0, [pc, #232]	@ (8018554 <etharp_find_entry+0x2e0>)
 801846c:	f002 fba2 	bl	801abb4 <iprintf>
 8018470:	e010      	b.n	8018494 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018472:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018476:	2b09      	cmp	r3, #9
 8018478:	dc02      	bgt.n	8018480 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801847a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801847c:	843b      	strh	r3, [r7, #32]
 801847e:	e009      	b.n	8018494 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018480:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018484:	2b09      	cmp	r3, #9
 8018486:	dc02      	bgt.n	801848e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018488:	8bfb      	ldrh	r3, [r7, #30]
 801848a:	843b      	strh	r3, [r7, #32]
 801848c:	e002      	b.n	8018494 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801848e:	f04f 33ff 	mov.w	r3, #4294967295
 8018492:	e054      	b.n	801853e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018494:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018498:	2b09      	cmp	r3, #9
 801849a:	dd06      	ble.n	80184aa <etharp_find_entry+0x236>
 801849c:	4b2b      	ldr	r3, [pc, #172]	@ (801854c <etharp_find_entry+0x2d8>)
 801849e:	f240 127f 	movw	r2, #383	@ 0x17f
 80184a2:	492e      	ldr	r1, [pc, #184]	@ (801855c <etharp_find_entry+0x2e8>)
 80184a4:	482b      	ldr	r0, [pc, #172]	@ (8018554 <etharp_find_entry+0x2e0>)
 80184a6:	f002 fb85 	bl	801abb4 <iprintf>
    etharp_free_entry(i);
 80184aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184ae:	4618      	mov	r0, r3
 80184b0:	f7ff fe06 	bl	80180c0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80184b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184b8:	2b09      	cmp	r3, #9
 80184ba:	dd06      	ble.n	80184ca <etharp_find_entry+0x256>
 80184bc:	4b23      	ldr	r3, [pc, #140]	@ (801854c <etharp_find_entry+0x2d8>)
 80184be:	f240 1283 	movw	r2, #387	@ 0x183
 80184c2:	4926      	ldr	r1, [pc, #152]	@ (801855c <etharp_find_entry+0x2e8>)
 80184c4:	4823      	ldr	r0, [pc, #140]	@ (8018554 <etharp_find_entry+0x2e0>)
 80184c6:	f002 fb75 	bl	801abb4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80184ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184ce:	491e      	ldr	r1, [pc, #120]	@ (8018548 <etharp_find_entry+0x2d4>)
 80184d0:	4613      	mov	r3, r2
 80184d2:	005b      	lsls	r3, r3, #1
 80184d4:	4413      	add	r3, r2
 80184d6:	00db      	lsls	r3, r3, #3
 80184d8:	440b      	add	r3, r1
 80184da:	3314      	adds	r3, #20
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d006      	beq.n	80184f0 <etharp_find_entry+0x27c>
 80184e2:	4b1a      	ldr	r3, [pc, #104]	@ (801854c <etharp_find_entry+0x2d8>)
 80184e4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80184e8:	491d      	ldr	r1, [pc, #116]	@ (8018560 <etharp_find_entry+0x2ec>)
 80184ea:	481a      	ldr	r0, [pc, #104]	@ (8018554 <etharp_find_entry+0x2e0>)
 80184ec:	f002 fb62 	bl	801abb4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d00b      	beq.n	801850e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80184f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	6819      	ldr	r1, [r3, #0]
 80184fe:	4812      	ldr	r0, [pc, #72]	@ (8018548 <etharp_find_entry+0x2d4>)
 8018500:	4613      	mov	r3, r2
 8018502:	005b      	lsls	r3, r3, #1
 8018504:	4413      	add	r3, r2
 8018506:	00db      	lsls	r3, r3, #3
 8018508:	4403      	add	r3, r0
 801850a:	3304      	adds	r3, #4
 801850c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801850e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018512:	490d      	ldr	r1, [pc, #52]	@ (8018548 <etharp_find_entry+0x2d4>)
 8018514:	4613      	mov	r3, r2
 8018516:	005b      	lsls	r3, r3, #1
 8018518:	4413      	add	r3, r2
 801851a:	00db      	lsls	r3, r3, #3
 801851c:	440b      	add	r3, r1
 801851e:	3312      	adds	r3, #18
 8018520:	2200      	movs	r2, #0
 8018522:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018524:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018528:	4907      	ldr	r1, [pc, #28]	@ (8018548 <etharp_find_entry+0x2d4>)
 801852a:	4613      	mov	r3, r2
 801852c:	005b      	lsls	r3, r3, #1
 801852e:	4413      	add	r3, r2
 8018530:	00db      	lsls	r3, r3, #3
 8018532:	440b      	add	r3, r1
 8018534:	3308      	adds	r3, #8
 8018536:	687a      	ldr	r2, [r7, #4]
 8018538:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801853a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801853e:	4618      	mov	r0, r3
 8018540:	3728      	adds	r7, #40	@ 0x28
 8018542:	46bd      	mov	sp, r7
 8018544:	bd80      	pop	{r7, pc}
 8018546:	bf00      	nop
 8018548:	24014c0c 	.word	0x24014c0c
 801854c:	0801dfc0 	.word	0x0801dfc0
 8018550:	0801dff8 	.word	0x0801dff8
 8018554:	0801e038 	.word	0x0801e038
 8018558:	0801e060 	.word	0x0801e060
 801855c:	0801e078 	.word	0x0801e078
 8018560:	0801e08c 	.word	0x0801e08c

08018564 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b088      	sub	sp, #32
 8018568:	af02      	add	r7, sp, #8
 801856a:	60f8      	str	r0, [r7, #12]
 801856c:	60b9      	str	r1, [r7, #8]
 801856e:	607a      	str	r2, [r7, #4]
 8018570:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018578:	2b06      	cmp	r3, #6
 801857a:	d006      	beq.n	801858a <etharp_update_arp_entry+0x26>
 801857c:	4b48      	ldr	r3, [pc, #288]	@ (80186a0 <etharp_update_arp_entry+0x13c>)
 801857e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8018582:	4948      	ldr	r1, [pc, #288]	@ (80186a4 <etharp_update_arp_entry+0x140>)
 8018584:	4848      	ldr	r0, [pc, #288]	@ (80186a8 <etharp_update_arp_entry+0x144>)
 8018586:	f002 fb15 	bl	801abb4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801858a:	68bb      	ldr	r3, [r7, #8]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d012      	beq.n	80185b6 <etharp_update_arp_entry+0x52>
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d00e      	beq.n	80185b6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018598:	68bb      	ldr	r3, [r7, #8]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	68f9      	ldr	r1, [r7, #12]
 801859e:	4618      	mov	r0, r3
 80185a0:	f001 f930 	bl	8019804 <ip4_addr_isbroadcast_u32>
 80185a4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d105      	bne.n	80185b6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80185b2:	2be0      	cmp	r3, #224	@ 0xe0
 80185b4:	d102      	bne.n	80185bc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80185b6:	f06f 030f 	mvn.w	r3, #15
 80185ba:	e06c      	b.n	8018696 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80185bc:	78fb      	ldrb	r3, [r7, #3]
 80185be:	68fa      	ldr	r2, [r7, #12]
 80185c0:	4619      	mov	r1, r3
 80185c2:	68b8      	ldr	r0, [r7, #8]
 80185c4:	f7ff fe56 	bl	8018274 <etharp_find_entry>
 80185c8:	4603      	mov	r3, r0
 80185ca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80185cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	da02      	bge.n	80185da <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80185d4:	8afb      	ldrh	r3, [r7, #22]
 80185d6:	b25b      	sxtb	r3, r3
 80185d8:	e05d      	b.n	8018696 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80185da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185de:	4933      	ldr	r1, [pc, #204]	@ (80186ac <etharp_update_arp_entry+0x148>)
 80185e0:	4613      	mov	r3, r2
 80185e2:	005b      	lsls	r3, r3, #1
 80185e4:	4413      	add	r3, r2
 80185e6:	00db      	lsls	r3, r3, #3
 80185e8:	440b      	add	r3, r1
 80185ea:	3314      	adds	r3, #20
 80185ec:	2202      	movs	r2, #2
 80185ee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80185f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185f4:	492d      	ldr	r1, [pc, #180]	@ (80186ac <etharp_update_arp_entry+0x148>)
 80185f6:	4613      	mov	r3, r2
 80185f8:	005b      	lsls	r3, r3, #1
 80185fa:	4413      	add	r3, r2
 80185fc:	00db      	lsls	r3, r3, #3
 80185fe:	440b      	add	r3, r1
 8018600:	3308      	adds	r3, #8
 8018602:	68fa      	ldr	r2, [r7, #12]
 8018604:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018606:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801860a:	4613      	mov	r3, r2
 801860c:	005b      	lsls	r3, r3, #1
 801860e:	4413      	add	r3, r2
 8018610:	00db      	lsls	r3, r3, #3
 8018612:	3308      	adds	r3, #8
 8018614:	4a25      	ldr	r2, [pc, #148]	@ (80186ac <etharp_update_arp_entry+0x148>)
 8018616:	4413      	add	r3, r2
 8018618:	3304      	adds	r3, #4
 801861a:	2206      	movs	r2, #6
 801861c:	6879      	ldr	r1, [r7, #4]
 801861e:	4618      	mov	r0, r3
 8018620:	f002 fc01 	bl	801ae26 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018624:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018628:	4920      	ldr	r1, [pc, #128]	@ (80186ac <etharp_update_arp_entry+0x148>)
 801862a:	4613      	mov	r3, r2
 801862c:	005b      	lsls	r3, r3, #1
 801862e:	4413      	add	r3, r2
 8018630:	00db      	lsls	r3, r3, #3
 8018632:	440b      	add	r3, r1
 8018634:	3312      	adds	r3, #18
 8018636:	2200      	movs	r2, #0
 8018638:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801863a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801863e:	491b      	ldr	r1, [pc, #108]	@ (80186ac <etharp_update_arp_entry+0x148>)
 8018640:	4613      	mov	r3, r2
 8018642:	005b      	lsls	r3, r3, #1
 8018644:	4413      	add	r3, r2
 8018646:	00db      	lsls	r3, r3, #3
 8018648:	440b      	add	r3, r1
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d021      	beq.n	8018694 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018650:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018654:	4915      	ldr	r1, [pc, #84]	@ (80186ac <etharp_update_arp_entry+0x148>)
 8018656:	4613      	mov	r3, r2
 8018658:	005b      	lsls	r3, r3, #1
 801865a:	4413      	add	r3, r2
 801865c:	00db      	lsls	r3, r3, #3
 801865e:	440b      	add	r3, r1
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018664:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018668:	4910      	ldr	r1, [pc, #64]	@ (80186ac <etharp_update_arp_entry+0x148>)
 801866a:	4613      	mov	r3, r2
 801866c:	005b      	lsls	r3, r3, #1
 801866e:	4413      	add	r3, r2
 8018670:	00db      	lsls	r3, r3, #3
 8018672:	440b      	add	r3, r1
 8018674:	2200      	movs	r2, #0
 8018676:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801867e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018682:	9300      	str	r3, [sp, #0]
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	6939      	ldr	r1, [r7, #16]
 8018688:	68f8      	ldr	r0, [r7, #12]
 801868a:	f002 f859 	bl	801a740 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801868e:	6938      	ldr	r0, [r7, #16]
 8018690:	f7f9 f9be 	bl	8011a10 <pbuf_free>
  }
  return ERR_OK;
 8018694:	2300      	movs	r3, #0
}
 8018696:	4618      	mov	r0, r3
 8018698:	3718      	adds	r7, #24
 801869a:	46bd      	mov	sp, r7
 801869c:	bd80      	pop	{r7, pc}
 801869e:	bf00      	nop
 80186a0:	0801dfc0 	.word	0x0801dfc0
 80186a4:	0801e0b8 	.word	0x0801e0b8
 80186a8:	0801e038 	.word	0x0801e038
 80186ac:	24014c0c 	.word	0x24014c0c

080186b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b084      	sub	sp, #16
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186b8:	2300      	movs	r3, #0
 80186ba:	60fb      	str	r3, [r7, #12]
 80186bc:	e01e      	b.n	80186fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80186be:	4913      	ldr	r1, [pc, #76]	@ (801870c <etharp_cleanup_netif+0x5c>)
 80186c0:	68fa      	ldr	r2, [r7, #12]
 80186c2:	4613      	mov	r3, r2
 80186c4:	005b      	lsls	r3, r3, #1
 80186c6:	4413      	add	r3, r2
 80186c8:	00db      	lsls	r3, r3, #3
 80186ca:	440b      	add	r3, r1
 80186cc:	3314      	adds	r3, #20
 80186ce:	781b      	ldrb	r3, [r3, #0]
 80186d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80186d2:	7afb      	ldrb	r3, [r7, #11]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d00e      	beq.n	80186f6 <etharp_cleanup_netif+0x46>
 80186d8:	490c      	ldr	r1, [pc, #48]	@ (801870c <etharp_cleanup_netif+0x5c>)
 80186da:	68fa      	ldr	r2, [r7, #12]
 80186dc:	4613      	mov	r3, r2
 80186de:	005b      	lsls	r3, r3, #1
 80186e0:	4413      	add	r3, r2
 80186e2:	00db      	lsls	r3, r3, #3
 80186e4:	440b      	add	r3, r1
 80186e6:	3308      	adds	r3, #8
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	687a      	ldr	r2, [r7, #4]
 80186ec:	429a      	cmp	r2, r3
 80186ee:	d102      	bne.n	80186f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80186f0:	68f8      	ldr	r0, [r7, #12]
 80186f2:	f7ff fce5 	bl	80180c0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	3301      	adds	r3, #1
 80186fa:	60fb      	str	r3, [r7, #12]
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	2b09      	cmp	r3, #9
 8018700:	dddd      	ble.n	80186be <etharp_cleanup_netif+0xe>
    }
  }
}
 8018702:	bf00      	nop
 8018704:	bf00      	nop
 8018706:	3710      	adds	r7, #16
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}
 801870c:	24014c0c 	.word	0x24014c0c

08018710 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018710:	b5b0      	push	{r4, r5, r7, lr}
 8018712:	b08a      	sub	sp, #40	@ 0x28
 8018714:	af04      	add	r7, sp, #16
 8018716:	6078      	str	r0, [r7, #4]
 8018718:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801871a:	683b      	ldr	r3, [r7, #0]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d107      	bne.n	8018730 <etharp_input+0x20>
 8018720:	4b3d      	ldr	r3, [pc, #244]	@ (8018818 <etharp_input+0x108>)
 8018722:	f240 228a 	movw	r2, #650	@ 0x28a
 8018726:	493d      	ldr	r1, [pc, #244]	@ (801881c <etharp_input+0x10c>)
 8018728:	483d      	ldr	r0, [pc, #244]	@ (8018820 <etharp_input+0x110>)
 801872a:	f002 fa43 	bl	801abb4 <iprintf>
 801872e:	e06f      	b.n	8018810 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	685b      	ldr	r3, [r3, #4]
 8018734:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018736:	693b      	ldr	r3, [r7, #16]
 8018738:	881b      	ldrh	r3, [r3, #0]
 801873a:	b29b      	uxth	r3, r3
 801873c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018740:	d10c      	bne.n	801875c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018742:	693b      	ldr	r3, [r7, #16]
 8018744:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018746:	2b06      	cmp	r3, #6
 8018748:	d108      	bne.n	801875c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801874a:	693b      	ldr	r3, [r7, #16]
 801874c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801874e:	2b04      	cmp	r3, #4
 8018750:	d104      	bne.n	801875c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018752:	693b      	ldr	r3, [r7, #16]
 8018754:	885b      	ldrh	r3, [r3, #2]
 8018756:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018758:	2b08      	cmp	r3, #8
 801875a:	d003      	beq.n	8018764 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801875c:	6878      	ldr	r0, [r7, #4]
 801875e:	f7f9 f957 	bl	8011a10 <pbuf_free>
    return;
 8018762:	e055      	b.n	8018810 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018764:	693b      	ldr	r3, [r7, #16]
 8018766:	330e      	adds	r3, #14
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801876c:	693b      	ldr	r3, [r7, #16]
 801876e:	3318      	adds	r3, #24
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018774:	683b      	ldr	r3, [r7, #0]
 8018776:	3304      	adds	r3, #4
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d102      	bne.n	8018784 <etharp_input+0x74>
    for_us = 0;
 801877e:	2300      	movs	r3, #0
 8018780:	75fb      	strb	r3, [r7, #23]
 8018782:	e009      	b.n	8018798 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018784:	68ba      	ldr	r2, [r7, #8]
 8018786:	683b      	ldr	r3, [r7, #0]
 8018788:	3304      	adds	r3, #4
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	429a      	cmp	r2, r3
 801878e:	bf0c      	ite	eq
 8018790:	2301      	moveq	r3, #1
 8018792:	2300      	movne	r3, #0
 8018794:	b2db      	uxtb	r3, r3
 8018796:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018798:	693b      	ldr	r3, [r7, #16]
 801879a:	f103 0208 	add.w	r2, r3, #8
 801879e:	7dfb      	ldrb	r3, [r7, #23]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d001      	beq.n	80187a8 <etharp_input+0x98>
 80187a4:	2301      	movs	r3, #1
 80187a6:	e000      	b.n	80187aa <etharp_input+0x9a>
 80187a8:	2302      	movs	r3, #2
 80187aa:	f107 010c 	add.w	r1, r7, #12
 80187ae:	6838      	ldr	r0, [r7, #0]
 80187b0:	f7ff fed8 	bl	8018564 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	88db      	ldrh	r3, [r3, #6]
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80187be:	d003      	beq.n	80187c8 <etharp_input+0xb8>
 80187c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187c4:	d01e      	beq.n	8018804 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80187c6:	e020      	b.n	801880a <etharp_input+0xfa>
      if (for_us) {
 80187c8:	7dfb      	ldrb	r3, [r7, #23]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d01c      	beq.n	8018808 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80187ce:	683b      	ldr	r3, [r7, #0]
 80187d0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80187d4:	693b      	ldr	r3, [r7, #16]
 80187d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80187da:	683b      	ldr	r3, [r7, #0]
 80187dc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80187e4:	693a      	ldr	r2, [r7, #16]
 80187e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80187e8:	2102      	movs	r1, #2
 80187ea:	9103      	str	r1, [sp, #12]
 80187ec:	f107 010c 	add.w	r1, r7, #12
 80187f0:	9102      	str	r1, [sp, #8]
 80187f2:	9201      	str	r2, [sp, #4]
 80187f4:	9300      	str	r3, [sp, #0]
 80187f6:	462b      	mov	r3, r5
 80187f8:	4622      	mov	r2, r4
 80187fa:	4601      	mov	r1, r0
 80187fc:	6838      	ldr	r0, [r7, #0]
 80187fe:	f000 faeb 	bl	8018dd8 <etharp_raw>
      break;
 8018802:	e001      	b.n	8018808 <etharp_input+0xf8>
      break;
 8018804:	bf00      	nop
 8018806:	e000      	b.n	801880a <etharp_input+0xfa>
      break;
 8018808:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801880a:	6878      	ldr	r0, [r7, #4]
 801880c:	f7f9 f900 	bl	8011a10 <pbuf_free>
}
 8018810:	3718      	adds	r7, #24
 8018812:	46bd      	mov	sp, r7
 8018814:	bdb0      	pop	{r4, r5, r7, pc}
 8018816:	bf00      	nop
 8018818:	0801dfc0 	.word	0x0801dfc0
 801881c:	0801e110 	.word	0x0801e110
 8018820:	0801e038 	.word	0x0801e038

08018824 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b086      	sub	sp, #24
 8018828:	af02      	add	r7, sp, #8
 801882a:	60f8      	str	r0, [r7, #12]
 801882c:	60b9      	str	r1, [r7, #8]
 801882e:	4613      	mov	r3, r2
 8018830:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018832:	79fa      	ldrb	r2, [r7, #7]
 8018834:	4944      	ldr	r1, [pc, #272]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 8018836:	4613      	mov	r3, r2
 8018838:	005b      	lsls	r3, r3, #1
 801883a:	4413      	add	r3, r2
 801883c:	00db      	lsls	r3, r3, #3
 801883e:	440b      	add	r3, r1
 8018840:	3314      	adds	r3, #20
 8018842:	781b      	ldrb	r3, [r3, #0]
 8018844:	2b01      	cmp	r3, #1
 8018846:	d806      	bhi.n	8018856 <etharp_output_to_arp_index+0x32>
 8018848:	4b40      	ldr	r3, [pc, #256]	@ (801894c <etharp_output_to_arp_index+0x128>)
 801884a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801884e:	4940      	ldr	r1, [pc, #256]	@ (8018950 <etharp_output_to_arp_index+0x12c>)
 8018850:	4840      	ldr	r0, [pc, #256]	@ (8018954 <etharp_output_to_arp_index+0x130>)
 8018852:	f002 f9af 	bl	801abb4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018856:	79fa      	ldrb	r2, [r7, #7]
 8018858:	493b      	ldr	r1, [pc, #236]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 801885a:	4613      	mov	r3, r2
 801885c:	005b      	lsls	r3, r3, #1
 801885e:	4413      	add	r3, r2
 8018860:	00db      	lsls	r3, r3, #3
 8018862:	440b      	add	r3, r1
 8018864:	3314      	adds	r3, #20
 8018866:	781b      	ldrb	r3, [r3, #0]
 8018868:	2b02      	cmp	r3, #2
 801886a:	d153      	bne.n	8018914 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801886c:	79fa      	ldrb	r2, [r7, #7]
 801886e:	4936      	ldr	r1, [pc, #216]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 8018870:	4613      	mov	r3, r2
 8018872:	005b      	lsls	r3, r3, #1
 8018874:	4413      	add	r3, r2
 8018876:	00db      	lsls	r3, r3, #3
 8018878:	440b      	add	r3, r1
 801887a:	3312      	adds	r3, #18
 801887c:	881b      	ldrh	r3, [r3, #0]
 801887e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8018882:	d919      	bls.n	80188b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018884:	79fa      	ldrb	r2, [r7, #7]
 8018886:	4613      	mov	r3, r2
 8018888:	005b      	lsls	r3, r3, #1
 801888a:	4413      	add	r3, r2
 801888c:	00db      	lsls	r3, r3, #3
 801888e:	4a2e      	ldr	r2, [pc, #184]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 8018890:	4413      	add	r3, r2
 8018892:	3304      	adds	r3, #4
 8018894:	4619      	mov	r1, r3
 8018896:	68f8      	ldr	r0, [r7, #12]
 8018898:	f000 fb4c 	bl	8018f34 <etharp_request>
 801889c:	4603      	mov	r3, r0
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d138      	bne.n	8018914 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80188a2:	79fa      	ldrb	r2, [r7, #7]
 80188a4:	4928      	ldr	r1, [pc, #160]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 80188a6:	4613      	mov	r3, r2
 80188a8:	005b      	lsls	r3, r3, #1
 80188aa:	4413      	add	r3, r2
 80188ac:	00db      	lsls	r3, r3, #3
 80188ae:	440b      	add	r3, r1
 80188b0:	3314      	adds	r3, #20
 80188b2:	2203      	movs	r2, #3
 80188b4:	701a      	strb	r2, [r3, #0]
 80188b6:	e02d      	b.n	8018914 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80188b8:	79fa      	ldrb	r2, [r7, #7]
 80188ba:	4923      	ldr	r1, [pc, #140]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 80188bc:	4613      	mov	r3, r2
 80188be:	005b      	lsls	r3, r3, #1
 80188c0:	4413      	add	r3, r2
 80188c2:	00db      	lsls	r3, r3, #3
 80188c4:	440b      	add	r3, r1
 80188c6:	3312      	adds	r3, #18
 80188c8:	881b      	ldrh	r3, [r3, #0]
 80188ca:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80188ce:	d321      	bcc.n	8018914 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80188d0:	79fa      	ldrb	r2, [r7, #7]
 80188d2:	4613      	mov	r3, r2
 80188d4:	005b      	lsls	r3, r3, #1
 80188d6:	4413      	add	r3, r2
 80188d8:	00db      	lsls	r3, r3, #3
 80188da:	4a1b      	ldr	r2, [pc, #108]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 80188dc:	4413      	add	r3, r2
 80188de:	1d19      	adds	r1, r3, #4
 80188e0:	79fa      	ldrb	r2, [r7, #7]
 80188e2:	4613      	mov	r3, r2
 80188e4:	005b      	lsls	r3, r3, #1
 80188e6:	4413      	add	r3, r2
 80188e8:	00db      	lsls	r3, r3, #3
 80188ea:	3308      	adds	r3, #8
 80188ec:	4a16      	ldr	r2, [pc, #88]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 80188ee:	4413      	add	r3, r2
 80188f0:	3304      	adds	r3, #4
 80188f2:	461a      	mov	r2, r3
 80188f4:	68f8      	ldr	r0, [r7, #12]
 80188f6:	f000 fafb 	bl	8018ef0 <etharp_request_dst>
 80188fa:	4603      	mov	r3, r0
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d109      	bne.n	8018914 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018900:	79fa      	ldrb	r2, [r7, #7]
 8018902:	4911      	ldr	r1, [pc, #68]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 8018904:	4613      	mov	r3, r2
 8018906:	005b      	lsls	r3, r3, #1
 8018908:	4413      	add	r3, r2
 801890a:	00db      	lsls	r3, r3, #3
 801890c:	440b      	add	r3, r1
 801890e:	3314      	adds	r3, #20
 8018910:	2203      	movs	r2, #3
 8018912:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801891a:	79fa      	ldrb	r2, [r7, #7]
 801891c:	4613      	mov	r3, r2
 801891e:	005b      	lsls	r3, r3, #1
 8018920:	4413      	add	r3, r2
 8018922:	00db      	lsls	r3, r3, #3
 8018924:	3308      	adds	r3, #8
 8018926:	4a08      	ldr	r2, [pc, #32]	@ (8018948 <etharp_output_to_arp_index+0x124>)
 8018928:	4413      	add	r3, r2
 801892a:	3304      	adds	r3, #4
 801892c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018930:	9200      	str	r2, [sp, #0]
 8018932:	460a      	mov	r2, r1
 8018934:	68b9      	ldr	r1, [r7, #8]
 8018936:	68f8      	ldr	r0, [r7, #12]
 8018938:	f001 ff02 	bl	801a740 <ethernet_output>
 801893c:	4603      	mov	r3, r0
}
 801893e:	4618      	mov	r0, r3
 8018940:	3710      	adds	r7, #16
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}
 8018946:	bf00      	nop
 8018948:	24014c0c 	.word	0x24014c0c
 801894c:	0801dfc0 	.word	0x0801dfc0
 8018950:	0801e130 	.word	0x0801e130
 8018954:	0801e038 	.word	0x0801e038

08018958 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b08a      	sub	sp, #40	@ 0x28
 801895c:	af02      	add	r7, sp, #8
 801895e:	60f8      	str	r0, [r7, #12]
 8018960:	60b9      	str	r1, [r7, #8]
 8018962:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d106      	bne.n	801897c <etharp_output+0x24>
 801896e:	4b73      	ldr	r3, [pc, #460]	@ (8018b3c <etharp_output+0x1e4>)
 8018970:	f240 321e 	movw	r2, #798	@ 0x31e
 8018974:	4972      	ldr	r1, [pc, #456]	@ (8018b40 <etharp_output+0x1e8>)
 8018976:	4873      	ldr	r0, [pc, #460]	@ (8018b44 <etharp_output+0x1ec>)
 8018978:	f002 f91c 	bl	801abb4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801897c:	68bb      	ldr	r3, [r7, #8]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d106      	bne.n	8018990 <etharp_output+0x38>
 8018982:	4b6e      	ldr	r3, [pc, #440]	@ (8018b3c <etharp_output+0x1e4>)
 8018984:	f240 321f 	movw	r2, #799	@ 0x31f
 8018988:	496f      	ldr	r1, [pc, #444]	@ (8018b48 <etharp_output+0x1f0>)
 801898a:	486e      	ldr	r0, [pc, #440]	@ (8018b44 <etharp_output+0x1ec>)
 801898c:	f002 f912 	bl	801abb4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d106      	bne.n	80189a4 <etharp_output+0x4c>
 8018996:	4b69      	ldr	r3, [pc, #420]	@ (8018b3c <etharp_output+0x1e4>)
 8018998:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801899c:	496b      	ldr	r1, [pc, #428]	@ (8018b4c <etharp_output+0x1f4>)
 801899e:	4869      	ldr	r0, [pc, #420]	@ (8018b44 <etharp_output+0x1ec>)
 80189a0:	f002 f908 	bl	801abb4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	68f9      	ldr	r1, [r7, #12]
 80189aa:	4618      	mov	r0, r3
 80189ac:	f000 ff2a 	bl	8019804 <ip4_addr_isbroadcast_u32>
 80189b0:	4603      	mov	r3, r0
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d002      	beq.n	80189bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80189b6:	4b66      	ldr	r3, [pc, #408]	@ (8018b50 <etharp_output+0x1f8>)
 80189b8:	61fb      	str	r3, [r7, #28]
 80189ba:	e0af      	b.n	8018b1c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80189c4:	2be0      	cmp	r3, #224	@ 0xe0
 80189c6:	d118      	bne.n	80189fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80189c8:	2301      	movs	r3, #1
 80189ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80189cc:	2300      	movs	r3, #0
 80189ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80189d0:	235e      	movs	r3, #94	@ 0x5e
 80189d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	3301      	adds	r3, #1
 80189d8:	781b      	ldrb	r3, [r3, #0]
 80189da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80189de:	b2db      	uxtb	r3, r3
 80189e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	3302      	adds	r3, #2
 80189e6:	781b      	ldrb	r3, [r3, #0]
 80189e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	3303      	adds	r3, #3
 80189ee:	781b      	ldrb	r3, [r3, #0]
 80189f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80189f2:	f107 0310 	add.w	r3, r7, #16
 80189f6:	61fb      	str	r3, [r7, #28]
 80189f8:	e090      	b.n	8018b1c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	681a      	ldr	r2, [r3, #0]
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	3304      	adds	r3, #4
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	405a      	eors	r2, r3
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	3308      	adds	r3, #8
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	4013      	ands	r3, r2
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d012      	beq.n	8018a38 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018a18:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8018a1c:	4293      	cmp	r3, r2
 8018a1e:	d00b      	beq.n	8018a38 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	330c      	adds	r3, #12
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d003      	beq.n	8018a32 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	330c      	adds	r3, #12
 8018a2e:	61bb      	str	r3, [r7, #24]
 8018a30:	e002      	b.n	8018a38 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018a32:	f06f 0303 	mvn.w	r3, #3
 8018a36:	e07d      	b.n	8018b34 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018a38:	4b46      	ldr	r3, [pc, #280]	@ (8018b54 <etharp_output+0x1fc>)
 8018a3a:	781b      	ldrb	r3, [r3, #0]
 8018a3c:	4619      	mov	r1, r3
 8018a3e:	4a46      	ldr	r2, [pc, #280]	@ (8018b58 <etharp_output+0x200>)
 8018a40:	460b      	mov	r3, r1
 8018a42:	005b      	lsls	r3, r3, #1
 8018a44:	440b      	add	r3, r1
 8018a46:	00db      	lsls	r3, r3, #3
 8018a48:	4413      	add	r3, r2
 8018a4a:	3314      	adds	r3, #20
 8018a4c:	781b      	ldrb	r3, [r3, #0]
 8018a4e:	2b01      	cmp	r3, #1
 8018a50:	d925      	bls.n	8018a9e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018a52:	4b40      	ldr	r3, [pc, #256]	@ (8018b54 <etharp_output+0x1fc>)
 8018a54:	781b      	ldrb	r3, [r3, #0]
 8018a56:	4619      	mov	r1, r3
 8018a58:	4a3f      	ldr	r2, [pc, #252]	@ (8018b58 <etharp_output+0x200>)
 8018a5a:	460b      	mov	r3, r1
 8018a5c:	005b      	lsls	r3, r3, #1
 8018a5e:	440b      	add	r3, r1
 8018a60:	00db      	lsls	r3, r3, #3
 8018a62:	4413      	add	r3, r2
 8018a64:	3308      	adds	r3, #8
 8018a66:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018a68:	68fa      	ldr	r2, [r7, #12]
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d117      	bne.n	8018a9e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018a6e:	69bb      	ldr	r3, [r7, #24]
 8018a70:	681a      	ldr	r2, [r3, #0]
 8018a72:	4b38      	ldr	r3, [pc, #224]	@ (8018b54 <etharp_output+0x1fc>)
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	4618      	mov	r0, r3
 8018a78:	4937      	ldr	r1, [pc, #220]	@ (8018b58 <etharp_output+0x200>)
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	005b      	lsls	r3, r3, #1
 8018a7e:	4403      	add	r3, r0
 8018a80:	00db      	lsls	r3, r3, #3
 8018a82:	440b      	add	r3, r1
 8018a84:	3304      	adds	r3, #4
 8018a86:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018a88:	429a      	cmp	r2, r3
 8018a8a:	d108      	bne.n	8018a9e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018a8c:	4b31      	ldr	r3, [pc, #196]	@ (8018b54 <etharp_output+0x1fc>)
 8018a8e:	781b      	ldrb	r3, [r3, #0]
 8018a90:	461a      	mov	r2, r3
 8018a92:	68b9      	ldr	r1, [r7, #8]
 8018a94:	68f8      	ldr	r0, [r7, #12]
 8018a96:	f7ff fec5 	bl	8018824 <etharp_output_to_arp_index>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	e04a      	b.n	8018b34 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	75fb      	strb	r3, [r7, #23]
 8018aa2:	e031      	b.n	8018b08 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018aa4:	7dfa      	ldrb	r2, [r7, #23]
 8018aa6:	492c      	ldr	r1, [pc, #176]	@ (8018b58 <etharp_output+0x200>)
 8018aa8:	4613      	mov	r3, r2
 8018aaa:	005b      	lsls	r3, r3, #1
 8018aac:	4413      	add	r3, r2
 8018aae:	00db      	lsls	r3, r3, #3
 8018ab0:	440b      	add	r3, r1
 8018ab2:	3314      	adds	r3, #20
 8018ab4:	781b      	ldrb	r3, [r3, #0]
 8018ab6:	2b01      	cmp	r3, #1
 8018ab8:	d923      	bls.n	8018b02 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018aba:	7dfa      	ldrb	r2, [r7, #23]
 8018abc:	4926      	ldr	r1, [pc, #152]	@ (8018b58 <etharp_output+0x200>)
 8018abe:	4613      	mov	r3, r2
 8018ac0:	005b      	lsls	r3, r3, #1
 8018ac2:	4413      	add	r3, r2
 8018ac4:	00db      	lsls	r3, r3, #3
 8018ac6:	440b      	add	r3, r1
 8018ac8:	3308      	adds	r3, #8
 8018aca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018acc:	68fa      	ldr	r2, [r7, #12]
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	d117      	bne.n	8018b02 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018ad2:	69bb      	ldr	r3, [r7, #24]
 8018ad4:	6819      	ldr	r1, [r3, #0]
 8018ad6:	7dfa      	ldrb	r2, [r7, #23]
 8018ad8:	481f      	ldr	r0, [pc, #124]	@ (8018b58 <etharp_output+0x200>)
 8018ada:	4613      	mov	r3, r2
 8018adc:	005b      	lsls	r3, r3, #1
 8018ade:	4413      	add	r3, r2
 8018ae0:	00db      	lsls	r3, r3, #3
 8018ae2:	4403      	add	r3, r0
 8018ae4:	3304      	adds	r3, #4
 8018ae6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018ae8:	4299      	cmp	r1, r3
 8018aea:	d10a      	bne.n	8018b02 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018aec:	4a19      	ldr	r2, [pc, #100]	@ (8018b54 <etharp_output+0x1fc>)
 8018aee:	7dfb      	ldrb	r3, [r7, #23]
 8018af0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018af2:	7dfb      	ldrb	r3, [r7, #23]
 8018af4:	461a      	mov	r2, r3
 8018af6:	68b9      	ldr	r1, [r7, #8]
 8018af8:	68f8      	ldr	r0, [r7, #12]
 8018afa:	f7ff fe93 	bl	8018824 <etharp_output_to_arp_index>
 8018afe:	4603      	mov	r3, r0
 8018b00:	e018      	b.n	8018b34 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018b02:	7dfb      	ldrb	r3, [r7, #23]
 8018b04:	3301      	adds	r3, #1
 8018b06:	75fb      	strb	r3, [r7, #23]
 8018b08:	7dfb      	ldrb	r3, [r7, #23]
 8018b0a:	2b09      	cmp	r3, #9
 8018b0c:	d9ca      	bls.n	8018aa4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018b0e:	68ba      	ldr	r2, [r7, #8]
 8018b10:	69b9      	ldr	r1, [r7, #24]
 8018b12:	68f8      	ldr	r0, [r7, #12]
 8018b14:	f000 f822 	bl	8018b5c <etharp_query>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	e00b      	b.n	8018b34 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8018b22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018b26:	9300      	str	r3, [sp, #0]
 8018b28:	69fb      	ldr	r3, [r7, #28]
 8018b2a:	68b9      	ldr	r1, [r7, #8]
 8018b2c:	68f8      	ldr	r0, [r7, #12]
 8018b2e:	f001 fe07 	bl	801a740 <ethernet_output>
 8018b32:	4603      	mov	r3, r0
}
 8018b34:	4618      	mov	r0, r3
 8018b36:	3720      	adds	r7, #32
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}
 8018b3c:	0801dfc0 	.word	0x0801dfc0
 8018b40:	0801e110 	.word	0x0801e110
 8018b44:	0801e038 	.word	0x0801e038
 8018b48:	0801e160 	.word	0x0801e160
 8018b4c:	0801e100 	.word	0x0801e100
 8018b50:	0801e814 	.word	0x0801e814
 8018b54:	24014cfc 	.word	0x24014cfc
 8018b58:	24014c0c 	.word	0x24014c0c

08018b5c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b08c      	sub	sp, #48	@ 0x30
 8018b60:	af02      	add	r7, sp, #8
 8018b62:	60f8      	str	r0, [r7, #12]
 8018b64:	60b9      	str	r1, [r7, #8]
 8018b66:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	3326      	adds	r3, #38	@ 0x26
 8018b6c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018b6e:	23ff      	movs	r3, #255	@ 0xff
 8018b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8018b74:	2300      	movs	r3, #0
 8018b76:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018b78:	68bb      	ldr	r3, [r7, #8]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	68f9      	ldr	r1, [r7, #12]
 8018b7e:	4618      	mov	r0, r3
 8018b80:	f000 fe40 	bl	8019804 <ip4_addr_isbroadcast_u32>
 8018b84:	4603      	mov	r3, r0
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d10c      	bne.n	8018ba4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018b8a:	68bb      	ldr	r3, [r7, #8]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018b92:	2be0      	cmp	r3, #224	@ 0xe0
 8018b94:	d006      	beq.n	8018ba4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018b96:	68bb      	ldr	r3, [r7, #8]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d003      	beq.n	8018ba4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d102      	bne.n	8018baa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018ba4:	f06f 030f 	mvn.w	r3, #15
 8018ba8:	e101      	b.n	8018dae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018baa:	68fa      	ldr	r2, [r7, #12]
 8018bac:	2101      	movs	r1, #1
 8018bae:	68b8      	ldr	r0, [r7, #8]
 8018bb0:	f7ff fb60 	bl	8018274 <etharp_find_entry>
 8018bb4:	4603      	mov	r3, r0
 8018bb6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018bb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	da02      	bge.n	8018bc6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018bc0:	8a7b      	ldrh	r3, [r7, #18]
 8018bc2:	b25b      	sxtb	r3, r3
 8018bc4:	e0f3      	b.n	8018dae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018bc6:	8a7b      	ldrh	r3, [r7, #18]
 8018bc8:	2b7e      	cmp	r3, #126	@ 0x7e
 8018bca:	d906      	bls.n	8018bda <etharp_query+0x7e>
 8018bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8018db8 <etharp_query+0x25c>)
 8018bce:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8018bd2:	497a      	ldr	r1, [pc, #488]	@ (8018dbc <etharp_query+0x260>)
 8018bd4:	487a      	ldr	r0, [pc, #488]	@ (8018dc0 <etharp_query+0x264>)
 8018bd6:	f001 ffed 	bl	801abb4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018bda:	8a7b      	ldrh	r3, [r7, #18]
 8018bdc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018bde:	7c7a      	ldrb	r2, [r7, #17]
 8018be0:	4978      	ldr	r1, [pc, #480]	@ (8018dc4 <etharp_query+0x268>)
 8018be2:	4613      	mov	r3, r2
 8018be4:	005b      	lsls	r3, r3, #1
 8018be6:	4413      	add	r3, r2
 8018be8:	00db      	lsls	r3, r3, #3
 8018bea:	440b      	add	r3, r1
 8018bec:	3314      	adds	r3, #20
 8018bee:	781b      	ldrb	r3, [r3, #0]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d115      	bne.n	8018c20 <etharp_query+0xc4>
    is_new_entry = 1;
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018bf8:	7c7a      	ldrb	r2, [r7, #17]
 8018bfa:	4972      	ldr	r1, [pc, #456]	@ (8018dc4 <etharp_query+0x268>)
 8018bfc:	4613      	mov	r3, r2
 8018bfe:	005b      	lsls	r3, r3, #1
 8018c00:	4413      	add	r3, r2
 8018c02:	00db      	lsls	r3, r3, #3
 8018c04:	440b      	add	r3, r1
 8018c06:	3314      	adds	r3, #20
 8018c08:	2201      	movs	r2, #1
 8018c0a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018c0c:	7c7a      	ldrb	r2, [r7, #17]
 8018c0e:	496d      	ldr	r1, [pc, #436]	@ (8018dc4 <etharp_query+0x268>)
 8018c10:	4613      	mov	r3, r2
 8018c12:	005b      	lsls	r3, r3, #1
 8018c14:	4413      	add	r3, r2
 8018c16:	00db      	lsls	r3, r3, #3
 8018c18:	440b      	add	r3, r1
 8018c1a:	3308      	adds	r3, #8
 8018c1c:	68fa      	ldr	r2, [r7, #12]
 8018c1e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018c20:	7c7a      	ldrb	r2, [r7, #17]
 8018c22:	4968      	ldr	r1, [pc, #416]	@ (8018dc4 <etharp_query+0x268>)
 8018c24:	4613      	mov	r3, r2
 8018c26:	005b      	lsls	r3, r3, #1
 8018c28:	4413      	add	r3, r2
 8018c2a:	00db      	lsls	r3, r3, #3
 8018c2c:	440b      	add	r3, r1
 8018c2e:	3314      	adds	r3, #20
 8018c30:	781b      	ldrb	r3, [r3, #0]
 8018c32:	2b01      	cmp	r3, #1
 8018c34:	d011      	beq.n	8018c5a <etharp_query+0xfe>
 8018c36:	7c7a      	ldrb	r2, [r7, #17]
 8018c38:	4962      	ldr	r1, [pc, #392]	@ (8018dc4 <etharp_query+0x268>)
 8018c3a:	4613      	mov	r3, r2
 8018c3c:	005b      	lsls	r3, r3, #1
 8018c3e:	4413      	add	r3, r2
 8018c40:	00db      	lsls	r3, r3, #3
 8018c42:	440b      	add	r3, r1
 8018c44:	3314      	adds	r3, #20
 8018c46:	781b      	ldrb	r3, [r3, #0]
 8018c48:	2b01      	cmp	r3, #1
 8018c4a:	d806      	bhi.n	8018c5a <etharp_query+0xfe>
 8018c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8018db8 <etharp_query+0x25c>)
 8018c4e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8018c52:	495d      	ldr	r1, [pc, #372]	@ (8018dc8 <etharp_query+0x26c>)
 8018c54:	485a      	ldr	r0, [pc, #360]	@ (8018dc0 <etharp_query+0x264>)
 8018c56:	f001 ffad 	bl	801abb4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018c5a:	6a3b      	ldr	r3, [r7, #32]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d102      	bne.n	8018c66 <etharp_query+0x10a>
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d10c      	bne.n	8018c80 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018c66:	68b9      	ldr	r1, [r7, #8]
 8018c68:	68f8      	ldr	r0, [r7, #12]
 8018c6a:	f000 f963 	bl	8018f34 <etharp_request>
 8018c6e:	4603      	mov	r3, r0
 8018c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d102      	bne.n	8018c80 <etharp_query+0x124>
      return result;
 8018c7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018c7e:	e096      	b.n	8018dae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d106      	bne.n	8018c94 <etharp_query+0x138>
 8018c86:	4b4c      	ldr	r3, [pc, #304]	@ (8018db8 <etharp_query+0x25c>)
 8018c88:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8018c8c:	494f      	ldr	r1, [pc, #316]	@ (8018dcc <etharp_query+0x270>)
 8018c8e:	484c      	ldr	r0, [pc, #304]	@ (8018dc0 <etharp_query+0x264>)
 8018c90:	f001 ff90 	bl	801abb4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018c94:	7c7a      	ldrb	r2, [r7, #17]
 8018c96:	494b      	ldr	r1, [pc, #300]	@ (8018dc4 <etharp_query+0x268>)
 8018c98:	4613      	mov	r3, r2
 8018c9a:	005b      	lsls	r3, r3, #1
 8018c9c:	4413      	add	r3, r2
 8018c9e:	00db      	lsls	r3, r3, #3
 8018ca0:	440b      	add	r3, r1
 8018ca2:	3314      	adds	r3, #20
 8018ca4:	781b      	ldrb	r3, [r3, #0]
 8018ca6:	2b01      	cmp	r3, #1
 8018ca8:	d917      	bls.n	8018cda <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018caa:	4a49      	ldr	r2, [pc, #292]	@ (8018dd0 <etharp_query+0x274>)
 8018cac:	7c7b      	ldrb	r3, [r7, #17]
 8018cae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018cb0:	7c7a      	ldrb	r2, [r7, #17]
 8018cb2:	4613      	mov	r3, r2
 8018cb4:	005b      	lsls	r3, r3, #1
 8018cb6:	4413      	add	r3, r2
 8018cb8:	00db      	lsls	r3, r3, #3
 8018cba:	3308      	adds	r3, #8
 8018cbc:	4a41      	ldr	r2, [pc, #260]	@ (8018dc4 <etharp_query+0x268>)
 8018cbe:	4413      	add	r3, r2
 8018cc0:	3304      	adds	r3, #4
 8018cc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018cc6:	9200      	str	r2, [sp, #0]
 8018cc8:	697a      	ldr	r2, [r7, #20]
 8018cca:	6879      	ldr	r1, [r7, #4]
 8018ccc:	68f8      	ldr	r0, [r7, #12]
 8018cce:	f001 fd37 	bl	801a740 <ethernet_output>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018cd8:	e067      	b.n	8018daa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018cda:	7c7a      	ldrb	r2, [r7, #17]
 8018cdc:	4939      	ldr	r1, [pc, #228]	@ (8018dc4 <etharp_query+0x268>)
 8018cde:	4613      	mov	r3, r2
 8018ce0:	005b      	lsls	r3, r3, #1
 8018ce2:	4413      	add	r3, r2
 8018ce4:	00db      	lsls	r3, r3, #3
 8018ce6:	440b      	add	r3, r1
 8018ce8:	3314      	adds	r3, #20
 8018cea:	781b      	ldrb	r3, [r3, #0]
 8018cec:	2b01      	cmp	r3, #1
 8018cee:	d15c      	bne.n	8018daa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018cf8:	e01c      	b.n	8018d34 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018cfa:	69fb      	ldr	r3, [r7, #28]
 8018cfc:	895a      	ldrh	r2, [r3, #10]
 8018cfe:	69fb      	ldr	r3, [r7, #28]
 8018d00:	891b      	ldrh	r3, [r3, #8]
 8018d02:	429a      	cmp	r2, r3
 8018d04:	d10a      	bne.n	8018d1c <etharp_query+0x1c0>
 8018d06:	69fb      	ldr	r3, [r7, #28]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d006      	beq.n	8018d1c <etharp_query+0x1c0>
 8018d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8018db8 <etharp_query+0x25c>)
 8018d10:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8018d14:	492f      	ldr	r1, [pc, #188]	@ (8018dd4 <etharp_query+0x278>)
 8018d16:	482a      	ldr	r0, [pc, #168]	@ (8018dc0 <etharp_query+0x264>)
 8018d18:	f001 ff4c 	bl	801abb4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018d1c:	69fb      	ldr	r3, [r7, #28]
 8018d1e:	7b1b      	ldrb	r3, [r3, #12]
 8018d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d002      	beq.n	8018d2e <etharp_query+0x1d2>
        copy_needed = 1;
 8018d28:	2301      	movs	r3, #1
 8018d2a:	61bb      	str	r3, [r7, #24]
        break;
 8018d2c:	e005      	b.n	8018d3a <etharp_query+0x1de>
      }
      p = p->next;
 8018d2e:	69fb      	ldr	r3, [r7, #28]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018d34:	69fb      	ldr	r3, [r7, #28]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d1df      	bne.n	8018cfa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018d3a:	69bb      	ldr	r3, [r7, #24]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d007      	beq.n	8018d50 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018d40:	687a      	ldr	r2, [r7, #4]
 8018d42:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8018d46:	200e      	movs	r0, #14
 8018d48:	f7f9 f8da 	bl	8011f00 <pbuf_clone>
 8018d4c:	61f8      	str	r0, [r7, #28]
 8018d4e:	e004      	b.n	8018d5a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018d54:	69f8      	ldr	r0, [r7, #28]
 8018d56:	f7f8 ff01 	bl	8011b5c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018d5a:	69fb      	ldr	r3, [r7, #28]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d021      	beq.n	8018da4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018d60:	7c7a      	ldrb	r2, [r7, #17]
 8018d62:	4918      	ldr	r1, [pc, #96]	@ (8018dc4 <etharp_query+0x268>)
 8018d64:	4613      	mov	r3, r2
 8018d66:	005b      	lsls	r3, r3, #1
 8018d68:	4413      	add	r3, r2
 8018d6a:	00db      	lsls	r3, r3, #3
 8018d6c:	440b      	add	r3, r1
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d00a      	beq.n	8018d8a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018d74:	7c7a      	ldrb	r2, [r7, #17]
 8018d76:	4913      	ldr	r1, [pc, #76]	@ (8018dc4 <etharp_query+0x268>)
 8018d78:	4613      	mov	r3, r2
 8018d7a:	005b      	lsls	r3, r3, #1
 8018d7c:	4413      	add	r3, r2
 8018d7e:	00db      	lsls	r3, r3, #3
 8018d80:	440b      	add	r3, r1
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7f8 fe43 	bl	8011a10 <pbuf_free>
      }
      arp_table[i].q = p;
 8018d8a:	7c7a      	ldrb	r2, [r7, #17]
 8018d8c:	490d      	ldr	r1, [pc, #52]	@ (8018dc4 <etharp_query+0x268>)
 8018d8e:	4613      	mov	r3, r2
 8018d90:	005b      	lsls	r3, r3, #1
 8018d92:	4413      	add	r3, r2
 8018d94:	00db      	lsls	r3, r3, #3
 8018d96:	440b      	add	r3, r1
 8018d98:	69fa      	ldr	r2, [r7, #28]
 8018d9a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018da2:	e002      	b.n	8018daa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018da4:	23ff      	movs	r3, #255	@ 0xff
 8018da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8018daa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	3728      	adds	r7, #40	@ 0x28
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
 8018db6:	bf00      	nop
 8018db8:	0801dfc0 	.word	0x0801dfc0
 8018dbc:	0801e16c 	.word	0x0801e16c
 8018dc0:	0801e038 	.word	0x0801e038
 8018dc4:	24014c0c 	.word	0x24014c0c
 8018dc8:	0801e17c 	.word	0x0801e17c
 8018dcc:	0801e160 	.word	0x0801e160
 8018dd0:	24014cfc 	.word	0x24014cfc
 8018dd4:	0801e1a4 	.word	0x0801e1a4

08018dd8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b08a      	sub	sp, #40	@ 0x28
 8018ddc:	af02      	add	r7, sp, #8
 8018dde:	60f8      	str	r0, [r7, #12]
 8018de0:	60b9      	str	r1, [r7, #8]
 8018de2:	607a      	str	r2, [r7, #4]
 8018de4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018de6:	2300      	movs	r3, #0
 8018de8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d106      	bne.n	8018dfe <etharp_raw+0x26>
 8018df0:	4b3a      	ldr	r3, [pc, #232]	@ (8018edc <etharp_raw+0x104>)
 8018df2:	f240 4257 	movw	r2, #1111	@ 0x457
 8018df6:	493a      	ldr	r1, [pc, #232]	@ (8018ee0 <etharp_raw+0x108>)
 8018df8:	483a      	ldr	r0, [pc, #232]	@ (8018ee4 <etharp_raw+0x10c>)
 8018dfa:	f001 fedb 	bl	801abb4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018dfe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018e02:	211c      	movs	r1, #28
 8018e04:	200e      	movs	r0, #14
 8018e06:	f7f8 fb1b 	bl	8011440 <pbuf_alloc>
 8018e0a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018e0c:	69bb      	ldr	r3, [r7, #24]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d102      	bne.n	8018e18 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018e12:	f04f 33ff 	mov.w	r3, #4294967295
 8018e16:	e05d      	b.n	8018ed4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018e18:	69bb      	ldr	r3, [r7, #24]
 8018e1a:	895b      	ldrh	r3, [r3, #10]
 8018e1c:	2b1b      	cmp	r3, #27
 8018e1e:	d806      	bhi.n	8018e2e <etharp_raw+0x56>
 8018e20:	4b2e      	ldr	r3, [pc, #184]	@ (8018edc <etharp_raw+0x104>)
 8018e22:	f240 4262 	movw	r2, #1122	@ 0x462
 8018e26:	4930      	ldr	r1, [pc, #192]	@ (8018ee8 <etharp_raw+0x110>)
 8018e28:	482e      	ldr	r0, [pc, #184]	@ (8018ee4 <etharp_raw+0x10c>)
 8018e2a:	f001 fec3 	bl	801abb4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018e2e:	69bb      	ldr	r3, [r7, #24]
 8018e30:	685b      	ldr	r3, [r3, #4]
 8018e32:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018e34:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018e36:	4618      	mov	r0, r3
 8018e38:	f7f7 f938 	bl	80100ac <lwip_htons>
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	461a      	mov	r2, r3
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018e4a:	2b06      	cmp	r3, #6
 8018e4c:	d006      	beq.n	8018e5c <etharp_raw+0x84>
 8018e4e:	4b23      	ldr	r3, [pc, #140]	@ (8018edc <etharp_raw+0x104>)
 8018e50:	f240 4269 	movw	r2, #1129	@ 0x469
 8018e54:	4925      	ldr	r1, [pc, #148]	@ (8018eec <etharp_raw+0x114>)
 8018e56:	4823      	ldr	r0, [pc, #140]	@ (8018ee4 <etharp_raw+0x10c>)
 8018e58:	f001 feac 	bl	801abb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	3308      	adds	r3, #8
 8018e60:	2206      	movs	r2, #6
 8018e62:	6839      	ldr	r1, [r7, #0]
 8018e64:	4618      	mov	r0, r3
 8018e66:	f001 ffde 	bl	801ae26 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018e6a:	697b      	ldr	r3, [r7, #20]
 8018e6c:	3312      	adds	r3, #18
 8018e6e:	2206      	movs	r2, #6
 8018e70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018e72:	4618      	mov	r0, r3
 8018e74:	f001 ffd7 	bl	801ae26 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	330e      	adds	r3, #14
 8018e7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018e7e:	6812      	ldr	r2, [r2, #0]
 8018e80:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018e82:	697b      	ldr	r3, [r7, #20]
 8018e84:	3318      	adds	r3, #24
 8018e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018e88:	6812      	ldr	r2, [r2, #0]
 8018e8a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	701a      	strb	r2, [r3, #0]
 8018e92:	2200      	movs	r2, #0
 8018e94:	f042 0201 	orr.w	r2, r2, #1
 8018e98:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	f042 0208 	orr.w	r2, r2, #8
 8018ea2:	709a      	strb	r2, [r3, #2]
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018ea8:	697b      	ldr	r3, [r7, #20]
 8018eaa:	2206      	movs	r2, #6
 8018eac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018eae:	697b      	ldr	r3, [r7, #20]
 8018eb0:	2204      	movs	r2, #4
 8018eb2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018eb4:	f640 0306 	movw	r3, #2054	@ 0x806
 8018eb8:	9300      	str	r3, [sp, #0]
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	68ba      	ldr	r2, [r7, #8]
 8018ebe:	69b9      	ldr	r1, [r7, #24]
 8018ec0:	68f8      	ldr	r0, [r7, #12]
 8018ec2:	f001 fc3d 	bl	801a740 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018ec6:	69b8      	ldr	r0, [r7, #24]
 8018ec8:	f7f8 fda2 	bl	8011a10 <pbuf_free>
  p = NULL;
 8018ecc:	2300      	movs	r3, #0
 8018ece:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018ed0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	3720      	adds	r7, #32
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	bd80      	pop	{r7, pc}
 8018edc:	0801dfc0 	.word	0x0801dfc0
 8018ee0:	0801e110 	.word	0x0801e110
 8018ee4:	0801e038 	.word	0x0801e038
 8018ee8:	0801e1c0 	.word	0x0801e1c0
 8018eec:	0801e1f4 	.word	0x0801e1f4

08018ef0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b088      	sub	sp, #32
 8018ef4:	af04      	add	r7, sp, #16
 8018ef6:	60f8      	str	r0, [r7, #12]
 8018ef8:	60b9      	str	r1, [r7, #8]
 8018efa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018f0c:	2201      	movs	r2, #1
 8018f0e:	9203      	str	r2, [sp, #12]
 8018f10:	68ba      	ldr	r2, [r7, #8]
 8018f12:	9202      	str	r2, [sp, #8]
 8018f14:	4a06      	ldr	r2, [pc, #24]	@ (8018f30 <etharp_request_dst+0x40>)
 8018f16:	9201      	str	r2, [sp, #4]
 8018f18:	9300      	str	r3, [sp, #0]
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	687a      	ldr	r2, [r7, #4]
 8018f1e:	68f8      	ldr	r0, [r7, #12]
 8018f20:	f7ff ff5a 	bl	8018dd8 <etharp_raw>
 8018f24:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018f26:	4618      	mov	r0, r3
 8018f28:	3710      	adds	r7, #16
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	bd80      	pop	{r7, pc}
 8018f2e:	bf00      	nop
 8018f30:	0801e81c 	.word	0x0801e81c

08018f34 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018f34:	b580      	push	{r7, lr}
 8018f36:	b082      	sub	sp, #8
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
 8018f3c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018f3e:	4a05      	ldr	r2, [pc, #20]	@ (8018f54 <etharp_request+0x20>)
 8018f40:	6839      	ldr	r1, [r7, #0]
 8018f42:	6878      	ldr	r0, [r7, #4]
 8018f44:	f7ff ffd4 	bl	8018ef0 <etharp_request_dst>
 8018f48:	4603      	mov	r3, r0
}
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	3708      	adds	r7, #8
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bd80      	pop	{r7, pc}
 8018f52:	bf00      	nop
 8018f54:	0801e814 	.word	0x0801e814

08018f58 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b08e      	sub	sp, #56	@ 0x38
 8018f5c:	af04      	add	r7, sp, #16
 8018f5e:	6078      	str	r0, [r7, #4]
 8018f60:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018f62:	4b87      	ldr	r3, [pc, #540]	@ (8019180 <icmp_input+0x228>)
 8018f64:	689b      	ldr	r3, [r3, #8]
 8018f66:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f6a:	781b      	ldrb	r3, [r3, #0]
 8018f6c:	f003 030f 	and.w	r3, r3, #15
 8018f70:	b2db      	uxtb	r3, r3
 8018f72:	009b      	lsls	r3, r3, #2
 8018f74:	b2db      	uxtb	r3, r3
 8018f76:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8018f78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018f7a:	2b13      	cmp	r3, #19
 8018f7c:	f240 80e8 	bls.w	8019150 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	895b      	ldrh	r3, [r3, #10]
 8018f84:	2b03      	cmp	r3, #3
 8018f86:	f240 80e5 	bls.w	8019154 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	685b      	ldr	r3, [r3, #4]
 8018f8e:	781b      	ldrb	r3, [r3, #0]
 8018f90:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018f94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f000 80d2 	beq.w	8019142 <icmp_input+0x1ea>
 8018f9e:	2b08      	cmp	r3, #8
 8018fa0:	f040 80d2 	bne.w	8019148 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018fa4:	4b77      	ldr	r3, [pc, #476]	@ (8019184 <icmp_input+0x22c>)
 8018fa6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018fa8:	4b75      	ldr	r3, [pc, #468]	@ (8019180 <icmp_input+0x228>)
 8018faa:	695b      	ldr	r3, [r3, #20]
 8018fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018fb0:	2be0      	cmp	r3, #224	@ 0xe0
 8018fb2:	f000 80d6 	beq.w	8019162 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018fb6:	4b72      	ldr	r3, [pc, #456]	@ (8019180 <icmp_input+0x228>)
 8018fb8:	695b      	ldr	r3, [r3, #20]
 8018fba:	4a71      	ldr	r2, [pc, #452]	@ (8019180 <icmp_input+0x228>)
 8018fbc:	6812      	ldr	r2, [r2, #0]
 8018fbe:	4611      	mov	r1, r2
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	f000 fc1f 	bl	8019804 <ip4_addr_isbroadcast_u32>
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	f040 80cc 	bne.w	8019166 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	891b      	ldrh	r3, [r3, #8]
 8018fd2:	2b07      	cmp	r3, #7
 8018fd4:	f240 80c0 	bls.w	8019158 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8018fd8:	6878      	ldr	r0, [r7, #4]
 8018fda:	f7f7 f905 	bl	80101e8 <inet_chksum_pbuf>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d003      	beq.n	8018fec <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8018fe4:	6878      	ldr	r0, [r7, #4]
 8018fe6:	f7f8 fd13 	bl	8011a10 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018fea:	e0c5      	b.n	8019178 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018fec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018fee:	330e      	adds	r3, #14
 8018ff0:	4619      	mov	r1, r3
 8018ff2:	6878      	ldr	r0, [r7, #4]
 8018ff4:	f7f8 fc76 	bl	80118e4 <pbuf_add_header>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d04b      	beq.n	8019096 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	891a      	ldrh	r2, [r3, #8]
 8019002:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019004:	4413      	add	r3, r2
 8019006:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	891b      	ldrh	r3, [r3, #8]
 801900c:	8b7a      	ldrh	r2, [r7, #26]
 801900e:	429a      	cmp	r2, r3
 8019010:	f0c0 80ab 	bcc.w	801916a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019014:	8b7b      	ldrh	r3, [r7, #26]
 8019016:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801901a:	4619      	mov	r1, r3
 801901c:	200e      	movs	r0, #14
 801901e:	f7f8 fa0f 	bl	8011440 <pbuf_alloc>
 8019022:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019024:	697b      	ldr	r3, [r7, #20]
 8019026:	2b00      	cmp	r3, #0
 8019028:	f000 80a1 	beq.w	801916e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801902c:	697b      	ldr	r3, [r7, #20]
 801902e:	895b      	ldrh	r3, [r3, #10]
 8019030:	461a      	mov	r2, r3
 8019032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019034:	3308      	adds	r3, #8
 8019036:	429a      	cmp	r2, r3
 8019038:	d203      	bcs.n	8019042 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801903a:	6978      	ldr	r0, [r7, #20]
 801903c:	f7f8 fce8 	bl	8011a10 <pbuf_free>
          goto icmperr;
 8019040:	e096      	b.n	8019170 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	685b      	ldr	r3, [r3, #4]
 8019046:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801904a:	4618      	mov	r0, r3
 801904c:	f001 feeb 	bl	801ae26 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019050:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019052:	4619      	mov	r1, r3
 8019054:	6978      	ldr	r0, [r7, #20]
 8019056:	f7f8 fc55 	bl	8011904 <pbuf_remove_header>
 801905a:	4603      	mov	r3, r0
 801905c:	2b00      	cmp	r3, #0
 801905e:	d009      	beq.n	8019074 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019060:	4b49      	ldr	r3, [pc, #292]	@ (8019188 <icmp_input+0x230>)
 8019062:	22b6      	movs	r2, #182	@ 0xb6
 8019064:	4949      	ldr	r1, [pc, #292]	@ (801918c <icmp_input+0x234>)
 8019066:	484a      	ldr	r0, [pc, #296]	@ (8019190 <icmp_input+0x238>)
 8019068:	f001 fda4 	bl	801abb4 <iprintf>
          pbuf_free(r);
 801906c:	6978      	ldr	r0, [r7, #20]
 801906e:	f7f8 fccf 	bl	8011a10 <pbuf_free>
          goto icmperr;
 8019072:	e07d      	b.n	8019170 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019074:	6879      	ldr	r1, [r7, #4]
 8019076:	6978      	ldr	r0, [r7, #20]
 8019078:	f7f8 fdfe 	bl	8011c78 <pbuf_copy>
 801907c:	4603      	mov	r3, r0
 801907e:	2b00      	cmp	r3, #0
 8019080:	d003      	beq.n	801908a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019082:	6978      	ldr	r0, [r7, #20]
 8019084:	f7f8 fcc4 	bl	8011a10 <pbuf_free>
          goto icmperr;
 8019088:	e072      	b.n	8019170 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801908a:	6878      	ldr	r0, [r7, #4]
 801908c:	f7f8 fcc0 	bl	8011a10 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019090:	697b      	ldr	r3, [r7, #20]
 8019092:	607b      	str	r3, [r7, #4]
 8019094:	e00f      	b.n	80190b6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019096:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019098:	330e      	adds	r3, #14
 801909a:	4619      	mov	r1, r3
 801909c:	6878      	ldr	r0, [r7, #4]
 801909e:	f7f8 fc31 	bl	8011904 <pbuf_remove_header>
 80190a2:	4603      	mov	r3, r0
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d006      	beq.n	80190b6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80190a8:	4b37      	ldr	r3, [pc, #220]	@ (8019188 <icmp_input+0x230>)
 80190aa:	22c7      	movs	r2, #199	@ 0xc7
 80190ac:	4939      	ldr	r1, [pc, #228]	@ (8019194 <icmp_input+0x23c>)
 80190ae:	4838      	ldr	r0, [pc, #224]	@ (8019190 <icmp_input+0x238>)
 80190b0:	f001 fd80 	bl	801abb4 <iprintf>
          goto icmperr;
 80190b4:	e05c      	b.n	8019170 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	685b      	ldr	r3, [r3, #4]
 80190ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80190bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80190be:	4619      	mov	r1, r3
 80190c0:	6878      	ldr	r0, [r7, #4]
 80190c2:	f7f8 fc0f 	bl	80118e4 <pbuf_add_header>
 80190c6:	4603      	mov	r3, r0
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d13c      	bne.n	8019146 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	685b      	ldr	r3, [r3, #4]
 80190d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80190d2:	69fb      	ldr	r3, [r7, #28]
 80190d4:	681a      	ldr	r2, [r3, #0]
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80190da:	4b29      	ldr	r3, [pc, #164]	@ (8019180 <icmp_input+0x228>)
 80190dc:	691a      	ldr	r2, [r3, #16]
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80190e2:	693b      	ldr	r3, [r7, #16]
 80190e4:	2200      	movs	r2, #0
 80190e6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80190e8:	693b      	ldr	r3, [r7, #16]
 80190ea:	885b      	ldrh	r3, [r3, #2]
 80190ec:	b29b      	uxth	r3, r3
 80190ee:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80190f2:	4293      	cmp	r3, r2
 80190f4:	d907      	bls.n	8019106 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80190f6:	693b      	ldr	r3, [r7, #16]
 80190f8:	885b      	ldrh	r3, [r3, #2]
 80190fa:	b29b      	uxth	r3, r3
 80190fc:	3309      	adds	r3, #9
 80190fe:	b29a      	uxth	r2, r3
 8019100:	693b      	ldr	r3, [r7, #16]
 8019102:	805a      	strh	r2, [r3, #2]
 8019104:	e006      	b.n	8019114 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8019106:	693b      	ldr	r3, [r7, #16]
 8019108:	885b      	ldrh	r3, [r3, #2]
 801910a:	b29b      	uxth	r3, r3
 801910c:	3308      	adds	r3, #8
 801910e:	b29a      	uxth	r2, r3
 8019110:	693b      	ldr	r3, [r7, #16]
 8019112:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	22ff      	movs	r2, #255	@ 0xff
 8019118:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	2200      	movs	r2, #0
 801911e:	729a      	strb	r2, [r3, #10]
 8019120:	2200      	movs	r2, #0
 8019122:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019124:	683b      	ldr	r3, [r7, #0]
 8019126:	9302      	str	r3, [sp, #8]
 8019128:	2301      	movs	r3, #1
 801912a:	9301      	str	r3, [sp, #4]
 801912c:	2300      	movs	r3, #0
 801912e:	9300      	str	r3, [sp, #0]
 8019130:	23ff      	movs	r3, #255	@ 0xff
 8019132:	2200      	movs	r2, #0
 8019134:	69f9      	ldr	r1, [r7, #28]
 8019136:	6878      	ldr	r0, [r7, #4]
 8019138:	f000 fa8c 	bl	8019654 <ip4_output_if>
 801913c:	4603      	mov	r3, r0
 801913e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019140:	e001      	b.n	8019146 <icmp_input+0x1ee>
      break;
 8019142:	bf00      	nop
 8019144:	e000      	b.n	8019148 <icmp_input+0x1f0>
      break;
 8019146:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019148:	6878      	ldr	r0, [r7, #4]
 801914a:	f7f8 fc61 	bl	8011a10 <pbuf_free>
  return;
 801914e:	e013      	b.n	8019178 <icmp_input+0x220>
    goto lenerr;
 8019150:	bf00      	nop
 8019152:	e002      	b.n	801915a <icmp_input+0x202>
    goto lenerr;
 8019154:	bf00      	nop
 8019156:	e000      	b.n	801915a <icmp_input+0x202>
        goto lenerr;
 8019158:	bf00      	nop
lenerr:
  pbuf_free(p);
 801915a:	6878      	ldr	r0, [r7, #4]
 801915c:	f7f8 fc58 	bl	8011a10 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019160:	e00a      	b.n	8019178 <icmp_input+0x220>
        goto icmperr;
 8019162:	bf00      	nop
 8019164:	e004      	b.n	8019170 <icmp_input+0x218>
        goto icmperr;
 8019166:	bf00      	nop
 8019168:	e002      	b.n	8019170 <icmp_input+0x218>
          goto icmperr;
 801916a:	bf00      	nop
 801916c:	e000      	b.n	8019170 <icmp_input+0x218>
          goto icmperr;
 801916e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019170:	6878      	ldr	r0, [r7, #4]
 8019172:	f7f8 fc4d 	bl	8011a10 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019176:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019178:	3728      	adds	r7, #40	@ 0x28
 801917a:	46bd      	mov	sp, r7
 801917c:	bd80      	pop	{r7, pc}
 801917e:	bf00      	nop
 8019180:	2400e070 	.word	0x2400e070
 8019184:	2400e084 	.word	0x2400e084
 8019188:	0801e238 	.word	0x0801e238
 801918c:	0801e270 	.word	0x0801e270
 8019190:	0801e2a8 	.word	0x0801e2a8
 8019194:	0801e2d0 	.word	0x0801e2d0

08019198 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b082      	sub	sp, #8
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
 80191a0:	460b      	mov	r3, r1
 80191a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80191a4:	78fb      	ldrb	r3, [r7, #3]
 80191a6:	461a      	mov	r2, r3
 80191a8:	2103      	movs	r1, #3
 80191aa:	6878      	ldr	r0, [r7, #4]
 80191ac:	f000 f814 	bl	80191d8 <icmp_send_response>
}
 80191b0:	bf00      	nop
 80191b2:	3708      	adds	r7, #8
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}

080191b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b082      	sub	sp, #8
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	460b      	mov	r3, r1
 80191c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80191c4:	78fb      	ldrb	r3, [r7, #3]
 80191c6:	461a      	mov	r2, r3
 80191c8:	210b      	movs	r1, #11
 80191ca:	6878      	ldr	r0, [r7, #4]
 80191cc:	f000 f804 	bl	80191d8 <icmp_send_response>
}
 80191d0:	bf00      	nop
 80191d2:	3708      	adds	r7, #8
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd80      	pop	{r7, pc}

080191d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b08c      	sub	sp, #48	@ 0x30
 80191dc:	af04      	add	r7, sp, #16
 80191de:	6078      	str	r0, [r7, #4]
 80191e0:	460b      	mov	r3, r1
 80191e2:	70fb      	strb	r3, [r7, #3]
 80191e4:	4613      	mov	r3, r2
 80191e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80191e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80191ec:	2124      	movs	r1, #36	@ 0x24
 80191ee:	2022      	movs	r0, #34	@ 0x22
 80191f0:	f7f8 f926 	bl	8011440 <pbuf_alloc>
 80191f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80191f6:	69fb      	ldr	r3, [r7, #28]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d056      	beq.n	80192aa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80191fc:	69fb      	ldr	r3, [r7, #28]
 80191fe:	895b      	ldrh	r3, [r3, #10]
 8019200:	2b23      	cmp	r3, #35	@ 0x23
 8019202:	d806      	bhi.n	8019212 <icmp_send_response+0x3a>
 8019204:	4b2b      	ldr	r3, [pc, #172]	@ (80192b4 <icmp_send_response+0xdc>)
 8019206:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801920a:	492b      	ldr	r1, [pc, #172]	@ (80192b8 <icmp_send_response+0xe0>)
 801920c:	482b      	ldr	r0, [pc, #172]	@ (80192bc <icmp_send_response+0xe4>)
 801920e:	f001 fcd1 	bl	801abb4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	685b      	ldr	r3, [r3, #4]
 8019216:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019218:	69fb      	ldr	r3, [r7, #28]
 801921a:	685b      	ldr	r3, [r3, #4]
 801921c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801921e:	697b      	ldr	r3, [r7, #20]
 8019220:	78fa      	ldrb	r2, [r7, #3]
 8019222:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	78ba      	ldrb	r2, [r7, #2]
 8019228:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801922a:	697b      	ldr	r3, [r7, #20]
 801922c:	2200      	movs	r2, #0
 801922e:	711a      	strb	r2, [r3, #4]
 8019230:	2200      	movs	r2, #0
 8019232:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019234:	697b      	ldr	r3, [r7, #20]
 8019236:	2200      	movs	r2, #0
 8019238:	719a      	strb	r2, [r3, #6]
 801923a:	2200      	movs	r2, #0
 801923c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801923e:	69fb      	ldr	r3, [r7, #28]
 8019240:	685b      	ldr	r3, [r3, #4]
 8019242:	f103 0008 	add.w	r0, r3, #8
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	685b      	ldr	r3, [r3, #4]
 801924a:	221c      	movs	r2, #28
 801924c:	4619      	mov	r1, r3
 801924e:	f001 fdea 	bl	801ae26 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019252:	69bb      	ldr	r3, [r7, #24]
 8019254:	68db      	ldr	r3, [r3, #12]
 8019256:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019258:	f107 030c 	add.w	r3, r7, #12
 801925c:	4618      	mov	r0, r3
 801925e:	f000 f82f 	bl	80192c0 <ip4_route>
 8019262:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d01b      	beq.n	80192a2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801926a:	697b      	ldr	r3, [r7, #20]
 801926c:	2200      	movs	r2, #0
 801926e:	709a      	strb	r2, [r3, #2]
 8019270:	2200      	movs	r2, #0
 8019272:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019274:	69fb      	ldr	r3, [r7, #28]
 8019276:	895b      	ldrh	r3, [r3, #10]
 8019278:	4619      	mov	r1, r3
 801927a:	6978      	ldr	r0, [r7, #20]
 801927c:	f7f6 ffa2 	bl	80101c4 <inet_chksum>
 8019280:	4603      	mov	r3, r0
 8019282:	461a      	mov	r2, r3
 8019284:	697b      	ldr	r3, [r7, #20]
 8019286:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019288:	f107 020c 	add.w	r2, r7, #12
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	9302      	str	r3, [sp, #8]
 8019290:	2301      	movs	r3, #1
 8019292:	9301      	str	r3, [sp, #4]
 8019294:	2300      	movs	r3, #0
 8019296:	9300      	str	r3, [sp, #0]
 8019298:	23ff      	movs	r3, #255	@ 0xff
 801929a:	2100      	movs	r1, #0
 801929c:	69f8      	ldr	r0, [r7, #28]
 801929e:	f000 f9d9 	bl	8019654 <ip4_output_if>
  }
  pbuf_free(q);
 80192a2:	69f8      	ldr	r0, [r7, #28]
 80192a4:	f7f8 fbb4 	bl	8011a10 <pbuf_free>
 80192a8:	e000      	b.n	80192ac <icmp_send_response+0xd4>
    return;
 80192aa:	bf00      	nop
}
 80192ac:	3720      	adds	r7, #32
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}
 80192b2:	bf00      	nop
 80192b4:	0801e238 	.word	0x0801e238
 80192b8:	0801e304 	.word	0x0801e304
 80192bc:	0801e2a8 	.word	0x0801e2a8

080192c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80192c0:	b480      	push	{r7}
 80192c2:	b085      	sub	sp, #20
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80192c8:	4b33      	ldr	r3, [pc, #204]	@ (8019398 <ip4_route+0xd8>)
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	60fb      	str	r3, [r7, #12]
 80192ce:	e036      	b.n	801933e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80192d6:	f003 0301 	and.w	r3, r3, #1
 80192da:	b2db      	uxtb	r3, r3
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d02b      	beq.n	8019338 <ip4_route+0x78>
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80192e6:	089b      	lsrs	r3, r3, #2
 80192e8:	f003 0301 	and.w	r3, r3, #1
 80192ec:	b2db      	uxtb	r3, r3
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d022      	beq.n	8019338 <ip4_route+0x78>
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	3304      	adds	r3, #4
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d01d      	beq.n	8019338 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	681a      	ldr	r2, [r3, #0]
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	3304      	adds	r3, #4
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	405a      	eors	r2, r3
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	3308      	adds	r3, #8
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	4013      	ands	r3, r2
 8019310:	2b00      	cmp	r3, #0
 8019312:	d101      	bne.n	8019318 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	e038      	b.n	801938a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801931e:	f003 0302 	and.w	r3, r3, #2
 8019322:	2b00      	cmp	r3, #0
 8019324:	d108      	bne.n	8019338 <ip4_route+0x78>
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	681a      	ldr	r2, [r3, #0]
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	330c      	adds	r3, #12
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	429a      	cmp	r2, r3
 8019332:	d101      	bne.n	8019338 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	e028      	b.n	801938a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	60fb      	str	r3, [r7, #12]
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d1c5      	bne.n	80192d0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019344:	4b15      	ldr	r3, [pc, #84]	@ (801939c <ip4_route+0xdc>)
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d01a      	beq.n	8019382 <ip4_route+0xc2>
 801934c:	4b13      	ldr	r3, [pc, #76]	@ (801939c <ip4_route+0xdc>)
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019354:	f003 0301 	and.w	r3, r3, #1
 8019358:	2b00      	cmp	r3, #0
 801935a:	d012      	beq.n	8019382 <ip4_route+0xc2>
 801935c:	4b0f      	ldr	r3, [pc, #60]	@ (801939c <ip4_route+0xdc>)
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019364:	f003 0304 	and.w	r3, r3, #4
 8019368:	2b00      	cmp	r3, #0
 801936a:	d00a      	beq.n	8019382 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801936c:	4b0b      	ldr	r3, [pc, #44]	@ (801939c <ip4_route+0xdc>)
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	3304      	adds	r3, #4
 8019372:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019374:	2b00      	cmp	r3, #0
 8019376:	d004      	beq.n	8019382 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	b2db      	uxtb	r3, r3
 801937e:	2b7f      	cmp	r3, #127	@ 0x7f
 8019380:	d101      	bne.n	8019386 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019382:	2300      	movs	r3, #0
 8019384:	e001      	b.n	801938a <ip4_route+0xca>
  }

  return netif_default;
 8019386:	4b05      	ldr	r3, [pc, #20]	@ (801939c <ip4_route+0xdc>)
 8019388:	681b      	ldr	r3, [r3, #0]
}
 801938a:	4618      	mov	r0, r3
 801938c:	3714      	adds	r7, #20
 801938e:	46bd      	mov	sp, r7
 8019390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019394:	4770      	bx	lr
 8019396:	bf00      	nop
 8019398:	24014b9c 	.word	0x24014b9c
 801939c:	24014ba0 	.word	0x24014ba0

080193a0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b082      	sub	sp, #8
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80193ae:	f003 0301 	and.w	r3, r3, #1
 80193b2:	b2db      	uxtb	r3, r3
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d016      	beq.n	80193e6 <ip4_input_accept+0x46>
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	3304      	adds	r3, #4
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d011      	beq.n	80193e6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80193c2:	4b0b      	ldr	r3, [pc, #44]	@ (80193f0 <ip4_input_accept+0x50>)
 80193c4:	695a      	ldr	r2, [r3, #20]
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	3304      	adds	r3, #4
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	429a      	cmp	r2, r3
 80193ce:	d008      	beq.n	80193e2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80193d0:	4b07      	ldr	r3, [pc, #28]	@ (80193f0 <ip4_input_accept+0x50>)
 80193d2:	695b      	ldr	r3, [r3, #20]
 80193d4:	6879      	ldr	r1, [r7, #4]
 80193d6:	4618      	mov	r0, r3
 80193d8:	f000 fa14 	bl	8019804 <ip4_addr_isbroadcast_u32>
 80193dc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d001      	beq.n	80193e6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80193e2:	2301      	movs	r3, #1
 80193e4:	e000      	b.n	80193e8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80193e6:	2300      	movs	r3, #0
}
 80193e8:	4618      	mov	r0, r3
 80193ea:	3708      	adds	r7, #8
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	2400e070 	.word	0x2400e070

080193f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b086      	sub	sp, #24
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
 80193fc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	685b      	ldr	r3, [r3, #4]
 8019402:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019404:	697b      	ldr	r3, [r7, #20]
 8019406:	781b      	ldrb	r3, [r3, #0]
 8019408:	091b      	lsrs	r3, r3, #4
 801940a:	b2db      	uxtb	r3, r3
 801940c:	2b04      	cmp	r3, #4
 801940e:	d004      	beq.n	801941a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019410:	6878      	ldr	r0, [r7, #4]
 8019412:	f7f8 fafd 	bl	8011a10 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019416:	2300      	movs	r3, #0
 8019418:	e113      	b.n	8019642 <ip4_input+0x24e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801941a:	697b      	ldr	r3, [r7, #20]
 801941c:	781b      	ldrb	r3, [r3, #0]
 801941e:	f003 030f 	and.w	r3, r3, #15
 8019422:	b2db      	uxtb	r3, r3
 8019424:	009b      	lsls	r3, r3, #2
 8019426:	b2db      	uxtb	r3, r3
 8019428:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801942a:	697b      	ldr	r3, [r7, #20]
 801942c:	885b      	ldrh	r3, [r3, #2]
 801942e:	b29b      	uxth	r3, r3
 8019430:	4618      	mov	r0, r3
 8019432:	f7f6 fe3b 	bl	80100ac <lwip_htons>
 8019436:	4603      	mov	r3, r0
 8019438:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	891b      	ldrh	r3, [r3, #8]
 801943e:	89ba      	ldrh	r2, [r7, #12]
 8019440:	429a      	cmp	r2, r3
 8019442:	d204      	bcs.n	801944e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019444:	89bb      	ldrh	r3, [r7, #12]
 8019446:	4619      	mov	r1, r3
 8019448:	6878      	ldr	r0, [r7, #4]
 801944a:	f7f8 f95b 	bl	8011704 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	895b      	ldrh	r3, [r3, #10]
 8019452:	89fa      	ldrh	r2, [r7, #14]
 8019454:	429a      	cmp	r2, r3
 8019456:	d807      	bhi.n	8019468 <ip4_input+0x74>
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	891b      	ldrh	r3, [r3, #8]
 801945c:	89ba      	ldrh	r2, [r7, #12]
 801945e:	429a      	cmp	r2, r3
 8019460:	d802      	bhi.n	8019468 <ip4_input+0x74>
 8019462:	89fb      	ldrh	r3, [r7, #14]
 8019464:	2b13      	cmp	r3, #19
 8019466:	d804      	bhi.n	8019472 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019468:	6878      	ldr	r0, [r7, #4]
 801946a:	f7f8 fad1 	bl	8011a10 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801946e:	2300      	movs	r3, #0
 8019470:	e0e7      	b.n	8019642 <ip4_input+0x24e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019472:	697b      	ldr	r3, [r7, #20]
 8019474:	691b      	ldr	r3, [r3, #16]
 8019476:	4a75      	ldr	r2, [pc, #468]	@ (801964c <ip4_input+0x258>)
 8019478:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	68db      	ldr	r3, [r3, #12]
 801947e:	4a73      	ldr	r2, [pc, #460]	@ (801964c <ip4_input+0x258>)
 8019480:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019482:	4b72      	ldr	r3, [pc, #456]	@ (801964c <ip4_input+0x258>)
 8019484:	695b      	ldr	r3, [r3, #20]
 8019486:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801948a:	2be0      	cmp	r3, #224	@ 0xe0
 801948c:	d112      	bne.n	80194b4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019494:	f003 0301 	and.w	r3, r3, #1
 8019498:	b2db      	uxtb	r3, r3
 801949a:	2b00      	cmp	r3, #0
 801949c:	d007      	beq.n	80194ae <ip4_input+0xba>
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	3304      	adds	r3, #4
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d002      	beq.n	80194ae <ip4_input+0xba>
      netif = inp;
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	613b      	str	r3, [r7, #16]
 80194ac:	e02a      	b.n	8019504 <ip4_input+0x110>
    } else {
      netif = NULL;
 80194ae:	2300      	movs	r3, #0
 80194b0:	613b      	str	r3, [r7, #16]
 80194b2:	e027      	b.n	8019504 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80194b4:	6838      	ldr	r0, [r7, #0]
 80194b6:	f7ff ff73 	bl	80193a0 <ip4_input_accept>
 80194ba:	4603      	mov	r3, r0
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d002      	beq.n	80194c6 <ip4_input+0xd2>
      netif = inp;
 80194c0:	683b      	ldr	r3, [r7, #0]
 80194c2:	613b      	str	r3, [r7, #16]
 80194c4:	e01e      	b.n	8019504 <ip4_input+0x110>
    } else {
      netif = NULL;
 80194c6:	2300      	movs	r3, #0
 80194c8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80194ca:	4b60      	ldr	r3, [pc, #384]	@ (801964c <ip4_input+0x258>)
 80194cc:	695b      	ldr	r3, [r3, #20]
 80194ce:	b2db      	uxtb	r3, r3
 80194d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80194d2:	d017      	beq.n	8019504 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80194d4:	4b5e      	ldr	r3, [pc, #376]	@ (8019650 <ip4_input+0x25c>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	613b      	str	r3, [r7, #16]
 80194da:	e00e      	b.n	80194fa <ip4_input+0x106>
          if (netif == inp) {
 80194dc:	693a      	ldr	r2, [r7, #16]
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	429a      	cmp	r2, r3
 80194e2:	d006      	beq.n	80194f2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80194e4:	6938      	ldr	r0, [r7, #16]
 80194e6:	f7ff ff5b 	bl	80193a0 <ip4_input_accept>
 80194ea:	4603      	mov	r3, r0
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d108      	bne.n	8019502 <ip4_input+0x10e>
 80194f0:	e000      	b.n	80194f4 <ip4_input+0x100>
            continue;
 80194f2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80194f4:	693b      	ldr	r3, [r7, #16]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	613b      	str	r3, [r7, #16]
 80194fa:	693b      	ldr	r3, [r7, #16]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d1ed      	bne.n	80194dc <ip4_input+0xe8>
 8019500:	e000      	b.n	8019504 <ip4_input+0x110>
            break;
 8019502:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019504:	4b51      	ldr	r3, [pc, #324]	@ (801964c <ip4_input+0x258>)
 8019506:	691b      	ldr	r3, [r3, #16]
 8019508:	6839      	ldr	r1, [r7, #0]
 801950a:	4618      	mov	r0, r3
 801950c:	f000 f97a 	bl	8019804 <ip4_addr_isbroadcast_u32>
 8019510:	4603      	mov	r3, r0
 8019512:	2b00      	cmp	r3, #0
 8019514:	d105      	bne.n	8019522 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019516:	4b4d      	ldr	r3, [pc, #308]	@ (801964c <ip4_input+0x258>)
 8019518:	691b      	ldr	r3, [r3, #16]
 801951a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801951e:	2be0      	cmp	r3, #224	@ 0xe0
 8019520:	d104      	bne.n	801952c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019522:	6878      	ldr	r0, [r7, #4]
 8019524:	f7f8 fa74 	bl	8011a10 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019528:	2300      	movs	r3, #0
 801952a:	e08a      	b.n	8019642 <ip4_input+0x24e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801952c:	693b      	ldr	r3, [r7, #16]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d104      	bne.n	801953c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019532:	6878      	ldr	r0, [r7, #4]
 8019534:	f7f8 fa6c 	bl	8011a10 <pbuf_free>
    return ERR_OK;
 8019538:	2300      	movs	r3, #0
 801953a:	e082      	b.n	8019642 <ip4_input+0x24e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801953c:	697b      	ldr	r3, [r7, #20]
 801953e:	88db      	ldrh	r3, [r3, #6]
 8019540:	b29b      	uxth	r3, r3
 8019542:	461a      	mov	r2, r3
 8019544:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8019548:	4013      	ands	r3, r2
 801954a:	2b00      	cmp	r3, #0
 801954c:	d00b      	beq.n	8019566 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801954e:	6878      	ldr	r0, [r7, #4]
 8019550:	f000 fd2e 	bl	8019fb0 <ip4_reass>
 8019554:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d101      	bne.n	8019560 <ip4_input+0x16c>
      return ERR_OK;
 801955c:	2300      	movs	r3, #0
 801955e:	e070      	b.n	8019642 <ip4_input+0x24e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	685b      	ldr	r3, [r3, #4]
 8019564:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019566:	4a39      	ldr	r2, [pc, #228]	@ (801964c <ip4_input+0x258>)
 8019568:	693b      	ldr	r3, [r7, #16]
 801956a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801956c:	4a37      	ldr	r2, [pc, #220]	@ (801964c <ip4_input+0x258>)
 801956e:	683b      	ldr	r3, [r7, #0]
 8019570:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019572:	4a36      	ldr	r2, [pc, #216]	@ (801964c <ip4_input+0x258>)
 8019574:	697b      	ldr	r3, [r7, #20]
 8019576:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019578:	697b      	ldr	r3, [r7, #20]
 801957a:	781b      	ldrb	r3, [r3, #0]
 801957c:	f003 030f 	and.w	r3, r3, #15
 8019580:	b2db      	uxtb	r3, r3
 8019582:	009b      	lsls	r3, r3, #2
 8019584:	b2db      	uxtb	r3, r3
 8019586:	461a      	mov	r2, r3
 8019588:	4b30      	ldr	r3, [pc, #192]	@ (801964c <ip4_input+0x258>)
 801958a:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 801958c:	6839      	ldr	r1, [r7, #0]
 801958e:	6878      	ldr	r0, [r7, #4]
 8019590:	f7f8 fd22 	bl	8011fd8 <raw_input>
 8019594:	4603      	mov	r3, r0
 8019596:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 8019598:	7afb      	ldrb	r3, [r7, #11]
 801959a:	2b01      	cmp	r3, #1
 801959c:	d03e      	beq.n	801961c <ip4_input+0x228>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801959e:	89fb      	ldrh	r3, [r7, #14]
 80195a0:	4619      	mov	r1, r3
 80195a2:	6878      	ldr	r0, [r7, #4]
 80195a4:	f7f8 f9ae 	bl	8011904 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80195a8:	697b      	ldr	r3, [r7, #20]
 80195aa:	7a5b      	ldrb	r3, [r3, #9]
 80195ac:	2b11      	cmp	r3, #17
 80195ae:	d006      	beq.n	80195be <ip4_input+0x1ca>
 80195b0:	2b11      	cmp	r3, #17
 80195b2:	dc13      	bgt.n	80195dc <ip4_input+0x1e8>
 80195b4:	2b01      	cmp	r3, #1
 80195b6:	d00c      	beq.n	80195d2 <ip4_input+0x1de>
 80195b8:	2b06      	cmp	r3, #6
 80195ba:	d005      	beq.n	80195c8 <ip4_input+0x1d4>
 80195bc:	e00e      	b.n	80195dc <ip4_input+0x1e8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80195be:	6839      	ldr	r1, [r7, #0]
 80195c0:	6878      	ldr	r0, [r7, #4]
 80195c2:	f7fe f941 	bl	8017848 <udp_input>
        break;
 80195c6:	e029      	b.n	801961c <ip4_input+0x228>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80195c8:	6839      	ldr	r1, [r7, #0]
 80195ca:	6878      	ldr	r0, [r7, #4]
 80195cc:	f7fa f956 	bl	801387c <tcp_input>
        break;
 80195d0:	e024      	b.n	801961c <ip4_input+0x228>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80195d2:	6839      	ldr	r1, [r7, #0]
 80195d4:	6878      	ldr	r0, [r7, #4]
 80195d6:	f7ff fcbf 	bl	8018f58 <icmp_input>
        break;
 80195da:	e01f      	b.n	801961c <ip4_input+0x228>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 80195dc:	7afb      	ldrb	r3, [r7, #11]
 80195de:	2b02      	cmp	r3, #2
 80195e0:	d018      	beq.n	8019614 <ip4_input+0x220>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80195e2:	4b1a      	ldr	r3, [pc, #104]	@ (801964c <ip4_input+0x258>)
 80195e4:	695b      	ldr	r3, [r3, #20]
 80195e6:	6939      	ldr	r1, [r7, #16]
 80195e8:	4618      	mov	r0, r3
 80195ea:	f000 f90b 	bl	8019804 <ip4_addr_isbroadcast_u32>
 80195ee:	4603      	mov	r3, r0
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d10f      	bne.n	8019614 <ip4_input+0x220>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80195f4:	4b15      	ldr	r3, [pc, #84]	@ (801964c <ip4_input+0x258>)
 80195f6:	695b      	ldr	r3, [r3, #20]
 80195f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80195fc:	2be0      	cmp	r3, #224	@ 0xe0
 80195fe:	d009      	beq.n	8019614 <ip4_input+0x220>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019600:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019604:	4619      	mov	r1, r3
 8019606:	6878      	ldr	r0, [r7, #4]
 8019608:	f7f8 f9ef 	bl	80119ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801960c:	2102      	movs	r1, #2
 801960e:	6878      	ldr	r0, [r7, #4]
 8019610:	f7ff fdc2 	bl	8019198 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019614:	6878      	ldr	r0, [r7, #4]
 8019616:	f7f8 f9fb 	bl	8011a10 <pbuf_free>
        break;
 801961a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801961c:	4b0b      	ldr	r3, [pc, #44]	@ (801964c <ip4_input+0x258>)
 801961e:	2200      	movs	r2, #0
 8019620:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019622:	4b0a      	ldr	r3, [pc, #40]	@ (801964c <ip4_input+0x258>)
 8019624:	2200      	movs	r2, #0
 8019626:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019628:	4b08      	ldr	r3, [pc, #32]	@ (801964c <ip4_input+0x258>)
 801962a:	2200      	movs	r2, #0
 801962c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801962e:	4b07      	ldr	r3, [pc, #28]	@ (801964c <ip4_input+0x258>)
 8019630:	2200      	movs	r2, #0
 8019632:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019634:	4b05      	ldr	r3, [pc, #20]	@ (801964c <ip4_input+0x258>)
 8019636:	2200      	movs	r2, #0
 8019638:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801963a:	4b04      	ldr	r3, [pc, #16]	@ (801964c <ip4_input+0x258>)
 801963c:	2200      	movs	r2, #0
 801963e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019640:	2300      	movs	r3, #0
}
 8019642:	4618      	mov	r0, r3
 8019644:	3718      	adds	r7, #24
 8019646:	46bd      	mov	sp, r7
 8019648:	bd80      	pop	{r7, pc}
 801964a:	bf00      	nop
 801964c:	2400e070 	.word	0x2400e070
 8019650:	24014b9c 	.word	0x24014b9c

08019654 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019654:	b580      	push	{r7, lr}
 8019656:	b08a      	sub	sp, #40	@ 0x28
 8019658:	af04      	add	r7, sp, #16
 801965a:	60f8      	str	r0, [r7, #12]
 801965c:	60b9      	str	r1, [r7, #8]
 801965e:	607a      	str	r2, [r7, #4]
 8019660:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019662:	68bb      	ldr	r3, [r7, #8]
 8019664:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d009      	beq.n	8019680 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801966c:	68bb      	ldr	r3, [r7, #8]
 801966e:	2b00      	cmp	r3, #0
 8019670:	d003      	beq.n	801967a <ip4_output_if+0x26>
 8019672:	68bb      	ldr	r3, [r7, #8]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	2b00      	cmp	r3, #0
 8019678:	d102      	bne.n	8019680 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801967a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801967c:	3304      	adds	r3, #4
 801967e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019680:	78fa      	ldrb	r2, [r7, #3]
 8019682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019684:	9302      	str	r3, [sp, #8]
 8019686:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801968a:	9301      	str	r3, [sp, #4]
 801968c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019690:	9300      	str	r3, [sp, #0]
 8019692:	4613      	mov	r3, r2
 8019694:	687a      	ldr	r2, [r7, #4]
 8019696:	6979      	ldr	r1, [r7, #20]
 8019698:	68f8      	ldr	r0, [r7, #12]
 801969a:	f000 f805 	bl	80196a8 <ip4_output_if_src>
 801969e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80196a0:	4618      	mov	r0, r3
 80196a2:	3718      	adds	r7, #24
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}

080196a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b088      	sub	sp, #32
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	60f8      	str	r0, [r7, #12]
 80196b0:	60b9      	str	r1, [r7, #8]
 80196b2:	607a      	str	r2, [r7, #4]
 80196b4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	7b9b      	ldrb	r3, [r3, #14]
 80196ba:	2b01      	cmp	r3, #1
 80196bc:	d006      	beq.n	80196cc <ip4_output_if_src+0x24>
 80196be:	4b4b      	ldr	r3, [pc, #300]	@ (80197ec <ip4_output_if_src+0x144>)
 80196c0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80196c4:	494a      	ldr	r1, [pc, #296]	@ (80197f0 <ip4_output_if_src+0x148>)
 80196c6:	484b      	ldr	r0, [pc, #300]	@ (80197f4 <ip4_output_if_src+0x14c>)
 80196c8:	f001 fa74 	bl	801abb4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d060      	beq.n	8019794 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80196d2:	2314      	movs	r3, #20
 80196d4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80196d6:	2114      	movs	r1, #20
 80196d8:	68f8      	ldr	r0, [r7, #12]
 80196da:	f7f8 f903 	bl	80118e4 <pbuf_add_header>
 80196de:	4603      	mov	r3, r0
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d002      	beq.n	80196ea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80196e4:	f06f 0301 	mvn.w	r3, #1
 80196e8:	e07c      	b.n	80197e4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	685b      	ldr	r3, [r3, #4]
 80196ee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	895b      	ldrh	r3, [r3, #10]
 80196f4:	2b13      	cmp	r3, #19
 80196f6:	d806      	bhi.n	8019706 <ip4_output_if_src+0x5e>
 80196f8:	4b3c      	ldr	r3, [pc, #240]	@ (80197ec <ip4_output_if_src+0x144>)
 80196fa:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80196fe:	493e      	ldr	r1, [pc, #248]	@ (80197f8 <ip4_output_if_src+0x150>)
 8019700:	483c      	ldr	r0, [pc, #240]	@ (80197f4 <ip4_output_if_src+0x14c>)
 8019702:	f001 fa57 	bl	801abb4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019706:	69fb      	ldr	r3, [r7, #28]
 8019708:	78fa      	ldrb	r2, [r7, #3]
 801970a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801970c:	69fb      	ldr	r3, [r7, #28]
 801970e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019712:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681a      	ldr	r2, [r3, #0]
 8019718:	69fb      	ldr	r3, [r7, #28]
 801971a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801971c:	8b7b      	ldrh	r3, [r7, #26]
 801971e:	089b      	lsrs	r3, r3, #2
 8019720:	b29b      	uxth	r3, r3
 8019722:	b2db      	uxtb	r3, r3
 8019724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019728:	b2da      	uxtb	r2, r3
 801972a:	69fb      	ldr	r3, [r7, #28]
 801972c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801972e:	69fb      	ldr	r3, [r7, #28]
 8019730:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019734:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	891b      	ldrh	r3, [r3, #8]
 801973a:	4618      	mov	r0, r3
 801973c:	f7f6 fcb6 	bl	80100ac <lwip_htons>
 8019740:	4603      	mov	r3, r0
 8019742:	461a      	mov	r2, r3
 8019744:	69fb      	ldr	r3, [r7, #28]
 8019746:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019748:	69fb      	ldr	r3, [r7, #28]
 801974a:	2200      	movs	r2, #0
 801974c:	719a      	strb	r2, [r3, #6]
 801974e:	2200      	movs	r2, #0
 8019750:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019752:	4b2a      	ldr	r3, [pc, #168]	@ (80197fc <ip4_output_if_src+0x154>)
 8019754:	881b      	ldrh	r3, [r3, #0]
 8019756:	4618      	mov	r0, r3
 8019758:	f7f6 fca8 	bl	80100ac <lwip_htons>
 801975c:	4603      	mov	r3, r0
 801975e:	461a      	mov	r2, r3
 8019760:	69fb      	ldr	r3, [r7, #28]
 8019762:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019764:	4b25      	ldr	r3, [pc, #148]	@ (80197fc <ip4_output_if_src+0x154>)
 8019766:	881b      	ldrh	r3, [r3, #0]
 8019768:	3301      	adds	r3, #1
 801976a:	b29a      	uxth	r2, r3
 801976c:	4b23      	ldr	r3, [pc, #140]	@ (80197fc <ip4_output_if_src+0x154>)
 801976e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019770:	68bb      	ldr	r3, [r7, #8]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d104      	bne.n	8019780 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019776:	4b22      	ldr	r3, [pc, #136]	@ (8019800 <ip4_output_if_src+0x158>)
 8019778:	681a      	ldr	r2, [r3, #0]
 801977a:	69fb      	ldr	r3, [r7, #28]
 801977c:	60da      	str	r2, [r3, #12]
 801977e:	e003      	b.n	8019788 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019780:	68bb      	ldr	r3, [r7, #8]
 8019782:	681a      	ldr	r2, [r3, #0]
 8019784:	69fb      	ldr	r3, [r7, #28]
 8019786:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019788:	69fb      	ldr	r3, [r7, #28]
 801978a:	2200      	movs	r2, #0
 801978c:	729a      	strb	r2, [r3, #10]
 801978e:	2200      	movs	r2, #0
 8019790:	72da      	strb	r2, [r3, #11]
 8019792:	e00f      	b.n	80197b4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	895b      	ldrh	r3, [r3, #10]
 8019798:	2b13      	cmp	r3, #19
 801979a:	d802      	bhi.n	80197a2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801979c:	f06f 0301 	mvn.w	r3, #1
 80197a0:	e020      	b.n	80197e4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	685b      	ldr	r3, [r3, #4]
 80197a6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80197a8:	69fb      	ldr	r3, [r7, #28]
 80197aa:	691b      	ldr	r3, [r3, #16]
 80197ac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80197ae:	f107 0314 	add.w	r3, r7, #20
 80197b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80197b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d00c      	beq.n	80197d6 <ip4_output_if_src+0x12e>
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	891a      	ldrh	r2, [r3, #8]
 80197c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80197c4:	429a      	cmp	r2, r3
 80197c6:	d906      	bls.n	80197d6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80197c8:	687a      	ldr	r2, [r7, #4]
 80197ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80197cc:	68f8      	ldr	r0, [r7, #12]
 80197ce:	f000 fde3 	bl	801a398 <ip4_frag>
 80197d2:	4603      	mov	r3, r0
 80197d4:	e006      	b.n	80197e4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80197d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197d8:	695b      	ldr	r3, [r3, #20]
 80197da:	687a      	ldr	r2, [r7, #4]
 80197dc:	68f9      	ldr	r1, [r7, #12]
 80197de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80197e0:	4798      	blx	r3
 80197e2:	4603      	mov	r3, r0
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	3720      	adds	r7, #32
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}
 80197ec:	0801e330 	.word	0x0801e330
 80197f0:	0801e364 	.word	0x0801e364
 80197f4:	0801e370 	.word	0x0801e370
 80197f8:	0801e398 	.word	0x0801e398
 80197fc:	24014cfe 	.word	0x24014cfe
 8019800:	0801e810 	.word	0x0801e810

08019804 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019804:	b480      	push	{r7}
 8019806:	b085      	sub	sp, #20
 8019808:	af00      	add	r7, sp, #0
 801980a:	6078      	str	r0, [r7, #4]
 801980c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019818:	d002      	beq.n	8019820 <ip4_addr_isbroadcast_u32+0x1c>
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d101      	bne.n	8019824 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019820:	2301      	movs	r3, #1
 8019822:	e02a      	b.n	801987a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019824:	683b      	ldr	r3, [r7, #0]
 8019826:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801982a:	f003 0302 	and.w	r3, r3, #2
 801982e:	2b00      	cmp	r3, #0
 8019830:	d101      	bne.n	8019836 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019832:	2300      	movs	r3, #0
 8019834:	e021      	b.n	801987a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	3304      	adds	r3, #4
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	687a      	ldr	r2, [r7, #4]
 801983e:	429a      	cmp	r2, r3
 8019840:	d101      	bne.n	8019846 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019842:	2300      	movs	r3, #0
 8019844:	e019      	b.n	801987a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019846:	68fa      	ldr	r2, [r7, #12]
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	3304      	adds	r3, #4
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	405a      	eors	r2, r3
 8019850:	683b      	ldr	r3, [r7, #0]
 8019852:	3308      	adds	r3, #8
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	4013      	ands	r3, r2
 8019858:	2b00      	cmp	r3, #0
 801985a:	d10d      	bne.n	8019878 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801985c:	683b      	ldr	r3, [r7, #0]
 801985e:	3308      	adds	r3, #8
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	43da      	mvns	r2, r3
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	3308      	adds	r3, #8
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019870:	429a      	cmp	r2, r3
 8019872:	d101      	bne.n	8019878 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019874:	2301      	movs	r3, #1
 8019876:	e000      	b.n	801987a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019878:	2300      	movs	r3, #0
  }
}
 801987a:	4618      	mov	r0, r3
 801987c:	3714      	adds	r7, #20
 801987e:	46bd      	mov	sp, r7
 8019880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019884:	4770      	bx	lr
	...

08019888 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8019888:	b580      	push	{r7, lr}
 801988a:	b082      	sub	sp, #8
 801988c:	af00      	add	r7, sp, #0
 801988e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8019890:	2210      	movs	r2, #16
 8019892:	4904      	ldr	r1, [pc, #16]	@ (80198a4 <ip4addr_ntoa+0x1c>)
 8019894:	6878      	ldr	r0, [r7, #4]
 8019896:	f000 f807 	bl	80198a8 <ip4addr_ntoa_r>
 801989a:	4603      	mov	r3, r0
}
 801989c:	4618      	mov	r0, r3
 801989e:	3708      	adds	r7, #8
 80198a0:	46bd      	mov	sp, r7
 80198a2:	bd80      	pop	{r7, pc}
 80198a4:	24014d00 	.word	0x24014d00

080198a8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80198a8:	b480      	push	{r7}
 80198aa:	b08d      	sub	sp, #52	@ 0x34
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	60f8      	str	r0, [r7, #12]
 80198b0:	60b9      	str	r1, [r7, #8]
 80198b2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80198b4:	2300      	movs	r3, #0
 80198b6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80198be:	68bb      	ldr	r3, [r7, #8]
 80198c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 80198c2:	f107 0318 	add.w	r3, r7, #24
 80198c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80198c8:	2300      	movs	r3, #0
 80198ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80198ce:	e058      	b.n	8019982 <ip4addr_ntoa_r+0xda>
    i = 0;
 80198d0:	2300      	movs	r3, #0
 80198d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 80198d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198d8:	781a      	ldrb	r2, [r3, #0]
 80198da:	4b32      	ldr	r3, [pc, #200]	@ (80199a4 <ip4addr_ntoa_r+0xfc>)
 80198dc:	fba3 1302 	umull	r1, r3, r3, r2
 80198e0:	08d9      	lsrs	r1, r3, #3
 80198e2:	460b      	mov	r3, r1
 80198e4:	009b      	lsls	r3, r3, #2
 80198e6:	440b      	add	r3, r1
 80198e8:	005b      	lsls	r3, r3, #1
 80198ea:	1ad3      	subs	r3, r2, r3
 80198ec:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80198ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198f0:	781b      	ldrb	r3, [r3, #0]
 80198f2:	4a2c      	ldr	r2, [pc, #176]	@ (80199a4 <ip4addr_ntoa_r+0xfc>)
 80198f4:	fba2 2303 	umull	r2, r3, r2, r3
 80198f8:	08db      	lsrs	r3, r3, #3
 80198fa:	b2da      	uxtb	r2, r3
 80198fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198fe:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8019900:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019904:	1c5a      	adds	r2, r3, #1
 8019906:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801990a:	4619      	mov	r1, r3
 801990c:	7ffb      	ldrb	r3, [r7, #31]
 801990e:	3330      	adds	r3, #48	@ 0x30
 8019910:	b2da      	uxtb	r2, r3
 8019912:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8019916:	443b      	add	r3, r7
 8019918:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801991e:	781b      	ldrb	r3, [r3, #0]
 8019920:	2b00      	cmp	r3, #0
 8019922:	d1d8      	bne.n	80198d6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8019924:	e011      	b.n	801994a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8019926:	6a3b      	ldr	r3, [r7, #32]
 8019928:	1c5a      	adds	r2, r3, #1
 801992a:	623a      	str	r2, [r7, #32]
 801992c:	687a      	ldr	r2, [r7, #4]
 801992e:	429a      	cmp	r2, r3
 8019930:	dc01      	bgt.n	8019936 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8019932:	2300      	movs	r3, #0
 8019934:	e030      	b.n	8019998 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8019936:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801993a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801993c:	1c59      	adds	r1, r3, #1
 801993e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8019940:	3230      	adds	r2, #48	@ 0x30
 8019942:	443a      	add	r2, r7
 8019944:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8019948:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801994a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801994e:	1e5a      	subs	r2, r3, #1
 8019950:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8019954:	2b00      	cmp	r3, #0
 8019956:	d1e6      	bne.n	8019926 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8019958:	6a3b      	ldr	r3, [r7, #32]
 801995a:	1c5a      	adds	r2, r3, #1
 801995c:	623a      	str	r2, [r7, #32]
 801995e:	687a      	ldr	r2, [r7, #4]
 8019960:	429a      	cmp	r2, r3
 8019962:	dc01      	bgt.n	8019968 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8019964:	2300      	movs	r3, #0
 8019966:	e017      	b.n	8019998 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8019968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801996a:	1c5a      	adds	r2, r3, #1
 801996c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801996e:	222e      	movs	r2, #46	@ 0x2e
 8019970:	701a      	strb	r2, [r3, #0]
    ap++;
 8019972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019974:	3301      	adds	r3, #1
 8019976:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8019978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801997c:	3301      	adds	r3, #1
 801997e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019986:	2b03      	cmp	r3, #3
 8019988:	d9a2      	bls.n	80198d0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801998a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801998c:	3b01      	subs	r3, #1
 801998e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019992:	2200      	movs	r2, #0
 8019994:	701a      	strb	r2, [r3, #0]
  return buf;
 8019996:	68bb      	ldr	r3, [r7, #8]
}
 8019998:	4618      	mov	r0, r3
 801999a:	3734      	adds	r7, #52	@ 0x34
 801999c:	46bd      	mov	sp, r7
 801999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a2:	4770      	bx	lr
 80199a4:	cccccccd 	.word	0xcccccccd

080199a8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b084      	sub	sp, #16
 80199ac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80199ae:	2300      	movs	r3, #0
 80199b0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80199b2:	4b12      	ldr	r3, [pc, #72]	@ (80199fc <ip_reass_tmr+0x54>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80199b8:	e018      	b.n	80199ec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	7fdb      	ldrb	r3, [r3, #31]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d00b      	beq.n	80199da <ip_reass_tmr+0x32>
      r->timer--;
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	7fdb      	ldrb	r3, [r3, #31]
 80199c6:	3b01      	subs	r3, #1
 80199c8:	b2da      	uxtb	r2, r3
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	60fb      	str	r3, [r7, #12]
 80199d8:	e008      	b.n	80199ec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80199e4:	68b9      	ldr	r1, [r7, #8]
 80199e6:	6878      	ldr	r0, [r7, #4]
 80199e8:	f000 f80a 	bl	8019a00 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d1e3      	bne.n	80199ba <ip_reass_tmr+0x12>
    }
  }
}
 80199f2:	bf00      	nop
 80199f4:	bf00      	nop
 80199f6:	3710      	adds	r7, #16
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}
 80199fc:	24014d10 	.word	0x24014d10

08019a00 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b088      	sub	sp, #32
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
 8019a08:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019a0e:	683a      	ldr	r2, [r7, #0]
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	429a      	cmp	r2, r3
 8019a14:	d105      	bne.n	8019a22 <ip_reass_free_complete_datagram+0x22>
 8019a16:	4b45      	ldr	r3, [pc, #276]	@ (8019b2c <ip_reass_free_complete_datagram+0x12c>)
 8019a18:	22ab      	movs	r2, #171	@ 0xab
 8019a1a:	4945      	ldr	r1, [pc, #276]	@ (8019b30 <ip_reass_free_complete_datagram+0x130>)
 8019a1c:	4845      	ldr	r0, [pc, #276]	@ (8019b34 <ip_reass_free_complete_datagram+0x134>)
 8019a1e:	f001 f8c9 	bl	801abb4 <iprintf>
  if (prev != NULL) {
 8019a22:	683b      	ldr	r3, [r7, #0]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d00a      	beq.n	8019a3e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019a28:	683b      	ldr	r3, [r7, #0]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	687a      	ldr	r2, [r7, #4]
 8019a2e:	429a      	cmp	r2, r3
 8019a30:	d005      	beq.n	8019a3e <ip_reass_free_complete_datagram+0x3e>
 8019a32:	4b3e      	ldr	r3, [pc, #248]	@ (8019b2c <ip_reass_free_complete_datagram+0x12c>)
 8019a34:	22ad      	movs	r2, #173	@ 0xad
 8019a36:	4940      	ldr	r1, [pc, #256]	@ (8019b38 <ip_reass_free_complete_datagram+0x138>)
 8019a38:	483e      	ldr	r0, [pc, #248]	@ (8019b34 <ip_reass_free_complete_datagram+0x134>)
 8019a3a:	f001 f8bb 	bl	801abb4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	685b      	ldr	r3, [r3, #4]
 8019a42:	685b      	ldr	r3, [r3, #4]
 8019a44:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019a46:	697b      	ldr	r3, [r7, #20]
 8019a48:	889b      	ldrh	r3, [r3, #4]
 8019a4a:	b29b      	uxth	r3, r3
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d12a      	bne.n	8019aa6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	685b      	ldr	r3, [r3, #4]
 8019a54:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019a56:	697b      	ldr	r3, [r7, #20]
 8019a58:	681a      	ldr	r2, [r3, #0]
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019a5e:	69bb      	ldr	r3, [r7, #24]
 8019a60:	6858      	ldr	r0, [r3, #4]
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	3308      	adds	r3, #8
 8019a66:	2214      	movs	r2, #20
 8019a68:	4619      	mov	r1, r3
 8019a6a:	f001 f9dc 	bl	801ae26 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019a6e:	2101      	movs	r1, #1
 8019a70:	69b8      	ldr	r0, [r7, #24]
 8019a72:	f7ff fba1 	bl	80191b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019a76:	69b8      	ldr	r0, [r7, #24]
 8019a78:	f7f8 f858 	bl	8011b2c <pbuf_clen>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019a80:	8bfa      	ldrh	r2, [r7, #30]
 8019a82:	8a7b      	ldrh	r3, [r7, #18]
 8019a84:	4413      	add	r3, r2
 8019a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019a8a:	db05      	blt.n	8019a98 <ip_reass_free_complete_datagram+0x98>
 8019a8c:	4b27      	ldr	r3, [pc, #156]	@ (8019b2c <ip_reass_free_complete_datagram+0x12c>)
 8019a8e:	22bc      	movs	r2, #188	@ 0xbc
 8019a90:	492a      	ldr	r1, [pc, #168]	@ (8019b3c <ip_reass_free_complete_datagram+0x13c>)
 8019a92:	4828      	ldr	r0, [pc, #160]	@ (8019b34 <ip_reass_free_complete_datagram+0x134>)
 8019a94:	f001 f88e 	bl	801abb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019a98:	8bfa      	ldrh	r2, [r7, #30]
 8019a9a:	8a7b      	ldrh	r3, [r7, #18]
 8019a9c:	4413      	add	r3, r2
 8019a9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019aa0:	69b8      	ldr	r0, [r7, #24]
 8019aa2:	f7f7 ffb5 	bl	8011a10 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	685b      	ldr	r3, [r3, #4]
 8019aaa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019aac:	e01f      	b.n	8019aee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019aae:	69bb      	ldr	r3, [r7, #24]
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019ab4:	69bb      	ldr	r3, [r7, #24]
 8019ab6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019ab8:	697b      	ldr	r3, [r7, #20]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019abe:	68f8      	ldr	r0, [r7, #12]
 8019ac0:	f7f8 f834 	bl	8011b2c <pbuf_clen>
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019ac8:	8bfa      	ldrh	r2, [r7, #30]
 8019aca:	8a7b      	ldrh	r3, [r7, #18]
 8019acc:	4413      	add	r3, r2
 8019ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019ad2:	db05      	blt.n	8019ae0 <ip_reass_free_complete_datagram+0xe0>
 8019ad4:	4b15      	ldr	r3, [pc, #84]	@ (8019b2c <ip_reass_free_complete_datagram+0x12c>)
 8019ad6:	22cc      	movs	r2, #204	@ 0xcc
 8019ad8:	4918      	ldr	r1, [pc, #96]	@ (8019b3c <ip_reass_free_complete_datagram+0x13c>)
 8019ada:	4816      	ldr	r0, [pc, #88]	@ (8019b34 <ip_reass_free_complete_datagram+0x134>)
 8019adc:	f001 f86a 	bl	801abb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019ae0:	8bfa      	ldrh	r2, [r7, #30]
 8019ae2:	8a7b      	ldrh	r3, [r7, #18]
 8019ae4:	4413      	add	r3, r2
 8019ae6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019ae8:	68f8      	ldr	r0, [r7, #12]
 8019aea:	f7f7 ff91 	bl	8011a10 <pbuf_free>
  while (p != NULL) {
 8019aee:	69bb      	ldr	r3, [r7, #24]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d1dc      	bne.n	8019aae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019af4:	6839      	ldr	r1, [r7, #0]
 8019af6:	6878      	ldr	r0, [r7, #4]
 8019af8:	f000 f8c2 	bl	8019c80 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019afc:	4b10      	ldr	r3, [pc, #64]	@ (8019b40 <ip_reass_free_complete_datagram+0x140>)
 8019afe:	881b      	ldrh	r3, [r3, #0]
 8019b00:	8bfa      	ldrh	r2, [r7, #30]
 8019b02:	429a      	cmp	r2, r3
 8019b04:	d905      	bls.n	8019b12 <ip_reass_free_complete_datagram+0x112>
 8019b06:	4b09      	ldr	r3, [pc, #36]	@ (8019b2c <ip_reass_free_complete_datagram+0x12c>)
 8019b08:	22d2      	movs	r2, #210	@ 0xd2
 8019b0a:	490e      	ldr	r1, [pc, #56]	@ (8019b44 <ip_reass_free_complete_datagram+0x144>)
 8019b0c:	4809      	ldr	r0, [pc, #36]	@ (8019b34 <ip_reass_free_complete_datagram+0x134>)
 8019b0e:	f001 f851 	bl	801abb4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019b12:	4b0b      	ldr	r3, [pc, #44]	@ (8019b40 <ip_reass_free_complete_datagram+0x140>)
 8019b14:	881a      	ldrh	r2, [r3, #0]
 8019b16:	8bfb      	ldrh	r3, [r7, #30]
 8019b18:	1ad3      	subs	r3, r2, r3
 8019b1a:	b29a      	uxth	r2, r3
 8019b1c:	4b08      	ldr	r3, [pc, #32]	@ (8019b40 <ip_reass_free_complete_datagram+0x140>)
 8019b1e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019b20:	8bfb      	ldrh	r3, [r7, #30]
}
 8019b22:	4618      	mov	r0, r3
 8019b24:	3720      	adds	r7, #32
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd80      	pop	{r7, pc}
 8019b2a:	bf00      	nop
 8019b2c:	0801e3c8 	.word	0x0801e3c8
 8019b30:	0801e404 	.word	0x0801e404
 8019b34:	0801e410 	.word	0x0801e410
 8019b38:	0801e438 	.word	0x0801e438
 8019b3c:	0801e44c 	.word	0x0801e44c
 8019b40:	24014d14 	.word	0x24014d14
 8019b44:	0801e46c 	.word	0x0801e46c

08019b48 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b08a      	sub	sp, #40	@ 0x28
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
 8019b50:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019b52:	2300      	movs	r3, #0
 8019b54:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019b56:	2300      	movs	r3, #0
 8019b58:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019b5e:	2300      	movs	r3, #0
 8019b60:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019b62:	2300      	movs	r3, #0
 8019b64:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019b66:	4b28      	ldr	r3, [pc, #160]	@ (8019c08 <ip_reass_remove_oldest_datagram+0xc0>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019b6c:	e030      	b.n	8019bd0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b70:	695a      	ldr	r2, [r3, #20]
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	68db      	ldr	r3, [r3, #12]
 8019b76:	429a      	cmp	r2, r3
 8019b78:	d10c      	bne.n	8019b94 <ip_reass_remove_oldest_datagram+0x4c>
 8019b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b7c:	699a      	ldr	r2, [r3, #24]
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	691b      	ldr	r3, [r3, #16]
 8019b82:	429a      	cmp	r2, r3
 8019b84:	d106      	bne.n	8019b94 <ip_reass_remove_oldest_datagram+0x4c>
 8019b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b88:	899a      	ldrh	r2, [r3, #12]
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	889b      	ldrh	r3, [r3, #4]
 8019b8e:	b29b      	uxth	r3, r3
 8019b90:	429a      	cmp	r2, r3
 8019b92:	d014      	beq.n	8019bbe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019b94:	693b      	ldr	r3, [r7, #16]
 8019b96:	3301      	adds	r3, #1
 8019b98:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019b9a:	6a3b      	ldr	r3, [r7, #32]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d104      	bne.n	8019baa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ba2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019ba4:	69fb      	ldr	r3, [r7, #28]
 8019ba6:	61bb      	str	r3, [r7, #24]
 8019ba8:	e009      	b.n	8019bbe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bac:	7fda      	ldrb	r2, [r3, #31]
 8019bae:	6a3b      	ldr	r3, [r7, #32]
 8019bb0:	7fdb      	ldrb	r3, [r3, #31]
 8019bb2:	429a      	cmp	r2, r3
 8019bb4:	d803      	bhi.n	8019bbe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bb8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019bba:	69fb      	ldr	r3, [r7, #28]
 8019bbc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d001      	beq.n	8019bca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bc8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d1cb      	bne.n	8019b6e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019bd6:	6a3b      	ldr	r3, [r7, #32]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d008      	beq.n	8019bee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019bdc:	69b9      	ldr	r1, [r7, #24]
 8019bde:	6a38      	ldr	r0, [r7, #32]
 8019be0:	f7ff ff0e 	bl	8019a00 <ip_reass_free_complete_datagram>
 8019be4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019be6:	697a      	ldr	r2, [r7, #20]
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	4413      	add	r3, r2
 8019bec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019bee:	697a      	ldr	r2, [r7, #20]
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	429a      	cmp	r2, r3
 8019bf4:	da02      	bge.n	8019bfc <ip_reass_remove_oldest_datagram+0xb4>
 8019bf6:	693b      	ldr	r3, [r7, #16]
 8019bf8:	2b01      	cmp	r3, #1
 8019bfa:	dcac      	bgt.n	8019b56 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019bfc:	697b      	ldr	r3, [r7, #20]
}
 8019bfe:	4618      	mov	r0, r3
 8019c00:	3728      	adds	r7, #40	@ 0x28
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}
 8019c06:	bf00      	nop
 8019c08:	24014d10 	.word	0x24014d10

08019c0c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b084      	sub	sp, #16
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
 8019c14:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c16:	2005      	movs	r0, #5
 8019c18:	f7f6 ffd8 	bl	8010bcc <memp_malloc>
 8019c1c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d110      	bne.n	8019c46 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019c24:	6839      	ldr	r1, [r7, #0]
 8019c26:	6878      	ldr	r0, [r7, #4]
 8019c28:	f7ff ff8e 	bl	8019b48 <ip_reass_remove_oldest_datagram>
 8019c2c:	4602      	mov	r2, r0
 8019c2e:	683b      	ldr	r3, [r7, #0]
 8019c30:	4293      	cmp	r3, r2
 8019c32:	dc03      	bgt.n	8019c3c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c34:	2005      	movs	r0, #5
 8019c36:	f7f6 ffc9 	bl	8010bcc <memp_malloc>
 8019c3a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d101      	bne.n	8019c46 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019c42:	2300      	movs	r3, #0
 8019c44:	e016      	b.n	8019c74 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019c46:	2220      	movs	r2, #32
 8019c48:	2100      	movs	r1, #0
 8019c4a:	68f8      	ldr	r0, [r7, #12]
 8019c4c:	f001 f817 	bl	801ac7e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	220f      	movs	r2, #15
 8019c54:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019c56:	4b09      	ldr	r3, [pc, #36]	@ (8019c7c <ip_reass_enqueue_new_datagram+0x70>)
 8019c58:	681a      	ldr	r2, [r3, #0]
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019c5e:	4a07      	ldr	r2, [pc, #28]	@ (8019c7c <ip_reass_enqueue_new_datagram+0x70>)
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	3308      	adds	r3, #8
 8019c68:	2214      	movs	r2, #20
 8019c6a:	6879      	ldr	r1, [r7, #4]
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	f001 f8da 	bl	801ae26 <memcpy>
  return ipr;
 8019c72:	68fb      	ldr	r3, [r7, #12]
}
 8019c74:	4618      	mov	r0, r3
 8019c76:	3710      	adds	r7, #16
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bd80      	pop	{r7, pc}
 8019c7c:	24014d10 	.word	0x24014d10

08019c80 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019c80:	b580      	push	{r7, lr}
 8019c82:	b082      	sub	sp, #8
 8019c84:	af00      	add	r7, sp, #0
 8019c86:	6078      	str	r0, [r7, #4]
 8019c88:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019c8a:	4b10      	ldr	r3, [pc, #64]	@ (8019ccc <ip_reass_dequeue_datagram+0x4c>)
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	687a      	ldr	r2, [r7, #4]
 8019c90:	429a      	cmp	r2, r3
 8019c92:	d104      	bne.n	8019c9e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	4a0c      	ldr	r2, [pc, #48]	@ (8019ccc <ip_reass_dequeue_datagram+0x4c>)
 8019c9a:	6013      	str	r3, [r2, #0]
 8019c9c:	e00d      	b.n	8019cba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d106      	bne.n	8019cb2 <ip_reass_dequeue_datagram+0x32>
 8019ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8019cd0 <ip_reass_dequeue_datagram+0x50>)
 8019ca6:	f240 1245 	movw	r2, #325	@ 0x145
 8019caa:	490a      	ldr	r1, [pc, #40]	@ (8019cd4 <ip_reass_dequeue_datagram+0x54>)
 8019cac:	480a      	ldr	r0, [pc, #40]	@ (8019cd8 <ip_reass_dequeue_datagram+0x58>)
 8019cae:	f000 ff81 	bl	801abb4 <iprintf>
    prev->next = ipr->next;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681a      	ldr	r2, [r3, #0]
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019cba:	6879      	ldr	r1, [r7, #4]
 8019cbc:	2005      	movs	r0, #5
 8019cbe:	f7f6 fffb 	bl	8010cb8 <memp_free>
}
 8019cc2:	bf00      	nop
 8019cc4:	3708      	adds	r7, #8
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	bd80      	pop	{r7, pc}
 8019cca:	bf00      	nop
 8019ccc:	24014d10 	.word	0x24014d10
 8019cd0:	0801e3c8 	.word	0x0801e3c8
 8019cd4:	0801e490 	.word	0x0801e490
 8019cd8:	0801e410 	.word	0x0801e410

08019cdc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	b08c      	sub	sp, #48	@ 0x30
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	60f8      	str	r0, [r7, #12]
 8019ce4:	60b9      	str	r1, [r7, #8]
 8019ce6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019ce8:	2300      	movs	r3, #0
 8019cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019cec:	2301      	movs	r3, #1
 8019cee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019cf0:	68bb      	ldr	r3, [r7, #8]
 8019cf2:	685b      	ldr	r3, [r3, #4]
 8019cf4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019cf6:	69fb      	ldr	r3, [r7, #28]
 8019cf8:	885b      	ldrh	r3, [r3, #2]
 8019cfa:	b29b      	uxth	r3, r3
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	f7f6 f9d5 	bl	80100ac <lwip_htons>
 8019d02:	4603      	mov	r3, r0
 8019d04:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019d06:	69fb      	ldr	r3, [r7, #28]
 8019d08:	781b      	ldrb	r3, [r3, #0]
 8019d0a:	f003 030f 	and.w	r3, r3, #15
 8019d0e:	b2db      	uxtb	r3, r3
 8019d10:	009b      	lsls	r3, r3, #2
 8019d12:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019d14:	7e7b      	ldrb	r3, [r7, #25]
 8019d16:	b29b      	uxth	r3, r3
 8019d18:	8b7a      	ldrh	r2, [r7, #26]
 8019d1a:	429a      	cmp	r2, r3
 8019d1c:	d202      	bcs.n	8019d24 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d22:	e135      	b.n	8019f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019d24:	7e7b      	ldrb	r3, [r7, #25]
 8019d26:	b29b      	uxth	r3, r3
 8019d28:	8b7a      	ldrh	r2, [r7, #26]
 8019d2a:	1ad3      	subs	r3, r2, r3
 8019d2c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019d2e:	69fb      	ldr	r3, [r7, #28]
 8019d30:	88db      	ldrh	r3, [r3, #6]
 8019d32:	b29b      	uxth	r3, r3
 8019d34:	4618      	mov	r0, r3
 8019d36:	f7f6 f9b9 	bl	80100ac <lwip_htons>
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d40:	b29b      	uxth	r3, r3
 8019d42:	00db      	lsls	r3, r3, #3
 8019d44:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019d46:	68bb      	ldr	r3, [r7, #8]
 8019d48:	685b      	ldr	r3, [r3, #4]
 8019d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8019d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d4e:	2200      	movs	r2, #0
 8019d50:	701a      	strb	r2, [r3, #0]
 8019d52:	2200      	movs	r2, #0
 8019d54:	705a      	strb	r2, [r3, #1]
 8019d56:	2200      	movs	r2, #0
 8019d58:	709a      	strb	r2, [r3, #2]
 8019d5a:	2200      	movs	r2, #0
 8019d5c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d60:	8afa      	ldrh	r2, [r7, #22]
 8019d62:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019d64:	8afa      	ldrh	r2, [r7, #22]
 8019d66:	8b7b      	ldrh	r3, [r7, #26]
 8019d68:	4413      	add	r3, r2
 8019d6a:	b29a      	uxth	r2, r3
 8019d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d6e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d72:	88db      	ldrh	r3, [r3, #6]
 8019d74:	b29b      	uxth	r3, r3
 8019d76:	8afa      	ldrh	r2, [r7, #22]
 8019d78:	429a      	cmp	r2, r3
 8019d7a:	d902      	bls.n	8019d82 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d80:	e106      	b.n	8019f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	685b      	ldr	r3, [r3, #4]
 8019d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d88:	e068      	b.n	8019e5c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d8c:	685b      	ldr	r3, [r3, #4]
 8019d8e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d92:	889b      	ldrh	r3, [r3, #4]
 8019d94:	b29a      	uxth	r2, r3
 8019d96:	693b      	ldr	r3, [r7, #16]
 8019d98:	889b      	ldrh	r3, [r3, #4]
 8019d9a:	b29b      	uxth	r3, r3
 8019d9c:	429a      	cmp	r2, r3
 8019d9e:	d235      	bcs.n	8019e0c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019da4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d020      	beq.n	8019dee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019dae:	889b      	ldrh	r3, [r3, #4]
 8019db0:	b29a      	uxth	r2, r3
 8019db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019db4:	88db      	ldrh	r3, [r3, #6]
 8019db6:	b29b      	uxth	r3, r3
 8019db8:	429a      	cmp	r2, r3
 8019dba:	d307      	bcc.n	8019dcc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019dbe:	88db      	ldrh	r3, [r3, #6]
 8019dc0:	b29a      	uxth	r2, r3
 8019dc2:	693b      	ldr	r3, [r7, #16]
 8019dc4:	889b      	ldrh	r3, [r3, #4]
 8019dc6:	b29b      	uxth	r3, r3
 8019dc8:	429a      	cmp	r2, r3
 8019dca:	d902      	bls.n	8019dd2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8019dd0:	e0de      	b.n	8019f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dd4:	68ba      	ldr	r2, [r7, #8]
 8019dd6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dda:	88db      	ldrh	r3, [r3, #6]
 8019ddc:	b29a      	uxth	r2, r3
 8019dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019de0:	889b      	ldrh	r3, [r3, #4]
 8019de2:	b29b      	uxth	r3, r3
 8019de4:	429a      	cmp	r2, r3
 8019de6:	d03d      	beq.n	8019e64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019de8:	2300      	movs	r3, #0
 8019dea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019dec:	e03a      	b.n	8019e64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019df0:	88db      	ldrh	r3, [r3, #6]
 8019df2:	b29a      	uxth	r2, r3
 8019df4:	693b      	ldr	r3, [r7, #16]
 8019df6:	889b      	ldrh	r3, [r3, #4]
 8019df8:	b29b      	uxth	r3, r3
 8019dfa:	429a      	cmp	r2, r3
 8019dfc:	d902      	bls.n	8019e04 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8019e02:	e0c5      	b.n	8019f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	68ba      	ldr	r2, [r7, #8]
 8019e08:	605a      	str	r2, [r3, #4]
      break;
 8019e0a:	e02b      	b.n	8019e64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e0e:	889b      	ldrh	r3, [r3, #4]
 8019e10:	b29a      	uxth	r2, r3
 8019e12:	693b      	ldr	r3, [r7, #16]
 8019e14:	889b      	ldrh	r3, [r3, #4]
 8019e16:	b29b      	uxth	r3, r3
 8019e18:	429a      	cmp	r2, r3
 8019e1a:	d102      	bne.n	8019e22 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e20:	e0b6      	b.n	8019f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e24:	889b      	ldrh	r3, [r3, #4]
 8019e26:	b29a      	uxth	r2, r3
 8019e28:	693b      	ldr	r3, [r7, #16]
 8019e2a:	88db      	ldrh	r3, [r3, #6]
 8019e2c:	b29b      	uxth	r3, r3
 8019e2e:	429a      	cmp	r2, r3
 8019e30:	d202      	bcs.n	8019e38 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e32:	f04f 33ff 	mov.w	r3, #4294967295
 8019e36:	e0ab      	b.n	8019f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d009      	beq.n	8019e52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e40:	88db      	ldrh	r3, [r3, #6]
 8019e42:	b29a      	uxth	r2, r3
 8019e44:	693b      	ldr	r3, [r7, #16]
 8019e46:	889b      	ldrh	r3, [r3, #4]
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	429a      	cmp	r2, r3
 8019e4c:	d001      	beq.n	8019e52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e4e:	2300      	movs	r3, #0
 8019e50:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019e52:	693b      	ldr	r3, [r7, #16]
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8019e58:	693b      	ldr	r3, [r7, #16]
 8019e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8019e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d193      	bne.n	8019d8a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019e62:	e000      	b.n	8019e66 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019e64:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d12d      	bne.n	8019ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d01c      	beq.n	8019eac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e74:	88db      	ldrh	r3, [r3, #6]
 8019e76:	b29a      	uxth	r2, r3
 8019e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e7a:	889b      	ldrh	r3, [r3, #4]
 8019e7c:	b29b      	uxth	r3, r3
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	d906      	bls.n	8019e90 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019e82:	4b45      	ldr	r3, [pc, #276]	@ (8019f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e84:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8019e88:	4944      	ldr	r1, [pc, #272]	@ (8019f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019e8a:	4845      	ldr	r0, [pc, #276]	@ (8019fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e8c:	f000 fe92 	bl	801abb4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e92:	68ba      	ldr	r2, [r7, #8]
 8019e94:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e98:	88db      	ldrh	r3, [r3, #6]
 8019e9a:	b29a      	uxth	r2, r3
 8019e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e9e:	889b      	ldrh	r3, [r3, #4]
 8019ea0:	b29b      	uxth	r3, r3
 8019ea2:	429a      	cmp	r2, r3
 8019ea4:	d010      	beq.n	8019ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019ea6:	2300      	movs	r3, #0
 8019ea8:	623b      	str	r3, [r7, #32]
 8019eaa:	e00d      	b.n	8019ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	685b      	ldr	r3, [r3, #4]
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d006      	beq.n	8019ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019eb4:	4b38      	ldr	r3, [pc, #224]	@ (8019f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019eb6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8019eba:	493a      	ldr	r1, [pc, #232]	@ (8019fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019ebc:	4838      	ldr	r0, [pc, #224]	@ (8019fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019ebe:	f000 fe79 	bl	801abb4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	68ba      	ldr	r2, [r7, #8]
 8019ec6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d105      	bne.n	8019eda <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	7f9b      	ldrb	r3, [r3, #30]
 8019ed2:	f003 0301 	and.w	r3, r3, #1
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d059      	beq.n	8019f8e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019eda:	6a3b      	ldr	r3, [r7, #32]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d04f      	beq.n	8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	685b      	ldr	r3, [r3, #4]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d006      	beq.n	8019ef6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	685b      	ldr	r3, [r3, #4]
 8019eee:	889b      	ldrh	r3, [r3, #4]
 8019ef0:	b29b      	uxth	r3, r3
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d002      	beq.n	8019efc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	623b      	str	r3, [r7, #32]
 8019efa:	e041      	b.n	8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019efe:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8019f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8019f06:	e012      	b.n	8019f2e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f0a:	685b      	ldr	r3, [r3, #4]
 8019f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8019f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f10:	88db      	ldrh	r3, [r3, #6]
 8019f12:	b29a      	uxth	r2, r3
 8019f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f16:	889b      	ldrh	r3, [r3, #4]
 8019f18:	b29b      	uxth	r3, r3
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d002      	beq.n	8019f24 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019f1e:	2300      	movs	r3, #0
 8019f20:	623b      	str	r3, [r7, #32]
            break;
 8019f22:	e007      	b.n	8019f34 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f26:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8019f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8019f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d1e9      	bne.n	8019f08 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019f34:	6a3b      	ldr	r3, [r7, #32]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d022      	beq.n	8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	685b      	ldr	r3, [r3, #4]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d106      	bne.n	8019f50 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019f42:	4b15      	ldr	r3, [pc, #84]	@ (8019f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f44:	f240 12df 	movw	r2, #479	@ 0x1df
 8019f48:	4917      	ldr	r1, [pc, #92]	@ (8019fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019f4a:	4815      	ldr	r0, [pc, #84]	@ (8019fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f4c:	f000 fe32 	bl	801abb4 <iprintf>
          LWIP_ASSERT("sanity check",
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	685b      	ldr	r3, [r3, #4]
 8019f56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019f58:	429a      	cmp	r2, r3
 8019f5a:	d106      	bne.n	8019f6a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8019f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f5e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8019f62:	4911      	ldr	r1, [pc, #68]	@ (8019fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019f64:	480e      	ldr	r0, [pc, #56]	@ (8019fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f66:	f000 fe25 	bl	801abb4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d006      	beq.n	8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019f72:	4b09      	ldr	r3, [pc, #36]	@ (8019f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f74:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8019f78:	490c      	ldr	r1, [pc, #48]	@ (8019fac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019f7a:	4809      	ldr	r0, [pc, #36]	@ (8019fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f7c:	f000 fe1a 	bl	801abb4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019f80:	6a3b      	ldr	r3, [r7, #32]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	bf14      	ite	ne
 8019f86:	2301      	movne	r3, #1
 8019f88:	2300      	moveq	r3, #0
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	e000      	b.n	8019f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019f8e:	2300      	movs	r3, #0
}
 8019f90:	4618      	mov	r0, r3
 8019f92:	3730      	adds	r7, #48	@ 0x30
 8019f94:	46bd      	mov	sp, r7
 8019f96:	bd80      	pop	{r7, pc}
 8019f98:	0801e3c8 	.word	0x0801e3c8
 8019f9c:	0801e4ac 	.word	0x0801e4ac
 8019fa0:	0801e410 	.word	0x0801e410
 8019fa4:	0801e4cc 	.word	0x0801e4cc
 8019fa8:	0801e504 	.word	0x0801e504
 8019fac:	0801e514 	.word	0x0801e514

08019fb0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b08e      	sub	sp, #56	@ 0x38
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	685b      	ldr	r3, [r3, #4]
 8019fbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	f003 030f 	and.w	r3, r3, #15
 8019fc6:	b2db      	uxtb	r3, r3
 8019fc8:	009b      	lsls	r3, r3, #2
 8019fca:	b2db      	uxtb	r3, r3
 8019fcc:	2b14      	cmp	r3, #20
 8019fce:	f040 8171 	bne.w	801a2b4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fd4:	88db      	ldrh	r3, [r3, #6]
 8019fd6:	b29b      	uxth	r3, r3
 8019fd8:	4618      	mov	r0, r3
 8019fda:	f7f6 f867 	bl	80100ac <lwip_htons>
 8019fde:	4603      	mov	r3, r0
 8019fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019fe4:	b29b      	uxth	r3, r3
 8019fe6:	00db      	lsls	r3, r3, #3
 8019fe8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fec:	885b      	ldrh	r3, [r3, #2]
 8019fee:	b29b      	uxth	r3, r3
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f7f6 f85b 	bl	80100ac <lwip_htons>
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ffc:	781b      	ldrb	r3, [r3, #0]
 8019ffe:	f003 030f 	and.w	r3, r3, #15
 801a002:	b2db      	uxtb	r3, r3
 801a004:	009b      	lsls	r3, r3, #2
 801a006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801a00a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a00e:	b29b      	uxth	r3, r3
 801a010:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a012:	429a      	cmp	r2, r3
 801a014:	f0c0 8150 	bcc.w	801a2b8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a018:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a01c:	b29b      	uxth	r3, r3
 801a01e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a020:	1ad3      	subs	r3, r2, r3
 801a022:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a024:	6878      	ldr	r0, [r7, #4]
 801a026:	f7f7 fd81 	bl	8011b2c <pbuf_clen>
 801a02a:	4603      	mov	r3, r0
 801a02c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a02e:	4b8c      	ldr	r3, [pc, #560]	@ (801a260 <ip4_reass+0x2b0>)
 801a030:	881b      	ldrh	r3, [r3, #0]
 801a032:	461a      	mov	r2, r3
 801a034:	8c3b      	ldrh	r3, [r7, #32]
 801a036:	4413      	add	r3, r2
 801a038:	2b0a      	cmp	r3, #10
 801a03a:	dd10      	ble.n	801a05e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a03c:	8c3b      	ldrh	r3, [r7, #32]
 801a03e:	4619      	mov	r1, r3
 801a040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a042:	f7ff fd81 	bl	8019b48 <ip_reass_remove_oldest_datagram>
 801a046:	4603      	mov	r3, r0
 801a048:	2b00      	cmp	r3, #0
 801a04a:	f000 8137 	beq.w	801a2bc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a04e:	4b84      	ldr	r3, [pc, #528]	@ (801a260 <ip4_reass+0x2b0>)
 801a050:	881b      	ldrh	r3, [r3, #0]
 801a052:	461a      	mov	r2, r3
 801a054:	8c3b      	ldrh	r3, [r7, #32]
 801a056:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a058:	2b0a      	cmp	r3, #10
 801a05a:	f300 812f 	bgt.w	801a2bc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a05e:	4b81      	ldr	r3, [pc, #516]	@ (801a264 <ip4_reass+0x2b4>)
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	633b      	str	r3, [r7, #48]	@ 0x30
 801a064:	e015      	b.n	801a092 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a068:	695a      	ldr	r2, [r3, #20]
 801a06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a06c:	68db      	ldr	r3, [r3, #12]
 801a06e:	429a      	cmp	r2, r3
 801a070:	d10c      	bne.n	801a08c <ip4_reass+0xdc>
 801a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a074:	699a      	ldr	r2, [r3, #24]
 801a076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a078:	691b      	ldr	r3, [r3, #16]
 801a07a:	429a      	cmp	r2, r3
 801a07c:	d106      	bne.n	801a08c <ip4_reass+0xdc>
 801a07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a080:	899a      	ldrh	r2, [r3, #12]
 801a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a084:	889b      	ldrh	r3, [r3, #4]
 801a086:	b29b      	uxth	r3, r3
 801a088:	429a      	cmp	r2, r3
 801a08a:	d006      	beq.n	801a09a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	633b      	str	r3, [r7, #48]	@ 0x30
 801a092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a094:	2b00      	cmp	r3, #0
 801a096:	d1e6      	bne.n	801a066 <ip4_reass+0xb6>
 801a098:	e000      	b.n	801a09c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a09a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d109      	bne.n	801a0b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a0a2:	8c3b      	ldrh	r3, [r7, #32]
 801a0a4:	4619      	mov	r1, r3
 801a0a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a0a8:	f7ff fdb0 	bl	8019c0c <ip_reass_enqueue_new_datagram>
 801a0ac:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d11c      	bne.n	801a0ee <ip4_reass+0x13e>
      goto nullreturn;
 801a0b4:	e105      	b.n	801a2c2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0b8:	88db      	ldrh	r3, [r3, #6]
 801a0ba:	b29b      	uxth	r3, r3
 801a0bc:	4618      	mov	r0, r3
 801a0be:	f7f5 fff5 	bl	80100ac <lwip_htons>
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d110      	bne.n	801a0ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0ce:	89db      	ldrh	r3, [r3, #14]
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	f7f5 ffeb 	bl	80100ac <lwip_htons>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d006      	beq.n	801a0ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0e2:	3308      	adds	r3, #8
 801a0e4:	2214      	movs	r2, #20
 801a0e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a0e8:	4618      	mov	r0, r3
 801a0ea:	f000 fe9c 	bl	801ae26 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0f0:	88db      	ldrh	r3, [r3, #6]
 801a0f2:	b29b      	uxth	r3, r3
 801a0f4:	f003 0320 	and.w	r3, r3, #32
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	bf0c      	ite	eq
 801a0fc:	2301      	moveq	r3, #1
 801a0fe:	2300      	movne	r3, #0
 801a100:	b2db      	uxtb	r3, r3
 801a102:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a104:	69fb      	ldr	r3, [r7, #28]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d00e      	beq.n	801a128 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a10a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a10c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a10e:	4413      	add	r3, r2
 801a110:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a112:	8b7a      	ldrh	r2, [r7, #26]
 801a114:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a116:	429a      	cmp	r2, r3
 801a118:	f0c0 80a0 	bcc.w	801a25c <ip4_reass+0x2ac>
 801a11c:	8b7b      	ldrh	r3, [r7, #26]
 801a11e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801a122:	4293      	cmp	r3, r2
 801a124:	f200 809a 	bhi.w	801a25c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a128:	69fa      	ldr	r2, [r7, #28]
 801a12a:	6879      	ldr	r1, [r7, #4]
 801a12c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a12e:	f7ff fdd5 	bl	8019cdc <ip_reass_chain_frag_into_datagram_and_validate>
 801a132:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a134:	697b      	ldr	r3, [r7, #20]
 801a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a13a:	f000 809b 	beq.w	801a274 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a13e:	4b48      	ldr	r3, [pc, #288]	@ (801a260 <ip4_reass+0x2b0>)
 801a140:	881a      	ldrh	r2, [r3, #0]
 801a142:	8c3b      	ldrh	r3, [r7, #32]
 801a144:	4413      	add	r3, r2
 801a146:	b29a      	uxth	r2, r3
 801a148:	4b45      	ldr	r3, [pc, #276]	@ (801a260 <ip4_reass+0x2b0>)
 801a14a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a14c:	69fb      	ldr	r3, [r7, #28]
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d00d      	beq.n	801a16e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a152:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a154:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a156:	4413      	add	r3, r2
 801a158:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a15c:	8a7a      	ldrh	r2, [r7, #18]
 801a15e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a162:	7f9b      	ldrb	r3, [r3, #30]
 801a164:	f043 0301 	orr.w	r3, r3, #1
 801a168:	b2da      	uxtb	r2, r3
 801a16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a16c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a16e:	697b      	ldr	r3, [r7, #20]
 801a170:	2b01      	cmp	r3, #1
 801a172:	d171      	bne.n	801a258 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a176:	8b9b      	ldrh	r3, [r3, #28]
 801a178:	3314      	adds	r3, #20
 801a17a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a17e:	685b      	ldr	r3, [r3, #4]
 801a180:	685b      	ldr	r3, [r3, #4]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a188:	685b      	ldr	r3, [r3, #4]
 801a18a:	685b      	ldr	r3, [r3, #4]
 801a18c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a190:	3308      	adds	r3, #8
 801a192:	2214      	movs	r2, #20
 801a194:	4619      	mov	r1, r3
 801a196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a198:	f000 fe45 	bl	801ae26 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a19c:	8a3b      	ldrh	r3, [r7, #16]
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f7f5 ff84 	bl	80100ac <lwip_htons>
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	461a      	mov	r2, r3
 801a1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	719a      	strb	r2, [r3, #6]
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	729a      	strb	r2, [r3, #10]
 801a1bc:	2200      	movs	r2, #0
 801a1be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1c2:	685b      	ldr	r3, [r3, #4]
 801a1c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a1c6:	e00d      	b.n	801a1e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1ca:	685b      	ldr	r3, [r3, #4]
 801a1cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a1ce:	2114      	movs	r1, #20
 801a1d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a1d2:	f7f7 fb97 	bl	8011904 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a1d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a1d8:	6878      	ldr	r0, [r7, #4]
 801a1da:	f7f7 fce7 	bl	8011bac <pbuf_cat>
      r = iprh->next_pbuf;
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801a1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d1ee      	bne.n	801a1c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a1ea:	4b1e      	ldr	r3, [pc, #120]	@ (801a264 <ip4_reass+0x2b4>)
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a1f0:	429a      	cmp	r2, r3
 801a1f2:	d102      	bne.n	801a1fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a1f8:	e010      	b.n	801a21c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a1fa:	4b1a      	ldr	r3, [pc, #104]	@ (801a264 <ip4_reass+0x2b4>)
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a200:	e007      	b.n	801a212 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a208:	429a      	cmp	r2, r3
 801a20a:	d006      	beq.n	801a21a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a214:	2b00      	cmp	r3, #0
 801a216:	d1f4      	bne.n	801a202 <ip4_reass+0x252>
 801a218:	e000      	b.n	801a21c <ip4_reass+0x26c>
          break;
 801a21a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a21c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a21e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a220:	f7ff fd2e 	bl	8019c80 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a224:	6878      	ldr	r0, [r7, #4]
 801a226:	f7f7 fc81 	bl	8011b2c <pbuf_clen>
 801a22a:	4603      	mov	r3, r0
 801a22c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a22e:	4b0c      	ldr	r3, [pc, #48]	@ (801a260 <ip4_reass+0x2b0>)
 801a230:	881b      	ldrh	r3, [r3, #0]
 801a232:	8c3a      	ldrh	r2, [r7, #32]
 801a234:	429a      	cmp	r2, r3
 801a236:	d906      	bls.n	801a246 <ip4_reass+0x296>
 801a238:	4b0b      	ldr	r3, [pc, #44]	@ (801a268 <ip4_reass+0x2b8>)
 801a23a:	f240 229b 	movw	r2, #667	@ 0x29b
 801a23e:	490b      	ldr	r1, [pc, #44]	@ (801a26c <ip4_reass+0x2bc>)
 801a240:	480b      	ldr	r0, [pc, #44]	@ (801a270 <ip4_reass+0x2c0>)
 801a242:	f000 fcb7 	bl	801abb4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a246:	4b06      	ldr	r3, [pc, #24]	@ (801a260 <ip4_reass+0x2b0>)
 801a248:	881a      	ldrh	r2, [r3, #0]
 801a24a:	8c3b      	ldrh	r3, [r7, #32]
 801a24c:	1ad3      	subs	r3, r2, r3
 801a24e:	b29a      	uxth	r2, r3
 801a250:	4b03      	ldr	r3, [pc, #12]	@ (801a260 <ip4_reass+0x2b0>)
 801a252:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	e038      	b.n	801a2ca <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a258:	2300      	movs	r3, #0
 801a25a:	e036      	b.n	801a2ca <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a25c:	bf00      	nop
 801a25e:	e00a      	b.n	801a276 <ip4_reass+0x2c6>
 801a260:	24014d14 	.word	0x24014d14
 801a264:	24014d10 	.word	0x24014d10
 801a268:	0801e3c8 	.word	0x0801e3c8
 801a26c:	0801e538 	.word	0x0801e538
 801a270:	0801e410 	.word	0x0801e410
    goto nullreturn_ipr;
 801a274:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d106      	bne.n	801a28a <ip4_reass+0x2da>
 801a27c:	4b15      	ldr	r3, [pc, #84]	@ (801a2d4 <ip4_reass+0x324>)
 801a27e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801a282:	4915      	ldr	r1, [pc, #84]	@ (801a2d8 <ip4_reass+0x328>)
 801a284:	4815      	ldr	r0, [pc, #84]	@ (801a2dc <ip4_reass+0x32c>)
 801a286:	f000 fc95 	bl	801abb4 <iprintf>
  if (ipr->p == NULL) {
 801a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a28c:	685b      	ldr	r3, [r3, #4]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d116      	bne.n	801a2c0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a292:	4b13      	ldr	r3, [pc, #76]	@ (801a2e0 <ip4_reass+0x330>)
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a298:	429a      	cmp	r2, r3
 801a29a:	d006      	beq.n	801a2aa <ip4_reass+0x2fa>
 801a29c:	4b0d      	ldr	r3, [pc, #52]	@ (801a2d4 <ip4_reass+0x324>)
 801a29e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a2a2:	4910      	ldr	r1, [pc, #64]	@ (801a2e4 <ip4_reass+0x334>)
 801a2a4:	480d      	ldr	r0, [pc, #52]	@ (801a2dc <ip4_reass+0x32c>)
 801a2a6:	f000 fc85 	bl	801abb4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a2aa:	2100      	movs	r1, #0
 801a2ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a2ae:	f7ff fce7 	bl	8019c80 <ip_reass_dequeue_datagram>
 801a2b2:	e006      	b.n	801a2c2 <ip4_reass+0x312>
    goto nullreturn;
 801a2b4:	bf00      	nop
 801a2b6:	e004      	b.n	801a2c2 <ip4_reass+0x312>
    goto nullreturn;
 801a2b8:	bf00      	nop
 801a2ba:	e002      	b.n	801a2c2 <ip4_reass+0x312>
      goto nullreturn;
 801a2bc:	bf00      	nop
 801a2be:	e000      	b.n	801a2c2 <ip4_reass+0x312>
  }

nullreturn:
 801a2c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a2c2:	6878      	ldr	r0, [r7, #4]
 801a2c4:	f7f7 fba4 	bl	8011a10 <pbuf_free>
  return NULL;
 801a2c8:	2300      	movs	r3, #0
}
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	3738      	adds	r7, #56	@ 0x38
 801a2ce:	46bd      	mov	sp, r7
 801a2d0:	bd80      	pop	{r7, pc}
 801a2d2:	bf00      	nop
 801a2d4:	0801e3c8 	.word	0x0801e3c8
 801a2d8:	0801e554 	.word	0x0801e554
 801a2dc:	0801e410 	.word	0x0801e410
 801a2e0:	24014d10 	.word	0x24014d10
 801a2e4:	0801e560 	.word	0x0801e560

0801a2e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a2ec:	2006      	movs	r0, #6
 801a2ee:	f7f6 fc6d 	bl	8010bcc <memp_malloc>
 801a2f2:	4603      	mov	r3, r0
}
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	bd80      	pop	{r7, pc}

0801a2f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b082      	sub	sp, #8
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d106      	bne.n	801a314 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a306:	4b07      	ldr	r3, [pc, #28]	@ (801a324 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a308:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801a30c:	4906      	ldr	r1, [pc, #24]	@ (801a328 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a30e:	4807      	ldr	r0, [pc, #28]	@ (801a32c <ip_frag_free_pbuf_custom_ref+0x34>)
 801a310:	f000 fc50 	bl	801abb4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a314:	6879      	ldr	r1, [r7, #4]
 801a316:	2006      	movs	r0, #6
 801a318:	f7f6 fcce 	bl	8010cb8 <memp_free>
}
 801a31c:	bf00      	nop
 801a31e:	3708      	adds	r7, #8
 801a320:	46bd      	mov	sp, r7
 801a322:	bd80      	pop	{r7, pc}
 801a324:	0801e3c8 	.word	0x0801e3c8
 801a328:	0801e580 	.word	0x0801e580
 801a32c:	0801e410 	.word	0x0801e410

0801a330 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b084      	sub	sp, #16
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d106      	bne.n	801a350 <ipfrag_free_pbuf_custom+0x20>
 801a342:	4b11      	ldr	r3, [pc, #68]	@ (801a388 <ipfrag_free_pbuf_custom+0x58>)
 801a344:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801a348:	4910      	ldr	r1, [pc, #64]	@ (801a38c <ipfrag_free_pbuf_custom+0x5c>)
 801a34a:	4811      	ldr	r0, [pc, #68]	@ (801a390 <ipfrag_free_pbuf_custom+0x60>)
 801a34c:	f000 fc32 	bl	801abb4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a350:	68fa      	ldr	r2, [r7, #12]
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	429a      	cmp	r2, r3
 801a356:	d006      	beq.n	801a366 <ipfrag_free_pbuf_custom+0x36>
 801a358:	4b0b      	ldr	r3, [pc, #44]	@ (801a388 <ipfrag_free_pbuf_custom+0x58>)
 801a35a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801a35e:	490d      	ldr	r1, [pc, #52]	@ (801a394 <ipfrag_free_pbuf_custom+0x64>)
 801a360:	480b      	ldr	r0, [pc, #44]	@ (801a390 <ipfrag_free_pbuf_custom+0x60>)
 801a362:	f000 fc27 	bl	801abb4 <iprintf>
  if (pcr->original != NULL) {
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	695b      	ldr	r3, [r3, #20]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d004      	beq.n	801a378 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	695b      	ldr	r3, [r3, #20]
 801a372:	4618      	mov	r0, r3
 801a374:	f7f7 fb4c 	bl	8011a10 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a378:	68f8      	ldr	r0, [r7, #12]
 801a37a:	f7ff ffbd 	bl	801a2f8 <ip_frag_free_pbuf_custom_ref>
}
 801a37e:	bf00      	nop
 801a380:	3710      	adds	r7, #16
 801a382:	46bd      	mov	sp, r7
 801a384:	bd80      	pop	{r7, pc}
 801a386:	bf00      	nop
 801a388:	0801e3c8 	.word	0x0801e3c8
 801a38c:	0801e58c 	.word	0x0801e58c
 801a390:	0801e410 	.word	0x0801e410
 801a394:	0801e598 	.word	0x0801e598

0801a398 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b094      	sub	sp, #80	@ 0x50
 801a39c:	af02      	add	r7, sp, #8
 801a39e:	60f8      	str	r0, [r7, #12]
 801a3a0:	60b9      	str	r1, [r7, #8]
 801a3a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a3aa:	68bb      	ldr	r3, [r7, #8]
 801a3ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a3ae:	3b14      	subs	r3, #20
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	da00      	bge.n	801a3b6 <ip4_frag+0x1e>
 801a3b4:	3307      	adds	r3, #7
 801a3b6:	10db      	asrs	r3, r3, #3
 801a3b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a3ba:	2314      	movs	r3, #20
 801a3bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	685b      	ldr	r3, [r3, #4]
 801a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801a3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3ca:	781b      	ldrb	r3, [r3, #0]
 801a3cc:	f003 030f 	and.w	r3, r3, #15
 801a3d0:	b2db      	uxtb	r3, r3
 801a3d2:	009b      	lsls	r3, r3, #2
 801a3d4:	b2db      	uxtb	r3, r3
 801a3d6:	2b14      	cmp	r3, #20
 801a3d8:	d002      	beq.n	801a3e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a3da:	f06f 0305 	mvn.w	r3, #5
 801a3de:	e110      	b.n	801a602 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	895b      	ldrh	r3, [r3, #10]
 801a3e4:	2b13      	cmp	r3, #19
 801a3e6:	d809      	bhi.n	801a3fc <ip4_frag+0x64>
 801a3e8:	4b88      	ldr	r3, [pc, #544]	@ (801a60c <ip4_frag+0x274>)
 801a3ea:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801a3ee:	4988      	ldr	r1, [pc, #544]	@ (801a610 <ip4_frag+0x278>)
 801a3f0:	4888      	ldr	r0, [pc, #544]	@ (801a614 <ip4_frag+0x27c>)
 801a3f2:	f000 fbdf 	bl	801abb4 <iprintf>
 801a3f6:	f06f 0305 	mvn.w	r3, #5
 801a3fa:	e102      	b.n	801a602 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3fe:	88db      	ldrh	r3, [r3, #6]
 801a400:	b29b      	uxth	r3, r3
 801a402:	4618      	mov	r0, r3
 801a404:	f7f5 fe52 	bl	80100ac <lwip_htons>
 801a408:	4603      	mov	r3, r0
 801a40a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801a40c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a40e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a412:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a416:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a41c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	891b      	ldrh	r3, [r3, #8]
 801a422:	3b14      	subs	r3, #20
 801a424:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801a428:	e0e1      	b.n	801a5ee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a42a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a42c:	00db      	lsls	r3, r3, #3
 801a42e:	b29b      	uxth	r3, r3
 801a430:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a434:	4293      	cmp	r3, r2
 801a436:	bf28      	it	cs
 801a438:	4613      	movcs	r3, r2
 801a43a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a43c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a440:	2114      	movs	r1, #20
 801a442:	200e      	movs	r0, #14
 801a444:	f7f6 fffc 	bl	8011440 <pbuf_alloc>
 801a448:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801a44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	f000 80d5 	beq.w	801a5fc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a454:	895b      	ldrh	r3, [r3, #10]
 801a456:	2b13      	cmp	r3, #19
 801a458:	d806      	bhi.n	801a468 <ip4_frag+0xd0>
 801a45a:	4b6c      	ldr	r3, [pc, #432]	@ (801a60c <ip4_frag+0x274>)
 801a45c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801a460:	496d      	ldr	r1, [pc, #436]	@ (801a618 <ip4_frag+0x280>)
 801a462:	486c      	ldr	r0, [pc, #432]	@ (801a614 <ip4_frag+0x27c>)
 801a464:	f000 fba6 	bl	801abb4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a46a:	685b      	ldr	r3, [r3, #4]
 801a46c:	2214      	movs	r2, #20
 801a46e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a470:	4618      	mov	r0, r3
 801a472:	f000 fcd8 	bl	801ae26 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a478:	685b      	ldr	r3, [r3, #4]
 801a47a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801a47c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a47e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801a482:	e064      	b.n	801a54e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	895a      	ldrh	r2, [r3, #10]
 801a488:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a48a:	1ad3      	subs	r3, r2, r3
 801a48c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	895b      	ldrh	r3, [r3, #10]
 801a492:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a494:	429a      	cmp	r2, r3
 801a496:	d906      	bls.n	801a4a6 <ip4_frag+0x10e>
 801a498:	4b5c      	ldr	r3, [pc, #368]	@ (801a60c <ip4_frag+0x274>)
 801a49a:	f240 322d 	movw	r2, #813	@ 0x32d
 801a49e:	495f      	ldr	r1, [pc, #380]	@ (801a61c <ip4_frag+0x284>)
 801a4a0:	485c      	ldr	r0, [pc, #368]	@ (801a614 <ip4_frag+0x27c>)
 801a4a2:	f000 fb87 	bl	801abb4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a4a6:	8bfa      	ldrh	r2, [r7, #30]
 801a4a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a4ac:	4293      	cmp	r3, r2
 801a4ae:	bf28      	it	cs
 801a4b0:	4613      	movcs	r3, r2
 801a4b2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a4b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d105      	bne.n	801a4ca <ip4_frag+0x132>
        poff = 0;
 801a4be:	2300      	movs	r3, #0
 801a4c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	60fb      	str	r3, [r7, #12]
        continue;
 801a4c8:	e041      	b.n	801a54e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a4ca:	f7ff ff0d 	bl	801a2e8 <ip_frag_alloc_pbuf_custom_ref>
 801a4ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a4d0:	69bb      	ldr	r3, [r7, #24]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d103      	bne.n	801a4de <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a4d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a4d8:	f7f7 fa9a 	bl	8011a10 <pbuf_free>
        goto memerr;
 801a4dc:	e08f      	b.n	801a5fe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a4de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a4e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a4e6:	4413      	add	r3, r2
 801a4e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801a4ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a4f0:	9201      	str	r2, [sp, #4]
 801a4f2:	9300      	str	r3, [sp, #0]
 801a4f4:	4603      	mov	r3, r0
 801a4f6:	2241      	movs	r2, #65	@ 0x41
 801a4f8:	2000      	movs	r0, #0
 801a4fa:	f7f7 f8cf 	bl	801169c <pbuf_alloced_custom>
 801a4fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a500:	697b      	ldr	r3, [r7, #20]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d106      	bne.n	801a514 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a506:	69b8      	ldr	r0, [r7, #24]
 801a508:	f7ff fef6 	bl	801a2f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a50c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a50e:	f7f7 fa7f 	bl	8011a10 <pbuf_free>
        goto memerr;
 801a512:	e074      	b.n	801a5fe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a514:	68f8      	ldr	r0, [r7, #12]
 801a516:	f7f7 fb21 	bl	8011b5c <pbuf_ref>
      pcr->original = p;
 801a51a:	69bb      	ldr	r3, [r7, #24]
 801a51c:	68fa      	ldr	r2, [r7, #12]
 801a51e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a520:	69bb      	ldr	r3, [r7, #24]
 801a522:	4a3f      	ldr	r2, [pc, #252]	@ (801a620 <ip4_frag+0x288>)
 801a524:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a526:	6979      	ldr	r1, [r7, #20]
 801a528:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a52a:	f7f7 fb3f 	bl	8011bac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a52e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801a532:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a536:	1ad3      	subs	r3, r2, r3
 801a538:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801a53c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a540:	2b00      	cmp	r3, #0
 801a542:	d004      	beq.n	801a54e <ip4_frag+0x1b6>
        poff = 0;
 801a544:	2300      	movs	r3, #0
 801a546:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a54e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a552:	2b00      	cmp	r3, #0
 801a554:	d196      	bne.n	801a484 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a556:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a558:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a55c:	4413      	add	r3, r2
 801a55e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a564:	f1a3 0213 	sub.w	r2, r3, #19
 801a568:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a56c:	429a      	cmp	r2, r3
 801a56e:	bfcc      	ite	gt
 801a570:	2301      	movgt	r3, #1
 801a572:	2300      	movle	r3, #0
 801a574:	b2db      	uxtb	r3, r3
 801a576:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a578:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a580:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801a582:	6a3b      	ldr	r3, [r7, #32]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d002      	beq.n	801a58e <ip4_frag+0x1f6>
 801a588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d003      	beq.n	801a596 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a58e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a590:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801a594:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a596:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a598:	4618      	mov	r0, r3
 801a59a:	f7f5 fd87 	bl	80100ac <lwip_htons>
 801a59e:	4603      	mov	r3, r0
 801a5a0:	461a      	mov	r2, r3
 801a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5a4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a5a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a5a8:	3314      	adds	r3, #20
 801a5aa:	b29b      	uxth	r3, r3
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f7f5 fd7d 	bl	80100ac <lwip_htons>
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	461a      	mov	r2, r3
 801a5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5b8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5bc:	2200      	movs	r2, #0
 801a5be:	729a      	strb	r2, [r3, #10]
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a5c4:	68bb      	ldr	r3, [r7, #8]
 801a5c6:	695b      	ldr	r3, [r3, #20]
 801a5c8:	687a      	ldr	r2, [r7, #4]
 801a5ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a5cc:	68b8      	ldr	r0, [r7, #8]
 801a5ce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a5d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a5d2:	f7f7 fa1d 	bl	8011a10 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a5d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a5da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a5dc:	1ad3      	subs	r3, r2, r3
 801a5de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801a5e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801a5e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a5e8:	4413      	add	r3, r2
 801a5ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801a5ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	f47f af19 	bne.w	801a42a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	e002      	b.n	801a602 <ip4_frag+0x26a>
      goto memerr;
 801a5fc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a5fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a602:	4618      	mov	r0, r3
 801a604:	3748      	adds	r7, #72	@ 0x48
 801a606:	46bd      	mov	sp, r7
 801a608:	bd80      	pop	{r7, pc}
 801a60a:	bf00      	nop
 801a60c:	0801e3c8 	.word	0x0801e3c8
 801a610:	0801e5a4 	.word	0x0801e5a4
 801a614:	0801e410 	.word	0x0801e410
 801a618:	0801e5c0 	.word	0x0801e5c0
 801a61c:	0801e5e0 	.word	0x0801e5e0
 801a620:	0801a331 	.word	0x0801a331

0801a624 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b086      	sub	sp, #24
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
 801a62c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a62e:	230e      	movs	r3, #14
 801a630:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	895b      	ldrh	r3, [r3, #10]
 801a636:	2b0e      	cmp	r3, #14
 801a638:	d96e      	bls.n	801a718 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	7bdb      	ldrb	r3, [r3, #15]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d106      	bne.n	801a650 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a642:	683b      	ldr	r3, [r7, #0]
 801a644:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a648:	3301      	adds	r3, #1
 801a64a:	b2da      	uxtb	r2, r3
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	685b      	ldr	r3, [r3, #4]
 801a654:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	7b1a      	ldrb	r2, [r3, #12]
 801a65a:	7b5b      	ldrb	r3, [r3, #13]
 801a65c:	021b      	lsls	r3, r3, #8
 801a65e:	4313      	orrs	r3, r2
 801a660:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a662:	693b      	ldr	r3, [r7, #16]
 801a664:	781b      	ldrb	r3, [r3, #0]
 801a666:	f003 0301 	and.w	r3, r3, #1
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d023      	beq.n	801a6b6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a66e:	693b      	ldr	r3, [r7, #16]
 801a670:	781b      	ldrb	r3, [r3, #0]
 801a672:	2b01      	cmp	r3, #1
 801a674:	d10f      	bne.n	801a696 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a676:	693b      	ldr	r3, [r7, #16]
 801a678:	785b      	ldrb	r3, [r3, #1]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d11b      	bne.n	801a6b6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a67e:	693b      	ldr	r3, [r7, #16]
 801a680:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a682:	2b5e      	cmp	r3, #94	@ 0x5e
 801a684:	d117      	bne.n	801a6b6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	7b5b      	ldrb	r3, [r3, #13]
 801a68a:	f043 0310 	orr.w	r3, r3, #16
 801a68e:	b2da      	uxtb	r2, r3
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	735a      	strb	r2, [r3, #13]
 801a694:	e00f      	b.n	801a6b6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a696:	693b      	ldr	r3, [r7, #16]
 801a698:	2206      	movs	r2, #6
 801a69a:	4928      	ldr	r1, [pc, #160]	@ (801a73c <ethernet_input+0x118>)
 801a69c:	4618      	mov	r0, r3
 801a69e:	f000 fade 	bl	801ac5e <memcmp>
 801a6a2:	4603      	mov	r3, r0
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d106      	bne.n	801a6b6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	7b5b      	ldrb	r3, [r3, #13]
 801a6ac:	f043 0308 	orr.w	r3, r3, #8
 801a6b0:	b2da      	uxtb	r2, r3
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a6b6:	89fb      	ldrh	r3, [r7, #14]
 801a6b8:	2b08      	cmp	r3, #8
 801a6ba:	d003      	beq.n	801a6c4 <ethernet_input+0xa0>
 801a6bc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801a6c0:	d014      	beq.n	801a6ec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a6c2:	e032      	b.n	801a72a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a6c4:	683b      	ldr	r3, [r7, #0]
 801a6c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a6ca:	f003 0308 	and.w	r3, r3, #8
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d024      	beq.n	801a71c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a6d2:	8afb      	ldrh	r3, [r7, #22]
 801a6d4:	4619      	mov	r1, r3
 801a6d6:	6878      	ldr	r0, [r7, #4]
 801a6d8:	f7f7 f914 	bl	8011904 <pbuf_remove_header>
 801a6dc:	4603      	mov	r3, r0
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d11e      	bne.n	801a720 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a6e2:	6839      	ldr	r1, [r7, #0]
 801a6e4:	6878      	ldr	r0, [r7, #4]
 801a6e6:	f7fe fe85 	bl	80193f4 <ip4_input>
      break;
 801a6ea:	e013      	b.n	801a714 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a6ec:	683b      	ldr	r3, [r7, #0]
 801a6ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a6f2:	f003 0308 	and.w	r3, r3, #8
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d014      	beq.n	801a724 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a6fa:	8afb      	ldrh	r3, [r7, #22]
 801a6fc:	4619      	mov	r1, r3
 801a6fe:	6878      	ldr	r0, [r7, #4]
 801a700:	f7f7 f900 	bl	8011904 <pbuf_remove_header>
 801a704:	4603      	mov	r3, r0
 801a706:	2b00      	cmp	r3, #0
 801a708:	d10e      	bne.n	801a728 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a70a:	6839      	ldr	r1, [r7, #0]
 801a70c:	6878      	ldr	r0, [r7, #4]
 801a70e:	f7fd ffff 	bl	8018710 <etharp_input>
      break;
 801a712:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a714:	2300      	movs	r3, #0
 801a716:	e00c      	b.n	801a732 <ethernet_input+0x10e>
    goto free_and_return;
 801a718:	bf00      	nop
 801a71a:	e006      	b.n	801a72a <ethernet_input+0x106>
        goto free_and_return;
 801a71c:	bf00      	nop
 801a71e:	e004      	b.n	801a72a <ethernet_input+0x106>
        goto free_and_return;
 801a720:	bf00      	nop
 801a722:	e002      	b.n	801a72a <ethernet_input+0x106>
        goto free_and_return;
 801a724:	bf00      	nop
 801a726:	e000      	b.n	801a72a <ethernet_input+0x106>
        goto free_and_return;
 801a728:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a72a:	6878      	ldr	r0, [r7, #4]
 801a72c:	f7f7 f970 	bl	8011a10 <pbuf_free>
  return ERR_OK;
 801a730:	2300      	movs	r3, #0
}
 801a732:	4618      	mov	r0, r3
 801a734:	3718      	adds	r7, #24
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}
 801a73a:	bf00      	nop
 801a73c:	0801e814 	.word	0x0801e814

0801a740 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a740:	b580      	push	{r7, lr}
 801a742:	b086      	sub	sp, #24
 801a744:	af00      	add	r7, sp, #0
 801a746:	60f8      	str	r0, [r7, #12]
 801a748:	60b9      	str	r1, [r7, #8]
 801a74a:	607a      	str	r2, [r7, #4]
 801a74c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a74e:	8c3b      	ldrh	r3, [r7, #32]
 801a750:	4618      	mov	r0, r3
 801a752:	f7f5 fcab 	bl	80100ac <lwip_htons>
 801a756:	4603      	mov	r3, r0
 801a758:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a75a:	210e      	movs	r1, #14
 801a75c:	68b8      	ldr	r0, [r7, #8]
 801a75e:	f7f7 f8c1 	bl	80118e4 <pbuf_add_header>
 801a762:	4603      	mov	r3, r0
 801a764:	2b00      	cmp	r3, #0
 801a766:	d125      	bne.n	801a7b4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a768:	68bb      	ldr	r3, [r7, #8]
 801a76a:	685b      	ldr	r3, [r3, #4]
 801a76c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a76e:	693b      	ldr	r3, [r7, #16]
 801a770:	8afa      	ldrh	r2, [r7, #22]
 801a772:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a774:	693b      	ldr	r3, [r7, #16]
 801a776:	2206      	movs	r2, #6
 801a778:	6839      	ldr	r1, [r7, #0]
 801a77a:	4618      	mov	r0, r3
 801a77c:	f000 fb53 	bl	801ae26 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a780:	693b      	ldr	r3, [r7, #16]
 801a782:	3306      	adds	r3, #6
 801a784:	2206      	movs	r2, #6
 801a786:	6879      	ldr	r1, [r7, #4]
 801a788:	4618      	mov	r0, r3
 801a78a:	f000 fb4c 	bl	801ae26 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a794:	2b06      	cmp	r3, #6
 801a796:	d006      	beq.n	801a7a6 <ethernet_output+0x66>
 801a798:	4b0a      	ldr	r3, [pc, #40]	@ (801a7c4 <ethernet_output+0x84>)
 801a79a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801a79e:	490a      	ldr	r1, [pc, #40]	@ (801a7c8 <ethernet_output+0x88>)
 801a7a0:	480a      	ldr	r0, [pc, #40]	@ (801a7cc <ethernet_output+0x8c>)
 801a7a2:	f000 fa07 	bl	801abb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	699b      	ldr	r3, [r3, #24]
 801a7aa:	68b9      	ldr	r1, [r7, #8]
 801a7ac:	68f8      	ldr	r0, [r7, #12]
 801a7ae:	4798      	blx	r3
 801a7b0:	4603      	mov	r3, r0
 801a7b2:	e002      	b.n	801a7ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a7b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a7b6:	f06f 0301 	mvn.w	r3, #1
}
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	3718      	adds	r7, #24
 801a7be:	46bd      	mov	sp, r7
 801a7c0:	bd80      	pop	{r7, pc}
 801a7c2:	bf00      	nop
 801a7c4:	0801e5f0 	.word	0x0801e5f0
 801a7c8:	0801e628 	.word	0x0801e628
 801a7cc:	0801e65c 	.word	0x0801e65c

0801a7d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b082      	sub	sp, #8
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
 801a7d8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801a7da:	683b      	ldr	r3, [r7, #0]
 801a7dc:	2200      	movs	r2, #0
 801a7de:	2104      	movs	r1, #4
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f7f1 ffcb 	bl	800c77c <osMessageQueueNew>
 801a7e6:	4602      	mov	r2, r0
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d102      	bne.n	801a7fa <sys_mbox_new+0x2a>
    return ERR_MEM;
 801a7f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a7f8:	e000      	b.n	801a7fc <sys_mbox_new+0x2c>

  return ERR_OK;
 801a7fa:	2300      	movs	r3, #0
}
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	3708      	adds	r7, #8
 801a800:	46bd      	mov	sp, r7
 801a802:	bd80      	pop	{r7, pc}

0801a804 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a804:	b580      	push	{r7, lr}
 801a806:	b084      	sub	sp, #16
 801a808:	af00      	add	r7, sp, #0
 801a80a:	6078      	str	r0, [r7, #4]
 801a80c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	6818      	ldr	r0, [r3, #0]
 801a812:	4639      	mov	r1, r7
 801a814:	2300      	movs	r3, #0
 801a816:	2200      	movs	r2, #0
 801a818:	f7f2 f824 	bl	800c864 <osMessageQueuePut>
 801a81c:	4603      	mov	r3, r0
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d102      	bne.n	801a828 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801a822:	2300      	movs	r3, #0
 801a824:	73fb      	strb	r3, [r7, #15]
 801a826:	e001      	b.n	801a82c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a828:	23ff      	movs	r3, #255	@ 0xff
 801a82a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a82c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a830:	4618      	mov	r0, r3
 801a832:	3710      	adds	r7, #16
 801a834:	46bd      	mov	sp, r7
 801a836:	bd80      	pop	{r7, pc}

0801a838 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a838:	b580      	push	{r7, lr}
 801a83a:	b086      	sub	sp, #24
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	60f8      	str	r0, [r7, #12]
 801a840:	60b9      	str	r1, [r7, #8]
 801a842:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801a844:	f7f1 fcaa 	bl	800c19c <osKernelGetTickCount>
 801a848:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d013      	beq.n	801a878 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	6818      	ldr	r0, [r3, #0]
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	2200      	movs	r2, #0
 801a858:	68b9      	ldr	r1, [r7, #8]
 801a85a:	f7f2 f863 	bl	800c924 <osMessageQueueGet>
 801a85e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801a860:	693b      	ldr	r3, [r7, #16]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d105      	bne.n	801a872 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801a866:	f7f1 fc99 	bl	800c19c <osKernelGetTickCount>
 801a86a:	4602      	mov	r2, r0
 801a86c:	697b      	ldr	r3, [r7, #20]
 801a86e:	1ad3      	subs	r3, r2, r3
 801a870:	e00f      	b.n	801a892 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a872:	f04f 33ff 	mov.w	r3, #4294967295
 801a876:	e00c      	b.n	801a892 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	6818      	ldr	r0, [r3, #0]
 801a87c:	f04f 33ff 	mov.w	r3, #4294967295
 801a880:	2200      	movs	r2, #0
 801a882:	68b9      	ldr	r1, [r7, #8]
 801a884:	f7f2 f84e 	bl	800c924 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801a888:	f7f1 fc88 	bl	800c19c <osKernelGetTickCount>
 801a88c:	4602      	mov	r2, r0
 801a88e:	697b      	ldr	r3, [r7, #20]
 801a890:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a892:	4618      	mov	r0, r3
 801a894:	3718      	adds	r7, #24
 801a896:	46bd      	mov	sp, r7
 801a898:	bd80      	pop	{r7, pc}

0801a89a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a89a:	b480      	push	{r7}
 801a89c:	b083      	sub	sp, #12
 801a89e:	af00      	add	r7, sp, #0
 801a8a0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d101      	bne.n	801a8ae <sys_mbox_valid+0x14>
    return 0;
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	e000      	b.n	801a8b0 <sys_mbox_valid+0x16>
  else
    return 1;
 801a8ae:	2301      	movs	r3, #1
}
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	370c      	adds	r7, #12
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ba:	4770      	bx	lr

0801a8bc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801a8c0:	2000      	movs	r0, #0
 801a8c2:	f7f1 fd2d 	bl	800c320 <osMutexNew>
 801a8c6:	4603      	mov	r3, r0
 801a8c8:	4a01      	ldr	r2, [pc, #4]	@ (801a8d0 <sys_init+0x14>)
 801a8ca:	6013      	str	r3, [r2, #0]
#endif
}
 801a8cc:	bf00      	nop
 801a8ce:	bd80      	pop	{r7, pc}
 801a8d0:	24014d18 	.word	0x24014d18

0801a8d4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	b082      	sub	sp, #8
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801a8dc:	2000      	movs	r0, #0
 801a8de:	f7f1 fd1f 	bl	800c320 <osMutexNew>
 801a8e2:	4602      	mov	r2, r0
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d102      	bne.n	801a8f6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a8f0:	f04f 33ff 	mov.w	r3, #4294967295
 801a8f4:	e000      	b.n	801a8f8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a8f6:	2300      	movs	r3, #0
}
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	3708      	adds	r7, #8
 801a8fc:	46bd      	mov	sp, r7
 801a8fe:	bd80      	pop	{r7, pc}

0801a900 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a900:	b580      	push	{r7, lr}
 801a902:	b082      	sub	sp, #8
 801a904:	af00      	add	r7, sp, #0
 801a906:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	f04f 31ff 	mov.w	r1, #4294967295
 801a910:	4618      	mov	r0, r3
 801a912:	f7f1 fd8b 	bl	800c42c <osMutexAcquire>
#endif
}
 801a916:	bf00      	nop
 801a918:	3708      	adds	r7, #8
 801a91a:	46bd      	mov	sp, r7
 801a91c:	bd80      	pop	{r7, pc}

0801a91e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a91e:	b580      	push	{r7, lr}
 801a920:	b082      	sub	sp, #8
 801a922:	af00      	add	r7, sp, #0
 801a924:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	4618      	mov	r0, r3
 801a92c:	f7f1 fdc9 	bl	800c4c2 <osMutexRelease>
}
 801a930:	bf00      	nop
 801a932:	3708      	adds	r7, #8
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}

0801a938 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b08e      	sub	sp, #56	@ 0x38
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	60f8      	str	r0, [r7, #12]
 801a940:	60b9      	str	r1, [r7, #8]
 801a942:	607a      	str	r2, [r7, #4]
 801a944:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801a946:	f107 0314 	add.w	r3, r7, #20
 801a94a:	2224      	movs	r2, #36	@ 0x24
 801a94c:	2100      	movs	r1, #0
 801a94e:	4618      	mov	r0, r3
 801a950:	f000 f995 	bl	801ac7e <memset>
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	617b      	str	r3, [r7, #20]
 801a958:	683b      	ldr	r3, [r7, #0]
 801a95a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a95c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a95e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801a960:	f107 0314 	add.w	r3, r7, #20
 801a964:	461a      	mov	r2, r3
 801a966:	6879      	ldr	r1, [r7, #4]
 801a968:	68b8      	ldr	r0, [r7, #8]
 801a96a:	f7f1 fc2c 	bl	800c1c6 <osThreadNew>
 801a96e:	4603      	mov	r3, r0
#endif
}
 801a970:	4618      	mov	r0, r3
 801a972:	3738      	adds	r7, #56	@ 0x38
 801a974:	46bd      	mov	sp, r7
 801a976:	bd80      	pop	{r7, pc}

0801a978 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a978:	b580      	push	{r7, lr}
 801a97a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801a97c:	4b04      	ldr	r3, [pc, #16]	@ (801a990 <sys_arch_protect+0x18>)
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	f04f 31ff 	mov.w	r1, #4294967295
 801a984:	4618      	mov	r0, r3
 801a986:	f7f1 fd51 	bl	800c42c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801a98a:	2301      	movs	r3, #1
}
 801a98c:	4618      	mov	r0, r3
 801a98e:	bd80      	pop	{r7, pc}
 801a990:	24014d18 	.word	0x24014d18

0801a994 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a994:	b580      	push	{r7, lr}
 801a996:	b082      	sub	sp, #8
 801a998:	af00      	add	r7, sp, #0
 801a99a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a99c:	4b04      	ldr	r3, [pc, #16]	@ (801a9b0 <sys_arch_unprotect+0x1c>)
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	f7f1 fd8e 	bl	800c4c2 <osMutexRelease>
}
 801a9a6:	bf00      	nop
 801a9a8:	3708      	adds	r7, #8
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	bd80      	pop	{r7, pc}
 801a9ae:	bf00      	nop
 801a9b0:	24014d18 	.word	0x24014d18

0801a9b4 <rand>:
 801a9b4:	4b16      	ldr	r3, [pc, #88]	@ (801aa10 <rand+0x5c>)
 801a9b6:	b510      	push	{r4, lr}
 801a9b8:	681c      	ldr	r4, [r3, #0]
 801a9ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a9bc:	b9b3      	cbnz	r3, 801a9ec <rand+0x38>
 801a9be:	2018      	movs	r0, #24
 801a9c0:	f000 faa8 	bl	801af14 <malloc>
 801a9c4:	4602      	mov	r2, r0
 801a9c6:	6320      	str	r0, [r4, #48]	@ 0x30
 801a9c8:	b920      	cbnz	r0, 801a9d4 <rand+0x20>
 801a9ca:	4b12      	ldr	r3, [pc, #72]	@ (801aa14 <rand+0x60>)
 801a9cc:	4812      	ldr	r0, [pc, #72]	@ (801aa18 <rand+0x64>)
 801a9ce:	2152      	movs	r1, #82	@ 0x52
 801a9d0:	f000 fa38 	bl	801ae44 <__assert_func>
 801a9d4:	4911      	ldr	r1, [pc, #68]	@ (801aa1c <rand+0x68>)
 801a9d6:	4b12      	ldr	r3, [pc, #72]	@ (801aa20 <rand+0x6c>)
 801a9d8:	e9c0 1300 	strd	r1, r3, [r0]
 801a9dc:	4b11      	ldr	r3, [pc, #68]	@ (801aa24 <rand+0x70>)
 801a9de:	6083      	str	r3, [r0, #8]
 801a9e0:	230b      	movs	r3, #11
 801a9e2:	8183      	strh	r3, [r0, #12]
 801a9e4:	2100      	movs	r1, #0
 801a9e6:	2001      	movs	r0, #1
 801a9e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a9ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a9ee:	480e      	ldr	r0, [pc, #56]	@ (801aa28 <rand+0x74>)
 801a9f0:	690b      	ldr	r3, [r1, #16]
 801a9f2:	694c      	ldr	r4, [r1, #20]
 801a9f4:	4a0d      	ldr	r2, [pc, #52]	@ (801aa2c <rand+0x78>)
 801a9f6:	4358      	muls	r0, r3
 801a9f8:	fb02 0004 	mla	r0, r2, r4, r0
 801a9fc:	fba3 3202 	umull	r3, r2, r3, r2
 801aa00:	3301      	adds	r3, #1
 801aa02:	eb40 0002 	adc.w	r0, r0, r2
 801aa06:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801aa0a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801aa0e:	bd10      	pop	{r4, pc}
 801aa10:	24004a00 	.word	0x24004a00
 801aa14:	0801e822 	.word	0x0801e822
 801aa18:	0801e839 	.word	0x0801e839
 801aa1c:	abcd330e 	.word	0xabcd330e
 801aa20:	e66d1234 	.word	0xe66d1234
 801aa24:	0005deec 	.word	0x0005deec
 801aa28:	5851f42d 	.word	0x5851f42d
 801aa2c:	4c957f2d 	.word	0x4c957f2d

0801aa30 <std>:
 801aa30:	2300      	movs	r3, #0
 801aa32:	b510      	push	{r4, lr}
 801aa34:	4604      	mov	r4, r0
 801aa36:	e9c0 3300 	strd	r3, r3, [r0]
 801aa3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aa3e:	6083      	str	r3, [r0, #8]
 801aa40:	8181      	strh	r1, [r0, #12]
 801aa42:	6643      	str	r3, [r0, #100]	@ 0x64
 801aa44:	81c2      	strh	r2, [r0, #14]
 801aa46:	6183      	str	r3, [r0, #24]
 801aa48:	4619      	mov	r1, r3
 801aa4a:	2208      	movs	r2, #8
 801aa4c:	305c      	adds	r0, #92	@ 0x5c
 801aa4e:	f000 f916 	bl	801ac7e <memset>
 801aa52:	4b0d      	ldr	r3, [pc, #52]	@ (801aa88 <std+0x58>)
 801aa54:	6263      	str	r3, [r4, #36]	@ 0x24
 801aa56:	4b0d      	ldr	r3, [pc, #52]	@ (801aa8c <std+0x5c>)
 801aa58:	62a3      	str	r3, [r4, #40]	@ 0x28
 801aa5a:	4b0d      	ldr	r3, [pc, #52]	@ (801aa90 <std+0x60>)
 801aa5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801aa5e:	4b0d      	ldr	r3, [pc, #52]	@ (801aa94 <std+0x64>)
 801aa60:	6323      	str	r3, [r4, #48]	@ 0x30
 801aa62:	4b0d      	ldr	r3, [pc, #52]	@ (801aa98 <std+0x68>)
 801aa64:	6224      	str	r4, [r4, #32]
 801aa66:	429c      	cmp	r4, r3
 801aa68:	d006      	beq.n	801aa78 <std+0x48>
 801aa6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801aa6e:	4294      	cmp	r4, r2
 801aa70:	d002      	beq.n	801aa78 <std+0x48>
 801aa72:	33d0      	adds	r3, #208	@ 0xd0
 801aa74:	429c      	cmp	r4, r3
 801aa76:	d105      	bne.n	801aa84 <std+0x54>
 801aa78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801aa7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa80:	f000 b9ce 	b.w	801ae20 <__retarget_lock_init_recursive>
 801aa84:	bd10      	pop	{r4, pc}
 801aa86:	bf00      	nop
 801aa88:	0801abd9 	.word	0x0801abd9
 801aa8c:	0801abfb 	.word	0x0801abfb
 801aa90:	0801ac33 	.word	0x0801ac33
 801aa94:	0801ac57 	.word	0x0801ac57
 801aa98:	24014d1c 	.word	0x24014d1c

0801aa9c <stdio_exit_handler>:
 801aa9c:	4a02      	ldr	r2, [pc, #8]	@ (801aaa8 <stdio_exit_handler+0xc>)
 801aa9e:	4903      	ldr	r1, [pc, #12]	@ (801aaac <stdio_exit_handler+0x10>)
 801aaa0:	4803      	ldr	r0, [pc, #12]	@ (801aab0 <stdio_exit_handler+0x14>)
 801aaa2:	f000 b869 	b.w	801ab78 <_fwalk_sglue>
 801aaa6:	bf00      	nop
 801aaa8:	240049f4 	.word	0x240049f4
 801aaac:	0801b725 	.word	0x0801b725
 801aab0:	24004a04 	.word	0x24004a04

0801aab4 <cleanup_stdio>:
 801aab4:	6841      	ldr	r1, [r0, #4]
 801aab6:	4b0c      	ldr	r3, [pc, #48]	@ (801aae8 <cleanup_stdio+0x34>)
 801aab8:	4299      	cmp	r1, r3
 801aaba:	b510      	push	{r4, lr}
 801aabc:	4604      	mov	r4, r0
 801aabe:	d001      	beq.n	801aac4 <cleanup_stdio+0x10>
 801aac0:	f000 fe30 	bl	801b724 <_fflush_r>
 801aac4:	68a1      	ldr	r1, [r4, #8]
 801aac6:	4b09      	ldr	r3, [pc, #36]	@ (801aaec <cleanup_stdio+0x38>)
 801aac8:	4299      	cmp	r1, r3
 801aaca:	d002      	beq.n	801aad2 <cleanup_stdio+0x1e>
 801aacc:	4620      	mov	r0, r4
 801aace:	f000 fe29 	bl	801b724 <_fflush_r>
 801aad2:	68e1      	ldr	r1, [r4, #12]
 801aad4:	4b06      	ldr	r3, [pc, #24]	@ (801aaf0 <cleanup_stdio+0x3c>)
 801aad6:	4299      	cmp	r1, r3
 801aad8:	d004      	beq.n	801aae4 <cleanup_stdio+0x30>
 801aada:	4620      	mov	r0, r4
 801aadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aae0:	f000 be20 	b.w	801b724 <_fflush_r>
 801aae4:	bd10      	pop	{r4, pc}
 801aae6:	bf00      	nop
 801aae8:	24014d1c 	.word	0x24014d1c
 801aaec:	24014d84 	.word	0x24014d84
 801aaf0:	24014dec 	.word	0x24014dec

0801aaf4 <global_stdio_init.part.0>:
 801aaf4:	b510      	push	{r4, lr}
 801aaf6:	4b0b      	ldr	r3, [pc, #44]	@ (801ab24 <global_stdio_init.part.0+0x30>)
 801aaf8:	4c0b      	ldr	r4, [pc, #44]	@ (801ab28 <global_stdio_init.part.0+0x34>)
 801aafa:	4a0c      	ldr	r2, [pc, #48]	@ (801ab2c <global_stdio_init.part.0+0x38>)
 801aafc:	601a      	str	r2, [r3, #0]
 801aafe:	4620      	mov	r0, r4
 801ab00:	2200      	movs	r2, #0
 801ab02:	2104      	movs	r1, #4
 801ab04:	f7ff ff94 	bl	801aa30 <std>
 801ab08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ab0c:	2201      	movs	r2, #1
 801ab0e:	2109      	movs	r1, #9
 801ab10:	f7ff ff8e 	bl	801aa30 <std>
 801ab14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ab18:	2202      	movs	r2, #2
 801ab1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab1e:	2112      	movs	r1, #18
 801ab20:	f7ff bf86 	b.w	801aa30 <std>
 801ab24:	24014e54 	.word	0x24014e54
 801ab28:	24014d1c 	.word	0x24014d1c
 801ab2c:	0801aa9d 	.word	0x0801aa9d

0801ab30 <__sfp_lock_acquire>:
 801ab30:	4801      	ldr	r0, [pc, #4]	@ (801ab38 <__sfp_lock_acquire+0x8>)
 801ab32:	f000 b976 	b.w	801ae22 <__retarget_lock_acquire_recursive>
 801ab36:	bf00      	nop
 801ab38:	24014e5d 	.word	0x24014e5d

0801ab3c <__sfp_lock_release>:
 801ab3c:	4801      	ldr	r0, [pc, #4]	@ (801ab44 <__sfp_lock_release+0x8>)
 801ab3e:	f000 b971 	b.w	801ae24 <__retarget_lock_release_recursive>
 801ab42:	bf00      	nop
 801ab44:	24014e5d 	.word	0x24014e5d

0801ab48 <__sinit>:
 801ab48:	b510      	push	{r4, lr}
 801ab4a:	4604      	mov	r4, r0
 801ab4c:	f7ff fff0 	bl	801ab30 <__sfp_lock_acquire>
 801ab50:	6a23      	ldr	r3, [r4, #32]
 801ab52:	b11b      	cbz	r3, 801ab5c <__sinit+0x14>
 801ab54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab58:	f7ff bff0 	b.w	801ab3c <__sfp_lock_release>
 801ab5c:	4b04      	ldr	r3, [pc, #16]	@ (801ab70 <__sinit+0x28>)
 801ab5e:	6223      	str	r3, [r4, #32]
 801ab60:	4b04      	ldr	r3, [pc, #16]	@ (801ab74 <__sinit+0x2c>)
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d1f5      	bne.n	801ab54 <__sinit+0xc>
 801ab68:	f7ff ffc4 	bl	801aaf4 <global_stdio_init.part.0>
 801ab6c:	e7f2      	b.n	801ab54 <__sinit+0xc>
 801ab6e:	bf00      	nop
 801ab70:	0801aab5 	.word	0x0801aab5
 801ab74:	24014e54 	.word	0x24014e54

0801ab78 <_fwalk_sglue>:
 801ab78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab7c:	4607      	mov	r7, r0
 801ab7e:	4688      	mov	r8, r1
 801ab80:	4614      	mov	r4, r2
 801ab82:	2600      	movs	r6, #0
 801ab84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ab88:	f1b9 0901 	subs.w	r9, r9, #1
 801ab8c:	d505      	bpl.n	801ab9a <_fwalk_sglue+0x22>
 801ab8e:	6824      	ldr	r4, [r4, #0]
 801ab90:	2c00      	cmp	r4, #0
 801ab92:	d1f7      	bne.n	801ab84 <_fwalk_sglue+0xc>
 801ab94:	4630      	mov	r0, r6
 801ab96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab9a:	89ab      	ldrh	r3, [r5, #12]
 801ab9c:	2b01      	cmp	r3, #1
 801ab9e:	d907      	bls.n	801abb0 <_fwalk_sglue+0x38>
 801aba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aba4:	3301      	adds	r3, #1
 801aba6:	d003      	beq.n	801abb0 <_fwalk_sglue+0x38>
 801aba8:	4629      	mov	r1, r5
 801abaa:	4638      	mov	r0, r7
 801abac:	47c0      	blx	r8
 801abae:	4306      	orrs	r6, r0
 801abb0:	3568      	adds	r5, #104	@ 0x68
 801abb2:	e7e9      	b.n	801ab88 <_fwalk_sglue+0x10>

0801abb4 <iprintf>:
 801abb4:	b40f      	push	{r0, r1, r2, r3}
 801abb6:	b507      	push	{r0, r1, r2, lr}
 801abb8:	4906      	ldr	r1, [pc, #24]	@ (801abd4 <iprintf+0x20>)
 801abba:	ab04      	add	r3, sp, #16
 801abbc:	6808      	ldr	r0, [r1, #0]
 801abbe:	f853 2b04 	ldr.w	r2, [r3], #4
 801abc2:	6881      	ldr	r1, [r0, #8]
 801abc4:	9301      	str	r3, [sp, #4]
 801abc6:	f000 fa85 	bl	801b0d4 <_vfiprintf_r>
 801abca:	b003      	add	sp, #12
 801abcc:	f85d eb04 	ldr.w	lr, [sp], #4
 801abd0:	b004      	add	sp, #16
 801abd2:	4770      	bx	lr
 801abd4:	24004a00 	.word	0x24004a00

0801abd8 <__sread>:
 801abd8:	b510      	push	{r4, lr}
 801abda:	460c      	mov	r4, r1
 801abdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abe0:	f000 f8d6 	bl	801ad90 <_read_r>
 801abe4:	2800      	cmp	r0, #0
 801abe6:	bfab      	itete	ge
 801abe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801abea:	89a3      	ldrhlt	r3, [r4, #12]
 801abec:	181b      	addge	r3, r3, r0
 801abee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801abf2:	bfac      	ite	ge
 801abf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801abf6:	81a3      	strhlt	r3, [r4, #12]
 801abf8:	bd10      	pop	{r4, pc}

0801abfa <__swrite>:
 801abfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abfe:	461f      	mov	r7, r3
 801ac00:	898b      	ldrh	r3, [r1, #12]
 801ac02:	05db      	lsls	r3, r3, #23
 801ac04:	4605      	mov	r5, r0
 801ac06:	460c      	mov	r4, r1
 801ac08:	4616      	mov	r6, r2
 801ac0a:	d505      	bpl.n	801ac18 <__swrite+0x1e>
 801ac0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac10:	2302      	movs	r3, #2
 801ac12:	2200      	movs	r2, #0
 801ac14:	f000 f8aa 	bl	801ad6c <_lseek_r>
 801ac18:	89a3      	ldrh	r3, [r4, #12]
 801ac1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ac22:	81a3      	strh	r3, [r4, #12]
 801ac24:	4632      	mov	r2, r6
 801ac26:	463b      	mov	r3, r7
 801ac28:	4628      	mov	r0, r5
 801ac2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac2e:	f000 b8c1 	b.w	801adb4 <_write_r>

0801ac32 <__sseek>:
 801ac32:	b510      	push	{r4, lr}
 801ac34:	460c      	mov	r4, r1
 801ac36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac3a:	f000 f897 	bl	801ad6c <_lseek_r>
 801ac3e:	1c43      	adds	r3, r0, #1
 801ac40:	89a3      	ldrh	r3, [r4, #12]
 801ac42:	bf15      	itete	ne
 801ac44:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ac46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ac4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ac4e:	81a3      	strheq	r3, [r4, #12]
 801ac50:	bf18      	it	ne
 801ac52:	81a3      	strhne	r3, [r4, #12]
 801ac54:	bd10      	pop	{r4, pc}

0801ac56 <__sclose>:
 801ac56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac5a:	f000 b819 	b.w	801ac90 <_close_r>

0801ac5e <memcmp>:
 801ac5e:	b510      	push	{r4, lr}
 801ac60:	3901      	subs	r1, #1
 801ac62:	4402      	add	r2, r0
 801ac64:	4290      	cmp	r0, r2
 801ac66:	d101      	bne.n	801ac6c <memcmp+0xe>
 801ac68:	2000      	movs	r0, #0
 801ac6a:	e005      	b.n	801ac78 <memcmp+0x1a>
 801ac6c:	7803      	ldrb	r3, [r0, #0]
 801ac6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ac72:	42a3      	cmp	r3, r4
 801ac74:	d001      	beq.n	801ac7a <memcmp+0x1c>
 801ac76:	1b18      	subs	r0, r3, r4
 801ac78:	bd10      	pop	{r4, pc}
 801ac7a:	3001      	adds	r0, #1
 801ac7c:	e7f2      	b.n	801ac64 <memcmp+0x6>

0801ac7e <memset>:
 801ac7e:	4402      	add	r2, r0
 801ac80:	4603      	mov	r3, r0
 801ac82:	4293      	cmp	r3, r2
 801ac84:	d100      	bne.n	801ac88 <memset+0xa>
 801ac86:	4770      	bx	lr
 801ac88:	f803 1b01 	strb.w	r1, [r3], #1
 801ac8c:	e7f9      	b.n	801ac82 <memset+0x4>
	...

0801ac90 <_close_r>:
 801ac90:	b538      	push	{r3, r4, r5, lr}
 801ac92:	4d06      	ldr	r5, [pc, #24]	@ (801acac <_close_r+0x1c>)
 801ac94:	2300      	movs	r3, #0
 801ac96:	4604      	mov	r4, r0
 801ac98:	4608      	mov	r0, r1
 801ac9a:	602b      	str	r3, [r5, #0]
 801ac9c:	f7e6 ff00 	bl	8001aa0 <_close>
 801aca0:	1c43      	adds	r3, r0, #1
 801aca2:	d102      	bne.n	801acaa <_close_r+0x1a>
 801aca4:	682b      	ldr	r3, [r5, #0]
 801aca6:	b103      	cbz	r3, 801acaa <_close_r+0x1a>
 801aca8:	6023      	str	r3, [r4, #0]
 801acaa:	bd38      	pop	{r3, r4, r5, pc}
 801acac:	24014e58 	.word	0x24014e58

0801acb0 <_reclaim_reent>:
 801acb0:	4b2d      	ldr	r3, [pc, #180]	@ (801ad68 <_reclaim_reent+0xb8>)
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	4283      	cmp	r3, r0
 801acb6:	b570      	push	{r4, r5, r6, lr}
 801acb8:	4604      	mov	r4, r0
 801acba:	d053      	beq.n	801ad64 <_reclaim_reent+0xb4>
 801acbc:	69c3      	ldr	r3, [r0, #28]
 801acbe:	b31b      	cbz	r3, 801ad08 <_reclaim_reent+0x58>
 801acc0:	68db      	ldr	r3, [r3, #12]
 801acc2:	b163      	cbz	r3, 801acde <_reclaim_reent+0x2e>
 801acc4:	2500      	movs	r5, #0
 801acc6:	69e3      	ldr	r3, [r4, #28]
 801acc8:	68db      	ldr	r3, [r3, #12]
 801acca:	5959      	ldr	r1, [r3, r5]
 801accc:	b9b1      	cbnz	r1, 801acfc <_reclaim_reent+0x4c>
 801acce:	3504      	adds	r5, #4
 801acd0:	2d80      	cmp	r5, #128	@ 0x80
 801acd2:	d1f8      	bne.n	801acc6 <_reclaim_reent+0x16>
 801acd4:	69e3      	ldr	r3, [r4, #28]
 801acd6:	4620      	mov	r0, r4
 801acd8:	68d9      	ldr	r1, [r3, #12]
 801acda:	f000 f8d1 	bl	801ae80 <_free_r>
 801acde:	69e3      	ldr	r3, [r4, #28]
 801ace0:	6819      	ldr	r1, [r3, #0]
 801ace2:	b111      	cbz	r1, 801acea <_reclaim_reent+0x3a>
 801ace4:	4620      	mov	r0, r4
 801ace6:	f000 f8cb 	bl	801ae80 <_free_r>
 801acea:	69e3      	ldr	r3, [r4, #28]
 801acec:	689d      	ldr	r5, [r3, #8]
 801acee:	b15d      	cbz	r5, 801ad08 <_reclaim_reent+0x58>
 801acf0:	4629      	mov	r1, r5
 801acf2:	4620      	mov	r0, r4
 801acf4:	682d      	ldr	r5, [r5, #0]
 801acf6:	f000 f8c3 	bl	801ae80 <_free_r>
 801acfa:	e7f8      	b.n	801acee <_reclaim_reent+0x3e>
 801acfc:	680e      	ldr	r6, [r1, #0]
 801acfe:	4620      	mov	r0, r4
 801ad00:	f000 f8be 	bl	801ae80 <_free_r>
 801ad04:	4631      	mov	r1, r6
 801ad06:	e7e1      	b.n	801accc <_reclaim_reent+0x1c>
 801ad08:	6961      	ldr	r1, [r4, #20]
 801ad0a:	b111      	cbz	r1, 801ad12 <_reclaim_reent+0x62>
 801ad0c:	4620      	mov	r0, r4
 801ad0e:	f000 f8b7 	bl	801ae80 <_free_r>
 801ad12:	69e1      	ldr	r1, [r4, #28]
 801ad14:	b111      	cbz	r1, 801ad1c <_reclaim_reent+0x6c>
 801ad16:	4620      	mov	r0, r4
 801ad18:	f000 f8b2 	bl	801ae80 <_free_r>
 801ad1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ad1e:	b111      	cbz	r1, 801ad26 <_reclaim_reent+0x76>
 801ad20:	4620      	mov	r0, r4
 801ad22:	f000 f8ad 	bl	801ae80 <_free_r>
 801ad26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ad28:	b111      	cbz	r1, 801ad30 <_reclaim_reent+0x80>
 801ad2a:	4620      	mov	r0, r4
 801ad2c:	f000 f8a8 	bl	801ae80 <_free_r>
 801ad30:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801ad32:	b111      	cbz	r1, 801ad3a <_reclaim_reent+0x8a>
 801ad34:	4620      	mov	r0, r4
 801ad36:	f000 f8a3 	bl	801ae80 <_free_r>
 801ad3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801ad3c:	b111      	cbz	r1, 801ad44 <_reclaim_reent+0x94>
 801ad3e:	4620      	mov	r0, r4
 801ad40:	f000 f89e 	bl	801ae80 <_free_r>
 801ad44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801ad46:	b111      	cbz	r1, 801ad4e <_reclaim_reent+0x9e>
 801ad48:	4620      	mov	r0, r4
 801ad4a:	f000 f899 	bl	801ae80 <_free_r>
 801ad4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801ad50:	b111      	cbz	r1, 801ad58 <_reclaim_reent+0xa8>
 801ad52:	4620      	mov	r0, r4
 801ad54:	f000 f894 	bl	801ae80 <_free_r>
 801ad58:	6a23      	ldr	r3, [r4, #32]
 801ad5a:	b11b      	cbz	r3, 801ad64 <_reclaim_reent+0xb4>
 801ad5c:	4620      	mov	r0, r4
 801ad5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad62:	4718      	bx	r3
 801ad64:	bd70      	pop	{r4, r5, r6, pc}
 801ad66:	bf00      	nop
 801ad68:	24004a00 	.word	0x24004a00

0801ad6c <_lseek_r>:
 801ad6c:	b538      	push	{r3, r4, r5, lr}
 801ad6e:	4d07      	ldr	r5, [pc, #28]	@ (801ad8c <_lseek_r+0x20>)
 801ad70:	4604      	mov	r4, r0
 801ad72:	4608      	mov	r0, r1
 801ad74:	4611      	mov	r1, r2
 801ad76:	2200      	movs	r2, #0
 801ad78:	602a      	str	r2, [r5, #0]
 801ad7a:	461a      	mov	r2, r3
 801ad7c:	f7e6 feb7 	bl	8001aee <_lseek>
 801ad80:	1c43      	adds	r3, r0, #1
 801ad82:	d102      	bne.n	801ad8a <_lseek_r+0x1e>
 801ad84:	682b      	ldr	r3, [r5, #0]
 801ad86:	b103      	cbz	r3, 801ad8a <_lseek_r+0x1e>
 801ad88:	6023      	str	r3, [r4, #0]
 801ad8a:	bd38      	pop	{r3, r4, r5, pc}
 801ad8c:	24014e58 	.word	0x24014e58

0801ad90 <_read_r>:
 801ad90:	b538      	push	{r3, r4, r5, lr}
 801ad92:	4d07      	ldr	r5, [pc, #28]	@ (801adb0 <_read_r+0x20>)
 801ad94:	4604      	mov	r4, r0
 801ad96:	4608      	mov	r0, r1
 801ad98:	4611      	mov	r1, r2
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	602a      	str	r2, [r5, #0]
 801ad9e:	461a      	mov	r2, r3
 801ada0:	f7e6 fe45 	bl	8001a2e <_read>
 801ada4:	1c43      	adds	r3, r0, #1
 801ada6:	d102      	bne.n	801adae <_read_r+0x1e>
 801ada8:	682b      	ldr	r3, [r5, #0]
 801adaa:	b103      	cbz	r3, 801adae <_read_r+0x1e>
 801adac:	6023      	str	r3, [r4, #0]
 801adae:	bd38      	pop	{r3, r4, r5, pc}
 801adb0:	24014e58 	.word	0x24014e58

0801adb4 <_write_r>:
 801adb4:	b538      	push	{r3, r4, r5, lr}
 801adb6:	4d07      	ldr	r5, [pc, #28]	@ (801add4 <_write_r+0x20>)
 801adb8:	4604      	mov	r4, r0
 801adba:	4608      	mov	r0, r1
 801adbc:	4611      	mov	r1, r2
 801adbe:	2200      	movs	r2, #0
 801adc0:	602a      	str	r2, [r5, #0]
 801adc2:	461a      	mov	r2, r3
 801adc4:	f7e6 fe50 	bl	8001a68 <_write>
 801adc8:	1c43      	adds	r3, r0, #1
 801adca:	d102      	bne.n	801add2 <_write_r+0x1e>
 801adcc:	682b      	ldr	r3, [r5, #0]
 801adce:	b103      	cbz	r3, 801add2 <_write_r+0x1e>
 801add0:	6023      	str	r3, [r4, #0]
 801add2:	bd38      	pop	{r3, r4, r5, pc}
 801add4:	24014e58 	.word	0x24014e58

0801add8 <__libc_init_array>:
 801add8:	b570      	push	{r4, r5, r6, lr}
 801adda:	4d0d      	ldr	r5, [pc, #52]	@ (801ae10 <__libc_init_array+0x38>)
 801addc:	4c0d      	ldr	r4, [pc, #52]	@ (801ae14 <__libc_init_array+0x3c>)
 801adde:	1b64      	subs	r4, r4, r5
 801ade0:	10a4      	asrs	r4, r4, #2
 801ade2:	2600      	movs	r6, #0
 801ade4:	42a6      	cmp	r6, r4
 801ade6:	d109      	bne.n	801adfc <__libc_init_array+0x24>
 801ade8:	4d0b      	ldr	r5, [pc, #44]	@ (801ae18 <__libc_init_array+0x40>)
 801adea:	4c0c      	ldr	r4, [pc, #48]	@ (801ae1c <__libc_init_array+0x44>)
 801adec:	f000 fe48 	bl	801ba80 <_init>
 801adf0:	1b64      	subs	r4, r4, r5
 801adf2:	10a4      	asrs	r4, r4, #2
 801adf4:	2600      	movs	r6, #0
 801adf6:	42a6      	cmp	r6, r4
 801adf8:	d105      	bne.n	801ae06 <__libc_init_array+0x2e>
 801adfa:	bd70      	pop	{r4, r5, r6, pc}
 801adfc:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae00:	4798      	blx	r3
 801ae02:	3601      	adds	r6, #1
 801ae04:	e7ee      	b.n	801ade4 <__libc_init_array+0xc>
 801ae06:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae0a:	4798      	blx	r3
 801ae0c:	3601      	adds	r6, #1
 801ae0e:	e7f2      	b.n	801adf6 <__libc_init_array+0x1e>
 801ae10:	0801e908 	.word	0x0801e908
 801ae14:	0801e908 	.word	0x0801e908
 801ae18:	0801e908 	.word	0x0801e908
 801ae1c:	0801e90c 	.word	0x0801e90c

0801ae20 <__retarget_lock_init_recursive>:
 801ae20:	4770      	bx	lr

0801ae22 <__retarget_lock_acquire_recursive>:
 801ae22:	4770      	bx	lr

0801ae24 <__retarget_lock_release_recursive>:
 801ae24:	4770      	bx	lr

0801ae26 <memcpy>:
 801ae26:	440a      	add	r2, r1
 801ae28:	4291      	cmp	r1, r2
 801ae2a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ae2e:	d100      	bne.n	801ae32 <memcpy+0xc>
 801ae30:	4770      	bx	lr
 801ae32:	b510      	push	{r4, lr}
 801ae34:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae38:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ae3c:	4291      	cmp	r1, r2
 801ae3e:	d1f9      	bne.n	801ae34 <memcpy+0xe>
 801ae40:	bd10      	pop	{r4, pc}
	...

0801ae44 <__assert_func>:
 801ae44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae46:	4614      	mov	r4, r2
 801ae48:	461a      	mov	r2, r3
 801ae4a:	4b09      	ldr	r3, [pc, #36]	@ (801ae70 <__assert_func+0x2c>)
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	4605      	mov	r5, r0
 801ae50:	68d8      	ldr	r0, [r3, #12]
 801ae52:	b14c      	cbz	r4, 801ae68 <__assert_func+0x24>
 801ae54:	4b07      	ldr	r3, [pc, #28]	@ (801ae74 <__assert_func+0x30>)
 801ae56:	9100      	str	r1, [sp, #0]
 801ae58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ae5c:	4906      	ldr	r1, [pc, #24]	@ (801ae78 <__assert_func+0x34>)
 801ae5e:	462b      	mov	r3, r5
 801ae60:	f000 fc88 	bl	801b774 <fiprintf>
 801ae64:	f000 fd3c 	bl	801b8e0 <abort>
 801ae68:	4b04      	ldr	r3, [pc, #16]	@ (801ae7c <__assert_func+0x38>)
 801ae6a:	461c      	mov	r4, r3
 801ae6c:	e7f3      	b.n	801ae56 <__assert_func+0x12>
 801ae6e:	bf00      	nop
 801ae70:	24004a00 	.word	0x24004a00
 801ae74:	0801e891 	.word	0x0801e891
 801ae78:	0801e89e 	.word	0x0801e89e
 801ae7c:	0801e8cc 	.word	0x0801e8cc

0801ae80 <_free_r>:
 801ae80:	b538      	push	{r3, r4, r5, lr}
 801ae82:	4605      	mov	r5, r0
 801ae84:	2900      	cmp	r1, #0
 801ae86:	d041      	beq.n	801af0c <_free_r+0x8c>
 801ae88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae8c:	1f0c      	subs	r4, r1, #4
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	bfb8      	it	lt
 801ae92:	18e4      	addlt	r4, r4, r3
 801ae94:	f000 f8e8 	bl	801b068 <__malloc_lock>
 801ae98:	4a1d      	ldr	r2, [pc, #116]	@ (801af10 <_free_r+0x90>)
 801ae9a:	6813      	ldr	r3, [r2, #0]
 801ae9c:	b933      	cbnz	r3, 801aeac <_free_r+0x2c>
 801ae9e:	6063      	str	r3, [r4, #4]
 801aea0:	6014      	str	r4, [r2, #0]
 801aea2:	4628      	mov	r0, r5
 801aea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aea8:	f000 b8e4 	b.w	801b074 <__malloc_unlock>
 801aeac:	42a3      	cmp	r3, r4
 801aeae:	d908      	bls.n	801aec2 <_free_r+0x42>
 801aeb0:	6820      	ldr	r0, [r4, #0]
 801aeb2:	1821      	adds	r1, r4, r0
 801aeb4:	428b      	cmp	r3, r1
 801aeb6:	bf01      	itttt	eq
 801aeb8:	6819      	ldreq	r1, [r3, #0]
 801aeba:	685b      	ldreq	r3, [r3, #4]
 801aebc:	1809      	addeq	r1, r1, r0
 801aebe:	6021      	streq	r1, [r4, #0]
 801aec0:	e7ed      	b.n	801ae9e <_free_r+0x1e>
 801aec2:	461a      	mov	r2, r3
 801aec4:	685b      	ldr	r3, [r3, #4]
 801aec6:	b10b      	cbz	r3, 801aecc <_free_r+0x4c>
 801aec8:	42a3      	cmp	r3, r4
 801aeca:	d9fa      	bls.n	801aec2 <_free_r+0x42>
 801aecc:	6811      	ldr	r1, [r2, #0]
 801aece:	1850      	adds	r0, r2, r1
 801aed0:	42a0      	cmp	r0, r4
 801aed2:	d10b      	bne.n	801aeec <_free_r+0x6c>
 801aed4:	6820      	ldr	r0, [r4, #0]
 801aed6:	4401      	add	r1, r0
 801aed8:	1850      	adds	r0, r2, r1
 801aeda:	4283      	cmp	r3, r0
 801aedc:	6011      	str	r1, [r2, #0]
 801aede:	d1e0      	bne.n	801aea2 <_free_r+0x22>
 801aee0:	6818      	ldr	r0, [r3, #0]
 801aee2:	685b      	ldr	r3, [r3, #4]
 801aee4:	6053      	str	r3, [r2, #4]
 801aee6:	4408      	add	r0, r1
 801aee8:	6010      	str	r0, [r2, #0]
 801aeea:	e7da      	b.n	801aea2 <_free_r+0x22>
 801aeec:	d902      	bls.n	801aef4 <_free_r+0x74>
 801aeee:	230c      	movs	r3, #12
 801aef0:	602b      	str	r3, [r5, #0]
 801aef2:	e7d6      	b.n	801aea2 <_free_r+0x22>
 801aef4:	6820      	ldr	r0, [r4, #0]
 801aef6:	1821      	adds	r1, r4, r0
 801aef8:	428b      	cmp	r3, r1
 801aefa:	bf04      	itt	eq
 801aefc:	6819      	ldreq	r1, [r3, #0]
 801aefe:	685b      	ldreq	r3, [r3, #4]
 801af00:	6063      	str	r3, [r4, #4]
 801af02:	bf04      	itt	eq
 801af04:	1809      	addeq	r1, r1, r0
 801af06:	6021      	streq	r1, [r4, #0]
 801af08:	6054      	str	r4, [r2, #4]
 801af0a:	e7ca      	b.n	801aea2 <_free_r+0x22>
 801af0c:	bd38      	pop	{r3, r4, r5, pc}
 801af0e:	bf00      	nop
 801af10:	24014e64 	.word	0x24014e64

0801af14 <malloc>:
 801af14:	4b02      	ldr	r3, [pc, #8]	@ (801af20 <malloc+0xc>)
 801af16:	4601      	mov	r1, r0
 801af18:	6818      	ldr	r0, [r3, #0]
 801af1a:	f000 b825 	b.w	801af68 <_malloc_r>
 801af1e:	bf00      	nop
 801af20:	24004a00 	.word	0x24004a00

0801af24 <sbrk_aligned>:
 801af24:	b570      	push	{r4, r5, r6, lr}
 801af26:	4e0f      	ldr	r6, [pc, #60]	@ (801af64 <sbrk_aligned+0x40>)
 801af28:	460c      	mov	r4, r1
 801af2a:	6831      	ldr	r1, [r6, #0]
 801af2c:	4605      	mov	r5, r0
 801af2e:	b911      	cbnz	r1, 801af36 <sbrk_aligned+0x12>
 801af30:	f000 fcc6 	bl	801b8c0 <_sbrk_r>
 801af34:	6030      	str	r0, [r6, #0]
 801af36:	4621      	mov	r1, r4
 801af38:	4628      	mov	r0, r5
 801af3a:	f000 fcc1 	bl	801b8c0 <_sbrk_r>
 801af3e:	1c43      	adds	r3, r0, #1
 801af40:	d103      	bne.n	801af4a <sbrk_aligned+0x26>
 801af42:	f04f 34ff 	mov.w	r4, #4294967295
 801af46:	4620      	mov	r0, r4
 801af48:	bd70      	pop	{r4, r5, r6, pc}
 801af4a:	1cc4      	adds	r4, r0, #3
 801af4c:	f024 0403 	bic.w	r4, r4, #3
 801af50:	42a0      	cmp	r0, r4
 801af52:	d0f8      	beq.n	801af46 <sbrk_aligned+0x22>
 801af54:	1a21      	subs	r1, r4, r0
 801af56:	4628      	mov	r0, r5
 801af58:	f000 fcb2 	bl	801b8c0 <_sbrk_r>
 801af5c:	3001      	adds	r0, #1
 801af5e:	d1f2      	bne.n	801af46 <sbrk_aligned+0x22>
 801af60:	e7ef      	b.n	801af42 <sbrk_aligned+0x1e>
 801af62:	bf00      	nop
 801af64:	24014e60 	.word	0x24014e60

0801af68 <_malloc_r>:
 801af68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af6c:	1ccd      	adds	r5, r1, #3
 801af6e:	f025 0503 	bic.w	r5, r5, #3
 801af72:	3508      	adds	r5, #8
 801af74:	2d0c      	cmp	r5, #12
 801af76:	bf38      	it	cc
 801af78:	250c      	movcc	r5, #12
 801af7a:	2d00      	cmp	r5, #0
 801af7c:	4606      	mov	r6, r0
 801af7e:	db01      	blt.n	801af84 <_malloc_r+0x1c>
 801af80:	42a9      	cmp	r1, r5
 801af82:	d904      	bls.n	801af8e <_malloc_r+0x26>
 801af84:	230c      	movs	r3, #12
 801af86:	6033      	str	r3, [r6, #0]
 801af88:	2000      	movs	r0, #0
 801af8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b064 <_malloc_r+0xfc>
 801af92:	f000 f869 	bl	801b068 <__malloc_lock>
 801af96:	f8d8 3000 	ldr.w	r3, [r8]
 801af9a:	461c      	mov	r4, r3
 801af9c:	bb44      	cbnz	r4, 801aff0 <_malloc_r+0x88>
 801af9e:	4629      	mov	r1, r5
 801afa0:	4630      	mov	r0, r6
 801afa2:	f7ff ffbf 	bl	801af24 <sbrk_aligned>
 801afa6:	1c43      	adds	r3, r0, #1
 801afa8:	4604      	mov	r4, r0
 801afaa:	d158      	bne.n	801b05e <_malloc_r+0xf6>
 801afac:	f8d8 4000 	ldr.w	r4, [r8]
 801afb0:	4627      	mov	r7, r4
 801afb2:	2f00      	cmp	r7, #0
 801afb4:	d143      	bne.n	801b03e <_malloc_r+0xd6>
 801afb6:	2c00      	cmp	r4, #0
 801afb8:	d04b      	beq.n	801b052 <_malloc_r+0xea>
 801afba:	6823      	ldr	r3, [r4, #0]
 801afbc:	4639      	mov	r1, r7
 801afbe:	4630      	mov	r0, r6
 801afc0:	eb04 0903 	add.w	r9, r4, r3
 801afc4:	f000 fc7c 	bl	801b8c0 <_sbrk_r>
 801afc8:	4581      	cmp	r9, r0
 801afca:	d142      	bne.n	801b052 <_malloc_r+0xea>
 801afcc:	6821      	ldr	r1, [r4, #0]
 801afce:	1a6d      	subs	r5, r5, r1
 801afd0:	4629      	mov	r1, r5
 801afd2:	4630      	mov	r0, r6
 801afd4:	f7ff ffa6 	bl	801af24 <sbrk_aligned>
 801afd8:	3001      	adds	r0, #1
 801afda:	d03a      	beq.n	801b052 <_malloc_r+0xea>
 801afdc:	6823      	ldr	r3, [r4, #0]
 801afde:	442b      	add	r3, r5
 801afe0:	6023      	str	r3, [r4, #0]
 801afe2:	f8d8 3000 	ldr.w	r3, [r8]
 801afe6:	685a      	ldr	r2, [r3, #4]
 801afe8:	bb62      	cbnz	r2, 801b044 <_malloc_r+0xdc>
 801afea:	f8c8 7000 	str.w	r7, [r8]
 801afee:	e00f      	b.n	801b010 <_malloc_r+0xa8>
 801aff0:	6822      	ldr	r2, [r4, #0]
 801aff2:	1b52      	subs	r2, r2, r5
 801aff4:	d420      	bmi.n	801b038 <_malloc_r+0xd0>
 801aff6:	2a0b      	cmp	r2, #11
 801aff8:	d917      	bls.n	801b02a <_malloc_r+0xc2>
 801affa:	1961      	adds	r1, r4, r5
 801affc:	42a3      	cmp	r3, r4
 801affe:	6025      	str	r5, [r4, #0]
 801b000:	bf18      	it	ne
 801b002:	6059      	strne	r1, [r3, #4]
 801b004:	6863      	ldr	r3, [r4, #4]
 801b006:	bf08      	it	eq
 801b008:	f8c8 1000 	streq.w	r1, [r8]
 801b00c:	5162      	str	r2, [r4, r5]
 801b00e:	604b      	str	r3, [r1, #4]
 801b010:	4630      	mov	r0, r6
 801b012:	f000 f82f 	bl	801b074 <__malloc_unlock>
 801b016:	f104 000b 	add.w	r0, r4, #11
 801b01a:	1d23      	adds	r3, r4, #4
 801b01c:	f020 0007 	bic.w	r0, r0, #7
 801b020:	1ac2      	subs	r2, r0, r3
 801b022:	bf1c      	itt	ne
 801b024:	1a1b      	subne	r3, r3, r0
 801b026:	50a3      	strne	r3, [r4, r2]
 801b028:	e7af      	b.n	801af8a <_malloc_r+0x22>
 801b02a:	6862      	ldr	r2, [r4, #4]
 801b02c:	42a3      	cmp	r3, r4
 801b02e:	bf0c      	ite	eq
 801b030:	f8c8 2000 	streq.w	r2, [r8]
 801b034:	605a      	strne	r2, [r3, #4]
 801b036:	e7eb      	b.n	801b010 <_malloc_r+0xa8>
 801b038:	4623      	mov	r3, r4
 801b03a:	6864      	ldr	r4, [r4, #4]
 801b03c:	e7ae      	b.n	801af9c <_malloc_r+0x34>
 801b03e:	463c      	mov	r4, r7
 801b040:	687f      	ldr	r7, [r7, #4]
 801b042:	e7b6      	b.n	801afb2 <_malloc_r+0x4a>
 801b044:	461a      	mov	r2, r3
 801b046:	685b      	ldr	r3, [r3, #4]
 801b048:	42a3      	cmp	r3, r4
 801b04a:	d1fb      	bne.n	801b044 <_malloc_r+0xdc>
 801b04c:	2300      	movs	r3, #0
 801b04e:	6053      	str	r3, [r2, #4]
 801b050:	e7de      	b.n	801b010 <_malloc_r+0xa8>
 801b052:	230c      	movs	r3, #12
 801b054:	6033      	str	r3, [r6, #0]
 801b056:	4630      	mov	r0, r6
 801b058:	f000 f80c 	bl	801b074 <__malloc_unlock>
 801b05c:	e794      	b.n	801af88 <_malloc_r+0x20>
 801b05e:	6005      	str	r5, [r0, #0]
 801b060:	e7d6      	b.n	801b010 <_malloc_r+0xa8>
 801b062:	bf00      	nop
 801b064:	24014e64 	.word	0x24014e64

0801b068 <__malloc_lock>:
 801b068:	4801      	ldr	r0, [pc, #4]	@ (801b070 <__malloc_lock+0x8>)
 801b06a:	f7ff beda 	b.w	801ae22 <__retarget_lock_acquire_recursive>
 801b06e:	bf00      	nop
 801b070:	24014e5c 	.word	0x24014e5c

0801b074 <__malloc_unlock>:
 801b074:	4801      	ldr	r0, [pc, #4]	@ (801b07c <__malloc_unlock+0x8>)
 801b076:	f7ff bed5 	b.w	801ae24 <__retarget_lock_release_recursive>
 801b07a:	bf00      	nop
 801b07c:	24014e5c 	.word	0x24014e5c

0801b080 <__sfputc_r>:
 801b080:	6893      	ldr	r3, [r2, #8]
 801b082:	3b01      	subs	r3, #1
 801b084:	2b00      	cmp	r3, #0
 801b086:	b410      	push	{r4}
 801b088:	6093      	str	r3, [r2, #8]
 801b08a:	da08      	bge.n	801b09e <__sfputc_r+0x1e>
 801b08c:	6994      	ldr	r4, [r2, #24]
 801b08e:	42a3      	cmp	r3, r4
 801b090:	db01      	blt.n	801b096 <__sfputc_r+0x16>
 801b092:	290a      	cmp	r1, #10
 801b094:	d103      	bne.n	801b09e <__sfputc_r+0x1e>
 801b096:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b09a:	f000 bb7d 	b.w	801b798 <__swbuf_r>
 801b09e:	6813      	ldr	r3, [r2, #0]
 801b0a0:	1c58      	adds	r0, r3, #1
 801b0a2:	6010      	str	r0, [r2, #0]
 801b0a4:	7019      	strb	r1, [r3, #0]
 801b0a6:	4608      	mov	r0, r1
 801b0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0ac:	4770      	bx	lr

0801b0ae <__sfputs_r>:
 801b0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0b0:	4606      	mov	r6, r0
 801b0b2:	460f      	mov	r7, r1
 801b0b4:	4614      	mov	r4, r2
 801b0b6:	18d5      	adds	r5, r2, r3
 801b0b8:	42ac      	cmp	r4, r5
 801b0ba:	d101      	bne.n	801b0c0 <__sfputs_r+0x12>
 801b0bc:	2000      	movs	r0, #0
 801b0be:	e007      	b.n	801b0d0 <__sfputs_r+0x22>
 801b0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0c4:	463a      	mov	r2, r7
 801b0c6:	4630      	mov	r0, r6
 801b0c8:	f7ff ffda 	bl	801b080 <__sfputc_r>
 801b0cc:	1c43      	adds	r3, r0, #1
 801b0ce:	d1f3      	bne.n	801b0b8 <__sfputs_r+0xa>
 801b0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b0d4 <_vfiprintf_r>:
 801b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0d8:	460d      	mov	r5, r1
 801b0da:	b09d      	sub	sp, #116	@ 0x74
 801b0dc:	4614      	mov	r4, r2
 801b0de:	4698      	mov	r8, r3
 801b0e0:	4606      	mov	r6, r0
 801b0e2:	b118      	cbz	r0, 801b0ec <_vfiprintf_r+0x18>
 801b0e4:	6a03      	ldr	r3, [r0, #32]
 801b0e6:	b90b      	cbnz	r3, 801b0ec <_vfiprintf_r+0x18>
 801b0e8:	f7ff fd2e 	bl	801ab48 <__sinit>
 801b0ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b0ee:	07d9      	lsls	r1, r3, #31
 801b0f0:	d405      	bmi.n	801b0fe <_vfiprintf_r+0x2a>
 801b0f2:	89ab      	ldrh	r3, [r5, #12]
 801b0f4:	059a      	lsls	r2, r3, #22
 801b0f6:	d402      	bmi.n	801b0fe <_vfiprintf_r+0x2a>
 801b0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b0fa:	f7ff fe92 	bl	801ae22 <__retarget_lock_acquire_recursive>
 801b0fe:	89ab      	ldrh	r3, [r5, #12]
 801b100:	071b      	lsls	r3, r3, #28
 801b102:	d501      	bpl.n	801b108 <_vfiprintf_r+0x34>
 801b104:	692b      	ldr	r3, [r5, #16]
 801b106:	b99b      	cbnz	r3, 801b130 <_vfiprintf_r+0x5c>
 801b108:	4629      	mov	r1, r5
 801b10a:	4630      	mov	r0, r6
 801b10c:	f000 fb82 	bl	801b814 <__swsetup_r>
 801b110:	b170      	cbz	r0, 801b130 <_vfiprintf_r+0x5c>
 801b112:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b114:	07dc      	lsls	r4, r3, #31
 801b116:	d504      	bpl.n	801b122 <_vfiprintf_r+0x4e>
 801b118:	f04f 30ff 	mov.w	r0, #4294967295
 801b11c:	b01d      	add	sp, #116	@ 0x74
 801b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b122:	89ab      	ldrh	r3, [r5, #12]
 801b124:	0598      	lsls	r0, r3, #22
 801b126:	d4f7      	bmi.n	801b118 <_vfiprintf_r+0x44>
 801b128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b12a:	f7ff fe7b 	bl	801ae24 <__retarget_lock_release_recursive>
 801b12e:	e7f3      	b.n	801b118 <_vfiprintf_r+0x44>
 801b130:	2300      	movs	r3, #0
 801b132:	9309      	str	r3, [sp, #36]	@ 0x24
 801b134:	2320      	movs	r3, #32
 801b136:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b13a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b13e:	2330      	movs	r3, #48	@ 0x30
 801b140:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b2f0 <_vfiprintf_r+0x21c>
 801b144:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b148:	f04f 0901 	mov.w	r9, #1
 801b14c:	4623      	mov	r3, r4
 801b14e:	469a      	mov	sl, r3
 801b150:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b154:	b10a      	cbz	r2, 801b15a <_vfiprintf_r+0x86>
 801b156:	2a25      	cmp	r2, #37	@ 0x25
 801b158:	d1f9      	bne.n	801b14e <_vfiprintf_r+0x7a>
 801b15a:	ebba 0b04 	subs.w	fp, sl, r4
 801b15e:	d00b      	beq.n	801b178 <_vfiprintf_r+0xa4>
 801b160:	465b      	mov	r3, fp
 801b162:	4622      	mov	r2, r4
 801b164:	4629      	mov	r1, r5
 801b166:	4630      	mov	r0, r6
 801b168:	f7ff ffa1 	bl	801b0ae <__sfputs_r>
 801b16c:	3001      	adds	r0, #1
 801b16e:	f000 80a7 	beq.w	801b2c0 <_vfiprintf_r+0x1ec>
 801b172:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b174:	445a      	add	r2, fp
 801b176:	9209      	str	r2, [sp, #36]	@ 0x24
 801b178:	f89a 3000 	ldrb.w	r3, [sl]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	f000 809f 	beq.w	801b2c0 <_vfiprintf_r+0x1ec>
 801b182:	2300      	movs	r3, #0
 801b184:	f04f 32ff 	mov.w	r2, #4294967295
 801b188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b18c:	f10a 0a01 	add.w	sl, sl, #1
 801b190:	9304      	str	r3, [sp, #16]
 801b192:	9307      	str	r3, [sp, #28]
 801b194:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b198:	931a      	str	r3, [sp, #104]	@ 0x68
 801b19a:	4654      	mov	r4, sl
 801b19c:	2205      	movs	r2, #5
 801b19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1a2:	4853      	ldr	r0, [pc, #332]	@ (801b2f0 <_vfiprintf_r+0x21c>)
 801b1a4:	f7e5 f8b4 	bl	8000310 <memchr>
 801b1a8:	9a04      	ldr	r2, [sp, #16]
 801b1aa:	b9d8      	cbnz	r0, 801b1e4 <_vfiprintf_r+0x110>
 801b1ac:	06d1      	lsls	r1, r2, #27
 801b1ae:	bf44      	itt	mi
 801b1b0:	2320      	movmi	r3, #32
 801b1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b1b6:	0713      	lsls	r3, r2, #28
 801b1b8:	bf44      	itt	mi
 801b1ba:	232b      	movmi	r3, #43	@ 0x2b
 801b1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b1c0:	f89a 3000 	ldrb.w	r3, [sl]
 801b1c4:	2b2a      	cmp	r3, #42	@ 0x2a
 801b1c6:	d015      	beq.n	801b1f4 <_vfiprintf_r+0x120>
 801b1c8:	9a07      	ldr	r2, [sp, #28]
 801b1ca:	4654      	mov	r4, sl
 801b1cc:	2000      	movs	r0, #0
 801b1ce:	f04f 0c0a 	mov.w	ip, #10
 801b1d2:	4621      	mov	r1, r4
 801b1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b1d8:	3b30      	subs	r3, #48	@ 0x30
 801b1da:	2b09      	cmp	r3, #9
 801b1dc:	d94b      	bls.n	801b276 <_vfiprintf_r+0x1a2>
 801b1de:	b1b0      	cbz	r0, 801b20e <_vfiprintf_r+0x13a>
 801b1e0:	9207      	str	r2, [sp, #28]
 801b1e2:	e014      	b.n	801b20e <_vfiprintf_r+0x13a>
 801b1e4:	eba0 0308 	sub.w	r3, r0, r8
 801b1e8:	fa09 f303 	lsl.w	r3, r9, r3
 801b1ec:	4313      	orrs	r3, r2
 801b1ee:	9304      	str	r3, [sp, #16]
 801b1f0:	46a2      	mov	sl, r4
 801b1f2:	e7d2      	b.n	801b19a <_vfiprintf_r+0xc6>
 801b1f4:	9b03      	ldr	r3, [sp, #12]
 801b1f6:	1d19      	adds	r1, r3, #4
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	9103      	str	r1, [sp, #12]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	bfbb      	ittet	lt
 801b200:	425b      	neglt	r3, r3
 801b202:	f042 0202 	orrlt.w	r2, r2, #2
 801b206:	9307      	strge	r3, [sp, #28]
 801b208:	9307      	strlt	r3, [sp, #28]
 801b20a:	bfb8      	it	lt
 801b20c:	9204      	strlt	r2, [sp, #16]
 801b20e:	7823      	ldrb	r3, [r4, #0]
 801b210:	2b2e      	cmp	r3, #46	@ 0x2e
 801b212:	d10a      	bne.n	801b22a <_vfiprintf_r+0x156>
 801b214:	7863      	ldrb	r3, [r4, #1]
 801b216:	2b2a      	cmp	r3, #42	@ 0x2a
 801b218:	d132      	bne.n	801b280 <_vfiprintf_r+0x1ac>
 801b21a:	9b03      	ldr	r3, [sp, #12]
 801b21c:	1d1a      	adds	r2, r3, #4
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	9203      	str	r2, [sp, #12]
 801b222:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b226:	3402      	adds	r4, #2
 801b228:	9305      	str	r3, [sp, #20]
 801b22a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b300 <_vfiprintf_r+0x22c>
 801b22e:	7821      	ldrb	r1, [r4, #0]
 801b230:	2203      	movs	r2, #3
 801b232:	4650      	mov	r0, sl
 801b234:	f7e5 f86c 	bl	8000310 <memchr>
 801b238:	b138      	cbz	r0, 801b24a <_vfiprintf_r+0x176>
 801b23a:	9b04      	ldr	r3, [sp, #16]
 801b23c:	eba0 000a 	sub.w	r0, r0, sl
 801b240:	2240      	movs	r2, #64	@ 0x40
 801b242:	4082      	lsls	r2, r0
 801b244:	4313      	orrs	r3, r2
 801b246:	3401      	adds	r4, #1
 801b248:	9304      	str	r3, [sp, #16]
 801b24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b24e:	4829      	ldr	r0, [pc, #164]	@ (801b2f4 <_vfiprintf_r+0x220>)
 801b250:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b254:	2206      	movs	r2, #6
 801b256:	f7e5 f85b 	bl	8000310 <memchr>
 801b25a:	2800      	cmp	r0, #0
 801b25c:	d03f      	beq.n	801b2de <_vfiprintf_r+0x20a>
 801b25e:	4b26      	ldr	r3, [pc, #152]	@ (801b2f8 <_vfiprintf_r+0x224>)
 801b260:	bb1b      	cbnz	r3, 801b2aa <_vfiprintf_r+0x1d6>
 801b262:	9b03      	ldr	r3, [sp, #12]
 801b264:	3307      	adds	r3, #7
 801b266:	f023 0307 	bic.w	r3, r3, #7
 801b26a:	3308      	adds	r3, #8
 801b26c:	9303      	str	r3, [sp, #12]
 801b26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b270:	443b      	add	r3, r7
 801b272:	9309      	str	r3, [sp, #36]	@ 0x24
 801b274:	e76a      	b.n	801b14c <_vfiprintf_r+0x78>
 801b276:	fb0c 3202 	mla	r2, ip, r2, r3
 801b27a:	460c      	mov	r4, r1
 801b27c:	2001      	movs	r0, #1
 801b27e:	e7a8      	b.n	801b1d2 <_vfiprintf_r+0xfe>
 801b280:	2300      	movs	r3, #0
 801b282:	3401      	adds	r4, #1
 801b284:	9305      	str	r3, [sp, #20]
 801b286:	4619      	mov	r1, r3
 801b288:	f04f 0c0a 	mov.w	ip, #10
 801b28c:	4620      	mov	r0, r4
 801b28e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b292:	3a30      	subs	r2, #48	@ 0x30
 801b294:	2a09      	cmp	r2, #9
 801b296:	d903      	bls.n	801b2a0 <_vfiprintf_r+0x1cc>
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d0c6      	beq.n	801b22a <_vfiprintf_r+0x156>
 801b29c:	9105      	str	r1, [sp, #20]
 801b29e:	e7c4      	b.n	801b22a <_vfiprintf_r+0x156>
 801b2a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b2a4:	4604      	mov	r4, r0
 801b2a6:	2301      	movs	r3, #1
 801b2a8:	e7f0      	b.n	801b28c <_vfiprintf_r+0x1b8>
 801b2aa:	ab03      	add	r3, sp, #12
 801b2ac:	9300      	str	r3, [sp, #0]
 801b2ae:	462a      	mov	r2, r5
 801b2b0:	4b12      	ldr	r3, [pc, #72]	@ (801b2fc <_vfiprintf_r+0x228>)
 801b2b2:	a904      	add	r1, sp, #16
 801b2b4:	4630      	mov	r0, r6
 801b2b6:	f3af 8000 	nop.w
 801b2ba:	4607      	mov	r7, r0
 801b2bc:	1c78      	adds	r0, r7, #1
 801b2be:	d1d6      	bne.n	801b26e <_vfiprintf_r+0x19a>
 801b2c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b2c2:	07d9      	lsls	r1, r3, #31
 801b2c4:	d405      	bmi.n	801b2d2 <_vfiprintf_r+0x1fe>
 801b2c6:	89ab      	ldrh	r3, [r5, #12]
 801b2c8:	059a      	lsls	r2, r3, #22
 801b2ca:	d402      	bmi.n	801b2d2 <_vfiprintf_r+0x1fe>
 801b2cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b2ce:	f7ff fda9 	bl	801ae24 <__retarget_lock_release_recursive>
 801b2d2:	89ab      	ldrh	r3, [r5, #12]
 801b2d4:	065b      	lsls	r3, r3, #25
 801b2d6:	f53f af1f 	bmi.w	801b118 <_vfiprintf_r+0x44>
 801b2da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b2dc:	e71e      	b.n	801b11c <_vfiprintf_r+0x48>
 801b2de:	ab03      	add	r3, sp, #12
 801b2e0:	9300      	str	r3, [sp, #0]
 801b2e2:	462a      	mov	r2, r5
 801b2e4:	4b05      	ldr	r3, [pc, #20]	@ (801b2fc <_vfiprintf_r+0x228>)
 801b2e6:	a904      	add	r1, sp, #16
 801b2e8:	4630      	mov	r0, r6
 801b2ea:	f000 f879 	bl	801b3e0 <_printf_i>
 801b2ee:	e7e4      	b.n	801b2ba <_vfiprintf_r+0x1e6>
 801b2f0:	0801e8cd 	.word	0x0801e8cd
 801b2f4:	0801e8d7 	.word	0x0801e8d7
 801b2f8:	00000000 	.word	0x00000000
 801b2fc:	0801b0af 	.word	0x0801b0af
 801b300:	0801e8d3 	.word	0x0801e8d3

0801b304 <_printf_common>:
 801b304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b308:	4616      	mov	r6, r2
 801b30a:	4698      	mov	r8, r3
 801b30c:	688a      	ldr	r2, [r1, #8]
 801b30e:	690b      	ldr	r3, [r1, #16]
 801b310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b314:	4293      	cmp	r3, r2
 801b316:	bfb8      	it	lt
 801b318:	4613      	movlt	r3, r2
 801b31a:	6033      	str	r3, [r6, #0]
 801b31c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b320:	4607      	mov	r7, r0
 801b322:	460c      	mov	r4, r1
 801b324:	b10a      	cbz	r2, 801b32a <_printf_common+0x26>
 801b326:	3301      	adds	r3, #1
 801b328:	6033      	str	r3, [r6, #0]
 801b32a:	6823      	ldr	r3, [r4, #0]
 801b32c:	0699      	lsls	r1, r3, #26
 801b32e:	bf42      	ittt	mi
 801b330:	6833      	ldrmi	r3, [r6, #0]
 801b332:	3302      	addmi	r3, #2
 801b334:	6033      	strmi	r3, [r6, #0]
 801b336:	6825      	ldr	r5, [r4, #0]
 801b338:	f015 0506 	ands.w	r5, r5, #6
 801b33c:	d106      	bne.n	801b34c <_printf_common+0x48>
 801b33e:	f104 0a19 	add.w	sl, r4, #25
 801b342:	68e3      	ldr	r3, [r4, #12]
 801b344:	6832      	ldr	r2, [r6, #0]
 801b346:	1a9b      	subs	r3, r3, r2
 801b348:	42ab      	cmp	r3, r5
 801b34a:	dc26      	bgt.n	801b39a <_printf_common+0x96>
 801b34c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b350:	6822      	ldr	r2, [r4, #0]
 801b352:	3b00      	subs	r3, #0
 801b354:	bf18      	it	ne
 801b356:	2301      	movne	r3, #1
 801b358:	0692      	lsls	r2, r2, #26
 801b35a:	d42b      	bmi.n	801b3b4 <_printf_common+0xb0>
 801b35c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b360:	4641      	mov	r1, r8
 801b362:	4638      	mov	r0, r7
 801b364:	47c8      	blx	r9
 801b366:	3001      	adds	r0, #1
 801b368:	d01e      	beq.n	801b3a8 <_printf_common+0xa4>
 801b36a:	6823      	ldr	r3, [r4, #0]
 801b36c:	6922      	ldr	r2, [r4, #16]
 801b36e:	f003 0306 	and.w	r3, r3, #6
 801b372:	2b04      	cmp	r3, #4
 801b374:	bf02      	ittt	eq
 801b376:	68e5      	ldreq	r5, [r4, #12]
 801b378:	6833      	ldreq	r3, [r6, #0]
 801b37a:	1aed      	subeq	r5, r5, r3
 801b37c:	68a3      	ldr	r3, [r4, #8]
 801b37e:	bf0c      	ite	eq
 801b380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b384:	2500      	movne	r5, #0
 801b386:	4293      	cmp	r3, r2
 801b388:	bfc4      	itt	gt
 801b38a:	1a9b      	subgt	r3, r3, r2
 801b38c:	18ed      	addgt	r5, r5, r3
 801b38e:	2600      	movs	r6, #0
 801b390:	341a      	adds	r4, #26
 801b392:	42b5      	cmp	r5, r6
 801b394:	d11a      	bne.n	801b3cc <_printf_common+0xc8>
 801b396:	2000      	movs	r0, #0
 801b398:	e008      	b.n	801b3ac <_printf_common+0xa8>
 801b39a:	2301      	movs	r3, #1
 801b39c:	4652      	mov	r2, sl
 801b39e:	4641      	mov	r1, r8
 801b3a0:	4638      	mov	r0, r7
 801b3a2:	47c8      	blx	r9
 801b3a4:	3001      	adds	r0, #1
 801b3a6:	d103      	bne.n	801b3b0 <_printf_common+0xac>
 801b3a8:	f04f 30ff 	mov.w	r0, #4294967295
 801b3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3b0:	3501      	adds	r5, #1
 801b3b2:	e7c6      	b.n	801b342 <_printf_common+0x3e>
 801b3b4:	18e1      	adds	r1, r4, r3
 801b3b6:	1c5a      	adds	r2, r3, #1
 801b3b8:	2030      	movs	r0, #48	@ 0x30
 801b3ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b3be:	4422      	add	r2, r4
 801b3c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b3c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b3c8:	3302      	adds	r3, #2
 801b3ca:	e7c7      	b.n	801b35c <_printf_common+0x58>
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	4622      	mov	r2, r4
 801b3d0:	4641      	mov	r1, r8
 801b3d2:	4638      	mov	r0, r7
 801b3d4:	47c8      	blx	r9
 801b3d6:	3001      	adds	r0, #1
 801b3d8:	d0e6      	beq.n	801b3a8 <_printf_common+0xa4>
 801b3da:	3601      	adds	r6, #1
 801b3dc:	e7d9      	b.n	801b392 <_printf_common+0x8e>
	...

0801b3e0 <_printf_i>:
 801b3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b3e4:	7e0f      	ldrb	r7, [r1, #24]
 801b3e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b3e8:	2f78      	cmp	r7, #120	@ 0x78
 801b3ea:	4691      	mov	r9, r2
 801b3ec:	4680      	mov	r8, r0
 801b3ee:	460c      	mov	r4, r1
 801b3f0:	469a      	mov	sl, r3
 801b3f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b3f6:	d807      	bhi.n	801b408 <_printf_i+0x28>
 801b3f8:	2f62      	cmp	r7, #98	@ 0x62
 801b3fa:	d80a      	bhi.n	801b412 <_printf_i+0x32>
 801b3fc:	2f00      	cmp	r7, #0
 801b3fe:	f000 80d1 	beq.w	801b5a4 <_printf_i+0x1c4>
 801b402:	2f58      	cmp	r7, #88	@ 0x58
 801b404:	f000 80b8 	beq.w	801b578 <_printf_i+0x198>
 801b408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b40c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b410:	e03a      	b.n	801b488 <_printf_i+0xa8>
 801b412:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b416:	2b15      	cmp	r3, #21
 801b418:	d8f6      	bhi.n	801b408 <_printf_i+0x28>
 801b41a:	a101      	add	r1, pc, #4	@ (adr r1, 801b420 <_printf_i+0x40>)
 801b41c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b420:	0801b479 	.word	0x0801b479
 801b424:	0801b48d 	.word	0x0801b48d
 801b428:	0801b409 	.word	0x0801b409
 801b42c:	0801b409 	.word	0x0801b409
 801b430:	0801b409 	.word	0x0801b409
 801b434:	0801b409 	.word	0x0801b409
 801b438:	0801b48d 	.word	0x0801b48d
 801b43c:	0801b409 	.word	0x0801b409
 801b440:	0801b409 	.word	0x0801b409
 801b444:	0801b409 	.word	0x0801b409
 801b448:	0801b409 	.word	0x0801b409
 801b44c:	0801b58b 	.word	0x0801b58b
 801b450:	0801b4b7 	.word	0x0801b4b7
 801b454:	0801b545 	.word	0x0801b545
 801b458:	0801b409 	.word	0x0801b409
 801b45c:	0801b409 	.word	0x0801b409
 801b460:	0801b5ad 	.word	0x0801b5ad
 801b464:	0801b409 	.word	0x0801b409
 801b468:	0801b4b7 	.word	0x0801b4b7
 801b46c:	0801b409 	.word	0x0801b409
 801b470:	0801b409 	.word	0x0801b409
 801b474:	0801b54d 	.word	0x0801b54d
 801b478:	6833      	ldr	r3, [r6, #0]
 801b47a:	1d1a      	adds	r2, r3, #4
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	6032      	str	r2, [r6, #0]
 801b480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b484:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b488:	2301      	movs	r3, #1
 801b48a:	e09c      	b.n	801b5c6 <_printf_i+0x1e6>
 801b48c:	6833      	ldr	r3, [r6, #0]
 801b48e:	6820      	ldr	r0, [r4, #0]
 801b490:	1d19      	adds	r1, r3, #4
 801b492:	6031      	str	r1, [r6, #0]
 801b494:	0606      	lsls	r6, r0, #24
 801b496:	d501      	bpl.n	801b49c <_printf_i+0xbc>
 801b498:	681d      	ldr	r5, [r3, #0]
 801b49a:	e003      	b.n	801b4a4 <_printf_i+0xc4>
 801b49c:	0645      	lsls	r5, r0, #25
 801b49e:	d5fb      	bpl.n	801b498 <_printf_i+0xb8>
 801b4a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b4a4:	2d00      	cmp	r5, #0
 801b4a6:	da03      	bge.n	801b4b0 <_printf_i+0xd0>
 801b4a8:	232d      	movs	r3, #45	@ 0x2d
 801b4aa:	426d      	negs	r5, r5
 801b4ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b4b0:	4858      	ldr	r0, [pc, #352]	@ (801b614 <_printf_i+0x234>)
 801b4b2:	230a      	movs	r3, #10
 801b4b4:	e011      	b.n	801b4da <_printf_i+0xfa>
 801b4b6:	6821      	ldr	r1, [r4, #0]
 801b4b8:	6833      	ldr	r3, [r6, #0]
 801b4ba:	0608      	lsls	r0, r1, #24
 801b4bc:	f853 5b04 	ldr.w	r5, [r3], #4
 801b4c0:	d402      	bmi.n	801b4c8 <_printf_i+0xe8>
 801b4c2:	0649      	lsls	r1, r1, #25
 801b4c4:	bf48      	it	mi
 801b4c6:	b2ad      	uxthmi	r5, r5
 801b4c8:	2f6f      	cmp	r7, #111	@ 0x6f
 801b4ca:	4852      	ldr	r0, [pc, #328]	@ (801b614 <_printf_i+0x234>)
 801b4cc:	6033      	str	r3, [r6, #0]
 801b4ce:	bf14      	ite	ne
 801b4d0:	230a      	movne	r3, #10
 801b4d2:	2308      	moveq	r3, #8
 801b4d4:	2100      	movs	r1, #0
 801b4d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b4da:	6866      	ldr	r6, [r4, #4]
 801b4dc:	60a6      	str	r6, [r4, #8]
 801b4de:	2e00      	cmp	r6, #0
 801b4e0:	db05      	blt.n	801b4ee <_printf_i+0x10e>
 801b4e2:	6821      	ldr	r1, [r4, #0]
 801b4e4:	432e      	orrs	r6, r5
 801b4e6:	f021 0104 	bic.w	r1, r1, #4
 801b4ea:	6021      	str	r1, [r4, #0]
 801b4ec:	d04b      	beq.n	801b586 <_printf_i+0x1a6>
 801b4ee:	4616      	mov	r6, r2
 801b4f0:	fbb5 f1f3 	udiv	r1, r5, r3
 801b4f4:	fb03 5711 	mls	r7, r3, r1, r5
 801b4f8:	5dc7      	ldrb	r7, [r0, r7]
 801b4fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b4fe:	462f      	mov	r7, r5
 801b500:	42bb      	cmp	r3, r7
 801b502:	460d      	mov	r5, r1
 801b504:	d9f4      	bls.n	801b4f0 <_printf_i+0x110>
 801b506:	2b08      	cmp	r3, #8
 801b508:	d10b      	bne.n	801b522 <_printf_i+0x142>
 801b50a:	6823      	ldr	r3, [r4, #0]
 801b50c:	07df      	lsls	r7, r3, #31
 801b50e:	d508      	bpl.n	801b522 <_printf_i+0x142>
 801b510:	6923      	ldr	r3, [r4, #16]
 801b512:	6861      	ldr	r1, [r4, #4]
 801b514:	4299      	cmp	r1, r3
 801b516:	bfde      	ittt	le
 801b518:	2330      	movle	r3, #48	@ 0x30
 801b51a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b51e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b522:	1b92      	subs	r2, r2, r6
 801b524:	6122      	str	r2, [r4, #16]
 801b526:	f8cd a000 	str.w	sl, [sp]
 801b52a:	464b      	mov	r3, r9
 801b52c:	aa03      	add	r2, sp, #12
 801b52e:	4621      	mov	r1, r4
 801b530:	4640      	mov	r0, r8
 801b532:	f7ff fee7 	bl	801b304 <_printf_common>
 801b536:	3001      	adds	r0, #1
 801b538:	d14a      	bne.n	801b5d0 <_printf_i+0x1f0>
 801b53a:	f04f 30ff 	mov.w	r0, #4294967295
 801b53e:	b004      	add	sp, #16
 801b540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b544:	6823      	ldr	r3, [r4, #0]
 801b546:	f043 0320 	orr.w	r3, r3, #32
 801b54a:	6023      	str	r3, [r4, #0]
 801b54c:	4832      	ldr	r0, [pc, #200]	@ (801b618 <_printf_i+0x238>)
 801b54e:	2778      	movs	r7, #120	@ 0x78
 801b550:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b554:	6823      	ldr	r3, [r4, #0]
 801b556:	6831      	ldr	r1, [r6, #0]
 801b558:	061f      	lsls	r7, r3, #24
 801b55a:	f851 5b04 	ldr.w	r5, [r1], #4
 801b55e:	d402      	bmi.n	801b566 <_printf_i+0x186>
 801b560:	065f      	lsls	r7, r3, #25
 801b562:	bf48      	it	mi
 801b564:	b2ad      	uxthmi	r5, r5
 801b566:	6031      	str	r1, [r6, #0]
 801b568:	07d9      	lsls	r1, r3, #31
 801b56a:	bf44      	itt	mi
 801b56c:	f043 0320 	orrmi.w	r3, r3, #32
 801b570:	6023      	strmi	r3, [r4, #0]
 801b572:	b11d      	cbz	r5, 801b57c <_printf_i+0x19c>
 801b574:	2310      	movs	r3, #16
 801b576:	e7ad      	b.n	801b4d4 <_printf_i+0xf4>
 801b578:	4826      	ldr	r0, [pc, #152]	@ (801b614 <_printf_i+0x234>)
 801b57a:	e7e9      	b.n	801b550 <_printf_i+0x170>
 801b57c:	6823      	ldr	r3, [r4, #0]
 801b57e:	f023 0320 	bic.w	r3, r3, #32
 801b582:	6023      	str	r3, [r4, #0]
 801b584:	e7f6      	b.n	801b574 <_printf_i+0x194>
 801b586:	4616      	mov	r6, r2
 801b588:	e7bd      	b.n	801b506 <_printf_i+0x126>
 801b58a:	6833      	ldr	r3, [r6, #0]
 801b58c:	6825      	ldr	r5, [r4, #0]
 801b58e:	6961      	ldr	r1, [r4, #20]
 801b590:	1d18      	adds	r0, r3, #4
 801b592:	6030      	str	r0, [r6, #0]
 801b594:	062e      	lsls	r6, r5, #24
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	d501      	bpl.n	801b59e <_printf_i+0x1be>
 801b59a:	6019      	str	r1, [r3, #0]
 801b59c:	e002      	b.n	801b5a4 <_printf_i+0x1c4>
 801b59e:	0668      	lsls	r0, r5, #25
 801b5a0:	d5fb      	bpl.n	801b59a <_printf_i+0x1ba>
 801b5a2:	8019      	strh	r1, [r3, #0]
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	6123      	str	r3, [r4, #16]
 801b5a8:	4616      	mov	r6, r2
 801b5aa:	e7bc      	b.n	801b526 <_printf_i+0x146>
 801b5ac:	6833      	ldr	r3, [r6, #0]
 801b5ae:	1d1a      	adds	r2, r3, #4
 801b5b0:	6032      	str	r2, [r6, #0]
 801b5b2:	681e      	ldr	r6, [r3, #0]
 801b5b4:	6862      	ldr	r2, [r4, #4]
 801b5b6:	2100      	movs	r1, #0
 801b5b8:	4630      	mov	r0, r6
 801b5ba:	f7e4 fea9 	bl	8000310 <memchr>
 801b5be:	b108      	cbz	r0, 801b5c4 <_printf_i+0x1e4>
 801b5c0:	1b80      	subs	r0, r0, r6
 801b5c2:	6060      	str	r0, [r4, #4]
 801b5c4:	6863      	ldr	r3, [r4, #4]
 801b5c6:	6123      	str	r3, [r4, #16]
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b5ce:	e7aa      	b.n	801b526 <_printf_i+0x146>
 801b5d0:	6923      	ldr	r3, [r4, #16]
 801b5d2:	4632      	mov	r2, r6
 801b5d4:	4649      	mov	r1, r9
 801b5d6:	4640      	mov	r0, r8
 801b5d8:	47d0      	blx	sl
 801b5da:	3001      	adds	r0, #1
 801b5dc:	d0ad      	beq.n	801b53a <_printf_i+0x15a>
 801b5de:	6823      	ldr	r3, [r4, #0]
 801b5e0:	079b      	lsls	r3, r3, #30
 801b5e2:	d413      	bmi.n	801b60c <_printf_i+0x22c>
 801b5e4:	68e0      	ldr	r0, [r4, #12]
 801b5e6:	9b03      	ldr	r3, [sp, #12]
 801b5e8:	4298      	cmp	r0, r3
 801b5ea:	bfb8      	it	lt
 801b5ec:	4618      	movlt	r0, r3
 801b5ee:	e7a6      	b.n	801b53e <_printf_i+0x15e>
 801b5f0:	2301      	movs	r3, #1
 801b5f2:	4632      	mov	r2, r6
 801b5f4:	4649      	mov	r1, r9
 801b5f6:	4640      	mov	r0, r8
 801b5f8:	47d0      	blx	sl
 801b5fa:	3001      	adds	r0, #1
 801b5fc:	d09d      	beq.n	801b53a <_printf_i+0x15a>
 801b5fe:	3501      	adds	r5, #1
 801b600:	68e3      	ldr	r3, [r4, #12]
 801b602:	9903      	ldr	r1, [sp, #12]
 801b604:	1a5b      	subs	r3, r3, r1
 801b606:	42ab      	cmp	r3, r5
 801b608:	dcf2      	bgt.n	801b5f0 <_printf_i+0x210>
 801b60a:	e7eb      	b.n	801b5e4 <_printf_i+0x204>
 801b60c:	2500      	movs	r5, #0
 801b60e:	f104 0619 	add.w	r6, r4, #25
 801b612:	e7f5      	b.n	801b600 <_printf_i+0x220>
 801b614:	0801e8de 	.word	0x0801e8de
 801b618:	0801e8ef 	.word	0x0801e8ef

0801b61c <__sflush_r>:
 801b61c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b624:	0716      	lsls	r6, r2, #28
 801b626:	4605      	mov	r5, r0
 801b628:	460c      	mov	r4, r1
 801b62a:	d454      	bmi.n	801b6d6 <__sflush_r+0xba>
 801b62c:	684b      	ldr	r3, [r1, #4]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	dc02      	bgt.n	801b638 <__sflush_r+0x1c>
 801b632:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b634:	2b00      	cmp	r3, #0
 801b636:	dd48      	ble.n	801b6ca <__sflush_r+0xae>
 801b638:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b63a:	2e00      	cmp	r6, #0
 801b63c:	d045      	beq.n	801b6ca <__sflush_r+0xae>
 801b63e:	2300      	movs	r3, #0
 801b640:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b644:	682f      	ldr	r7, [r5, #0]
 801b646:	6a21      	ldr	r1, [r4, #32]
 801b648:	602b      	str	r3, [r5, #0]
 801b64a:	d030      	beq.n	801b6ae <__sflush_r+0x92>
 801b64c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b64e:	89a3      	ldrh	r3, [r4, #12]
 801b650:	0759      	lsls	r1, r3, #29
 801b652:	d505      	bpl.n	801b660 <__sflush_r+0x44>
 801b654:	6863      	ldr	r3, [r4, #4]
 801b656:	1ad2      	subs	r2, r2, r3
 801b658:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b65a:	b10b      	cbz	r3, 801b660 <__sflush_r+0x44>
 801b65c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b65e:	1ad2      	subs	r2, r2, r3
 801b660:	2300      	movs	r3, #0
 801b662:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b664:	6a21      	ldr	r1, [r4, #32]
 801b666:	4628      	mov	r0, r5
 801b668:	47b0      	blx	r6
 801b66a:	1c43      	adds	r3, r0, #1
 801b66c:	89a3      	ldrh	r3, [r4, #12]
 801b66e:	d106      	bne.n	801b67e <__sflush_r+0x62>
 801b670:	6829      	ldr	r1, [r5, #0]
 801b672:	291d      	cmp	r1, #29
 801b674:	d82b      	bhi.n	801b6ce <__sflush_r+0xb2>
 801b676:	4a2a      	ldr	r2, [pc, #168]	@ (801b720 <__sflush_r+0x104>)
 801b678:	40ca      	lsrs	r2, r1
 801b67a:	07d6      	lsls	r6, r2, #31
 801b67c:	d527      	bpl.n	801b6ce <__sflush_r+0xb2>
 801b67e:	2200      	movs	r2, #0
 801b680:	6062      	str	r2, [r4, #4]
 801b682:	04d9      	lsls	r1, r3, #19
 801b684:	6922      	ldr	r2, [r4, #16]
 801b686:	6022      	str	r2, [r4, #0]
 801b688:	d504      	bpl.n	801b694 <__sflush_r+0x78>
 801b68a:	1c42      	adds	r2, r0, #1
 801b68c:	d101      	bne.n	801b692 <__sflush_r+0x76>
 801b68e:	682b      	ldr	r3, [r5, #0]
 801b690:	b903      	cbnz	r3, 801b694 <__sflush_r+0x78>
 801b692:	6560      	str	r0, [r4, #84]	@ 0x54
 801b694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b696:	602f      	str	r7, [r5, #0]
 801b698:	b1b9      	cbz	r1, 801b6ca <__sflush_r+0xae>
 801b69a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b69e:	4299      	cmp	r1, r3
 801b6a0:	d002      	beq.n	801b6a8 <__sflush_r+0x8c>
 801b6a2:	4628      	mov	r0, r5
 801b6a4:	f7ff fbec 	bl	801ae80 <_free_r>
 801b6a8:	2300      	movs	r3, #0
 801b6aa:	6363      	str	r3, [r4, #52]	@ 0x34
 801b6ac:	e00d      	b.n	801b6ca <__sflush_r+0xae>
 801b6ae:	2301      	movs	r3, #1
 801b6b0:	4628      	mov	r0, r5
 801b6b2:	47b0      	blx	r6
 801b6b4:	4602      	mov	r2, r0
 801b6b6:	1c50      	adds	r0, r2, #1
 801b6b8:	d1c9      	bne.n	801b64e <__sflush_r+0x32>
 801b6ba:	682b      	ldr	r3, [r5, #0]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d0c6      	beq.n	801b64e <__sflush_r+0x32>
 801b6c0:	2b1d      	cmp	r3, #29
 801b6c2:	d001      	beq.n	801b6c8 <__sflush_r+0xac>
 801b6c4:	2b16      	cmp	r3, #22
 801b6c6:	d11e      	bne.n	801b706 <__sflush_r+0xea>
 801b6c8:	602f      	str	r7, [r5, #0]
 801b6ca:	2000      	movs	r0, #0
 801b6cc:	e022      	b.n	801b714 <__sflush_r+0xf8>
 801b6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b6d2:	b21b      	sxth	r3, r3
 801b6d4:	e01b      	b.n	801b70e <__sflush_r+0xf2>
 801b6d6:	690f      	ldr	r7, [r1, #16]
 801b6d8:	2f00      	cmp	r7, #0
 801b6da:	d0f6      	beq.n	801b6ca <__sflush_r+0xae>
 801b6dc:	0793      	lsls	r3, r2, #30
 801b6de:	680e      	ldr	r6, [r1, #0]
 801b6e0:	bf08      	it	eq
 801b6e2:	694b      	ldreq	r3, [r1, #20]
 801b6e4:	600f      	str	r7, [r1, #0]
 801b6e6:	bf18      	it	ne
 801b6e8:	2300      	movne	r3, #0
 801b6ea:	eba6 0807 	sub.w	r8, r6, r7
 801b6ee:	608b      	str	r3, [r1, #8]
 801b6f0:	f1b8 0f00 	cmp.w	r8, #0
 801b6f4:	dde9      	ble.n	801b6ca <__sflush_r+0xae>
 801b6f6:	6a21      	ldr	r1, [r4, #32]
 801b6f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b6fa:	4643      	mov	r3, r8
 801b6fc:	463a      	mov	r2, r7
 801b6fe:	4628      	mov	r0, r5
 801b700:	47b0      	blx	r6
 801b702:	2800      	cmp	r0, #0
 801b704:	dc08      	bgt.n	801b718 <__sflush_r+0xfc>
 801b706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b70e:	81a3      	strh	r3, [r4, #12]
 801b710:	f04f 30ff 	mov.w	r0, #4294967295
 801b714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b718:	4407      	add	r7, r0
 801b71a:	eba8 0800 	sub.w	r8, r8, r0
 801b71e:	e7e7      	b.n	801b6f0 <__sflush_r+0xd4>
 801b720:	20400001 	.word	0x20400001

0801b724 <_fflush_r>:
 801b724:	b538      	push	{r3, r4, r5, lr}
 801b726:	690b      	ldr	r3, [r1, #16]
 801b728:	4605      	mov	r5, r0
 801b72a:	460c      	mov	r4, r1
 801b72c:	b913      	cbnz	r3, 801b734 <_fflush_r+0x10>
 801b72e:	2500      	movs	r5, #0
 801b730:	4628      	mov	r0, r5
 801b732:	bd38      	pop	{r3, r4, r5, pc}
 801b734:	b118      	cbz	r0, 801b73e <_fflush_r+0x1a>
 801b736:	6a03      	ldr	r3, [r0, #32]
 801b738:	b90b      	cbnz	r3, 801b73e <_fflush_r+0x1a>
 801b73a:	f7ff fa05 	bl	801ab48 <__sinit>
 801b73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b742:	2b00      	cmp	r3, #0
 801b744:	d0f3      	beq.n	801b72e <_fflush_r+0xa>
 801b746:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b748:	07d0      	lsls	r0, r2, #31
 801b74a:	d404      	bmi.n	801b756 <_fflush_r+0x32>
 801b74c:	0599      	lsls	r1, r3, #22
 801b74e:	d402      	bmi.n	801b756 <_fflush_r+0x32>
 801b750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b752:	f7ff fb66 	bl	801ae22 <__retarget_lock_acquire_recursive>
 801b756:	4628      	mov	r0, r5
 801b758:	4621      	mov	r1, r4
 801b75a:	f7ff ff5f 	bl	801b61c <__sflush_r>
 801b75e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b760:	07da      	lsls	r2, r3, #31
 801b762:	4605      	mov	r5, r0
 801b764:	d4e4      	bmi.n	801b730 <_fflush_r+0xc>
 801b766:	89a3      	ldrh	r3, [r4, #12]
 801b768:	059b      	lsls	r3, r3, #22
 801b76a:	d4e1      	bmi.n	801b730 <_fflush_r+0xc>
 801b76c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b76e:	f7ff fb59 	bl	801ae24 <__retarget_lock_release_recursive>
 801b772:	e7dd      	b.n	801b730 <_fflush_r+0xc>

0801b774 <fiprintf>:
 801b774:	b40e      	push	{r1, r2, r3}
 801b776:	b503      	push	{r0, r1, lr}
 801b778:	4601      	mov	r1, r0
 801b77a:	ab03      	add	r3, sp, #12
 801b77c:	4805      	ldr	r0, [pc, #20]	@ (801b794 <fiprintf+0x20>)
 801b77e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b782:	6800      	ldr	r0, [r0, #0]
 801b784:	9301      	str	r3, [sp, #4]
 801b786:	f7ff fca5 	bl	801b0d4 <_vfiprintf_r>
 801b78a:	b002      	add	sp, #8
 801b78c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b790:	b003      	add	sp, #12
 801b792:	4770      	bx	lr
 801b794:	24004a00 	.word	0x24004a00

0801b798 <__swbuf_r>:
 801b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b79a:	460e      	mov	r6, r1
 801b79c:	4614      	mov	r4, r2
 801b79e:	4605      	mov	r5, r0
 801b7a0:	b118      	cbz	r0, 801b7aa <__swbuf_r+0x12>
 801b7a2:	6a03      	ldr	r3, [r0, #32]
 801b7a4:	b90b      	cbnz	r3, 801b7aa <__swbuf_r+0x12>
 801b7a6:	f7ff f9cf 	bl	801ab48 <__sinit>
 801b7aa:	69a3      	ldr	r3, [r4, #24]
 801b7ac:	60a3      	str	r3, [r4, #8]
 801b7ae:	89a3      	ldrh	r3, [r4, #12]
 801b7b0:	071a      	lsls	r2, r3, #28
 801b7b2:	d501      	bpl.n	801b7b8 <__swbuf_r+0x20>
 801b7b4:	6923      	ldr	r3, [r4, #16]
 801b7b6:	b943      	cbnz	r3, 801b7ca <__swbuf_r+0x32>
 801b7b8:	4621      	mov	r1, r4
 801b7ba:	4628      	mov	r0, r5
 801b7bc:	f000 f82a 	bl	801b814 <__swsetup_r>
 801b7c0:	b118      	cbz	r0, 801b7ca <__swbuf_r+0x32>
 801b7c2:	f04f 37ff 	mov.w	r7, #4294967295
 801b7c6:	4638      	mov	r0, r7
 801b7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b7ca:	6823      	ldr	r3, [r4, #0]
 801b7cc:	6922      	ldr	r2, [r4, #16]
 801b7ce:	1a98      	subs	r0, r3, r2
 801b7d0:	6963      	ldr	r3, [r4, #20]
 801b7d2:	b2f6      	uxtb	r6, r6
 801b7d4:	4283      	cmp	r3, r0
 801b7d6:	4637      	mov	r7, r6
 801b7d8:	dc05      	bgt.n	801b7e6 <__swbuf_r+0x4e>
 801b7da:	4621      	mov	r1, r4
 801b7dc:	4628      	mov	r0, r5
 801b7de:	f7ff ffa1 	bl	801b724 <_fflush_r>
 801b7e2:	2800      	cmp	r0, #0
 801b7e4:	d1ed      	bne.n	801b7c2 <__swbuf_r+0x2a>
 801b7e6:	68a3      	ldr	r3, [r4, #8]
 801b7e8:	3b01      	subs	r3, #1
 801b7ea:	60a3      	str	r3, [r4, #8]
 801b7ec:	6823      	ldr	r3, [r4, #0]
 801b7ee:	1c5a      	adds	r2, r3, #1
 801b7f0:	6022      	str	r2, [r4, #0]
 801b7f2:	701e      	strb	r6, [r3, #0]
 801b7f4:	6962      	ldr	r2, [r4, #20]
 801b7f6:	1c43      	adds	r3, r0, #1
 801b7f8:	429a      	cmp	r2, r3
 801b7fa:	d004      	beq.n	801b806 <__swbuf_r+0x6e>
 801b7fc:	89a3      	ldrh	r3, [r4, #12]
 801b7fe:	07db      	lsls	r3, r3, #31
 801b800:	d5e1      	bpl.n	801b7c6 <__swbuf_r+0x2e>
 801b802:	2e0a      	cmp	r6, #10
 801b804:	d1df      	bne.n	801b7c6 <__swbuf_r+0x2e>
 801b806:	4621      	mov	r1, r4
 801b808:	4628      	mov	r0, r5
 801b80a:	f7ff ff8b 	bl	801b724 <_fflush_r>
 801b80e:	2800      	cmp	r0, #0
 801b810:	d0d9      	beq.n	801b7c6 <__swbuf_r+0x2e>
 801b812:	e7d6      	b.n	801b7c2 <__swbuf_r+0x2a>

0801b814 <__swsetup_r>:
 801b814:	b538      	push	{r3, r4, r5, lr}
 801b816:	4b29      	ldr	r3, [pc, #164]	@ (801b8bc <__swsetup_r+0xa8>)
 801b818:	4605      	mov	r5, r0
 801b81a:	6818      	ldr	r0, [r3, #0]
 801b81c:	460c      	mov	r4, r1
 801b81e:	b118      	cbz	r0, 801b828 <__swsetup_r+0x14>
 801b820:	6a03      	ldr	r3, [r0, #32]
 801b822:	b90b      	cbnz	r3, 801b828 <__swsetup_r+0x14>
 801b824:	f7ff f990 	bl	801ab48 <__sinit>
 801b828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b82c:	0719      	lsls	r1, r3, #28
 801b82e:	d422      	bmi.n	801b876 <__swsetup_r+0x62>
 801b830:	06da      	lsls	r2, r3, #27
 801b832:	d407      	bmi.n	801b844 <__swsetup_r+0x30>
 801b834:	2209      	movs	r2, #9
 801b836:	602a      	str	r2, [r5, #0]
 801b838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b83c:	81a3      	strh	r3, [r4, #12]
 801b83e:	f04f 30ff 	mov.w	r0, #4294967295
 801b842:	e033      	b.n	801b8ac <__swsetup_r+0x98>
 801b844:	0758      	lsls	r0, r3, #29
 801b846:	d512      	bpl.n	801b86e <__swsetup_r+0x5a>
 801b848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b84a:	b141      	cbz	r1, 801b85e <__swsetup_r+0x4a>
 801b84c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b850:	4299      	cmp	r1, r3
 801b852:	d002      	beq.n	801b85a <__swsetup_r+0x46>
 801b854:	4628      	mov	r0, r5
 801b856:	f7ff fb13 	bl	801ae80 <_free_r>
 801b85a:	2300      	movs	r3, #0
 801b85c:	6363      	str	r3, [r4, #52]	@ 0x34
 801b85e:	89a3      	ldrh	r3, [r4, #12]
 801b860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b864:	81a3      	strh	r3, [r4, #12]
 801b866:	2300      	movs	r3, #0
 801b868:	6063      	str	r3, [r4, #4]
 801b86a:	6923      	ldr	r3, [r4, #16]
 801b86c:	6023      	str	r3, [r4, #0]
 801b86e:	89a3      	ldrh	r3, [r4, #12]
 801b870:	f043 0308 	orr.w	r3, r3, #8
 801b874:	81a3      	strh	r3, [r4, #12]
 801b876:	6923      	ldr	r3, [r4, #16]
 801b878:	b94b      	cbnz	r3, 801b88e <__swsetup_r+0x7a>
 801b87a:	89a3      	ldrh	r3, [r4, #12]
 801b87c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b884:	d003      	beq.n	801b88e <__swsetup_r+0x7a>
 801b886:	4621      	mov	r1, r4
 801b888:	4628      	mov	r0, r5
 801b88a:	f000 f856 	bl	801b93a <__smakebuf_r>
 801b88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b892:	f013 0201 	ands.w	r2, r3, #1
 801b896:	d00a      	beq.n	801b8ae <__swsetup_r+0x9a>
 801b898:	2200      	movs	r2, #0
 801b89a:	60a2      	str	r2, [r4, #8]
 801b89c:	6962      	ldr	r2, [r4, #20]
 801b89e:	4252      	negs	r2, r2
 801b8a0:	61a2      	str	r2, [r4, #24]
 801b8a2:	6922      	ldr	r2, [r4, #16]
 801b8a4:	b942      	cbnz	r2, 801b8b8 <__swsetup_r+0xa4>
 801b8a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b8aa:	d1c5      	bne.n	801b838 <__swsetup_r+0x24>
 801b8ac:	bd38      	pop	{r3, r4, r5, pc}
 801b8ae:	0799      	lsls	r1, r3, #30
 801b8b0:	bf58      	it	pl
 801b8b2:	6962      	ldrpl	r2, [r4, #20]
 801b8b4:	60a2      	str	r2, [r4, #8]
 801b8b6:	e7f4      	b.n	801b8a2 <__swsetup_r+0x8e>
 801b8b8:	2000      	movs	r0, #0
 801b8ba:	e7f7      	b.n	801b8ac <__swsetup_r+0x98>
 801b8bc:	24004a00 	.word	0x24004a00

0801b8c0 <_sbrk_r>:
 801b8c0:	b538      	push	{r3, r4, r5, lr}
 801b8c2:	4d06      	ldr	r5, [pc, #24]	@ (801b8dc <_sbrk_r+0x1c>)
 801b8c4:	2300      	movs	r3, #0
 801b8c6:	4604      	mov	r4, r0
 801b8c8:	4608      	mov	r0, r1
 801b8ca:	602b      	str	r3, [r5, #0]
 801b8cc:	f7e6 f91c 	bl	8001b08 <_sbrk>
 801b8d0:	1c43      	adds	r3, r0, #1
 801b8d2:	d102      	bne.n	801b8da <_sbrk_r+0x1a>
 801b8d4:	682b      	ldr	r3, [r5, #0]
 801b8d6:	b103      	cbz	r3, 801b8da <_sbrk_r+0x1a>
 801b8d8:	6023      	str	r3, [r4, #0]
 801b8da:	bd38      	pop	{r3, r4, r5, pc}
 801b8dc:	24014e58 	.word	0x24014e58

0801b8e0 <abort>:
 801b8e0:	b508      	push	{r3, lr}
 801b8e2:	2006      	movs	r0, #6
 801b8e4:	f000 f88e 	bl	801ba04 <raise>
 801b8e8:	2001      	movs	r0, #1
 801b8ea:	f7e6 f895 	bl	8001a18 <_exit>

0801b8ee <__swhatbuf_r>:
 801b8ee:	b570      	push	{r4, r5, r6, lr}
 801b8f0:	460c      	mov	r4, r1
 801b8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8f6:	2900      	cmp	r1, #0
 801b8f8:	b096      	sub	sp, #88	@ 0x58
 801b8fa:	4615      	mov	r5, r2
 801b8fc:	461e      	mov	r6, r3
 801b8fe:	da0d      	bge.n	801b91c <__swhatbuf_r+0x2e>
 801b900:	89a3      	ldrh	r3, [r4, #12]
 801b902:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b906:	f04f 0100 	mov.w	r1, #0
 801b90a:	bf14      	ite	ne
 801b90c:	2340      	movne	r3, #64	@ 0x40
 801b90e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b912:	2000      	movs	r0, #0
 801b914:	6031      	str	r1, [r6, #0]
 801b916:	602b      	str	r3, [r5, #0]
 801b918:	b016      	add	sp, #88	@ 0x58
 801b91a:	bd70      	pop	{r4, r5, r6, pc}
 801b91c:	466a      	mov	r2, sp
 801b91e:	f000 f879 	bl	801ba14 <_fstat_r>
 801b922:	2800      	cmp	r0, #0
 801b924:	dbec      	blt.n	801b900 <__swhatbuf_r+0x12>
 801b926:	9901      	ldr	r1, [sp, #4]
 801b928:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b92c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b930:	4259      	negs	r1, r3
 801b932:	4159      	adcs	r1, r3
 801b934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b938:	e7eb      	b.n	801b912 <__swhatbuf_r+0x24>

0801b93a <__smakebuf_r>:
 801b93a:	898b      	ldrh	r3, [r1, #12]
 801b93c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b93e:	079d      	lsls	r5, r3, #30
 801b940:	4606      	mov	r6, r0
 801b942:	460c      	mov	r4, r1
 801b944:	d507      	bpl.n	801b956 <__smakebuf_r+0x1c>
 801b946:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b94a:	6023      	str	r3, [r4, #0]
 801b94c:	6123      	str	r3, [r4, #16]
 801b94e:	2301      	movs	r3, #1
 801b950:	6163      	str	r3, [r4, #20]
 801b952:	b003      	add	sp, #12
 801b954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b956:	ab01      	add	r3, sp, #4
 801b958:	466a      	mov	r2, sp
 801b95a:	f7ff ffc8 	bl	801b8ee <__swhatbuf_r>
 801b95e:	9f00      	ldr	r7, [sp, #0]
 801b960:	4605      	mov	r5, r0
 801b962:	4639      	mov	r1, r7
 801b964:	4630      	mov	r0, r6
 801b966:	f7ff faff 	bl	801af68 <_malloc_r>
 801b96a:	b948      	cbnz	r0, 801b980 <__smakebuf_r+0x46>
 801b96c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b970:	059a      	lsls	r2, r3, #22
 801b972:	d4ee      	bmi.n	801b952 <__smakebuf_r+0x18>
 801b974:	f023 0303 	bic.w	r3, r3, #3
 801b978:	f043 0302 	orr.w	r3, r3, #2
 801b97c:	81a3      	strh	r3, [r4, #12]
 801b97e:	e7e2      	b.n	801b946 <__smakebuf_r+0xc>
 801b980:	89a3      	ldrh	r3, [r4, #12]
 801b982:	6020      	str	r0, [r4, #0]
 801b984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b988:	81a3      	strh	r3, [r4, #12]
 801b98a:	9b01      	ldr	r3, [sp, #4]
 801b98c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b990:	b15b      	cbz	r3, 801b9aa <__smakebuf_r+0x70>
 801b992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b996:	4630      	mov	r0, r6
 801b998:	f000 f84e 	bl	801ba38 <_isatty_r>
 801b99c:	b128      	cbz	r0, 801b9aa <__smakebuf_r+0x70>
 801b99e:	89a3      	ldrh	r3, [r4, #12]
 801b9a0:	f023 0303 	bic.w	r3, r3, #3
 801b9a4:	f043 0301 	orr.w	r3, r3, #1
 801b9a8:	81a3      	strh	r3, [r4, #12]
 801b9aa:	89a3      	ldrh	r3, [r4, #12]
 801b9ac:	431d      	orrs	r5, r3
 801b9ae:	81a5      	strh	r5, [r4, #12]
 801b9b0:	e7cf      	b.n	801b952 <__smakebuf_r+0x18>

0801b9b2 <_raise_r>:
 801b9b2:	291f      	cmp	r1, #31
 801b9b4:	b538      	push	{r3, r4, r5, lr}
 801b9b6:	4605      	mov	r5, r0
 801b9b8:	460c      	mov	r4, r1
 801b9ba:	d904      	bls.n	801b9c6 <_raise_r+0x14>
 801b9bc:	2316      	movs	r3, #22
 801b9be:	6003      	str	r3, [r0, #0]
 801b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 801b9c4:	bd38      	pop	{r3, r4, r5, pc}
 801b9c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b9c8:	b112      	cbz	r2, 801b9d0 <_raise_r+0x1e>
 801b9ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b9ce:	b94b      	cbnz	r3, 801b9e4 <_raise_r+0x32>
 801b9d0:	4628      	mov	r0, r5
 801b9d2:	f000 f853 	bl	801ba7c <_getpid_r>
 801b9d6:	4622      	mov	r2, r4
 801b9d8:	4601      	mov	r1, r0
 801b9da:	4628      	mov	r0, r5
 801b9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b9e0:	f000 b83a 	b.w	801ba58 <_kill_r>
 801b9e4:	2b01      	cmp	r3, #1
 801b9e6:	d00a      	beq.n	801b9fe <_raise_r+0x4c>
 801b9e8:	1c59      	adds	r1, r3, #1
 801b9ea:	d103      	bne.n	801b9f4 <_raise_r+0x42>
 801b9ec:	2316      	movs	r3, #22
 801b9ee:	6003      	str	r3, [r0, #0]
 801b9f0:	2001      	movs	r0, #1
 801b9f2:	e7e7      	b.n	801b9c4 <_raise_r+0x12>
 801b9f4:	2100      	movs	r1, #0
 801b9f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	4798      	blx	r3
 801b9fe:	2000      	movs	r0, #0
 801ba00:	e7e0      	b.n	801b9c4 <_raise_r+0x12>
	...

0801ba04 <raise>:
 801ba04:	4b02      	ldr	r3, [pc, #8]	@ (801ba10 <raise+0xc>)
 801ba06:	4601      	mov	r1, r0
 801ba08:	6818      	ldr	r0, [r3, #0]
 801ba0a:	f7ff bfd2 	b.w	801b9b2 <_raise_r>
 801ba0e:	bf00      	nop
 801ba10:	24004a00 	.word	0x24004a00

0801ba14 <_fstat_r>:
 801ba14:	b538      	push	{r3, r4, r5, lr}
 801ba16:	4d07      	ldr	r5, [pc, #28]	@ (801ba34 <_fstat_r+0x20>)
 801ba18:	2300      	movs	r3, #0
 801ba1a:	4604      	mov	r4, r0
 801ba1c:	4608      	mov	r0, r1
 801ba1e:	4611      	mov	r1, r2
 801ba20:	602b      	str	r3, [r5, #0]
 801ba22:	f7e6 f849 	bl	8001ab8 <_fstat>
 801ba26:	1c43      	adds	r3, r0, #1
 801ba28:	d102      	bne.n	801ba30 <_fstat_r+0x1c>
 801ba2a:	682b      	ldr	r3, [r5, #0]
 801ba2c:	b103      	cbz	r3, 801ba30 <_fstat_r+0x1c>
 801ba2e:	6023      	str	r3, [r4, #0]
 801ba30:	bd38      	pop	{r3, r4, r5, pc}
 801ba32:	bf00      	nop
 801ba34:	24014e58 	.word	0x24014e58

0801ba38 <_isatty_r>:
 801ba38:	b538      	push	{r3, r4, r5, lr}
 801ba3a:	4d06      	ldr	r5, [pc, #24]	@ (801ba54 <_isatty_r+0x1c>)
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	4604      	mov	r4, r0
 801ba40:	4608      	mov	r0, r1
 801ba42:	602b      	str	r3, [r5, #0]
 801ba44:	f7e6 f848 	bl	8001ad8 <_isatty>
 801ba48:	1c43      	adds	r3, r0, #1
 801ba4a:	d102      	bne.n	801ba52 <_isatty_r+0x1a>
 801ba4c:	682b      	ldr	r3, [r5, #0]
 801ba4e:	b103      	cbz	r3, 801ba52 <_isatty_r+0x1a>
 801ba50:	6023      	str	r3, [r4, #0]
 801ba52:	bd38      	pop	{r3, r4, r5, pc}
 801ba54:	24014e58 	.word	0x24014e58

0801ba58 <_kill_r>:
 801ba58:	b538      	push	{r3, r4, r5, lr}
 801ba5a:	4d07      	ldr	r5, [pc, #28]	@ (801ba78 <_kill_r+0x20>)
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	4604      	mov	r4, r0
 801ba60:	4608      	mov	r0, r1
 801ba62:	4611      	mov	r1, r2
 801ba64:	602b      	str	r3, [r5, #0]
 801ba66:	f7e5 ffc5 	bl	80019f4 <_kill>
 801ba6a:	1c43      	adds	r3, r0, #1
 801ba6c:	d102      	bne.n	801ba74 <_kill_r+0x1c>
 801ba6e:	682b      	ldr	r3, [r5, #0]
 801ba70:	b103      	cbz	r3, 801ba74 <_kill_r+0x1c>
 801ba72:	6023      	str	r3, [r4, #0]
 801ba74:	bd38      	pop	{r3, r4, r5, pc}
 801ba76:	bf00      	nop
 801ba78:	24014e58 	.word	0x24014e58

0801ba7c <_getpid_r>:
 801ba7c:	f7e5 bfb2 	b.w	80019e4 <_getpid>

0801ba80 <_init>:
 801ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba82:	bf00      	nop
 801ba84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba86:	bc08      	pop	{r3}
 801ba88:	469e      	mov	lr, r3
 801ba8a:	4770      	bx	lr

0801ba8c <_fini>:
 801ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba8e:	bf00      	nop
 801ba90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba92:	bc08      	pop	{r3}
 801ba94:	469e      	mov	lr, r3
 801ba96:	4770      	bx	lr
