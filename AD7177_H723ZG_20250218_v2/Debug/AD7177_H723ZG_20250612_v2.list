
AD7177_H723ZG_20250612_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bea8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e68  0801c178  0801c178  0001d178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801efe0  0801efe0  0001ffe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801efe8  0801efe8  0001ffe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801efec  0801efec  0001ffec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000c8  24004984  0801eff0  00020984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .lwip_sec     00004983  24000000  24000000  00021000  2**2
                  ALLOC
  8 .bss          00010424  24004a4c  0801f0b8  00020a4c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  24014e70  0801f0b8  00020e70  2**0
                  ALLOC
 10 .lwip_sec     00000160  30000000  30000000  00021000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020a4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039085  00000000  00000000  00020a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008104  00000000  00000000  00059aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027c8  00000000  00000000  00061c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f49  00000000  00000000  000643d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d27  00000000  00000000  00066319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d8f2  00000000  00000000  00079040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00171ecb  00000000  00000000  000b6932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002287fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae44  00000000  00000000  00228840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00233684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004a4c 	.word	0x24004a4c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c160 	.word	0x0801c160

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004a50 	.word	0x24004a50
 800030c:	0801c160 	.word	0x0801c160

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 ffe3 	bl	8001380 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b4e      	ldr	r3, [pc, #312]	@ (80004f4 <main+0x144>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b48      	ldr	r3, [pc, #288]	@ (80004f4 <main+0x144>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b43      	ldr	r3, [pc, #268]	@ (80004f4 <main+0x144>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a42      	ldr	r2, [pc, #264]	@ (80004f4 <main+0x144>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b3c      	ldr	r3, [pc, #240]	@ (80004f4 <main+0x144>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b39      	ldr	r3, [pc, #228]	@ (80004f4 <main+0x144>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b36      	ldr	r3, [pc, #216]	@ (80004f4 <main+0x144>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	492b      	ldr	r1, [pc, #172]	@ (80004f4 <main+0x144>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b23      	ldr	r3, [pc, #140]	@ (80004f4 <main+0x144>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a22      	ldr	r2, [pc, #136]	@ (80004f4 <main+0x144>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f001 fd80 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f84a 	bl	800051c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000488:	f000 f8ba 	bl	8000600 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 fb2c 	bl	8000ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000490:	f000 faf2 	bl	8000a78 <MX_DMA_Init>
  MX_TIM2_Init();
 8000494:	f000 fa2c 	bl	80008f0 <MX_TIM2_Init>
  MX_SPI4_Init();
 8000498:	f000 f928 	bl	80006ec <MX_SPI4_Init>
  MX_TIM23_Init();
 800049c:	f000 fa9c 	bl	80009d8 <MX_TIM23_Init>
  MX_TIM1_Init();
 80004a0:	f000 f97c 	bl	800079c <MX_TIM1_Init>
  MX_SPI1_Init();
 80004a4:	f000 f8ca 	bl	800063c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2140      	movs	r1, #64	@ 0x40
 80004ac:	4812      	ldr	r0, [pc, #72]	@ (80004f8 <main+0x148>)
 80004ae:	f005 fdfd 	bl	80060ac <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)resetSequence, 8, 50);
 80004b2:	2332      	movs	r3, #50	@ 0x32
 80004b4:	2208      	movs	r2, #8
 80004b6:	4911      	ldr	r1, [pc, #68]	@ (80004fc <main+0x14c>)
 80004b8:	4811      	ldr	r0, [pc, #68]	@ (8000500 <main+0x150>)
 80004ba:	f008 fa1f 	bl	80088fc <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2140      	movs	r1, #64	@ 0x40
 80004c2:	480d      	ldr	r0, [pc, #52]	@ (80004f8 <main+0x148>)
 80004c4:	f005 fdf2 	bl	80060ac <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004c8:	f00c f8b0 	bl	800c62c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000504 <main+0x154>)
 80004ce:	2100      	movs	r1, #0
 80004d0:	480d      	ldr	r0, [pc, #52]	@ (8000508 <main+0x158>)
 80004d2:	f00c f90a 	bl	800c6ea <osThreadNew>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <main+0x15c>)
 80004da:	6013      	str	r3, [r2, #0]

  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(startEthernetTask, NULL, &ethernetTask_attributes);
 80004dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <main+0x160>)
 80004de:	2100      	movs	r1, #0
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <main+0x164>)
 80004e2:	f00c f902 	bl	800c6ea <osThreadNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000518 <main+0x168>)
 80004ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004ec:	f00c f8c2 	bl	800c674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <main+0x140>
 80004f4:	e000ed00 	.word	0xe000ed00
 80004f8:	58020400 	.word	0x58020400
 80004fc:	24004984 	.word	0x24004984
 8000500:	24004a68 	.word	0x24004a68
 8000504:	0801ed64 	.word	0x0801ed64
 8000508:	08001211 	.word	0x08001211
 800050c:	24004e3c 	.word	0x24004e3c
 8000510:	0801ed88 	.word	0x0801ed88
 8000514:	08001221 	.word	0x08001221
 8000518:	24004e40 	.word	0x24004e40

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b09c      	sub	sp, #112	@ 0x70
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000526:	224c      	movs	r2, #76	@ 0x4c
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f01a ff17 	bl	801b35e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2220      	movs	r2, #32
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f01a ff11 	bl	801b35e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800053c:	2002      	movs	r0, #2
 800053e:	f005 fde9 	bl	8006114 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	4b2d      	ldr	r3, [pc, #180]	@ (80005fc <SystemClock_Config+0xe0>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a2c      	ldr	r2, [pc, #176]	@ (80005fc <SystemClock_Config+0xe0>)
 800054c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <SystemClock_Config+0xe0>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800055e:	bf00      	nop
 8000560:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <SystemClock_Config+0xe0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800056c:	d1f8      	bne.n	8000560 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800056e:	2303      	movs	r3, #3
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000572:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000578:	2301      	movs	r3, #1
 800057a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800057c:	2340      	movs	r3, #64	@ 0x40
 800057e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000584:	2302      	movs	r3, #2
 8000586:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800058c:	f240 1313 	movw	r3, #275	@ 0x113
 8000590:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000596:	2304      	movs	r3, #4
 8000598:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800059a:	2302      	movs	r3, #2
 800059c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800059e:	2304      	movs	r3, #4
 80005a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 fdea 	bl	8006188 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005ba:	f000 ff43 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	233f      	movs	r3, #63	@ 0x3f
 80005c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005ca:	2308      	movs	r3, #8
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005ce:	2340      	movs	r3, #64	@ 0x40
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005d2:	2340      	movs	r3, #64	@ 0x40
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80005d6:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005dc:	2340      	movs	r3, #64	@ 0x40
 80005de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2103      	movs	r1, #3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f006 f9a9 	bl	800693c <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80005f0:	f000 ff28 	bl	8001444 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3770      	adds	r7, #112	@ 0x70
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	58024800 	.word	0x58024800

08000600 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0ae      	sub	sp, #184	@ 0xb8
 8000604:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	22b8      	movs	r2, #184	@ 0xb8
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f01a fea6 	bl	801b35e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000612:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800061e:	2300      	movs	r3, #0
 8000620:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	4618      	mov	r0, r3
 8000626:	f006 fd41 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000630:	f000 ff08 	bl	8001444 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	37b8      	adds	r7, #184	@ 0xb8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <MX_SPI1_Init+0xac>)
 8000644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000648:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800064c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000656:	2207      	movs	r2, #7
 8000658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800065c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000660:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000664:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000668:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800066a:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800066c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000670:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000674:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000678:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 8000694:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000698:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 800069c:	2200      	movs	r2, #0
 800069e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_SPI1_Init+0xa8>)
 80006d2:	f007 ffef 	bl	80086b4 <HAL_SPI_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80006dc:	f000 feb2 	bl	8001444 <Error_Handler>
  /* USER CODE BEGIN SPI1_Init 2 */
  //HAL_NVIC_EnableIRQ(SPI1_IRQn);
//
  /* USER CODE END SPI1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	24004a68 	.word	0x24004a68
 80006e8:	40013000 	.word	0x40013000

080006ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <MX_SPI4_Init+0xa8>)
 80006f2:	4a29      	ldr	r2, [pc, #164]	@ (8000798 <MX_SPI4_Init+0xac>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <MX_SPI4_Init+0xa8>)
 80006f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000706:	2207      	movs	r2, #7
 8000708:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800070a:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800070c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000710:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000714:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000718:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800071c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000720:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000724:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000728:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000744:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000748:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800074c:	2200      	movs	r2, #0
 800074e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000752:	2200      	movs	r2, #0
 8000754:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000758:	2200      	movs	r2, #0
 800075a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800075e:	2200      	movs	r2, #0
 8000760:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000764:	2200      	movs	r2, #0
 8000766:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800076a:	2200      	movs	r2, #0
 800076c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000770:	2200      	movs	r2, #0
 8000772:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000776:	2200      	movs	r2, #0
 8000778:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_SPI4_Init+0xa8>)
 800077c:	2200      	movs	r2, #0
 800077e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_SPI4_Init+0xa8>)
 8000782:	f007 ff97 	bl	80086b4 <HAL_SPI_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 800078c:	f000 fe5a 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	24004af0 	.word	0x24004af0
 8000798:	40013400 	.word	0x40013400

0800079c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09c      	sub	sp, #112	@ 0x70
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2234      	movs	r2, #52	@ 0x34
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f01a fdc1 	bl	801b35e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007dc:	4b42      	ldr	r3, [pc, #264]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007de:	4a43      	ldr	r2, [pc, #268]	@ (80008ec <MX_TIM1_Init+0x150>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1375-1;
 80007e2:	4b41      	ldr	r3, [pc, #260]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007e4:	f240 525e 	movw	r2, #1374	@ 0x55e
 80007e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b3f      	ldr	r3, [pc, #252]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007f0:	4b3d      	ldr	r3, [pc, #244]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fe:	4b3a      	ldr	r3, [pc, #232]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080a:	4837      	ldr	r0, [pc, #220]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 800080c:	f009 fd2f 	bl	800a26e <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000816:	f000 fe15 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000824:	4619      	mov	r1, r3
 8000826:	4830      	ldr	r0, [pc, #192]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 8000828:	f00a f9d4 	bl	800abd4 <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000832:	f000 fe07 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000836:	482c      	ldr	r0, [pc, #176]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 8000838:	f009 fe74 	bl	800a524 <HAL_TIM_OC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000842:	f000 fdff 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000852:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000856:	4619      	mov	r1, r3
 8000858:	4823      	ldr	r0, [pc, #140]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 800085a:	f00a fefb 	bl	800b654 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000864:	f000 fdee 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	2300      	movs	r3, #0
 8000872:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	4816      	ldr	r0, [pc, #88]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 800088e:	f00a f813 	bl	800a8b8 <HAL_TIM_OC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000898:	f000 fdd4 	bl	8001444 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_TIM1_Init+0x14c>)
 80008d2:	f00a ff5b 	bl	800b78c <HAL_TIMEx_ConfigBreakDeadTime>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008dc:	f000 fdb2 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3770      	adds	r7, #112	@ 0x70
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	24004d58 	.word	0x24004d58
 80008ec:	40010000 	.word	0x40010000

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	@ 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000922:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000924:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 275-1;
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800092c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000938:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800093a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800093e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800094c:	4821      	ldr	r0, [pc, #132]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800094e:	f009 fc8e 	bl	800a26e <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000958:	f000 fd74 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000966:	4619      	mov	r1, r3
 8000968:	481a      	ldr	r0, [pc, #104]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800096a:	f00a f933 	bl	800abd4 <HAL_TIM_ConfigClockSource>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000974:	f000 fd66 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000978:	4816      	ldr	r0, [pc, #88]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 800097a:	f009 fe34 	bl	800a5e6 <HAL_TIM_PWM_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000984:	f000 fd5e 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 8000998:	f00a fe5c 	bl	800b654 <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80009a2:	f000 fd4f 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a6:	2360      	movs	r3, #96	@ 0x60
 80009a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_TIM2_Init+0xe4>)
 80009be:	f009 fff5 	bl	800a9ac <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80009c8:	f000 fd3c 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3738      	adds	r7, #56	@ 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	24004da4 	.word	0x24004da4

080009d8 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_TIM23_Init+0x98>)
 80009f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a74 <MX_TIM23_Init+0x9c>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_TIM23_Init+0x98>)
 80009fe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000a02:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000a1e:	4814      	ldr	r0, [pc, #80]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a20:	f009 fc25 	bl	800a26e <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000a2a:	f000 fd0b 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a3c:	f00a f8ca 	bl	800abd4 <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000a46:	f000 fcfd 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <MX_TIM23_Init+0x98>)
 8000a58:	f00a fdfc 	bl	800b654 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000a62:	f000 fcef 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24004df0 	.word	0x24004df0
 8000a74:	4000e000 	.word	0x4000e000

08000a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <MX_DMA_Init+0x6c>)
 8000a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a84:	4a17      	ldr	r2, [pc, #92]	@ (8000ae4 <MX_DMA_Init+0x6c>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_DMA_Init+0x6c>)
 8000a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2105      	movs	r1, #5
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f001 fbdf 	bl	8002264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aa6:	200b      	movs	r0, #11
 8000aa8:	f001 fbf6 	bl	8002298 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2105      	movs	r1, #5
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f001 fbd7 	bl	8002264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ab6:	200c      	movs	r0, #12
 8000ab8:	f001 fbee 	bl	8002298 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2105      	movs	r1, #5
 8000ac0:	200d      	movs	r0, #13
 8000ac2:	f001 fbcf 	bl	8002264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ac6:	200d      	movs	r0, #13
 8000ac8:	f001 fbe6 	bl	8002298 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2105      	movs	r1, #5
 8000ad0:	200e      	movs	r0, #14
 8000ad2:	f001 fbc7 	bl	8002264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ad6:	200e      	movs	r0, #14
 8000ad8:	f001 fbde 	bl	8002298 <HAL_NVIC_EnableIRQ>

}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	58024400 	.word	0x58024400

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	@ 0x30
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	4b42      	ldr	r3, [pc, #264]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	4a40      	ldr	r2, [pc, #256]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b22:	4a39      	ldr	r2, [pc, #228]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2c:	4b36      	ldr	r3, [pc, #216]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b33      	ldr	r3, [pc, #204]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b40:	4a31      	ldr	r2, [pc, #196]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a22      	ldr	r2, [pc, #136]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba4:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_GPIO_Init+0x120>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	@ 0x40
 8000bb6:	4815      	ldr	r0, [pc, #84]	@ (8000c0c <MX_GPIO_Init+0x124>)
 8000bb8:	f005 fa78 	bl	80060ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bbc:	2340      	movs	r3, #64	@ 0x40
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <MX_GPIO_Init+0x124>)
 8000bd4:	f005 f8c2 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bde:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <MX_GPIO_Init+0x124>)
 8000bf0:	f005 f8b4 	bl	8005d5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2105      	movs	r1, #5
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f001 fb33 	bl	8002264 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  //remove HAL_NVIC_EnableIRQ above
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	@ 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020400 	.word	0x58020400

08000c10 <HAL_GPIO_EXTI_Callback>:


// EXTI Line8 External Interrupt ISR Handler CallBackFun

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_8) // If The INT Source Is EXTI Line8 (PB8 Pin)
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c20:	d11c      	bne.n	8000c5c <HAL_GPIO_EXTI_Callback+0x4c>
    {
      exti_callback++;
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c2a:	6013      	str	r3, [r2, #0]
      // Disable EXTI to prevent re-entry during SPI
      HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000c2c:	2017      	movs	r0, #23
 8000c2e:	f001 fb41 	bl	80022b4 <HAL_NVIC_DisableIRQ>

      uint8_t txBuffer24bit[5] = {AD7177_READ_DATA_REG, 0x00, 0x00, 0x00, 0x00};
 8000c32:	2344      	movs	r3, #68	@ 0x44
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	2300      	movs	r3, #0
 8000c38:	733b      	strb	r3, [r7, #12]

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2140      	movs	r1, #64	@ 0x40
 8000c3e:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c40:	f005 fa34 	bl	80060ac <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txBuffer24bit, (uint8_t *)rxBuffer24bit, 5);
 8000c44:	f107 0108 	add.w	r1, r7, #8
 8000c48:	2305      	movs	r3, #5
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c4c:	4808      	ldr	r0, [pc, #32]	@ (8000c70 <HAL_GPIO_EXTI_Callback+0x60>)
 8000c4e:	f008 fdef 	bl	8009830 <HAL_SPI_TransmitReceive_IT>
	  timer23val = __HAL_TIM_GET_COUNTER(&htim23);
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_GPIO_EXTI_Callback+0x68>)
 8000c5a:	6013      	str	r3, [r2, #0]
    }
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	24005898 	.word	0x24005898
 8000c68:	58020400 	.word	0x58020400
 8000c6c:	24005870 	.word	0x24005870
 8000c70:	24004a68 	.word	0x24004a68
 8000c74:	24004df0 	.word	0x24004df0
 8000c78:	24005890 	.word	0x24005890

08000c7c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a84      	ldr	r2, [pc, #528]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x220>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	f040 8101 	bne.w	8000e92 <HAL_SPI_TxRxCpltCallback+0x216>
  {
	  // Deselect CS
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2140      	movs	r1, #64	@ 0x40
 8000c94:	4882      	ldr	r0, [pc, #520]	@ (8000ea0 <HAL_SPI_TxRxCpltCallback+0x224>)
 8000c96:	f005 fa09 	bl	80060ac <HAL_GPIO_WritePin>

	  spi_callback++;
 8000c9a:	4b82      	ldr	r3, [pc, #520]	@ (8000ea4 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	4a80      	ldr	r2, [pc, #512]	@ (8000ea4 <HAL_SPI_TxRxCpltCallback+0x228>)
 8000ca2:	6013      	str	r3, [r2, #0]
	  uint32_t value_24Bit =
	              (rxBuffer24bit[1] << 16) |
 8000ca4:	4b80      	ldr	r3, [pc, #512]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000ca6:	785b      	ldrb	r3, [r3, #1]
 8000ca8:	041a      	lsls	r2, r3, #16
	              (rxBuffer24bit[2] << 8) |
 8000caa:	4b7f      	ldr	r3, [pc, #508]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000cac:	789b      	ldrb	r3, [r3, #2]
 8000cae:	021b      	lsls	r3, r3, #8
	              (rxBuffer24bit[1] << 16) |
 8000cb0:	4313      	orrs	r3, r2
	               rxBuffer24bit[3];
 8000cb2:	4a7d      	ldr	r2, [pc, #500]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000cb4:	78d2      	ldrb	r2, [r2, #3]
	              (rxBuffer24bit[2] << 8) |
 8000cb6:	4313      	orrs	r3, r2
	  uint32_t value_24Bit =
 8000cb8:	617b      	str	r3, [r7, #20]

	  uint8_t  status       = rxBuffer24bit[4];              // Bottom byte = status
 8000cba:	4b7b      	ldr	r3, [pc, #492]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0x22c>)
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	74fb      	strb	r3, [r7, #19]

	  		bool rdy        = !(status & 0x80);   // Bit 7: 0 = data ready
 8000cc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	09db      	lsrs	r3, r3, #7
 8000cca:	74bb      	strb	r3, [r7, #18]
	  		bool adc_error  =  (status & 0x40);   // Bit 6: 1 = ADC error
 8000ccc:	7cfb      	ldrb	r3, [r7, #19]
 8000cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	747b      	strb	r3, [r7, #17]
	  		bool crc_error  =  (status & 0x20);   // Bit 5: 1 = CRC error
 8000cdc:	7cfb      	ldrb	r3, [r7, #19]
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	743b      	strb	r3, [r7, #16]
	  		uint8_t channel_id = status & 0x0F;   // Bits 3:0 = Channel ID
 8000cec:	7cfb      	ldrb	r3, [r7, #19]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	73fb      	strb	r3, [r7, #15]

	  		if (rdy && !adc_error && !crc_error && channel_id < NUM_CH_ENABLED) {
 8000cf4:	7cbb      	ldrb	r3, [r7, #18]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d017      	beq.n	8000d2a <HAL_SPI_TxRxCpltCallback+0xae>
 8000cfa:	7c7b      	ldrb	r3, [r7, #17]
 8000cfc:	f083 0301 	eor.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d011      	beq.n	8000d2a <HAL_SPI_TxRxCpltCallback+0xae>
 8000d06:	7c3b      	ldrb	r3, [r7, #16]
 8000d08:	f083 0301 	eor.w	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00b      	beq.n	8000d2a <HAL_SPI_TxRxCpltCallback+0xae>
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d808      	bhi.n	8000d2a <HAL_SPI_TxRxCpltCallback+0xae>
	  			channel_data[channel_id] = value_24Bit;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	4964      	ldr	r1, [pc, #400]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0x230>)
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  			channel_ready[channel_id] = 1;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	4a62      	ldr	r2, [pc, #392]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x234>)
 8000d26:	2101      	movs	r1, #1
 8000d28:	54d1      	strb	r1, [r2, r3]
	  		}

	  		// Once all 4 channels have been read, build and store packet
	  		if (channel_ready[0] && channel_ready[1] && channel_ready[2]) {
 8000d2a:	4b61      	ldr	r3, [pc, #388]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x234>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 80ab 	beq.w	8000e8c <HAL_SPI_TxRxCpltCallback+0x210>
 8000d36:	4b5e      	ldr	r3, [pc, #376]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x234>)
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80a5 	beq.w	8000e8c <HAL_SPI_TxRxCpltCallback+0x210>
 8000d42:	4b5b      	ldr	r3, [pc, #364]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x234>)
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 809f 	beq.w	8000e8c <HAL_SPI_TxRxCpltCallback+0x210>

	  			// Clear ready flags
	  			for (int i = 0; i < NUM_CH_ENABLED; i++) channel_ready[i] = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	e007      	b.n	8000d64 <HAL_SPI_TxRxCpltCallback+0xe8>
 8000d54:	4a56      	ldr	r2, [pc, #344]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x234>)
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	4413      	add	r3, r2
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3301      	adds	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	ddf4      	ble.n	8000d54 <HAL_SPI_TxRxCpltCallback+0xd8>

	  			// Fill spiData
	  			for (int i = 0; i < NUM_CH_ENABLED; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	e028      	b.n	8000dc2 <HAL_SPI_TxRxCpltCallback+0x146>
	  				spiData[spiIndex + (i * 2)]     = channel_data[i] & 0xFFFF; // bits 15:0
 8000d70:	4a4e      	ldr	r2, [pc, #312]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0x230>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d78:	4b4e      	ldr	r3, [pc, #312]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4619      	mov	r1, r3
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	440b      	add	r3, r1
 8000d86:	b291      	uxth	r1, r2
 8000d88:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8000d8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  				spiData[spiIndex + (i * 2) + 1] = (channel_data[i] >> 16) << 8 | i; // bits 23:16 + channel id
 8000d8e:	4a47      	ldr	r2, [pc, #284]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0x230>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b299      	uxth	r1, r3
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	4b44      	ldr	r3, [pc, #272]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4403      	add	r3, r0
 8000db0:	3301      	adds	r3, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	b291      	uxth	r1, r2
 8000db6:	4a40      	ldr	r2, [pc, #256]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8000db8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  			for (int i = 0; i < NUM_CH_ENABLED; i++) {
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	ddd3      	ble.n	8000d70 <HAL_SPI_TxRxCpltCallback+0xf4>
	  			}

	  			// Add timestamp
	  			spiData[spiIndex + 6]  = timer23val & 0xFFFF;
 8000dc8:	4b3c      	ldr	r3, [pc, #240]	@ (8000ebc <HAL_SPI_TxRxCpltCallback+0x240>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b39      	ldr	r3, [pc, #228]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3306      	adds	r3, #6
 8000dd4:	b291      	uxth	r1, r2
 8000dd6:	4a38      	ldr	r2, [pc, #224]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8000dd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  			spiData[spiIndex + 7]  = (timer23val >> 16) & 0xFFFF;
 8000ddc:	4b37      	ldr	r3, [pc, #220]	@ (8000ebc <HAL_SPI_TxRxCpltCallback+0x240>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	0c1a      	lsrs	r2, r3, #16
 8000de2:	4b34      	ldr	r3, [pc, #208]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3307      	adds	r3, #7
 8000dea:	b291      	uxth	r1, r2
 8000dec:	4a32      	ldr	r2, [pc, #200]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8000dee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	  			//spacers (may change this later)
	  			spiData[spiIndex + 8] = 0xAB89;
 8000df2:	4b30      	ldr	r3, [pc, #192]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	3308      	adds	r3, #8
 8000dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8000dfc:	f64a 3189 	movw	r1, #43913	@ 0xab89
 8000e00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  			spiData[spiIndex + 9] = 0xEFCD;
 8000e04:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	3309      	adds	r3, #9
 8000e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8000e0e:	f64e 71cd 	movw	r1, #61389	@ 0xefcd
 8000e12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	  			// Advance index
	  			spiIndex += 10;
 8000e16:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	330a      	adds	r3, #10
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000e22:	801a      	strh	r2, [r3, #0]

	  			if (spiIndex >= 700) {
 8000e24:	4b23      	ldr	r3, [pc, #140]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000e2e:	d303      	bcc.n	8000e38 <HAL_SPI_TxRxCpltCallback+0x1bc>
	  				spiIndex = 0;
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	801a      	strh	r2, [r3, #0]
 8000e36:	e029      	b.n	8000e8c <HAL_SPI_TxRxCpltCallback+0x210>
	  			}
	  			else if (spiIndex == 600) {
 8000e38:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e42:	d123      	bne.n	8000e8c <HAL_SPI_TxRxCpltCallback+0x210>
	  				spiData[spiIndex] = sampleNum++;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <HAL_SPI_TxRxCpltCallback+0x244>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	491d      	ldr	r1, [pc, #116]	@ (8000ec0 <HAL_SPI_TxRxCpltCallback+0x244>)
 8000e4c:	600a      	str	r2, [r1, #0]
 8000e4e:	4a19      	ldr	r2, [pc, #100]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000e50:	8812      	ldrh	r2, [r2, #0]
 8000e52:	b292      	uxth	r2, r2
 8000e54:	b299      	uxth	r1, r3
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8000e58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				spiIndex = 0;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x238>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	801a      	strh	r2, [r3, #0]


	  				BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
	  				vTaskNotifyGiveFromISR(ethernetTaskHandle, &xHigherPriorityTaskWoken); // function will set xHigherPriorityTaskWoken to pdTRUE if the unblocked task (ethernetTaskHandle) has a higher priority than the currently running task. Also unblocks task
 8000e66:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x248>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f107 0208 	add.w	r2, r7, #8
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00e fa67 	bl	800f344 <vTaskNotifyGiveFromISR>
	  				portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // if xHigherPriorityTaskWoken is pdTURE, scheduler will switch to the ethernetTaskHandle task as soon as the ISR completes. Otherwise, currently running task will continue to run after ISR completes
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <HAL_SPI_TxRxCpltCallback+0x210>
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x24c>)
 8000e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	f3bf 8f4f 	dsb	sy
 8000e88:	f3bf 8f6f 	isb	sy


	  			}

	  		}
	  		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e8c:	2017      	movs	r0, #23
 8000e8e:	f001 fa03 	bl	8002298 <HAL_NVIC_EnableIRQ>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3720      	adds	r7, #32
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40013000 	.word	0x40013000
 8000ea0:	58020400 	.word	0x58020400
 8000ea4:	2400589c 	.word	0x2400589c
 8000ea8:	24005870 	.word	0x24005870
 8000eac:	2400587c 	.word	0x2400587c
 8000eb0:	2400588c 	.word	0x2400588c
 8000eb4:	24005876 	.word	0x24005876
 8000eb8:	24004e44 	.word	0x24004e44
 8000ebc:	24005890 	.word	0x24005890
 8000ec0:	24005878 	.word	0x24005878
 8000ec4:	24004e40 	.word	0x24004e40
 8000ec8:	e000ed04 	.word	0xe000ed04

08000ecc <AD7177_WriteRegister>:
void AD7177_WriteRegister(uint8_t reg, uint32_t value, uint8_t num_bytes){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = (reg & 0x3F);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ee2:	73fb      	strb	r3, [r7, #15]
    uint8_t tx[4] = { cmd, 0, 0, 0 };
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	723b      	strb	r3, [r7, #8]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	727b      	strb	r3, [r7, #9]
 8000eec:	2300      	movs	r3, #0
 8000eee:	72bb      	strb	r3, [r7, #10]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	72fb      	strb	r3, [r7, #11]
    if (num_bytes == 3) {
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d10b      	bne.n	8000f12 <AD7177_WriteRegister+0x46>
        tx[1] = (value >> 16) & 0xFF;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	0c1b      	lsrs	r3, r3, #16
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	727b      	strb	r3, [r7, #9]
        tx[2] = (value >> 8) & 0xFF;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	72bb      	strb	r3, [r7, #10]
        tx[3] = value & 0xFF;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	72fb      	strb	r3, [r7, #11]
 8000f10:	e010      	b.n	8000f34 <AD7177_WriteRegister+0x68>
    } else if (num_bytes == 2) {
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d107      	bne.n	8000f28 <AD7177_WriteRegister+0x5c>
        tx[1] = (value >> 8) & 0xFF;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	727b      	strb	r3, [r7, #9]
        tx[2] = value & 0xFF;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	72bb      	strb	r3, [r7, #10]
 8000f26:	e005      	b.n	8000f34 <AD7177_WriteRegister+0x68>
    } else if (num_bytes == 1) {
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d102      	bne.n	8000f34 <AD7177_WriteRegister+0x68>
        tx[1] = value & 0xFF;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	727b      	strb	r3, [r7, #9]
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2140      	movs	r1, #64	@ 0x40
 8000f38:	480b      	ldr	r0, [pc, #44]	@ (8000f68 <AD7177_WriteRegister+0x9c>)
 8000f3a:	f005 f8b7 	bl	80060ac <HAL_GPIO_WritePin>
    //HAL_Delay(1);
    HAL_SPI_Transmit(&hspi1, tx, num_bytes + 1, HAL_MAX_DELAY);
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f107 0108 	add.w	r1, r7, #8
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <AD7177_WriteRegister+0xa0>)
 8000f50:	f007 fcd4 	bl	80088fc <HAL_SPI_Transmit>
    //HAL_Delay(1);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	@ 0x40
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <AD7177_WriteRegister+0x9c>)
 8000f5a:	f005 f8a7 	bl	80060ac <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	58020400 	.word	0x58020400
 8000f6c:	24004a68 	.word	0x24004a68

08000f70 <AD7177_ReadRegister>:

uint32_t AD7177_ReadRegister(uint8_t reg, uint8_t num_bytes)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	4603      	mov	r3, r0
 8000f78:	460a      	mov	r2, r1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = 0x40 | (reg & 0x3F);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	75fb      	strb	r3, [r7, #23]
    uint8_t tx[4] = { cmd, 0, 0, 0 };
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	743b      	strb	r3, [r7, #16]
 8000f96:	2300      	movs	r3, #0
 8000f98:	747b      	strb	r3, [r7, #17]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	74bb      	strb	r3, [r7, #18]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	74fb      	strb	r3, [r7, #19]
    uint8_t rx[4] = {0};
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2140      	movs	r1, #64	@ 0x40
 8000faa:	4818      	ldr	r0, [pc, #96]	@ (800100c <AD7177_ReadRegister+0x9c>)
 8000fac:	f005 f87e 	bl	80060ac <HAL_GPIO_WritePin>
    //HAL_Delay(1);
    HAL_SPI_TransmitReceive(&hspi1, tx, rx, num_bytes + 1, 50);
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	f107 020c 	add.w	r2, r7, #12
 8000fbc:	f107 0110 	add.w	r1, r7, #16
 8000fc0:	2032      	movs	r0, #50	@ 0x32
 8000fc2:	9000      	str	r0, [sp, #0]
 8000fc4:	4812      	ldr	r0, [pc, #72]	@ (8001010 <AD7177_ReadRegister+0xa0>)
 8000fc6:	f008 f8f9 	bl	80091bc <HAL_SPI_TransmitReceive>
    //HAL_Delay(1);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2140      	movs	r1, #64	@ 0x40
 8000fce:	480f      	ldr	r0, [pc, #60]	@ (800100c <AD7177_ReadRegister+0x9c>)
 8000fd0:	f005 f86c 	bl	80060ac <HAL_GPIO_WritePin>
    uint32_t result = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < num_bytes; ++i) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	e00c      	b.n	8000ff8 <AD7177_ReadRegister+0x88>
        result = (result << 8) | rx[i + 1];
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	3220      	adds	r2, #32
 8000fe8:	443a      	add	r2, r7
 8000fea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < num_bytes; ++i) {
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbee      	blt.n	8000fde <AD7177_ReadRegister+0x6e>
    }
    return result;
 8001000:	69fb      	ldr	r3, [r7, #28]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	58020400 	.word	0x58020400
 8001010:	24004a68 	.word	0x24004a68

08001014 <initializeAD7177Board>:

void initializeAD7177Board() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    // Reset
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2140      	movs	r1, #64	@ 0x40
 800101c:	482d      	ldr	r0, [pc, #180]	@ (80010d4 <initializeAD7177Board+0xc0>)
 800101e:	f005 f845 	bl	80060ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)resetSequence, 8, HAL_MAX_DELAY);
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	2208      	movs	r2, #8
 8001028:	492b      	ldr	r1, [pc, #172]	@ (80010d8 <initializeAD7177Board+0xc4>)
 800102a:	482c      	ldr	r0, [pc, #176]	@ (80010dc <initializeAD7177Board+0xc8>)
 800102c:	f007 fc66 	bl	80088fc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2140      	movs	r1, #64	@ 0x40
 8001034:	4827      	ldr	r0, [pc, #156]	@ (80010d4 <initializeAD7177Board+0xc0>)
 8001036:	f005 f839 	bl	80060ac <HAL_GPIO_WritePin>

    HAL_Delay(5);
 800103a:	2005      	movs	r0, #5
 800103c:	f000 fffe 	bl	800203c <HAL_Delay>


    // Check for functionality
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2140      	movs	r1, #64	@ 0x40
 8001044:	4823      	ldr	r0, [pc, #140]	@ (80010d4 <initializeAD7177Board+0xc0>)
 8001046:	f005 f831 	bl	80060ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)checkTransmit, 1, HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	2201      	movs	r2, #1
 8001050:	4923      	ldr	r1, [pc, #140]	@ (80010e0 <initializeAD7177Board+0xcc>)
 8001052:	4822      	ldr	r0, [pc, #136]	@ (80010dc <initializeAD7177Board+0xc8>)
 8001054:	f007 fc52 	bl	80088fc <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)checkReceive, 2, HAL_MAX_DELAY);
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	2202      	movs	r2, #2
 800105e:	4921      	ldr	r1, [pc, #132]	@ (80010e4 <initializeAD7177Board+0xd0>)
 8001060:	481e      	ldr	r0, [pc, #120]	@ (80010dc <initializeAD7177Board+0xc8>)
 8001062:	f007 fe39 	bl	8008cd8 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2140      	movs	r1, #64	@ 0x40
 800106a:	481a      	ldr	r0, [pc, #104]	@ (80010d4 <initializeAD7177Board+0xc0>)
 800106c:	f005 f81e 	bl	80060ac <HAL_GPIO_WritePin>
    } else {
        // Unexpected ID
    }

    // set up ADC Mode
    AD7177_WriteRegister(AD7177_REG_ADCMODE, AD7177_ADCMODE, 2);
 8001070:	2202      	movs	r2, #2
 8001072:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff ff28 	bl	8000ecc <AD7177_WriteRegister>

    // set up IF Mode, enable DATA_STAT byte and continuous read mode
    AD7177_WriteRegister(AD7177_REG_IFMODE, AD7177_IFMODE, 2);
 800107c:	2202      	movs	r2, #2
 800107e:	2140      	movs	r1, #64	@ 0x40
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff ff23 	bl	8000ecc <AD7177_WriteRegister>

    // Configure filter mode 0
    AD7177_WriteRegister(AD7177_REG_FILTCON0, AD7177_FILTCON0, 2);
 8001086:	2202      	movs	r2, #2
 8001088:	2109      	movs	r1, #9
 800108a:	2028      	movs	r0, #40	@ 0x28
 800108c:	f7ff ff1e 	bl	8000ecc <AD7177_WriteRegister>

    // Configure setup mode 0
    AD7177_WriteRegister(AD7177_REG_SETUPCON0, AD7177_SETUPCON0, 2);
 8001090:	2202      	movs	r2, #2
 8001092:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001096:	2020      	movs	r0, #32
 8001098:	f7ff ff18 	bl	8000ecc <AD7177_WriteRegister>

    // Setup channels 0 to 2
    AD7177_WriteRegister(AD7177_REG_CH0, AD7177_CH0_SETUP0, 2);
 800109c:	2202      	movs	r2, #2
 800109e:	f248 0104 	movw	r1, #32772	@ 0x8004
 80010a2:	2010      	movs	r0, #16
 80010a4:	f7ff ff12 	bl	8000ecc <AD7177_WriteRegister>
    AD7177_WriteRegister(AD7177_REG_CH1, AD7177_CH1_SETUP0, 2);
 80010a8:	2202      	movs	r2, #2
 80010aa:	f248 0124 	movw	r1, #32804	@ 0x8024
 80010ae:	2011      	movs	r0, #17
 80010b0:	f7ff ff0c 	bl	8000ecc <AD7177_WriteRegister>
    AD7177_WriteRegister(AD7177_REG_CH2, AD7177_CH2_SETUP0, 2);
 80010b4:	2202      	movs	r2, #2
 80010b6:	f248 0144 	movw	r1, #32836	@ 0x8044
 80010ba:	2012      	movs	r0, #18
 80010bc:	f7ff ff06 	bl	8000ecc <AD7177_WriteRegister>

    // read channel 2
    ch = AD7177_ReadRegister(AD7177_REG_CH0, 2);
 80010c0:	2102      	movs	r1, #2
 80010c2:	2010      	movs	r0, #16
 80010c4:	f7ff ff54 	bl	8000f70 <AD7177_ReadRegister>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a07      	ldr	r2, [pc, #28]	@ (80010e8 <initializeAD7177Board+0xd4>)
 80010cc:	6013      	str	r3, [r2, #0]

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	58020400 	.word	0x58020400
 80010d8:	24004984 	.word	0x24004984
 80010dc:	24004a68 	.word	0x24004a68
 80010e0:	2400498c 	.word	0x2400498c
 80010e4:	24005894 	.word	0x24005894
 80010e8:	240058a0 	.word	0x240058a0

080010ec <readInitializedRegisters>:
void readInitializedRegisters() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	adc_mode = AD7177_ReadRegister(AD7177_REG_ADCMODE, 2);
 80010f0:	2102      	movs	r1, #2
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff ff3c 	bl	8000f70 <AD7177_ReadRegister>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <readInitializedRegisters+0xac>)
 80010fc:	6013      	str	r3, [r2, #0]
	if_mode = AD7177_ReadRegister(AD7177_REG_IFMODE, 2);
 80010fe:	2102      	movs	r1, #2
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff ff35 	bl	8000f70 <AD7177_ReadRegister>
 8001106:	4603      	mov	r3, r0
 8001108:	4a24      	ldr	r2, [pc, #144]	@ (800119c <readInitializedRegisters+0xb0>)
 800110a:	6013      	str	r3, [r2, #0]
	filtcon0 = AD7177_ReadRegister(AD7177_REG_FILTCON0, 2);
 800110c:	2102      	movs	r1, #2
 800110e:	2028      	movs	r0, #40	@ 0x28
 8001110:	f7ff ff2e 	bl	8000f70 <AD7177_ReadRegister>
 8001114:	4603      	mov	r3, r0
 8001116:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <readInitializedRegisters+0xb4>)
 8001118:	6013      	str	r3, [r2, #0]
	setupcon0 = AD7177_ReadRegister(AD7177_REG_SETUPCON0, 2);
 800111a:	2102      	movs	r1, #2
 800111c:	2020      	movs	r0, #32
 800111e:	f7ff ff27 	bl	8000f70 <AD7177_ReadRegister>
 8001122:	4603      	mov	r3, r0
 8001124:	4a1f      	ldr	r2, [pc, #124]	@ (80011a4 <readInitializedRegisters+0xb8>)
 8001126:	6013      	str	r3, [r2, #0]

	ch0_setup = AD7177_ReadRegister(AD7177_REG_CH0, 2);
 8001128:	2102      	movs	r1, #2
 800112a:	2010      	movs	r0, #16
 800112c:	f7ff ff20 	bl	8000f70 <AD7177_ReadRegister>
 8001130:	4603      	mov	r3, r0
 8001132:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <readInitializedRegisters+0xbc>)
 8001134:	6013      	str	r3, [r2, #0]
	ch1_setup = AD7177_ReadRegister(AD7177_REG_CH1, 2);
 8001136:	2102      	movs	r1, #2
 8001138:	2011      	movs	r0, #17
 800113a:	f7ff ff19 	bl	8000f70 <AD7177_ReadRegister>
 800113e:	4603      	mov	r3, r0
 8001140:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <readInitializedRegisters+0xc0>)
 8001142:	6013      	str	r3, [r2, #0]
	ch2_setup = AD7177_ReadRegister(AD7177_REG_CH2, 2);
 8001144:	2102      	movs	r1, #2
 8001146:	2012      	movs	r0, #18
 8001148:	f7ff ff12 	bl	8000f70 <AD7177_ReadRegister>
 800114c:	4603      	mov	r3, r0
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <readInitializedRegisters+0xc4>)
 8001150:	6013      	str	r3, [r2, #0]
	ch3_setup = AD7177_ReadRegister(AD7177_REG_CH3, 2);
 8001152:	2102      	movs	r1, #2
 8001154:	2013      	movs	r0, #19
 8001156:	f7ff ff0b 	bl	8000f70 <AD7177_ReadRegister>
 800115a:	4603      	mov	r3, r0
 800115c:	4a15      	ldr	r2, [pc, #84]	@ (80011b4 <readInitializedRegisters+0xc8>)
 800115e:	6013      	str	r3, [r2, #0]

	initial_data = AD7177_ReadRegister(AD7177_REG_DATA, 4);
 8001160:	2104      	movs	r1, #4
 8001162:	2004      	movs	r0, #4
 8001164:	f7ff ff04 	bl	8000f70 <AD7177_ReadRegister>
 8001168:	4603      	mov	r3, r0
 800116a:	4a13      	ldr	r2, [pc, #76]	@ (80011b8 <readInitializedRegisters+0xcc>)
 800116c:	6013      	str	r3, [r2, #0]
	initial_voltage = convertDataToVoltage(initial_data);
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <readInitializedRegisters+0xcc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f826 	bl	80011c4 <convertDataToVoltage>
 8001178:	eef0 7a40 	vmov.f32	s15, s0
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <readInitializedRegisters+0xd0>)
 800117e:	edc3 7a00 	vstr	s15, [r3]

	initial_ch = initial_data & 0x03;
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <readInitializedRegisters+0xcc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <readInitializedRegisters+0xd4>)
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	24004990 	.word	0x24004990
 800119c:	24004994 	.word	0x24004994
 80011a0:	24004998 	.word	0x24004998
 80011a4:	2400499c 	.word	0x2400499c
 80011a8:	240049a0 	.word	0x240049a0
 80011ac:	240049a4 	.word	0x240049a4
 80011b0:	240049a8 	.word	0x240049a8
 80011b4:	240049ac 	.word	0x240049ac
 80011b8:	240049b0 	.word	0x240049b0
 80011bc:	240049b4 	.word	0x240049b4
 80011c0:	240049b8 	.word	0x240049b8

080011c4 <convertDataToVoltage>:

float convertDataToVoltage(uint32_t data){
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	//read the first 24 bits:
	uint32_t first24 = data >> 8;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	60fb      	str	r3, [r7, #12]

	float voltage = (((float)first24 / ((1 << 24) - 1)) * 10) - 5;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011dc:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800120c <convertDataToVoltage+0x48>
 80011e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80011e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ec:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80011f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f4:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	ee07 3a90 	vmov	s15, r3
}
 80011fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	4b7fffff 	.word	0x4b7fffff

08001210 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	// MAKE SURE TO DELETE ANY "MX_LWIP_Init()" ABOVE
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f00b faf8 	bl	800c80e <osDelay>
 800121e:	e7fb      	b.n	8001218 <StartDefaultTask+0x8>

08001220 <startEthernetTask>:
void startEthernetTask(void *argument)
{
  /* USER CODE BEGIN startEthernetTask */

void startEthernetTask(void *argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0a4      	sub	sp, #144	@ 0x90
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN startEthernetTask */
	MX_LWIP_Init();
 8001228:	f00a fb5a 	bl	800b8e0 <MX_LWIP_Init>
	osDelay(100); // let LWIP be initialized
 800122c:	2064      	movs	r0, #100	@ 0x64
 800122e:	f00b faee 	bl	800c80e <osDelay>
	extern struct netif gnetif;
	netif_set_up(&gnetif);
 8001232:	4847      	ldr	r0, [pc, #284]	@ (8001350 <startEthernetTask+0x130>)
 8001234:	f010 faa8 	bl	8011788 <netif_set_up>
	netif_set_link_up(&gnetif); // Forces link status if not auto-detected
 8001238:	4845      	ldr	r0, [pc, #276]	@ (8001350 <startEthernetTask+0x130>)
 800123a:	f010 fb43 	bl	80118c4 <netif_set_link_up>
	const char* ip_status;
	ip_status = ipaddr_ntoa(&gnetif.ip_addr);
 800123e:	4845      	ldr	r0, [pc, #276]	@ (8001354 <startEthernetTask+0x134>)
 8001240:	f018 fe92 	bl	8019f68 <ip4addr_ntoa>
 8001244:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	ETH_MACConfigTypeDef mac_config;
	HAL_ETH_GetMACConfig(&heth, &mac_config);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4842      	ldr	r0, [pc, #264]	@ (8001358 <startEthernetTask+0x138>)
 8001250:	f003 fdaa 	bl	8004da8 <HAL_ETH_GetMACConfig>
	volatile uint32_t eth_speed = mac_config.Speed;         // Should be ETH_SPEED_100M
 8001254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001256:	61bb      	str	r3, [r7, #24]
	volatile uint32_t eth_duplex = mac_config.DuplexMode;   // Should be ETH_FULLDUPLEX_MODE
 8001258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125a:	617b      	str	r3, [r7, #20]
	extern ETH_HandleTypeDef heth;
	HAL_StatusTypeDef eth_status = HAL_ETH_Start(&heth);
 800125c:	483e      	ldr	r0, [pc, #248]	@ (8001358 <startEthernetTask+0x138>)
 800125e:	f003 f8b1 	bl	80043c4 <HAL_ETH_Start>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	if (eth_status != HAL_OK)
 8001268:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <startEthernetTask+0x54>
	{
	    // Set a debug flag so we know it failed
	    volatile int eth_failed = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
	}
	// Own IP
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 10, 20, 3, 3);
 8001274:	4b39      	ldr	r3, [pc, #228]	@ (800135c <startEthernetTask+0x13c>)
 8001276:	613b      	str	r3, [r7, #16]
	// Computer IP
	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 10, 20, 1, 3);
 8001278:	4b39      	ldr	r3, [pc, #228]	@ (8001360 <startEthernetTask+0x140>)
 800127a:	60fb      	str	r3, [r7, #12]
	struct udp_pcb* my_udp = udp_new();
 800127c:	f017 fa48 	bl	8018710 <udp_new>
 8001280:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	udp_bind(my_udp, &myIPaddr, 8);
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	2208      	movs	r2, #8
 800128a:	4619      	mov	r1, r3
 800128c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001290:	f017 f948 	bl	8018524 <udp_bind>
	udp_connect(my_udp, &PC_IPADDR, 12345);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	f243 0239 	movw	r2, #12345	@ 0x3039
 800129c:	4619      	mov	r1, r3
 800129e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80012a2:	f017 f9c7 	bl	8018634 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	// Start timer 23
	HAL_TIM_Base_Start(&htim23);
 80012ac:	482d      	ldr	r0, [pc, #180]	@ (8001364 <startEthernetTask+0x144>)
 80012ae:	f009 f835 	bl	800a31c <HAL_TIM_Base_Start>
	// Start timer 1
	HAL_TIM_Base_Start(&htim1);
 80012b2:	482d      	ldr	r0, [pc, #180]	@ (8001368 <startEthernetTask+0x148>)
 80012b4:	f009 f832 	bl	800a31c <HAL_TIM_Base_Start>
	// Start timer 2 with 1ms interrupts
	HAL_TIM_Base_Start_IT(&htim2);
 80012b8:	482c      	ldr	r0, [pc, #176]	@ (800136c <startEthernetTask+0x14c>)
 80012ba:	f009 f8ad 	bl	800a418 <HAL_TIM_Base_Start_IT>

	initializeAD7177Board();
 80012be:	f7ff fea9 	bl	8001014 <initializeAD7177Board>

	readInitializedRegisters();
 80012c2:	f7ff ff13 	bl	80010ec <readInitializedRegisters>

	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012c6:	2017      	movs	r0, #23
 80012c8:	f000 ffe6 	bl	8002298 <HAL_NVIC_EnableIRQ>
	for (;;)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	2001      	movs	r0, #1
 80012d2:	f00d ffeb 	bl	800f2ac <ulTaskNotifyTake>

		// Copy samples from spiData to tempBuffer
					  memcpy(tempBuffer, spiData, sizeof(tempBuffer));
 80012d6:	4a26      	ldr	r2, [pc, #152]	@ (8001370 <startEthernetTask+0x150>)
 80012d8:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <startEthernetTask+0x154>)
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f240 43b2 	movw	r3, #1202	@ 0x4b2
 80012e2:	461a      	mov	r2, r3
 80012e4:	f01a f90f 	bl	801b506 <memcpy>

					  // Send the data over Ethernet
					  udp_buffer = pbuf_alloc(PBUF_TRANSPORT, sizeof(tempBuffer), PBUF_RAM);
 80012e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80012ec:	f240 41b2 	movw	r1, #1202	@ 0x4b2
 80012f0:	2036      	movs	r0, #54	@ 0x36
 80012f2:	f010 fc15 	bl	8011b20 <pbuf_alloc>
 80012f6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					  if (udp_buffer != NULL)
 80012fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d012      	beq.n	8001328 <startEthernetTask+0x108>
					  {
						  memcpy(udp_buffer->payload, tempBuffer, sizeof(tempBuffer));
 8001302:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f240 42b2 	movw	r2, #1202	@ 0x4b2
 800130c:	4918      	ldr	r1, [pc, #96]	@ (8001370 <startEthernetTask+0x150>)
 800130e:	4618      	mov	r0, r3
 8001310:	f01a f8f9 	bl	801b506 <memcpy>
						  udp_send(my_udp, udp_buffer);
 8001314:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001318:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800131c:	f016 ff18 	bl	8018150 <udp_send>
						  pbuf_free(udp_buffer);
 8001320:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001324:	f010 fee4 	bl	80120f0 <pbuf_free>
					  }

					  // Shift the remaining samples up in the spiData buffer (pointer to dest, pointer to source, number of bytes)
					  memmove(spiData, &spiData[601], sizeof(spiData) - sizeof(tempBuffer));
 8001328:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <startEthernetTask+0x154>)
 800132a:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <startEthernetTask+0x158>)
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	23c6      	movs	r3, #198	@ 0xc6
 8001332:	461a      	mov	r2, r3
 8001334:	f01a f8e7 	bl	801b506 <memcpy>

					  // Update spiIndex to reflect the new starting position
					  spiIndex -= 601;
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <startEthernetTask+0x15c>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <startEthernetTask+0x15c>)
 8001346:	801a      	strh	r2, [r3, #0]

					osDelay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f00b fa60 	bl	800c80e <osDelay>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800134e:	e7bd      	b.n	80012cc <startEthernetTask+0xac>
 8001350:	240058f8 	.word	0x240058f8
 8001354:	240058fc 	.word	0x240058fc
 8001358:	24005978 	.word	0x24005978
 800135c:	0303140a 	.word	0x0303140a
 8001360:	0301140a 	.word	0x0301140a
 8001364:	24004df0 	.word	0x24004df0
 8001368:	24004d58 	.word	0x24004d58
 800136c:	24004da4 	.word	0x24004da4
 8001370:	240053bc 	.word	0x240053bc
 8001374:	24004e44 	.word	0x24004e44
 8001378:	240052f6 	.word	0x240052f6
 800137c:	24005876 	.word	0x24005876

08001380 <MPU_Config>:
  /* USER CODE END startEthernetTask */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001392:	f000 ff9d 	bl	80022d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001396:	2301      	movs	r3, #1
 8001398:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800139a:	2300      	movs	r3, #0
 800139c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80013a2:	231f      	movs	r3, #31
 80013a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80013a6:	2387      	movs	r3, #135	@ 0x87
 80013a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80013ae:	2300      	movs	r3, #0
 80013b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013c2:	463b      	mov	r3, r7
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 ffbb 	bl	8002340 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80013ce:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80013d2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 80013d4:	2309      	movs	r3, #9
 80013d6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80013d8:	2300      	movs	r3, #0
 80013da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013dc:	2303      	movs	r3, #3
 80013de:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013e4:	463b      	mov	r3, r7
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 ffaa 	bl	8002340 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <MPU_Config+0x9c>)
 80013f2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80013f4:	230f      	movs	r3, #15
 80013f6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001404:	463b      	mov	r3, r7
 8001406:	4618      	mov	r0, r3
 8001408:	f000 ff9a 	bl	8002340 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800140c:	2004      	movs	r0, #4
 800140e:	f000 ff77 	bl	8002300 <HAL_MPU_Enable>

}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	30000200 	.word	0x30000200

08001420 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001432:	f000 fde3 	bl	8001ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40001000 	.word	0x40001000

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <Error_Handler+0x8>

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <HAL_MspInit+0x38>)
 8001458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800145c:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <HAL_MspInit+0x38>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HAL_MspInit+0x38>)
 8001468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	210f      	movs	r1, #15
 8001478:	f06f 0001 	mvn.w	r0, #1
 800147c:	f000 fef2 	bl	8002264 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58024400 	.word	0x58024400

0800148c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0bc      	sub	sp, #240	@ 0xf0
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	22b8      	movs	r2, #184	@ 0xb8
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f019 ff56 	bl	801b35e <memset>
  if(hspi->Instance==SPI1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a69      	ldr	r2, [pc, #420]	@ (800165c <HAL_SPI_MspInit+0x1d0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	f040 80df 	bne.w	800167c <HAL_SPI_MspInit+0x1f0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80014ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 fde9 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80014e0:	f7ff ffb0 	bl	8001444 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001660 <HAL_SPI_MspInit+0x1d4>)
 80014e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014ea:	4a5d      	ldr	r2, [pc, #372]	@ (8001660 <HAL_SPI_MspInit+0x1d4>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001660 <HAL_SPI_MspInit+0x1d4>)
 80014f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b57      	ldr	r3, [pc, #348]	@ (8001660 <HAL_SPI_MspInit+0x1d4>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	4a55      	ldr	r2, [pc, #340]	@ (8001660 <HAL_SPI_MspInit+0x1d4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001512:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <HAL_SPI_MspInit+0x1d4>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b4f      	ldr	r3, [pc, #316]	@ (8001660 <HAL_SPI_MspInit+0x1d4>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	4a4e      	ldr	r2, [pc, #312]	@ (8001660 <HAL_SPI_MspInit+0x1d4>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001530:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <HAL_SPI_MspInit+0x1d4>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800153e:	2360      	movs	r3, #96	@ 0x60
 8001540:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001556:	2305      	movs	r3, #5
 8001558:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001560:	4619      	mov	r1, r3
 8001562:	4840      	ldr	r0, [pc, #256]	@ (8001664 <HAL_SPI_MspInit+0x1d8>)
 8001564:	f004 fbfa 	bl	8005d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001568:	2320      	movs	r3, #32
 800156a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001580:	2305      	movs	r3, #5
 8001582:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800158a:	4619      	mov	r1, r3
 800158c:	4836      	ldr	r0, [pc, #216]	@ (8001668 <HAL_SPI_MspInit+0x1dc>)
 800158e:	f004 fbe5 	bl	8005d5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream2;
 8001592:	4b36      	ldr	r3, [pc, #216]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 8001594:	4a36      	ldr	r2, [pc, #216]	@ (8001670 <HAL_SPI_MspInit+0x1e4>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001598:	4b34      	ldr	r3, [pc, #208]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 800159a:	2225      	movs	r2, #37	@ 0x25
 800159c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159e:	4b33      	ldr	r3, [pc, #204]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b31      	ldr	r3, [pc, #196]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b30      	ldr	r3, [pc, #192]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b2:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80015be:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015c4:	4b29      	ldr	r3, [pc, #164]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015c6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015cc:	4b27      	ldr	r3, [pc, #156]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80015d2:	4826      	ldr	r0, [pc, #152]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015d4:	f000 fef4 	bl	80023c0 <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_SPI_MspInit+0x156>
    {
      Error_Handler();
 80015de:	f7ff ff31 	bl	8001444 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a21      	ldr	r2, [pc, #132]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015e6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015e8:	4a20      	ldr	r2, [pc, #128]	@ (800166c <HAL_SPI_MspInit+0x1e0>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 80015f0:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <HAL_SPI_MspInit+0x1ec>)
 80015f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 80015f6:	2226      	movs	r2, #38	@ 0x26
 80015f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 80015fc:	2240      	movs	r2, #64	@ 0x40
 80015fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 8001608:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800160c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800161a:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 8001622:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001626:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800162e:	4811      	ldr	r0, [pc, #68]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 8001630:	f000 fec6 	bl	80023c0 <HAL_DMA_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_SPI_MspInit+0x1b2>
    {
      Error_Handler();
 800163a:	f7ff ff03 	bl	8001444 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a0c      	ldr	r2, [pc, #48]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 8001642:	679a      	str	r2, [r3, #120]	@ 0x78
 8001644:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_SPI_MspInit+0x1e8>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2105      	movs	r1, #5
 800164e:	2023      	movs	r0, #35	@ 0x23
 8001650:	f000 fe08 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001654:	2023      	movs	r0, #35	@ 0x23
 8001656:	f000 fe1f 	bl	8002298 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 800165a:	e0c0      	b.n	80017de <HAL_SPI_MspInit+0x352>
 800165c:	40013000 	.word	0x40013000
 8001660:	58024400 	.word	0x58024400
 8001664:	58020000 	.word	0x58020000
 8001668:	58020400 	.word	0x58020400
 800166c:	24004b78 	.word	0x24004b78
 8001670:	40020040 	.word	0x40020040
 8001674:	24004bf0 	.word	0x24004bf0
 8001678:	40020058 	.word	0x40020058
  else if(hspi->Instance==SPI4)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a59      	ldr	r2, [pc, #356]	@ (80017e8 <HAL_SPI_MspInit+0x35c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	f040 80ab 	bne.w	80017de <HAL_SPI_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001688:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 fd04 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80016aa:	f7ff fecb 	bl	8001444 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016ae:	4b4f      	ldr	r3, [pc, #316]	@ (80017ec <HAL_SPI_MspInit+0x360>)
 80016b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016b4:	4a4d      	ldr	r2, [pc, #308]	@ (80017ec <HAL_SPI_MspInit+0x360>)
 80016b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016be:	4b4b      	ldr	r3, [pc, #300]	@ (80017ec <HAL_SPI_MspInit+0x360>)
 80016c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016cc:	4b47      	ldr	r3, [pc, #284]	@ (80017ec <HAL_SPI_MspInit+0x360>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d2:	4a46      	ldr	r2, [pc, #280]	@ (80017ec <HAL_SPI_MspInit+0x360>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016dc:	4b43      	ldr	r3, [pc, #268]	@ (80017ec <HAL_SPI_MspInit+0x360>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80016ea:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80016ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001704:	2305      	movs	r3, #5
 8001706:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800170e:	4619      	mov	r1, r3
 8001710:	4837      	ldr	r0, [pc, #220]	@ (80017f0 <HAL_SPI_MspInit+0x364>)
 8001712:	f004 fb23 	bl	8005d5c <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8001716:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 8001718:	4a37      	ldr	r2, [pc, #220]	@ (80017f8 <HAL_SPI_MspInit+0x36c>)
 800171a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800171c:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 800171e:	2254      	movs	r2, #84	@ 0x54
 8001720:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001722:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 8001724:	2240      	movs	r2, #64	@ 0x40
 8001726:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001728:	4b32      	ldr	r3, [pc, #200]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800172e:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 8001730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001734:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001736:	4b2f      	ldr	r3, [pc, #188]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173c:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001742:	4b2c      	ldr	r3, [pc, #176]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001748:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 800174a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800174e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001750:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001756:	4827      	ldr	r0, [pc, #156]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 8001758:	f000 fe32 	bl	80023c0 <HAL_DMA_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_SPI_MspInit+0x2da>
      Error_Handler();
 8001762:	f7ff fe6f 	bl	8001444 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a22      	ldr	r2, [pc, #136]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 800176a:	679a      	str	r2, [r3, #120]	@ 0x78
 800176c:	4a21      	ldr	r2, [pc, #132]	@ (80017f4 <HAL_SPI_MspInit+0x368>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_rx.Instance = DMA1_Stream1;
 8001772:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 8001774:	4a22      	ldr	r2, [pc, #136]	@ (8001800 <HAL_SPI_MspInit+0x374>)
 8001776:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001778:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 800177a:	2253      	movs	r2, #83	@ 0x53
 800177c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001784:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 800178c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001790:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 8001794:	2200      	movs	r2, #0
 8001796:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 80017a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80017aa:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80017b2:	4812      	ldr	r0, [pc, #72]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 80017b4:	f000 fe04 	bl	80023c0 <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_SPI_MspInit+0x336>
      Error_Handler();
 80017be:	f7ff fe41 	bl	8001444 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 80017c6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80017c8:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <HAL_SPI_MspInit+0x370>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	2054      	movs	r0, #84	@ 0x54
 80017d4:	f000 fd46 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80017d8:	2054      	movs	r0, #84	@ 0x54
 80017da:	f000 fd5d 	bl	8002298 <HAL_NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	37f0      	adds	r7, #240	@ 0xf0
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40013400 	.word	0x40013400
 80017ec:	58024400 	.word	0x58024400
 80017f0:	58021000 	.word	0x58021000
 80017f4:	24004c68 	.word	0x24004c68
 80017f8:	40020010 	.word	0x40020010
 80017fc:	24004ce0 	.word	0x24004ce0
 8001800:	40020028 	.word	0x40020028

08001804 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a23      	ldr	r2, [pc, #140]	@ (80018a0 <HAL_TIM_Base_MspInit+0x9c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10f      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001816:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800181c:	4a21      	ldr	r2, [pc, #132]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001826:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM23_MspInit 1 */

    /* USER CODE END TIM23_MspInit 1 */
  }

}
 8001834:	e030      	b.n	8001898 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800183e:	d117      	bne.n	8001870 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001846:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2105      	movs	r1, #5
 8001862:	201c      	movs	r0, #28
 8001864:	f000 fcfe 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001868:	201c      	movs	r0, #28
 800186a:	f000 fd15 	bl	8002298 <HAL_NVIC_EnableIRQ>
}
 800186e:	e013      	b.n	8001898 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM23)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10e      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 800187c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001880:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001886:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 800188c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001890:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40010000 	.word	0x40010000
 80018a4:	58024400 	.word	0x58024400
 80018a8:	4000e000 	.word	0x4000e000

080018ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b090      	sub	sp, #64	@ 0x40
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	d827      	bhi.n	800190a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	2036      	movs	r0, #54	@ 0x36
 80018c0:	f000 fcd0 	bl	8002264 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018c4:	2036      	movs	r0, #54	@ 0x36
 80018c6:	f000 fce7 	bl	8002298 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80018ca:	4a29      	ldr	r2, [pc, #164]	@ (8001970 <HAL_InitTick+0xc4>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018d0:	4b28      	ldr	r3, [pc, #160]	@ (8001974 <HAL_InitTick+0xc8>)
 80018d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d6:	4a27      	ldr	r2, [pc, #156]	@ (8001974 <HAL_InitTick+0xc8>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018e0:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <HAL_InitTick+0xc8>)
 80018e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ee:	f107 0210 	add.w	r2, r7, #16
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f005 fb95 	bl	8007028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001900:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001904:	2b00      	cmp	r3, #0
 8001906:	d106      	bne.n	8001916 <HAL_InitTick+0x6a>
 8001908:	e001      	b.n	800190e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e02b      	b.n	8001966 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800190e:	f005 fb75 	bl	8006ffc <HAL_RCC_GetPCLK1Freq>
 8001912:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001914:	e004      	b.n	8001920 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001916:	f005 fb71 	bl	8006ffc <HAL_RCC_GetPCLK1Freq>
 800191a:	4603      	mov	r3, r0
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001922:	4a15      	ldr	r2, [pc, #84]	@ (8001978 <HAL_InitTick+0xcc>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	3b01      	subs	r3, #1
 800192c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <HAL_InitTick+0xd0>)
 8001930:	4a13      	ldr	r2, [pc, #76]	@ (8001980 <HAL_InitTick+0xd4>)
 8001932:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <HAL_InitTick+0xd0>)
 8001936:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800193a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800193c:	4a0f      	ldr	r2, [pc, #60]	@ (800197c <HAL_InitTick+0xd0>)
 800193e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001940:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_InitTick+0xd0>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <HAL_InitTick+0xd0>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800194e:	480b      	ldr	r0, [pc, #44]	@ (800197c <HAL_InitTick+0xd0>)
 8001950:	f008 fc8d 	bl	800a26e <HAL_TIM_Base_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d104      	bne.n	8001964 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800195a:	4808      	ldr	r0, [pc, #32]	@ (800197c <HAL_InitTick+0xd0>)
 800195c:	f008 fd5c 	bl	800a418 <HAL_TIM_Base_Start_IT>
 8001960:	4603      	mov	r3, r0
 8001962:	e000      	b.n	8001966 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	3740      	adds	r7, #64	@ 0x40
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	240049c4 	.word	0x240049c4
 8001974:	58024400 	.word	0x58024400
 8001978:	431bde83 	.word	0x431bde83
 800197c:	240058a4 	.word	0x240058a4
 8001980:	40001000 	.word	0x40001000

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <NMI_Handler+0x4>

0800198c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <MemManage_Handler+0x4>

0800199c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <UsageFault_Handler+0x4>

080019ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <DMA1_Stream0_IRQHandler+0x10>)
 80019c2:	f001 fa9b 	bl	8002efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	24004c68 	.word	0x24004c68

080019d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <DMA1_Stream1_IRQHandler+0x10>)
 80019d6:	f001 fa91 	bl	8002efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	24004ce0 	.word	0x24004ce0

080019e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <DMA1_Stream2_IRQHandler+0x10>)
 80019ea:	f001 fa87 	bl	8002efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	24004b78 	.word	0x24004b78

080019f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <DMA1_Stream3_IRQHandler+0x10>)
 80019fe:	f001 fa7d 	bl	8002efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	24004bf0 	.word	0x24004bf0

08001a0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a10:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a14:	f004 fb63 	bl	80060de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a20:	4802      	ldr	r0, [pc, #8]	@ (8001a2c <TIM2_IRQHandler+0x10>)
 8001a22:	f008 fe41 	bl	800a6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24004da4 	.word	0x24004da4

08001a30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <SPI1_IRQHandler+0x10>)
 8001a36:	f008 f80d 	bl	8009a54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	24004a68 	.word	0x24004a68

08001a44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <TIM6_DAC_IRQHandler+0x10>)
 8001a4a:	f008 fe2d 	bl	800a6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	240058a4 	.word	0x240058a4

08001a58 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a5c:	4802      	ldr	r0, [pc, #8]	@ (8001a68 <ETH_IRQHandler+0x10>)
 8001a5e:	f002 ffe9 	bl	8004a34 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	24005978 	.word	0x24005978

08001a6c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <SPI4_IRQHandler+0x10>)
 8001a72:	f007 ffef 	bl	8009a54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	24004af0 	.word	0x24004af0

08001a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_kill>:

int _kill(int pid, int sig)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <_kill+0x20>)
 8001a9c:	2216      	movs	r2, #22
 8001a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	24014e60 	.word	0x24014e60

08001ab4 <_exit>:

void _exit (int status)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffe5 	bl	8001a90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ac6:	bf00      	nop
 8001ac8:	e7fd      	b.n	8001ac6 <_exit+0x12>

08001aca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e00a      	b.n	8001af2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001adc:	f3af 8000 	nop.w
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	60ba      	str	r2, [r7, #8]
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbf0      	blt.n	8001adc <_read+0x12>
  }

  return len;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e009      	b.n	8001b2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	60ba      	str	r2, [r7, #8]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	dbf1      	blt.n	8001b16 <_write+0x12>
  }
  return len;
 8001b32:	687b      	ldr	r3, [r7, #4]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_close>:

int _close(int file)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b64:	605a      	str	r2, [r3, #4]
  return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_isatty>:

int _isatty(int file)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bac:	4a14      	ldr	r2, [pc, #80]	@ (8001c00 <_sbrk+0x5c>)
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <_sbrk+0x60>)
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <_sbrk+0x64>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <_sbrk+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d205      	bcs.n	8001be0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <_sbrk+0x6c>)
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a06      	ldr	r2, [pc, #24]	@ (8001c08 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	24050000 	.word	0x24050000
 8001c04:	00000400 	.word	0x00000400
 8001c08:	240058f0 	.word	0x240058f0
 8001c0c:	24014e70 	.word	0x24014e70
 8001c10:	24014e60 	.word	0x24014e60

08001c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d04 <SystemInit+0xf0>)
 8001c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c20:	4a38      	ldr	r2, [pc, #224]	@ (8001d04 <SystemInit+0xf0>)
 8001c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c2a:	4b37      	ldr	r3, [pc, #220]	@ (8001d08 <SystemInit+0xf4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d807      	bhi.n	8001c46 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c36:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <SystemInit+0xf4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 030f 	bic.w	r3, r3, #15
 8001c3e:	4a32      	ldr	r2, [pc, #200]	@ (8001d08 <SystemInit+0xf4>)
 8001c40:	f043 0307 	orr.w	r3, r3, #7
 8001c44:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c46:	4b31      	ldr	r3, [pc, #196]	@ (8001d0c <SystemInit+0xf8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a30      	ldr	r2, [pc, #192]	@ (8001d0c <SystemInit+0xf8>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c52:	4b2e      	ldr	r3, [pc, #184]	@ (8001d0c <SystemInit+0xf8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c58:	4b2c      	ldr	r3, [pc, #176]	@ (8001d0c <SystemInit+0xf8>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	492b      	ldr	r1, [pc, #172]	@ (8001d0c <SystemInit+0xf8>)
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d10 <SystemInit+0xfc>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <SystemInit+0xf4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <SystemInit+0xf4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 030f 	bic.w	r3, r3, #15
 8001c78:	4a23      	ldr	r2, [pc, #140]	@ (8001d08 <SystemInit+0xf4>)
 8001c7a:	f043 0307 	orr.w	r3, r3, #7
 8001c7e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c80:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <SystemInit+0xf8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c86:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <SystemInit+0xf8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <SystemInit+0xf8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <SystemInit+0xf8>)
 8001c94:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <SystemInit+0x100>)
 8001c96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <SystemInit+0xf8>)
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d18 <SystemInit+0x104>)
 8001c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <SystemInit+0xf8>)
 8001ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d1c <SystemInit+0x108>)
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <SystemInit+0xf8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <SystemInit+0xf8>)
 8001cac:	4a1b      	ldr	r2, [pc, #108]	@ (8001d1c <SystemInit+0x108>)
 8001cae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <SystemInit+0xf8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <SystemInit+0xf8>)
 8001cb8:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <SystemInit+0x108>)
 8001cba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <SystemInit+0xf8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <SystemInit+0xf8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <SystemInit+0xf8>)
 8001cc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <SystemInit+0xf8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <SystemInit+0xf8>)
 8001cd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001cda:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <SystemInit+0xf8>)
 8001cdc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001ce0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <SystemInit+0xf8>)
 8001ce6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001cea:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001cec:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <SystemInit+0x10c>)
 8001cf0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001cf4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00
 8001d08:	52002000 	.word	0x52002000
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d14:	02020200 	.word	0x02020200
 8001d18:	01ff0000 	.word	0x01ff0000
 8001d1c:	01010280 	.word	0x01010280
 8001d20:	52004000 	.word	0x52004000

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d28:	f7ff ff74 	bl	8001c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d2c:	480c      	ldr	r0, [pc, #48]	@ (8001d60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d2e:	490d      	ldr	r1, [pc, #52]	@ (8001d64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d30:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d44:	4c0a      	ldr	r4, [pc, #40]	@ (8001d70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d52:	f019 fbb1 	bl	801b4b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d56:	f7fe fb2b 	bl	80003b0 <main>
  bx  lr
 8001d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d5c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001d60:	24004984 	.word	0x24004984
  ldr r1, =_edata
 8001d64:	24004a4c 	.word	0x24004a4c
  ldr r2, =_sidata
 8001d68:	0801eff0 	.word	0x0801eff0
  ldr r2, =_sbss
 8001d6c:	24004a4c 	.word	0x24004a4c
  ldr r4, =_ebss
 8001d70:	24014e70 	.word	0x24014e70

08001d74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC3_IRQHandler>

08001d76 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <LAN8742_RegisterBusIO+0x28>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <LAN8742_RegisterBusIO+0x28>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <LAN8742_RegisterBusIO+0x28>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	e014      	b.n	8001dce <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d139      	bne.n	8001e6a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e01c      	b.n	8001e4a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f107 020c 	add.w	r2, r7, #12
 8001e18:	2112      	movs	r1, #18
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	4798      	blx	r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da03      	bge.n	8001e2c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001e24:	f06f 0304 	mvn.w	r3, #4
 8001e28:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001e2a:	e00b      	b.n	8001e44 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d105      	bne.n	8001e44 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
         break;
 8001e42:	e005      	b.n	8001e50 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3301      	adds	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b1f      	cmp	r3, #31
 8001e4e:	d9df      	bls.n	8001e10 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b1f      	cmp	r3, #31
 8001e56:	d902      	bls.n	8001e5e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001e58:	f06f 0302 	mvn.w	r3, #2
 8001e5c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 }
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6810      	ldr	r0, [r2, #0]
 8001e88:	f107 020c 	add.w	r2, r7, #12
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4798      	blx	r3
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	da02      	bge.n	8001e9c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e96:	f06f 0304 	mvn.w	r3, #4
 8001e9a:	e06e      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6810      	ldr	r0, [r2, #0]
 8001ea4:	f107 020c 	add.w	r2, r7, #12
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4798      	blx	r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da02      	bge.n	8001eb8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001eb2:	f06f 0304 	mvn.w	r3, #4
 8001eb6:	e060      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e059      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6810      	ldr	r0, [r2, #0]
 8001ece:	f107 020c 	add.w	r2, r7, #12
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4798      	blx	r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da02      	bge.n	8001ee2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001edc:	f06f 0304 	mvn.w	r3, #4
 8001ee0:	e04b      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11b      	bne.n	8001f24 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d006      	beq.n	8001f04 <LAN8742_GetLinkState+0x90>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f00:	2302      	movs	r3, #2
 8001f02:	e03a      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e033      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e02c      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f20:	2305      	movs	r3, #5
 8001f22:	e02a      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6810      	ldr	r0, [r2, #0]
 8001f2c:	f107 020c 	add.w	r2, r7, #12
 8001f30:	211f      	movs	r1, #31
 8001f32:	4798      	blx	r3
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	da02      	bge.n	8001f40 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001f3a:	f06f 0304 	mvn.w	r3, #4
 8001f3e:	e01c      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e015      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 031c 	and.w	r3, r3, #28
 8001f54:	2b18      	cmp	r3, #24
 8001f56:	d101      	bne.n	8001f5c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e00e      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 031c 	and.w	r3, r3, #28
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d101      	bne.n	8001f6a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e007      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 031c 	and.w	r3, r3, #28
 8001f70:	2b14      	cmp	r3, #20
 8001f72:	d101      	bne.n	8001f78 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f74:	2304      	movs	r3, #4
 8001f76:	e000      	b.n	8001f7a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f78:	2305      	movs	r3, #5
    }
  }
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	f000 f95f 	bl	800224e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f90:	f004 fe8a 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <HAL_Init+0x68>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	4913      	ldr	r1, [pc, #76]	@ (8001ff0 <HAL_Init+0x6c>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fae:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <HAL_Init+0x68>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff0 <HAL_Init+0x6c>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff4 <HAL_Init+0x70>)
 8001fc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff8 <HAL_Init+0x74>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fce:	200f      	movs	r0, #15
 8001fd0:	f7ff fc6c 	bl	80018ac <HAL_InitTick>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e002      	b.n	8001fe4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fde:	f7ff fa37 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	0801edac 	.word	0x0801edac
 8001ff4:	240049c0 	.word	0x240049c0
 8001ff8:	240049bc 	.word	0x240049bc

08001ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_IncTick+0x20>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_IncTick+0x24>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <HAL_IncTick+0x24>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	240049c8 	.word	0x240049c8
 8002020:	240058f4 	.word	0x240058f4

08002024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_GetTick+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	240058f4 	.word	0x240058f4

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff ffee 	bl	8002024 <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_Delay+0x44>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002062:	bf00      	nop
 8002064:	f7ff ffde 	bl	8002024 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	240049c8 	.word	0x240049c8

08002084 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002094:	4904      	ldr	r1, [pc, #16]	@ (80020a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	58000400 	.word	0x58000400

080020ac <__NVIC_SetPriorityGrouping>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <__NVIC_SetPriorityGrouping+0x40>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <__NVIC_SetPriorityGrouping+0x40>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00
 80020f0:	05fa0000 	.word	0x05fa0000

080020f4 <__NVIC_GetPriorityGrouping>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4907      	ldr	r1, [pc, #28]	@ (8002148 <__NVIC_EnableIRQ+0x38>)
 800212a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_DisableIRQ>:
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800215a:	2b00      	cmp	r3, #0
 800215c:	db12      	blt.n	8002184 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	490a      	ldr	r1, [pc, #40]	@ (8002190 <__NVIC_DisableIRQ+0x44>)
 8002166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	2001      	movs	r0, #1
 800216e:	fa00 f202 	lsl.w	r2, r0, r2
 8002172:	3320      	adds	r3, #32
 8002174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002178:	f3bf 8f4f 	dsb	sy
}
 800217c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800217e:	f3bf 8f6f 	isb	sy
}
 8002182:	bf00      	nop
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	@ 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ff28 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002272:	f7ff ff3f 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002276:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	6978      	ldr	r0, [r7, #20]
 800227e:	f7ff ffb3 	bl	80021e8 <NVIC_EncodePriority>
 8002282:	4602      	mov	r2, r0
 8002284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff82 	bl	8002194 <__NVIC_SetPriority>
}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff32 	bl	8002110 <__NVIC_EnableIRQ>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ff42 	bl	800214c <__NVIC_DisableIRQ>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80022d4:	f3bf 8f5f 	dmb	sy
}
 80022d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80022da:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <HAL_MPU_Disable+0x28>)
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	4a06      	ldr	r2, [pc, #24]	@ (80022f8 <HAL_MPU_Disable+0x28>)
 80022e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_MPU_Disable+0x2c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00
 80022fc:	e000ed90 	.word	0xe000ed90

08002300 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002308:	4a0b      	ldr	r2, [pc, #44]	@ (8002338 <HAL_MPU_Enable+0x38>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_MPU_Enable+0x3c>)
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <HAL_MPU_Enable+0x3c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800231e:	f3bf 8f4f 	dsb	sy
}
 8002322:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002324:	f3bf 8f6f 	isb	sy
}
 8002328:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed90 	.word	0xe000ed90
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	785a      	ldrb	r2, [r3, #1]
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <HAL_MPU_ConfigRegion+0x7c>)
 800234e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002350:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <HAL_MPU_ConfigRegion+0x7c>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_MPU_ConfigRegion+0x7c>)
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <HAL_MPU_ConfigRegion+0x7c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7b1b      	ldrb	r3, [r3, #12]
 8002368:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7adb      	ldrb	r3, [r3, #11]
 800236e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002370:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7a9b      	ldrb	r3, [r3, #10]
 8002376:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002378:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7b5b      	ldrb	r3, [r3, #13]
 800237e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002380:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7b9b      	ldrb	r3, [r3, #14]
 8002386:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002388:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7bdb      	ldrb	r3, [r3, #15]
 800238e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002390:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7a5b      	ldrb	r3, [r3, #9]
 8002396:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002398:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	7a1b      	ldrb	r3, [r3, #8]
 800239e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023a8:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023ac:	6113      	str	r3, [r2, #16]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed90 	.word	0xe000ed90

080023c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff fe2c 	bl	8002024 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e312      	b.n	80029fe <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a66      	ldr	r2, [pc, #408]	@ (8002578 <HAL_DMA_Init+0x1b8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d04a      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a65      	ldr	r2, [pc, #404]	@ (800257c <HAL_DMA_Init+0x1bc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d045      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a63      	ldr	r2, [pc, #396]	@ (8002580 <HAL_DMA_Init+0x1c0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d040      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a62      	ldr	r2, [pc, #392]	@ (8002584 <HAL_DMA_Init+0x1c4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d03b      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a60      	ldr	r2, [pc, #384]	@ (8002588 <HAL_DMA_Init+0x1c8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d036      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a5f      	ldr	r2, [pc, #380]	@ (800258c <HAL_DMA_Init+0x1cc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d031      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a5d      	ldr	r2, [pc, #372]	@ (8002590 <HAL_DMA_Init+0x1d0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d02c      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a5c      	ldr	r2, [pc, #368]	@ (8002594 <HAL_DMA_Init+0x1d4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d027      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a5a      	ldr	r2, [pc, #360]	@ (8002598 <HAL_DMA_Init+0x1d8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d022      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a59      	ldr	r2, [pc, #356]	@ (800259c <HAL_DMA_Init+0x1dc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d01d      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a57      	ldr	r2, [pc, #348]	@ (80025a0 <HAL_DMA_Init+0x1e0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d018      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a56      	ldr	r2, [pc, #344]	@ (80025a4 <HAL_DMA_Init+0x1e4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a54      	ldr	r2, [pc, #336]	@ (80025a8 <HAL_DMA_Init+0x1e8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a53      	ldr	r2, [pc, #332]	@ (80025ac <HAL_DMA_Init+0x1ec>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a51      	ldr	r2, [pc, #324]	@ (80025b0 <HAL_DMA_Init+0x1f0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a50      	ldr	r2, [pc, #320]	@ (80025b4 <HAL_DMA_Init+0x1f4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_DMA_Init+0xbc>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_DMA_Init+0xbe>
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 813c 	beq.w	80026fc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a37      	ldr	r2, [pc, #220]	@ (8002578 <HAL_DMA_Init+0x1b8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d04a      	beq.n	8002534 <HAL_DMA_Init+0x174>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a36      	ldr	r2, [pc, #216]	@ (800257c <HAL_DMA_Init+0x1bc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d045      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a34      	ldr	r2, [pc, #208]	@ (8002580 <HAL_DMA_Init+0x1c0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d040      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a33      	ldr	r2, [pc, #204]	@ (8002584 <HAL_DMA_Init+0x1c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d03b      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a31      	ldr	r2, [pc, #196]	@ (8002588 <HAL_DMA_Init+0x1c8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d036      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a30      	ldr	r2, [pc, #192]	@ (800258c <HAL_DMA_Init+0x1cc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d031      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002590 <HAL_DMA_Init+0x1d0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02c      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2d      	ldr	r2, [pc, #180]	@ (8002594 <HAL_DMA_Init+0x1d4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d027      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002598 <HAL_DMA_Init+0x1d8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2a      	ldr	r2, [pc, #168]	@ (800259c <HAL_DMA_Init+0x1dc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01d      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	@ (80025a0 <HAL_DMA_Init+0x1e0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <HAL_DMA_Init+0x174>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a27      	ldr	r2, [pc, #156]	@ (80025a4 <HAL_DMA_Init+0x1e4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_DMA_Init+0x174>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a25      	ldr	r2, [pc, #148]	@ (80025a8 <HAL_DMA_Init+0x1e8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_DMA_Init+0x174>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a24      	ldr	r2, [pc, #144]	@ (80025ac <HAL_DMA_Init+0x1ec>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_DMA_Init+0x174>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a22      	ldr	r2, [pc, #136]	@ (80025b0 <HAL_DMA_Init+0x1f0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_DMA_Init+0x174>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a21      	ldr	r2, [pc, #132]	@ (80025b4 <HAL_DMA_Init+0x1f4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d108      	bne.n	8002546 <HAL_DMA_Init+0x186>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e007      	b.n	8002556 <HAL_DMA_Init+0x196>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002556:	e02f      	b.n	80025b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002558:	f7ff fd64 	bl	8002024 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b05      	cmp	r3, #5
 8002564:	d928      	bls.n	80025b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2203      	movs	r2, #3
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e242      	b.n	80029fe <HAL_DMA_Init+0x63e>
 8002578:	40020010 	.word	0x40020010
 800257c:	40020028 	.word	0x40020028
 8002580:	40020040 	.word	0x40020040
 8002584:	40020058 	.word	0x40020058
 8002588:	40020070 	.word	0x40020070
 800258c:	40020088 	.word	0x40020088
 8002590:	400200a0 	.word	0x400200a0
 8002594:	400200b8 	.word	0x400200b8
 8002598:	40020410 	.word	0x40020410
 800259c:	40020428 	.word	0x40020428
 80025a0:	40020440 	.word	0x40020440
 80025a4:	40020458 	.word	0x40020458
 80025a8:	40020470 	.word	0x40020470
 80025ac:	40020488 	.word	0x40020488
 80025b0:	400204a0 	.word	0x400204a0
 80025b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1c8      	bne.n	8002558 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4b83      	ldr	r3, [pc, #524]	@ (80027e0 <HAL_DMA_Init+0x420>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80025de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	2b04      	cmp	r3, #4
 800260a:	d107      	bne.n	800261c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	4313      	orrs	r3, r2
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b28      	cmp	r3, #40	@ 0x28
 8002622:	d903      	bls.n	800262c <HAL_DMA_Init+0x26c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b2e      	cmp	r3, #46	@ 0x2e
 800262a:	d91f      	bls.n	800266c <HAL_DMA_Init+0x2ac>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b3e      	cmp	r3, #62	@ 0x3e
 8002632:	d903      	bls.n	800263c <HAL_DMA_Init+0x27c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b42      	cmp	r3, #66	@ 0x42
 800263a:	d917      	bls.n	800266c <HAL_DMA_Init+0x2ac>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b46      	cmp	r3, #70	@ 0x46
 8002642:	d903      	bls.n	800264c <HAL_DMA_Init+0x28c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b48      	cmp	r3, #72	@ 0x48
 800264a:	d90f      	bls.n	800266c <HAL_DMA_Init+0x2ac>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b4e      	cmp	r3, #78	@ 0x4e
 8002652:	d903      	bls.n	800265c <HAL_DMA_Init+0x29c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b52      	cmp	r3, #82	@ 0x52
 800265a:	d907      	bls.n	800266c <HAL_DMA_Init+0x2ac>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b73      	cmp	r3, #115	@ 0x73
 8002662:	d905      	bls.n	8002670 <HAL_DMA_Init+0x2b0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b77      	cmp	r3, #119	@ 0x77
 800266a:	d801      	bhi.n	8002670 <HAL_DMA_Init+0x2b0>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_DMA_Init+0x2b2>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800267c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f023 0307 	bic.w	r3, r3, #7
 8002694:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d117      	bne.n	80026d8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f001 fbfa 	bl	8003eb4 <DMA_CheckFifoParam>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2240      	movs	r2, #64	@ 0x40
 80026ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e192      	b.n	80029fe <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f001 fb35 	bl	8003d50 <DMA_CalcBaseAndBitshift>
 80026e6:	4603      	mov	r3, r0
 80026e8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	223f      	movs	r2, #63	@ 0x3f
 80026f4:	409a      	lsls	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	e0c8      	b.n	800288e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a38      	ldr	r2, [pc, #224]	@ (80027e4 <HAL_DMA_Init+0x424>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a37      	ldr	r2, [pc, #220]	@ (80027e8 <HAL_DMA_Init+0x428>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d01d      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a35      	ldr	r2, [pc, #212]	@ (80027ec <HAL_DMA_Init+0x42c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_DMA_Init+0x38c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a34      	ldr	r2, [pc, #208]	@ (80027f0 <HAL_DMA_Init+0x430>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a32      	ldr	r2, [pc, #200]	@ (80027f4 <HAL_DMA_Init+0x434>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_DMA_Init+0x38c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a31      	ldr	r2, [pc, #196]	@ (80027f8 <HAL_DMA_Init+0x438>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2f      	ldr	r2, [pc, #188]	@ (80027fc <HAL_DMA_Init+0x43c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2e      	ldr	r2, [pc, #184]	@ (8002800 <HAL_DMA_Init+0x440>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Init+0x390>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_DMA_Init+0x392>
 8002750:	2300      	movs	r3, #0
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8092 	beq.w	800287c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a21      	ldr	r2, [pc, #132]	@ (80027e4 <HAL_DMA_Init+0x424>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d021      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a20      	ldr	r2, [pc, #128]	@ (80027e8 <HAL_DMA_Init+0x428>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d01c      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1e      	ldr	r2, [pc, #120]	@ (80027ec <HAL_DMA_Init+0x42c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d017      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1d      	ldr	r2, [pc, #116]	@ (80027f0 <HAL_DMA_Init+0x430>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d012      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1b      	ldr	r2, [pc, #108]	@ (80027f4 <HAL_DMA_Init+0x434>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00d      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <HAL_DMA_Init+0x438>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d008      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a18      	ldr	r2, [pc, #96]	@ (80027fc <HAL_DMA_Init+0x43c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d003      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_DMA_Init+0x440>)
 80027a4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_DMA_Init+0x444>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b40      	cmp	r3, #64	@ 0x40
 80027cc:	d01c      	beq.n	8002808 <HAL_DMA_Init+0x448>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d102      	bne.n	80027dc <HAL_DMA_Init+0x41c>
 80027d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027da:	e016      	b.n	800280a <HAL_DMA_Init+0x44a>
 80027dc:	2300      	movs	r3, #0
 80027de:	e014      	b.n	800280a <HAL_DMA_Init+0x44a>
 80027e0:	fe10803f 	.word	0xfe10803f
 80027e4:	58025408 	.word	0x58025408
 80027e8:	5802541c 	.word	0x5802541c
 80027ec:	58025430 	.word	0x58025430
 80027f0:	58025444 	.word	0x58025444
 80027f4:	58025458 	.word	0x58025458
 80027f8:	5802546c 	.word	0x5802546c
 80027fc:	58025480 	.word	0x58025480
 8002800:	58025494 	.word	0x58025494
 8002804:	fffe000f 	.word	0xfffe000f
 8002808:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68d2      	ldr	r2, [r2, #12]
 800280e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002818:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002820:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002828:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002838:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a08 <HAL_DMA_Init+0x648>)
 8002850:	4413      	add	r3, r2
 8002852:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_DMA_Init+0x64c>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	009a      	lsls	r2, r3, #2
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f001 fa75 	bl	8003d50 <DMA_CalcBaseAndBitshift>
 8002866:	4603      	mov	r3, r0
 8002868:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2201      	movs	r2, #1
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	e008      	b.n	800288e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0b7      	b.n	80029fe <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5f      	ldr	r2, [pc, #380]	@ (8002a10 <HAL_DMA_Init+0x650>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d072      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5d      	ldr	r2, [pc, #372]	@ (8002a14 <HAL_DMA_Init+0x654>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d06d      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a18 <HAL_DMA_Init+0x658>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d068      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a1c <HAL_DMA_Init+0x65c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d063      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a59      	ldr	r2, [pc, #356]	@ (8002a20 <HAL_DMA_Init+0x660>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d05e      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a57      	ldr	r2, [pc, #348]	@ (8002a24 <HAL_DMA_Init+0x664>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d059      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a56      	ldr	r2, [pc, #344]	@ (8002a28 <HAL_DMA_Init+0x668>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d054      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a54      	ldr	r2, [pc, #336]	@ (8002a2c <HAL_DMA_Init+0x66c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04f      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a53      	ldr	r2, [pc, #332]	@ (8002a30 <HAL_DMA_Init+0x670>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d04a      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a51      	ldr	r2, [pc, #324]	@ (8002a34 <HAL_DMA_Init+0x674>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d045      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a50      	ldr	r2, [pc, #320]	@ (8002a38 <HAL_DMA_Init+0x678>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d040      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4e      	ldr	r2, [pc, #312]	@ (8002a3c <HAL_DMA_Init+0x67c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d03b      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a40 <HAL_DMA_Init+0x680>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d036      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a4b      	ldr	r2, [pc, #300]	@ (8002a44 <HAL_DMA_Init+0x684>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d031      	beq.n	800297e <HAL_DMA_Init+0x5be>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a48 <HAL_DMA_Init+0x688>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d02c      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a48      	ldr	r2, [pc, #288]	@ (8002a4c <HAL_DMA_Init+0x68c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d027      	beq.n	800297e <HAL_DMA_Init+0x5be>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a47      	ldr	r2, [pc, #284]	@ (8002a50 <HAL_DMA_Init+0x690>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a45      	ldr	r2, [pc, #276]	@ (8002a54 <HAL_DMA_Init+0x694>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01d      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a44      	ldr	r2, [pc, #272]	@ (8002a58 <HAL_DMA_Init+0x698>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d018      	beq.n	800297e <HAL_DMA_Init+0x5be>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a42      	ldr	r2, [pc, #264]	@ (8002a5c <HAL_DMA_Init+0x69c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a41      	ldr	r2, [pc, #260]	@ (8002a60 <HAL_DMA_Init+0x6a0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a3f      	ldr	r2, [pc, #252]	@ (8002a64 <HAL_DMA_Init+0x6a4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_DMA_Init+0x5be>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a68 <HAL_DMA_Init+0x6a8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a3c      	ldr	r2, [pc, #240]	@ (8002a6c <HAL_DMA_Init+0x6ac>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_DMA_Init+0x5c2>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_DMA_Init+0x5c4>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d032      	beq.n	80029ee <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f001 fb0f 	bl	8003fac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b80      	cmp	r3, #128	@ 0x80
 8002994:	d102      	bne.n	800299c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_DMA_Init+0x61c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d80c      	bhi.n	80029dc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f001 fb8c 	bl	80040e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	e008      	b.n	80029ee <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	a7fdabf8 	.word	0xa7fdabf8
 8002a0c:	cccccccd 	.word	0xcccccccd
 8002a10:	40020010 	.word	0x40020010
 8002a14:	40020028 	.word	0x40020028
 8002a18:	40020040 	.word	0x40020040
 8002a1c:	40020058 	.word	0x40020058
 8002a20:	40020070 	.word	0x40020070
 8002a24:	40020088 	.word	0x40020088
 8002a28:	400200a0 	.word	0x400200a0
 8002a2c:	400200b8 	.word	0x400200b8
 8002a30:	40020410 	.word	0x40020410
 8002a34:	40020428 	.word	0x40020428
 8002a38:	40020440 	.word	0x40020440
 8002a3c:	40020458 	.word	0x40020458
 8002a40:	40020470 	.word	0x40020470
 8002a44:	40020488 	.word	0x40020488
 8002a48:	400204a0 	.word	0x400204a0
 8002a4c:	400204b8 	.word	0x400204b8
 8002a50:	58025408 	.word	0x58025408
 8002a54:	5802541c 	.word	0x5802541c
 8002a58:	58025430 	.word	0x58025430
 8002a5c:	58025444 	.word	0x58025444
 8002a60:	58025458 	.word	0x58025458
 8002a64:	5802546c 	.word	0x5802546c
 8002a68:	58025480 	.word	0x58025480
 8002a6c:	58025494 	.word	0x58025494

08002a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e237      	b.n	8002ef2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d004      	beq.n	8002a98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2280      	movs	r2, #128	@ 0x80
 8002a92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e22c      	b.n	8002ef2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002c10 <HAL_DMA_Abort_IT+0x1a0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d04a      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c14 <HAL_DMA_Abort_IT+0x1a4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d045      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a59      	ldr	r2, [pc, #356]	@ (8002c18 <HAL_DMA_Abort_IT+0x1a8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d040      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a58      	ldr	r2, [pc, #352]	@ (8002c1c <HAL_DMA_Abort_IT+0x1ac>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d03b      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a56      	ldr	r2, [pc, #344]	@ (8002c20 <HAL_DMA_Abort_IT+0x1b0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d036      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a55      	ldr	r2, [pc, #340]	@ (8002c24 <HAL_DMA_Abort_IT+0x1b4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d031      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a53      	ldr	r2, [pc, #332]	@ (8002c28 <HAL_DMA_Abort_IT+0x1b8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d02c      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a52      	ldr	r2, [pc, #328]	@ (8002c2c <HAL_DMA_Abort_IT+0x1bc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d027      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a50      	ldr	r2, [pc, #320]	@ (8002c30 <HAL_DMA_Abort_IT+0x1c0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d022      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4f      	ldr	r2, [pc, #316]	@ (8002c34 <HAL_DMA_Abort_IT+0x1c4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d01d      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4d      	ldr	r2, [pc, #308]	@ (8002c38 <HAL_DMA_Abort_IT+0x1c8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d018      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8002c3c <HAL_DMA_Abort_IT+0x1cc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d013      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a4a      	ldr	r2, [pc, #296]	@ (8002c40 <HAL_DMA_Abort_IT+0x1d0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a49      	ldr	r2, [pc, #292]	@ (8002c44 <HAL_DMA_Abort_IT+0x1d4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a47      	ldr	r2, [pc, #284]	@ (8002c48 <HAL_DMA_Abort_IT+0x1d8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_DMA_Abort_IT+0xc8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a46      	ldr	r2, [pc, #280]	@ (8002c4c <HAL_DMA_Abort_IT+0x1dc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA_Abort_IT+0xcc>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_DMA_Abort_IT+0xce>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8086 	beq.w	8002c50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2f      	ldr	r2, [pc, #188]	@ (8002c10 <HAL_DMA_Abort_IT+0x1a0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04a      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002c14 <HAL_DMA_Abort_IT+0x1a4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d045      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2c      	ldr	r2, [pc, #176]	@ (8002c18 <HAL_DMA_Abort_IT+0x1a8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c1c <HAL_DMA_Abort_IT+0x1ac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d03b      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a29      	ldr	r2, [pc, #164]	@ (8002c20 <HAL_DMA_Abort_IT+0x1b0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d036      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <HAL_DMA_Abort_IT+0x1b4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d031      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a26      	ldr	r2, [pc, #152]	@ (8002c28 <HAL_DMA_Abort_IT+0x1b8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02c      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a25      	ldr	r2, [pc, #148]	@ (8002c2c <HAL_DMA_Abort_IT+0x1bc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d027      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <HAL_DMA_Abort_IT+0x1c0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d022      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a22      	ldr	r2, [pc, #136]	@ (8002c34 <HAL_DMA_Abort_IT+0x1c4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d01d      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a20      	ldr	r2, [pc, #128]	@ (8002c38 <HAL_DMA_Abort_IT+0x1c8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d018      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8002c3c <HAL_DMA_Abort_IT+0x1cc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <HAL_DMA_Abort_IT+0x1d0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00e      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c44 <HAL_DMA_Abort_IT+0x1d4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c48 <HAL_DMA_Abort_IT+0x1d8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_DMA_Abort_IT+0x17c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <HAL_DMA_Abort_IT+0x1dc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d108      	bne.n	8002bfe <HAL_DMA_Abort_IT+0x18e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e178      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x480>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e16f      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x480>
 8002c10:	40020010 	.word	0x40020010
 8002c14:	40020028 	.word	0x40020028
 8002c18:	40020040 	.word	0x40020040
 8002c1c:	40020058 	.word	0x40020058
 8002c20:	40020070 	.word	0x40020070
 8002c24:	40020088 	.word	0x40020088
 8002c28:	400200a0 	.word	0x400200a0
 8002c2c:	400200b8 	.word	0x400200b8
 8002c30:	40020410 	.word	0x40020410
 8002c34:	40020428 	.word	0x40020428
 8002c38:	40020440 	.word	0x40020440
 8002c3c:	40020458 	.word	0x40020458
 8002c40:	40020470 	.word	0x40020470
 8002c44:	40020488 	.word	0x40020488
 8002c48:	400204a0 	.word	0x400204a0
 8002c4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 020e 	bic.w	r2, r2, #14
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6c      	ldr	r2, [pc, #432]	@ (8002e18 <HAL_DMA_Abort_IT+0x3a8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d04a      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6b      	ldr	r2, [pc, #428]	@ (8002e1c <HAL_DMA_Abort_IT+0x3ac>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d045      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a69      	ldr	r2, [pc, #420]	@ (8002e20 <HAL_DMA_Abort_IT+0x3b0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d040      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a68      	ldr	r2, [pc, #416]	@ (8002e24 <HAL_DMA_Abort_IT+0x3b4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d03b      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a66      	ldr	r2, [pc, #408]	@ (8002e28 <HAL_DMA_Abort_IT+0x3b8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d036      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a65      	ldr	r2, [pc, #404]	@ (8002e2c <HAL_DMA_Abort_IT+0x3bc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d031      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a63      	ldr	r2, [pc, #396]	@ (8002e30 <HAL_DMA_Abort_IT+0x3c0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d02c      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a62      	ldr	r2, [pc, #392]	@ (8002e34 <HAL_DMA_Abort_IT+0x3c4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d027      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a60      	ldr	r2, [pc, #384]	@ (8002e38 <HAL_DMA_Abort_IT+0x3c8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d022      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5f      	ldr	r2, [pc, #380]	@ (8002e3c <HAL_DMA_Abort_IT+0x3cc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d01d      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e40 <HAL_DMA_Abort_IT+0x3d0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d018      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002e44 <HAL_DMA_Abort_IT+0x3d4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d013      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5a      	ldr	r2, [pc, #360]	@ (8002e48 <HAL_DMA_Abort_IT+0x3d8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00e      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a59      	ldr	r2, [pc, #356]	@ (8002e4c <HAL_DMA_Abort_IT+0x3dc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d009      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a57      	ldr	r2, [pc, #348]	@ (8002e50 <HAL_DMA_Abort_IT+0x3e0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x290>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a56      	ldr	r2, [pc, #344]	@ (8002e54 <HAL_DMA_Abort_IT+0x3e4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d108      	bne.n	8002d12 <HAL_DMA_Abort_IT+0x2a2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e007      	b.n	8002d22 <HAL_DMA_Abort_IT+0x2b2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a3c      	ldr	r2, [pc, #240]	@ (8002e18 <HAL_DMA_Abort_IT+0x3a8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d072      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3a      	ldr	r2, [pc, #232]	@ (8002e1c <HAL_DMA_Abort_IT+0x3ac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d06d      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a39      	ldr	r2, [pc, #228]	@ (8002e20 <HAL_DMA_Abort_IT+0x3b0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d068      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a37      	ldr	r2, [pc, #220]	@ (8002e24 <HAL_DMA_Abort_IT+0x3b4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d063      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a36      	ldr	r2, [pc, #216]	@ (8002e28 <HAL_DMA_Abort_IT+0x3b8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d05e      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a34      	ldr	r2, [pc, #208]	@ (8002e2c <HAL_DMA_Abort_IT+0x3bc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d059      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a33      	ldr	r2, [pc, #204]	@ (8002e30 <HAL_DMA_Abort_IT+0x3c0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d054      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a31      	ldr	r2, [pc, #196]	@ (8002e34 <HAL_DMA_Abort_IT+0x3c4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d04f      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a30      	ldr	r2, [pc, #192]	@ (8002e38 <HAL_DMA_Abort_IT+0x3c8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d04a      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2e      	ldr	r2, [pc, #184]	@ (8002e3c <HAL_DMA_Abort_IT+0x3cc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d045      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e40 <HAL_DMA_Abort_IT+0x3d0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d040      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a2b      	ldr	r2, [pc, #172]	@ (8002e44 <HAL_DMA_Abort_IT+0x3d4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d03b      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e48 <HAL_DMA_Abort_IT+0x3d8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d036      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a28      	ldr	r2, [pc, #160]	@ (8002e4c <HAL_DMA_Abort_IT+0x3dc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d031      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a27      	ldr	r2, [pc, #156]	@ (8002e50 <HAL_DMA_Abort_IT+0x3e0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d02c      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a25      	ldr	r2, [pc, #148]	@ (8002e54 <HAL_DMA_Abort_IT+0x3e4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d027      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a24      	ldr	r2, [pc, #144]	@ (8002e58 <HAL_DMA_Abort_IT+0x3e8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d022      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a22      	ldr	r2, [pc, #136]	@ (8002e5c <HAL_DMA_Abort_IT+0x3ec>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01d      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a21      	ldr	r2, [pc, #132]	@ (8002e60 <HAL_DMA_Abort_IT+0x3f0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d018      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e64 <HAL_DMA_Abort_IT+0x3f4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1e      	ldr	r2, [pc, #120]	@ (8002e68 <HAL_DMA_Abort_IT+0x3f8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e6c <HAL_DMA_Abort_IT+0x3fc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1b      	ldr	r2, [pc, #108]	@ (8002e70 <HAL_DMA_Abort_IT+0x400>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x3a2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a19      	ldr	r2, [pc, #100]	@ (8002e74 <HAL_DMA_Abort_IT+0x404>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d132      	bne.n	8002e78 <HAL_DMA_Abort_IT+0x408>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e031      	b.n	8002e7a <HAL_DMA_Abort_IT+0x40a>
 8002e16:	bf00      	nop
 8002e18:	40020010 	.word	0x40020010
 8002e1c:	40020028 	.word	0x40020028
 8002e20:	40020040 	.word	0x40020040
 8002e24:	40020058 	.word	0x40020058
 8002e28:	40020070 	.word	0x40020070
 8002e2c:	40020088 	.word	0x40020088
 8002e30:	400200a0 	.word	0x400200a0
 8002e34:	400200b8 	.word	0x400200b8
 8002e38:	40020410 	.word	0x40020410
 8002e3c:	40020428 	.word	0x40020428
 8002e40:	40020440 	.word	0x40020440
 8002e44:	40020458 	.word	0x40020458
 8002e48:	40020470 	.word	0x40020470
 8002e4c:	40020488 	.word	0x40020488
 8002e50:	400204a0 	.word	0x400204a0
 8002e54:	400204b8 	.word	0x400204b8
 8002e58:	58025408 	.word	0x58025408
 8002e5c:	5802541c 	.word	0x5802541c
 8002e60:	58025430 	.word	0x58025430
 8002e64:	58025444 	.word	0x58025444
 8002e68:	58025458 	.word	0x58025458
 8002e6c:	5802546c 	.word	0x5802546c
 8002e70:	58025480 	.word	0x58025480
 8002e74:	58025494 	.word	0x58025494
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d028      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002eac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ec4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ece:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop

08002efc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f08:	4b67      	ldr	r3, [pc, #412]	@ (80030a8 <HAL_DMA_IRQHandler+0x1ac>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a67      	ldr	r2, [pc, #412]	@ (80030ac <HAL_DMA_IRQHandler+0x1b0>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0a9b      	lsrs	r3, r3, #10
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a5f      	ldr	r2, [pc, #380]	@ (80030b0 <HAL_DMA_IRQHandler+0x1b4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04a      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a5d      	ldr	r2, [pc, #372]	@ (80030b4 <HAL_DMA_IRQHandler+0x1b8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d045      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5c      	ldr	r2, [pc, #368]	@ (80030b8 <HAL_DMA_IRQHandler+0x1bc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d040      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a5a      	ldr	r2, [pc, #360]	@ (80030bc <HAL_DMA_IRQHandler+0x1c0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d03b      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a59      	ldr	r2, [pc, #356]	@ (80030c0 <HAL_DMA_IRQHandler+0x1c4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a57      	ldr	r2, [pc, #348]	@ (80030c4 <HAL_DMA_IRQHandler+0x1c8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a56      	ldr	r2, [pc, #344]	@ (80030c8 <HAL_DMA_IRQHandler+0x1cc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d02c      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a54      	ldr	r2, [pc, #336]	@ (80030cc <HAL_DMA_IRQHandler+0x1d0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a53      	ldr	r2, [pc, #332]	@ (80030d0 <HAL_DMA_IRQHandler+0x1d4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a51      	ldr	r2, [pc, #324]	@ (80030d4 <HAL_DMA_IRQHandler+0x1d8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a50      	ldr	r2, [pc, #320]	@ (80030d8 <HAL_DMA_IRQHandler+0x1dc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a4e      	ldr	r2, [pc, #312]	@ (80030dc <HAL_DMA_IRQHandler+0x1e0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a4d      	ldr	r2, [pc, #308]	@ (80030e0 <HAL_DMA_IRQHandler+0x1e4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80030e4 <HAL_DMA_IRQHandler+0x1e8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4a      	ldr	r2, [pc, #296]	@ (80030e8 <HAL_DMA_IRQHandler+0x1ec>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_IRQHandler+0xd2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a48      	ldr	r2, [pc, #288]	@ (80030ec <HAL_DMA_IRQHandler+0x1f0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0xd6>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_IRQHandler+0xd8>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 842b 	beq.w	8003830 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80a2 	beq.w	8003134 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80030b0 <HAL_DMA_IRQHandler+0x1b4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d04a      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80030b4 <HAL_DMA_IRQHandler+0x1b8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d045      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2b      	ldr	r2, [pc, #172]	@ (80030b8 <HAL_DMA_IRQHandler+0x1bc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d040      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2a      	ldr	r2, [pc, #168]	@ (80030bc <HAL_DMA_IRQHandler+0x1c0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d03b      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a28      	ldr	r2, [pc, #160]	@ (80030c0 <HAL_DMA_IRQHandler+0x1c4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d036      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a27      	ldr	r2, [pc, #156]	@ (80030c4 <HAL_DMA_IRQHandler+0x1c8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d031      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a25      	ldr	r2, [pc, #148]	@ (80030c8 <HAL_DMA_IRQHandler+0x1cc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02c      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <HAL_DMA_IRQHandler+0x1d0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d027      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a22      	ldr	r2, [pc, #136]	@ (80030d0 <HAL_DMA_IRQHandler+0x1d4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d022      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a21      	ldr	r2, [pc, #132]	@ (80030d4 <HAL_DMA_IRQHandler+0x1d8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d01d      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1f      	ldr	r2, [pc, #124]	@ (80030d8 <HAL_DMA_IRQHandler+0x1dc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d018      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1e      	ldr	r2, [pc, #120]	@ (80030dc <HAL_DMA_IRQHandler+0x1e0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1c      	ldr	r2, [pc, #112]	@ (80030e0 <HAL_DMA_IRQHandler+0x1e4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1b      	ldr	r2, [pc, #108]	@ (80030e4 <HAL_DMA_IRQHandler+0x1e8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a19      	ldr	r2, [pc, #100]	@ (80030e8 <HAL_DMA_IRQHandler+0x1ec>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_DMA_IRQHandler+0x194>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <HAL_DMA_IRQHandler+0x1f0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d12f      	bne.n	80030f0 <HAL_DMA_IRQHandler+0x1f4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf14      	ite	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	2300      	moveq	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e02e      	b.n	8003104 <HAL_DMA_IRQHandler+0x208>
 80030a6:	bf00      	nop
 80030a8:	240049bc 	.word	0x240049bc
 80030ac:	1b4e81b5 	.word	0x1b4e81b5
 80030b0:	40020010 	.word	0x40020010
 80030b4:	40020028 	.word	0x40020028
 80030b8:	40020040 	.word	0x40020040
 80030bc:	40020058 	.word	0x40020058
 80030c0:	40020070 	.word	0x40020070
 80030c4:	40020088 	.word	0x40020088
 80030c8:	400200a0 	.word	0x400200a0
 80030cc:	400200b8 	.word	0x400200b8
 80030d0:	40020410 	.word	0x40020410
 80030d4:	40020428 	.word	0x40020428
 80030d8:	40020440 	.word	0x40020440
 80030dc:	40020458 	.word	0x40020458
 80030e0:	40020470 	.word	0x40020470
 80030e4:	40020488 	.word	0x40020488
 80030e8:	400204a0 	.word	0x400204a0
 80030ec:	400204b8 	.word	0x400204b8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d015      	beq.n	8003134 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0204 	bic.w	r2, r2, #4
 8003116:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	2208      	movs	r2, #8
 8003122:	409a      	lsls	r2, r3
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d06e      	beq.n	8003228 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a69      	ldr	r2, [pc, #420]	@ (80032f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d04a      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a67      	ldr	r2, [pc, #412]	@ (80032f8 <HAL_DMA_IRQHandler+0x3fc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d045      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a66      	ldr	r2, [pc, #408]	@ (80032fc <HAL_DMA_IRQHandler+0x400>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d040      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a64      	ldr	r2, [pc, #400]	@ (8003300 <HAL_DMA_IRQHandler+0x404>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d03b      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a63      	ldr	r2, [pc, #396]	@ (8003304 <HAL_DMA_IRQHandler+0x408>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d036      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a61      	ldr	r2, [pc, #388]	@ (8003308 <HAL_DMA_IRQHandler+0x40c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d031      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a60      	ldr	r2, [pc, #384]	@ (800330c <HAL_DMA_IRQHandler+0x410>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d02c      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5e      	ldr	r2, [pc, #376]	@ (8003310 <HAL_DMA_IRQHandler+0x414>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d027      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5d      	ldr	r2, [pc, #372]	@ (8003314 <HAL_DMA_IRQHandler+0x418>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a5b      	ldr	r2, [pc, #364]	@ (8003318 <HAL_DMA_IRQHandler+0x41c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a5a      	ldr	r2, [pc, #360]	@ (800331c <HAL_DMA_IRQHandler+0x420>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a58      	ldr	r2, [pc, #352]	@ (8003320 <HAL_DMA_IRQHandler+0x424>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a57      	ldr	r2, [pc, #348]	@ (8003324 <HAL_DMA_IRQHandler+0x428>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a55      	ldr	r2, [pc, #340]	@ (8003328 <HAL_DMA_IRQHandler+0x42c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a54      	ldr	r2, [pc, #336]	@ (800332c <HAL_DMA_IRQHandler+0x430>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_DMA_IRQHandler+0x2ee>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a52      	ldr	r2, [pc, #328]	@ (8003330 <HAL_DMA_IRQHandler+0x434>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10a      	bne.n	8003200 <HAL_DMA_IRQHandler+0x304>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e003      	b.n	8003208 <HAL_DMA_IRQHandler+0x30c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00d      	beq.n	8003228 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2201      	movs	r2, #1
 8003216:	409a      	lsls	r2, r3
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003220:	f043 0202 	orr.w	r2, r3, #2
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2204      	movs	r2, #4
 8003232:	409a      	lsls	r2, r3
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 808f 	beq.w	800335c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2c      	ldr	r2, [pc, #176]	@ (80032f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d04a      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <HAL_DMA_IRQHandler+0x3fc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d045      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a29      	ldr	r2, [pc, #164]	@ (80032fc <HAL_DMA_IRQHandler+0x400>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d040      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a27      	ldr	r2, [pc, #156]	@ (8003300 <HAL_DMA_IRQHandler+0x404>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d03b      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a26      	ldr	r2, [pc, #152]	@ (8003304 <HAL_DMA_IRQHandler+0x408>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d036      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <HAL_DMA_IRQHandler+0x40c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d031      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a23      	ldr	r2, [pc, #140]	@ (800330c <HAL_DMA_IRQHandler+0x410>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d02c      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a21      	ldr	r2, [pc, #132]	@ (8003310 <HAL_DMA_IRQHandler+0x414>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d027      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a20      	ldr	r2, [pc, #128]	@ (8003314 <HAL_DMA_IRQHandler+0x418>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d022      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1e      	ldr	r2, [pc, #120]	@ (8003318 <HAL_DMA_IRQHandler+0x41c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01d      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1d      	ldr	r2, [pc, #116]	@ (800331c <HAL_DMA_IRQHandler+0x420>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d018      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003320 <HAL_DMA_IRQHandler+0x424>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003324 <HAL_DMA_IRQHandler+0x428>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00e      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a18      	ldr	r2, [pc, #96]	@ (8003328 <HAL_DMA_IRQHandler+0x42c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a17      	ldr	r2, [pc, #92]	@ (800332c <HAL_DMA_IRQHandler+0x430>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_DMA_IRQHandler+0x3e2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a15      	ldr	r2, [pc, #84]	@ (8003330 <HAL_DMA_IRQHandler+0x434>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d12a      	bne.n	8003334 <HAL_DMA_IRQHandler+0x438>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e023      	b.n	800333c <HAL_DMA_IRQHandler+0x440>
 80032f4:	40020010 	.word	0x40020010
 80032f8:	40020028 	.word	0x40020028
 80032fc:	40020040 	.word	0x40020040
 8003300:	40020058 	.word	0x40020058
 8003304:	40020070 	.word	0x40020070
 8003308:	40020088 	.word	0x40020088
 800330c:	400200a0 	.word	0x400200a0
 8003310:	400200b8 	.word	0x400200b8
 8003314:	40020410 	.word	0x40020410
 8003318:	40020428 	.word	0x40020428
 800331c:	40020440 	.word	0x40020440
 8003320:	40020458 	.word	0x40020458
 8003324:	40020470 	.word	0x40020470
 8003328:	40020488 	.word	0x40020488
 800332c:	400204a0 	.word	0x400204a0
 8003330:	400204b8 	.word	0x400204b8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2204      	movs	r2, #4
 800334a:	409a      	lsls	r2, r3
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003354:	f043 0204 	orr.w	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2210      	movs	r2, #16
 8003366:	409a      	lsls	r2, r3
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80a6 	beq.w	80034be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a85      	ldr	r2, [pc, #532]	@ (800358c <HAL_DMA_IRQHandler+0x690>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a83      	ldr	r2, [pc, #524]	@ (8003590 <HAL_DMA_IRQHandler+0x694>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a82      	ldr	r2, [pc, #520]	@ (8003594 <HAL_DMA_IRQHandler+0x698>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a80      	ldr	r2, [pc, #512]	@ (8003598 <HAL_DMA_IRQHandler+0x69c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7f      	ldr	r2, [pc, #508]	@ (800359c <HAL_DMA_IRQHandler+0x6a0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a7d      	ldr	r2, [pc, #500]	@ (80035a0 <HAL_DMA_IRQHandler+0x6a4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7c      	ldr	r2, [pc, #496]	@ (80035a4 <HAL_DMA_IRQHandler+0x6a8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7a      	ldr	r2, [pc, #488]	@ (80035a8 <HAL_DMA_IRQHandler+0x6ac>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a79      	ldr	r2, [pc, #484]	@ (80035ac <HAL_DMA_IRQHandler+0x6b0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a77      	ldr	r2, [pc, #476]	@ (80035b0 <HAL_DMA_IRQHandler+0x6b4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a76      	ldr	r2, [pc, #472]	@ (80035b4 <HAL_DMA_IRQHandler+0x6b8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a74      	ldr	r2, [pc, #464]	@ (80035b8 <HAL_DMA_IRQHandler+0x6bc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a73      	ldr	r2, [pc, #460]	@ (80035bc <HAL_DMA_IRQHandler+0x6c0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a71      	ldr	r2, [pc, #452]	@ (80035c0 <HAL_DMA_IRQHandler+0x6c4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a70      	ldr	r2, [pc, #448]	@ (80035c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_IRQHandler+0x516>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a6e      	ldr	r2, [pc, #440]	@ (80035c8 <HAL_DMA_IRQHandler+0x6cc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10a      	bne.n	8003428 <HAL_DMA_IRQHandler+0x52c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e009      	b.n	800343c <HAL_DMA_IRQHandler+0x540>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d03e      	beq.n	80034be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	2210      	movs	r2, #16
 800344a:	409a      	lsls	r2, r3
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d018      	beq.n	8003490 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d108      	bne.n	800347e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d024      	beq.n	80034be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
 800347c:	e01f      	b.n	80034be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01b      	beq.n	80034be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
 800348e:	e016      	b.n	80034be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0208 	bic.w	r2, r2, #8
 80034ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	2220      	movs	r2, #32
 80034c8:	409a      	lsls	r2, r3
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8110 	beq.w	80036f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2c      	ldr	r2, [pc, #176]	@ (800358c <HAL_DMA_IRQHandler+0x690>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04a      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003590 <HAL_DMA_IRQHandler+0x694>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d045      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a29      	ldr	r2, [pc, #164]	@ (8003594 <HAL_DMA_IRQHandler+0x698>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d040      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a28      	ldr	r2, [pc, #160]	@ (8003598 <HAL_DMA_IRQHandler+0x69c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03b      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a26      	ldr	r2, [pc, #152]	@ (800359c <HAL_DMA_IRQHandler+0x6a0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d036      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a25      	ldr	r2, [pc, #148]	@ (80035a0 <HAL_DMA_IRQHandler+0x6a4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d031      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a23      	ldr	r2, [pc, #140]	@ (80035a4 <HAL_DMA_IRQHandler+0x6a8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02c      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a22      	ldr	r2, [pc, #136]	@ (80035a8 <HAL_DMA_IRQHandler+0x6ac>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a20      	ldr	r2, [pc, #128]	@ (80035ac <HAL_DMA_IRQHandler+0x6b0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1f      	ldr	r2, [pc, #124]	@ (80035b0 <HAL_DMA_IRQHandler+0x6b4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01d      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1d      	ldr	r2, [pc, #116]	@ (80035b4 <HAL_DMA_IRQHandler+0x6b8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1c      	ldr	r2, [pc, #112]	@ (80035b8 <HAL_DMA_IRQHandler+0x6bc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1a      	ldr	r2, [pc, #104]	@ (80035bc <HAL_DMA_IRQHandler+0x6c0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a19      	ldr	r2, [pc, #100]	@ (80035c0 <HAL_DMA_IRQHandler+0x6c4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_DMA_IRQHandler+0x678>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a16      	ldr	r2, [pc, #88]	@ (80035c8 <HAL_DMA_IRQHandler+0x6cc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d12b      	bne.n	80035cc <HAL_DMA_IRQHandler+0x6d0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	e02a      	b.n	80035e0 <HAL_DMA_IRQHandler+0x6e4>
 800358a:	bf00      	nop
 800358c:	40020010 	.word	0x40020010
 8003590:	40020028 	.word	0x40020028
 8003594:	40020040 	.word	0x40020040
 8003598:	40020058 	.word	0x40020058
 800359c:	40020070 	.word	0x40020070
 80035a0:	40020088 	.word	0x40020088
 80035a4:	400200a0 	.word	0x400200a0
 80035a8:	400200b8 	.word	0x400200b8
 80035ac:	40020410 	.word	0x40020410
 80035b0:	40020428 	.word	0x40020428
 80035b4:	40020440 	.word	0x40020440
 80035b8:	40020458 	.word	0x40020458
 80035bc:	40020470 	.word	0x40020470
 80035c0:	40020488 	.word	0x40020488
 80035c4:	400204a0 	.word	0x400204a0
 80035c8:	400204b8 	.word	0x400204b8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8087 	beq.w	80036f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2220      	movs	r2, #32
 80035f0:	409a      	lsls	r2, r3
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d139      	bne.n	8003676 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0216 	bic.w	r2, r2, #22
 8003610:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003620:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d103      	bne.n	8003632 <HAL_DMA_IRQHandler+0x736>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0208 	bic.w	r2, r2, #8
 8003640:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	223f      	movs	r2, #63	@ 0x3f
 800364c:	409a      	lsls	r2, r3
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 834a 	beq.w	8003d00 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
          }
          return;
 8003674:	e344      	b.n	8003d00 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d018      	beq.n	80036b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d108      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02c      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
 80036a2:	e027      	b.n	80036f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d023      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4798      	blx	r3
 80036b4:	e01e      	b.n	80036f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10f      	bne.n	80036e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0210 	bic.w	r2, r2, #16
 80036d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8306 	beq.w	8003d0a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8088 	beq.w	800381c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2204      	movs	r2, #4
 8003710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a7a      	ldr	r2, [pc, #488]	@ (8003904 <HAL_DMA_IRQHandler+0xa08>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d04a      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a79      	ldr	r2, [pc, #484]	@ (8003908 <HAL_DMA_IRQHandler+0xa0c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d045      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a77      	ldr	r2, [pc, #476]	@ (800390c <HAL_DMA_IRQHandler+0xa10>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d040      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a76      	ldr	r2, [pc, #472]	@ (8003910 <HAL_DMA_IRQHandler+0xa14>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d03b      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a74      	ldr	r2, [pc, #464]	@ (8003914 <HAL_DMA_IRQHandler+0xa18>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d036      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a73      	ldr	r2, [pc, #460]	@ (8003918 <HAL_DMA_IRQHandler+0xa1c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d031      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a71      	ldr	r2, [pc, #452]	@ (800391c <HAL_DMA_IRQHandler+0xa20>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02c      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a70      	ldr	r2, [pc, #448]	@ (8003920 <HAL_DMA_IRQHandler+0xa24>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d027      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6e      	ldr	r2, [pc, #440]	@ (8003924 <HAL_DMA_IRQHandler+0xa28>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d022      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a6d      	ldr	r2, [pc, #436]	@ (8003928 <HAL_DMA_IRQHandler+0xa2c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d01d      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a6b      	ldr	r2, [pc, #428]	@ (800392c <HAL_DMA_IRQHandler+0xa30>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6a      	ldr	r2, [pc, #424]	@ (8003930 <HAL_DMA_IRQHandler+0xa34>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a68      	ldr	r2, [pc, #416]	@ (8003934 <HAL_DMA_IRQHandler+0xa38>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a67      	ldr	r2, [pc, #412]	@ (8003938 <HAL_DMA_IRQHandler+0xa3c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a65      	ldr	r2, [pc, #404]	@ (800393c <HAL_DMA_IRQHandler+0xa40>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x8b8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a64      	ldr	r2, [pc, #400]	@ (8003940 <HAL_DMA_IRQHandler+0xa44>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d108      	bne.n	80037c6 <HAL_DMA_IRQHandler+0x8ca>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e007      	b.n	80037d6 <HAL_DMA_IRQHandler+0x8da>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3301      	adds	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037de:	429a      	cmp	r2, r3
 80037e0:	d307      	bcc.n	80037f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f2      	bne.n	80037d6 <HAL_DMA_IRQHandler+0x8da>
 80037f0:	e000      	b.n	80037f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80037f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2203      	movs	r2, #3
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800380a:	e003      	b.n	8003814 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8272 	beq.w	8003d0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
 800382e:	e26c      	b.n	8003d0a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a43      	ldr	r2, [pc, #268]	@ (8003944 <HAL_DMA_IRQHandler+0xa48>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d022      	beq.n	8003880 <HAL_DMA_IRQHandler+0x984>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a42      	ldr	r2, [pc, #264]	@ (8003948 <HAL_DMA_IRQHandler+0xa4c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d01d      	beq.n	8003880 <HAL_DMA_IRQHandler+0x984>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a40      	ldr	r2, [pc, #256]	@ (800394c <HAL_DMA_IRQHandler+0xa50>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d018      	beq.n	8003880 <HAL_DMA_IRQHandler+0x984>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a3f      	ldr	r2, [pc, #252]	@ (8003950 <HAL_DMA_IRQHandler+0xa54>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <HAL_DMA_IRQHandler+0x984>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a3d      	ldr	r2, [pc, #244]	@ (8003954 <HAL_DMA_IRQHandler+0xa58>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_DMA_IRQHandler+0x984>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a3c      	ldr	r2, [pc, #240]	@ (8003958 <HAL_DMA_IRQHandler+0xa5c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_DMA_IRQHandler+0x984>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a3a      	ldr	r2, [pc, #232]	@ (800395c <HAL_DMA_IRQHandler+0xa60>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_DMA_IRQHandler+0x984>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a39      	ldr	r2, [pc, #228]	@ (8003960 <HAL_DMA_IRQHandler+0xa64>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_DMA_IRQHandler+0x988>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_DMA_IRQHandler+0x98a>
 8003884:	2300      	movs	r3, #0
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 823f 	beq.w	8003d0a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2204      	movs	r2, #4
 800389e:	409a      	lsls	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80cd 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xb48>
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80c7 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2204      	movs	r2, #4
 80038c0:	409a      	lsls	r2, r3
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d049      	beq.n	8003964 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8210 	beq.w	8003d04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038ec:	e20a      	b.n	8003d04 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 8206 	beq.w	8003d04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003900:	e200      	b.n	8003d04 <HAL_DMA_IRQHandler+0xe08>
 8003902:	bf00      	nop
 8003904:	40020010 	.word	0x40020010
 8003908:	40020028 	.word	0x40020028
 800390c:	40020040 	.word	0x40020040
 8003910:	40020058 	.word	0x40020058
 8003914:	40020070 	.word	0x40020070
 8003918:	40020088 	.word	0x40020088
 800391c:	400200a0 	.word	0x400200a0
 8003920:	400200b8 	.word	0x400200b8
 8003924:	40020410 	.word	0x40020410
 8003928:	40020428 	.word	0x40020428
 800392c:	40020440 	.word	0x40020440
 8003930:	40020458 	.word	0x40020458
 8003934:	40020470 	.word	0x40020470
 8003938:	40020488 	.word	0x40020488
 800393c:	400204a0 	.word	0x400204a0
 8003940:	400204b8 	.word	0x400204b8
 8003944:	58025408 	.word	0x58025408
 8003948:	5802541c 	.word	0x5802541c
 800394c:	58025430 	.word	0x58025430
 8003950:	58025444 	.word	0x58025444
 8003954:	58025458 	.word	0x58025458
 8003958:	5802546c 	.word	0x5802546c
 800395c:	58025480 	.word	0x58025480
 8003960:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d160      	bne.n	8003a30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a7f      	ldr	r2, [pc, #508]	@ (8003b70 <HAL_DMA_IRQHandler+0xc74>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d04a      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a7d      	ldr	r2, [pc, #500]	@ (8003b74 <HAL_DMA_IRQHandler+0xc78>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d045      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7c      	ldr	r2, [pc, #496]	@ (8003b78 <HAL_DMA_IRQHandler+0xc7c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d040      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7a      	ldr	r2, [pc, #488]	@ (8003b7c <HAL_DMA_IRQHandler+0xc80>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d03b      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a79      	ldr	r2, [pc, #484]	@ (8003b80 <HAL_DMA_IRQHandler+0xc84>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d036      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a77      	ldr	r2, [pc, #476]	@ (8003b84 <HAL_DMA_IRQHandler+0xc88>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d031      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a76      	ldr	r2, [pc, #472]	@ (8003b88 <HAL_DMA_IRQHandler+0xc8c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d02c      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a74      	ldr	r2, [pc, #464]	@ (8003b8c <HAL_DMA_IRQHandler+0xc90>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d027      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a73      	ldr	r2, [pc, #460]	@ (8003b90 <HAL_DMA_IRQHandler+0xc94>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a71      	ldr	r2, [pc, #452]	@ (8003b94 <HAL_DMA_IRQHandler+0xc98>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01d      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a70      	ldr	r2, [pc, #448]	@ (8003b98 <HAL_DMA_IRQHandler+0xc9c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <HAL_DMA_IRQHandler+0xca0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6d      	ldr	r2, [pc, #436]	@ (8003ba0 <HAL_DMA_IRQHandler+0xca4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba4 <HAL_DMA_IRQHandler+0xca8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba8 <HAL_DMA_IRQHandler+0xcac>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xb12>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a68      	ldr	r2, [pc, #416]	@ (8003bac <HAL_DMA_IRQHandler+0xcb0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d108      	bne.n	8003a20 <HAL_DMA_IRQHandler+0xb24>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0208 	bic.w	r2, r2, #8
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e007      	b.n	8003a30 <HAL_DMA_IRQHandler+0xb34>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0204 	bic.w	r2, r2, #4
 8003a2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8165 	beq.w	8003d04 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a42:	e15f      	b.n	8003d04 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80c5 	beq.w	8003be4 <HAL_DMA_IRQHandler+0xce8>
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80bf 	beq.w	8003be4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2202      	movs	r2, #2
 8003a70:	409a      	lsls	r2, r3
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 813a 	beq.w	8003d08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a9c:	e134      	b.n	8003d08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 8130 	beq.w	8003d08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ab0:	e12a      	b.n	8003d08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 8089 	bne.w	8003bd0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b70 <HAL_DMA_IRQHandler+0xc74>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a29      	ldr	r2, [pc, #164]	@ (8003b74 <HAL_DMA_IRQHandler+0xc78>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a28      	ldr	r2, [pc, #160]	@ (8003b78 <HAL_DMA_IRQHandler+0xc7c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a26      	ldr	r2, [pc, #152]	@ (8003b7c <HAL_DMA_IRQHandler+0xc80>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a25      	ldr	r2, [pc, #148]	@ (8003b80 <HAL_DMA_IRQHandler+0xc84>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <HAL_DMA_IRQHandler+0xc88>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a22      	ldr	r2, [pc, #136]	@ (8003b88 <HAL_DMA_IRQHandler+0xc8c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a20      	ldr	r2, [pc, #128]	@ (8003b8c <HAL_DMA_IRQHandler+0xc90>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1f      	ldr	r2, [pc, #124]	@ (8003b90 <HAL_DMA_IRQHandler+0xc94>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <HAL_DMA_IRQHandler+0xc98>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <HAL_DMA_IRQHandler+0xc9c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1a      	ldr	r2, [pc, #104]	@ (8003b9c <HAL_DMA_IRQHandler+0xca0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ba0 <HAL_DMA_IRQHandler+0xca4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a17      	ldr	r2, [pc, #92]	@ (8003ba4 <HAL_DMA_IRQHandler+0xca8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ba8 <HAL_DMA_IRQHandler+0xcac>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xc62>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a14      	ldr	r2, [pc, #80]	@ (8003bac <HAL_DMA_IRQHandler+0xcb0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d128      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0xcb4>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0214 	bic.w	r2, r2, #20
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e027      	b.n	8003bc0 <HAL_DMA_IRQHandler+0xcc4>
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 020a 	bic.w	r2, r2, #10
 8003bbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8097 	beq.w	8003d08 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be2:	e091      	b.n	8003d08 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2208      	movs	r2, #8
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8088 	beq.w	8003d0a <HAL_DMA_IRQHandler+0xe0e>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8082 	beq.w	8003d0a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a41      	ldr	r2, [pc, #260]	@ (8003d10 <HAL_DMA_IRQHandler+0xe14>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d04a      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a3f      	ldr	r2, [pc, #252]	@ (8003d14 <HAL_DMA_IRQHandler+0xe18>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d045      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d18 <HAL_DMA_IRQHandler+0xe1c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d040      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a3c      	ldr	r2, [pc, #240]	@ (8003d1c <HAL_DMA_IRQHandler+0xe20>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d03b      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a3b      	ldr	r2, [pc, #236]	@ (8003d20 <HAL_DMA_IRQHandler+0xe24>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d036      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a39      	ldr	r2, [pc, #228]	@ (8003d24 <HAL_DMA_IRQHandler+0xe28>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d031      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a38      	ldr	r2, [pc, #224]	@ (8003d28 <HAL_DMA_IRQHandler+0xe2c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d02c      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a36      	ldr	r2, [pc, #216]	@ (8003d2c <HAL_DMA_IRQHandler+0xe30>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d027      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a35      	ldr	r2, [pc, #212]	@ (8003d30 <HAL_DMA_IRQHandler+0xe34>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a33      	ldr	r2, [pc, #204]	@ (8003d34 <HAL_DMA_IRQHandler+0xe38>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01d      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a32      	ldr	r2, [pc, #200]	@ (8003d38 <HAL_DMA_IRQHandler+0xe3c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d018      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a30      	ldr	r2, [pc, #192]	@ (8003d3c <HAL_DMA_IRQHandler+0xe40>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2f      	ldr	r2, [pc, #188]	@ (8003d40 <HAL_DMA_IRQHandler+0xe44>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00e      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003d44 <HAL_DMA_IRQHandler+0xe48>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	@ (8003d48 <HAL_DMA_IRQHandler+0xe4c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xdaa>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d4c <HAL_DMA_IRQHandler+0xe50>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d108      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0xdbc>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 021c 	bic.w	r2, r2, #28
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e007      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xdcc>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 020e 	bic.w	r2, r2, #14
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
 8003cfe:	e004      	b.n	8003d0a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d00:	bf00      	nop
 8003d02:	e002      	b.n	8003d0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d04:	bf00      	nop
 8003d06:	e000      	b.n	8003d0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d0a:	3728      	adds	r7, #40	@ 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40020010 	.word	0x40020010
 8003d14:	40020028 	.word	0x40020028
 8003d18:	40020040 	.word	0x40020040
 8003d1c:	40020058 	.word	0x40020058
 8003d20:	40020070 	.word	0x40020070
 8003d24:	40020088 	.word	0x40020088
 8003d28:	400200a0 	.word	0x400200a0
 8003d2c:	400200b8 	.word	0x400200b8
 8003d30:	40020410 	.word	0x40020410
 8003d34:	40020428 	.word	0x40020428
 8003d38:	40020440 	.word	0x40020440
 8003d3c:	40020458 	.word	0x40020458
 8003d40:	40020470 	.word	0x40020470
 8003d44:	40020488 	.word	0x40020488
 8003d48:	400204a0 	.word	0x400204a0
 8003d4c:	400204b8 	.word	0x400204b8

08003d50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	@ (8003e68 <DMA_CalcBaseAndBitshift+0x118>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d04a      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a41      	ldr	r2, [pc, #260]	@ (8003e6c <DMA_CalcBaseAndBitshift+0x11c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d045      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a3f      	ldr	r2, [pc, #252]	@ (8003e70 <DMA_CalcBaseAndBitshift+0x120>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d040      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e74 <DMA_CalcBaseAndBitshift+0x124>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d03b      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a3c      	ldr	r2, [pc, #240]	@ (8003e78 <DMA_CalcBaseAndBitshift+0x128>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d036      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e7c <DMA_CalcBaseAndBitshift+0x12c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d031      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a39      	ldr	r2, [pc, #228]	@ (8003e80 <DMA_CalcBaseAndBitshift+0x130>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02c      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a38      	ldr	r2, [pc, #224]	@ (8003e84 <DMA_CalcBaseAndBitshift+0x134>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d027      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a36      	ldr	r2, [pc, #216]	@ (8003e88 <DMA_CalcBaseAndBitshift+0x138>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d022      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a35      	ldr	r2, [pc, #212]	@ (8003e8c <DMA_CalcBaseAndBitshift+0x13c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d01d      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a33      	ldr	r2, [pc, #204]	@ (8003e90 <DMA_CalcBaseAndBitshift+0x140>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d018      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a32      	ldr	r2, [pc, #200]	@ (8003e94 <DMA_CalcBaseAndBitshift+0x144>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a30      	ldr	r2, [pc, #192]	@ (8003e98 <DMA_CalcBaseAndBitshift+0x148>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2f      	ldr	r2, [pc, #188]	@ (8003e9c <DMA_CalcBaseAndBitshift+0x14c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea0 <DMA_CalcBaseAndBitshift+0x150>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xa8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea4 <DMA_CalcBaseAndBitshift+0x154>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <DMA_CalcBaseAndBitshift+0xac>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <DMA_CalcBaseAndBitshift+0xae>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d024      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	3b10      	subs	r3, #16
 8003e0a:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <DMA_CalcBaseAndBitshift+0x158>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	4a24      	ldr	r2, [pc, #144]	@ (8003eac <DMA_CalcBaseAndBitshift+0x15c>)
 8003e1c:	5cd3      	ldrb	r3, [r2, r3]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d908      	bls.n	8003e3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb0 <DMA_CalcBaseAndBitshift+0x160>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	1d1a      	adds	r2, r3, #4
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e3a:	e00d      	b.n	8003e58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <DMA_CalcBaseAndBitshift+0x160>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4a:	e005      	b.n	8003e58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40020010 	.word	0x40020010
 8003e6c:	40020028 	.word	0x40020028
 8003e70:	40020040 	.word	0x40020040
 8003e74:	40020058 	.word	0x40020058
 8003e78:	40020070 	.word	0x40020070
 8003e7c:	40020088 	.word	0x40020088
 8003e80:	400200a0 	.word	0x400200a0
 8003e84:	400200b8 	.word	0x400200b8
 8003e88:	40020410 	.word	0x40020410
 8003e8c:	40020428 	.word	0x40020428
 8003e90:	40020440 	.word	0x40020440
 8003e94:	40020458 	.word	0x40020458
 8003e98:	40020470 	.word	0x40020470
 8003e9c:	40020488 	.word	0x40020488
 8003ea0:	400204a0 	.word	0x400204a0
 8003ea4:	400204b8 	.word	0x400204b8
 8003ea8:	aaaaaaab 	.word	0xaaaaaaab
 8003eac:	0801edbc 	.word	0x0801edbc
 8003eb0:	fffffc00 	.word	0xfffffc00

08003eb4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d120      	bne.n	8003f0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d858      	bhi.n	8003f82 <DMA_CheckFifoParam+0xce>
 8003ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <DMA_CheckFifoParam+0x24>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003ee9 	.word	0x08003ee9
 8003edc:	08003efb 	.word	0x08003efb
 8003ee0:	08003ee9 	.word	0x08003ee9
 8003ee4:	08003f83 	.word	0x08003f83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d048      	beq.n	8003f86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ef8:	e045      	b.n	8003f86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f02:	d142      	bne.n	8003f8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f08:	e03f      	b.n	8003f8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f12:	d123      	bne.n	8003f5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d838      	bhi.n	8003f8e <DMA_CheckFifoParam+0xda>
 8003f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <DMA_CheckFifoParam+0x70>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f35 	.word	0x08003f35
 8003f28:	08003f3b 	.word	0x08003f3b
 8003f2c:	08003f35 	.word	0x08003f35
 8003f30:	08003f4d 	.word	0x08003f4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
        break;
 8003f38:	e030      	b.n	8003f9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d025      	beq.n	8003f92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f4a:	e022      	b.n	8003f92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f54:	d11f      	bne.n	8003f96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f5a:	e01c      	b.n	8003f96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d902      	bls.n	8003f6a <DMA_CheckFifoParam+0xb6>
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d003      	beq.n	8003f70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f68:	e018      	b.n	8003f9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f6e:	e015      	b.n	8003f9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00e      	beq.n	8003f9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8003f80:	e00b      	b.n	8003f9a <DMA_CheckFifoParam+0xe6>
        break;
 8003f82:	bf00      	nop
 8003f84:	e00a      	b.n	8003f9c <DMA_CheckFifoParam+0xe8>
        break;
 8003f86:	bf00      	nop
 8003f88:	e008      	b.n	8003f9c <DMA_CheckFifoParam+0xe8>
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e006      	b.n	8003f9c <DMA_CheckFifoParam+0xe8>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e004      	b.n	8003f9c <DMA_CheckFifoParam+0xe8>
        break;
 8003f92:	bf00      	nop
 8003f94:	e002      	b.n	8003f9c <DMA_CheckFifoParam+0xe8>
        break;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <DMA_CheckFifoParam+0xe8>
    break;
 8003f9a:	bf00      	nop
    }
  }

  return status;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop

08003fac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a38      	ldr	r2, [pc, #224]	@ (80040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a36      	ldr	r2, [pc, #216]	@ (80040a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a35      	ldr	r2, [pc, #212]	@ (80040a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a33      	ldr	r2, [pc, #204]	@ (80040ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a32      	ldr	r2, [pc, #200]	@ (80040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a30      	ldr	r2, [pc, #192]	@ (80040b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2d      	ldr	r2, [pc, #180]	@ (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01a      	beq.n	800404a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	3b08      	subs	r3, #8
 800401c:	4a28      	ldr	r2, [pc, #160]	@ (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4b26      	ldr	r3, [pc, #152]	@ (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	461a      	mov	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a24      	ldr	r2, [pc, #144]	@ (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004038:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004048:	e024      	b.n	8004094 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3b10      	subs	r3, #16
 8004052:	4a1e      	ldr	r2, [pc, #120]	@ (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4a1c      	ldr	r2, [pc, #112]	@ (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d806      	bhi.n	8004072 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4a1b      	ldr	r2, [pc, #108]	@ (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d902      	bls.n	8004072 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3308      	adds	r3, #8
 8004070:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4b18      	ldr	r3, [pc, #96]	@ (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	461a      	mov	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a16      	ldr	r2, [pc, #88]	@ (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004084:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	58025408 	.word	0x58025408
 80040a4:	5802541c 	.word	0x5802541c
 80040a8:	58025430 	.word	0x58025430
 80040ac:	58025444 	.word	0x58025444
 80040b0:	58025458 	.word	0x58025458
 80040b4:	5802546c 	.word	0x5802546c
 80040b8:	58025480 	.word	0x58025480
 80040bc:	58025494 	.word	0x58025494
 80040c0:	cccccccd 	.word	0xcccccccd
 80040c4:	16009600 	.word	0x16009600
 80040c8:	58025880 	.word	0x58025880
 80040cc:	aaaaaaab 	.word	0xaaaaaaab
 80040d0:	400204b8 	.word	0x400204b8
 80040d4:	4002040f 	.word	0x4002040f
 80040d8:	10008200 	.word	0x10008200
 80040dc:	40020880 	.word	0x40020880

080040e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d04a      	beq.n	800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d847      	bhi.n	800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a25      	ldr	r2, [pc, #148]	@ (8004198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d022      	beq.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a24      	ldr	r2, [pc, #144]	@ (800419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d01d      	beq.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d018      	beq.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a21      	ldr	r2, [pc, #132]	@ (80041a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1f      	ldr	r2, [pc, #124]	@ (80041a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00e      	beq.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1e      	ldr	r2, [pc, #120]	@ (80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d009      	beq.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1b      	ldr	r2, [pc, #108]	@ (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004150:	2300      	movs	r3, #0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	461a      	mov	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004168:	671a      	str	r2, [r3, #112]	@ 0x70
 800416a:	e009      	b.n	8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	461a      	mov	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a11      	ldr	r2, [pc, #68]	@ (80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800417e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3b01      	subs	r3, #1
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	58025408 	.word	0x58025408
 800419c:	5802541c 	.word	0x5802541c
 80041a0:	58025430 	.word	0x58025430
 80041a4:	58025444 	.word	0x58025444
 80041a8:	58025458 	.word	0x58025458
 80041ac:	5802546c 	.word	0x5802546c
 80041b0:	58025480 	.word	0x58025480
 80041b4:	58025494 	.word	0x58025494
 80041b8:	1600963f 	.word	0x1600963f
 80041bc:	58025940 	.word	0x58025940
 80041c0:	1000823f 	.word	0x1000823f
 80041c4:	40020940 	.word	0x40020940

080041c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e0e3      	b.n	80043a2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d106      	bne.n	80041f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f007 ff83 	bl	800c0f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f2:	4b6e      	ldr	r3, [pc, #440]	@ (80043ac <HAL_ETH_Init+0x1e4>)
 80041f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041f8:	4a6c      	ldr	r2, [pc, #432]	@ (80043ac <HAL_ETH_Init+0x1e4>)
 80041fa:	f043 0302 	orr.w	r3, r3, #2
 80041fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004202:	4b6a      	ldr	r3, [pc, #424]	@ (80043ac <HAL_ETH_Init+0x1e4>)
 8004204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	7a1b      	ldrb	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004218:	2000      	movs	r0, #0
 800421a:	f7fd ff33 	bl	8002084 <HAL_SYSCFG_ETHInterfaceSelect>
 800421e:	e003      	b.n	8004228 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004220:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004224:	f7fd ff2e 	bl	8002084 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004228:	4b61      	ldr	r3, [pc, #388]	@ (80043b0 <HAL_ETH_Init+0x1e8>)
 800422a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004242:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004244:	f7fd feee 	bl	8002024 <HAL_GetTick>
 8004248:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800424a:	e011      	b.n	8004270 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800424c:	f7fd feea 	bl	8002024 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800425a:	d909      	bls.n	8004270 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2204      	movs	r2, #4
 8004260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	22e0      	movs	r2, #224	@ 0xe0
 8004268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e098      	b.n	80043a2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e4      	bne.n	800424c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 ff7e 	bl	8005184 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004288:	f002 fe88 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 800428c:	4603      	mov	r3, r0
 800428e:	4a49      	ldr	r2, [pc, #292]	@ (80043b4 <HAL_ETH_Init+0x1ec>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	0c9a      	lsrs	r2, r3, #18
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3a01      	subs	r2, #1
 800429c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f001 f97b 	bl	800559c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80042b2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042c2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	22e0      	movs	r2, #224	@ 0xe0
 80042de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e05d      	b.n	80043a2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80042f2:	4b31      	ldr	r3, [pc, #196]	@ (80043b8 <HAL_ETH_Init+0x1f0>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6952      	ldr	r2, [r2, #20]
 80042fa:	0051      	lsls	r1, r2, #1
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004306:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f001 f9e3 	bl	80056d6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f001 fa29 	bl	8005768 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	3305      	adds	r3, #5
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	021a      	lsls	r2, r3, #8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	4619      	mov	r1, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	3303      	adds	r3, #3
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	061a      	lsls	r2, r3, #24
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	3302      	adds	r3, #2
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	041b      	lsls	r3, r3, #16
 8004348:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	3301      	adds	r3, #1
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004354:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004362:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004364:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b11      	ldr	r3, [pc, #68]	@ (80043bc <HAL_ETH_Init+0x1f4>)
 8004376:	430b      	orrs	r3, r1
 8004378:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <HAL_ETH_Init+0x1f8>)
 800438a:	430b      	orrs	r3, r1
 800438c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2210      	movs	r2, #16
 800439c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
 80043b0:	58000400 	.word	0x58000400
 80043b4:	431bde83 	.word	0x431bde83
 80043b8:	ffff8001 	.word	0xffff8001
 80043bc:	0c020060 	.word	0x0c020060
 80043c0:	0c20c000 	.word	0x0c20c000

080043c4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d153      	bne.n	800447e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2204      	movs	r2, #4
 80043e2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fa49 	bl	800487c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0202 	orr.w	r2, r2, #2
 80043f8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004426:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004436:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004442:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004452:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800445e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800446a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800446e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2240      	movs	r2, #64	@ 0x40
 8004476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
  }
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004496:	2b10      	cmp	r3, #16
 8004498:	d165      	bne.n	8004566 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2204      	movs	r2, #4
 80044ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f9e4 	bl	800487c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044cc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044e8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8004500:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004504:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0202 	orr.w	r2, r2, #2
 800452a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004544:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8004550:	430b      	orrs	r3, r1
 8004552:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004556:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2240      	movs	r2, #64	@ 0x40
 800455e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e000      	b.n	8004568 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
  }
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457e:	2b40      	cmp	r3, #64	@ 0x40
 8004580:	d165      	bne.n	800464e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004592:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b30      	ldr	r3, [pc, #192]	@ (800465c <HAL_ETH_Stop_IT+0xec>)
 800459c:	400b      	ands	r3, r1
 800459e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045a2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045be:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045da:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0202 	bic.w	r2, r2, #2
 8004610:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e00e      	b.n	8004636 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	3212      	adds	r2, #18
 800461e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004622:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d9ed      	bls.n	8004618 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2210      	movs	r2, #16
 8004646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	ffff2f3e 	.word	0xffff2f3e

08004660 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d109      	bne.n	8004684 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e03a      	b.n	80046fa <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	d134      	bne.n	80046f8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004696:	2201      	movs	r2, #1
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 f8c2 	bl	8005824 <ETH_Prepare_Tx_Descriptors>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ac:	f043 0202 	orr.w	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e01f      	b.n	80046fa <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80046ba:	f3bf 8f4f 	dsb	sy
}
 80046be:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d904      	bls.n	80046dc <HAL_ETH_Transmit_IT+0x7c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d6:	1f1a      	subs	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3106      	adds	r1, #6
 80046e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80046ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046f0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b088      	sub	sp, #32
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004720:	f043 0201 	orr.w	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0a2      	b.n	8004874 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004734:	2b40      	cmp	r3, #64	@ 0x40
 8004736:	d001      	beq.n	800473c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e09b      	b.n	8004874 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004740:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	3212      	adds	r2, #18
 8004748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004752:	f1c3 0304 	rsb	r3, r3, #4
 8004756:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004758:	e064      	b.n	8004824 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <HAL_ETH_ReadData+0x88>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d03a      	beq.n	8004800 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80047da:	461a      	mov	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f007 fe6c 	bl	800c4bc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2200      	movs	r2, #0
 80047fe:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3301      	adds	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d902      	bls.n	8004812 <HAL_ETH_ReadData+0x110>
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3b04      	subs	r3, #4
 8004810:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	3212      	adds	r2, #18
 8004818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	3301      	adds	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004828:	2b00      	cmp	r3, #0
 800482a:	db06      	blt.n	800483a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	429a      	cmp	r2, r3
 8004832:	d202      	bcs.n	800483a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d08f      	beq.n	800475a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f814 	bl	800487c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800485a:	7cfb      	ldrb	r3, [r7, #19]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d108      	bne.n	8004872 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e000      	b.n	8004874 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004888:	2301      	movs	r3, #1
 800488a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004890:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	3212      	adds	r2, #18
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80048a4:	e038      	b.n	8004918 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d112      	bne.n	80048d4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80048ae:	f107 0308 	add.w	r3, r7, #8
 80048b2:	4618      	mov	r0, r3
 80048b4:	f007 fdd2 	bl	800c45c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	74fb      	strb	r3, [r7, #19]
 80048c2:	e007      	b.n	80048d4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	461a      	mov	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	461a      	mov	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01e      	beq.n	8004918 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	e003      	b.n	80048f4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80048f2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d902      	bls.n	8004906 <ETH_UpdateDescriptor+0x8a>
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3b04      	subs	r3, #4
 8004904:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	3212      	adds	r2, #18
 800490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004910:	617b      	str	r3, [r7, #20]
      desccount--;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	3b01      	subs	r3, #1
 8004916:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <ETH_UpdateDescriptor+0xa8>
 800491e:	7cfb      	ldrb	r3, [r7, #19]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1c0      	bne.n	80048a6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	429a      	cmp	r2, r3
 800492c:	d01b      	beq.n	8004966 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3303      	adds	r3, #3
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004938:	f3bf 8f5f 	dmb	sy
}
 800493c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6919      	ldr	r1, [r3, #16]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4613      	mov	r3, r2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4413      	add	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	18ca      	adds	r2, r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004956:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004966:	bf00      	nop
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b086      	sub	sp, #24
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3318      	adds	r3, #24
 800497a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004986:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800498c:	e047      	b.n	8004a1e <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800498e:	2301      	movs	r3, #1
 8004990:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	3b01      	subs	r3, #1
 8004996:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	3304      	adds	r3, #4
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	3301      	adds	r3, #1
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d902      	bls.n	80049ba <HAL_ETH_ReleaseTxPacket+0x4c>
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3b04      	subs	r3, #4
 80049b8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80049be:	7bbb      	ldrb	r3, [r7, #14]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d02c      	beq.n	8004a1e <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68d9      	ldr	r1, [r3, #12]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4613      	mov	r3, r2
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	4413      	add	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	440b      	add	r3, r1
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db1f      	blt.n	8004a1a <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	3304      	adds	r3, #4
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f007 fdd0 	bl	800c58c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3304      	adds	r3, #4
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	2200      	movs	r2, #0
 80049f8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	3301      	adds	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d902      	bls.n	8004a0c <HAL_ETH_ReleaseTxPacket+0x9e>
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	3b04      	subs	r3, #4
 8004a0a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a18:	e001      	b.n	8004a1e <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_ETH_ReleaseTxPacket+0xbc>
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1b1      	bne.n	800498e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a44:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004a52:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a5c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8004a60:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8004a62:	4b6d      	ldr	r3, [pc, #436]	@ (8004c18 <HAL_ETH_IRQHandler+0x1e4>)
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d010      	beq.n	8004a94 <HAL_ETH_IRQHandler+0x60>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a84:	461a      	mov	r2, r3
 8004a86:	f248 0340 	movw	r3, #32832	@ 0x8040
 8004a8a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f007 f872 	bl	800bb78 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d010      	beq.n	8004ac0 <HAL_ETH_IRQHandler+0x8c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f248 0301 	movw	r3, #32769	@ 0x8001
 8004ab6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f007 f86c 	bl	800bb98 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d047      	beq.n	8004b5a <HAL_ETH_IRQHandler+0x126>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d042      	beq.n	8004b5a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ada:	f043 0208 	orr.w	r2, r3, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01e      	beq.n	8004b2c <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004af6:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8004afa:	f241 1302 	movw	r3, #4354	@ 0x1102
 8004afe:	4013      	ands	r3, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b0e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004b1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b1e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	22e0      	movs	r2, #224	@ 0xe0
 8004b26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004b2a:	e013      	b.n	8004b54 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b34:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004b38:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8004b50:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f007 f82f 	bl	800bbb8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d019      	beq.n	8004ba2 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b74:	f043 0210 	orr.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	22e0      	movs	r2, #224	@ 0xe0
 8004b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f007 f80f 	bl	800bbb8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00f      	beq.n	8004bcc <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004bb4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f82c 	bl	8004c1c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00f      	beq.n	8004bf6 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004bde:	f003 020f 	and.w	r2, r3, #15
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f821 	bl	8004c30 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004c00:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <HAL_ETH_IRQHandler+0x1e4>)
 8004c02:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004c06:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f81b 	bl	8004c44 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	58000080 	.word	0x58000080

08004c1c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e03e      	b.n	8004cf8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c82:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	055b      	lsls	r3, r3, #21
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f043 030c 	orr.w	r3, r3, #12
 8004ca6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004cba:	f7fd f9b3 	bl	8002024 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004cc0:	e009      	b.n	8004cd6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004cc2:	f7fd f9af 	bl	8002024 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cd0:	d901      	bls.n	8004cd6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e010      	b.n	8004cf8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1ed      	bne.n	8004cc2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e03c      	b.n	8004d9c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d2a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	055b      	lsls	r3, r3, #21
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f023 030c 	bic.w	r3, r3, #12
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	4b10      	ldr	r3, [pc, #64]	@ (8004da4 <HAL_ETH_WritePHYRegister+0xa4>)
 8004d62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004d66:	4a0f      	ldr	r2, [pc, #60]	@ (8004da4 <HAL_ETH_WritePHYRegister+0xa4>)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004d6e:	f7fd f959 	bl	8002024 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004d74:	e009      	b.n	8004d8a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004d76:	f7fd f955 	bl	8002024 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d84:	d901      	bls.n	8004d8a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e008      	b.n	8004d9c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ed      	bne.n	8004d76 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40028000 	.word	0x40028000

08004da8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e1c3      	b.n	8005144 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 020c 	and.w	r2, r3, #12
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	bf14      	ite	ne
 8004e1e:	2301      	movne	r3, #1
 8004e20:	2300      	moveq	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004e4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bf14      	ite	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	2300      	moveq	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf14      	ite	ne
 8004e6c:	2301      	movne	r3, #1
 8004e6e:	2300      	moveq	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bf14      	ite	ne
 8004ea2:	2301      	movne	r3, #1
 8004ea4:	2300      	moveq	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bf0c      	ite	eq
 8004ed6:	2301      	moveq	r3, #1
 8004ed8:	2300      	movne	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bf14      	ite	ne
 8004f0a:	2301      	movne	r3, #1
 8004f0c:	2300      	moveq	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004f36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bf14      	ite	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	2300      	moveq	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	0e5b      	lsrs	r3, r3, #25
 8005006:	f003 021f 	and.w	r2, r3, #31
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005076:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	b29a      	uxth	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80050d0:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80050e0:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bf14      	ite	ne
 80050f8:	2301      	movne	r3, #1
 80050fa:	2300      	moveq	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800512c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005130:	2b00      	cmp	r3, #0
 8005132:	bf0c      	ite	eq
 8005134:	2301      	moveq	r3, #1
 8005136:	2300      	movne	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e00b      	b.n	800517c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800516a:	2b10      	cmp	r3, #16
 800516c:	d105      	bne.n	800517a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f871 	bl	8005258 <ETH_SetMACConfig>

    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005194:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800519c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800519e:	f001 fefd 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 80051a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005210 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d804      	bhi.n	80051b6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e022      	b.n	80051fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4a16      	ldr	r2, [pc, #88]	@ (8005214 <HAL_ETH_SetMDIOClockRange+0x90>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d204      	bcs.n	80051c8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e019      	b.n	80051fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4a13      	ldr	r2, [pc, #76]	@ (8005218 <HAL_ETH_SetMDIOClockRange+0x94>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d915      	bls.n	80051fc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4a12      	ldr	r2, [pc, #72]	@ (800521c <HAL_ETH_SetMDIOClockRange+0x98>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d804      	bhi.n	80051e2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e00c      	b.n	80051fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4a0e      	ldr	r2, [pc, #56]	@ (8005220 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d804      	bhi.n	80051f4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e003      	b.n	80051fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80051fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8005206:	bf00      	nop
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	02160ebf 	.word	0x02160ebf
 8005214:	03938700 	.word	0x03938700
 8005218:	05f5e0ff 	.word	0x05f5e0ff
 800521c:	08f0d17f 	.word	0x08f0d17f
 8005220:	0ee6b27f 	.word	0x0ee6b27f

08005224 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800526a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	791b      	ldrb	r3, [r3, #4]
 8005270:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005272:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	7b1b      	ldrb	r3, [r3, #12]
 8005278:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800527a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	7b5b      	ldrb	r3, [r3, #13]
 8005280:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005282:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	7b9b      	ldrb	r3, [r3, #14]
 8005288:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800528a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	7bdb      	ldrb	r3, [r3, #15]
 8005290:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005292:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	7c12      	ldrb	r2, [r2, #16]
 8005298:	2a00      	cmp	r2, #0
 800529a:	d102      	bne.n	80052a2 <ETH_SetMACConfig+0x4a>
 800529c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80052a0:	e000      	b.n	80052a4 <ETH_SetMACConfig+0x4c>
 80052a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80052a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	7c52      	ldrb	r2, [r2, #17]
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	d102      	bne.n	80052b4 <ETH_SetMACConfig+0x5c>
 80052ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052b2:	e000      	b.n	80052b6 <ETH_SetMACConfig+0x5e>
 80052b4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	7c9b      	ldrb	r3, [r3, #18]
 80052bc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052be:	431a      	orrs	r2, r3
               macconf->Speed |
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80052c4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80052ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	7f1b      	ldrb	r3, [r3, #28]
 80052d0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80052d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	7f5b      	ldrb	r3, [r3, #29]
 80052d8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80052da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	7f92      	ldrb	r2, [r2, #30]
 80052e0:	2a00      	cmp	r2, #0
 80052e2:	d102      	bne.n	80052ea <ETH_SetMACConfig+0x92>
 80052e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052e8:	e000      	b.n	80052ec <ETH_SetMACConfig+0x94>
 80052ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80052ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	7fdb      	ldrb	r3, [r3, #31]
 80052f2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80052f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	d102      	bne.n	8005306 <ETH_SetMACConfig+0xae>
 8005300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005304:	e000      	b.n	8005308 <ETH_SetMACConfig+0xb0>
 8005306:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005308:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800530e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005316:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005318:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b56      	ldr	r3, [pc, #344]	@ (8005484 <ETH_SetMACConfig+0x22c>)
 800532a:	4013      	ands	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	430b      	orrs	r3, r1
 8005334:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005342:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005344:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800534c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800534e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005356:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005358:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005360:	2a00      	cmp	r2, #0
 8005362:	d102      	bne.n	800536a <ETH_SetMACConfig+0x112>
 8005364:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005368:	e000      	b.n	800536c <ETH_SetMACConfig+0x114>
 800536a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800536c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4b42      	ldr	r3, [pc, #264]	@ (8005488 <ETH_SetMACConfig+0x230>)
 800537e:	4013      	ands	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	68f9      	ldr	r1, [r7, #12]
 8005386:	430b      	orrs	r3, r1
 8005388:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005390:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	4b3a      	ldr	r3, [pc, #232]	@ (800548c <ETH_SetMACConfig+0x234>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	68f9      	ldr	r1, [r7, #12]
 80053aa:	430b      	orrs	r3, r1
 80053ac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80053b4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	d101      	bne.n	80053ca <ETH_SetMACConfig+0x172>
 80053c6:	2280      	movs	r2, #128	@ 0x80
 80053c8:	e000      	b.n	80053cc <ETH_SetMACConfig+0x174>
 80053ca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80053cc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053de:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80053e2:	4013      	ands	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80053f4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80053fc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540a:	f023 0103 	bic.w	r1, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	430a      	orrs	r2, r1
 8005416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005422:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800543e:	2a00      	cmp	r2, #0
 8005440:	d101      	bne.n	8005446 <ETH_SetMACConfig+0x1ee>
 8005442:	2240      	movs	r2, #64	@ 0x40
 8005444:	e000      	b.n	8005448 <ETH_SetMACConfig+0x1f0>
 8005446:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005448:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005450:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005452:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800545a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005468:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	430a      	orrs	r2, r1
 8005474:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	00048083 	.word	0x00048083
 8005488:	c0f88000 	.word	0xc0f88000
 800548c:	fffffef0 	.word	0xfffffef0

08005490 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b38      	ldr	r3, [pc, #224]	@ (8005588 <ETH_SetDMAConfig+0xf8>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	6811      	ldr	r1, [r2, #0]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	430b      	orrs	r3, r1
 80054b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054b6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	791b      	ldrb	r3, [r3, #4]
 80054bc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	7b1b      	ldrb	r3, [r3, #12]
 80054c8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	4b2c      	ldr	r3, [pc, #176]	@ (800558c <ETH_SetDMAConfig+0xfc>)
 80054da:	4013      	ands	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	68f9      	ldr	r1, [r7, #12]
 80054e2:	430b      	orrs	r3, r1
 80054e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054e8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	7b5b      	ldrb	r3, [r3, #13]
 80054ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005500:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005504:	4b22      	ldr	r3, [pc, #136]	@ (8005590 <ETH_SetDMAConfig+0x100>)
 8005506:	4013      	ands	r3, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	68f9      	ldr	r1, [r7, #12]
 800550e:	430b      	orrs	r3, r1
 8005510:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005514:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	7d1b      	ldrb	r3, [r3, #20]
 8005520:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005522:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	7f5b      	ldrb	r3, [r3, #29]
 8005528:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005536:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800553a:	4b16      	ldr	r3, [pc, #88]	@ (8005594 <ETH_SetDMAConfig+0x104>)
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	430b      	orrs	r3, r1
 8005546:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800554a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	7f1b      	ldrb	r3, [r3, #28]
 8005552:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005564:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005568:	4b0b      	ldr	r3, [pc, #44]	@ (8005598 <ETH_SetDMAConfig+0x108>)
 800556a:	4013      	ands	r3, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	430b      	orrs	r3, r1
 8005574:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005578:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	ffff87fd 	.word	0xffff87fd
 800558c:	ffff2ffe 	.word	0xffff2ffe
 8005590:	fffec000 	.word	0xfffec000
 8005594:	ffc0efef 	.word	0xffc0efef
 8005598:	7fc0ffff 	.word	0x7fc0ffff

0800559c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b0a4      	sub	sp, #144	@ 0x90
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80055aa:	2300      	movs	r3, #0
 80055ac:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80055d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055dc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80055f4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80055f8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005600:	2300      	movs	r3, #0
 8005602:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800560a:	2300      	movs	r3, #0
 800560c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005610:	2300      	movs	r3, #0
 8005612:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005616:	2300      	movs	r3, #0
 8005618:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800561a:	2300      	movs	r3, #0
 800561c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800561e:	2300      	movs	r3, #0
 8005620:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005622:	2300      	movs	r3, #0
 8005624:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005634:	2320      	movs	r3, #32
 8005636:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005640:	2300      	movs	r3, #0
 8005642:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005646:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800564a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800564c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005650:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005658:	2302      	movs	r3, #2
 800565a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800565e:	2300      	movs	r3, #0
 8005660:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005664:	2300      	movs	r3, #0
 8005666:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800566a:	2300      	movs	r3, #0
 800566c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005676:	2300      	movs	r3, #0
 8005678:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005680:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fde6 	bl	8005258 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800568c:	2301      	movs	r3, #1
 800568e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005690:	2301      	movs	r3, #1
 8005692:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005694:	2300      	movs	r3, #0
 8005696:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005698:	2300      	movs	r3, #0
 800569a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800569e:	2300      	movs	r3, #0
 80056a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80056a6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80056b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80056bc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80056c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80056c2:	f107 0308 	add.w	r3, r7, #8
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff fee1 	bl	8005490 <ETH_SetDMAConfig>
}
 80056ce:	bf00      	nop
 80056d0:	3790      	adds	r7, #144	@ 0x90
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e01d      	b.n	8005720 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68d9      	ldr	r1, [r3, #12]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4613      	mov	r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	440b      	add	r3, r1
 80056f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2200      	movs	r2, #0
 8005706:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2200      	movs	r2, #0
 800570c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	3206      	adds	r2, #6
 8005716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d9de      	bls.n	80056e4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005734:	461a      	mov	r2, r3
 8005736:	2303      	movs	r3, #3
 8005738:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005748:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005758:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	e023      	b.n	80057be <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6919      	ldr	r1, [r3, #16]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2200      	movs	r2, #0
 8005792:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2200      	movs	r2, #0
 800579e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2200      	movs	r2, #0
 80057a4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2200      	movs	r2, #0
 80057aa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	3212      	adds	r2, #18
 80057b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d9d8      	bls.n	8005776 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ea:	461a      	mov	r2, r3
 80057ec:	2303      	movs	r3, #3
 80057ee:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057fe:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005812:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005824:	b480      	push	{r7}
 8005826:	b091      	sub	sp, #68	@ 0x44
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3318      	adds	r3, #24
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800584a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005862:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005866:	d007      	beq.n	8005878 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586c:	3304      	adds	r3, #4
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005878:	2302      	movs	r3, #2
 800587a:	e266      	b.n	8005d4a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d044      	beq.n	8005912 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	4b75      	ldr	r3, [pc, #468]	@ (8005a64 <ETH_Prepare_Tx_Descriptors+0x240>)
 800588e:	4013      	ands	r3, r2
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005894:	431a      	orrs	r2, r3
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800589a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80058b4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d027      	beq.n	8005912 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058cc:	041b      	lsls	r3, r3, #16
 80058ce:	431a      	orrs	r2, r3
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80058dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058de:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ec:	431a      	orrs	r2, r3
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005900:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005910:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00e      	beq.n	800593c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	4b51      	ldr	r3, [pc, #324]	@ (8005a68 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005924:	4013      	ands	r3, r2
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	6992      	ldr	r2, [r2, #24]
 800592a:	431a      	orrs	r2, r3
 800592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d105      	bne.n	8005954 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d036      	beq.n	80059c2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005960:	f3bf 8f5f 	dmb	sy
}
 8005964:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005974:	3301      	adds	r3, #1
 8005976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597a:	2b03      	cmp	r3, #3
 800597c:	d902      	bls.n	8005984 <ETH_Prepare_Tx_Descriptors+0x160>
 800597e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005980:	3b04      	subs	r3, #4
 8005982:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800598e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005990:	3301      	adds	r3, #1
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800599c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059a0:	d10f      	bne.n	80059c2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059aa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80059ac:	f3bf 8f5f 	dmb	sy
}
 80059b0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80059be:	2302      	movs	r3, #2
 80059c0:	e1c3      	b.n	8005d4a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80059c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c4:	3301      	adds	r3, #1
 80059c6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80059c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	4b24      	ldr	r3, [pc, #144]	@ (8005a68 <ETH_Prepare_Tx_Descriptors+0x244>)
 80059d8:	4013      	ands	r3, r2
 80059da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059dc:	6852      	ldr	r2, [r2, #4]
 80059de:	431a      	orrs	r2, r3
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80059e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d012      	beq.n	8005a12 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80059ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	4b1a      	ldr	r3, [pc, #104]	@ (8005a6c <ETH_Prepare_Tx_Descriptors+0x248>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a06:	6852      	ldr	r2, [r2, #4]
 8005a08:	0412      	lsls	r2, r2, #16
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	e008      	b.n	8005a24 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	4b13      	ldr	r3, [pc, #76]	@ (8005a6c <ETH_Prepare_Tx_Descriptors+0x248>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a22:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d021      	beq.n	8005a74 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	04db      	lsls	r3, r3, #19
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	4b09      	ldr	r3, [pc, #36]	@ (8005a70 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	69d2      	ldr	r2, [r2, #28]
 8005a50:	431a      	orrs	r2, r3
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	60da      	str	r2, [r3, #12]
 8005a62:	e02e      	b.n	8005ac2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8005a64:	ffff0000 	.word	0xffff0000
 8005a68:	ffffc000 	.word	0xffffc000
 8005a6c:	c000ffff 	.word	0xc000ffff
 8005a70:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	4b7b      	ldr	r3, [pc, #492]	@ (8005c68 <ETH_Prepare_Tx_Descriptors+0x444>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	6852      	ldr	r2, [r2, #4]
 8005a80:	431a      	orrs	r2, r3
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d008      	beq.n	8005ae0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	431a      	orrs	r2, r3
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005af8:	f3bf 8f5f 	dmb	sy
}
 8005afc:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80da 	beq.w	8005ccc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005b2a:	e0cf      	b.n	8005ccc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b36:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d902      	bls.n	8005b4a <ETH_Prepare_Tx_Descriptors+0x326>
 8005b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b46:	3b04      	subs	r3, #4
 8005b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b52:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b6c:	d007      	beq.n	8005b7e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b72:	3304      	adds	r3, #4
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d029      	beq.n	8005bd2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b90:	e019      	b.n	8005bc6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005b92:	f3bf 8f5f 	dmb	sy
}
 8005b96:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d902      	bls.n	8005bb6 <ETH_Prepare_Tx_Descriptors+0x392>
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb2:	3b04      	subs	r3, #4
 8005bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbe:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d3e1      	bcc.n	8005b92 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0bb      	b.n	8005d4a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	4b1f      	ldr	r3, [pc, #124]	@ (8005c6c <ETH_Prepare_Tx_Descriptors+0x448>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bf2:	6852      	ldr	r2, [r2, #4]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d012      	beq.n	8005c28 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	4b16      	ldr	r3, [pc, #88]	@ (8005c70 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c1c:	6852      	ldr	r2, [r2, #4]
 8005c1e:	0412      	lsls	r2, r2, #16
 8005c20:	431a      	orrs	r2, r3
 8005c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c24:	609a      	str	r2, [r3, #8]
 8005c26:	e008      	b.n	8005c3a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	4b0f      	ldr	r3, [pc, #60]	@ (8005c70 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c38:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d018      	beq.n	8005c78 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c74 <ETH_Prepare_Tx_Descriptors+0x450>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	69d2      	ldr	r2, [r2, #28]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c62:	60da      	str	r2, [r3, #12]
 8005c64:	e020      	b.n	8005ca8 <ETH_Prepare_Tx_Descriptors+0x484>
 8005c66:	bf00      	nop
 8005c68:	ffff8000 	.word	0xffff8000
 8005c6c:	ffffc000 	.word	0xffffc000
 8005c70:	c000ffff 	.word	0xc000ffff
 8005c74:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	4b36      	ldr	r3, [pc, #216]	@ (8005d58 <ETH_Prepare_Tx_Descriptors+0x534>)
 8005c7e:	4013      	ands	r3, r2
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	6852      	ldr	r2, [r2, #4]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d008      	beq.n	8005ca8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	3301      	adds	r3, #1
 8005cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005cae:	f3bf 8f5f 	dmb	sy
}
 8005cb2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cca:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f47f af2b 	bne.w	8005b2c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d006      	beq.n	8005cea <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce6:	609a      	str	r2, [r3, #8]
 8005ce8:	e005      	b.n	8005cf6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d16:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d18:	f3ef 8310 	mrs	r3, PRIMASK
 8005d1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d1e:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	2301      	movs	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f383 8810 	msr	PRIMASK, r3
}
 8005d2c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d34:	4413      	add	r3, r2
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f383 8810 	msr	PRIMASK, r3
}
 8005d46:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3744      	adds	r7, #68	@ 0x44
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	ffff8000 	.word	0xffff8000

08005d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b089      	sub	sp, #36	@ 0x24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d6a:	4b86      	ldr	r3, [pc, #536]	@ (8005f84 <HAL_GPIO_Init+0x228>)
 8005d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d6e:	e18c      	b.n	800608a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	2101      	movs	r1, #1
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 817e 	beq.w	8006084 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d005      	beq.n	8005da0 <HAL_GPIO_Init+0x44>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d130      	bne.n	8005e02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	2203      	movs	r2, #3
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	43db      	mvns	r3, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4013      	ands	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	f003 0201 	and.w	r2, r3, #1
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d017      	beq.n	8005e3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	2203      	movs	r2, #3
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4013      	ands	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d123      	bne.n	8005e92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	08da      	lsrs	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3208      	adds	r2, #8
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	220f      	movs	r2, #15
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	08da      	lsrs	r2, r3, #3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3208      	adds	r2, #8
 8005e8c:	69b9      	ldr	r1, [r7, #24]
 8005e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0203 	and.w	r2, r3, #3
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80d8 	beq.w	8006084 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8005f88 <HAL_GPIO_Init+0x22c>)
 8005ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005eda:	4a2b      	ldr	r2, [pc, #172]	@ (8005f88 <HAL_GPIO_Init+0x22c>)
 8005edc:	f043 0302 	orr.w	r3, r3, #2
 8005ee0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ee4:	4b28      	ldr	r3, [pc, #160]	@ (8005f88 <HAL_GPIO_Init+0x22c>)
 8005ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ef2:	4a26      	ldr	r2, [pc, #152]	@ (8005f8c <HAL_GPIO_Init+0x230>)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	089b      	lsrs	r3, r3, #2
 8005ef8:	3302      	adds	r3, #2
 8005efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	220f      	movs	r2, #15
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4013      	ands	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1d      	ldr	r2, [pc, #116]	@ (8005f90 <HAL_GPIO_Init+0x234>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d04a      	beq.n	8005fb4 <HAL_GPIO_Init+0x258>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1c      	ldr	r2, [pc, #112]	@ (8005f94 <HAL_GPIO_Init+0x238>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d02b      	beq.n	8005f7e <HAL_GPIO_Init+0x222>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1b      	ldr	r2, [pc, #108]	@ (8005f98 <HAL_GPIO_Init+0x23c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d025      	beq.n	8005f7a <HAL_GPIO_Init+0x21e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1a      	ldr	r2, [pc, #104]	@ (8005f9c <HAL_GPIO_Init+0x240>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01f      	beq.n	8005f76 <HAL_GPIO_Init+0x21a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a19      	ldr	r2, [pc, #100]	@ (8005fa0 <HAL_GPIO_Init+0x244>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d019      	beq.n	8005f72 <HAL_GPIO_Init+0x216>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a18      	ldr	r2, [pc, #96]	@ (8005fa4 <HAL_GPIO_Init+0x248>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <HAL_GPIO_Init+0x212>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <HAL_GPIO_Init+0x24c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00d      	beq.n	8005f6a <HAL_GPIO_Init+0x20e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <HAL_GPIO_Init+0x250>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <HAL_GPIO_Init+0x20a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <HAL_GPIO_Init+0x254>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <HAL_GPIO_Init+0x206>
 8005f5e:	2309      	movs	r3, #9
 8005f60:	e029      	b.n	8005fb6 <HAL_GPIO_Init+0x25a>
 8005f62:	230a      	movs	r3, #10
 8005f64:	e027      	b.n	8005fb6 <HAL_GPIO_Init+0x25a>
 8005f66:	2307      	movs	r3, #7
 8005f68:	e025      	b.n	8005fb6 <HAL_GPIO_Init+0x25a>
 8005f6a:	2306      	movs	r3, #6
 8005f6c:	e023      	b.n	8005fb6 <HAL_GPIO_Init+0x25a>
 8005f6e:	2305      	movs	r3, #5
 8005f70:	e021      	b.n	8005fb6 <HAL_GPIO_Init+0x25a>
 8005f72:	2304      	movs	r3, #4
 8005f74:	e01f      	b.n	8005fb6 <HAL_GPIO_Init+0x25a>
 8005f76:	2303      	movs	r3, #3
 8005f78:	e01d      	b.n	8005fb6 <HAL_GPIO_Init+0x25a>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e01b      	b.n	8005fb6 <HAL_GPIO_Init+0x25a>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e019      	b.n	8005fb6 <HAL_GPIO_Init+0x25a>
 8005f82:	bf00      	nop
 8005f84:	58000080 	.word	0x58000080
 8005f88:	58024400 	.word	0x58024400
 8005f8c:	58000400 	.word	0x58000400
 8005f90:	58020000 	.word	0x58020000
 8005f94:	58020400 	.word	0x58020400
 8005f98:	58020800 	.word	0x58020800
 8005f9c:	58020c00 	.word	0x58020c00
 8005fa0:	58021000 	.word	0x58021000
 8005fa4:	58021400 	.word	0x58021400
 8005fa8:	58021800 	.word	0x58021800
 8005fac:	58021c00 	.word	0x58021c00
 8005fb0:	58022400 	.word	0x58022400
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	f002 0203 	and.w	r2, r2, #3
 8005fbc:	0092      	lsls	r2, r2, #2
 8005fbe:	4093      	lsls	r3, r2
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fc6:	4938      	ldr	r1, [pc, #224]	@ (80060a8 <HAL_GPIO_Init+0x34c>)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	089b      	lsrs	r3, r3, #2
 8005fcc:	3302      	adds	r3, #2
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ffa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	43db      	mvns	r3, r3
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	4013      	ands	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	43db      	mvns	r3, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4013      	ands	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	3301      	adds	r3, #1
 8006088:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	f47f ae6b 	bne.w	8005d70 <HAL_GPIO_Init+0x14>
  }
}
 800609a:	bf00      	nop
 800609c:	bf00      	nop
 800609e:	3724      	adds	r7, #36	@ 0x24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	58000400 	.word	0x58000400

080060ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	807b      	strh	r3, [r7, #2]
 80060b8:	4613      	mov	r3, r2
 80060ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060bc:	787b      	ldrb	r3, [r7, #1]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060c2:	887a      	ldrh	r2, [r7, #2]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060c8:	e003      	b.n	80060d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060ca:	887b      	ldrh	r3, [r7, #2]
 80060cc:	041a      	lsls	r2, r3, #16
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	619a      	str	r2, [r3, #24]
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	4603      	mov	r3, r0
 80060e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060fc:	88fb      	ldrh	r3, [r7, #6]
 80060fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	4618      	mov	r0, r3
 8006106:	f7fa fd83 	bl	8000c10 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800611c:	4b19      	ldr	r3, [pc, #100]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b04      	cmp	r3, #4
 8006126:	d00a      	beq.n	800613e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006128:	4b16      	ldr	r3, [pc, #88]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d001      	beq.n	800613a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e01f      	b.n	800617a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e01d      	b.n	800617a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800613e:	4b11      	ldr	r3, [pc, #68]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f023 0207 	bic.w	r2, r3, #7
 8006146:	490f      	ldr	r1, [pc, #60]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4313      	orrs	r3, r2
 800614c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800614e:	f7fb ff69 	bl	8002024 <HAL_GetTick>
 8006152:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006154:	e009      	b.n	800616a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006156:	f7fb ff65 	bl	8002024 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006164:	d901      	bls.n	800616a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e007      	b.n	800617a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006176:	d1ee      	bne.n	8006156 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	58024800 	.word	0x58024800

08006188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08c      	sub	sp, #48	@ 0x30
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e3c8      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8087 	beq.w	80062b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061a8:	4b88      	ldr	r3, [pc, #544]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061b2:	4b86      	ldr	r3, [pc, #536]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80061b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ba:	2b10      	cmp	r3, #16
 80061bc:	d007      	beq.n	80061ce <HAL_RCC_OscConfig+0x46>
 80061be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c0:	2b18      	cmp	r3, #24
 80061c2:	d110      	bne.n	80061e6 <HAL_RCC_OscConfig+0x5e>
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d10b      	bne.n	80061e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ce:	4b7f      	ldr	r3, [pc, #508]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d06c      	beq.n	80062b4 <HAL_RCC_OscConfig+0x12c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d168      	bne.n	80062b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e3a2      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ee:	d106      	bne.n	80061fe <HAL_RCC_OscConfig+0x76>
 80061f0:	4b76      	ldr	r3, [pc, #472]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a75      	ldr	r2, [pc, #468]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80061f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	e02e      	b.n	800625c <HAL_RCC_OscConfig+0xd4>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10c      	bne.n	8006220 <HAL_RCC_OscConfig+0x98>
 8006206:	4b71      	ldr	r3, [pc, #452]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a70      	ldr	r2, [pc, #448]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 800620c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	4b6e      	ldr	r3, [pc, #440]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a6d      	ldr	r2, [pc, #436]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006218:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	e01d      	b.n	800625c <HAL_RCC_OscConfig+0xd4>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006228:	d10c      	bne.n	8006244 <HAL_RCC_OscConfig+0xbc>
 800622a:	4b68      	ldr	r3, [pc, #416]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a67      	ldr	r2, [pc, #412]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	4b65      	ldr	r3, [pc, #404]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a64      	ldr	r2, [pc, #400]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e00b      	b.n	800625c <HAL_RCC_OscConfig+0xd4>
 8006244:	4b61      	ldr	r3, [pc, #388]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a60      	ldr	r2, [pc, #384]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 800624a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	4b5e      	ldr	r3, [pc, #376]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a5d      	ldr	r2, [pc, #372]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800625a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d013      	beq.n	800628c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fb fede 	bl	8002024 <HAL_GetTick>
 8006268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800626c:	f7fb feda 	bl	8002024 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	@ 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e356      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800627e:	4b53      	ldr	r3, [pc, #332]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0xe4>
 800628a:	e014      	b.n	80062b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fb feca 	bl	8002024 <HAL_GetTick>
 8006290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006294:	f7fb fec6 	bl	8002024 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b64      	cmp	r3, #100	@ 0x64
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e342      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062a6:	4b49      	ldr	r3, [pc, #292]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0x10c>
 80062b2:	e000      	b.n	80062b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 808c 	beq.w	80063dc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062c4:	4b41      	ldr	r3, [pc, #260]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062ce:	4b3f      	ldr	r3, [pc, #252]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80062d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <HAL_RCC_OscConfig+0x162>
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2b18      	cmp	r3, #24
 80062de:	d137      	bne.n	8006350 <HAL_RCC_OscConfig+0x1c8>
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d132      	bne.n	8006350 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ea:	4b38      	ldr	r3, [pc, #224]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_RCC_OscConfig+0x17a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e314      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006302:	4b32      	ldr	r3, [pc, #200]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f023 0219 	bic.w	r2, r3, #25
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	492f      	ldr	r1, [pc, #188]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006310:	4313      	orrs	r3, r2
 8006312:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fb fe86 	bl	8002024 <HAL_GetTick>
 8006318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800631c:	f7fb fe82 	bl	8002024 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e2fe      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800632e:	4b27      	ldr	r3, [pc, #156]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0f0      	beq.n	800631c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633a:	4b24      	ldr	r3, [pc, #144]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	061b      	lsls	r3, r3, #24
 8006348:	4920      	ldr	r1, [pc, #128]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 800634a:	4313      	orrs	r3, r2
 800634c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800634e:	e045      	b.n	80063dc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d026      	beq.n	80063a6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006358:	4b1c      	ldr	r3, [pc, #112]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f023 0219 	bic.w	r2, r3, #25
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	4919      	ldr	r1, [pc, #100]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006366:	4313      	orrs	r3, r2
 8006368:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636a:	f7fb fe5b 	bl	8002024 <HAL_GetTick>
 800636e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006372:	f7fb fe57 	bl	8002024 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e2d3      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006384:	4b11      	ldr	r3, [pc, #68]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006390:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	061b      	lsls	r3, r3, #24
 800639e:	490b      	ldr	r1, [pc, #44]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	604b      	str	r3, [r1, #4]
 80063a4:	e01a      	b.n	80063dc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a6:	4b09      	ldr	r3, [pc, #36]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a08      	ldr	r2, [pc, #32]	@ (80063cc <HAL_RCC_OscConfig+0x244>)
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b2:	f7fb fe37 	bl	8002024 <HAL_GetTick>
 80063b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063b8:	e00a      	b.n	80063d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ba:	f7fb fe33 	bl	8002024 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d903      	bls.n	80063d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e2af      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
 80063cc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063d0:	4b96      	ldr	r3, [pc, #600]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1ee      	bne.n	80063ba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d06a      	beq.n	80064be <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063e8:	4b90      	ldr	r3, [pc, #576]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063f2:	4b8e      	ldr	r3, [pc, #568]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b08      	cmp	r3, #8
 80063fc:	d007      	beq.n	800640e <HAL_RCC_OscConfig+0x286>
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b18      	cmp	r3, #24
 8006402:	d11b      	bne.n	800643c <HAL_RCC_OscConfig+0x2b4>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d116      	bne.n	800643c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800640e:	4b87      	ldr	r3, [pc, #540]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_RCC_OscConfig+0x29e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	2b80      	cmp	r3, #128	@ 0x80
 8006420:	d001      	beq.n	8006426 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e282      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006426:	4b81      	ldr	r3, [pc, #516]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	061b      	lsls	r3, r3, #24
 8006434:	497d      	ldr	r1, [pc, #500]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006436:	4313      	orrs	r3, r2
 8006438:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800643a:	e040      	b.n	80064be <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d023      	beq.n	800648c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006444:	4b79      	ldr	r3, [pc, #484]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a78      	ldr	r2, [pc, #480]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 800644a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fb fde8 	bl	8002024 <HAL_GetTick>
 8006454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006458:	f7fb fde4 	bl	8002024 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e260      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800646a:	4b70      	ldr	r3, [pc, #448]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0f0      	beq.n	8006458 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006476:	4b6d      	ldr	r3, [pc, #436]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	061b      	lsls	r3, r3, #24
 8006484:	4969      	ldr	r1, [pc, #420]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006486:	4313      	orrs	r3, r2
 8006488:	60cb      	str	r3, [r1, #12]
 800648a:	e018      	b.n	80064be <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800648c:	4b67      	ldr	r3, [pc, #412]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a66      	ldr	r2, [pc, #408]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fb fdc4 	bl	8002024 <HAL_GetTick>
 800649c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064a0:	f7fb fdc0 	bl	8002024 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e23c      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064b2:	4b5e      	ldr	r3, [pc, #376]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d036      	beq.n	8006538 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d019      	beq.n	8006506 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064d2:	4b56      	ldr	r3, [pc, #344]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 80064d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d6:	4a55      	ldr	r2, [pc, #340]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 80064d8:	f043 0301 	orr.w	r3, r3, #1
 80064dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064de:	f7fb fda1 	bl	8002024 <HAL_GetTick>
 80064e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fb fd9d 	bl	8002024 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e219      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064f8:	4b4c      	ldr	r3, [pc, #304]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <HAL_RCC_OscConfig+0x35e>
 8006504:	e018      	b.n	8006538 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006506:	4b49      	ldr	r3, [pc, #292]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800650a:	4a48      	ldr	r2, [pc, #288]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006512:	f7fb fd87 	bl	8002024 <HAL_GetTick>
 8006516:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800651a:	f7fb fd83 	bl	8002024 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e1ff      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800652c:	4b3f      	ldr	r3, [pc, #252]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 800652e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1f0      	bne.n	800651a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d036      	beq.n	80065b2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d019      	beq.n	8006580 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800654c:	4b37      	ldr	r3, [pc, #220]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a36      	ldr	r2, [pc, #216]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006552:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006556:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006558:	f7fb fd64 	bl	8002024 <HAL_GetTick>
 800655c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006560:	f7fb fd60 	bl	8002024 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e1dc      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006572:	4b2e      	ldr	r3, [pc, #184]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0f0      	beq.n	8006560 <HAL_RCC_OscConfig+0x3d8>
 800657e:	e018      	b.n	80065b2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006580:	4b2a      	ldr	r3, [pc, #168]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a29      	ldr	r2, [pc, #164]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800658a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800658c:	f7fb fd4a 	bl	8002024 <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006594:	f7fb fd46 	bl	8002024 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e1c2      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065a6:	4b21      	ldr	r3, [pc, #132]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 8086 	beq.w	80066cc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006630 <HAL_RCC_OscConfig+0x4a8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006630 <HAL_RCC_OscConfig+0x4a8>)
 80065c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065cc:	f7fb fd2a 	bl	8002024 <HAL_GetTick>
 80065d0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d4:	f7fb fd26 	bl	8002024 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b64      	cmp	r3, #100	@ 0x64
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e1a2      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065e6:	4b12      	ldr	r3, [pc, #72]	@ (8006630 <HAL_RCC_OscConfig+0x4a8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d106      	bne.n	8006608 <HAL_RCC_OscConfig+0x480>
 80065fa:	4b0c      	ldr	r3, [pc, #48]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 80065fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065fe:	4a0b      	ldr	r2, [pc, #44]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	6713      	str	r3, [r2, #112]	@ 0x70
 8006606:	e032      	b.n	800666e <HAL_RCC_OscConfig+0x4e6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d111      	bne.n	8006634 <HAL_RCC_OscConfig+0x4ac>
 8006610:	4b06      	ldr	r3, [pc, #24]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006614:	4a05      	ldr	r2, [pc, #20]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006616:	f023 0301 	bic.w	r3, r3, #1
 800661a:	6713      	str	r3, [r2, #112]	@ 0x70
 800661c:	4b03      	ldr	r3, [pc, #12]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 800661e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006620:	4a02      	ldr	r2, [pc, #8]	@ (800662c <HAL_RCC_OscConfig+0x4a4>)
 8006622:	f023 0304 	bic.w	r3, r3, #4
 8006626:	6713      	str	r3, [r2, #112]	@ 0x70
 8006628:	e021      	b.n	800666e <HAL_RCC_OscConfig+0x4e6>
 800662a:	bf00      	nop
 800662c:	58024400 	.word	0x58024400
 8006630:	58024800 	.word	0x58024800
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b05      	cmp	r3, #5
 800663a:	d10c      	bne.n	8006656 <HAL_RCC_OscConfig+0x4ce>
 800663c:	4b83      	ldr	r3, [pc, #524]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800663e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006640:	4a82      	ldr	r2, [pc, #520]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006642:	f043 0304 	orr.w	r3, r3, #4
 8006646:	6713      	str	r3, [r2, #112]	@ 0x70
 8006648:	4b80      	ldr	r3, [pc, #512]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664c:	4a7f      	ldr	r2, [pc, #508]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800664e:	f043 0301 	orr.w	r3, r3, #1
 8006652:	6713      	str	r3, [r2, #112]	@ 0x70
 8006654:	e00b      	b.n	800666e <HAL_RCC_OscConfig+0x4e6>
 8006656:	4b7d      	ldr	r3, [pc, #500]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665a:	4a7c      	ldr	r2, [pc, #496]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	6713      	str	r3, [r2, #112]	@ 0x70
 8006662:	4b7a      	ldr	r3, [pc, #488]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006666:	4a79      	ldr	r2, [pc, #484]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006668:	f023 0304 	bic.w	r3, r3, #4
 800666c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d015      	beq.n	80066a2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006676:	f7fb fcd5 	bl	8002024 <HAL_GetTick>
 800667a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800667c:	e00a      	b.n	8006694 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800667e:	f7fb fcd1 	bl	8002024 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800668c:	4293      	cmp	r3, r2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e14b      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006694:	4b6d      	ldr	r3, [pc, #436]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0ee      	beq.n	800667e <HAL_RCC_OscConfig+0x4f6>
 80066a0:	e014      	b.n	80066cc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a2:	f7fb fcbf 	bl	8002024 <HAL_GetTick>
 80066a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066a8:	e00a      	b.n	80066c0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066aa:	f7fb fcbb 	bl	8002024 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e135      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066c0:	4b62      	ldr	r3, [pc, #392]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80066c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1ee      	bne.n	80066aa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 812a 	beq.w	800692a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066d6:	4b5d      	ldr	r3, [pc, #372]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066de:	2b18      	cmp	r3, #24
 80066e0:	f000 80ba 	beq.w	8006858 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	f040 8095 	bne.w	8006818 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ee:	4b57      	ldr	r3, [pc, #348]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a56      	ldr	r2, [pc, #344]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80066f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fb fc93 	bl	8002024 <HAL_GetTick>
 80066fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006702:	f7fb fc8f 	bl	8002024 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e10b      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006714:	4b4d      	ldr	r3, [pc, #308]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006720:	4b4a      	ldr	r3, [pc, #296]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006722:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006724:	4b4a      	ldr	r3, [pc, #296]	@ (8006850 <HAL_RCC_OscConfig+0x6c8>)
 8006726:	4013      	ands	r3, r2
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006730:	0112      	lsls	r2, r2, #4
 8006732:	430a      	orrs	r2, r1
 8006734:	4945      	ldr	r1, [pc, #276]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006736:	4313      	orrs	r3, r2
 8006738:	628b      	str	r3, [r1, #40]	@ 0x28
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673e:	3b01      	subs	r3, #1
 8006740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006748:	3b01      	subs	r3, #1
 800674a:	025b      	lsls	r3, r3, #9
 800674c:	b29b      	uxth	r3, r3
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006754:	3b01      	subs	r3, #1
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006762:	3b01      	subs	r3, #1
 8006764:	061b      	lsls	r3, r3, #24
 8006766:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800676a:	4938      	ldr	r1, [pc, #224]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800676c:	4313      	orrs	r3, r2
 800676e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006770:	4b36      	ldr	r3, [pc, #216]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	4a35      	ldr	r2, [pc, #212]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800677c:	4b33      	ldr	r3, [pc, #204]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800677e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006780:	4b34      	ldr	r3, [pc, #208]	@ (8006854 <HAL_RCC_OscConfig+0x6cc>)
 8006782:	4013      	ands	r3, r2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006788:	00d2      	lsls	r2, r2, #3
 800678a:	4930      	ldr	r1, [pc, #192]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800678c:	4313      	orrs	r3, r2
 800678e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006790:	4b2e      	ldr	r3, [pc, #184]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	f023 020c 	bic.w	r2, r3, #12
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679c:	492b      	ldr	r1, [pc, #172]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067a2:	4b2a      	ldr	r3, [pc, #168]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a6:	f023 0202 	bic.w	r2, r3, #2
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ae:	4927      	ldr	r1, [pc, #156]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067b4:	4b25      	ldr	r3, [pc, #148]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	4a24      	ldr	r2, [pc, #144]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c0:	4b22      	ldr	r3, [pc, #136]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	4a21      	ldr	r2, [pc, #132]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067cc:	4b1f      	ldr	r3, [pc, #124]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	4a1e      	ldr	r2, [pc, #120]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80067d8:	4b1c      	ldr	r3, [pc, #112]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	4a1b      	ldr	r2, [pc, #108]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067de:	f043 0301 	orr.w	r3, r3, #1
 80067e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e4:	4b19      	ldr	r3, [pc, #100]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a18      	ldr	r2, [pc, #96]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 80067ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f0:	f7fb fc18 	bl	8002024 <HAL_GetTick>
 80067f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f8:	f7fb fc14 	bl	8002024 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e090      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800680a:	4b10      	ldr	r3, [pc, #64]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f0      	beq.n	80067f8 <HAL_RCC_OscConfig+0x670>
 8006816:	e088      	b.n	800692a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006818:	4b0c      	ldr	r3, [pc, #48]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a0b      	ldr	r2, [pc, #44]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 800681e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fb fbfe 	bl	8002024 <HAL_GetTick>
 8006828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800682c:	f7fb fbfa 	bl	8002024 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e076      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800683e:	4b03      	ldr	r3, [pc, #12]	@ (800684c <HAL_RCC_OscConfig+0x6c4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x6a4>
 800684a:	e06e      	b.n	800692a <HAL_RCC_OscConfig+0x7a2>
 800684c:	58024400 	.word	0x58024400
 8006850:	fffffc0c 	.word	0xfffffc0c
 8006854:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006858:	4b36      	ldr	r3, [pc, #216]	@ (8006934 <HAL_RCC_OscConfig+0x7ac>)
 800685a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800685e:	4b35      	ldr	r3, [pc, #212]	@ (8006934 <HAL_RCC_OscConfig+0x7ac>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006862:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	2b01      	cmp	r3, #1
 800686a:	d031      	beq.n	80068d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f003 0203 	and.w	r2, r3, #3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d12a      	bne.n	80068d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d122      	bne.n	80068d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006894:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006896:	429a      	cmp	r2, r3
 8006898:	d11a      	bne.n	80068d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	0a5b      	lsrs	r3, r3, #9
 800689e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d111      	bne.n	80068d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	0c1b      	lsrs	r3, r3, #16
 80068b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d108      	bne.n	80068d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	0e1b      	lsrs	r3, r3, #24
 80068c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d001      	beq.n	80068d4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e02b      	b.n	800692c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80068d4:	4b17      	ldr	r3, [pc, #92]	@ (8006934 <HAL_RCC_OscConfig+0x7ac>)
 80068d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d8:	08db      	lsrs	r3, r3, #3
 80068da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d01f      	beq.n	800692a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80068ea:	4b12      	ldr	r3, [pc, #72]	@ (8006934 <HAL_RCC_OscConfig+0x7ac>)
 80068ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ee:	4a11      	ldr	r2, [pc, #68]	@ (8006934 <HAL_RCC_OscConfig+0x7ac>)
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068f6:	f7fb fb95 	bl	8002024 <HAL_GetTick>
 80068fa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80068fc:	bf00      	nop
 80068fe:	f7fb fb91 	bl	8002024 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	4293      	cmp	r3, r2
 8006908:	d0f9      	beq.n	80068fe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800690a:	4b0a      	ldr	r3, [pc, #40]	@ (8006934 <HAL_RCC_OscConfig+0x7ac>)
 800690c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800690e:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <HAL_RCC_OscConfig+0x7b0>)
 8006910:	4013      	ands	r3, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006916:	00d2      	lsls	r2, r2, #3
 8006918:	4906      	ldr	r1, [pc, #24]	@ (8006934 <HAL_RCC_OscConfig+0x7ac>)
 800691a:	4313      	orrs	r3, r2
 800691c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800691e:	4b05      	ldr	r3, [pc, #20]	@ (8006934 <HAL_RCC_OscConfig+0x7ac>)
 8006920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006922:	4a04      	ldr	r2, [pc, #16]	@ (8006934 <HAL_RCC_OscConfig+0x7ac>)
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3730      	adds	r7, #48	@ 0x30
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	58024400 	.word	0x58024400
 8006938:	ffff0007 	.word	0xffff0007

0800693c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e19c      	b.n	8006c8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006950:	4b8a      	ldr	r3, [pc, #552]	@ (8006b7c <HAL_RCC_ClockConfig+0x240>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d910      	bls.n	8006980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695e:	4b87      	ldr	r3, [pc, #540]	@ (8006b7c <HAL_RCC_ClockConfig+0x240>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f023 020f 	bic.w	r2, r3, #15
 8006966:	4985      	ldr	r1, [pc, #532]	@ (8006b7c <HAL_RCC_ClockConfig+0x240>)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	4313      	orrs	r3, r2
 800696c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800696e:	4b83      	ldr	r3, [pc, #524]	@ (8006b7c <HAL_RCC_ClockConfig+0x240>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d001      	beq.n	8006980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e184      	b.n	8006c8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d010      	beq.n	80069ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	4b7b      	ldr	r3, [pc, #492]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006998:	429a      	cmp	r2, r3
 800699a:	d908      	bls.n	80069ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800699c:	4b78      	ldr	r3, [pc, #480]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	4975      	ldr	r1, [pc, #468]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d010      	beq.n	80069dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695a      	ldr	r2, [r3, #20]
 80069be:	4b70      	ldr	r3, [pc, #448]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d908      	bls.n	80069dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	496a      	ldr	r1, [pc, #424]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0310 	and.w	r3, r3, #16
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d010      	beq.n	8006a0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	4b64      	ldr	r3, [pc, #400]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d908      	bls.n	8006a0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069f8:	4b61      	ldr	r3, [pc, #388]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	495e      	ldr	r1, [pc, #376]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d010      	beq.n	8006a38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69da      	ldr	r2, [r3, #28]
 8006a1a:	4b59      	ldr	r3, [pc, #356]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d908      	bls.n	8006a38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a26:	4b56      	ldr	r3, [pc, #344]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	4953      	ldr	r1, [pc, #332]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d010      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	4b4d      	ldr	r3, [pc, #308]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d908      	bls.n	8006a66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a54:	4b4a      	ldr	r3, [pc, #296]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f023 020f 	bic.w	r2, r3, #15
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	4947      	ldr	r1, [pc, #284]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d055      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a72:	4b43      	ldr	r3, [pc, #268]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	4940      	ldr	r1, [pc, #256]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d107      	bne.n	8006a9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d121      	bne.n	8006adc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e0f6      	b.n	8006c8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d107      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aa4:	4b36      	ldr	r3, [pc, #216]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d115      	bne.n	8006adc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e0ea      	b.n	8006c8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d107      	bne.n	8006acc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006abc:	4b30      	ldr	r3, [pc, #192]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0de      	b.n	8006c8a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006acc:	4b2c      	ldr	r3, [pc, #176]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0d6      	b.n	8006c8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006adc:	4b28      	ldr	r3, [pc, #160]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f023 0207 	bic.w	r2, r3, #7
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4925      	ldr	r1, [pc, #148]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aee:	f7fb fa99 	bl	8002024 <HAL_GetTick>
 8006af2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af4:	e00a      	b.n	8006b0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af6:	f7fb fa95 	bl	8002024 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e0be      	b.n	8006c8a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d1eb      	bne.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d010      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	4b14      	ldr	r3, [pc, #80]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d208      	bcs.n	8006b4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b3a:	4b11      	ldr	r3, [pc, #68]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f023 020f 	bic.w	r2, r3, #15
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	490e      	ldr	r1, [pc, #56]	@ (8006b80 <HAL_RCC_ClockConfig+0x244>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b7c <HAL_RCC_ClockConfig+0x240>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d214      	bcs.n	8006b84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b5a:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <HAL_RCC_ClockConfig+0x240>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f023 020f 	bic.w	r2, r3, #15
 8006b62:	4906      	ldr	r1, [pc, #24]	@ (8006b7c <HAL_RCC_ClockConfig+0x240>)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6a:	4b04      	ldr	r3, [pc, #16]	@ (8006b7c <HAL_RCC_ClockConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d005      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e086      	b.n	8006c8a <HAL_RCC_ClockConfig+0x34e>
 8006b7c:	52002000 	.word	0x52002000
 8006b80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d010      	beq.n	8006bb2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	4b3f      	ldr	r3, [pc, #252]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d208      	bcs.n	8006bb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ba0:	4b3c      	ldr	r3, [pc, #240]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	4939      	ldr	r1, [pc, #228]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d010      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695a      	ldr	r2, [r3, #20]
 8006bc2:	4b34      	ldr	r3, [pc, #208]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d208      	bcs.n	8006be0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bce:	4b31      	ldr	r3, [pc, #196]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	492e      	ldr	r1, [pc, #184]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d010      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	4b28      	ldr	r3, [pc, #160]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d208      	bcs.n	8006c0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bfc:	4b25      	ldr	r3, [pc, #148]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	4922      	ldr	r1, [pc, #136]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d010      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69da      	ldr	r2, [r3, #28]
 8006c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d208      	bcs.n	8006c3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	4917      	ldr	r1, [pc, #92]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c3c:	f000 f834 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8006c40:	4602      	mov	r2, r0
 8006c42:	4b14      	ldr	r3, [pc, #80]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	0a1b      	lsrs	r3, r3, #8
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	4912      	ldr	r1, [pc, #72]	@ (8006c98 <HAL_RCC_ClockConfig+0x35c>)
 8006c4e:	5ccb      	ldrb	r3, [r1, r3]
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	fa22 f303 	lsr.w	r3, r2, r3
 8006c58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c94 <HAL_RCC_ClockConfig+0x358>)
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	4a0d      	ldr	r2, [pc, #52]	@ (8006c98 <HAL_RCC_ClockConfig+0x35c>)
 8006c64:	5cd3      	ldrb	r3, [r2, r3]
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c70:	4a0a      	ldr	r2, [pc, #40]	@ (8006c9c <HAL_RCC_ClockConfig+0x360>)
 8006c72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c74:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca0 <HAL_RCC_ClockConfig+0x364>)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca4 <HAL_RCC_ClockConfig+0x368>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fa fe14 	bl	80018ac <HAL_InitTick>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400
 8006c98:	0801edac 	.word	0x0801edac
 8006c9c:	240049c0 	.word	0x240049c0
 8006ca0:	240049bc 	.word	0x240049bc
 8006ca4:	240049c4 	.word	0x240049c4

08006ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b089      	sub	sp, #36	@ 0x24
 8006cac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cae:	4bb3      	ldr	r3, [pc, #716]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cb6:	2b18      	cmp	r3, #24
 8006cb8:	f200 8155 	bhi.w	8006f66 <HAL_RCC_GetSysClockFreq+0x2be>
 8006cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006d29 	.word	0x08006d29
 8006cc8:	08006f67 	.word	0x08006f67
 8006ccc:	08006f67 	.word	0x08006f67
 8006cd0:	08006f67 	.word	0x08006f67
 8006cd4:	08006f67 	.word	0x08006f67
 8006cd8:	08006f67 	.word	0x08006f67
 8006cdc:	08006f67 	.word	0x08006f67
 8006ce0:	08006f67 	.word	0x08006f67
 8006ce4:	08006d4f 	.word	0x08006d4f
 8006ce8:	08006f67 	.word	0x08006f67
 8006cec:	08006f67 	.word	0x08006f67
 8006cf0:	08006f67 	.word	0x08006f67
 8006cf4:	08006f67 	.word	0x08006f67
 8006cf8:	08006f67 	.word	0x08006f67
 8006cfc:	08006f67 	.word	0x08006f67
 8006d00:	08006f67 	.word	0x08006f67
 8006d04:	08006d55 	.word	0x08006d55
 8006d08:	08006f67 	.word	0x08006f67
 8006d0c:	08006f67 	.word	0x08006f67
 8006d10:	08006f67 	.word	0x08006f67
 8006d14:	08006f67 	.word	0x08006f67
 8006d18:	08006f67 	.word	0x08006f67
 8006d1c:	08006f67 	.word	0x08006f67
 8006d20:	08006f67 	.word	0x08006f67
 8006d24:	08006d5b 	.word	0x08006d5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d28:	4b94      	ldr	r3, [pc, #592]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d34:	4b91      	ldr	r3, [pc, #580]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	08db      	lsrs	r3, r3, #3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	4a90      	ldr	r2, [pc, #576]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
 8006d44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d46:	e111      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d48:	4b8d      	ldr	r3, [pc, #564]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d4a:	61bb      	str	r3, [r7, #24]
      break;
 8006d4c:	e10e      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d50:	61bb      	str	r3, [r7, #24]
      break;
 8006d52:	e10b      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d54:	4b8c      	ldr	r3, [pc, #560]	@ (8006f88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d56:	61bb      	str	r3, [r7, #24]
      break;
 8006d58:	e108      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d5a:	4b88      	ldr	r3, [pc, #544]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006d64:	4b85      	ldr	r3, [pc, #532]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d70:	4b82      	ldr	r3, [pc, #520]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d7a:	4b80      	ldr	r3, [pc, #512]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d7e:	08db      	lsrs	r3, r3, #3
 8006d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80e1 	beq.w	8006f60 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	f000 8083 	beq.w	8006eac <HAL_RCC_GetSysClockFreq+0x204>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	f200 80a1 	bhi.w	8006ef0 <HAL_RCC_GetSysClockFreq+0x248>
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_RCC_GetSysClockFreq+0x114>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d056      	beq.n	8006e68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dba:	e099      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d02d      	beq.n	8006e24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	08db      	lsrs	r3, r3, #3
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	4a6b      	ldr	r2, [pc, #428]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df2:	4b62      	ldr	r3, [pc, #392]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e06:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e22:	e087      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006f90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e36:	4b51      	ldr	r3, [pc, #324]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e4a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e66:	e065      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e72:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006f94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7a:	4b40      	ldr	r3, [pc, #256]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e8e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eaa:	e043      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006f98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ed2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eee:	e021      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006f94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f02:	4b1e      	ldr	r3, [pc, #120]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f16:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f34:	4b11      	ldr	r3, [pc, #68]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f38:	0a5b      	lsrs	r3, r3, #9
 8006f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f3e:	3301      	adds	r3, #1
 8006f40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f58:	ee17 3a90 	vmov	r3, s15
 8006f5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006f5e:	e005      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61bb      	str	r3, [r7, #24]
      break;
 8006f64:	e002      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006f66:	4b07      	ldr	r3, [pc, #28]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f68:	61bb      	str	r3, [r7, #24]
      break;
 8006f6a:	bf00      	nop
  }

  return sysclockfreq;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3724      	adds	r7, #36	@ 0x24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	58024400 	.word	0x58024400
 8006f80:	03d09000 	.word	0x03d09000
 8006f84:	003d0900 	.word	0x003d0900
 8006f88:	007a1200 	.word	0x007a1200
 8006f8c:	46000000 	.word	0x46000000
 8006f90:	4c742400 	.word	0x4c742400
 8006f94:	4a742400 	.word	0x4a742400
 8006f98:	4af42400 	.word	0x4af42400

08006f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fa2:	f7ff fe81 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	4b10      	ldr	r3, [pc, #64]	@ (8006fec <HAL_RCC_GetHCLKFreq+0x50>)
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	0a1b      	lsrs	r3, r3, #8
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	490f      	ldr	r1, [pc, #60]	@ (8006ff0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fb4:	5ccb      	ldrb	r3, [r1, r3]
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006fec <HAL_RCC_GetHCLKFreq+0x50>)
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	4a09      	ldr	r2, [pc, #36]	@ (8006ff0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fca:	5cd3      	ldrb	r3, [r2, r3]
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd6:	4a07      	ldr	r2, [pc, #28]	@ (8006ff4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fda:	4a07      	ldr	r2, [pc, #28]	@ (8006ff8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006fe0:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	0801edac 	.word	0x0801edac
 8006ff4:	240049c0 	.word	0x240049c0
 8006ff8:	240049bc 	.word	0x240049bc

08006ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007000:	f7ff ffcc 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8007004:	4602      	mov	r2, r0
 8007006:	4b06      	ldr	r3, [pc, #24]	@ (8007020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	091b      	lsrs	r3, r3, #4
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	4904      	ldr	r1, [pc, #16]	@ (8007024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007012:	5ccb      	ldrb	r3, [r1, r3]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	58024400 	.word	0x58024400
 8007024:	0801edac 	.word	0x0801edac

08007028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	223f      	movs	r2, #63	@ 0x3f
 8007036:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007038:	4b1a      	ldr	r3, [pc, #104]	@ (80070a4 <HAL_RCC_GetClockConfig+0x7c>)
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0207 	and.w	r2, r3, #7
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007044:	4b17      	ldr	r3, [pc, #92]	@ (80070a4 <HAL_RCC_GetClockConfig+0x7c>)
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007050:	4b14      	ldr	r3, [pc, #80]	@ (80070a4 <HAL_RCC_GetClockConfig+0x7c>)
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	f003 020f 	and.w	r2, r3, #15
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800705c:	4b11      	ldr	r3, [pc, #68]	@ (80070a4 <HAL_RCC_GetClockConfig+0x7c>)
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007068:	4b0e      	ldr	r3, [pc, #56]	@ (80070a4 <HAL_RCC_GetClockConfig+0x7c>)
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007074:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <HAL_RCC_GetClockConfig+0x7c>)
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007080:	4b08      	ldr	r3, [pc, #32]	@ (80070a4 <HAL_RCC_GetClockConfig+0x7c>)
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800708c:	4b06      	ldr	r3, [pc, #24]	@ (80070a8 <HAL_RCC_GetClockConfig+0x80>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 020f 	and.w	r2, r3, #15
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	601a      	str	r2, [r3, #0]
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	58024400 	.word	0x58024400
 80070a8:	52002000 	.word	0x52002000

080070ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b0:	b0c6      	sub	sp, #280	@ 0x118
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070b8:	2300      	movs	r3, #0
 80070ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070be:	2300      	movs	r3, #0
 80070c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80070d0:	2500      	movs	r5, #0
 80070d2:	ea54 0305 	orrs.w	r3, r4, r5
 80070d6:	d049      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070e2:	d02f      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80070e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070e8:	d828      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070ee:	d01a      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070f4:	d822      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070fe:	d007      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007100:	e01c      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007102:	4bab      	ldr	r3, [pc, #684]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007106:	4aaa      	ldr	r2, [pc, #680]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800710c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800710e:	e01a      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	3308      	adds	r3, #8
 8007116:	2102      	movs	r1, #2
 8007118:	4618      	mov	r0, r3
 800711a:	f001 f967 	bl	80083ec <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007124:	e00f      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	3328      	adds	r3, #40	@ 0x28
 800712c:	2102      	movs	r1, #2
 800712e:	4618      	mov	r0, r3
 8007130:	f001 fa0e 	bl	8008550 <RCCEx_PLL3_Config>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800713a:	e004      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007142:	e000      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800714e:	4b98      	ldr	r3, [pc, #608]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007152:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800715c:	4a94      	ldr	r2, [pc, #592]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800715e:	430b      	orrs	r3, r1
 8007160:	6513      	str	r3, [r2, #80]	@ 0x50
 8007162:	e003      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007168:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007178:	f04f 0900 	mov.w	r9, #0
 800717c:	ea58 0309 	orrs.w	r3, r8, r9
 8007180:	d047      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007188:	2b04      	cmp	r3, #4
 800718a:	d82a      	bhi.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800718c:	a201      	add	r2, pc, #4	@ (adr r2, 8007194 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	080071a9 	.word	0x080071a9
 8007198:	080071b7 	.word	0x080071b7
 800719c:	080071cd 	.word	0x080071cd
 80071a0:	080071eb 	.word	0x080071eb
 80071a4:	080071eb 	.word	0x080071eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a8:	4b81      	ldr	r3, [pc, #516]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	4a80      	ldr	r2, [pc, #512]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071b4:	e01a      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ba:	3308      	adds	r3, #8
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 f914 	bl	80083ec <RCCEx_PLL2_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ca:	e00f      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d0:	3328      	adds	r3, #40	@ 0x28
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 f9bb 	bl	8008550 <RCCEx_PLL3_Config>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071e0:	e004      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80071ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071f4:	4b6e      	ldr	r3, [pc, #440]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f8:	f023 0107 	bic.w	r1, r3, #7
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007202:	4a6b      	ldr	r2, [pc, #428]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007204:	430b      	orrs	r3, r1
 8007206:	6513      	str	r3, [r2, #80]	@ 0x50
 8007208:	e003      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800720e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800721e:	f04f 0b00 	mov.w	fp, #0
 8007222:	ea5a 030b 	orrs.w	r3, sl, fp
 8007226:	d05b      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007230:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007234:	d03b      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007236:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800723a:	d834      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800723c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007240:	d037      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007242:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007246:	d82e      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007248:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800724c:	d033      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800724e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007252:	d828      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007258:	d01a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800725a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800725e:	d822      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007264:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007268:	d007      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800726a:	e01c      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800726c:	4b50      	ldr	r3, [pc, #320]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800726e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007270:	4a4f      	ldr	r2, [pc, #316]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007278:	e01e      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	3308      	adds	r3, #8
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f001 f8b2 	bl	80083ec <RCCEx_PLL2_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800728e:	e013      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007294:	3328      	adds	r3, #40	@ 0x28
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f001 f959 	bl	8008550 <RCCEx_PLL3_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072a4:	e008      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072ac:	e004      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80072ae:	bf00      	nop
 80072b0:	e002      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80072b2:	bf00      	nop
 80072b4:	e000      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80072b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10b      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80072c0:	4b3b      	ldr	r3, [pc, #236]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072d0:	4a37      	ldr	r2, [pc, #220]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072d2:	430b      	orrs	r3, r1
 80072d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80072d6:	e003      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80072e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80072ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072f0:	2300      	movs	r3, #0
 80072f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80072fa:	460b      	mov	r3, r1
 80072fc:	4313      	orrs	r3, r2
 80072fe:	d05d      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007304:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007308:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800730c:	d03b      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800730e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007312:	d834      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007318:	d037      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800731a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800731e:	d82e      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007320:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007324:	d033      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007326:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800732a:	d828      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800732c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007330:	d01a      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007332:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007336:	d822      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800733c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007340:	d007      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007342:	e01c      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007344:	4b1a      	ldr	r3, [pc, #104]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007348:	4a19      	ldr	r2, [pc, #100]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800734a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800734e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007350:	e01e      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007356:	3308      	adds	r3, #8
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f001 f846 	bl	80083ec <RCCEx_PLL2_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007366:	e013      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736c:	3328      	adds	r3, #40	@ 0x28
 800736e:	2100      	movs	r1, #0
 8007370:	4618      	mov	r0, r3
 8007372:	f001 f8ed 	bl	8008550 <RCCEx_PLL3_Config>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800737c:	e008      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007384:	e004      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007386:	bf00      	nop
 8007388:	e002      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800738a:	bf00      	nop
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800738e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10d      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007398:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800739a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073a8:	4a01      	ldr	r2, [pc, #4]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073aa:	430b      	orrs	r3, r1
 80073ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80073ae:	e005      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80073b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80073bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80073c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073cc:	2300      	movs	r3, #0
 80073ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4313      	orrs	r3, r2
 80073da:	d03a      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80073dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e2:	2b30      	cmp	r3, #48	@ 0x30
 80073e4:	d01f      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80073e6:	2b30      	cmp	r3, #48	@ 0x30
 80073e8:	d819      	bhi.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d00c      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d815      	bhi.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d019      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d111      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fa:	4baa      	ldr	r3, [pc, #680]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fe:	4aa9      	ldr	r2, [pc, #676]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007406:	e011      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740c:	3308      	adds	r3, #8
 800740e:	2102      	movs	r1, #2
 8007410:	4618      	mov	r0, r3
 8007412:	f000 ffeb 	bl	80083ec <RCCEx_PLL2_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800741c:	e006      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007424:	e002      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800742a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800742c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007434:	4b9b      	ldr	r3, [pc, #620]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007438:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007442:	4a98      	ldr	r2, [pc, #608]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007444:	430b      	orrs	r3, r1
 8007446:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007448:	e003      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800744e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800745e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007462:	2300      	movs	r3, #0
 8007464:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007468:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800746c:	460b      	mov	r3, r1
 800746e:	4313      	orrs	r3, r2
 8007470:	d051      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007478:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800747c:	d035      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800747e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007482:	d82e      	bhi.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007484:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007488:	d031      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800748a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800748e:	d828      	bhi.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007494:	d01a      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800749a:	d822      	bhi.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80074a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074a4:	d007      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80074a6:	e01c      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a8:	4b7e      	ldr	r3, [pc, #504]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ac:	4a7d      	ldr	r2, [pc, #500]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074b4:	e01c      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ba:	3308      	adds	r3, #8
 80074bc:	2100      	movs	r1, #0
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 ff94 	bl	80083ec <RCCEx_PLL2_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074ca:	e011      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d0:	3328      	adds	r3, #40	@ 0x28
 80074d2:	2100      	movs	r1, #0
 80074d4:	4618      	mov	r0, r3
 80074d6:	f001 f83b 	bl	8008550 <RCCEx_PLL3_Config>
 80074da:	4603      	mov	r3, r0
 80074dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074e0:	e006      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074e8:	e002      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80074ea:	bf00      	nop
 80074ec:	e000      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80074ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80074f8:	4b6a      	ldr	r3, [pc, #424]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007506:	4a67      	ldr	r2, [pc, #412]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007508:	430b      	orrs	r3, r1
 800750a:	6513      	str	r3, [r2, #80]	@ 0x50
 800750c:	e003      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007512:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007522:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007526:	2300      	movs	r3, #0
 8007528:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800752c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007530:	460b      	mov	r3, r1
 8007532:	4313      	orrs	r3, r2
 8007534:	d053      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800753c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007540:	d033      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007542:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007546:	d82c      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007548:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800754c:	d02f      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800754e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007552:	d826      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007554:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007558:	d02b      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800755a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800755e:	d820      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007564:	d012      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800756a:	d81a      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d022      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007574:	d115      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757a:	3308      	adds	r3, #8
 800757c:	2101      	movs	r1, #1
 800757e:	4618      	mov	r0, r3
 8007580:	f000 ff34 	bl	80083ec <RCCEx_PLL2_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800758a:	e015      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007590:	3328      	adds	r3, #40	@ 0x28
 8007592:	2101      	movs	r1, #1
 8007594:	4618      	mov	r0, r3
 8007596:	f000 ffdb 	bl	8008550 <RCCEx_PLL3_Config>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075a0:	e00a      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075a8:	e006      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075aa:	bf00      	nop
 80075ac:	e004      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075ae:	bf00      	nop
 80075b0:	e002      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075b2:	bf00      	nop
 80075b4:	e000      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80075c0:	4b38      	ldr	r3, [pc, #224]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80075c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ce:	4a35      	ldr	r2, [pc, #212]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80075d4:	e003      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80075ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075ee:	2300      	movs	r3, #0
 80075f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075f8:	460b      	mov	r3, r1
 80075fa:	4313      	orrs	r3, r2
 80075fc:	d058      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800760a:	d033      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800760c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007610:	d82c      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007616:	d02f      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800761c:	d826      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800761e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007622:	d02b      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007624:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007628:	d820      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800762e:	d012      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007634:	d81a      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d022      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800763a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800763e:	d115      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007644:	3308      	adds	r3, #8
 8007646:	2101      	movs	r1, #1
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fecf 	bl	80083ec <RCCEx_PLL2_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007654:	e015      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	3328      	adds	r3, #40	@ 0x28
 800765c:	2101      	movs	r1, #1
 800765e:	4618      	mov	r0, r3
 8007660:	f000 ff76 	bl	8008550 <RCCEx_PLL3_Config>
 8007664:	4603      	mov	r3, r0
 8007666:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800766a:	e00a      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007672:	e006      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007674:	bf00      	nop
 8007676:	e004      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007678:	bf00      	nop
 800767a:	e002      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800767c:	bf00      	nop
 800767e:	e000      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10e      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800768a:	4b06      	ldr	r3, [pc, #24]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800768c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007696:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800769a:	4a02      	ldr	r2, [pc, #8]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800769c:	430b      	orrs	r3, r1
 800769e:	6593      	str	r3, [r2, #88]	@ 0x58
 80076a0:	e006      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80076a2:	bf00      	nop
 80076a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80076bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076c0:	2300      	movs	r3, #0
 80076c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4313      	orrs	r3, r2
 80076ce:	d037      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80076d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076da:	d00e      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80076dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e0:	d816      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d018      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80076e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076ea:	d111      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ec:	4bc4      	ldr	r3, [pc, #784]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f0:	4ac3      	ldr	r2, [pc, #780]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80076f8:	e00f      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fe:	3308      	adds	r3, #8
 8007700:	2101      	movs	r1, #1
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fe72 	bl	80083ec <RCCEx_PLL2_Config>
 8007708:	4603      	mov	r3, r0
 800770a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800770e:	e004      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007716:	e000      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800771a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10a      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007722:	4bb7      	ldr	r3, [pc, #732]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007726:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800772a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007730:	4ab3      	ldr	r2, [pc, #716]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007732:	430b      	orrs	r3, r1
 8007734:	6513      	str	r3, [r2, #80]	@ 0x50
 8007736:	e003      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800773c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800774c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007750:	2300      	movs	r3, #0
 8007752:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007756:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800775a:	460b      	mov	r3, r1
 800775c:	4313      	orrs	r3, r2
 800775e:	d039      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007766:	2b03      	cmp	r3, #3
 8007768:	d81c      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800776a:	a201      	add	r2, pc, #4	@ (adr r2, 8007770 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800776c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007770:	080077ad 	.word	0x080077ad
 8007774:	08007781 	.word	0x08007781
 8007778:	0800778f 	.word	0x0800778f
 800777c:	080077ad 	.word	0x080077ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007780:	4b9f      	ldr	r3, [pc, #636]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007784:	4a9e      	ldr	r2, [pc, #632]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800778a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800778c:	e00f      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800778e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007792:	3308      	adds	r3, #8
 8007794:	2102      	movs	r1, #2
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fe28 	bl	80083ec <RCCEx_PLL2_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80077a2:	e004      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077aa:	e000      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80077ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80077b6:	4b92      	ldr	r3, [pc, #584]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ba:	f023 0103 	bic.w	r1, r3, #3
 80077be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077c6:	430b      	orrs	r3, r1
 80077c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077ca:	e003      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80077e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077e4:	2300      	movs	r3, #0
 80077e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f000 8099 	beq.w	8007928 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077f6:	4b83      	ldr	r3, [pc, #524]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a82      	ldr	r2, [pc, #520]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007800:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007802:	f7fa fc0f 	bl	8002024 <HAL_GetTick>
 8007806:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800780a:	e00b      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800780c:	f7fa fc0a 	bl	8002024 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b64      	cmp	r3, #100	@ 0x64
 800781a:	d903      	bls.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007822:	e005      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007824:	4b77      	ldr	r3, [pc, #476]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0ed      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007834:	2b00      	cmp	r3, #0
 8007836:	d173      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007838:	4b71      	ldr	r3, [pc, #452]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800783a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800783c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007844:	4053      	eors	r3, r2
 8007846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800784a:	2b00      	cmp	r3, #0
 800784c:	d015      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800784e:	4b6c      	ldr	r3, [pc, #432]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007856:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800785a:	4b69      	ldr	r3, [pc, #420]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800785c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785e:	4a68      	ldr	r2, [pc, #416]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007864:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007866:	4b66      	ldr	r3, [pc, #408]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800786a:	4a65      	ldr	r2, [pc, #404]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800786c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007870:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007872:	4a63      	ldr	r2, [pc, #396]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007878:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007886:	d118      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007888:	f7fa fbcc 	bl	8002024 <HAL_GetTick>
 800788c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007890:	e00d      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007892:	f7fa fbc7 	bl	8002024 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800789c:	1ad2      	subs	r2, r2, r3
 800789e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d903      	bls.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80078ac:	e005      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078ae:	4b54      	ldr	r3, [pc, #336]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0eb      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80078ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d129      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078d2:	d10e      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80078d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078e4:	091a      	lsrs	r2, r3, #4
 80078e6:	4b48      	ldr	r3, [pc, #288]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	4a45      	ldr	r2, [pc, #276]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6113      	str	r3, [r2, #16]
 80078f0:	e005      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80078f2:	4b43      	ldr	r3, [pc, #268]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	4a42      	ldr	r2, [pc, #264]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80078fc:	6113      	str	r3, [r2, #16]
 80078fe:	4b40      	ldr	r3, [pc, #256]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007900:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800790a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800790e:	4a3c      	ldr	r2, [pc, #240]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007910:	430b      	orrs	r3, r1
 8007912:	6713      	str	r3, [r2, #112]	@ 0x70
 8007914:	e008      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800791a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800791e:	e003      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f002 0301 	and.w	r3, r2, #1
 8007934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007938:	2300      	movs	r3, #0
 800793a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800793e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007942:	460b      	mov	r3, r1
 8007944:	4313      	orrs	r3, r2
 8007946:	f000 808f 	beq.w	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800794a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007950:	2b28      	cmp	r3, #40	@ 0x28
 8007952:	d871      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007954:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	08007a41 	.word	0x08007a41
 8007960:	08007a39 	.word	0x08007a39
 8007964:	08007a39 	.word	0x08007a39
 8007968:	08007a39 	.word	0x08007a39
 800796c:	08007a39 	.word	0x08007a39
 8007970:	08007a39 	.word	0x08007a39
 8007974:	08007a39 	.word	0x08007a39
 8007978:	08007a39 	.word	0x08007a39
 800797c:	08007a0d 	.word	0x08007a0d
 8007980:	08007a39 	.word	0x08007a39
 8007984:	08007a39 	.word	0x08007a39
 8007988:	08007a39 	.word	0x08007a39
 800798c:	08007a39 	.word	0x08007a39
 8007990:	08007a39 	.word	0x08007a39
 8007994:	08007a39 	.word	0x08007a39
 8007998:	08007a39 	.word	0x08007a39
 800799c:	08007a23 	.word	0x08007a23
 80079a0:	08007a39 	.word	0x08007a39
 80079a4:	08007a39 	.word	0x08007a39
 80079a8:	08007a39 	.word	0x08007a39
 80079ac:	08007a39 	.word	0x08007a39
 80079b0:	08007a39 	.word	0x08007a39
 80079b4:	08007a39 	.word	0x08007a39
 80079b8:	08007a39 	.word	0x08007a39
 80079bc:	08007a41 	.word	0x08007a41
 80079c0:	08007a39 	.word	0x08007a39
 80079c4:	08007a39 	.word	0x08007a39
 80079c8:	08007a39 	.word	0x08007a39
 80079cc:	08007a39 	.word	0x08007a39
 80079d0:	08007a39 	.word	0x08007a39
 80079d4:	08007a39 	.word	0x08007a39
 80079d8:	08007a39 	.word	0x08007a39
 80079dc:	08007a41 	.word	0x08007a41
 80079e0:	08007a39 	.word	0x08007a39
 80079e4:	08007a39 	.word	0x08007a39
 80079e8:	08007a39 	.word	0x08007a39
 80079ec:	08007a39 	.word	0x08007a39
 80079f0:	08007a39 	.word	0x08007a39
 80079f4:	08007a39 	.word	0x08007a39
 80079f8:	08007a39 	.word	0x08007a39
 80079fc:	08007a41 	.word	0x08007a41
 8007a00:	58024400 	.word	0x58024400
 8007a04:	58024800 	.word	0x58024800
 8007a08:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a10:	3308      	adds	r3, #8
 8007a12:	2101      	movs	r1, #1
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fce9 	bl	80083ec <RCCEx_PLL2_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a20:	e00f      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a26:	3328      	adds	r3, #40	@ 0x28
 8007a28:	2101      	movs	r1, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fd90 	bl	8008550 <RCCEx_PLL3_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a36:	e004      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a3e:	e000      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a4a:	4bbf      	ldr	r3, [pc, #764]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a58:	4abb      	ldr	r2, [pc, #748]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a5e:	e003      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f002 0302 	and.w	r3, r2, #2
 8007a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4313      	orrs	r3, r2
 8007a86:	d041      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a8e:	2b05      	cmp	r3, #5
 8007a90:	d824      	bhi.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007a92:	a201      	add	r2, pc, #4	@ (adr r2, 8007a98 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007ae5 	.word	0x08007ae5
 8007a9c:	08007ab1 	.word	0x08007ab1
 8007aa0:	08007ac7 	.word	0x08007ac7
 8007aa4:	08007ae5 	.word	0x08007ae5
 8007aa8:	08007ae5 	.word	0x08007ae5
 8007aac:	08007ae5 	.word	0x08007ae5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fc97 	bl	80083ec <RCCEx_PLL2_Config>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ac4:	e00f      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	3328      	adds	r3, #40	@ 0x28
 8007acc:	2101      	movs	r1, #1
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fd3e 	bl	8008550 <RCCEx_PLL3_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ada:	e004      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ae2:	e000      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007aee:	4b96      	ldr	r3, [pc, #600]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af2:	f023 0107 	bic.w	r1, r3, #7
 8007af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007afc:	4a92      	ldr	r2, [pc, #584]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007afe:	430b      	orrs	r3, r1
 8007b00:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b02:	e003      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f002 0304 	and.w	r3, r2, #4
 8007b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b22:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b26:	460b      	mov	r3, r1
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	d044      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b34:	2b05      	cmp	r3, #5
 8007b36:	d825      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007b38:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b8d 	.word	0x08007b8d
 8007b44:	08007b59 	.word	0x08007b59
 8007b48:	08007b6f 	.word	0x08007b6f
 8007b4c:	08007b8d 	.word	0x08007b8d
 8007b50:	08007b8d 	.word	0x08007b8d
 8007b54:	08007b8d 	.word	0x08007b8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fc43 	bl	80083ec <RCCEx_PLL2_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b6c:	e00f      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b72:	3328      	adds	r3, #40	@ 0x28
 8007b74:	2101      	movs	r1, #1
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fcea 	bl	8008550 <RCCEx_PLL3_Config>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b82:	e004      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b8a:	e000      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b96:	4b6c      	ldr	r3, [pc, #432]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b9a:	f023 0107 	bic.w	r1, r3, #7
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba6:	4a68      	ldr	r2, [pc, #416]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bac:	e003      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	f002 0320 	and.w	r3, r2, #32
 8007bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007bcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	d055      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007be2:	d033      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007be8:	d82c      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bee:	d02f      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf4:	d826      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007bf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007bfa:	d02b      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007bfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c00:	d820      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c06:	d012      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c0c:	d81a      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d022      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c16:	d115      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fbe3 	bl	80083ec <RCCEx_PLL2_Config>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c2c:	e015      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c32:	3328      	adds	r3, #40	@ 0x28
 8007c34:	2102      	movs	r1, #2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fc8a 	bl	8008550 <RCCEx_PLL3_Config>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c42:	e00a      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c4a:	e006      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c4c:	bf00      	nop
 8007c4e:	e004      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c50:	bf00      	nop
 8007c52:	e002      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c54:	bf00      	nop
 8007c56:	e000      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c62:	4b39      	ldr	r3, [pc, #228]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c72:	4a35      	ldr	r2, [pc, #212]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c74:	430b      	orrs	r3, r1
 8007c76:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c78:	e003      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007c8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c92:	2300      	movs	r3, #0
 8007c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	d058      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007caa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007cae:	d033      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007cb0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007cb4:	d82c      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cba:	d02f      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cc0:	d826      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cc6:	d02b      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007cc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ccc:	d820      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cd2:	d012      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cd8:	d81a      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d022      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ce2:	d115      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce8:	3308      	adds	r3, #8
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fb7d 	bl	80083ec <RCCEx_PLL2_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007cf8:	e015      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfe:	3328      	adds	r3, #40	@ 0x28
 8007d00:	2102      	movs	r1, #2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fc24 	bl	8008550 <RCCEx_PLL3_Config>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d0e:	e00a      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d16:	e006      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d18:	bf00      	nop
 8007d1a:	e004      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d1c:	bf00      	nop
 8007d1e:	e002      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d20:	bf00      	nop
 8007d22:	e000      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10e      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d2e:	4b06      	ldr	r3, [pc, #24]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d3e:	4a02      	ldr	r2, [pc, #8]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d40:	430b      	orrs	r3, r1
 8007d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d44:	e006      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007d46:	bf00      	nop
 8007d48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007d60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d64:	2300      	movs	r3, #0
 8007d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4313      	orrs	r3, r2
 8007d72:	d055      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d80:	d033      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007d82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d86:	d82c      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d8c:	d02f      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d92:	d826      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d98:	d02b      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007d9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d9e:	d820      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007da4:	d012      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007da6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007daa:	d81a      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d022      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db4:	d115      	bne.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dba:	3308      	adds	r3, #8
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fb14 	bl	80083ec <RCCEx_PLL2_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007dca:	e015      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd0:	3328      	adds	r3, #40	@ 0x28
 8007dd2:	2102      	movs	r1, #2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fbbb 	bl	8008550 <RCCEx_PLL3_Config>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007de0:	e00a      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007de8:	e006      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007dea:	bf00      	nop
 8007dec:	e004      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007dee:	bf00      	nop
 8007df0:	e002      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007df2:	bf00      	nop
 8007df4:	e000      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10b      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e00:	4ba0      	ldr	r3, [pc, #640]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e10:	4a9c      	ldr	r2, [pc, #624]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e12:	430b      	orrs	r3, r1
 8007e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e16:	e003      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f002 0308 	and.w	r3, r2, #8
 8007e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	d01e      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e4c:	d10c      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e52:	3328      	adds	r3, #40	@ 0x28
 8007e54:	2102      	movs	r1, #2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fb7a 	bl	8008550 <RCCEx_PLL3_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007e68:	4b86      	ldr	r3, [pc, #536]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e78:	4a82      	ldr	r2, [pc, #520]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e7a:	430b      	orrs	r3, r1
 8007e7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f002 0310 	and.w	r3, r2, #16
 8007e8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	d01e      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eaa:	d10c      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb0:	3328      	adds	r3, #40	@ 0x28
 8007eb2:	2102      	movs	r1, #2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fb4b 	bl	8008550 <RCCEx_PLL3_Config>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ed6:	4a6b      	ldr	r2, [pc, #428]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007eea:	2300      	movs	r3, #0
 8007eec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007eee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	d03e      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f04:	d022      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007f06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f0a:	d81b      	bhi.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f14:	d00b      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007f16:	e015      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fa63 	bl	80083ec <RCCEx_PLL2_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f2c:	e00f      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f32:	3328      	adds	r3, #40	@ 0x28
 8007f34:	2102      	movs	r1, #2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fb0a 	bl	8008550 <RCCEx_PLL3_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f42:	e004      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f4a:	e000      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10b      	bne.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f56:	4b4b      	ldr	r3, [pc, #300]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f66:	4a47      	ldr	r2, [pc, #284]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f6c:	e003      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007f82:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f84:	2300      	movs	r3, #0
 8007f86:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	d03b      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f9e:	d01f      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007fa0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fa4:	d818      	bhi.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007fa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007faa:	d003      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007fac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fb0:	d007      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007fb2:	e011      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fb4:	4b33      	ldr	r3, [pc, #204]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb8:	4a32      	ldr	r2, [pc, #200]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007fc0:	e00f      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc6:	3328      	adds	r3, #40	@ 0x28
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fac0 	bl	8008550 <RCCEx_PLL3_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007fd6:	e004      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fde:	e000      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10b      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fea:	4b26      	ldr	r3, [pc, #152]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ffa:	4a22      	ldr	r2, [pc, #136]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ffc:	430b      	orrs	r3, r1
 8007ffe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008000:	e003      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008006:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008016:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008018:	2300      	movs	r3, #0
 800801a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800801c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008020:	460b      	mov	r3, r1
 8008022:	4313      	orrs	r3, r2
 8008024:	d034      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802c:	2b00      	cmp	r3, #0
 800802e:	d003      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008034:	d007      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008036:	e011      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008038:	4b12      	ldr	r3, [pc, #72]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800803a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803c:	4a11      	ldr	r2, [pc, #68]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800803e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008044:	e00e      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804a:	3308      	adds	r3, #8
 800804c:	2102      	movs	r1, #2
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f9cc 	bl	80083ec <RCCEx_PLL2_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10d      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800806c:	4b05      	ldr	r3, [pc, #20]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800806e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008070:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800807a:	4a02      	ldr	r2, [pc, #8]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800807c:	430b      	orrs	r3, r1
 800807e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008080:	e006      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008082:	bf00      	nop
 8008084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800808c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800809c:	663b      	str	r3, [r7, #96]	@ 0x60
 800809e:	2300      	movs	r3, #0
 80080a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80080a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80080a6:	460b      	mov	r3, r1
 80080a8:	4313      	orrs	r3, r2
 80080aa:	d00c      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b0:	3328      	adds	r3, #40	@ 0x28
 80080b2:	2102      	movs	r1, #2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fa4b 	bl	8008550 <RCCEx_PLL3_Config>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80080d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080d4:	2300      	movs	r3, #0
 80080d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80080dc:	460b      	mov	r3, r1
 80080de:	4313      	orrs	r3, r2
 80080e0:	d036      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ec:	d018      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80080ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080f2:	d811      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f8:	d014      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80080fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080fe:	d80b      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008100:	2b00      	cmp	r3, #0
 8008102:	d011      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008108:	d106      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800810a:	4bb7      	ldr	r3, [pc, #732]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810e:	4ab6      	ldr	r2, [pc, #728]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008114:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008116:	e008      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800811e:	e004      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008120:	bf00      	nop
 8008122:	e002      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008124:	bf00      	nop
 8008126:	e000      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800812a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008132:	4bad      	ldr	r3, [pc, #692]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008136:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800813a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008140:	4aa9      	ldr	r2, [pc, #676]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008142:	430b      	orrs	r3, r1
 8008144:	6553      	str	r3, [r2, #84]	@ 0x54
 8008146:	e003      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008148:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800814c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800815c:	653b      	str	r3, [r7, #80]	@ 0x50
 800815e:	2300      	movs	r3, #0
 8008160:	657b      	str	r3, [r7, #84]	@ 0x54
 8008162:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008166:	460b      	mov	r3, r1
 8008168:	4313      	orrs	r3, r2
 800816a:	d009      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800816c:	4b9e      	ldr	r3, [pc, #632]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800816e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008170:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800817a:	4a9b      	ldr	r2, [pc, #620]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800817c:	430b      	orrs	r3, r1
 800817e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800818c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800818e:	2300      	movs	r3, #0
 8008190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008192:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008196:	460b      	mov	r3, r1
 8008198:	4313      	orrs	r3, r2
 800819a:	d009      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800819c:	4b92      	ldr	r3, [pc, #584]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800819e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081aa:	4a8f      	ldr	r2, [pc, #572]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081ac:	430b      	orrs	r3, r1
 80081ae:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80081bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80081be:	2300      	movs	r3, #0
 80081c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80081c6:	460b      	mov	r3, r1
 80081c8:	4313      	orrs	r3, r2
 80081ca:	d00e      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081cc:	4b86      	ldr	r3, [pc, #536]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	4a85      	ldr	r2, [pc, #532]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081d6:	6113      	str	r3, [r2, #16]
 80081d8:	4b83      	ldr	r3, [pc, #524]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081da:	6919      	ldr	r1, [r3, #16]
 80081dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081e4:	4a80      	ldr	r2, [pc, #512]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081e6:	430b      	orrs	r3, r1
 80081e8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80081f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081f8:	2300      	movs	r3, #0
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008200:	460b      	mov	r3, r1
 8008202:	4313      	orrs	r3, r2
 8008204:	d009      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008206:	4b78      	ldr	r3, [pc, #480]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800820a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800820e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008214:	4a74      	ldr	r2, [pc, #464]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008216:	430b      	orrs	r3, r1
 8008218:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800821a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008226:	633b      	str	r3, [r7, #48]	@ 0x30
 8008228:	2300      	movs	r3, #0
 800822a:	637b      	str	r3, [r7, #52]	@ 0x34
 800822c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008230:	460b      	mov	r3, r1
 8008232:	4313      	orrs	r3, r2
 8008234:	d00a      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008236:	4b6c      	ldr	r3, [pc, #432]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800823e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008246:	4a68      	ldr	r2, [pc, #416]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008248:	430b      	orrs	r3, r1
 800824a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800824c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	2100      	movs	r1, #0
 8008256:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800825e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008262:	460b      	mov	r3, r1
 8008264:	4313      	orrs	r3, r2
 8008266:	d011      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826c:	3308      	adds	r3, #8
 800826e:	2100      	movs	r1, #0
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f8bb 	bl	80083ec <RCCEx_PLL2_Config>
 8008276:	4603      	mov	r3, r0
 8008278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800827c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008288:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	2100      	movs	r1, #0
 8008296:	6239      	str	r1, [r7, #32]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
 800829e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80082a2:	460b      	mov	r3, r1
 80082a4:	4313      	orrs	r3, r2
 80082a6:	d011      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ac:	3308      	adds	r3, #8
 80082ae:	2101      	movs	r1, #1
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 f89b 	bl	80083ec <RCCEx_PLL2_Config>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	2100      	movs	r1, #0
 80082d6:	61b9      	str	r1, [r7, #24]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80082e2:	460b      	mov	r3, r1
 80082e4:	4313      	orrs	r3, r2
 80082e6:	d011      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ec:	3308      	adds	r3, #8
 80082ee:	2102      	movs	r1, #2
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f87b 	bl	80083ec <RCCEx_PLL2_Config>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008308:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	2100      	movs	r1, #0
 8008316:	6139      	str	r1, [r7, #16]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008322:	460b      	mov	r3, r1
 8008324:	4313      	orrs	r3, r2
 8008326:	d011      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832c:	3328      	adds	r3, #40	@ 0x28
 800832e:	2100      	movs	r1, #0
 8008330:	4618      	mov	r0, r3
 8008332:	f000 f90d 	bl	8008550 <RCCEx_PLL3_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800833c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	2100      	movs	r1, #0
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	f003 0310 	and.w	r3, r3, #16
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008362:	460b      	mov	r3, r1
 8008364:	4313      	orrs	r3, r2
 8008366:	d011      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800836c:	3328      	adds	r3, #40	@ 0x28
 800836e:	2101      	movs	r1, #1
 8008370:	4618      	mov	r0, r3
 8008372:	f000 f8ed 	bl	8008550 <RCCEx_PLL3_Config>
 8008376:	4603      	mov	r3, r0
 8008378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800837c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800838c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	2100      	movs	r1, #0
 8008396:	6039      	str	r1, [r7, #0]
 8008398:	f003 0320 	and.w	r3, r3, #32
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80083a2:	460b      	mov	r3, r1
 80083a4:	4313      	orrs	r3, r2
 80083a6:	d011      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ac:	3328      	adds	r3, #40	@ 0x28
 80083ae:	2102      	movs	r1, #2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 f8cd 	bl	8008550 <RCCEx_PLL3_Config>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80083bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80083cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e000      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
}
 80083da:	4618      	mov	r0, r3
 80083dc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80083e0:	46bd      	mov	sp, r7
 80083e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e6:	bf00      	nop
 80083e8:	58024400 	.word	0x58024400

080083ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083fa:	4b53      	ldr	r3, [pc, #332]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80083fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	2b03      	cmp	r3, #3
 8008404:	d101      	bne.n	800840a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e099      	b.n	800853e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800840a:	4b4f      	ldr	r3, [pc, #316]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a4e      	ldr	r2, [pc, #312]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 8008410:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008416:	f7f9 fe05 	bl	8002024 <HAL_GetTick>
 800841a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800841c:	e008      	b.n	8008430 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800841e:	f7f9 fe01 	bl	8002024 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e086      	b.n	800853e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008430:	4b45      	ldr	r3, [pc, #276]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f0      	bne.n	800841e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800843c:	4b42      	ldr	r3, [pc, #264]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 800843e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008440:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	031b      	lsls	r3, r3, #12
 800844a:	493f      	ldr	r1, [pc, #252]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 800844c:	4313      	orrs	r3, r2
 800844e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	3b01      	subs	r3, #1
 8008456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	3b01      	subs	r3, #1
 8008460:	025b      	lsls	r3, r3, #9
 8008462:	b29b      	uxth	r3, r3
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	3b01      	subs	r3, #1
 800846c:	041b      	lsls	r3, r3, #16
 800846e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	3b01      	subs	r3, #1
 800847a:	061b      	lsls	r3, r3, #24
 800847c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008480:	4931      	ldr	r1, [pc, #196]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 8008482:	4313      	orrs	r3, r2
 8008484:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008486:	4b30      	ldr	r3, [pc, #192]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 8008488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	492d      	ldr	r1, [pc, #180]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 8008494:	4313      	orrs	r3, r2
 8008496:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008498:	4b2b      	ldr	r3, [pc, #172]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 800849a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849c:	f023 0220 	bic.w	r2, r3, #32
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	4928      	ldr	r1, [pc, #160]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80084aa:	4b27      	ldr	r3, [pc, #156]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ae:	4a26      	ldr	r2, [pc, #152]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084b0:	f023 0310 	bic.w	r3, r3, #16
 80084b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80084b6:	4b24      	ldr	r3, [pc, #144]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084ba:	4b24      	ldr	r3, [pc, #144]	@ (800854c <RCCEx_PLL2_Config+0x160>)
 80084bc:	4013      	ands	r3, r2
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	69d2      	ldr	r2, [r2, #28]
 80084c2:	00d2      	lsls	r2, r2, #3
 80084c4:	4920      	ldr	r1, [pc, #128]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80084ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084d0:	f043 0310 	orr.w	r3, r3, #16
 80084d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d106      	bne.n	80084ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80084dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	4a19      	ldr	r2, [pc, #100]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084e8:	e00f      	b.n	800850a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d106      	bne.n	80084fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80084f0:	4b15      	ldr	r3, [pc, #84]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	4a14      	ldr	r2, [pc, #80]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 80084f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084fc:	e005      	b.n	800850a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80084fe:	4b12      	ldr	r3, [pc, #72]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 8008500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008502:	4a11      	ldr	r2, [pc, #68]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 8008504:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008508:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800850a:	4b0f      	ldr	r3, [pc, #60]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a0e      	ldr	r2, [pc, #56]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 8008510:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008516:	f7f9 fd85 	bl	8002024 <HAL_GetTick>
 800851a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800851c:	e008      	b.n	8008530 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800851e:	f7f9 fd81 	bl	8002024 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d901      	bls.n	8008530 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e006      	b.n	800853e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008530:	4b05      	ldr	r3, [pc, #20]	@ (8008548 <RCCEx_PLL2_Config+0x15c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0f0      	beq.n	800851e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	58024400 	.word	0x58024400
 800854c:	ffff0007 	.word	0xffff0007

08008550 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800855e:	4b53      	ldr	r3, [pc, #332]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	2b03      	cmp	r3, #3
 8008568:	d101      	bne.n	800856e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e099      	b.n	80086a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800856e:	4b4f      	ldr	r3, [pc, #316]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a4e      	ldr	r2, [pc, #312]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800857a:	f7f9 fd53 	bl	8002024 <HAL_GetTick>
 800857e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008580:	e008      	b.n	8008594 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008582:	f7f9 fd4f 	bl	8002024 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	2b02      	cmp	r3, #2
 800858e:	d901      	bls.n	8008594 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e086      	b.n	80086a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008594:	4b45      	ldr	r3, [pc, #276]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1f0      	bne.n	8008582 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80085a0:	4b42      	ldr	r3, [pc, #264]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 80085a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	051b      	lsls	r3, r3, #20
 80085ae:	493f      	ldr	r1, [pc, #252]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	025b      	lsls	r3, r3, #9
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	431a      	orrs	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	041b      	lsls	r3, r3, #16
 80085d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80085d6:	431a      	orrs	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	3b01      	subs	r3, #1
 80085de:	061b      	lsls	r3, r3, #24
 80085e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80085e4:	4931      	ldr	r1, [pc, #196]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80085ea:	4b30      	ldr	r3, [pc, #192]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 80085ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	492d      	ldr	r1, [pc, #180]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085fc:	4b2b      	ldr	r3, [pc, #172]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 80085fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008600:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	4928      	ldr	r1, [pc, #160]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 800860a:	4313      	orrs	r3, r2
 800860c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800860e:	4b27      	ldr	r3, [pc, #156]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008612:	4a26      	ldr	r2, [pc, #152]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008618:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800861a:	4b24      	ldr	r3, [pc, #144]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 800861c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800861e:	4b24      	ldr	r3, [pc, #144]	@ (80086b0 <RCCEx_PLL3_Config+0x160>)
 8008620:	4013      	ands	r3, r2
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	69d2      	ldr	r2, [r2, #28]
 8008626:	00d2      	lsls	r2, r2, #3
 8008628:	4920      	ldr	r1, [pc, #128]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 800862a:	4313      	orrs	r3, r2
 800862c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800862e:	4b1f      	ldr	r3, [pc, #124]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008632:	4a1e      	ldr	r2, [pc, #120]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008638:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008640:	4b1a      	ldr	r3, [pc, #104]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008644:	4a19      	ldr	r2, [pc, #100]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008646:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800864a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800864c:	e00f      	b.n	800866e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d106      	bne.n	8008662 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008654:	4b15      	ldr	r3, [pc, #84]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008658:	4a14      	ldr	r2, [pc, #80]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 800865a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800865e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008660:	e005      	b.n	800866e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008662:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008666:	4a11      	ldr	r2, [pc, #68]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008668:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800866c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800866e:	4b0f      	ldr	r3, [pc, #60]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a0e      	ldr	r2, [pc, #56]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800867a:	f7f9 fcd3 	bl	8002024 <HAL_GetTick>
 800867e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008680:	e008      	b.n	8008694 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008682:	f7f9 fccf 	bl	8002024 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e006      	b.n	80086a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <RCCEx_PLL3_Config+0x15c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0f0      	beq.n	8008682 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	58024400 	.word	0x58024400
 80086b0:	ffff0007 	.word	0xffff0007

080086b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e10f      	b.n	80088e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a87      	ldr	r2, [pc, #540]	@ (80088f0 <HAL_SPI_Init+0x23c>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d00f      	beq.n	80086f6 <HAL_SPI_Init+0x42>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a86      	ldr	r2, [pc, #536]	@ (80088f4 <HAL_SPI_Init+0x240>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d00a      	beq.n	80086f6 <HAL_SPI_Init+0x42>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a84      	ldr	r2, [pc, #528]	@ (80088f8 <HAL_SPI_Init+0x244>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d005      	beq.n	80086f6 <HAL_SPI_Init+0x42>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	2b0f      	cmp	r3, #15
 80086f0:	d901      	bls.n	80086f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e0f7      	b.n	80088e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f001 fd9e 	bl	800a238 <SPI_GetPacketSize>
 80086fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a7b      	ldr	r2, [pc, #492]	@ (80088f0 <HAL_SPI_Init+0x23c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00c      	beq.n	8008722 <HAL_SPI_Init+0x6e>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a79      	ldr	r2, [pc, #484]	@ (80088f4 <HAL_SPI_Init+0x240>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d007      	beq.n	8008722 <HAL_SPI_Init+0x6e>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a78      	ldr	r2, [pc, #480]	@ (80088f8 <HAL_SPI_Init+0x244>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d002      	beq.n	8008722 <HAL_SPI_Init+0x6e>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b08      	cmp	r3, #8
 8008720:	d811      	bhi.n	8008746 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008726:	4a72      	ldr	r2, [pc, #456]	@ (80088f0 <HAL_SPI_Init+0x23c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d009      	beq.n	8008740 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a70      	ldr	r2, [pc, #448]	@ (80088f4 <HAL_SPI_Init+0x240>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d004      	beq.n	8008740 <HAL_SPI_Init+0x8c>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a6f      	ldr	r2, [pc, #444]	@ (80088f8 <HAL_SPI_Init+0x244>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d104      	bne.n	800874a <HAL_SPI_Init+0x96>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b10      	cmp	r3, #16
 8008744:	d901      	bls.n	800874a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e0cd      	b.n	80088e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7f8 fe94 	bl	800148c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0201 	bic.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008786:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008790:	d119      	bne.n	80087c6 <HAL_SPI_Init+0x112>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800879a:	d103      	bne.n	80087a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d008      	beq.n	80087b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10c      	bne.n	80087c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80087b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b4:	d107      	bne.n	80087c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00f      	beq.n	80087f2 <HAL_SPI_Init+0x13e>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	2b06      	cmp	r3, #6
 80087d8:	d90b      	bls.n	80087f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	e007      	b.n	8008802 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008800:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69da      	ldr	r2, [r3, #28]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880a:	431a      	orrs	r2, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008814:	ea42 0103 	orr.w	r1, r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008862:	ea42 0103 	orr.w	r1, r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d113      	bne.n	80088a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800888c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80088a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f022 0201 	bic.w	r2, r2, #1
 80088b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	430a      	orrs	r2, r1
 80088d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	40013000 	.word	0x40013000
 80088f4:	40003800 	.word	0x40003800
 80088f8:	40003c00 	.word	0x40003c00

080088fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	4613      	mov	r3, r2
 800890a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3320      	adds	r3, #32
 8008912:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008914:	f7f9 fb86 	bl	8002024 <HAL_GetTick>
 8008918:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b01      	cmp	r3, #1
 8008924:	d001      	beq.n	800892a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008926:	2302      	movs	r3, #2
 8008928:	e1d1      	b.n	8008cce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <HAL_SPI_Transmit+0x3a>
 8008930:	88fb      	ldrh	r3, [r7, #6]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e1c9      	b.n	8008cce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_SPI_Transmit+0x4c>
 8008944:	2302      	movs	r3, #2
 8008946:	e1c2      	b.n	8008cce <HAL_SPI_Transmit+0x3d2>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2203      	movs	r2, #3
 8008954:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	88fa      	ldrh	r2, [r7, #6]
 800896a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	88fa      	ldrh	r2, [r7, #6]
 8008972:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80089a0:	d108      	bne.n	80089b4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	e009      	b.n	80089c8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80089c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	4b96      	ldr	r3, [pc, #600]	@ (8008c28 <HAL_SPI_Transmit+0x32c>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	88f9      	ldrh	r1, [r7, #6]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	430b      	orrs	r3, r1
 80089da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0201 	orr.w	r2, r2, #1
 80089ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089f4:	d107      	bne.n	8008a06 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	d947      	bls.n	8008a9e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008a0e:	e03f      	b.n	8008a90 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d114      	bne.n	8008a48 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6812      	ldr	r2, [r2, #0]
 8008a28:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a2e:	1d1a      	adds	r2, r3, #4
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008a46:	e023      	b.n	8008a90 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a48:	f7f9 faec 	bl	8002024 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d803      	bhi.n	8008a60 <HAL_SPI_Transmit+0x164>
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5e:	d102      	bne.n	8008a66 <HAL_SPI_Transmit+0x16a>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d114      	bne.n	8008a90 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f001 fb18 	bl	800a09c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e11e      	b.n	8008cce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1b9      	bne.n	8008a10 <HAL_SPI_Transmit+0x114>
 8008a9c:	e0f1      	b.n	8008c82 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	2b07      	cmp	r3, #7
 8008aa4:	f240 80e6 	bls.w	8008c74 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008aa8:	e05d      	b.n	8008b66 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	f003 0302 	and.w	r3, r3, #2
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d132      	bne.n	8008b1e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d918      	bls.n	8008af6 <HAL_SPI_Transmit+0x1fa>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d014      	beq.n	8008af6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008adc:	1d1a      	adds	r2, r3, #4
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b02      	subs	r3, #2
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008af4:	e037      	b.n	8008b66 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008afa:	881a      	ldrh	r2, [r3, #0]
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b04:	1c9a      	adds	r2, r3, #2
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008b1c:	e023      	b.n	8008b66 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b1e:	f7f9 fa81 	bl	8002024 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d803      	bhi.n	8008b36 <HAL_SPI_Transmit+0x23a>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b34:	d102      	bne.n	8008b3c <HAL_SPI_Transmit+0x240>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d114      	bne.n	8008b66 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f001 faad 	bl	800a09c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e0b3      	b.n	8008cce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d19b      	bne.n	8008aaa <HAL_SPI_Transmit+0x1ae>
 8008b72:	e086      	b.n	8008c82 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d154      	bne.n	8008c2c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d918      	bls.n	8008bc0 <HAL_SPI_Transmit+0x2c4>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b92:	2b40      	cmp	r3, #64	@ 0x40
 8008b94:	d914      	bls.n	8008bc0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6812      	ldr	r2, [r2, #0]
 8008ba0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ba6:	1d1a      	adds	r2, r3, #4
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	3b04      	subs	r3, #4
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008bbe:	e059      	b.n	8008c74 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d917      	bls.n	8008bfc <HAL_SPI_Transmit+0x300>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d013      	beq.n	8008bfc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bd8:	881a      	ldrh	r2, [r3, #0]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008be2:	1c9a      	adds	r2, r3, #2
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b02      	subs	r3, #2
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008bfa:	e03b      	b.n	8008c74 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3320      	adds	r3, #32
 8008c06:	7812      	ldrb	r2, [r2, #0]
 8008c08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008c26:	e025      	b.n	8008c74 <HAL_SPI_Transmit+0x378>
 8008c28:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c2c:	f7f9 f9fa 	bl	8002024 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d803      	bhi.n	8008c44 <HAL_SPI_Transmit+0x348>
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d102      	bne.n	8008c4a <HAL_SPI_Transmit+0x34e>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d114      	bne.n	8008c74 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f001 fa26 	bl	800a09c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e02c      	b.n	8008cce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f47f af79 	bne.w	8008b74 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2108      	movs	r1, #8
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f001 faa5 	bl	800a1dc <SPI_WaitOnFlagUntilTimeout>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d007      	beq.n	8008ca8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c9e:	f043 0220 	orr.w	r2, r3, #32
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f001 f9f7 	bl	800a09c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e000      	b.n	8008cce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
  }
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop

08008cd8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b088      	sub	sp, #32
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3330      	adds	r3, #48	@ 0x30
 8008cfa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cfc:	f7f9 f992 	bl	8002024 <HAL_GetTick>
 8008d00:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d001      	beq.n	8008d12 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e250      	b.n	80091b4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <HAL_SPI_Receive+0x46>
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e248      	b.n	80091b4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d101      	bne.n	8008d30 <HAL_SPI_Receive+0x58>
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	e241      	b.n	80091b4 <HAL_SPI_Receive+0x4dc>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2204      	movs	r2, #4
 8008d3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	88fa      	ldrh	r2, [r7, #6]
 8008d52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	88fa      	ldrh	r2, [r7, #6]
 8008d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008d88:	d108      	bne.n	8008d9c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	e009      	b.n	8008db0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008dae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	4b95      	ldr	r3, [pc, #596]	@ (800900c <HAL_SPI_Receive+0x334>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	88f9      	ldrh	r1, [r7, #6]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	6812      	ldr	r2, [r2, #0]
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ddc:	d107      	bne.n	8008dee <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	2b0f      	cmp	r3, #15
 8008df4:	d96c      	bls.n	8008ed0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008df6:	e064      	b.n	8008ec2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d114      	bne.n	8008e38 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008e18:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e1e:	1d1a      	adds	r2, r3, #4
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e36:	e044      	b.n	8008ec2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	8bfa      	ldrh	r2, [r7, #30]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d919      	bls.n	8008e7a <HAL_SPI_Receive+0x1a2>
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d014      	beq.n	8008e7a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008e5a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e60:	1d1a      	adds	r2, r3, #4
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e78:	e023      	b.n	8008ec2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e7a:	f7f9 f8d3 	bl	8002024 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d803      	bhi.n	8008e92 <HAL_SPI_Receive+0x1ba>
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e90:	d102      	bne.n	8008e98 <HAL_SPI_Receive+0x1c0>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d114      	bne.n	8008ec2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f001 f8ff 	bl	800a09c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ea4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e178      	b.n	80091b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d194      	bne.n	8008df8 <HAL_SPI_Receive+0x120>
 8008ece:	e15e      	b.n	800918e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	2b07      	cmp	r3, #7
 8008ed6:	f240 8153 	bls.w	8009180 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008eda:	e08f      	b.n	8008ffc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d114      	bne.n	8008f1c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	8812      	ldrh	r2, [r2, #0]
 8008efa:	b292      	uxth	r2, r2
 8008efc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f02:	1c9a      	adds	r2, r3, #2
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	3b01      	subs	r3, #1
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008f1a:	e06f      	b.n	8008ffc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	8bfa      	ldrh	r2, [r7, #30]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d924      	bls.n	8008f74 <HAL_SPI_Receive+0x29c>
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d01f      	beq.n	8008f74 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	8812      	ldrh	r2, [r2, #0]
 8008f3c:	b292      	uxth	r2, r2
 8008f3e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f44:	1c9a      	adds	r2, r3, #2
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	8812      	ldrh	r2, [r2, #0]
 8008f52:	b292      	uxth	r2, r2
 8008f54:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f5a:	1c9a      	adds	r2, r3, #2
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	3b02      	subs	r3, #2
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008f72:	e043      	b.n	8008ffc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d119      	bne.n	8008fb4 <HAL_SPI_Receive+0x2dc>
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d014      	beq.n	8008fb4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	8812      	ldrh	r2, [r2, #0]
 8008f92:	b292      	uxth	r2, r2
 8008f94:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f9a:	1c9a      	adds	r2, r3, #2
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008fb2:	e023      	b.n	8008ffc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fb4:	f7f9 f836 	bl	8002024 <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d803      	bhi.n	8008fcc <HAL_SPI_Receive+0x2f4>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fca:	d102      	bne.n	8008fd2 <HAL_SPI_Receive+0x2fa>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d114      	bne.n	8008ffc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f001 f862 	bl	800a09c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e0db      	b.n	80091b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009002:	b29b      	uxth	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	f47f af69 	bne.w	8008edc <HAL_SPI_Receive+0x204>
 800900a:	e0c0      	b.n	800918e <HAL_SPI_Receive+0x4b6>
 800900c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b01      	cmp	r3, #1
 8009024:	d117      	bne.n	8009056 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	b2d2      	uxtb	r2, r2
 8009036:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009048:	b29b      	uxth	r3, r3
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009054:	e094      	b.n	8009180 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800905c:	b29b      	uxth	r3, r3
 800905e:	8bfa      	ldrh	r2, [r7, #30]
 8009060:	429a      	cmp	r2, r3
 8009062:	d946      	bls.n	80090f2 <HAL_SPI_Receive+0x41a>
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d041      	beq.n	80090f2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800907a:	7812      	ldrb	r2, [r2, #0]
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009096:	7812      	ldrb	r2, [r2, #0]
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090b2:	7812      	ldrb	r2, [r2, #0]
 80090b4:	b2d2      	uxtb	r2, r2
 80090b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ce:	7812      	ldrb	r2, [r2, #0]
 80090d0:	b2d2      	uxtb	r2, r2
 80090d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3b04      	subs	r3, #4
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80090f0:	e046      	b.n	8009180 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d81c      	bhi.n	8009138 <HAL_SPI_Receive+0x460>
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d017      	beq.n	8009138 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009114:	7812      	ldrb	r2, [r2, #0]
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009136:	e023      	b.n	8009180 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009138:	f7f8 ff74 	bl	8002024 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	d803      	bhi.n	8009150 <HAL_SPI_Receive+0x478>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914e:	d102      	bne.n	8009156 <HAL_SPI_Receive+0x47e>
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d114      	bne.n	8009180 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 ffa0 	bl	800a09c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009162:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e019      	b.n	80091b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009186:	b29b      	uxth	r3, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	f47f af41 	bne.w	8009010 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 ff84 	bl	800a09c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e000      	b.n	80091b4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80091b2:	2300      	movs	r3, #0
  }
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3720      	adds	r7, #32
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08e      	sub	sp, #56	@ 0x38
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3320      	adds	r3, #32
 80091d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3330      	adds	r3, #48	@ 0x30
 80091d8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091de:	095b      	lsrs	r3, r3, #5
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	3301      	adds	r3, #1
 80091e4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091e6:	f7f8 ff1d 	bl	8002024 <HAL_GetTick>
 80091ea:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80091ec:	887b      	ldrh	r3, [r7, #2]
 80091ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80091f0:	887b      	ldrh	r3, [r7, #2]
 80091f2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d001      	beq.n	8009204 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8009200:	2302      	movs	r3, #2
 8009202:	e310      	b.n	8009826 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d005      	beq.n	8009216 <HAL_SPI_TransmitReceive+0x5a>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <HAL_SPI_TransmitReceive+0x5a>
 8009210:	887b      	ldrh	r3, [r7, #2]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e305      	b.n	8009826 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009220:	2b01      	cmp	r3, #1
 8009222:	d101      	bne.n	8009228 <HAL_SPI_TransmitReceive+0x6c>
 8009224:	2302      	movs	r3, #2
 8009226:	e2fe      	b.n	8009826 <HAL_SPI_TransmitReceive+0x66a>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2205      	movs	r2, #5
 8009234:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	887a      	ldrh	r2, [r7, #2]
 800924a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	887a      	ldrh	r2, [r7, #2]
 8009252:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	887a      	ldrh	r2, [r7, #2]
 8009260:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	887a      	ldrh	r2, [r7, #2]
 8009268:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009286:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a70      	ldr	r2, [pc, #448]	@ (8009450 <HAL_SPI_TransmitReceive+0x294>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d009      	beq.n	80092a6 <HAL_SPI_TransmitReceive+0xea>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a6f      	ldr	r2, [pc, #444]	@ (8009454 <HAL_SPI_TransmitReceive+0x298>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d004      	beq.n	80092a6 <HAL_SPI_TransmitReceive+0xea>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a6d      	ldr	r2, [pc, #436]	@ (8009458 <HAL_SPI_TransmitReceive+0x29c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d102      	bne.n	80092ac <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80092a6:	2310      	movs	r3, #16
 80092a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092aa:	e001      	b.n	80092b0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80092ac:	2308      	movs	r3, #8
 80092ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	4b69      	ldr	r3, [pc, #420]	@ (800945c <HAL_SPI_TransmitReceive+0x2a0>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	8879      	ldrh	r1, [r7, #2]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	6812      	ldr	r2, [r2, #0]
 80092c0:	430b      	orrs	r3, r1
 80092c2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0201 	orr.w	r2, r2, #1
 80092d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092dc:	d107      	bne.n	80092ee <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2b0f      	cmp	r3, #15
 80092f4:	f240 80a2 	bls.w	800943c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80092f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092fa:	089b      	lsrs	r3, r3, #2
 80092fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80092fe:	e094      	b.n	800942a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b02      	cmp	r3, #2
 800930c:	d120      	bne.n	8009350 <HAL_SPI_TransmitReceive+0x194>
 800930e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009310:	2b00      	cmp	r3, #0
 8009312:	d01d      	beq.n	8009350 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009314:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009316:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800931c:	429a      	cmp	r2, r3
 800931e:	d217      	bcs.n	8009350 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6812      	ldr	r2, [r2, #0]
 800932a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009330:	1d1a      	adds	r2, r3, #4
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800933c:	b29b      	uxth	r3, r3
 800933e:	3b01      	subs	r3, #1
 8009340:	b29a      	uxth	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800934e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009358:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	d065      	beq.n	800942a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b01      	cmp	r3, #1
 800936a:	d118      	bne.n	800939e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009374:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009376:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800937c:	1d1a      	adds	r2, r3, #4
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009388:	b29b      	uxth	r3, r3
 800938a:	3b01      	subs	r3, #1
 800938c:	b29a      	uxth	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800939a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800939c:	e045      	b.n	800942a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800939e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093a0:	8bfb      	ldrh	r3, [r7, #30]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d21d      	bcs.n	80093e2 <HAL_SPI_TransmitReceive+0x226>
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d018      	beq.n	80093e2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80093ba:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093c0:	1d1a      	adds	r2, r3, #4
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80093e0:	e023      	b.n	800942a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093e2:	f7f8 fe1f 	bl	8002024 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d803      	bhi.n	80093fa <HAL_SPI_TransmitReceive+0x23e>
 80093f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f8:	d102      	bne.n	8009400 <HAL_SPI_TransmitReceive+0x244>
 80093fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d114      	bne.n	800942a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 fe4b 	bl	800a09c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800940c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e1fd      	b.n	8009826 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800942a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800942c:	2b00      	cmp	r3, #0
 800942e:	f47f af67 	bne.w	8009300 <HAL_SPI_TransmitReceive+0x144>
 8009432:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009434:	2b00      	cmp	r3, #0
 8009436:	f47f af63 	bne.w	8009300 <HAL_SPI_TransmitReceive+0x144>
 800943a:	e1ce      	b.n	80097da <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	2b07      	cmp	r3, #7
 8009442:	f240 81c2 	bls.w	80097ca <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8009446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009448:	085b      	lsrs	r3, r3, #1
 800944a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800944c:	e0c9      	b.n	80095e2 <HAL_SPI_TransmitReceive+0x426>
 800944e:	bf00      	nop
 8009450:	40013000 	.word	0x40013000
 8009454:	40003800 	.word	0x40003800
 8009458:	40003c00 	.word	0x40003c00
 800945c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b02      	cmp	r3, #2
 800946c:	d11f      	bne.n	80094ae <HAL_SPI_TransmitReceive+0x2f2>
 800946e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009470:	2b00      	cmp	r3, #0
 8009472:	d01c      	beq.n	80094ae <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009474:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009476:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800947c:	429a      	cmp	r2, r3
 800947e:	d216      	bcs.n	80094ae <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009484:	881a      	ldrh	r2, [r3, #0]
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800948e:	1c9a      	adds	r2, r3, #2
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800949a:	b29b      	uxth	r3, r3
 800949c:	3b01      	subs	r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80094ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80094b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 8092 	beq.w	80095e2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d118      	bne.n	80094fe <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094d0:	6a3a      	ldr	r2, [r7, #32]
 80094d2:	8812      	ldrh	r2, [r2, #0]
 80094d4:	b292      	uxth	r2, r2
 80094d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094dc:	1c9a      	adds	r2, r3, #2
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80094fc:	e071      	b.n	80095e2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80094fe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009500:	8bfb      	ldrh	r3, [r7, #30]
 8009502:	429a      	cmp	r2, r3
 8009504:	d228      	bcs.n	8009558 <HAL_SPI_TransmitReceive+0x39c>
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d023      	beq.n	8009558 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009514:	6a3a      	ldr	r2, [r7, #32]
 8009516:	8812      	ldrh	r2, [r2, #0]
 8009518:	b292      	uxth	r2, r2
 800951a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009520:	1c9a      	adds	r2, r3, #2
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800952a:	6a3a      	ldr	r2, [r7, #32]
 800952c:	8812      	ldrh	r2, [r2, #0]
 800952e:	b292      	uxth	r2, r2
 8009530:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009536:	1c9a      	adds	r2, r3, #2
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009542:	b29b      	uxth	r3, r3
 8009544:	3b02      	subs	r3, #2
 8009546:	b29a      	uxth	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009554:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009556:	e044      	b.n	80095e2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009558:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800955a:	2b01      	cmp	r3, #1
 800955c:	d11d      	bne.n	800959a <HAL_SPI_TransmitReceive+0x3de>
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d018      	beq.n	800959a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800956c:	6a3a      	ldr	r2, [r7, #32]
 800956e:	8812      	ldrh	r2, [r2, #0]
 8009570:	b292      	uxth	r2, r2
 8009572:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009578:	1c9a      	adds	r2, r3, #2
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009584:	b29b      	uxth	r3, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009596:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009598:	e023      	b.n	80095e2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800959a:	f7f8 fd43 	bl	8002024 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d803      	bhi.n	80095b2 <HAL_SPI_TransmitReceive+0x3f6>
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b0:	d102      	bne.n	80095b8 <HAL_SPI_TransmitReceive+0x3fc>
 80095b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d114      	bne.n	80095e2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 fd6f 	bl	800a09c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e121      	b.n	8009826 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80095e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f47f af3b 	bne.w	8009460 <HAL_SPI_TransmitReceive+0x2a4>
 80095ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f47f af37 	bne.w	8009460 <HAL_SPI_TransmitReceive+0x2a4>
 80095f2:	e0f2      	b.n	80097da <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d121      	bne.n	8009646 <HAL_SPI_TransmitReceive+0x48a>
 8009602:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01e      	beq.n	8009646 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009608:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800960a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800960c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009610:	429a      	cmp	r2, r3
 8009612:	d218      	bcs.n	8009646 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3320      	adds	r3, #32
 800961e:	7812      	ldrb	r2, [r2, #0]
 8009620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009644:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800964e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 80ba 	beq.w	80097ca <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b01      	cmp	r3, #1
 8009662:	d11b      	bne.n	800969c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009670:	7812      	ldrb	r2, [r2, #0]
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009686:	b29b      	uxth	r3, r3
 8009688:	3b01      	subs	r3, #1
 800968a:	b29a      	uxth	r2, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009698:	853b      	strh	r3, [r7, #40]	@ 0x28
 800969a:	e096      	b.n	80097ca <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800969c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800969e:	8bfb      	ldrh	r3, [r7, #30]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d24a      	bcs.n	800973a <HAL_SPI_TransmitReceive+0x57e>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d045      	beq.n	800973a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096ba:	7812      	ldrb	r2, [r2, #0]
 80096bc:	b2d2      	uxtb	r2, r2
 80096be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096c4:	1c5a      	adds	r2, r3, #1
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096d6:	7812      	ldrb	r2, [r2, #0]
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096f2:	7812      	ldrb	r2, [r2, #0]
 80096f4:	b2d2      	uxtb	r2, r2
 80096f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800970e:	7812      	ldrb	r2, [r2, #0]
 8009710:	b2d2      	uxtb	r2, r2
 8009712:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009724:	b29b      	uxth	r3, r3
 8009726:	3b04      	subs	r3, #4
 8009728:	b29a      	uxth	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009736:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009738:	e047      	b.n	80097ca <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800973a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800973c:	2b03      	cmp	r3, #3
 800973e:	d820      	bhi.n	8009782 <HAL_SPI_TransmitReceive+0x5c6>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d01b      	beq.n	8009782 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009756:	7812      	ldrb	r2, [r2, #0]
 8009758:	b2d2      	uxtb	r2, r2
 800975a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009760:	1c5a      	adds	r2, r3, #1
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800976c:	b29b      	uxth	r3, r3
 800976e:	3b01      	subs	r3, #1
 8009770:	b29a      	uxth	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800977e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009780:	e023      	b.n	80097ca <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009782:	f7f8 fc4f 	bl	8002024 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800978e:	429a      	cmp	r2, r3
 8009790:	d803      	bhi.n	800979a <HAL_SPI_TransmitReceive+0x5de>
 8009792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009798:	d102      	bne.n	80097a0 <HAL_SPI_TransmitReceive+0x5e4>
 800979a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979c:	2b00      	cmp	r3, #0
 800979e:	d114      	bne.n	80097ca <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 fc7b 	bl	800a09c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e02d      	b.n	8009826 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80097ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f47f af11 	bne.w	80095f4 <HAL_SPI_TransmitReceive+0x438>
 80097d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f47f af0d 	bne.w	80095f4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e0:	2200      	movs	r2, #0
 80097e2:	2108      	movs	r1, #8
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 fcf9 	bl	800a1dc <SPI_WaitOnFlagUntilTimeout>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d007      	beq.n	8009800 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097f6:	f043 0220 	orr.w	r2, r3, #32
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 fc4b 	bl	800a09c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e000      	b.n	8009826 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8009824:	2300      	movs	r3, #0
  }
}
 8009826:	4618      	mov	r0, r3
 8009828:	3730      	adds	r7, #48	@ 0x30
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop

08009830 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3320      	adds	r3, #32
 8009844:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b01      	cmp	r3, #1
 8009850:	d001      	beq.n	8009856 <HAL_SPI_TransmitReceive_IT+0x26>
  {
    return HAL_BUSY;
 8009852:	2302      	movs	r3, #2
 8009854:	e0e9      	b.n	8009a2a <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d005      	beq.n	8009868 <HAL_SPI_TransmitReceive_IT+0x38>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <HAL_SPI_TransmitReceive_IT+0x38>
 8009862:	887b      	ldrh	r3, [r7, #2]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e0de      	b.n	8009a2a <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009872:	2b01      	cmp	r3, #1
 8009874:	d101      	bne.n	800987a <HAL_SPI_TransmitReceive_IT+0x4a>
 8009876:	2302      	movs	r3, #2
 8009878:	e0d7      	b.n	8009a2a <HAL_SPI_TransmitReceive_IT+0x1fa>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2205      	movs	r2, #5
 8009886:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	887a      	ldrh	r2, [r7, #2]
 800989c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	887a      	ldrh	r2, [r7, #2]
 80098a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	887a      	ldrh	r2, [r7, #2]
 80098b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	887a      	ldrh	r2, [r7, #2]
 80098ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	617b      	str	r3, [r7, #20]
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	2b0f      	cmp	r3, #15
 80098ce:	d906      	bls.n	80098de <HAL_SPI_TransmitReceive_IT+0xae>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4a59      	ldr	r2, [pc, #356]	@ (8009a38 <HAL_SPI_TransmitReceive_IT+0x208>)
 80098d4:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4a58      	ldr	r2, [pc, #352]	@ (8009a3c <HAL_SPI_TransmitReceive_IT+0x20c>)
 80098da:	671a      	str	r2, [r3, #112]	@ 0x70
 80098dc:	e010      	b.n	8009900 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	2b07      	cmp	r3, #7
 80098e4:	d906      	bls.n	80098f4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	4a55      	ldr	r2, [pc, #340]	@ (8009a40 <HAL_SPI_TransmitReceive_IT+0x210>)
 80098ea:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4a55      	ldr	r2, [pc, #340]	@ (8009a44 <HAL_SPI_TransmitReceive_IT+0x214>)
 80098f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80098f2:	e005      	b.n	8009900 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4a54      	ldr	r2, [pc, #336]	@ (8009a48 <HAL_SPI_TransmitReceive_IT+0x218>)
 80098f8:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4a53      	ldr	r2, [pc, #332]	@ (8009a4c <HAL_SPI_TransmitReceive_IT+0x21c>)
 80098fe:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800990e:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b4e      	ldr	r3, [pc, #312]	@ (8009a50 <HAL_SPI_TransmitReceive_IT+0x220>)
 8009918:	4013      	ands	r3, r2
 800991a:	8879      	ldrh	r1, [r7, #2]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	6812      	ldr	r2, [r2, #0]
 8009920:	430b      	orrs	r3, r1
 8009922:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0201 	orr.w	r2, r2, #1
 8009932:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8009934:	e054      	b.n	80099e0 <HAL_SPI_TransmitReceive_IT+0x1b0>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	2b0f      	cmp	r3, #15
 800993c:	d919      	bls.n	8009972 <HAL_SPI_TransmitReceive_IT+0x142>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6812      	ldr	r2, [r2, #0]
 8009948:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800994e:	1d1a      	adds	r2, r3, #4
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800995a:	b29b      	uxth	r3, r3
 800995c:	3b01      	subs	r3, #1
 800995e:	b29a      	uxth	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800996c:	b29b      	uxth	r3, r3
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	e036      	b.n	80099e0 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	2b07      	cmp	r3, #7
 8009978:	d918      	bls.n	80099ac <HAL_SPI_TransmitReceive_IT+0x17c>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800997e:	881a      	ldrh	r2, [r3, #0]
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009988:	1c9a      	adds	r2, r3, #2
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	b29a      	uxth	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	617b      	str	r3, [r7, #20]
 80099aa:	e019      	b.n	80099e0 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3320      	adds	r3, #32
 80099b6:	7812      	ldrb	r2, [r2, #0]
 80099b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099dc:	b29b      	uxth	r3, r3
 80099de:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d102      	bne.n	80099f4 <HAL_SPI_TransmitReceive_IT+0x1c4>
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1a0      	bne.n	8009936 <HAL_SPI_TransmitReceive_IT+0x106>
    }
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6919      	ldr	r1, [r3, #16]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	f240 736c 	movw	r3, #1900	@ 0x76c
 8009a0a:	430b      	orrs	r3, r1
 8009a0c:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a16:	d107      	bne.n	8009a28 <HAL_SPI_TransmitReceive_IT+0x1f8>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	0800a043 	.word	0x0800a043
 8009a3c:	08009f33 	.word	0x08009f33
 8009a40:	08009ed3 	.word	0x08009ed3
 8009a44:	08009fe5 	.word	0x08009fe5
 8009a48:	08009e75 	.word	0x08009e75
 8009a4c:	08009f8b 	.word	0x08009f8b
 8009a50:	ffff0000 	.word	0xffff0000

08009a54 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08a      	sub	sp, #40	@ 0x28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009a6c:	6a3a      	ldr	r2, [r7, #32]
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	4013      	ands	r3, r2
 8009a72:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a86:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3330      	adds	r3, #48	@ 0x30
 8009a8e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d010      	beq.n	8009abc <HAL_SPI_IRQHandler+0x68>
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	f003 0308 	and.w	r3, r3, #8
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ab2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f9b9 	bl	8009e2c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009aba:	e192      	b.n	8009de2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d113      	bne.n	8009aee <HAL_SPI_IRQHandler+0x9a>
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10e      	bne.n	8009aee <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d009      	beq.n	8009aee <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	4798      	blx	r3
    handled = 1UL;
 8009aea:	2301      	movs	r3, #1
 8009aec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10f      	bne.n	8009b18 <HAL_SPI_IRQHandler+0xc4>
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00a      	beq.n	8009b18 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d105      	bne.n	8009b18 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	4798      	blx	r3
    handled = 1UL;
 8009b14:	2301      	movs	r3, #1
 8009b16:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	f003 0320 	and.w	r3, r3, #32
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10f      	bne.n	8009b42 <HAL_SPI_IRQHandler+0xee>
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	f003 0302 	and.w	r3, r3, #2
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00a      	beq.n	8009b42 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d105      	bne.n	8009b42 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	4798      	blx	r3
    handled = 1UL;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f040 8147 	bne.w	8009dd8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f003 0308 	and.w	r3, r3, #8
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 808b 	beq.w	8009c6c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	699a      	ldr	r2, [r3, #24]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f042 0208 	orr.w	r2, r2, #8
 8009b64:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	699a      	ldr	r2, [r3, #24]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f042 0210 	orr.w	r2, r2, #16
 8009b74:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	699a      	ldr	r2, [r3, #24]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b84:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	691a      	ldr	r2, [r3, #16]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f022 0208 	bic.w	r2, r2, #8
 8009b94:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d13d      	bne.n	8009c20 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009ba4:	e036      	b.n	8009c14 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	2b0f      	cmp	r3, #15
 8009bac:	d90b      	bls.n	8009bc6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bb6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009bb8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bbe:	1d1a      	adds	r2, r3, #4
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	665a      	str	r2, [r3, #100]	@ 0x64
 8009bc4:	e01d      	b.n	8009c02 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	2b07      	cmp	r3, #7
 8009bcc:	d90b      	bls.n	8009be6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	8812      	ldrh	r2, [r2, #0]
 8009bd6:	b292      	uxth	r2, r2
 8009bd8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bde:	1c9a      	adds	r2, r3, #2
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	665a      	str	r2, [r3, #100]	@ 0x64
 8009be4:	e00d      	b.n	8009c02 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bf2:	7812      	ldrb	r2, [r2, #0]
 8009bf4:	b2d2      	uxtb	r2, r2
 8009bf6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1c2      	bne.n	8009ba6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fa3b 	bl	800a09c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d003      	beq.n	8009c40 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f8ed 	bl	8009e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009c3e:	e0d0      	b.n	8009de2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009c40:	7cfb      	ldrb	r3, [r7, #19]
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	d103      	bne.n	8009c4e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7f7 f818 	bl	8000c7c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009c4c:	e0c6      	b.n	8009ddc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009c4e:	7cfb      	ldrb	r3, [r7, #19]
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d103      	bne.n	8009c5c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f8d5 	bl	8009e04 <HAL_SPI_RxCpltCallback>
    return;
 8009c5a:	e0bf      	b.n	8009ddc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009c5c:	7cfb      	ldrb	r3, [r7, #19]
 8009c5e:	2b03      	cmp	r3, #3
 8009c60:	f040 80bc 	bne.w	8009ddc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f8c3 	bl	8009df0 <HAL_SPI_TxCpltCallback>
    return;
 8009c6a:	e0b7      	b.n	8009ddc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 80b5 	beq.w	8009de2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00f      	beq.n	8009ca2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c88:	f043 0204 	orr.w	r2, r3, #4
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	699a      	ldr	r2, [r3, #24]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ca0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00f      	beq.n	8009ccc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cb2:	f043 0201 	orr.w	r2, r3, #1
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	699a      	ldr	r2, [r3, #24]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cca:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00f      	beq.n	8009cf6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cdc:	f043 0208 	orr.w	r2, r3, #8
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699a      	ldr	r2, [r3, #24]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009cf4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	f003 0320 	and.w	r3, r3, #32
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00f      	beq.n	8009d20 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699a      	ldr	r2, [r3, #24]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0220 	orr.w	r2, r2, #32
 8009d1e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d05a      	beq.n	8009de0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f022 0201 	bic.w	r2, r2, #1
 8009d38:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6919      	ldr	r1, [r3, #16]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	4b28      	ldr	r3, [pc, #160]	@ (8009de8 <HAL_SPI_IRQHandler+0x394>)
 8009d46:	400b      	ands	r3, r1
 8009d48:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009d50:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009d54:	d138      	bne.n	8009dc8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d64:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d013      	beq.n	8009d96 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d72:	4a1e      	ldr	r2, [pc, #120]	@ (8009dec <HAL_SPI_IRQHandler+0x398>)
 8009d74:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7f8 fe78 	bl	8002a70 <HAL_DMA_Abort_IT>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d007      	beq.n	8009d96 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d020      	beq.n	8009de0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009da2:	4a12      	ldr	r2, [pc, #72]	@ (8009dec <HAL_SPI_IRQHandler+0x398>)
 8009da4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7f8 fe60 	bl	8002a70 <HAL_DMA_Abort_IT>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d014      	beq.n	8009de0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009dc6:	e00b      	b.n	8009de0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f821 	bl	8009e18 <HAL_SPI_ErrorCallback>
    return;
 8009dd6:	e003      	b.n	8009de0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009dd8:	bf00      	nop
 8009dda:	e002      	b.n	8009de2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009ddc:	bf00      	nop
 8009dde:	e000      	b.n	8009de2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009de0:	bf00      	nop
  }
}
 8009de2:	3728      	adds	r7, #40	@ 0x28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	fffffc94 	.word	0xfffffc94
 8009dec:	08009e41 	.word	0x08009e41

08009df0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f7ff ffd6 	bl	8009e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e6c:	bf00      	nop
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e88:	7812      	ldrb	r2, [r2, #0]
 8009e8a:	b2d2      	uxtb	r2, r2
 8009e8c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d107      	bne.n	8009ec6 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	691a      	ldr	r2, [r3, #16]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f022 0201 	bic.w	r2, r2, #1
 8009ec4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3330      	adds	r3, #48	@ 0x30
 8009ee0:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	8812      	ldrh	r2, [r2, #0]
 8009eea:	b292      	uxth	r2, r2
 8009eec:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ef2:	1c9a      	adds	r2, r3, #2
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	3b01      	subs	r3, #1
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d107      	bne.n	8009f26 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f022 0201 	bic.w	r2, r2, #1
 8009f24:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b083      	sub	sp, #12
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f42:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009f44:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f4a:	1d1a      	adds	r2, r3, #4
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d107      	bne.n	8009f7e <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0201 	bic.w	r2, r2, #1
 8009f7c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009f7e:	bf00      	nop
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b083      	sub	sp, #12
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3320      	adds	r3, #32
 8009f9c:	7812      	ldrb	r2, [r2, #0]
 8009f9e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d107      	bne.n	8009fd8 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	691a      	ldr	r2, [r3, #16]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f022 0202 	bic.w	r2, r2, #2
 8009fd6:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3320      	adds	r3, #32
 8009ff2:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ff8:	881a      	ldrh	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a002:	1c9a      	adds	r2, r3, #2
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a00e:	b29b      	uxth	r3, r3
 800a010:	3b01      	subs	r3, #1
 800a012:	b29a      	uxth	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a020:	b29b      	uxth	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d107      	bne.n	800a036 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	691a      	ldr	r2, [r3, #16]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f022 0202 	bic.w	r2, r2, #2
 800a034:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800a042:	b480      	push	{r7}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6812      	ldr	r2, [r2, #0]
 800a054:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a05a:	1d1a      	adds	r2, r3, #4
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a066:	b29b      	uxth	r3, r3
 800a068:	3b01      	subs	r3, #1
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a078:	b29b      	uxth	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d107      	bne.n	800a08e <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	691a      	ldr	r2, [r3, #16]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 0202 	bic.w	r2, r2, #2
 800a08c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a08e:	bf00      	nop
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
	...

0800a09c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	699a      	ldr	r2, [r3, #24]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f042 0208 	orr.w	r2, r2, #8
 800a0ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699a      	ldr	r2, [r3, #24]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0210 	orr.w	r2, r2, #16
 800a0ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f022 0201 	bic.w	r2, r2, #1
 800a0da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6919      	ldr	r1, [r3, #16]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	4b3c      	ldr	r3, [pc, #240]	@ (800a1d8 <SPI_CloseTransfer+0x13c>)
 800a0e8:	400b      	ands	r3, r1
 800a0ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689a      	ldr	r2, [r3, #8]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a0fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b04      	cmp	r3, #4
 800a106:	d014      	beq.n	800a132 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f003 0320 	and.w	r3, r3, #32
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00f      	beq.n	800a132 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a118:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	699a      	ldr	r2, [r3, #24]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f042 0220 	orr.w	r2, r2, #32
 800a130:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d014      	beq.n	800a168 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00f      	beq.n	800a168 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a14e:	f043 0204 	orr.w	r2, r3, #4
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	699a      	ldr	r2, [r3, #24]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a166:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00f      	beq.n	800a192 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a178:	f043 0201 	orr.w	r2, r3, #1
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	699a      	ldr	r2, [r3, #24]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a190:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00f      	beq.n	800a1bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1a2:	f043 0208 	orr.w	r2, r3, #8
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	699a      	ldr	r2, [r3, #24]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a1cc:	bf00      	nop
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	fffffc90 	.word	0xfffffc90

0800a1dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a1ec:	e010      	b.n	800a210 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1ee:	f7f7 ff19 	bl	8002024 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d803      	bhi.n	800a206 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a204:	d102      	bne.n	800a20c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e00f      	b.n	800a230 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	695a      	ldr	r2, [r3, #20]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	4013      	ands	r3, r2
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	bf0c      	ite	eq
 800a220:	2301      	moveq	r3, #1
 800a222:	2300      	movne	r3, #0
 800a224:	b2db      	uxtb	r3, r3
 800a226:	461a      	mov	r2, r3
 800a228:	79fb      	ldrb	r3, [r7, #7]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d0df      	beq.n	800a1ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a244:	095b      	lsrs	r3, r3, #5
 800a246:	3301      	adds	r3, #1
 800a248:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	3301      	adds	r3, #1
 800a250:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	3307      	adds	r3, #7
 800a256:	08db      	lsrs	r3, r3, #3
 800a258:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b082      	sub	sp, #8
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e049      	b.n	800a314 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d106      	bne.n	800a29a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7f7 fab5 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2202      	movs	r2, #2
 800a29e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	f000 fdb1 	bl	800ae14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d001      	beq.n	800a334 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e056      	b.n	800a3e2 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2202      	movs	r2, #2
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a2b      	ldr	r2, [pc, #172]	@ (800a3f0 <HAL_TIM_Base_Start+0xd4>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d02c      	beq.n	800a3a0 <HAL_TIM_Base_Start+0x84>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a34e:	d027      	beq.n	800a3a0 <HAL_TIM_Base_Start+0x84>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a27      	ldr	r2, [pc, #156]	@ (800a3f4 <HAL_TIM_Base_Start+0xd8>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d022      	beq.n	800a3a0 <HAL_TIM_Base_Start+0x84>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a26      	ldr	r2, [pc, #152]	@ (800a3f8 <HAL_TIM_Base_Start+0xdc>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d01d      	beq.n	800a3a0 <HAL_TIM_Base_Start+0x84>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a24      	ldr	r2, [pc, #144]	@ (800a3fc <HAL_TIM_Base_Start+0xe0>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d018      	beq.n	800a3a0 <HAL_TIM_Base_Start+0x84>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a23      	ldr	r2, [pc, #140]	@ (800a400 <HAL_TIM_Base_Start+0xe4>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d013      	beq.n	800a3a0 <HAL_TIM_Base_Start+0x84>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a21      	ldr	r2, [pc, #132]	@ (800a404 <HAL_TIM_Base_Start+0xe8>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d00e      	beq.n	800a3a0 <HAL_TIM_Base_Start+0x84>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a20      	ldr	r2, [pc, #128]	@ (800a408 <HAL_TIM_Base_Start+0xec>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d009      	beq.n	800a3a0 <HAL_TIM_Base_Start+0x84>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a1e      	ldr	r2, [pc, #120]	@ (800a40c <HAL_TIM_Base_Start+0xf0>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d004      	beq.n	800a3a0 <HAL_TIM_Base_Start+0x84>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a1d      	ldr	r2, [pc, #116]	@ (800a410 <HAL_TIM_Base_Start+0xf4>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d115      	bne.n	800a3cc <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	4b1b      	ldr	r3, [pc, #108]	@ (800a414 <HAL_TIM_Base_Start+0xf8>)
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b06      	cmp	r3, #6
 800a3b0:	d015      	beq.n	800a3de <HAL_TIM_Base_Start+0xc2>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3b8:	d011      	beq.n	800a3de <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f042 0201 	orr.w	r2, r2, #1
 800a3c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ca:	e008      	b.n	800a3de <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f042 0201 	orr.w	r2, r2, #1
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	e000      	b.n	800a3e0 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	40010000 	.word	0x40010000
 800a3f4:	40000400 	.word	0x40000400
 800a3f8:	40000800 	.word	0x40000800
 800a3fc:	40000c00 	.word	0x40000c00
 800a400:	40010400 	.word	0x40010400
 800a404:	40001800 	.word	0x40001800
 800a408:	40014000 	.word	0x40014000
 800a40c:	4000e000 	.word	0x4000e000
 800a410:	4000e400 	.word	0x4000e400
 800a414:	00010007 	.word	0x00010007

0800a418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d001      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e05e      	b.n	800a4ee <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2202      	movs	r2, #2
 800a434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f042 0201 	orr.w	r2, r2, #1
 800a446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a2b      	ldr	r2, [pc, #172]	@ (800a4fc <HAL_TIM_Base_Start_IT+0xe4>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d02c      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0x94>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a45a:	d027      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0x94>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a27      	ldr	r2, [pc, #156]	@ (800a500 <HAL_TIM_Base_Start_IT+0xe8>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d022      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0x94>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a26      	ldr	r2, [pc, #152]	@ (800a504 <HAL_TIM_Base_Start_IT+0xec>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d01d      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0x94>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a24      	ldr	r2, [pc, #144]	@ (800a508 <HAL_TIM_Base_Start_IT+0xf0>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d018      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0x94>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a23      	ldr	r2, [pc, #140]	@ (800a50c <HAL_TIM_Base_Start_IT+0xf4>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d013      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0x94>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a21      	ldr	r2, [pc, #132]	@ (800a510 <HAL_TIM_Base_Start_IT+0xf8>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00e      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0x94>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a20      	ldr	r2, [pc, #128]	@ (800a514 <HAL_TIM_Base_Start_IT+0xfc>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d009      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0x94>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a1e      	ldr	r2, [pc, #120]	@ (800a518 <HAL_TIM_Base_Start_IT+0x100>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d004      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0x94>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a1d      	ldr	r2, [pc, #116]	@ (800a51c <HAL_TIM_Base_Start_IT+0x104>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d115      	bne.n	800a4d8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a520 <HAL_TIM_Base_Start_IT+0x108>)
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b06      	cmp	r3, #6
 800a4bc:	d015      	beq.n	800a4ea <HAL_TIM_Base_Start_IT+0xd2>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4c4:	d011      	beq.n	800a4ea <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0201 	orr.w	r2, r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d6:	e008      	b.n	800a4ea <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f042 0201 	orr.w	r2, r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	e000      	b.n	800a4ec <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	40010000 	.word	0x40010000
 800a500:	40000400 	.word	0x40000400
 800a504:	40000800 	.word	0x40000800
 800a508:	40000c00 	.word	0x40000c00
 800a50c:	40010400 	.word	0x40010400
 800a510:	40001800 	.word	0x40001800
 800a514:	40014000 	.word	0x40014000
 800a518:	4000e000 	.word	0x4000e000
 800a51c:	4000e400 	.word	0x4000e400
 800a520:	00010007 	.word	0x00010007

0800a524 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e049      	b.n	800a5ca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d106      	bne.n	800a550 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f841 	bl	800a5d2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2202      	movs	r2, #2
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3304      	adds	r3, #4
 800a560:	4619      	mov	r1, r3
 800a562:	4610      	mov	r0, r2
 800a564:	f000 fc56 	bl	800ae14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e049      	b.n	800a68c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b00      	cmp	r3, #0
 800a602:	d106      	bne.n	800a612 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f841 	bl	800a694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2202      	movs	r2, #2
 800a616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3304      	adds	r3, #4
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f000 fbf5 	bl	800ae14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f003 0302 	and.w	r3, r3, #2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d020      	beq.n	800a70c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d01b      	beq.n	800a70c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f06f 0202 	mvn.w	r2, #2
 800a6dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	f003 0303 	and.w	r3, r3, #3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fb70 	bl	800add8 <HAL_TIM_IC_CaptureCallback>
 800a6f8:	e005      	b.n	800a706 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fb62 	bl	800adc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fb73 	bl	800adec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	f003 0304 	and.w	r3, r3, #4
 800a712:	2b00      	cmp	r3, #0
 800a714:	d020      	beq.n	800a758 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d01b      	beq.n	800a758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f06f 0204 	mvn.w	r2, #4
 800a728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2202      	movs	r2, #2
 800a72e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fb4a 	bl	800add8 <HAL_TIM_IC_CaptureCallback>
 800a744:	e005      	b.n	800a752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fb3c 	bl	800adc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fb4d 	bl	800adec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f003 0308 	and.w	r3, r3, #8
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d020      	beq.n	800a7a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f003 0308 	and.w	r3, r3, #8
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01b      	beq.n	800a7a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f06f 0208 	mvn.w	r2, #8
 800a774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2204      	movs	r2, #4
 800a77a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	f003 0303 	and.w	r3, r3, #3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fb24 	bl	800add8 <HAL_TIM_IC_CaptureCallback>
 800a790:	e005      	b.n	800a79e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fb16 	bl	800adc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fb27 	bl	800adec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	f003 0310 	and.w	r3, r3, #16
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d020      	beq.n	800a7f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f003 0310 	and.w	r3, r3, #16
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d01b      	beq.n	800a7f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f06f 0210 	mvn.w	r2, #16
 800a7c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2208      	movs	r2, #8
 800a7c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fafe 	bl	800add8 <HAL_TIM_IC_CaptureCallback>
 800a7dc:	e005      	b.n	800a7ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 faf0 	bl	800adc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fb01 	bl	800adec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00c      	beq.n	800a814 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f003 0301 	and.w	r3, r3, #1
 800a800:	2b00      	cmp	r3, #0
 800a802:	d007      	beq.n	800a814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f06f 0201 	mvn.w	r2, #1
 800a80c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7f6 fe06 	bl	8001420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d104      	bne.n	800a828 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00c      	beq.n	800a842 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d007      	beq.n	800a842 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f001 f83b 	bl	800b8b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00c      	beq.n	800a866 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a852:	2b00      	cmp	r3, #0
 800a854:	d007      	beq.n	800a866 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 f833 	bl	800b8cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00c      	beq.n	800a88a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a876:	2b00      	cmp	r3, #0
 800a878:	d007      	beq.n	800a88a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fabb 	bl	800ae00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	f003 0320 	and.w	r3, r3, #32
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00c      	beq.n	800a8ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f003 0320 	and.w	r3, r3, #32
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d007      	beq.n	800a8ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f06f 0220 	mvn.w	r2, #32
 800a8a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fffb 	bl	800b8a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8ae:	bf00      	nop
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
	...

0800a8b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d101      	bne.n	800a8d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	e066      	b.n	800a9a4 <HAL_TIM_OC_ConfigChannel+0xec>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2b14      	cmp	r3, #20
 800a8e2:	d857      	bhi.n	800a994 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a8e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ec <HAL_TIM_OC_ConfigChannel+0x34>)
 800a8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ea:	bf00      	nop
 800a8ec:	0800a941 	.word	0x0800a941
 800a8f0:	0800a995 	.word	0x0800a995
 800a8f4:	0800a995 	.word	0x0800a995
 800a8f8:	0800a995 	.word	0x0800a995
 800a8fc:	0800a94f 	.word	0x0800a94f
 800a900:	0800a995 	.word	0x0800a995
 800a904:	0800a995 	.word	0x0800a995
 800a908:	0800a995 	.word	0x0800a995
 800a90c:	0800a95d 	.word	0x0800a95d
 800a910:	0800a995 	.word	0x0800a995
 800a914:	0800a995 	.word	0x0800a995
 800a918:	0800a995 	.word	0x0800a995
 800a91c:	0800a96b 	.word	0x0800a96b
 800a920:	0800a995 	.word	0x0800a995
 800a924:	0800a995 	.word	0x0800a995
 800a928:	0800a995 	.word	0x0800a995
 800a92c:	0800a979 	.word	0x0800a979
 800a930:	0800a995 	.word	0x0800a995
 800a934:	0800a995 	.word	0x0800a995
 800a938:	0800a995 	.word	0x0800a995
 800a93c:	0800a987 	.word	0x0800a987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68b9      	ldr	r1, [r7, #8]
 800a946:	4618      	mov	r0, r3
 800a948:	f000 fb10 	bl	800af6c <TIM_OC1_SetConfig>
      break;
 800a94c:	e025      	b.n	800a99a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68b9      	ldr	r1, [r7, #8]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 fb99 	bl	800b08c <TIM_OC2_SetConfig>
      break;
 800a95a:	e01e      	b.n	800a99a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68b9      	ldr	r1, [r7, #8]
 800a962:	4618      	mov	r0, r3
 800a964:	f000 fc1c 	bl	800b1a0 <TIM_OC3_SetConfig>
      break;
 800a968:	e017      	b.n	800a99a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68b9      	ldr	r1, [r7, #8]
 800a970:	4618      	mov	r0, r3
 800a972:	f000 fc9d 	bl	800b2b0 <TIM_OC4_SetConfig>
      break;
 800a976:	e010      	b.n	800a99a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fd00 	bl	800b384 <TIM_OC5_SetConfig>
      break;
 800a984:	e009      	b.n	800a99a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 fd5d 	bl	800b44c <TIM_OC6_SetConfig>
      break;
 800a992:	e002      	b.n	800a99a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	75fb      	strb	r3, [r7, #23]
      break;
 800a998:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d101      	bne.n	800a9ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	e0ff      	b.n	800abca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b14      	cmp	r3, #20
 800a9d6:	f200 80f0 	bhi.w	800abba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a9da:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800aa35 	.word	0x0800aa35
 800a9e4:	0800abbb 	.word	0x0800abbb
 800a9e8:	0800abbb 	.word	0x0800abbb
 800a9ec:	0800abbb 	.word	0x0800abbb
 800a9f0:	0800aa75 	.word	0x0800aa75
 800a9f4:	0800abbb 	.word	0x0800abbb
 800a9f8:	0800abbb 	.word	0x0800abbb
 800a9fc:	0800abbb 	.word	0x0800abbb
 800aa00:	0800aab7 	.word	0x0800aab7
 800aa04:	0800abbb 	.word	0x0800abbb
 800aa08:	0800abbb 	.word	0x0800abbb
 800aa0c:	0800abbb 	.word	0x0800abbb
 800aa10:	0800aaf7 	.word	0x0800aaf7
 800aa14:	0800abbb 	.word	0x0800abbb
 800aa18:	0800abbb 	.word	0x0800abbb
 800aa1c:	0800abbb 	.word	0x0800abbb
 800aa20:	0800ab39 	.word	0x0800ab39
 800aa24:	0800abbb 	.word	0x0800abbb
 800aa28:	0800abbb 	.word	0x0800abbb
 800aa2c:	0800abbb 	.word	0x0800abbb
 800aa30:	0800ab79 	.word	0x0800ab79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68b9      	ldr	r1, [r7, #8]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 fa96 	bl	800af6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699a      	ldr	r2, [r3, #24]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0208 	orr.w	r2, r2, #8
 800aa4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699a      	ldr	r2, [r3, #24]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f022 0204 	bic.w	r2, r2, #4
 800aa5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6999      	ldr	r1, [r3, #24]
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	691a      	ldr	r2, [r3, #16]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	430a      	orrs	r2, r1
 800aa70:	619a      	str	r2, [r3, #24]
      break;
 800aa72:	e0a5      	b.n	800abc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 fb06 	bl	800b08c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	699a      	ldr	r2, [r3, #24]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	699a      	ldr	r2, [r3, #24]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6999      	ldr	r1, [r3, #24]
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	021a      	lsls	r2, r3, #8
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	430a      	orrs	r2, r1
 800aab2:	619a      	str	r2, [r3, #24]
      break;
 800aab4:	e084      	b.n	800abc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68b9      	ldr	r1, [r7, #8]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 fb6f 	bl	800b1a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	69da      	ldr	r2, [r3, #28]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f042 0208 	orr.w	r2, r2, #8
 800aad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	69da      	ldr	r2, [r3, #28]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f022 0204 	bic.w	r2, r2, #4
 800aae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	69d9      	ldr	r1, [r3, #28]
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	691a      	ldr	r2, [r3, #16]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	430a      	orrs	r2, r1
 800aaf2:	61da      	str	r2, [r3, #28]
      break;
 800aaf4:	e064      	b.n	800abc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68b9      	ldr	r1, [r7, #8]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 fbd7 	bl	800b2b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	69da      	ldr	r2, [r3, #28]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	69da      	ldr	r2, [r3, #28]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69d9      	ldr	r1, [r3, #28]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	021a      	lsls	r2, r3, #8
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	61da      	str	r2, [r3, #28]
      break;
 800ab36:	e043      	b.n	800abc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68b9      	ldr	r1, [r7, #8]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 fc20 	bl	800b384 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0208 	orr.w	r2, r2, #8
 800ab52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f022 0204 	bic.w	r2, r2, #4
 800ab62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	691a      	ldr	r2, [r3, #16]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ab76:	e023      	b.n	800abc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68b9      	ldr	r1, [r7, #8]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fc64 	bl	800b44c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aba2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	021a      	lsls	r2, r3, #8
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800abb8:	e002      	b.n	800abc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	75fb      	strb	r3, [r7, #23]
      break;
 800abbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop

0800abd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d101      	bne.n	800abf0 <HAL_TIM_ConfigClockSource+0x1c>
 800abec:	2302      	movs	r3, #2
 800abee:	e0dc      	b.n	800adaa <HAL_TIM_ConfigClockSource+0x1d6>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2202      	movs	r2, #2
 800abfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	4b6a      	ldr	r3, [pc, #424]	@ (800adb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a64      	ldr	r2, [pc, #400]	@ (800adb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	f000 80a9 	beq.w	800ad7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ac2c:	4a62      	ldr	r2, [pc, #392]	@ (800adb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	f200 80ae 	bhi.w	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac34:	4a61      	ldr	r2, [pc, #388]	@ (800adbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	f000 80a1 	beq.w	800ad7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ac3c:	4a5f      	ldr	r2, [pc, #380]	@ (800adbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	f200 80a6 	bhi.w	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac44:	4a5e      	ldr	r2, [pc, #376]	@ (800adc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	f000 8099 	beq.w	800ad7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ac4c:	4a5c      	ldr	r2, [pc, #368]	@ (800adc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	f200 809e 	bhi.w	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ac58:	f000 8091 	beq.w	800ad7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ac5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ac60:	f200 8096 	bhi.w	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac68:	f000 8089 	beq.w	800ad7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ac6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac70:	f200 808e 	bhi.w	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac78:	d03e      	beq.n	800acf8 <HAL_TIM_ConfigClockSource+0x124>
 800ac7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac7e:	f200 8087 	bhi.w	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac86:	f000 8086 	beq.w	800ad96 <HAL_TIM_ConfigClockSource+0x1c2>
 800ac8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac8e:	d87f      	bhi.n	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac90:	2b70      	cmp	r3, #112	@ 0x70
 800ac92:	d01a      	beq.n	800acca <HAL_TIM_ConfigClockSource+0xf6>
 800ac94:	2b70      	cmp	r3, #112	@ 0x70
 800ac96:	d87b      	bhi.n	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac98:	2b60      	cmp	r3, #96	@ 0x60
 800ac9a:	d050      	beq.n	800ad3e <HAL_TIM_ConfigClockSource+0x16a>
 800ac9c:	2b60      	cmp	r3, #96	@ 0x60
 800ac9e:	d877      	bhi.n	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800aca0:	2b50      	cmp	r3, #80	@ 0x50
 800aca2:	d03c      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x14a>
 800aca4:	2b50      	cmp	r3, #80	@ 0x50
 800aca6:	d873      	bhi.n	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800aca8:	2b40      	cmp	r3, #64	@ 0x40
 800acaa:	d058      	beq.n	800ad5e <HAL_TIM_ConfigClockSource+0x18a>
 800acac:	2b40      	cmp	r3, #64	@ 0x40
 800acae:	d86f      	bhi.n	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800acb0:	2b30      	cmp	r3, #48	@ 0x30
 800acb2:	d064      	beq.n	800ad7e <HAL_TIM_ConfigClockSource+0x1aa>
 800acb4:	2b30      	cmp	r3, #48	@ 0x30
 800acb6:	d86b      	bhi.n	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800acb8:	2b20      	cmp	r3, #32
 800acba:	d060      	beq.n	800ad7e <HAL_TIM_ConfigClockSource+0x1aa>
 800acbc:	2b20      	cmp	r3, #32
 800acbe:	d867      	bhi.n	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d05c      	beq.n	800ad7e <HAL_TIM_ConfigClockSource+0x1aa>
 800acc4:	2b10      	cmp	r3, #16
 800acc6:	d05a      	beq.n	800ad7e <HAL_TIM_ConfigClockSource+0x1aa>
 800acc8:	e062      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800acda:	f000 fc9b 	bl	800b614 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800acec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	609a      	str	r2, [r3, #8]
      break;
 800acf6:	e04f      	b.n	800ad98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad08:	f000 fc84 	bl	800b614 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ad1a:	609a      	str	r2, [r3, #8]
      break;
 800ad1c:	e03c      	b.n	800ad98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	f000 fbf4 	bl	800b518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2150      	movs	r1, #80	@ 0x50
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fc4e 	bl	800b5d8 <TIM_ITRx_SetConfig>
      break;
 800ad3c:	e02c      	b.n	800ad98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f000 fc13 	bl	800b576 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2160      	movs	r1, #96	@ 0x60
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 fc3e 	bl	800b5d8 <TIM_ITRx_SetConfig>
      break;
 800ad5c:	e01c      	b.n	800ad98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f000 fbd4 	bl	800b518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2140      	movs	r1, #64	@ 0x40
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 fc2e 	bl	800b5d8 <TIM_ITRx_SetConfig>
      break;
 800ad7c:	e00c      	b.n	800ad98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f000 fc25 	bl	800b5d8 <TIM_ITRx_SetConfig>
      break;
 800ad8e:	e003      	b.n	800ad98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	73fb      	strb	r3, [r7, #15]
      break;
 800ad94:	e000      	b.n	800ad98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ad96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	ffceff88 	.word	0xffceff88
 800adb8:	00100040 	.word	0x00100040
 800adbc:	00100030 	.word	0x00100030
 800adc0:	00100020 	.word	0x00100020

0800adc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a47      	ldr	r2, [pc, #284]	@ (800af44 <TIM_Base_SetConfig+0x130>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d013      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae32:	d00f      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a44      	ldr	r2, [pc, #272]	@ (800af48 <TIM_Base_SetConfig+0x134>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d00b      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a43      	ldr	r2, [pc, #268]	@ (800af4c <TIM_Base_SetConfig+0x138>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d007      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a42      	ldr	r2, [pc, #264]	@ (800af50 <TIM_Base_SetConfig+0x13c>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d003      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a41      	ldr	r2, [pc, #260]	@ (800af54 <TIM_Base_SetConfig+0x140>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d108      	bne.n	800ae66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a36      	ldr	r2, [pc, #216]	@ (800af44 <TIM_Base_SetConfig+0x130>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d027      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae74:	d023      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a33      	ldr	r2, [pc, #204]	@ (800af48 <TIM_Base_SetConfig+0x134>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d01f      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a32      	ldr	r2, [pc, #200]	@ (800af4c <TIM_Base_SetConfig+0x138>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d01b      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a31      	ldr	r2, [pc, #196]	@ (800af50 <TIM_Base_SetConfig+0x13c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d017      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a30      	ldr	r2, [pc, #192]	@ (800af54 <TIM_Base_SetConfig+0x140>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d013      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a2f      	ldr	r2, [pc, #188]	@ (800af58 <TIM_Base_SetConfig+0x144>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d00f      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a2e      	ldr	r2, [pc, #184]	@ (800af5c <TIM_Base_SetConfig+0x148>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d00b      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a2d      	ldr	r2, [pc, #180]	@ (800af60 <TIM_Base_SetConfig+0x14c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d007      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a2c      	ldr	r2, [pc, #176]	@ (800af64 <TIM_Base_SetConfig+0x150>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d003      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a2b      	ldr	r2, [pc, #172]	@ (800af68 <TIM_Base_SetConfig+0x154>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d108      	bne.n	800aed0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	689a      	ldr	r2, [r3, #8]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a14      	ldr	r2, [pc, #80]	@ (800af44 <TIM_Base_SetConfig+0x130>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d00f      	beq.n	800af16 <TIM_Base_SetConfig+0x102>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a16      	ldr	r2, [pc, #88]	@ (800af54 <TIM_Base_SetConfig+0x140>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d00b      	beq.n	800af16 <TIM_Base_SetConfig+0x102>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a15      	ldr	r2, [pc, #84]	@ (800af58 <TIM_Base_SetConfig+0x144>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d007      	beq.n	800af16 <TIM_Base_SetConfig+0x102>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a14      	ldr	r2, [pc, #80]	@ (800af5c <TIM_Base_SetConfig+0x148>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d003      	beq.n	800af16 <TIM_Base_SetConfig+0x102>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a13      	ldr	r2, [pc, #76]	@ (800af60 <TIM_Base_SetConfig+0x14c>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d103      	bne.n	800af1e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	691a      	ldr	r2, [r3, #16]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f043 0204 	orr.w	r2, r3, #4
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	601a      	str	r2, [r3, #0]
}
 800af36:	bf00      	nop
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	40010000 	.word	0x40010000
 800af48:	40000400 	.word	0x40000400
 800af4c:	40000800 	.word	0x40000800
 800af50:	40000c00 	.word	0x40000c00
 800af54:	40010400 	.word	0x40010400
 800af58:	40014000 	.word	0x40014000
 800af5c:	40014400 	.word	0x40014400
 800af60:	40014800 	.word	0x40014800
 800af64:	4000e000 	.word	0x4000e000
 800af68:	4000e400 	.word	0x4000e400

0800af6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	f023 0201 	bic.w	r2, r3, #1
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	4b37      	ldr	r3, [pc, #220]	@ (800b074 <TIM_OC1_SetConfig+0x108>)
 800af98:	4013      	ands	r3, r2
 800af9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f023 0303 	bic.w	r3, r3, #3
 800afa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f023 0302 	bic.w	r3, r3, #2
 800afb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a2d      	ldr	r2, [pc, #180]	@ (800b078 <TIM_OC1_SetConfig+0x10c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00f      	beq.n	800afe8 <TIM_OC1_SetConfig+0x7c>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a2c      	ldr	r2, [pc, #176]	@ (800b07c <TIM_OC1_SetConfig+0x110>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d00b      	beq.n	800afe8 <TIM_OC1_SetConfig+0x7c>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a2b      	ldr	r2, [pc, #172]	@ (800b080 <TIM_OC1_SetConfig+0x114>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d007      	beq.n	800afe8 <TIM_OC1_SetConfig+0x7c>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a2a      	ldr	r2, [pc, #168]	@ (800b084 <TIM_OC1_SetConfig+0x118>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d003      	beq.n	800afe8 <TIM_OC1_SetConfig+0x7c>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a29      	ldr	r2, [pc, #164]	@ (800b088 <TIM_OC1_SetConfig+0x11c>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d10c      	bne.n	800b002 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f023 0308 	bic.w	r3, r3, #8
 800afee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f023 0304 	bic.w	r3, r3, #4
 800b000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a1c      	ldr	r2, [pc, #112]	@ (800b078 <TIM_OC1_SetConfig+0x10c>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d00f      	beq.n	800b02a <TIM_OC1_SetConfig+0xbe>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a1b      	ldr	r2, [pc, #108]	@ (800b07c <TIM_OC1_SetConfig+0x110>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d00b      	beq.n	800b02a <TIM_OC1_SetConfig+0xbe>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a1a      	ldr	r2, [pc, #104]	@ (800b080 <TIM_OC1_SetConfig+0x114>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d007      	beq.n	800b02a <TIM_OC1_SetConfig+0xbe>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a19      	ldr	r2, [pc, #100]	@ (800b084 <TIM_OC1_SetConfig+0x118>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d003      	beq.n	800b02a <TIM_OC1_SetConfig+0xbe>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a18      	ldr	r2, [pc, #96]	@ (800b088 <TIM_OC1_SetConfig+0x11c>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d111      	bne.n	800b04e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4313      	orrs	r3, r2
 800b042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	621a      	str	r2, [r3, #32]
}
 800b068:	bf00      	nop
 800b06a:	371c      	adds	r7, #28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	fffeff8f 	.word	0xfffeff8f
 800b078:	40010000 	.word	0x40010000
 800b07c:	40010400 	.word	0x40010400
 800b080:	40014000 	.word	0x40014000
 800b084:	40014400 	.word	0x40014400
 800b088:	40014800 	.word	0x40014800

0800b08c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b087      	sub	sp, #28
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	f023 0210 	bic.w	r2, r3, #16
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4b34      	ldr	r3, [pc, #208]	@ (800b188 <TIM_OC2_SetConfig+0xfc>)
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	021b      	lsls	r3, r3, #8
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f023 0320 	bic.w	r3, r3, #32
 800b0d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	011b      	lsls	r3, r3, #4
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a29      	ldr	r2, [pc, #164]	@ (800b18c <TIM_OC2_SetConfig+0x100>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d003      	beq.n	800b0f4 <TIM_OC2_SetConfig+0x68>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a28      	ldr	r2, [pc, #160]	@ (800b190 <TIM_OC2_SetConfig+0x104>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d10d      	bne.n	800b110 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	011b      	lsls	r3, r3, #4
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	4313      	orrs	r3, r2
 800b106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b10e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a1e      	ldr	r2, [pc, #120]	@ (800b18c <TIM_OC2_SetConfig+0x100>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d00f      	beq.n	800b138 <TIM_OC2_SetConfig+0xac>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a1d      	ldr	r2, [pc, #116]	@ (800b190 <TIM_OC2_SetConfig+0x104>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d00b      	beq.n	800b138 <TIM_OC2_SetConfig+0xac>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a1c      	ldr	r2, [pc, #112]	@ (800b194 <TIM_OC2_SetConfig+0x108>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d007      	beq.n	800b138 <TIM_OC2_SetConfig+0xac>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a1b      	ldr	r2, [pc, #108]	@ (800b198 <TIM_OC2_SetConfig+0x10c>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d003      	beq.n	800b138 <TIM_OC2_SetConfig+0xac>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a1a      	ldr	r2, [pc, #104]	@ (800b19c <TIM_OC2_SetConfig+0x110>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d113      	bne.n	800b160 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b13e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	4313      	orrs	r3, r2
 800b152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	621a      	str	r2, [r3, #32]
}
 800b17a:	bf00      	nop
 800b17c:	371c      	adds	r7, #28
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	feff8fff 	.word	0xfeff8fff
 800b18c:	40010000 	.word	0x40010000
 800b190:	40010400 	.word	0x40010400
 800b194:	40014000 	.word	0x40014000
 800b198:	40014400 	.word	0x40014400
 800b19c:	40014800 	.word	0x40014800

0800b1a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b087      	sub	sp, #28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a1b      	ldr	r3, [r3, #32]
 800b1b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	4b33      	ldr	r3, [pc, #204]	@ (800b298 <TIM_OC3_SetConfig+0xf8>)
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 0303 	bic.w	r3, r3, #3
 800b1d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b1e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	021b      	lsls	r3, r3, #8
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a28      	ldr	r2, [pc, #160]	@ (800b29c <TIM_OC3_SetConfig+0xfc>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d003      	beq.n	800b206 <TIM_OC3_SetConfig+0x66>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a27      	ldr	r2, [pc, #156]	@ (800b2a0 <TIM_OC3_SetConfig+0x100>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d10d      	bne.n	800b222 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b20c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	021b      	lsls	r3, r3, #8
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	4313      	orrs	r3, r2
 800b218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a1d      	ldr	r2, [pc, #116]	@ (800b29c <TIM_OC3_SetConfig+0xfc>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d00f      	beq.n	800b24a <TIM_OC3_SetConfig+0xaa>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a1c      	ldr	r2, [pc, #112]	@ (800b2a0 <TIM_OC3_SetConfig+0x100>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d00b      	beq.n	800b24a <TIM_OC3_SetConfig+0xaa>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a1b      	ldr	r2, [pc, #108]	@ (800b2a4 <TIM_OC3_SetConfig+0x104>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d007      	beq.n	800b24a <TIM_OC3_SetConfig+0xaa>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a1a      	ldr	r2, [pc, #104]	@ (800b2a8 <TIM_OC3_SetConfig+0x108>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d003      	beq.n	800b24a <TIM_OC3_SetConfig+0xaa>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a19      	ldr	r2, [pc, #100]	@ (800b2ac <TIM_OC3_SetConfig+0x10c>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d113      	bne.n	800b272 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	4313      	orrs	r3, r2
 800b264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	011b      	lsls	r3, r3, #4
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	4313      	orrs	r3, r2
 800b270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	685a      	ldr	r2, [r3, #4]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	621a      	str	r2, [r3, #32]
}
 800b28c:	bf00      	nop
 800b28e:	371c      	adds	r7, #28
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr
 800b298:	fffeff8f 	.word	0xfffeff8f
 800b29c:	40010000 	.word	0x40010000
 800b2a0:	40010400 	.word	0x40010400
 800b2a4:	40014000 	.word	0x40014000
 800b2a8:	40014400 	.word	0x40014400
 800b2ac:	40014800 	.word	0x40014800

0800b2b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a1b      	ldr	r3, [r3, #32]
 800b2c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	69db      	ldr	r3, [r3, #28]
 800b2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	4b24      	ldr	r3, [pc, #144]	@ (800b36c <TIM_OC4_SetConfig+0xbc>)
 800b2dc:	4013      	ands	r3, r2
 800b2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	021b      	lsls	r3, r3, #8
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b2fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	031b      	lsls	r3, r3, #12
 800b302:	693a      	ldr	r2, [r7, #16]
 800b304:	4313      	orrs	r3, r2
 800b306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a19      	ldr	r2, [pc, #100]	@ (800b370 <TIM_OC4_SetConfig+0xc0>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d00f      	beq.n	800b330 <TIM_OC4_SetConfig+0x80>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a18      	ldr	r2, [pc, #96]	@ (800b374 <TIM_OC4_SetConfig+0xc4>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d00b      	beq.n	800b330 <TIM_OC4_SetConfig+0x80>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a17      	ldr	r2, [pc, #92]	@ (800b378 <TIM_OC4_SetConfig+0xc8>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d007      	beq.n	800b330 <TIM_OC4_SetConfig+0x80>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a16      	ldr	r2, [pc, #88]	@ (800b37c <TIM_OC4_SetConfig+0xcc>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d003      	beq.n	800b330 <TIM_OC4_SetConfig+0x80>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a15      	ldr	r2, [pc, #84]	@ (800b380 <TIM_OC4_SetConfig+0xd0>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d109      	bne.n	800b344 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	019b      	lsls	r3, r3, #6
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	4313      	orrs	r3, r2
 800b342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	621a      	str	r2, [r3, #32]
}
 800b35e:	bf00      	nop
 800b360:	371c      	adds	r7, #28
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	feff8fff 	.word	0xfeff8fff
 800b370:	40010000 	.word	0x40010000
 800b374:	40010400 	.word	0x40010400
 800b378:	40014000 	.word	0x40014000
 800b37c:	40014400 	.word	0x40014400
 800b380:	40014800 	.word	0x40014800

0800b384 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b384:	b480      	push	{r7}
 800b386:	b087      	sub	sp, #28
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a1b      	ldr	r3, [r3, #32]
 800b392:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	4b21      	ldr	r3, [pc, #132]	@ (800b434 <TIM_OC5_SetConfig+0xb0>)
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b3c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	041b      	lsls	r3, r3, #16
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a18      	ldr	r2, [pc, #96]	@ (800b438 <TIM_OC5_SetConfig+0xb4>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d00f      	beq.n	800b3fa <TIM_OC5_SetConfig+0x76>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a17      	ldr	r2, [pc, #92]	@ (800b43c <TIM_OC5_SetConfig+0xb8>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00b      	beq.n	800b3fa <TIM_OC5_SetConfig+0x76>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a16      	ldr	r2, [pc, #88]	@ (800b440 <TIM_OC5_SetConfig+0xbc>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d007      	beq.n	800b3fa <TIM_OC5_SetConfig+0x76>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a15      	ldr	r2, [pc, #84]	@ (800b444 <TIM_OC5_SetConfig+0xc0>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d003      	beq.n	800b3fa <TIM_OC5_SetConfig+0x76>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a14      	ldr	r2, [pc, #80]	@ (800b448 <TIM_OC5_SetConfig+0xc4>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d109      	bne.n	800b40e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b400:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	021b      	lsls	r3, r3, #8
 800b408:	697a      	ldr	r2, [r7, #20]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	621a      	str	r2, [r3, #32]
}
 800b428:	bf00      	nop
 800b42a:	371c      	adds	r7, #28
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	fffeff8f 	.word	0xfffeff8f
 800b438:	40010000 	.word	0x40010000
 800b43c:	40010400 	.word	0x40010400
 800b440:	40014000 	.word	0x40014000
 800b444:	40014400 	.word	0x40014400
 800b448:	40014800 	.word	0x40014800

0800b44c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b087      	sub	sp, #28
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	4b22      	ldr	r3, [pc, #136]	@ (800b500 <TIM_OC6_SetConfig+0xb4>)
 800b478:	4013      	ands	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	021b      	lsls	r3, r3, #8
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	4313      	orrs	r3, r2
 800b486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b48e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	051b      	lsls	r3, r3, #20
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	4313      	orrs	r3, r2
 800b49a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a19      	ldr	r2, [pc, #100]	@ (800b504 <TIM_OC6_SetConfig+0xb8>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00f      	beq.n	800b4c4 <TIM_OC6_SetConfig+0x78>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a18      	ldr	r2, [pc, #96]	@ (800b508 <TIM_OC6_SetConfig+0xbc>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d00b      	beq.n	800b4c4 <TIM_OC6_SetConfig+0x78>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a17      	ldr	r2, [pc, #92]	@ (800b50c <TIM_OC6_SetConfig+0xc0>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d007      	beq.n	800b4c4 <TIM_OC6_SetConfig+0x78>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a16      	ldr	r2, [pc, #88]	@ (800b510 <TIM_OC6_SetConfig+0xc4>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d003      	beq.n	800b4c4 <TIM_OC6_SetConfig+0x78>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a15      	ldr	r2, [pc, #84]	@ (800b514 <TIM_OC6_SetConfig+0xc8>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d109      	bne.n	800b4d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	029b      	lsls	r3, r3, #10
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	621a      	str	r2, [r3, #32]
}
 800b4f2:	bf00      	nop
 800b4f4:	371c      	adds	r7, #28
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	feff8fff 	.word	0xfeff8fff
 800b504:	40010000 	.word	0x40010000
 800b508:	40010400 	.word	0x40010400
 800b50c:	40014000 	.word	0x40014000
 800b510:	40014400 	.word	0x40014400
 800b514:	40014800 	.word	0x40014800

0800b518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b518:	b480      	push	{r7}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6a1b      	ldr	r3, [r3, #32]
 800b528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	f023 0201 	bic.w	r2, r3, #1
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	699b      	ldr	r3, [r3, #24]
 800b53a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f023 030a 	bic.w	r3, r3, #10
 800b554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	621a      	str	r2, [r3, #32]
}
 800b56a:	bf00      	nop
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b576:	b480      	push	{r7}
 800b578:	b087      	sub	sp, #28
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	60f8      	str	r0, [r7, #12]
 800b57e:	60b9      	str	r1, [r7, #8]
 800b580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6a1b      	ldr	r3, [r3, #32]
 800b58c:	f023 0210 	bic.w	r2, r3, #16
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b5a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	031b      	lsls	r3, r3, #12
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b5b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	011b      	lsls	r3, r3, #4
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	621a      	str	r2, [r3, #32]
}
 800b5ca:	bf00      	nop
 800b5cc:	371c      	adds	r7, #28
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
	...

0800b5d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4b09      	ldr	r3, [pc, #36]	@ (800b610 <TIM_ITRx_SetConfig+0x38>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	f043 0307 	orr.w	r3, r3, #7
 800b5fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	609a      	str	r2, [r3, #8]
}
 800b602:	bf00      	nop
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	ffcfff8f 	.word	0xffcfff8f

0800b614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b614:	b480      	push	{r7}
 800b616:	b087      	sub	sp, #28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
 800b620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b62e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	021a      	lsls	r2, r3, #8
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	431a      	orrs	r2, r3
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	4313      	orrs	r3, r2
 800b640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	609a      	str	r2, [r3, #8]
}
 800b648:	bf00      	nop
 800b64a:	371c      	adds	r7, #28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b664:	2b01      	cmp	r3, #1
 800b666:	d101      	bne.n	800b66c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b668:	2302      	movs	r3, #2
 800b66a:	e077      	b.n	800b75c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a35      	ldr	r2, [pc, #212]	@ (800b768 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d004      	beq.n	800b6a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a34      	ldr	r2, [pc, #208]	@ (800b76c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d108      	bne.n	800b6b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b6a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a25      	ldr	r2, [pc, #148]	@ (800b768 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d02c      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6de:	d027      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a22      	ldr	r2, [pc, #136]	@ (800b770 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d022      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a21      	ldr	r2, [pc, #132]	@ (800b774 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d01d      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a1f      	ldr	r2, [pc, #124]	@ (800b778 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d018      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a1a      	ldr	r2, [pc, #104]	@ (800b76c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d013      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a1b      	ldr	r2, [pc, #108]	@ (800b77c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d00e      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a1a      	ldr	r2, [pc, #104]	@ (800b780 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d009      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a18      	ldr	r2, [pc, #96]	@ (800b784 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d004      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a17      	ldr	r2, [pc, #92]	@ (800b788 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d10c      	bne.n	800b74a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b736:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	40010000 	.word	0x40010000
 800b76c:	40010400 	.word	0x40010400
 800b770:	40000400 	.word	0x40000400
 800b774:	40000800 	.word	0x40000800
 800b778:	40000c00 	.word	0x40000c00
 800b77c:	40001800 	.word	0x40001800
 800b780:	40014000 	.word	0x40014000
 800b784:	4000e000 	.word	0x4000e000
 800b788:	4000e400 	.word	0x4000e400

0800b78c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d101      	bne.n	800b7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	e073      	b.n	800b890 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	041b      	lsls	r3, r3, #16
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	69db      	ldr	r3, [r3, #28]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a19      	ldr	r2, [pc, #100]	@ (800b89c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d004      	beq.n	800b844 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a18      	ldr	r2, [pc, #96]	@ (800b8a0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d11c      	bne.n	800b87e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84e:	051b      	lsls	r3, r3, #20
 800b850:	4313      	orrs	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86c:	4313      	orrs	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	40010000 	.word	0x40010000
 800b8a0:	40010400 	.word	0x40010400

0800b8a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800b8e6:	4b92      	ldr	r3, [pc, #584]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b8e8:	220a      	movs	r2, #10
 800b8ea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 20;
 800b8ec:	4b90      	ldr	r3, [pc, #576]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b8ee:	2214      	movs	r2, #20
 800b8f0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 3;
 800b8f2:	4b8f      	ldr	r3, [pc, #572]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b8f4:	2203      	movs	r2, #3
 800b8f6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 800b8f8:	4b8d      	ldr	r3, [pc, #564]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b8fa:	2203      	movs	r2, #3
 800b8fc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b8fe:	4b8d      	ldr	r3, [pc, #564]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b900:	22ff      	movs	r2, #255	@ 0xff
 800b902:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b904:	4b8b      	ldr	r3, [pc, #556]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b906:	22ff      	movs	r2, #255	@ 0xff
 800b908:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800b90a:	4b8a      	ldr	r3, [pc, #552]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b910:	4b88      	ldr	r3, [pc, #544]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b912:	2200      	movs	r2, #0
 800b914:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800b916:	4b88      	ldr	r3, [pc, #544]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800b918:	220a      	movs	r2, #10
 800b91a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 20;
 800b91c:	4b86      	ldr	r3, [pc, #536]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800b91e:	2214      	movs	r2, #20
 800b920:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b922:	4b85      	ldr	r3, [pc, #532]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800b924:	2201      	movs	r2, #1
 800b926:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 3;
 800b928:	4b83      	ldr	r3, [pc, #524]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800b92a:	2203      	movs	r2, #3
 800b92c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b92e:	2100      	movs	r1, #0
 800b930:	2000      	movs	r0, #0
 800b932:	f004 fee1 	bl	80106f8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b936:	4b7e      	ldr	r3, [pc, #504]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	061a      	lsls	r2, r3, #24
 800b93c:	4b7c      	ldr	r3, [pc, #496]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b93e:	785b      	ldrb	r3, [r3, #1]
 800b940:	041b      	lsls	r3, r3, #16
 800b942:	431a      	orrs	r2, r3
 800b944:	4b7a      	ldr	r3, [pc, #488]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b946:	789b      	ldrb	r3, [r3, #2]
 800b948:	021b      	lsls	r3, r3, #8
 800b94a:	4313      	orrs	r3, r2
 800b94c:	4a78      	ldr	r2, [pc, #480]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b94e:	78d2      	ldrb	r2, [r2, #3]
 800b950:	4313      	orrs	r3, r2
 800b952:	061a      	lsls	r2, r3, #24
 800b954:	4b76      	ldr	r3, [pc, #472]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	0619      	lsls	r1, r3, #24
 800b95a:	4b75      	ldr	r3, [pc, #468]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b95c:	785b      	ldrb	r3, [r3, #1]
 800b95e:	041b      	lsls	r3, r3, #16
 800b960:	4319      	orrs	r1, r3
 800b962:	4b73      	ldr	r3, [pc, #460]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b964:	789b      	ldrb	r3, [r3, #2]
 800b966:	021b      	lsls	r3, r3, #8
 800b968:	430b      	orrs	r3, r1
 800b96a:	4971      	ldr	r1, [pc, #452]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b96c:	78c9      	ldrb	r1, [r1, #3]
 800b96e:	430b      	orrs	r3, r1
 800b970:	021b      	lsls	r3, r3, #8
 800b972:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b976:	431a      	orrs	r2, r3
 800b978:	4b6d      	ldr	r3, [pc, #436]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	0619      	lsls	r1, r3, #24
 800b97e:	4b6c      	ldr	r3, [pc, #432]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b980:	785b      	ldrb	r3, [r3, #1]
 800b982:	041b      	lsls	r3, r3, #16
 800b984:	4319      	orrs	r1, r3
 800b986:	4b6a      	ldr	r3, [pc, #424]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b988:	789b      	ldrb	r3, [r3, #2]
 800b98a:	021b      	lsls	r3, r3, #8
 800b98c:	430b      	orrs	r3, r1
 800b98e:	4968      	ldr	r1, [pc, #416]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b990:	78c9      	ldrb	r1, [r1, #3]
 800b992:	430b      	orrs	r3, r1
 800b994:	0a1b      	lsrs	r3, r3, #8
 800b996:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b99a:	431a      	orrs	r2, r3
 800b99c:	4b64      	ldr	r3, [pc, #400]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	0619      	lsls	r1, r3, #24
 800b9a2:	4b63      	ldr	r3, [pc, #396]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b9a4:	785b      	ldrb	r3, [r3, #1]
 800b9a6:	041b      	lsls	r3, r3, #16
 800b9a8:	4319      	orrs	r1, r3
 800b9aa:	4b61      	ldr	r3, [pc, #388]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b9ac:	789b      	ldrb	r3, [r3, #2]
 800b9ae:	021b      	lsls	r3, r3, #8
 800b9b0:	430b      	orrs	r3, r1
 800b9b2:	495f      	ldr	r1, [pc, #380]	@ (800bb30 <MX_LWIP_Init+0x250>)
 800b9b4:	78c9      	ldrb	r1, [r1, #3]
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	0e1b      	lsrs	r3, r3, #24
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	4a5f      	ldr	r2, [pc, #380]	@ (800bb3c <MX_LWIP_Init+0x25c>)
 800b9be:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b9c0:	4b5c      	ldr	r3, [pc, #368]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	061a      	lsls	r2, r3, #24
 800b9c6:	4b5b      	ldr	r3, [pc, #364]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b9c8:	785b      	ldrb	r3, [r3, #1]
 800b9ca:	041b      	lsls	r3, r3, #16
 800b9cc:	431a      	orrs	r2, r3
 800b9ce:	4b59      	ldr	r3, [pc, #356]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b9d0:	789b      	ldrb	r3, [r3, #2]
 800b9d2:	021b      	lsls	r3, r3, #8
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	4a57      	ldr	r2, [pc, #348]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b9d8:	78d2      	ldrb	r2, [r2, #3]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	061a      	lsls	r2, r3, #24
 800b9de:	4b55      	ldr	r3, [pc, #340]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	0619      	lsls	r1, r3, #24
 800b9e4:	4b53      	ldr	r3, [pc, #332]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b9e6:	785b      	ldrb	r3, [r3, #1]
 800b9e8:	041b      	lsls	r3, r3, #16
 800b9ea:	4319      	orrs	r1, r3
 800b9ec:	4b51      	ldr	r3, [pc, #324]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b9ee:	789b      	ldrb	r3, [r3, #2]
 800b9f0:	021b      	lsls	r3, r3, #8
 800b9f2:	430b      	orrs	r3, r1
 800b9f4:	494f      	ldr	r1, [pc, #316]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800b9f6:	78c9      	ldrb	r1, [r1, #3]
 800b9f8:	430b      	orrs	r3, r1
 800b9fa:	021b      	lsls	r3, r3, #8
 800b9fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba00:	431a      	orrs	r2, r3
 800ba02:	4b4c      	ldr	r3, [pc, #304]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	0619      	lsls	r1, r3, #24
 800ba08:	4b4a      	ldr	r3, [pc, #296]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800ba0a:	785b      	ldrb	r3, [r3, #1]
 800ba0c:	041b      	lsls	r3, r3, #16
 800ba0e:	4319      	orrs	r1, r3
 800ba10:	4b48      	ldr	r3, [pc, #288]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800ba12:	789b      	ldrb	r3, [r3, #2]
 800ba14:	021b      	lsls	r3, r3, #8
 800ba16:	430b      	orrs	r3, r1
 800ba18:	4946      	ldr	r1, [pc, #280]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800ba1a:	78c9      	ldrb	r1, [r1, #3]
 800ba1c:	430b      	orrs	r3, r1
 800ba1e:	0a1b      	lsrs	r3, r3, #8
 800ba20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba24:	431a      	orrs	r2, r3
 800ba26:	4b43      	ldr	r3, [pc, #268]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	0619      	lsls	r1, r3, #24
 800ba2c:	4b41      	ldr	r3, [pc, #260]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	041b      	lsls	r3, r3, #16
 800ba32:	4319      	orrs	r1, r3
 800ba34:	4b3f      	ldr	r3, [pc, #252]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800ba36:	789b      	ldrb	r3, [r3, #2]
 800ba38:	021b      	lsls	r3, r3, #8
 800ba3a:	430b      	orrs	r3, r1
 800ba3c:	493d      	ldr	r1, [pc, #244]	@ (800bb34 <MX_LWIP_Init+0x254>)
 800ba3e:	78c9      	ldrb	r1, [r1, #3]
 800ba40:	430b      	orrs	r3, r1
 800ba42:	0e1b      	lsrs	r3, r3, #24
 800ba44:	4313      	orrs	r3, r2
 800ba46:	4a3e      	ldr	r2, [pc, #248]	@ (800bb40 <MX_LWIP_Init+0x260>)
 800ba48:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ba4a:	4b3b      	ldr	r3, [pc, #236]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	061a      	lsls	r2, r3, #24
 800ba50:	4b39      	ldr	r3, [pc, #228]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba52:	785b      	ldrb	r3, [r3, #1]
 800ba54:	041b      	lsls	r3, r3, #16
 800ba56:	431a      	orrs	r2, r3
 800ba58:	4b37      	ldr	r3, [pc, #220]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba5a:	789b      	ldrb	r3, [r3, #2]
 800ba5c:	021b      	lsls	r3, r3, #8
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	4a35      	ldr	r2, [pc, #212]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba62:	78d2      	ldrb	r2, [r2, #3]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	061a      	lsls	r2, r3, #24
 800ba68:	4b33      	ldr	r3, [pc, #204]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	0619      	lsls	r1, r3, #24
 800ba6e:	4b32      	ldr	r3, [pc, #200]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba70:	785b      	ldrb	r3, [r3, #1]
 800ba72:	041b      	lsls	r3, r3, #16
 800ba74:	4319      	orrs	r1, r3
 800ba76:	4b30      	ldr	r3, [pc, #192]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba78:	789b      	ldrb	r3, [r3, #2]
 800ba7a:	021b      	lsls	r3, r3, #8
 800ba7c:	430b      	orrs	r3, r1
 800ba7e:	492e      	ldr	r1, [pc, #184]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba80:	78c9      	ldrb	r1, [r1, #3]
 800ba82:	430b      	orrs	r3, r1
 800ba84:	021b      	lsls	r3, r3, #8
 800ba86:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba8a:	431a      	orrs	r2, r3
 800ba8c:	4b2a      	ldr	r3, [pc, #168]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	0619      	lsls	r1, r3, #24
 800ba92:	4b29      	ldr	r3, [pc, #164]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba94:	785b      	ldrb	r3, [r3, #1]
 800ba96:	041b      	lsls	r3, r3, #16
 800ba98:	4319      	orrs	r1, r3
 800ba9a:	4b27      	ldr	r3, [pc, #156]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800ba9c:	789b      	ldrb	r3, [r3, #2]
 800ba9e:	021b      	lsls	r3, r3, #8
 800baa0:	430b      	orrs	r3, r1
 800baa2:	4925      	ldr	r1, [pc, #148]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800baa4:	78c9      	ldrb	r1, [r1, #3]
 800baa6:	430b      	orrs	r3, r1
 800baa8:	0a1b      	lsrs	r3, r3, #8
 800baaa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800baae:	431a      	orrs	r2, r3
 800bab0:	4b21      	ldr	r3, [pc, #132]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	0619      	lsls	r1, r3, #24
 800bab6:	4b20      	ldr	r3, [pc, #128]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800bab8:	785b      	ldrb	r3, [r3, #1]
 800baba:	041b      	lsls	r3, r3, #16
 800babc:	4319      	orrs	r1, r3
 800babe:	4b1e      	ldr	r3, [pc, #120]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800bac0:	789b      	ldrb	r3, [r3, #2]
 800bac2:	021b      	lsls	r3, r3, #8
 800bac4:	430b      	orrs	r3, r1
 800bac6:	491c      	ldr	r1, [pc, #112]	@ (800bb38 <MX_LWIP_Init+0x258>)
 800bac8:	78c9      	ldrb	r1, [r1, #3]
 800baca:	430b      	orrs	r3, r1
 800bacc:	0e1b      	lsrs	r3, r3, #24
 800bace:	4313      	orrs	r3, r2
 800bad0:	4a1c      	ldr	r2, [pc, #112]	@ (800bb44 <MX_LWIP_Init+0x264>)
 800bad2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bad4:	4b1c      	ldr	r3, [pc, #112]	@ (800bb48 <MX_LWIP_Init+0x268>)
 800bad6:	9302      	str	r3, [sp, #8]
 800bad8:	4b1c      	ldr	r3, [pc, #112]	@ (800bb4c <MX_LWIP_Init+0x26c>)
 800bada:	9301      	str	r3, [sp, #4]
 800badc:	2300      	movs	r3, #0
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	4b18      	ldr	r3, [pc, #96]	@ (800bb44 <MX_LWIP_Init+0x264>)
 800bae2:	4a17      	ldr	r2, [pc, #92]	@ (800bb40 <MX_LWIP_Init+0x260>)
 800bae4:	4915      	ldr	r1, [pc, #84]	@ (800bb3c <MX_LWIP_Init+0x25c>)
 800bae6:	481a      	ldr	r0, [pc, #104]	@ (800bb50 <MX_LWIP_Init+0x270>)
 800bae8:	f005 fc88 	bl	80113fc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800baec:	4818      	ldr	r0, [pc, #96]	@ (800bb50 <MX_LWIP_Init+0x270>)
 800baee:	f005 fe3b 	bl	8011768 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800baf2:	4817      	ldr	r0, [pc, #92]	@ (800bb50 <MX_LWIP_Init+0x270>)
 800baf4:	f005 fe48 	bl	8011788 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800baf8:	4916      	ldr	r1, [pc, #88]	@ (800bb54 <MX_LWIP_Init+0x274>)
 800bafa:	4815      	ldr	r0, [pc, #84]	@ (800bb50 <MX_LWIP_Init+0x270>)
 800bafc:	f005 ff46 	bl	801198c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bb00:	2224      	movs	r2, #36	@ 0x24
 800bb02:	2100      	movs	r1, #0
 800bb04:	4814      	ldr	r0, [pc, #80]	@ (800bb58 <MX_LWIP_Init+0x278>)
 800bb06:	f00f fc2a 	bl	801b35e <memset>
  attributes.name = "EthLink";
 800bb0a:	4b13      	ldr	r3, [pc, #76]	@ (800bb58 <MX_LWIP_Init+0x278>)
 800bb0c:	4a13      	ldr	r2, [pc, #76]	@ (800bb5c <MX_LWIP_Init+0x27c>)
 800bb0e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bb10:	4b11      	ldr	r3, [pc, #68]	@ (800bb58 <MX_LWIP_Init+0x278>)
 800bb12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bb16:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bb18:	4b0f      	ldr	r3, [pc, #60]	@ (800bb58 <MX_LWIP_Init+0x278>)
 800bb1a:	2210      	movs	r2, #16
 800bb1c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bb1e:	4a0e      	ldr	r2, [pc, #56]	@ (800bb58 <MX_LWIP_Init+0x278>)
 800bb20:	490b      	ldr	r1, [pc, #44]	@ (800bb50 <MX_LWIP_Init+0x270>)
 800bb22:	480f      	ldr	r0, [pc, #60]	@ (800bb60 <MX_LWIP_Init+0x280>)
 800bb24:	f000 fde1 	bl	800c6ea <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bb28:	bf00      	nop
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	24005938 	.word	0x24005938
 800bb34:	2400593c 	.word	0x2400593c
 800bb38:	24005940 	.word	0x24005940
 800bb3c:	2400592c 	.word	0x2400592c
 800bb40:	24005930 	.word	0x24005930
 800bb44:	24005934 	.word	0x24005934
 800bb48:	08010635 	.word	0x08010635
 800bb4c:	0800c04d 	.word	0x0800c04d
 800bb50:	240058f8 	.word	0x240058f8
 800bb54:	0800bb65 	.word	0x0800bb65
 800bb58:	24005944 	.word	0x24005944
 800bb5c:	0801c194 	.word	0x0801c194
 800bb60:	0800c341 	.word	0x0800c341

0800bb64 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800bb80:	4b04      	ldr	r3, [pc, #16]	@ (800bb94 <HAL_ETH_RxCpltCallback+0x1c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f001 f847 	bl	800cc18 <osSemaphoreRelease>
}
 800bb8a:	bf00      	nop
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	24005970 	.word	0x24005970

0800bb98 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800bba0:	4b04      	ldr	r3, [pc, #16]	@ (800bbb4 <HAL_ETH_TxCpltCallback+0x1c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f001 f837 	bl	800cc18 <osSemaphoreRelease>
}
 800bbaa:	bf00      	nop
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	24005974 	.word	0x24005974

0800bbb8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7f9 fb3c 	bl	800523e <HAL_ETH_GetDMAError>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbcc:	2b80      	cmp	r3, #128	@ 0x80
 800bbce:	d104      	bne.n	800bbda <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800bbd0:	4b04      	ldr	r3, [pc, #16]	@ (800bbe4 <HAL_ETH_ErrorCallback+0x2c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 f81f 	bl	800cc18 <osSemaphoreRelease>
  }
}
 800bbda:	bf00      	nop
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	24005970 	.word	0x24005970

0800bbe8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b0aa      	sub	sp, #168	@ 0xa8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800bc02:	f107 0310 	add.w	r3, r7, #16
 800bc06:	2264      	movs	r2, #100	@ 0x64
 800bc08:	2100      	movs	r1, #0
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f00f fba7 	bl	801b35e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bc10:	4b89      	ldr	r3, [pc, #548]	@ (800be38 <low_level_init+0x250>)
 800bc12:	4a8a      	ldr	r2, [pc, #552]	@ (800be3c <low_level_init+0x254>)
 800bc14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bc16:	2300      	movs	r3, #0
 800bc18:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bc1a:	2380      	movs	r3, #128	@ 0x80
 800bc1c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bc1e:	23e1      	movs	r3, #225	@ 0xe1
 800bc20:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bc22:	2300      	movs	r3, #0
 800bc24:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bc26:	2300      	movs	r3, #0
 800bc28:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bc2e:	4a82      	ldr	r2, [pc, #520]	@ (800be38 <low_level_init+0x250>)
 800bc30:	f107 0308 	add.w	r3, r7, #8
 800bc34:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bc36:	4b80      	ldr	r3, [pc, #512]	@ (800be38 <low_level_init+0x250>)
 800bc38:	2201      	movs	r2, #1
 800bc3a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bc3c:	4b7e      	ldr	r3, [pc, #504]	@ (800be38 <low_level_init+0x250>)
 800bc3e:	4a80      	ldr	r2, [pc, #512]	@ (800be40 <low_level_init+0x258>)
 800bc40:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bc42:	4b7d      	ldr	r3, [pc, #500]	@ (800be38 <low_level_init+0x250>)
 800bc44:	4a7f      	ldr	r2, [pc, #508]	@ (800be44 <low_level_init+0x25c>)
 800bc46:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bc48:	4b7b      	ldr	r3, [pc, #492]	@ (800be38 <low_level_init+0x250>)
 800bc4a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bc4e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bc50:	4879      	ldr	r0, [pc, #484]	@ (800be38 <low_level_init+0x250>)
 800bc52:	f7f8 fab9 	bl	80041c8 <HAL_ETH_Init>
 800bc56:	4603      	mov	r3, r0
 800bc58:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bc5c:	2238      	movs	r2, #56	@ 0x38
 800bc5e:	2100      	movs	r1, #0
 800bc60:	4879      	ldr	r0, [pc, #484]	@ (800be48 <low_level_init+0x260>)
 800bc62:	f00f fb7c 	bl	801b35e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bc66:	4b78      	ldr	r3, [pc, #480]	@ (800be48 <low_level_init+0x260>)
 800bc68:	2221      	movs	r2, #33	@ 0x21
 800bc6a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bc6c:	4b76      	ldr	r3, [pc, #472]	@ (800be48 <low_level_init+0x260>)
 800bc6e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800bc72:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bc74:	4b74      	ldr	r3, [pc, #464]	@ (800be48 <low_level_init+0x260>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bc7a:	4874      	ldr	r0, [pc, #464]	@ (800be4c <low_level_init+0x264>)
 800bc7c:	f005 fa78 	bl	8011170 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2206      	movs	r2, #6
 800bc84:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bc88:	4b6b      	ldr	r3, [pc, #428]	@ (800be38 <low_level_init+0x250>)
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	781a      	ldrb	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bc94:	4b68      	ldr	r3, [pc, #416]	@ (800be38 <low_level_init+0x250>)
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	785a      	ldrb	r2, [r3, #1]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bca0:	4b65      	ldr	r3, [pc, #404]	@ (800be38 <low_level_init+0x250>)
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	789a      	ldrb	r2, [r3, #2]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bcac:	4b62      	ldr	r3, [pc, #392]	@ (800be38 <low_level_init+0x250>)
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	78da      	ldrb	r2, [r3, #3]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bcb8:	4b5f      	ldr	r3, [pc, #380]	@ (800be38 <low_level_init+0x250>)
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	791a      	ldrb	r2, [r3, #4]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bcc4:	4b5c      	ldr	r3, [pc, #368]	@ (800be38 <low_level_init+0x250>)
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	795a      	ldrb	r2, [r3, #5]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bcd6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bcde:	f043 030a 	orr.w	r3, r3, #10
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800bcea:	2200      	movs	r2, #0
 800bcec:	2100      	movs	r1, #0
 800bcee:	2001      	movs	r0, #1
 800bcf0:	f000 feb6 	bl	800ca60 <osSemaphoreNew>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	4a56      	ldr	r2, [pc, #344]	@ (800be50 <low_level_init+0x268>)
 800bcf8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	2001      	movs	r0, #1
 800bd00:	f000 feae 	bl	800ca60 <osSemaphoreNew>
 800bd04:	4603      	mov	r3, r0
 800bd06:	4a53      	ldr	r2, [pc, #332]	@ (800be54 <low_level_init+0x26c>)
 800bd08:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bd0a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bd0e:	2224      	movs	r2, #36	@ 0x24
 800bd10:	2100      	movs	r1, #0
 800bd12:	4618      	mov	r0, r3
 800bd14:	f00f fb23 	bl	801b35e <memset>
  attributes.name = "EthIf";
 800bd18:	4b4f      	ldr	r3, [pc, #316]	@ (800be58 <low_level_init+0x270>)
 800bd1a:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bd1c:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800bd20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800bd24:	2330      	movs	r3, #48	@ 0x30
 800bd26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800bd2a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bd2e:	461a      	mov	r2, r3
 800bd30:	6879      	ldr	r1, [r7, #4]
 800bd32:	484a      	ldr	r0, [pc, #296]	@ (800be5c <low_level_init+0x274>)
 800bd34:	f000 fcd9 	bl	800c6ea <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bd38:	4949      	ldr	r1, [pc, #292]	@ (800be60 <low_level_init+0x278>)
 800bd3a:	484a      	ldr	r0, [pc, #296]	@ (800be64 <low_level_init+0x27c>)
 800bd3c:	f7f6 f81b 	bl	8001d76 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800bd40:	4848      	ldr	r0, [pc, #288]	@ (800be64 <low_level_init+0x27c>)
 800bd42:	f7f6 f84a 	bl	8001dda <LAN8742_Init>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d006      	beq.n	800bd5a <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f005 fded 	bl	801192c <netif_set_link_down>
    netif_set_down(netif);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f005 fd84 	bl	8011860 <netif_set_down>
 800bd58:	e06b      	b.n	800be32 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800bd5a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d165      	bne.n	800be2e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bd62:	4840      	ldr	r0, [pc, #256]	@ (800be64 <low_level_init+0x27c>)
 800bd64:	f7f6 f886 	bl	8001e74 <LAN8742_GetLinkState>
 800bd68:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800bd6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	dc06      	bgt.n	800bd82 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f005 fdd9 	bl	801192c <netif_set_link_down>
      netif_set_down(netif);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f005 fd70 	bl	8011860 <netif_set_down>
 800bd80:	e057      	b.n	800be32 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800bd82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bd86:	3b02      	subs	r3, #2
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d82b      	bhi.n	800bde4 <low_level_init+0x1fc>
 800bd8c:	a201      	add	r2, pc, #4	@ (adr r2, 800bd94 <low_level_init+0x1ac>)
 800bd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd92:	bf00      	nop
 800bd94:	0800bda5 	.word	0x0800bda5
 800bd98:	0800bdb7 	.word	0x0800bdb7
 800bd9c:	0800bdc7 	.word	0x0800bdc7
 800bda0:	0800bdd7 	.word	0x0800bdd7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800bda4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bda8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bdac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bdb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bdb4:	e01f      	b.n	800bdf6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bdbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bdc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bdc4:	e017      	b.n	800bdf6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800bdc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bdca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bdd4:	e00f      	b.n	800bdf6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800bddc:	2300      	movs	r3, #0
 800bdde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bde2:	e008      	b.n	800bdf6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800bde4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bde8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bdec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bdf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bdf4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bdf6:	f107 0310 	add.w	r3, r7, #16
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	480e      	ldr	r0, [pc, #56]	@ (800be38 <low_level_init+0x250>)
 800bdfe:	f7f8 ffd3 	bl	8004da8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800be02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be06:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800be08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800be0e:	f107 0310 	add.w	r3, r7, #16
 800be12:	4619      	mov	r1, r3
 800be14:	4808      	ldr	r0, [pc, #32]	@ (800be38 <low_level_init+0x250>)
 800be16:	f7f9 f99b 	bl	8005150 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800be1a:	4807      	ldr	r0, [pc, #28]	@ (800be38 <low_level_init+0x250>)
 800be1c:	f7f8 fb34 	bl	8004488 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f005 fcb1 	bl	8011788 <netif_set_up>
    netif_set_link_up(netif);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f005 fd4c 	bl	80118c4 <netif_set_link_up>
 800be2c:	e001      	b.n	800be32 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800be2e:	f7f5 fb09 	bl	8001444 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800be32:	37a8      	adds	r7, #168	@ 0xa8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	24005978 	.word	0x24005978
 800be3c:	40028000 	.word	0x40028000
 800be40:	30000100 	.word	0x30000100
 800be44:	30000000 	.word	0x30000000
 800be48:	24005a28 	.word	0x24005a28
 800be4c:	0801edc4 	.word	0x0801edc4
 800be50:	24005970 	.word	0x24005970
 800be54:	24005974 	.word	0x24005974
 800be58:	0801c19c 	.word	0x0801c19c
 800be5c:	0800bff9 	.word	0x0800bff9
 800be60:	240049cc 	.word	0x240049cc
 800be64:	24005a60 	.word	0x24005a60

0800be68 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b092      	sub	sp, #72	@ 0x48
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800be72:	2300      	movs	r3, #0
 800be74:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800be76:	2300      	movs	r3, #0
 800be78:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800be80:	f107 030c 	add.w	r3, r7, #12
 800be84:	2230      	movs	r2, #48	@ 0x30
 800be86:	2100      	movs	r1, #0
 800be88:	4618      	mov	r0, r3
 800be8a:	f00f fa68 	bl	801b35e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800be8e:	f107 030c 	add.w	r3, r7, #12
 800be92:	2230      	movs	r2, #48	@ 0x30
 800be94:	2100      	movs	r1, #0
 800be96:	4618      	mov	r0, r3
 800be98:	f00f fa61 	bl	801b35e <memset>

  for(q = p; q != NULL; q = q->next)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bea0:	e045      	b.n	800bf2e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d902      	bls.n	800beae <low_level_output+0x46>
      return ERR_IF;
 800bea8:	f06f 030b 	mvn.w	r3, #11
 800beac:	e07f      	b.n	800bfae <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800beae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beb0:	6859      	ldr	r1, [r3, #4]
 800beb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800beb4:	4613      	mov	r3, r2
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	4413      	add	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	3348      	adds	r3, #72	@ 0x48
 800bebe:	443b      	add	r3, r7
 800bec0:	3b3c      	subs	r3, #60	@ 0x3c
 800bec2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bec6:	895b      	ldrh	r3, [r3, #10]
 800bec8:	4619      	mov	r1, r3
 800beca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800becc:	4613      	mov	r3, r2
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	4413      	add	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	3348      	adds	r3, #72	@ 0x48
 800bed6:	443b      	add	r3, r7
 800bed8:	3b38      	subs	r3, #56	@ 0x38
 800beda:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bedc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d011      	beq.n	800bf06 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bee4:	1e5a      	subs	r2, r3, #1
 800bee6:	f107 000c 	add.w	r0, r7, #12
 800beea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800beec:	460b      	mov	r3, r1
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	440b      	add	r3, r1
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	18c1      	adds	r1, r0, r3
 800bef6:	4613      	mov	r3, r2
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	3348      	adds	r3, #72	@ 0x48
 800bf00:	443b      	add	r3, r7
 800bf02:	3b34      	subs	r3, #52	@ 0x34
 800bf04:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bf06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d109      	bne.n	800bf22 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800bf0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf10:	4613      	mov	r3, r2
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	4413      	add	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	3348      	adds	r3, #72	@ 0x48
 800bf1a:	443b      	add	r3, r7
 800bf1c:	3b34      	subs	r3, #52	@ 0x34
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bf22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf24:	3301      	adds	r3, #1
 800bf26:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800bf28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1b6      	bne.n	800bea2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	891b      	ldrh	r3, [r3, #8]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	4b1f      	ldr	r3, [pc, #124]	@ (800bfb8 <low_level_output+0x150>)
 800bf3c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bf3e:	4a1e      	ldr	r2, [pc, #120]	@ (800bfb8 <low_level_output+0x150>)
 800bf40:	f107 030c 	add.w	r3, r7, #12
 800bf44:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bf46:	4a1c      	ldr	r2, [pc, #112]	@ (800bfb8 <low_level_output+0x150>)
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800bf4c:	6838      	ldr	r0, [r7, #0]
 800bf4e:	f006 f975 	bl	801223c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800bf52:	4919      	ldr	r1, [pc, #100]	@ (800bfb8 <low_level_output+0x150>)
 800bf54:	4819      	ldr	r0, [pc, #100]	@ (800bfbc <low_level_output+0x154>)
 800bf56:	f7f8 fb83 	bl	8004660 <HAL_ETH_Transmit_IT>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d103      	bne.n	800bf68 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bf66:	e01b      	b.n	800bfa0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800bf68:	4814      	ldr	r0, [pc, #80]	@ (800bfbc <low_level_output+0x154>)
 800bf6a:	f7f9 f95b 	bl	8005224 <HAL_ETH_GetError>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f003 0302 	and.w	r3, r3, #2
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00d      	beq.n	800bf94 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800bf78:	4b11      	ldr	r3, [pc, #68]	@ (800bfc0 <low_level_output+0x158>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 fdf7 	bl	800cb74 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800bf86:	480d      	ldr	r0, [pc, #52]	@ (800bfbc <low_level_output+0x154>)
 800bf88:	f7f8 fcf1 	bl	800496e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800bf8c:	23fe      	movs	r3, #254	@ 0xfe
 800bf8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bf92:	e005      	b.n	800bfa0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800bf94:	6838      	ldr	r0, [r7, #0]
 800bf96:	f006 f8ab 	bl	80120f0 <pbuf_free>
        errval =  ERR_IF;
 800bf9a:	23f4      	movs	r3, #244	@ 0xf4
 800bf9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800bfa0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bfa4:	f113 0f02 	cmn.w	r3, #2
 800bfa8:	d0d3      	beq.n	800bf52 <low_level_output+0xea>

  return errval;
 800bfaa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3748      	adds	r7, #72	@ 0x48
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	24005a28 	.word	0x24005a28
 800bfbc:	24005978 	.word	0x24005978
 800bfc0:	24005974 	.word	0x24005974

0800bfc4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bfd0:	4b07      	ldr	r3, [pc, #28]	@ (800bff0 <low_level_input+0x2c>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d105      	bne.n	800bfe4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bfd8:	f107 030c 	add.w	r3, r7, #12
 800bfdc:	4619      	mov	r1, r3
 800bfde:	4805      	ldr	r0, [pc, #20]	@ (800bff4 <low_level_input+0x30>)
 800bfe0:	f7f8 fb8f 	bl	8004702 <HAL_ETH_ReadData>
  }

  return p;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	2400596c 	.word	0x2400596c
 800bff4:	24005978 	.word	0x24005978

0800bff8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c000:	2300      	movs	r3, #0
 800c002:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c008:	4b0f      	ldr	r3, [pc, #60]	@ (800c048 <ethernetif_input+0x50>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f04f 31ff 	mov.w	r1, #4294967295
 800c010:	4618      	mov	r0, r3
 800c012:	f000 fdaf 	bl	800cb74 <osSemaphoreAcquire>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1f5      	bne.n	800c008 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c01c:	68b8      	ldr	r0, [r7, #8]
 800c01e:	f7ff ffd1 	bl	800bfc4 <low_level_input>
 800c022:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	68b9      	ldr	r1, [r7, #8]
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	4798      	blx	r3
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d002      	beq.n	800c040 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	f006 f858 	bl	80120f0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1ea      	bne.n	800c01c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c046:	e7df      	b.n	800c008 <ethernetif_input+0x10>
 800c048:	24005970 	.word	0x24005970

0800c04c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d106      	bne.n	800c068 <ethernetif_init+0x1c>
 800c05a:	4b0e      	ldr	r3, [pc, #56]	@ (800c094 <ethernetif_init+0x48>)
 800c05c:	f44f 7205 	mov.w	r2, #532	@ 0x214
 800c060:	490d      	ldr	r1, [pc, #52]	@ (800c098 <ethernetif_init+0x4c>)
 800c062:	480e      	ldr	r0, [pc, #56]	@ (800c09c <ethernetif_init+0x50>)
 800c064:	f00f f916 	bl	801b294 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2273      	movs	r2, #115	@ 0x73
 800c06c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2274      	movs	r2, #116	@ 0x74
 800c074:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a09      	ldr	r2, [pc, #36]	@ (800c0a0 <ethernetif_init+0x54>)
 800c07c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a08      	ldr	r2, [pc, #32]	@ (800c0a4 <ethernetif_init+0x58>)
 800c082:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7ff fdaf 	bl	800bbe8 <low_level_init>

  return ERR_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	0801c1a4 	.word	0x0801c1a4
 800c098:	0801c1c0 	.word	0x0801c1c0
 800c09c:	0801c1d0 	.word	0x0801c1d0
 800c0a0:	08019039 	.word	0x08019039
 800c0a4:	0800be69 	.word	0x0800be69

0800c0a8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c0b4:	68f9      	ldr	r1, [r7, #12]
 800c0b6:	4809      	ldr	r0, [pc, #36]	@ (800c0dc <pbuf_free_custom+0x34>)
 800c0b8:	f005 f94a 	bl	8011350 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c0bc:	4b08      	ldr	r3, [pc, #32]	@ (800c0e0 <pbuf_free_custom+0x38>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d107      	bne.n	800c0d4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c0c4:	4b06      	ldr	r3, [pc, #24]	@ (800c0e0 <pbuf_free_custom+0x38>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c0ca:	4b06      	ldr	r3, [pc, #24]	@ (800c0e4 <pbuf_free_custom+0x3c>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f000 fda2 	bl	800cc18 <osSemaphoreRelease>
  }
}
 800c0d4:	bf00      	nop
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	0801edc4 	.word	0x0801edc4
 800c0e0:	2400596c 	.word	0x2400596c
 800c0e4:	24005970 	.word	0x24005970

0800c0e8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c0ec:	f7f5 ff9a 	bl	8002024 <HAL_GetTick>
 800c0f0:	4603      	mov	r3, r0
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08e      	sub	sp, #56	@ 0x38
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c104:	2200      	movs	r2, #0
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	605a      	str	r2, [r3, #4]
 800c10a:	609a      	str	r2, [r3, #8]
 800c10c:	60da      	str	r2, [r3, #12]
 800c10e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a5d      	ldr	r2, [pc, #372]	@ (800c28c <HAL_ETH_MspInit+0x194>)
 800c116:	4293      	cmp	r3, r2
 800c118:	f040 80b3 	bne.w	800c282 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800c11c:	4b5c      	ldr	r3, [pc, #368]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c11e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c122:	4a5b      	ldr	r2, [pc, #364]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c128:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c12c:	4b58      	ldr	r3, [pc, #352]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c12e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c136:	623b      	str	r3, [r7, #32]
 800c138:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800c13a:	4b55      	ldr	r3, [pc, #340]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c13c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c140:	4a53      	ldr	r2, [pc, #332]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c146:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c14a:	4b51      	ldr	r3, [pc, #324]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c14c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c154:	61fb      	str	r3, [r7, #28]
 800c156:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800c158:	4b4d      	ldr	r3, [pc, #308]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c15a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c15e:	4a4c      	ldr	r2, [pc, #304]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c164:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c168:	4b49      	ldr	r3, [pc, #292]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c16a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c16e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c172:	61bb      	str	r3, [r7, #24]
 800c174:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c176:	4b46      	ldr	r3, [pc, #280]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c17c:	4a44      	ldr	r2, [pc, #272]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c17e:	f043 0304 	orr.w	r3, r3, #4
 800c182:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c186:	4b42      	ldr	r3, [pc, #264]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c18c:	f003 0304 	and.w	r3, r3, #4
 800c190:	617b      	str	r3, [r7, #20]
 800c192:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c194:	4b3e      	ldr	r3, [pc, #248]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c19a:	4a3d      	ldr	r2, [pc, #244]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c19c:	f043 0301 	orr.w	r3, r3, #1
 800c1a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c1a4:	4b3a      	ldr	r3, [pc, #232]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c1a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1aa:	f003 0301 	and.w	r3, r3, #1
 800c1ae:	613b      	str	r3, [r7, #16]
 800c1b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1b2:	4b37      	ldr	r3, [pc, #220]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c1b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1b8:	4a35      	ldr	r2, [pc, #212]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c1ba:	f043 0302 	orr.w	r3, r3, #2
 800c1be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c1c2:	4b33      	ldr	r3, [pc, #204]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c1c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1c8:	f003 0302 	and.w	r3, r3, #2
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c1d0:	4b2f      	ldr	r3, [pc, #188]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c1d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1d6:	4a2e      	ldr	r2, [pc, #184]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c1d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c1e0:	4b2b      	ldr	r3, [pc, #172]	@ (800c290 <HAL_ETH_MspInit+0x198>)
 800c1e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1ea:	60bb      	str	r3, [r7, #8]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c1ee:	2332      	movs	r3, #50	@ 0x32
 800c1f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1f2:	2302      	movs	r3, #2
 800c1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c1fe:	230b      	movs	r3, #11
 800c200:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c206:	4619      	mov	r1, r3
 800c208:	4822      	ldr	r0, [pc, #136]	@ (800c294 <HAL_ETH_MspInit+0x19c>)
 800c20a:	f7f9 fda7 	bl	8005d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c20e:	2386      	movs	r3, #134	@ 0x86
 800c210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c212:	2302      	movs	r3, #2
 800c214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c216:	2300      	movs	r3, #0
 800c218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c21a:	2303      	movs	r3, #3
 800c21c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c21e:	230b      	movs	r3, #11
 800c220:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c226:	4619      	mov	r1, r3
 800c228:	481b      	ldr	r0, [pc, #108]	@ (800c298 <HAL_ETH_MspInit+0x1a0>)
 800c22a:	f7f9 fd97 	bl	8005d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c22e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c232:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c234:	2302      	movs	r3, #2
 800c236:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c238:	2300      	movs	r3, #0
 800c23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c23c:	2303      	movs	r3, #3
 800c23e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c240:	230b      	movs	r3, #11
 800c242:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c248:	4619      	mov	r1, r3
 800c24a:	4814      	ldr	r0, [pc, #80]	@ (800c29c <HAL_ETH_MspInit+0x1a4>)
 800c24c:	f7f9 fd86 	bl	8005d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c250:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c254:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c256:	2302      	movs	r3, #2
 800c258:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c25a:	2300      	movs	r3, #0
 800c25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c25e:	2303      	movs	r3, #3
 800c260:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c262:	230b      	movs	r3, #11
 800c264:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c26a:	4619      	mov	r1, r3
 800c26c:	480c      	ldr	r0, [pc, #48]	@ (800c2a0 <HAL_ETH_MspInit+0x1a8>)
 800c26e:	f7f9 fd75 	bl	8005d5c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c272:	2200      	movs	r2, #0
 800c274:	2105      	movs	r1, #5
 800c276:	203d      	movs	r0, #61	@ 0x3d
 800c278:	f7f5 fff4 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c27c:	203d      	movs	r0, #61	@ 0x3d
 800c27e:	f7f6 f80b 	bl	8002298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c282:	bf00      	nop
 800c284:	3738      	adds	r7, #56	@ 0x38
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	40028000 	.word	0x40028000
 800c290:	58024400 	.word	0x58024400
 800c294:	58020800 	.word	0x58020800
 800c298:	58020000 	.word	0x58020000
 800c29c:	58020400 	.word	0x58020400
 800c2a0:	58021800 	.word	0x58021800

0800c2a4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c2a8:	4802      	ldr	r0, [pc, #8]	@ (800c2b4 <ETH_PHY_IO_Init+0x10>)
 800c2aa:	f7f8 ff6b 	bl	8005184 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	24005978 	.word	0x24005978

0800c2b8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0
  return 0;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	68f9      	ldr	r1, [r7, #12]
 800c2da:	4807      	ldr	r0, [pc, #28]	@ (800c2f8 <ETH_PHY_IO_ReadReg+0x30>)
 800c2dc:	f7f8 fcbc 	bl	8004c58 <HAL_ETH_ReadPHYRegister>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d002      	beq.n	800c2ec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ea:	e000      	b.n	800c2ee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	24005978 	.word	0x24005978

0800c2fc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	68f9      	ldr	r1, [r7, #12]
 800c30e:	4807      	ldr	r0, [pc, #28]	@ (800c32c <ETH_PHY_IO_WriteReg+0x30>)
 800c310:	f7f8 fcf6 	bl	8004d00 <HAL_ETH_WritePHYRegister>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	e000      	b.n	800c322 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	24005978 	.word	0x24005978

0800c330 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c334:	f7f5 fe76 	bl	8002024 <HAL_GetTick>
 800c338:	4603      	mov	r3, r0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b0a0      	sub	sp, #128	@ 0x80
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c348:	f107 0308 	add.w	r3, r7, #8
 800c34c:	2264      	movs	r2, #100	@ 0x64
 800c34e:	2100      	movs	r1, #0
 800c350:	4618      	mov	r0, r3
 800c352:	f00f f804 	bl	801b35e <memset>
  int32_t PHYLinkState = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c35a:	2300      	movs	r3, #0
 800c35c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c35e:	2300      	movs	r3, #0
 800c360:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c362:	2300      	movs	r3, #0
 800c364:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c36a:	483a      	ldr	r0, [pc, #232]	@ (800c454 <ethernet_link_thread+0x114>)
 800c36c:	f7f5 fd82 	bl	8001e74 <LAN8742_GetLinkState>
 800c370:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c374:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c378:	089b      	lsrs	r3, r3, #2
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00c      	beq.n	800c39e <ethernet_link_thread+0x5e>
 800c384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c386:	2b01      	cmp	r3, #1
 800c388:	dc09      	bgt.n	800c39e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c38a:	4833      	ldr	r0, [pc, #204]	@ (800c458 <ethernet_link_thread+0x118>)
 800c38c:	f7f8 f8f0 	bl	8004570 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c390:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c392:	f005 fa65 	bl	8011860 <netif_set_down>
    netif_set_link_down(netif);
 800c396:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c398:	f005 fac8 	bl	801192c <netif_set_link_down>
 800c39c:	e055      	b.n	800c44a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c39e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c3a4:	f003 0304 	and.w	r3, r3, #4
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d14e      	bne.n	800c44a <ethernet_link_thread+0x10a>
 800c3ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	dd4b      	ble.n	800c44a <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 800c3b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3b4:	3b02      	subs	r3, #2
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d82a      	bhi.n	800c410 <ethernet_link_thread+0xd0>
 800c3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c0 <ethernet_link_thread+0x80>)
 800c3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c0:	0800c3d1 	.word	0x0800c3d1
 800c3c4:	0800c3e3 	.word	0x0800c3e3
 800c3c8:	0800c3f3 	.word	0x0800c3f3
 800c3cc:	0800c403 	.word	0x0800c403
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c3d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c3d4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c3d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3da:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c3e0:	e017      	b.n	800c412 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c3e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3ea:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c3f0:	e00f      	b.n	800c412 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c3f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c3f6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c400:	e007      	b.n	800c412 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c402:	2300      	movs	r3, #0
 800c404:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c406:	2300      	movs	r3, #0
 800c408:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c40a:	2301      	movs	r3, #1
 800c40c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c40e:	e000      	b.n	800c412 <ethernet_link_thread+0xd2>
    default:
      break;
 800c410:	bf00      	nop
    }

    if(linkchanged)
 800c412:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c414:	2b00      	cmp	r3, #0
 800c416:	d018      	beq.n	800c44a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c418:	f107 0308 	add.w	r3, r7, #8
 800c41c:	4619      	mov	r1, r3
 800c41e:	480e      	ldr	r0, [pc, #56]	@ (800c458 <ethernet_link_thread+0x118>)
 800c420:	f7f8 fcc2 	bl	8004da8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c424:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c426:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c42a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c42c:	f107 0308 	add.w	r3, r7, #8
 800c430:	4619      	mov	r1, r3
 800c432:	4809      	ldr	r0, [pc, #36]	@ (800c458 <ethernet_link_thread+0x118>)
 800c434:	f7f8 fe8c 	bl	8005150 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c438:	4807      	ldr	r0, [pc, #28]	@ (800c458 <ethernet_link_thread+0x118>)
 800c43a:	f7f8 f825 	bl	8004488 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c43e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c440:	f005 f9a2 	bl	8011788 <netif_set_up>
      netif_set_link_up(netif);
 800c444:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c446:	f005 fa3d 	bl	80118c4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c44a:	2064      	movs	r0, #100	@ 0x64
 800c44c:	f000 f9df 	bl	800c80e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c450:	e78b      	b.n	800c36a <ethernet_link_thread+0x2a>
 800c452:	bf00      	nop
 800c454:	24005a60 	.word	0x24005a60
 800c458:	24005978 	.word	0x24005978

0800c45c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af02      	add	r7, sp, #8
 800c462:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c464:	4812      	ldr	r0, [pc, #72]	@ (800c4b0 <HAL_ETH_RxAllocateCallback+0x54>)
 800c466:	f004 feff 	bl	8011268 <memp_malloc_pool>
 800c46a:	60f8      	str	r0, [r7, #12]
  if (p)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d014      	beq.n	800c49c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f103 0220 	add.w	r2, r3, #32
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	4a0d      	ldr	r2, [pc, #52]	@ (800c4b4 <HAL_ETH_RxAllocateCallback+0x58>)
 800c480:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c48a:	9201      	str	r2, [sp, #4]
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2241      	movs	r2, #65	@ 0x41
 800c492:	2100      	movs	r1, #0
 800c494:	2000      	movs	r0, #0
 800c496:	f005 fc71 	bl	8011d7c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c49a:	e005      	b.n	800c4a8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c49c:	4b06      	ldr	r3, [pc, #24]	@ (800c4b8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c49e:	2201      	movs	r2, #1
 800c4a0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	601a      	str	r2, [r3, #0]
}
 800c4a8:	bf00      	nop
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	0801edc4 	.word	0x0801edc4
 800c4b4:	0800c0a9 	.word	0x0800c0a9
 800c4b8:	2400596c 	.word	0x2400596c

0800c4bc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b08d      	sub	sp, #52	@ 0x34
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
 800c4c8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	3b20      	subs	r3, #32
 800c4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800c4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ea:	887a      	ldrh	r2, [r7, #2]
 800c4ec:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d103      	bne.n	800c4fe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4fa:	601a      	str	r2, [r3, #0]
 800c4fc:	e003      	b.n	800c506 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c504:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c50a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c512:	e009      	b.n	800c528 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c516:	891a      	ldrh	r2, [r3, #8]
 800c518:	887b      	ldrh	r3, [r7, #2]
 800c51a:	4413      	add	r3, r2
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c520:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1f2      	bne.n	800c514 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c52e:	887b      	ldrh	r3, [r7, #2]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	623a      	str	r2, [r7, #32]
 800c534:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dd1d      	ble.n	800c578 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	f003 021f 	and.w	r2, r3, #31
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	4413      	add	r3, r2
 800c546:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c548:	6a3b      	ldr	r3, [r7, #32]
 800c54a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c54c:	f3bf 8f4f 	dsb	sy
}
 800c550:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c552:	4a0d      	ldr	r2, [pc, #52]	@ (800c588 <HAL_ETH_RxLinkCallback+0xcc>)
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	3320      	adds	r3, #32
 800c55e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	3b20      	subs	r3, #32
 800c564:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	dcf2      	bgt.n	800c552 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800c56c:	f3bf 8f4f 	dsb	sy
}
 800c570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c572:	f3bf 8f6f 	isb	sy
}
 800c576:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800c578:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c57a:	bf00      	nop
 800c57c:	3734      	adds	r7, #52	@ 0x34
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	e000ed00 	.word	0xe000ed00

0800c58c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f005 fdab 	bl	80120f0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <__NVIC_SetPriority>:
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	6039      	str	r1, [r7, #0]
 800c5ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c5b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	db0a      	blt.n	800c5ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	490c      	ldr	r1, [pc, #48]	@ (800c5f0 <__NVIC_SetPriority+0x4c>)
 800c5be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5c2:	0112      	lsls	r2, r2, #4
 800c5c4:	b2d2      	uxtb	r2, r2
 800c5c6:	440b      	add	r3, r1
 800c5c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c5cc:	e00a      	b.n	800c5e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	4908      	ldr	r1, [pc, #32]	@ (800c5f4 <__NVIC_SetPriority+0x50>)
 800c5d4:	88fb      	ldrh	r3, [r7, #6]
 800c5d6:	f003 030f 	and.w	r3, r3, #15
 800c5da:	3b04      	subs	r3, #4
 800c5dc:	0112      	lsls	r2, r2, #4
 800c5de:	b2d2      	uxtb	r2, r2
 800c5e0:	440b      	add	r3, r1
 800c5e2:	761a      	strb	r2, [r3, #24]
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	e000e100 	.word	0xe000e100
 800c5f4:	e000ed00 	.word	0xe000ed00

0800c5f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c5fc:	4b05      	ldr	r3, [pc, #20]	@ (800c614 <SysTick_Handler+0x1c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c600:	f002 fcc6 	bl	800ef90 <xTaskGetSchedulerState>
 800c604:	4603      	mov	r3, r0
 800c606:	2b01      	cmp	r3, #1
 800c608:	d001      	beq.n	800c60e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c60a:	f003 fc9d 	bl	800ff48 <xPortSysTickHandler>
  }
}
 800c60e:	bf00      	nop
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	e000e010 	.word	0xe000e010

0800c618 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c61c:	2100      	movs	r1, #0
 800c61e:	f06f 0004 	mvn.w	r0, #4
 800c622:	f7ff ffbf 	bl	800c5a4 <__NVIC_SetPriority>
#endif
}
 800c626:	bf00      	nop
 800c628:	bd80      	pop	{r7, pc}
	...

0800c62c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c632:	f3ef 8305 	mrs	r3, IPSR
 800c636:	603b      	str	r3, [r7, #0]
  return(result);
 800c638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d003      	beq.n	800c646 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c63e:	f06f 0305 	mvn.w	r3, #5
 800c642:	607b      	str	r3, [r7, #4]
 800c644:	e00c      	b.n	800c660 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c646:	4b0a      	ldr	r3, [pc, #40]	@ (800c670 <osKernelInitialize+0x44>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d105      	bne.n	800c65a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c64e:	4b08      	ldr	r3, [pc, #32]	@ (800c670 <osKernelInitialize+0x44>)
 800c650:	2201      	movs	r2, #1
 800c652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c654:	2300      	movs	r3, #0
 800c656:	607b      	str	r3, [r7, #4]
 800c658:	e002      	b.n	800c660 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c65a:	f04f 33ff 	mov.w	r3, #4294967295
 800c65e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c660:	687b      	ldr	r3, [r7, #4]
}
 800c662:	4618      	mov	r0, r3
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	24005a80 	.word	0x24005a80

0800c674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c67a:	f3ef 8305 	mrs	r3, IPSR
 800c67e:	603b      	str	r3, [r7, #0]
  return(result);
 800c680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c686:	f06f 0305 	mvn.w	r3, #5
 800c68a:	607b      	str	r3, [r7, #4]
 800c68c:	e010      	b.n	800c6b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c68e:	4b0b      	ldr	r3, [pc, #44]	@ (800c6bc <osKernelStart+0x48>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d109      	bne.n	800c6aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c696:	f7ff ffbf 	bl	800c618 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c69a:	4b08      	ldr	r3, [pc, #32]	@ (800c6bc <osKernelStart+0x48>)
 800c69c:	2202      	movs	r2, #2
 800c69e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c6a0:	f001 fff0 	bl	800e684 <vTaskStartScheduler>
      stat = osOK;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	607b      	str	r3, [r7, #4]
 800c6a8:	e002      	b.n	800c6b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c6b0:	687b      	ldr	r3, [r7, #4]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	24005a80 	.word	0x24005a80

0800c6c0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6c6:	f3ef 8305 	mrs	r3, IPSR
 800c6ca:	603b      	str	r3, [r7, #0]
  return(result);
 800c6cc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d003      	beq.n	800c6da <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c6d2:	f002 f903 	bl	800e8dc <xTaskGetTickCountFromISR>
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	e002      	b.n	800c6e0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c6da:	f002 f8ef 	bl	800e8bc <xTaskGetTickCount>
 800c6de:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c6e0:	687b      	ldr	r3, [r7, #4]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b08e      	sub	sp, #56	@ 0x38
 800c6ee:	af04      	add	r7, sp, #16
 800c6f0:	60f8      	str	r0, [r7, #12]
 800c6f2:	60b9      	str	r1, [r7, #8]
 800c6f4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6fa:	f3ef 8305 	mrs	r3, IPSR
 800c6fe:	617b      	str	r3, [r7, #20]
  return(result);
 800c700:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c702:	2b00      	cmp	r3, #0
 800c704:	d17e      	bne.n	800c804 <osThreadNew+0x11a>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d07b      	beq.n	800c804 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c70c:	2380      	movs	r3, #128	@ 0x80
 800c70e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c710:	2318      	movs	r3, #24
 800c712:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c714:	2300      	movs	r3, #0
 800c716:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c718:	f04f 33ff 	mov.w	r3, #4294967295
 800c71c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d045      	beq.n	800c7b0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d002      	beq.n	800c732 <osThreadNew+0x48>
        name = attr->name;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d002      	beq.n	800c740 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d008      	beq.n	800c758 <osThreadNew+0x6e>
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	2b38      	cmp	r3, #56	@ 0x38
 800c74a:	d805      	bhi.n	800c758 <osThreadNew+0x6e>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	f003 0301 	and.w	r3, r3, #1
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <osThreadNew+0x72>
        return (NULL);
 800c758:	2300      	movs	r3, #0
 800c75a:	e054      	b.n	800c806 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d003      	beq.n	800c76c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	089b      	lsrs	r3, r3, #2
 800c76a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00e      	beq.n	800c792 <osThreadNew+0xa8>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	2ba7      	cmp	r3, #167	@ 0xa7
 800c77a:	d90a      	bls.n	800c792 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c780:	2b00      	cmp	r3, #0
 800c782:	d006      	beq.n	800c792 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <osThreadNew+0xa8>
        mem = 1;
 800c78c:	2301      	movs	r3, #1
 800c78e:	61bb      	str	r3, [r7, #24]
 800c790:	e010      	b.n	800c7b4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10c      	bne.n	800c7b4 <osThreadNew+0xca>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d108      	bne.n	800c7b4 <osThreadNew+0xca>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d104      	bne.n	800c7b4 <osThreadNew+0xca>
          mem = 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	61bb      	str	r3, [r7, #24]
 800c7ae:	e001      	b.n	800c7b4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d110      	bne.n	800c7dc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7c2:	9202      	str	r2, [sp, #8]
 800c7c4:	9301      	str	r3, [sp, #4]
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	6a3a      	ldr	r2, [r7, #32]
 800c7ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f001 fd63 	bl	800e29c <xTaskCreateStatic>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	613b      	str	r3, [r7, #16]
 800c7da:	e013      	b.n	800c804 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d110      	bne.n	800c804 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	f107 0310 	add.w	r3, r7, #16
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f001 fdb1 	bl	800e35c <xTaskCreate>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d001      	beq.n	800c804 <osThreadNew+0x11a>
            hTask = NULL;
 800c800:	2300      	movs	r3, #0
 800c802:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c804:	693b      	ldr	r3, [r7, #16]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3728      	adds	r7, #40	@ 0x28
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c816:	f3ef 8305 	mrs	r3, IPSR
 800c81a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c81c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d003      	beq.n	800c82a <osDelay+0x1c>
    stat = osErrorISR;
 800c822:	f06f 0305 	mvn.w	r3, #5
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	e007      	b.n	800c83a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d002      	beq.n	800c83a <osDelay+0x2c>
      vTaskDelay(ticks);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f001 feef 	bl	800e618 <vTaskDelay>
    }
  }

  return (stat);
 800c83a:	68fb      	ldr	r3, [r7, #12]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c84c:	2300      	movs	r3, #0
 800c84e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c850:	f3ef 8305 	mrs	r3, IPSR
 800c854:	60bb      	str	r3, [r7, #8]
  return(result);
 800c856:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d174      	bne.n	800c946 <osMutexNew+0x102>
    if (attr != NULL) {
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <osMutexNew+0x26>
      type = attr->attr_bits;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	61bb      	str	r3, [r7, #24]
 800c868:	e001      	b.n	800c86e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c86a:	2300      	movs	r3, #0
 800c86c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <osMutexNew+0x3a>
      rmtx = 1U;
 800c878:	2301      	movs	r3, #1
 800c87a:	617b      	str	r3, [r7, #20]
 800c87c:	e001      	b.n	800c882 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c87e:	2300      	movs	r3, #0
 800c880:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	f003 0308 	and.w	r3, r3, #8
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d15c      	bne.n	800c946 <osMutexNew+0x102>
      mem = -1;
 800c88c:	f04f 33ff 	mov.w	r3, #4294967295
 800c890:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d015      	beq.n	800c8c4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d006      	beq.n	800c8ae <osMutexNew+0x6a>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	2b4f      	cmp	r3, #79	@ 0x4f
 800c8a6:	d902      	bls.n	800c8ae <osMutexNew+0x6a>
          mem = 1;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	613b      	str	r3, [r7, #16]
 800c8ac:	e00c      	b.n	800c8c8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d108      	bne.n	800c8c8 <osMutexNew+0x84>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d104      	bne.n	800c8c8 <osMutexNew+0x84>
            mem = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	613b      	str	r3, [r7, #16]
 800c8c2:	e001      	b.n	800c8c8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d112      	bne.n	800c8f4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d007      	beq.n	800c8e4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	2004      	movs	r0, #4
 800c8dc:	f000 fd71 	bl	800d3c2 <xQueueCreateMutexStatic>
 800c8e0:	61f8      	str	r0, [r7, #28]
 800c8e2:	e016      	b.n	800c912 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	2001      	movs	r0, #1
 800c8ec:	f000 fd69 	bl	800d3c2 <xQueueCreateMutexStatic>
 800c8f0:	61f8      	str	r0, [r7, #28]
 800c8f2:	e00e      	b.n	800c912 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10b      	bne.n	800c912 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d004      	beq.n	800c90a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c900:	2004      	movs	r0, #4
 800c902:	f000 fd46 	bl	800d392 <xQueueCreateMutex>
 800c906:	61f8      	str	r0, [r7, #28]
 800c908:	e003      	b.n	800c912 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c90a:	2001      	movs	r0, #1
 800c90c:	f000 fd41 	bl	800d392 <xQueueCreateMutex>
 800c910:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00c      	beq.n	800c932 <osMutexNew+0xee>
        if (attr != NULL) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d003      	beq.n	800c926 <osMutexNew+0xe2>
          name = attr->name;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	e001      	b.n	800c92a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c926:	2300      	movs	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c92a:	68f9      	ldr	r1, [r7, #12]
 800c92c:	69f8      	ldr	r0, [r7, #28]
 800c92e:	f001 fc2d 	bl	800e18c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d006      	beq.n	800c946 <osMutexNew+0x102>
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d003      	beq.n	800c946 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	f043 0301 	orr.w	r3, r3, #1
 800c944:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c946:	69fb      	ldr	r3, [r7, #28]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3720      	adds	r7, #32
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f023 0301 	bic.w	r3, r3, #1
 800c960:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f003 0301 	and.w	r3, r3, #1
 800c968:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c96a:	2300      	movs	r3, #0
 800c96c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c96e:	f3ef 8305 	mrs	r3, IPSR
 800c972:	60bb      	str	r3, [r7, #8]
  return(result);
 800c974:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c976:	2b00      	cmp	r3, #0
 800c978:	d003      	beq.n	800c982 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c97a:	f06f 0305 	mvn.w	r3, #5
 800c97e:	617b      	str	r3, [r7, #20]
 800c980:	e02c      	b.n	800c9dc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d103      	bne.n	800c990 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c988:	f06f 0303 	mvn.w	r3, #3
 800c98c:	617b      	str	r3, [r7, #20]
 800c98e:	e025      	b.n	800c9dc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d011      	beq.n	800c9ba <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6938      	ldr	r0, [r7, #16]
 800c99a:	f000 fd62 	bl	800d462 <xQueueTakeMutexRecursive>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d01b      	beq.n	800c9dc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d003      	beq.n	800c9b2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c9aa:	f06f 0301 	mvn.w	r3, #1
 800c9ae:	617b      	str	r3, [r7, #20]
 800c9b0:	e014      	b.n	800c9dc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c9b2:	f06f 0302 	mvn.w	r3, #2
 800c9b6:	617b      	str	r3, [r7, #20]
 800c9b8:	e010      	b.n	800c9dc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6938      	ldr	r0, [r7, #16]
 800c9be:	f001 f907 	bl	800dbd0 <xQueueSemaphoreTake>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d009      	beq.n	800c9dc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d003      	beq.n	800c9d6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c9ce:	f06f 0301 	mvn.w	r3, #1
 800c9d2:	617b      	str	r3, [r7, #20]
 800c9d4:	e002      	b.n	800c9dc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c9d6:	f06f 0302 	mvn.w	r3, #2
 800c9da:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c9dc:	697b      	ldr	r3, [r7, #20]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b086      	sub	sp, #24
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f023 0301 	bic.w	r3, r3, #1
 800c9f4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca02:	f3ef 8305 	mrs	r3, IPSR
 800ca06:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca08:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ca0e:	f06f 0305 	mvn.w	r3, #5
 800ca12:	617b      	str	r3, [r7, #20]
 800ca14:	e01f      	b.n	800ca56 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d103      	bne.n	800ca24 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ca1c:	f06f 0303 	mvn.w	r3, #3
 800ca20:	617b      	str	r3, [r7, #20]
 800ca22:	e018      	b.n	800ca56 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d009      	beq.n	800ca3e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ca2a:	6938      	ldr	r0, [r7, #16]
 800ca2c:	f000 fce4 	bl	800d3f8 <xQueueGiveMutexRecursive>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d00f      	beq.n	800ca56 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ca36:	f06f 0302 	mvn.w	r3, #2
 800ca3a:	617b      	str	r3, [r7, #20]
 800ca3c:	e00b      	b.n	800ca56 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ca3e:	2300      	movs	r3, #0
 800ca40:	2200      	movs	r2, #0
 800ca42:	2100      	movs	r1, #0
 800ca44:	6938      	ldr	r0, [r7, #16]
 800ca46:	f000 fdb1 	bl	800d5ac <xQueueGenericSend>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d002      	beq.n	800ca56 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ca50:	f06f 0302 	mvn.w	r3, #2
 800ca54:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ca56:	697b      	ldr	r3, [r7, #20]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b08a      	sub	sp, #40	@ 0x28
 800ca64:	af02      	add	r7, sp, #8
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca70:	f3ef 8305 	mrs	r3, IPSR
 800ca74:	613b      	str	r3, [r7, #16]
  return(result);
 800ca76:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d175      	bne.n	800cb68 <osSemaphoreNew+0x108>
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d072      	beq.n	800cb68 <osSemaphoreNew+0x108>
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d86e      	bhi.n	800cb68 <osSemaphoreNew+0x108>
    mem = -1;
 800ca8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d015      	beq.n	800cac2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d006      	beq.n	800caac <osSemaphoreNew+0x4c>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	2b4f      	cmp	r3, #79	@ 0x4f
 800caa4:	d902      	bls.n	800caac <osSemaphoreNew+0x4c>
        mem = 1;
 800caa6:	2301      	movs	r3, #1
 800caa8:	61bb      	str	r3, [r7, #24]
 800caaa:	e00c      	b.n	800cac6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d108      	bne.n	800cac6 <osSemaphoreNew+0x66>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d104      	bne.n	800cac6 <osSemaphoreNew+0x66>
          mem = 0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	61bb      	str	r3, [r7, #24]
 800cac0:	e001      	b.n	800cac6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cacc:	d04c      	beq.n	800cb68 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d128      	bne.n	800cb26 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d10a      	bne.n	800caf0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	2203      	movs	r2, #3
 800cae0:	9200      	str	r2, [sp, #0]
 800cae2:	2200      	movs	r2, #0
 800cae4:	2100      	movs	r1, #0
 800cae6:	2001      	movs	r0, #1
 800cae8:	f000 fb5e 	bl	800d1a8 <xQueueGenericCreateStatic>
 800caec:	61f8      	str	r0, [r7, #28]
 800caee:	e005      	b.n	800cafc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800caf0:	2203      	movs	r2, #3
 800caf2:	2100      	movs	r1, #0
 800caf4:	2001      	movs	r0, #1
 800caf6:	f000 fbd4 	bl	800d2a2 <xQueueGenericCreate>
 800cafa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d022      	beq.n	800cb48 <osSemaphoreNew+0xe8>
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d01f      	beq.n	800cb48 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cb08:	2300      	movs	r3, #0
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	69f8      	ldr	r0, [r7, #28]
 800cb10:	f000 fd4c 	bl	800d5ac <xQueueGenericSend>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d016      	beq.n	800cb48 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cb1a:	69f8      	ldr	r0, [r7, #28]
 800cb1c:	f001 f9ea 	bl	800def4 <vQueueDelete>
            hSemaphore = NULL;
 800cb20:	2300      	movs	r3, #0
 800cb22:	61fb      	str	r3, [r7, #28]
 800cb24:	e010      	b.n	800cb48 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d108      	bne.n	800cb3e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	461a      	mov	r2, r3
 800cb32:	68b9      	ldr	r1, [r7, #8]
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 fccb 	bl	800d4d0 <xQueueCreateCountingSemaphoreStatic>
 800cb3a:	61f8      	str	r0, [r7, #28]
 800cb3c:	e004      	b.n	800cb48 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cb3e:	68b9      	ldr	r1, [r7, #8]
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f000 fcfe 	bl	800d542 <xQueueCreateCountingSemaphore>
 800cb46:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00c      	beq.n	800cb68 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d003      	beq.n	800cb5c <osSemaphoreNew+0xfc>
          name = attr->name;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	617b      	str	r3, [r7, #20]
 800cb5a:	e001      	b.n	800cb60 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cb60:	6979      	ldr	r1, [r7, #20]
 800cb62:	69f8      	ldr	r0, [r7, #28]
 800cb64:	f001 fb12 	bl	800e18c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cb68:	69fb      	ldr	r3, [r7, #28]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3720      	adds	r7, #32
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cb82:	2300      	movs	r3, #0
 800cb84:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800cb8c:	f06f 0303 	mvn.w	r3, #3
 800cb90:	617b      	str	r3, [r7, #20]
 800cb92:	e039      	b.n	800cc08 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb94:	f3ef 8305 	mrs	r3, IPSR
 800cb98:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d022      	beq.n	800cbe6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d003      	beq.n	800cbae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800cba6:	f06f 0303 	mvn.w	r3, #3
 800cbaa:	617b      	str	r3, [r7, #20]
 800cbac:	e02c      	b.n	800cc08 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cbb2:	f107 0308 	add.w	r3, r7, #8
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	2100      	movs	r1, #0
 800cbba:	6938      	ldr	r0, [r7, #16]
 800cbbc:	f001 f918 	bl	800ddf0 <xQueueReceiveFromISR>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d003      	beq.n	800cbce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800cbc6:	f06f 0302 	mvn.w	r3, #2
 800cbca:	617b      	str	r3, [r7, #20]
 800cbcc:	e01c      	b.n	800cc08 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d019      	beq.n	800cc08 <osSemaphoreAcquire+0x94>
 800cbd4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc14 <osSemaphoreAcquire+0xa0>)
 800cbd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	e010      	b.n	800cc08 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cbe6:	6839      	ldr	r1, [r7, #0]
 800cbe8:	6938      	ldr	r0, [r7, #16]
 800cbea:	f000 fff1 	bl	800dbd0 <xQueueSemaphoreTake>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d009      	beq.n	800cc08 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d003      	beq.n	800cc02 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800cbfa:	f06f 0301 	mvn.w	r3, #1
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	e002      	b.n	800cc08 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800cc02:	f06f 0302 	mvn.w	r3, #2
 800cc06:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cc08:	697b      	ldr	r3, [r7, #20]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3718      	adds	r7, #24
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	e000ed04 	.word	0xe000ed04

0800cc18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d103      	bne.n	800cc36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cc2e:	f06f 0303 	mvn.w	r3, #3
 800cc32:	617b      	str	r3, [r7, #20]
 800cc34:	e02c      	b.n	800cc90 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc36:	f3ef 8305 	mrs	r3, IPSR
 800cc3a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d01a      	beq.n	800cc78 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cc42:	2300      	movs	r3, #0
 800cc44:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cc46:	f107 0308 	add.w	r3, r7, #8
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6938      	ldr	r0, [r7, #16]
 800cc4e:	f000 fe4d 	bl	800d8ec <xQueueGiveFromISR>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d003      	beq.n	800cc60 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cc58:	f06f 0302 	mvn.w	r3, #2
 800cc5c:	617b      	str	r3, [r7, #20]
 800cc5e:	e017      	b.n	800cc90 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d014      	beq.n	800cc90 <osSemaphoreRelease+0x78>
 800cc66:	4b0d      	ldr	r3, [pc, #52]	@ (800cc9c <osSemaphoreRelease+0x84>)
 800cc68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc6c:	601a      	str	r2, [r3, #0]
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	e00b      	b.n	800cc90 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cc78:	2300      	movs	r3, #0
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	6938      	ldr	r0, [r7, #16]
 800cc80:	f000 fc94 	bl	800d5ac <xQueueGenericSend>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d002      	beq.n	800cc90 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cc8a:	f06f 0302 	mvn.w	r3, #2
 800cc8e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cc90:	697b      	ldr	r3, [r7, #20]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3718      	adds	r7, #24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	e000ed04 	.word	0xe000ed04

0800cca0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08a      	sub	sp, #40	@ 0x28
 800cca4:	af02      	add	r7, sp, #8
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ccac:	2300      	movs	r3, #0
 800ccae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccb0:	f3ef 8305 	mrs	r3, IPSR
 800ccb4:	613b      	str	r3, [r7, #16]
  return(result);
 800ccb6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d15f      	bne.n	800cd7c <osMessageQueueNew+0xdc>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d05c      	beq.n	800cd7c <osMessageQueueNew+0xdc>
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d059      	beq.n	800cd7c <osMessageQueueNew+0xdc>
    mem = -1;
 800ccc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cccc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d029      	beq.n	800cd28 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d012      	beq.n	800cd02 <osMessageQueueNew+0x62>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	2b4f      	cmp	r3, #79	@ 0x4f
 800cce2:	d90e      	bls.n	800cd02 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00a      	beq.n	800cd02 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	695a      	ldr	r2, [r3, #20]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	fb01 f303 	mul.w	r3, r1, r3
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d302      	bcc.n	800cd02 <osMessageQueueNew+0x62>
        mem = 1;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	61bb      	str	r3, [r7, #24]
 800cd00:	e014      	b.n	800cd2c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d110      	bne.n	800cd2c <osMessageQueueNew+0x8c>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10c      	bne.n	800cd2c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d108      	bne.n	800cd2c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d104      	bne.n	800cd2c <osMessageQueueNew+0x8c>
          mem = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	61bb      	str	r3, [r7, #24]
 800cd26:	e001      	b.n	800cd2c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d10b      	bne.n	800cd4a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	691a      	ldr	r2, [r3, #16]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	9100      	str	r1, [sp, #0]
 800cd3e:	68b9      	ldr	r1, [r7, #8]
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 fa31 	bl	800d1a8 <xQueueGenericCreateStatic>
 800cd46:	61f8      	str	r0, [r7, #28]
 800cd48:	e008      	b.n	800cd5c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d105      	bne.n	800cd5c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cd50:	2200      	movs	r2, #0
 800cd52:	68b9      	ldr	r1, [r7, #8]
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f000 faa4 	bl	800d2a2 <xQueueGenericCreate>
 800cd5a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00c      	beq.n	800cd7c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d003      	beq.n	800cd70 <osMessageQueueNew+0xd0>
        name = attr->name;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	e001      	b.n	800cd74 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cd70:	2300      	movs	r3, #0
 800cd72:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cd74:	6979      	ldr	r1, [r7, #20]
 800cd76:	69f8      	ldr	r0, [r7, #28]
 800cd78:	f001 fa08 	bl	800e18c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cd7c:	69fb      	ldr	r3, [r7, #28]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3720      	adds	r7, #32
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
	...

0800cd88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b088      	sub	sp, #32
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	603b      	str	r3, [r7, #0]
 800cd94:	4613      	mov	r3, r2
 800cd96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cda0:	f3ef 8305 	mrs	r3, IPSR
 800cda4:	617b      	str	r3, [r7, #20]
  return(result);
 800cda6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d028      	beq.n	800cdfe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d005      	beq.n	800cdbe <osMessageQueuePut+0x36>
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d002      	beq.n	800cdbe <osMessageQueuePut+0x36>
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d003      	beq.n	800cdc6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cdbe:	f06f 0303 	mvn.w	r3, #3
 800cdc2:	61fb      	str	r3, [r7, #28]
 800cdc4:	e038      	b.n	800ce38 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cdca:	f107 0210 	add.w	r2, r7, #16
 800cdce:	2300      	movs	r3, #0
 800cdd0:	68b9      	ldr	r1, [r7, #8]
 800cdd2:	69b8      	ldr	r0, [r7, #24]
 800cdd4:	f000 fcec 	bl	800d7b0 <xQueueGenericSendFromISR>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d003      	beq.n	800cde6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cdde:	f06f 0302 	mvn.w	r3, #2
 800cde2:	61fb      	str	r3, [r7, #28]
 800cde4:	e028      	b.n	800ce38 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d025      	beq.n	800ce38 <osMessageQueuePut+0xb0>
 800cdec:	4b15      	ldr	r3, [pc, #84]	@ (800ce44 <osMessageQueuePut+0xbc>)
 800cdee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	e01c      	b.n	800ce38 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d002      	beq.n	800ce0a <osMessageQueuePut+0x82>
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d103      	bne.n	800ce12 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ce0a:	f06f 0303 	mvn.w	r3, #3
 800ce0e:	61fb      	str	r3, [r7, #28]
 800ce10:	e012      	b.n	800ce38 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ce12:	2300      	movs	r3, #0
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	68b9      	ldr	r1, [r7, #8]
 800ce18:	69b8      	ldr	r0, [r7, #24]
 800ce1a:	f000 fbc7 	bl	800d5ac <xQueueGenericSend>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d009      	beq.n	800ce38 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d003      	beq.n	800ce32 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ce2a:	f06f 0301 	mvn.w	r3, #1
 800ce2e:	61fb      	str	r3, [r7, #28]
 800ce30:	e002      	b.n	800ce38 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ce32:	f06f 0302 	mvn.w	r3, #2
 800ce36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ce38:	69fb      	ldr	r3, [r7, #28]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3720      	adds	r7, #32
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	e000ed04 	.word	0xe000ed04

0800ce48 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce5e:	f3ef 8305 	mrs	r3, IPSR
 800ce62:	617b      	str	r3, [r7, #20]
  return(result);
 800ce64:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d028      	beq.n	800cebc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d005      	beq.n	800ce7c <osMessageQueueGet+0x34>
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <osMessageQueueGet+0x34>
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d003      	beq.n	800ce84 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ce7c:	f06f 0303 	mvn.w	r3, #3
 800ce80:	61fb      	str	r3, [r7, #28]
 800ce82:	e037      	b.n	800cef4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ce84:	2300      	movs	r3, #0
 800ce86:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ce88:	f107 0310 	add.w	r3, r7, #16
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	68b9      	ldr	r1, [r7, #8]
 800ce90:	69b8      	ldr	r0, [r7, #24]
 800ce92:	f000 ffad 	bl	800ddf0 <xQueueReceiveFromISR>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d003      	beq.n	800cea4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ce9c:	f06f 0302 	mvn.w	r3, #2
 800cea0:	61fb      	str	r3, [r7, #28]
 800cea2:	e027      	b.n	800cef4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d024      	beq.n	800cef4 <osMessageQueueGet+0xac>
 800ceaa:	4b15      	ldr	r3, [pc, #84]	@ (800cf00 <osMessageQueueGet+0xb8>)
 800ceac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceb0:	601a      	str	r2, [r3, #0]
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	e01b      	b.n	800cef4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <osMessageQueueGet+0x80>
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d103      	bne.n	800ced0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cec8:	f06f 0303 	mvn.w	r3, #3
 800cecc:	61fb      	str	r3, [r7, #28]
 800cece:	e011      	b.n	800cef4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ced0:	683a      	ldr	r2, [r7, #0]
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	69b8      	ldr	r0, [r7, #24]
 800ced6:	f000 fd99 	bl	800da0c <xQueueReceive>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d009      	beq.n	800cef4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d003      	beq.n	800ceee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cee6:	f06f 0301 	mvn.w	r3, #1
 800ceea:	61fb      	str	r3, [r7, #28]
 800ceec:	e002      	b.n	800cef4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ceee:	f06f 0302 	mvn.w	r3, #2
 800cef2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cef4:	69fb      	ldr	r3, [r7, #28]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3720      	adds	r7, #32
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	e000ed04 	.word	0xe000ed04

0800cf04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	4a07      	ldr	r2, [pc, #28]	@ (800cf30 <vApplicationGetIdleTaskMemory+0x2c>)
 800cf14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	4a06      	ldr	r2, [pc, #24]	@ (800cf34 <vApplicationGetIdleTaskMemory+0x30>)
 800cf1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2280      	movs	r2, #128	@ 0x80
 800cf20:	601a      	str	r2, [r3, #0]
}
 800cf22:	bf00      	nop
 800cf24:	3714      	adds	r7, #20
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	24005a84 	.word	0x24005a84
 800cf34:	24005b2c 	.word	0x24005b2c

0800cf38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	4a07      	ldr	r2, [pc, #28]	@ (800cf64 <vApplicationGetTimerTaskMemory+0x2c>)
 800cf48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	4a06      	ldr	r2, [pc, #24]	@ (800cf68 <vApplicationGetTimerTaskMemory+0x30>)
 800cf4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf56:	601a      	str	r2, [r3, #0]
}
 800cf58:	bf00      	nop
 800cf5a:	3714      	adds	r7, #20
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr
 800cf64:	24005d2c 	.word	0x24005d2c
 800cf68:	24005dd4 	.word	0x24005dd4

0800cf6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f103 0208 	add.w	r2, r3, #8
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f04f 32ff 	mov.w	r2, #4294967295
 800cf84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f103 0208 	add.w	r2, r3, #8
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f103 0208 	add.w	r2, r3, #8
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cfa0:	bf00      	nop
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cfba:	bf00      	nop
 800cfbc:	370c      	adds	r7, #12
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr

0800cfc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cfc6:	b480      	push	{r7}
 800cfc8:	b085      	sub	sp, #20
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	689a      	ldr	r2, [r3, #8]
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	683a      	ldr	r2, [r7, #0]
 800cfea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	1c5a      	adds	r2, r3, #1
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	601a      	str	r2, [r3, #0]
}
 800d002:	bf00      	nop
 800d004:	3714      	adds	r7, #20
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr

0800d00e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d00e:	b480      	push	{r7}
 800d010:	b085      	sub	sp, #20
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d024:	d103      	bne.n	800d02e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	60fb      	str	r3, [r7, #12]
 800d02c:	e00c      	b.n	800d048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	3308      	adds	r3, #8
 800d032:	60fb      	str	r3, [r7, #12]
 800d034:	e002      	b.n	800d03c <vListInsert+0x2e>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	429a      	cmp	r2, r3
 800d046:	d2f6      	bcs.n	800d036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	683a      	ldr	r2, [r7, #0]
 800d062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	1c5a      	adds	r2, r3, #1
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	601a      	str	r2, [r3, #0]
}
 800d074:	bf00      	nop
 800d076:	3714      	adds	r7, #20
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	6892      	ldr	r2, [r2, #8]
 800d096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	6852      	ldr	r2, [r2, #4]
 800d0a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d103      	bne.n	800d0b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	689a      	ldr	r2, [r3, #8]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	1e5a      	subs	r2, r3, #1
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10b      	bne.n	800d100 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d0fa:	bf00      	nop
 800d0fc:	bf00      	nop
 800d0fe:	e7fd      	b.n	800d0fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d100:	f002 fe92 	bl	800fe28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d10c:	68f9      	ldr	r1, [r7, #12]
 800d10e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d110:	fb01 f303 	mul.w	r3, r1, r3
 800d114:	441a      	add	r2, r3
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d130:	3b01      	subs	r3, #1
 800d132:	68f9      	ldr	r1, [r7, #12]
 800d134:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d136:	fb01 f303 	mul.w	r3, r1, r3
 800d13a:	441a      	add	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	22ff      	movs	r2, #255	@ 0xff
 800d144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	22ff      	movs	r2, #255	@ 0xff
 800d14c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d114      	bne.n	800d180 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d01a      	beq.n	800d194 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	3310      	adds	r3, #16
 800d162:	4618      	mov	r0, r3
 800d164:	f001 fd3e 	bl	800ebe4 <xTaskRemoveFromEventList>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d012      	beq.n	800d194 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d16e:	4b0d      	ldr	r3, [pc, #52]	@ (800d1a4 <xQueueGenericReset+0xd0>)
 800d170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	e009      	b.n	800d194 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	3310      	adds	r3, #16
 800d184:	4618      	mov	r0, r3
 800d186:	f7ff fef1 	bl	800cf6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	3324      	adds	r3, #36	@ 0x24
 800d18e:	4618      	mov	r0, r3
 800d190:	f7ff feec 	bl	800cf6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d194:	f002 fe7a 	bl	800fe8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d198:	2301      	movs	r3, #1
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	e000ed04 	.word	0xe000ed04

0800d1a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b08e      	sub	sp, #56	@ 0x38
 800d1ac:	af02      	add	r7, sp, #8
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10b      	bne.n	800d1d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d1ce:	bf00      	nop
 800d1d0:	bf00      	nop
 800d1d2:	e7fd      	b.n	800d1d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10b      	bne.n	800d1f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d1ec:	bf00      	nop
 800d1ee:	bf00      	nop
 800d1f0:	e7fd      	b.n	800d1ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <xQueueGenericCreateStatic+0x56>
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <xQueueGenericCreateStatic+0x5a>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e000      	b.n	800d204 <xQueueGenericCreateStatic+0x5c>
 800d202:	2300      	movs	r3, #0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10b      	bne.n	800d220 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	623b      	str	r3, [r7, #32]
}
 800d21a:	bf00      	nop
 800d21c:	bf00      	nop
 800d21e:	e7fd      	b.n	800d21c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d102      	bne.n	800d22c <xQueueGenericCreateStatic+0x84>
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d101      	bne.n	800d230 <xQueueGenericCreateStatic+0x88>
 800d22c:	2301      	movs	r3, #1
 800d22e:	e000      	b.n	800d232 <xQueueGenericCreateStatic+0x8a>
 800d230:	2300      	movs	r3, #0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10b      	bne.n	800d24e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	61fb      	str	r3, [r7, #28]
}
 800d248:	bf00      	nop
 800d24a:	bf00      	nop
 800d24c:	e7fd      	b.n	800d24a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d24e:	2350      	movs	r3, #80	@ 0x50
 800d250:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	2b50      	cmp	r3, #80	@ 0x50
 800d256:	d00b      	beq.n	800d270 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	61bb      	str	r3, [r7, #24]
}
 800d26a:	bf00      	nop
 800d26c:	bf00      	nop
 800d26e:	e7fd      	b.n	800d26c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d270:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00d      	beq.n	800d298 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d284:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	4613      	mov	r3, r2
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	68b9      	ldr	r1, [r7, #8]
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f000 f840 	bl	800d318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3730      	adds	r7, #48	@ 0x30
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b08a      	sub	sp, #40	@ 0x28
 800d2a6:	af02      	add	r7, sp, #8
 800d2a8:	60f8      	str	r0, [r7, #12]
 800d2aa:	60b9      	str	r1, [r7, #8]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10b      	bne.n	800d2ce <xQueueGenericCreate+0x2c>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	613b      	str	r3, [r7, #16]
}
 800d2c8:	bf00      	nop
 800d2ca:	bf00      	nop
 800d2cc:	e7fd      	b.n	800d2ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	fb02 f303 	mul.w	r3, r2, r3
 800d2d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	3350      	adds	r3, #80	@ 0x50
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f002 fec5 	bl	801006c <pvPortMalloc>
 800d2e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d011      	beq.n	800d30e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	3350      	adds	r3, #80	@ 0x50
 800d2f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2fc:	79fa      	ldrb	r2, [r7, #7]
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	4613      	mov	r3, r2
 800d304:	697a      	ldr	r2, [r7, #20]
 800d306:	68b9      	ldr	r1, [r7, #8]
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f000 f805 	bl	800d318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d30e:	69bb      	ldr	r3, [r7, #24]
	}
 800d310:	4618      	mov	r0, r3
 800d312:	3720      	adds	r7, #32
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
 800d324:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d103      	bne.n	800d334 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	69ba      	ldr	r2, [r7, #24]
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	e002      	b.n	800d33a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d346:	2101      	movs	r1, #1
 800d348:	69b8      	ldr	r0, [r7, #24]
 800d34a:	f7ff fec3 	bl	800d0d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	78fa      	ldrb	r2, [r7, #3]
 800d352:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d356:	bf00      	nop
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b082      	sub	sp, #8
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00e      	beq.n	800d38a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2200      	movs	r2, #0
 800d370:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2200      	movs	r2, #0
 800d376:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d37e:	2300      	movs	r3, #0
 800d380:	2200      	movs	r2, #0
 800d382:	2100      	movs	r1, #0
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 f911 	bl	800d5ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d38a:	bf00      	nop
 800d38c:	3708      	adds	r7, #8
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d392:	b580      	push	{r7, lr}
 800d394:	b086      	sub	sp, #24
 800d396:	af00      	add	r7, sp, #0
 800d398:	4603      	mov	r3, r0
 800d39a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d39c:	2301      	movs	r3, #1
 800d39e:	617b      	str	r3, [r7, #20]
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d3a4:	79fb      	ldrb	r3, [r7, #7]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	6939      	ldr	r1, [r7, #16]
 800d3aa:	6978      	ldr	r0, [r7, #20]
 800d3ac:	f7ff ff79 	bl	800d2a2 <xQueueGenericCreate>
 800d3b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f7ff ffd3 	bl	800d35e <prvInitialiseMutex>

		return xNewQueue;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
	}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3718      	adds	r7, #24
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b088      	sub	sp, #32
 800d3c6:	af02      	add	r7, sp, #8
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	6039      	str	r1, [r7, #0]
 800d3cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	617b      	str	r3, [r7, #20]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d3d6:	79fb      	ldrb	r3, [r7, #7]
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	6939      	ldr	r1, [r7, #16]
 800d3e0:	6978      	ldr	r0, [r7, #20]
 800d3e2:	f7ff fee1 	bl	800d1a8 <xQueueGenericCreateStatic>
 800d3e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f7ff ffb8 	bl	800d35e <prvInitialiseMutex>

		return xNewQueue;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
	}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3718      	adds	r7, #24
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d3f8:	b590      	push	{r4, r7, lr}
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10b      	bne.n	800d422 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40e:	f383 8811 	msr	BASEPRI, r3
 800d412:	f3bf 8f6f 	isb	sy
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	60fb      	str	r3, [r7, #12]
}
 800d41c:	bf00      	nop
 800d41e:	bf00      	nop
 800d420:	e7fd      	b.n	800d41e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	689c      	ldr	r4, [r3, #8]
 800d426:	f001 fda3 	bl	800ef70 <xTaskGetCurrentTaskHandle>
 800d42a:	4603      	mov	r3, r0
 800d42c:	429c      	cmp	r4, r3
 800d42e:	d111      	bne.n	800d454 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	1e5a      	subs	r2, r3, #1
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d105      	bne.n	800d44e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d442:	2300      	movs	r3, #0
 800d444:	2200      	movs	r2, #0
 800d446:	2100      	movs	r1, #0
 800d448:	6938      	ldr	r0, [r7, #16]
 800d44a:	f000 f8af 	bl	800d5ac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d44e:	2301      	movs	r3, #1
 800d450:	617b      	str	r3, [r7, #20]
 800d452:	e001      	b.n	800d458 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d454:	2300      	movs	r3, #0
 800d456:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d458:	697b      	ldr	r3, [r7, #20]
	}
 800d45a:	4618      	mov	r0, r3
 800d45c:	371c      	adds	r7, #28
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd90      	pop	{r4, r7, pc}

0800d462 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d462:	b590      	push	{r4, r7, lr}
 800d464:	b087      	sub	sp, #28
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10b      	bne.n	800d48e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	60fb      	str	r3, [r7, #12]
}
 800d488:	bf00      	nop
 800d48a:	bf00      	nop
 800d48c:	e7fd      	b.n	800d48a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	689c      	ldr	r4, [r3, #8]
 800d492:	f001 fd6d 	bl	800ef70 <xTaskGetCurrentTaskHandle>
 800d496:	4603      	mov	r3, r0
 800d498:	429c      	cmp	r4, r3
 800d49a:	d107      	bne.n	800d4ac <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	1c5a      	adds	r2, r3, #1
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	617b      	str	r3, [r7, #20]
 800d4aa:	e00c      	b.n	800d4c6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d4ac:	6839      	ldr	r1, [r7, #0]
 800d4ae:	6938      	ldr	r0, [r7, #16]
 800d4b0:	f000 fb8e 	bl	800dbd0 <xQueueSemaphoreTake>
 800d4b4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d004      	beq.n	800d4c6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d4c6:	697b      	ldr	r3, [r7, #20]
	}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	371c      	adds	r7, #28
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd90      	pop	{r4, r7, pc}

0800d4d0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b08a      	sub	sp, #40	@ 0x28
 800d4d4:	af02      	add	r7, sp, #8
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10b      	bne.n	800d4fa <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	61bb      	str	r3, [r7, #24]
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop
 800d4f8:	e7fd      	b.n	800d4f6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d90b      	bls.n	800d51a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	617b      	str	r3, [r7, #20]
}
 800d514:	bf00      	nop
 800d516:	bf00      	nop
 800d518:	e7fd      	b.n	800d516 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d51a:	2302      	movs	r3, #2
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	2100      	movs	r1, #0
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f7ff fe3f 	bl	800d1a8 <xQueueGenericCreateStatic>
 800d52a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d538:	69fb      	ldr	r3, [r7, #28]
	}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3720      	adds	r7, #32
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d542:	b580      	push	{r7, lr}
 800d544:	b086      	sub	sp, #24
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10b      	bne.n	800d56a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	613b      	str	r3, [r7, #16]
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop
 800d568:	e7fd      	b.n	800d566 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d90b      	bls.n	800d58a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	60fb      	str	r3, [r7, #12]
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop
 800d588:	e7fd      	b.n	800d586 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d58a:	2202      	movs	r2, #2
 800d58c:	2100      	movs	r1, #0
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff fe87 	bl	800d2a2 <xQueueGenericCreate>
 800d594:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d002      	beq.n	800d5a2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d5a2:	697b      	ldr	r3, [r7, #20]
	}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3718      	adds	r7, #24
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b08e      	sub	sp, #56	@ 0x38
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	607a      	str	r2, [r7, #4]
 800d5b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10b      	bne.n	800d5e0 <xQueueGenericSend+0x34>
	__asm volatile
 800d5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d5da:	bf00      	nop
 800d5dc:	bf00      	nop
 800d5de:	e7fd      	b.n	800d5dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d103      	bne.n	800d5ee <xQueueGenericSend+0x42>
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <xQueueGenericSend+0x46>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e000      	b.n	800d5f4 <xQueueGenericSend+0x48>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10b      	bne.n	800d610 <xQueueGenericSend+0x64>
	__asm volatile
 800d5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d60a:	bf00      	nop
 800d60c:	bf00      	nop
 800d60e:	e7fd      	b.n	800d60c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	2b02      	cmp	r3, #2
 800d614:	d103      	bne.n	800d61e <xQueueGenericSend+0x72>
 800d616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d101      	bne.n	800d622 <xQueueGenericSend+0x76>
 800d61e:	2301      	movs	r3, #1
 800d620:	e000      	b.n	800d624 <xQueueGenericSend+0x78>
 800d622:	2300      	movs	r3, #0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10b      	bne.n	800d640 <xQueueGenericSend+0x94>
	__asm volatile
 800d628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62c:	f383 8811 	msr	BASEPRI, r3
 800d630:	f3bf 8f6f 	isb	sy
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	623b      	str	r3, [r7, #32]
}
 800d63a:	bf00      	nop
 800d63c:	bf00      	nop
 800d63e:	e7fd      	b.n	800d63c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d640:	f001 fca6 	bl	800ef90 <xTaskGetSchedulerState>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d102      	bne.n	800d650 <xQueueGenericSend+0xa4>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d101      	bne.n	800d654 <xQueueGenericSend+0xa8>
 800d650:	2301      	movs	r3, #1
 800d652:	e000      	b.n	800d656 <xQueueGenericSend+0xaa>
 800d654:	2300      	movs	r3, #0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d10b      	bne.n	800d672 <xQueueGenericSend+0xc6>
	__asm volatile
 800d65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	61fb      	str	r3, [r7, #28]
}
 800d66c:	bf00      	nop
 800d66e:	bf00      	nop
 800d670:	e7fd      	b.n	800d66e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d672:	f002 fbd9 	bl	800fe28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d67e:	429a      	cmp	r2, r3
 800d680:	d302      	bcc.n	800d688 <xQueueGenericSend+0xdc>
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	2b02      	cmp	r3, #2
 800d686:	d129      	bne.n	800d6dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d688:	683a      	ldr	r2, [r7, #0]
 800d68a:	68b9      	ldr	r1, [r7, #8]
 800d68c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d68e:	f000 fc6d 	bl	800df6c <prvCopyDataToQueue>
 800d692:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d010      	beq.n	800d6be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d69e:	3324      	adds	r3, #36	@ 0x24
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f001 fa9f 	bl	800ebe4 <xTaskRemoveFromEventList>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d013      	beq.n	800d6d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d6ac:	4b3f      	ldr	r3, [pc, #252]	@ (800d7ac <xQueueGenericSend+0x200>)
 800d6ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	e00a      	b.n	800d6d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d007      	beq.n	800d6d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d6c4:	4b39      	ldr	r3, [pc, #228]	@ (800d7ac <xQueueGenericSend+0x200>)
 800d6c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6ca:	601a      	str	r2, [r3, #0]
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d6d4:	f002 fbda 	bl	800fe8c <vPortExitCritical>
				return pdPASS;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e063      	b.n	800d7a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d103      	bne.n	800d6ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6e2:	f002 fbd3 	bl	800fe8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e05c      	b.n	800d7a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d106      	bne.n	800d6fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6f0:	f107 0314 	add.w	r3, r7, #20
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f001 fad9 	bl	800ecac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6fe:	f002 fbc5 	bl	800fe8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d702:	f001 f82f 	bl	800e764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d706:	f002 fb8f 	bl	800fe28 <vPortEnterCritical>
 800d70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d710:	b25b      	sxtb	r3, r3
 800d712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d716:	d103      	bne.n	800d720 <xQueueGenericSend+0x174>
 800d718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71a:	2200      	movs	r2, #0
 800d71c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d722:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d726:	b25b      	sxtb	r3, r3
 800d728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72c:	d103      	bne.n	800d736 <xQueueGenericSend+0x18a>
 800d72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d736:	f002 fba9 	bl	800fe8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d73a:	1d3a      	adds	r2, r7, #4
 800d73c:	f107 0314 	add.w	r3, r7, #20
 800d740:	4611      	mov	r1, r2
 800d742:	4618      	mov	r0, r3
 800d744:	f001 fac8 	bl	800ecd8 <xTaskCheckForTimeOut>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d124      	bne.n	800d798 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d74e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d750:	f000 fd04 	bl	800e15c <prvIsQueueFull>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d018      	beq.n	800d78c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75c:	3310      	adds	r3, #16
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	4611      	mov	r1, r2
 800d762:	4618      	mov	r0, r3
 800d764:	f001 f9ec 	bl	800eb40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d76a:	f000 fc8f 	bl	800e08c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d76e:	f001 f807 	bl	800e780 <xTaskResumeAll>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	f47f af7c 	bne.w	800d672 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d77a:	4b0c      	ldr	r3, [pc, #48]	@ (800d7ac <xQueueGenericSend+0x200>)
 800d77c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	e772      	b.n	800d672 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d78c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d78e:	f000 fc7d 	bl	800e08c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d792:	f000 fff5 	bl	800e780 <xTaskResumeAll>
 800d796:	e76c      	b.n	800d672 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d79a:	f000 fc77 	bl	800e08c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d79e:	f000 ffef 	bl	800e780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d7a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3738      	adds	r7, #56	@ 0x38
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	e000ed04 	.word	0xe000ed04

0800d7b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b090      	sub	sp, #64	@ 0x40
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10b      	bne.n	800d7e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d7da:	bf00      	nop
 800d7dc:	bf00      	nop
 800d7de:	e7fd      	b.n	800d7dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d103      	bne.n	800d7ee <xQueueGenericSendFromISR+0x3e>
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d101      	bne.n	800d7f2 <xQueueGenericSendFromISR+0x42>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e000      	b.n	800d7f4 <xQueueGenericSendFromISR+0x44>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10b      	bne.n	800d810 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d80a:	bf00      	nop
 800d80c:	bf00      	nop
 800d80e:	e7fd      	b.n	800d80c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	2b02      	cmp	r3, #2
 800d814:	d103      	bne.n	800d81e <xQueueGenericSendFromISR+0x6e>
 800d816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d101      	bne.n	800d822 <xQueueGenericSendFromISR+0x72>
 800d81e:	2301      	movs	r3, #1
 800d820:	e000      	b.n	800d824 <xQueueGenericSendFromISR+0x74>
 800d822:	2300      	movs	r3, #0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10b      	bne.n	800d840 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	623b      	str	r3, [r7, #32]
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	e7fd      	b.n	800d83c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d840:	f002 fbd2 	bl	800ffe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d844:	f3ef 8211 	mrs	r2, BASEPRI
 800d848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	61fa      	str	r2, [r7, #28]
 800d85a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d85c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d85e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d862:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d868:	429a      	cmp	r2, r3
 800d86a:	d302      	bcc.n	800d872 <xQueueGenericSendFromISR+0xc2>
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d12f      	bne.n	800d8d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d874:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d878:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d880:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d882:	683a      	ldr	r2, [r7, #0]
 800d884:	68b9      	ldr	r1, [r7, #8]
 800d886:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d888:	f000 fb70 	bl	800df6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d88c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d894:	d112      	bne.n	800d8bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d016      	beq.n	800d8cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a0:	3324      	adds	r3, #36	@ 0x24
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f001 f99e 	bl	800ebe4 <xTaskRemoveFromEventList>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00e      	beq.n	800d8cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00b      	beq.n	800d8cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	601a      	str	r2, [r3, #0]
 800d8ba:	e007      	b.n	800d8cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d8bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	b25a      	sxtb	r2, r3
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d8d0:	e001      	b.n	800d8d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d8e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3740      	adds	r7, #64	@ 0x40
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08e      	sub	sp, #56	@ 0x38
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d10b      	bne.n	800d918 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	623b      	str	r3, [r7, #32]
}
 800d912:	bf00      	nop
 800d914:	bf00      	nop
 800d916:	e7fd      	b.n	800d914 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00b      	beq.n	800d938 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	61fb      	str	r3, [r7, #28]
}
 800d932:	bf00      	nop
 800d934:	bf00      	nop
 800d936:	e7fd      	b.n	800d934 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d103      	bne.n	800d948 <xQueueGiveFromISR+0x5c>
 800d940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d101      	bne.n	800d94c <xQueueGiveFromISR+0x60>
 800d948:	2301      	movs	r3, #1
 800d94a:	e000      	b.n	800d94e <xQueueGiveFromISR+0x62>
 800d94c:	2300      	movs	r3, #0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10b      	bne.n	800d96a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	61bb      	str	r3, [r7, #24]
}
 800d964:	bf00      	nop
 800d966:	bf00      	nop
 800d968:	e7fd      	b.n	800d966 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d96a:	f002 fb3d 	bl	800ffe8 <vPortValidateInterruptPriority>
	__asm volatile
 800d96e:	f3ef 8211 	mrs	r2, BASEPRI
 800d972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	617a      	str	r2, [r7, #20]
 800d984:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d986:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d988:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d98e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d996:	429a      	cmp	r2, r3
 800d998:	d22b      	bcs.n	800d9f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a6:	1c5a      	adds	r2, r3, #1
 800d9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d9ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b4:	d112      	bne.n	800d9dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d016      	beq.n	800d9ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c0:	3324      	adds	r3, #36	@ 0x24
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f001 f90e 	bl	800ebe4 <xTaskRemoveFromEventList>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00e      	beq.n	800d9ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00b      	beq.n	800d9ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	601a      	str	r2, [r3, #0]
 800d9da:	e007      	b.n	800d9ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	b25a      	sxtb	r2, r3
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f0:	e001      	b.n	800d9f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f383 8811 	msr	BASEPRI, r3
}
 800da00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800da04:	4618      	mov	r0, r3
 800da06:	3738      	adds	r7, #56	@ 0x38
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08c      	sub	sp, #48	@ 0x30
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800da18:	2300      	movs	r3, #0
 800da1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da22:	2b00      	cmp	r3, #0
 800da24:	d10b      	bne.n	800da3e <xQueueReceive+0x32>
	__asm volatile
 800da26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2a:	f383 8811 	msr	BASEPRI, r3
 800da2e:	f3bf 8f6f 	isb	sy
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	623b      	str	r3, [r7, #32]
}
 800da38:	bf00      	nop
 800da3a:	bf00      	nop
 800da3c:	e7fd      	b.n	800da3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d103      	bne.n	800da4c <xQueueReceive+0x40>
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d101      	bne.n	800da50 <xQueueReceive+0x44>
 800da4c:	2301      	movs	r3, #1
 800da4e:	e000      	b.n	800da52 <xQueueReceive+0x46>
 800da50:	2300      	movs	r3, #0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d10b      	bne.n	800da6e <xQueueReceive+0x62>
	__asm volatile
 800da56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5a:	f383 8811 	msr	BASEPRI, r3
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	f3bf 8f4f 	dsb	sy
 800da66:	61fb      	str	r3, [r7, #28]
}
 800da68:	bf00      	nop
 800da6a:	bf00      	nop
 800da6c:	e7fd      	b.n	800da6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da6e:	f001 fa8f 	bl	800ef90 <xTaskGetSchedulerState>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <xQueueReceive+0x72>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d101      	bne.n	800da82 <xQueueReceive+0x76>
 800da7e:	2301      	movs	r3, #1
 800da80:	e000      	b.n	800da84 <xQueueReceive+0x78>
 800da82:	2300      	movs	r3, #0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10b      	bne.n	800daa0 <xQueueReceive+0x94>
	__asm volatile
 800da88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da8c:	f383 8811 	msr	BASEPRI, r3
 800da90:	f3bf 8f6f 	isb	sy
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	61bb      	str	r3, [r7, #24]
}
 800da9a:	bf00      	nop
 800da9c:	bf00      	nop
 800da9e:	e7fd      	b.n	800da9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800daa0:	f002 f9c2 	bl	800fe28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800daaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daac:	2b00      	cmp	r3, #0
 800daae:	d01f      	beq.n	800daf0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dab0:	68b9      	ldr	r1, [r7, #8]
 800dab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dab4:	f000 fac4 	bl	800e040 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daba:	1e5a      	subs	r2, r3, #1
 800dabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac2:	691b      	ldr	r3, [r3, #16]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00f      	beq.n	800dae8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daca:	3310      	adds	r3, #16
 800dacc:	4618      	mov	r0, r3
 800dace:	f001 f889 	bl	800ebe4 <xTaskRemoveFromEventList>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d007      	beq.n	800dae8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dad8:	4b3c      	ldr	r3, [pc, #240]	@ (800dbcc <xQueueReceive+0x1c0>)
 800dada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dade:	601a      	str	r2, [r3, #0]
 800dae0:	f3bf 8f4f 	dsb	sy
 800dae4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dae8:	f002 f9d0 	bl	800fe8c <vPortExitCritical>
				return pdPASS;
 800daec:	2301      	movs	r3, #1
 800daee:	e069      	b.n	800dbc4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d103      	bne.n	800dafe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800daf6:	f002 f9c9 	bl	800fe8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dafa:	2300      	movs	r3, #0
 800dafc:	e062      	b.n	800dbc4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db00:	2b00      	cmp	r3, #0
 800db02:	d106      	bne.n	800db12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db04:	f107 0310 	add.w	r3, r7, #16
 800db08:	4618      	mov	r0, r3
 800db0a:	f001 f8cf 	bl	800ecac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db0e:	2301      	movs	r3, #1
 800db10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db12:	f002 f9bb 	bl	800fe8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db16:	f000 fe25 	bl	800e764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db1a:	f002 f985 	bl	800fe28 <vPortEnterCritical>
 800db1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db24:	b25b      	sxtb	r3, r3
 800db26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db2a:	d103      	bne.n	800db34 <xQueueReceive+0x128>
 800db2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db3a:	b25b      	sxtb	r3, r3
 800db3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db40:	d103      	bne.n	800db4a <xQueueReceive+0x13e>
 800db42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db4a:	f002 f99f 	bl	800fe8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db4e:	1d3a      	adds	r2, r7, #4
 800db50:	f107 0310 	add.w	r3, r7, #16
 800db54:	4611      	mov	r1, r2
 800db56:	4618      	mov	r0, r3
 800db58:	f001 f8be 	bl	800ecd8 <xTaskCheckForTimeOut>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d123      	bne.n	800dbaa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db64:	f000 fae4 	bl	800e130 <prvIsQueueEmpty>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d017      	beq.n	800db9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db70:	3324      	adds	r3, #36	@ 0x24
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	4611      	mov	r1, r2
 800db76:	4618      	mov	r0, r3
 800db78:	f000 ffe2 	bl	800eb40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db7e:	f000 fa85 	bl	800e08c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db82:	f000 fdfd 	bl	800e780 <xTaskResumeAll>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d189      	bne.n	800daa0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800db8c:	4b0f      	ldr	r3, [pc, #60]	@ (800dbcc <xQueueReceive+0x1c0>)
 800db8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	e780      	b.n	800daa0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800db9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dba0:	f000 fa74 	bl	800e08c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dba4:	f000 fdec 	bl	800e780 <xTaskResumeAll>
 800dba8:	e77a      	b.n	800daa0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dbaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbac:	f000 fa6e 	bl	800e08c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbb0:	f000 fde6 	bl	800e780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbb6:	f000 fabb 	bl	800e130 <prvIsQueueEmpty>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f43f af6f 	beq.w	800daa0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dbc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3730      	adds	r7, #48	@ 0x30
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	e000ed04 	.word	0xe000ed04

0800dbd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b08e      	sub	sp, #56	@ 0x38
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10b      	bne.n	800dc04 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf0:	f383 8811 	msr	BASEPRI, r3
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	623b      	str	r3, [r7, #32]
}
 800dbfe:	bf00      	nop
 800dc00:	bf00      	nop
 800dc02:	e7fd      	b.n	800dc00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00b      	beq.n	800dc24 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc10:	f383 8811 	msr	BASEPRI, r3
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	61fb      	str	r3, [r7, #28]
}
 800dc1e:	bf00      	nop
 800dc20:	bf00      	nop
 800dc22:	e7fd      	b.n	800dc20 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc24:	f001 f9b4 	bl	800ef90 <xTaskGetSchedulerState>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d102      	bne.n	800dc34 <xQueueSemaphoreTake+0x64>
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d101      	bne.n	800dc38 <xQueueSemaphoreTake+0x68>
 800dc34:	2301      	movs	r3, #1
 800dc36:	e000      	b.n	800dc3a <xQueueSemaphoreTake+0x6a>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d10b      	bne.n	800dc56 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800dc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	61bb      	str	r3, [r7, #24]
}
 800dc50:	bf00      	nop
 800dc52:	bf00      	nop
 800dc54:	e7fd      	b.n	800dc52 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc56:	f002 f8e7 	bl	800fe28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc5e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dc60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d024      	beq.n	800dcb0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc68:	1e5a      	subs	r2, r3, #1
 800dc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc6c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d104      	bne.n	800dc80 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dc76:	f001 fb05 	bl	800f284 <pvTaskIncrementMutexHeldCount>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00f      	beq.n	800dca8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8a:	3310      	adds	r3, #16
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f000 ffa9 	bl	800ebe4 <xTaskRemoveFromEventList>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d007      	beq.n	800dca8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc98:	4b54      	ldr	r3, [pc, #336]	@ (800ddec <xQueueSemaphoreTake+0x21c>)
 800dc9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc9e:	601a      	str	r2, [r3, #0]
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dca8:	f002 f8f0 	bl	800fe8c <vPortExitCritical>
				return pdPASS;
 800dcac:	2301      	movs	r3, #1
 800dcae:	e098      	b.n	800dde2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d112      	bne.n	800dcdc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00b      	beq.n	800dcd4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800dcbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	617b      	str	r3, [r7, #20]
}
 800dcce:	bf00      	nop
 800dcd0:	bf00      	nop
 800dcd2:	e7fd      	b.n	800dcd0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dcd4:	f002 f8da 	bl	800fe8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	e082      	b.n	800dde2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dcdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d106      	bne.n	800dcf0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dce2:	f107 030c 	add.w	r3, r7, #12
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 ffe0 	bl	800ecac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcec:	2301      	movs	r3, #1
 800dcee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcf0:	f002 f8cc 	bl	800fe8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcf4:	f000 fd36 	bl	800e764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcf8:	f002 f896 	bl	800fe28 <vPortEnterCritical>
 800dcfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd02:	b25b      	sxtb	r3, r3
 800dd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd08:	d103      	bne.n	800dd12 <xQueueSemaphoreTake+0x142>
 800dd0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd18:	b25b      	sxtb	r3, r3
 800dd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1e:	d103      	bne.n	800dd28 <xQueueSemaphoreTake+0x158>
 800dd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd28:	f002 f8b0 	bl	800fe8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd2c:	463a      	mov	r2, r7
 800dd2e:	f107 030c 	add.w	r3, r7, #12
 800dd32:	4611      	mov	r1, r2
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 ffcf 	bl	800ecd8 <xTaskCheckForTimeOut>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d132      	bne.n	800dda6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd42:	f000 f9f5 	bl	800e130 <prvIsQueueEmpty>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d026      	beq.n	800dd9a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d109      	bne.n	800dd68 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800dd54:	f002 f868 	bl	800fe28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f001 f935 	bl	800efcc <xTaskPriorityInherit>
 800dd62:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dd64:	f002 f892 	bl	800fe8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd6a:	3324      	adds	r3, #36	@ 0x24
 800dd6c:	683a      	ldr	r2, [r7, #0]
 800dd6e:	4611      	mov	r1, r2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 fee5 	bl	800eb40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd78:	f000 f988 	bl	800e08c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd7c:	f000 fd00 	bl	800e780 <xTaskResumeAll>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f47f af67 	bne.w	800dc56 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dd88:	4b18      	ldr	r3, [pc, #96]	@ (800ddec <xQueueSemaphoreTake+0x21c>)
 800dd8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	e75d      	b.n	800dc56 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dd9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd9c:	f000 f976 	bl	800e08c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dda0:	f000 fcee 	bl	800e780 <xTaskResumeAll>
 800dda4:	e757      	b.n	800dc56 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dda6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dda8:	f000 f970 	bl	800e08c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ddac:	f000 fce8 	bl	800e780 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddb2:	f000 f9bd 	bl	800e130 <prvIsQueueEmpty>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f43f af4c 	beq.w	800dc56 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ddbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00d      	beq.n	800dde0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ddc4:	f002 f830 	bl	800fe28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ddc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddca:	f000 f8b7 	bl	800df3c <prvGetDisinheritPriorityAfterTimeout>
 800ddce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ddd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd2:	689b      	ldr	r3, [r3, #8]
 800ddd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f001 f9d0 	bl	800f17c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dddc:	f002 f856 	bl	800fe8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dde0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3738      	adds	r7, #56	@ 0x38
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	e000ed04 	.word	0xe000ed04

0800ddf0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b08e      	sub	sp, #56	@ 0x38
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800de00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10b      	bne.n	800de1e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	623b      	str	r3, [r7, #32]
}
 800de18:	bf00      	nop
 800de1a:	bf00      	nop
 800de1c:	e7fd      	b.n	800de1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d103      	bne.n	800de2c <xQueueReceiveFromISR+0x3c>
 800de24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <xQueueReceiveFromISR+0x40>
 800de2c:	2301      	movs	r3, #1
 800de2e:	e000      	b.n	800de32 <xQueueReceiveFromISR+0x42>
 800de30:	2300      	movs	r3, #0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10b      	bne.n	800de4e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	61fb      	str	r3, [r7, #28]
}
 800de48:	bf00      	nop
 800de4a:	bf00      	nop
 800de4c:	e7fd      	b.n	800de4a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de4e:	f002 f8cb 	bl	800ffe8 <vPortValidateInterruptPriority>
	__asm volatile
 800de52:	f3ef 8211 	mrs	r2, BASEPRI
 800de56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de5a:	f383 8811 	msr	BASEPRI, r3
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	61ba      	str	r2, [r7, #24]
 800de68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800de6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de72:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de76:	2b00      	cmp	r3, #0
 800de78:	d02f      	beq.n	800deda <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800de7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de84:	68b9      	ldr	r1, [r7, #8]
 800de86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de88:	f000 f8da 	bl	800e040 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8e:	1e5a      	subs	r2, r3, #1
 800de90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800de94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800de98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de9c:	d112      	bne.n	800dec4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d016      	beq.n	800ded4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea8:	3310      	adds	r3, #16
 800deaa:	4618      	mov	r0, r3
 800deac:	f000 fe9a 	bl	800ebe4 <xTaskRemoveFromEventList>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00e      	beq.n	800ded4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00b      	beq.n	800ded4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	601a      	str	r2, [r3, #0]
 800dec2:	e007      	b.n	800ded4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dec8:	3301      	adds	r3, #1
 800deca:	b2db      	uxtb	r3, r3
 800decc:	b25a      	sxtb	r2, r3
 800dece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ded4:	2301      	movs	r3, #1
 800ded6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ded8:	e001      	b.n	800dede <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800deda:	2300      	movs	r3, #0
 800dedc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	f383 8811 	msr	BASEPRI, r3
}
 800dee8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800deea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800deec:	4618      	mov	r0, r3
 800deee:	3738      	adds	r7, #56	@ 0x38
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d10b      	bne.n	800df1e <vQueueDelete+0x2a>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	60bb      	str	r3, [r7, #8]
}
 800df18:	bf00      	nop
 800df1a:	bf00      	nop
 800df1c:	e7fd      	b.n	800df1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f000 f95e 	bl	800e1e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d102      	bne.n	800df34 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f002 f96a 	bl	8010208 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800df34:	bf00      	nop
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800df3c:	b480      	push	{r7}
 800df3e:	b085      	sub	sp, #20
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d006      	beq.n	800df5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800df56:	60fb      	str	r3, [r7, #12]
 800df58:	e001      	b.n	800df5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800df5a:	2300      	movs	r3, #0
 800df5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800df5e:	68fb      	ldr	r3, [r7, #12]
	}
 800df60:	4618      	mov	r0, r3
 800df62:	3714      	adds	r7, #20
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800df78:	2300      	movs	r3, #0
 800df7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df86:	2b00      	cmp	r3, #0
 800df88:	d10d      	bne.n	800dfa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d14d      	bne.n	800e02e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	4618      	mov	r0, r3
 800df98:	f001 f880 	bl	800f09c <xTaskPriorityDisinherit>
 800df9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	609a      	str	r2, [r3, #8]
 800dfa4:	e043      	b.n	800e02e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d119      	bne.n	800dfe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6858      	ldr	r0, [r3, #4]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	68b9      	ldr	r1, [r7, #8]
 800dfb8:	f00d faa5 	bl	801b506 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	685a      	ldr	r2, [r3, #4]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfc4:	441a      	add	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	685a      	ldr	r2, [r3, #4]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d32b      	bcc.n	800e02e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	605a      	str	r2, [r3, #4]
 800dfde:	e026      	b.n	800e02e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	68d8      	ldr	r0, [r3, #12]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe8:	461a      	mov	r2, r3
 800dfea:	68b9      	ldr	r1, [r7, #8]
 800dfec:	f00d fa8b 	bl	801b506 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	68da      	ldr	r2, [r3, #12]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dff8:	425b      	negs	r3, r3
 800dffa:	441a      	add	r2, r3
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	68da      	ldr	r2, [r3, #12]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d207      	bcs.n	800e01c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	689a      	ldr	r2, [r3, #8]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e014:	425b      	negs	r3, r3
 800e016:	441a      	add	r2, r3
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2b02      	cmp	r3, #2
 800e020:	d105      	bne.n	800e02e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	1c5a      	adds	r2, r3, #1
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e036:	697b      	ldr	r3, [r7, #20]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3718      	adds	r7, #24
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d018      	beq.n	800e084 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	68da      	ldr	r2, [r3, #12]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e05a:	441a      	add	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	68da      	ldr	r2, [r3, #12]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d303      	bcc.n	800e074 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	68d9      	ldr	r1, [r3, #12]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e07c:	461a      	mov	r2, r3
 800e07e:	6838      	ldr	r0, [r7, #0]
 800e080:	f00d fa41 	bl	801b506 <memcpy>
	}
}
 800e084:	bf00      	nop
 800e086:	3708      	adds	r7, #8
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e094:	f001 fec8 	bl	800fe28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e09e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0a0:	e011      	b.n	800e0c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d012      	beq.n	800e0d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	3324      	adds	r3, #36	@ 0x24
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 fd98 	bl	800ebe4 <xTaskRemoveFromEventList>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e0ba:	f000 fe71 	bl	800eda0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	dce9      	bgt.n	800e0a2 <prvUnlockQueue+0x16>
 800e0ce:	e000      	b.n	800e0d2 <prvUnlockQueue+0x46>
					break;
 800e0d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	22ff      	movs	r2, #255	@ 0xff
 800e0d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e0da:	f001 fed7 	bl	800fe8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e0de:	f001 fea3 	bl	800fe28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e0e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e0ea:	e011      	b.n	800e110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d012      	beq.n	800e11a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	3310      	adds	r3, #16
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 fd73 	bl	800ebe4 <xTaskRemoveFromEventList>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e104:	f000 fe4c 	bl	800eda0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e108:	7bbb      	ldrb	r3, [r7, #14]
 800e10a:	3b01      	subs	r3, #1
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e114:	2b00      	cmp	r3, #0
 800e116:	dce9      	bgt.n	800e0ec <prvUnlockQueue+0x60>
 800e118:	e000      	b.n	800e11c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e11a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	22ff      	movs	r2, #255	@ 0xff
 800e120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e124:	f001 feb2 	bl	800fe8c <vPortExitCritical>
}
 800e128:	bf00      	nop
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e138:	f001 fe76 	bl	800fe28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e140:	2b00      	cmp	r3, #0
 800e142:	d102      	bne.n	800e14a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e144:	2301      	movs	r3, #1
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	e001      	b.n	800e14e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e14a:	2300      	movs	r3, #0
 800e14c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e14e:	f001 fe9d 	bl	800fe8c <vPortExitCritical>

	return xReturn;
 800e152:	68fb      	ldr	r3, [r7, #12]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3710      	adds	r7, #16
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e164:	f001 fe60 	bl	800fe28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e170:	429a      	cmp	r2, r3
 800e172:	d102      	bne.n	800e17a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e174:	2301      	movs	r3, #1
 800e176:	60fb      	str	r3, [r7, #12]
 800e178:	e001      	b.n	800e17e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e17a:	2300      	movs	r3, #0
 800e17c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e17e:	f001 fe85 	bl	800fe8c <vPortExitCritical>

	return xReturn;
 800e182:	68fb      	ldr	r3, [r7, #12]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e196:	2300      	movs	r3, #0
 800e198:	60fb      	str	r3, [r7, #12]
 800e19a:	e014      	b.n	800e1c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e19c:	4a0f      	ldr	r2, [pc, #60]	@ (800e1dc <vQueueAddToRegistry+0x50>)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d10b      	bne.n	800e1c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e1a8:	490c      	ldr	r1, [pc, #48]	@ (800e1dc <vQueueAddToRegistry+0x50>)
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	683a      	ldr	r2, [r7, #0]
 800e1ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e1b2:	4a0a      	ldr	r2, [pc, #40]	@ (800e1dc <vQueueAddToRegistry+0x50>)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	00db      	lsls	r3, r3, #3
 800e1b8:	4413      	add	r3, r2
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e1be:	e006      	b.n	800e1ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	60fb      	str	r3, [r7, #12]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b07      	cmp	r3, #7
 800e1ca:	d9e7      	bls.n	800e19c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e1cc:	bf00      	nop
 800e1ce:	bf00      	nop
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	240061d4 	.word	0x240061d4

0800e1e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	60fb      	str	r3, [r7, #12]
 800e1ec:	e016      	b.n	800e21c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e1ee:	4a10      	ldr	r2, [pc, #64]	@ (800e230 <vQueueUnregisterQueue+0x50>)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	00db      	lsls	r3, r3, #3
 800e1f4:	4413      	add	r3, r2
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d10b      	bne.n	800e216 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e1fe:	4a0c      	ldr	r2, [pc, #48]	@ (800e230 <vQueueUnregisterQueue+0x50>)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2100      	movs	r1, #0
 800e204:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e208:	4a09      	ldr	r2, [pc, #36]	@ (800e230 <vQueueUnregisterQueue+0x50>)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	00db      	lsls	r3, r3, #3
 800e20e:	4413      	add	r3, r2
 800e210:	2200      	movs	r2, #0
 800e212:	605a      	str	r2, [r3, #4]
				break;
 800e214:	e006      	b.n	800e224 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3301      	adds	r3, #1
 800e21a:	60fb      	str	r3, [r7, #12]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2b07      	cmp	r3, #7
 800e220:	d9e5      	bls.n	800e1ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e222:	bf00      	nop
 800e224:	bf00      	nop
 800e226:	3714      	adds	r7, #20
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	240061d4 	.word	0x240061d4

0800e234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e244:	f001 fdf0 	bl	800fe28 <vPortEnterCritical>
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e24e:	b25b      	sxtb	r3, r3
 800e250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e254:	d103      	bne.n	800e25e <vQueueWaitForMessageRestricted+0x2a>
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e264:	b25b      	sxtb	r3, r3
 800e266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e26a:	d103      	bne.n	800e274 <vQueueWaitForMessageRestricted+0x40>
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e274:	f001 fe0a 	bl	800fe8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d106      	bne.n	800e28e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	3324      	adds	r3, #36	@ 0x24
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	68b9      	ldr	r1, [r7, #8]
 800e288:	4618      	mov	r0, r3
 800e28a:	f000 fc7f 	bl	800eb8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e28e:	6978      	ldr	r0, [r7, #20]
 800e290:	f7ff fefc 	bl	800e08c <prvUnlockQueue>
	}
 800e294:	bf00      	nop
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08e      	sub	sp, #56	@ 0x38
 800e2a0:	af04      	add	r7, sp, #16
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10b      	bne.n	800e2c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b4:	f383 8811 	msr	BASEPRI, r3
 800e2b8:	f3bf 8f6f 	isb	sy
 800e2bc:	f3bf 8f4f 	dsb	sy
 800e2c0:	623b      	str	r3, [r7, #32]
}
 800e2c2:	bf00      	nop
 800e2c4:	bf00      	nop
 800e2c6:	e7fd      	b.n	800e2c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10b      	bne.n	800e2e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	61fb      	str	r3, [r7, #28]
}
 800e2e0:	bf00      	nop
 800e2e2:	bf00      	nop
 800e2e4:	e7fd      	b.n	800e2e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e2e6:	23a8      	movs	r3, #168	@ 0xa8
 800e2e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	2ba8      	cmp	r3, #168	@ 0xa8
 800e2ee:	d00b      	beq.n	800e308 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	61bb      	str	r3, [r7, #24]
}
 800e302:	bf00      	nop
 800e304:	bf00      	nop
 800e306:	e7fd      	b.n	800e304 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e308:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d01e      	beq.n	800e34e <xTaskCreateStatic+0xb2>
 800e310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e312:	2b00      	cmp	r3, #0
 800e314:	d01b      	beq.n	800e34e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e318:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e31e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e322:	2202      	movs	r2, #2
 800e324:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e328:	2300      	movs	r3, #0
 800e32a:	9303      	str	r3, [sp, #12]
 800e32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32e:	9302      	str	r3, [sp, #8]
 800e330:	f107 0314 	add.w	r3, r7, #20
 800e334:	9301      	str	r3, [sp, #4]
 800e336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	68b9      	ldr	r1, [r7, #8]
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f000 f851 	bl	800e3e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e348:	f000 f8f6 	bl	800e538 <prvAddNewTaskToReadyList>
 800e34c:	e001      	b.n	800e352 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e34e:	2300      	movs	r3, #0
 800e350:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e352:	697b      	ldr	r3, [r7, #20]
	}
 800e354:	4618      	mov	r0, r3
 800e356:	3728      	adds	r7, #40	@ 0x28
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08c      	sub	sp, #48	@ 0x30
 800e360:	af04      	add	r7, sp, #16
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	603b      	str	r3, [r7, #0]
 800e368:	4613      	mov	r3, r2
 800e36a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e36c:	88fb      	ldrh	r3, [r7, #6]
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4618      	mov	r0, r3
 800e372:	f001 fe7b 	bl	801006c <pvPortMalloc>
 800e376:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00e      	beq.n	800e39c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e37e:	20a8      	movs	r0, #168	@ 0xa8
 800e380:	f001 fe74 	bl	801006c <pvPortMalloc>
 800e384:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d003      	beq.n	800e394 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	697a      	ldr	r2, [r7, #20]
 800e390:	631a      	str	r2, [r3, #48]	@ 0x30
 800e392:	e005      	b.n	800e3a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e394:	6978      	ldr	r0, [r7, #20]
 800e396:	f001 ff37 	bl	8010208 <vPortFree>
 800e39a:	e001      	b.n	800e3a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e39c:	2300      	movs	r3, #0
 800e39e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d017      	beq.n	800e3d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e3ae:	88fa      	ldrh	r2, [r7, #6]
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	9303      	str	r3, [sp, #12]
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	9302      	str	r3, [sp, #8]
 800e3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ba:	9301      	str	r3, [sp, #4]
 800e3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3be:	9300      	str	r3, [sp, #0]
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	68b9      	ldr	r1, [r7, #8]
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	f000 f80f 	bl	800e3e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e3ca:	69f8      	ldr	r0, [r7, #28]
 800e3cc:	f000 f8b4 	bl	800e538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	61bb      	str	r3, [r7, #24]
 800e3d4:	e002      	b.n	800e3dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e3dc:	69bb      	ldr	r3, [r7, #24]
	}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3720      	adds	r7, #32
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
	...

0800e3e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b088      	sub	sp, #32
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	607a      	str	r2, [r7, #4]
 800e3f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	461a      	mov	r2, r3
 800e400:	21a5      	movs	r1, #165	@ 0xa5
 800e402:	f00c ffac 	bl	801b35e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e410:	440b      	add	r3, r1
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4413      	add	r3, r2
 800e416:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	f023 0307 	bic.w	r3, r3, #7
 800e41e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	f003 0307 	and.w	r3, r3, #7
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00b      	beq.n	800e442 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42e:	f383 8811 	msr	BASEPRI, r3
 800e432:	f3bf 8f6f 	isb	sy
 800e436:	f3bf 8f4f 	dsb	sy
 800e43a:	617b      	str	r3, [r7, #20]
}
 800e43c:	bf00      	nop
 800e43e:	bf00      	nop
 800e440:	e7fd      	b.n	800e43e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d01f      	beq.n	800e488 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e448:	2300      	movs	r3, #0
 800e44a:	61fb      	str	r3, [r7, #28]
 800e44c:	e012      	b.n	800e474 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e44e:	68ba      	ldr	r2, [r7, #8]
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	4413      	add	r3, r2
 800e454:	7819      	ldrb	r1, [r3, #0]
 800e456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	4413      	add	r3, r2
 800e45c:	3334      	adds	r3, #52	@ 0x34
 800e45e:	460a      	mov	r2, r1
 800e460:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e462:	68ba      	ldr	r2, [r7, #8]
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	4413      	add	r3, r2
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d006      	beq.n	800e47c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	3301      	adds	r3, #1
 800e472:	61fb      	str	r3, [r7, #28]
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	2b0f      	cmp	r3, #15
 800e478:	d9e9      	bls.n	800e44e <prvInitialiseNewTask+0x66>
 800e47a:	e000      	b.n	800e47e <prvInitialiseNewTask+0x96>
			{
				break;
 800e47c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e480:	2200      	movs	r2, #0
 800e482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e486:	e003      	b.n	800e490 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e492:	2b37      	cmp	r3, #55	@ 0x37
 800e494:	d901      	bls.n	800e49a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e496:	2337      	movs	r3, #55	@ 0x37
 800e498:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e49c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e49e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ae:	3304      	adds	r3, #4
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fe fd7b 	bl	800cfac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b8:	3318      	adds	r3, #24
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe fd76 	bl	800cfac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e8:	3354      	adds	r3, #84	@ 0x54
 800e4ea:	224c      	movs	r2, #76	@ 0x4c
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f00c ff35 	bl	801b35e <memset>
 800e4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f6:	4a0d      	ldr	r2, [pc, #52]	@ (800e52c <prvInitialiseNewTask+0x144>)
 800e4f8:	659a      	str	r2, [r3, #88]	@ 0x58
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4fc:	4a0c      	ldr	r2, [pc, #48]	@ (800e530 <prvInitialiseNewTask+0x148>)
 800e4fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e502:	4a0c      	ldr	r2, [pc, #48]	@ (800e534 <prvInitialiseNewTask+0x14c>)
 800e504:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e506:	683a      	ldr	r2, [r7, #0]
 800e508:	68f9      	ldr	r1, [r7, #12]
 800e50a:	69b8      	ldr	r0, [r7, #24]
 800e50c:	f001 fb5e 	bl	800fbcc <pxPortInitialiseStack>
 800e510:	4602      	mov	r2, r0
 800e512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e514:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e522:	bf00      	nop
 800e524:	3720      	adds	r7, #32
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	24014d24 	.word	0x24014d24
 800e530:	24014d8c 	.word	0x24014d8c
 800e534:	24014df4 	.word	0x24014df4

0800e538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e540:	f001 fc72 	bl	800fe28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e544:	4b2d      	ldr	r3, [pc, #180]	@ (800e5fc <prvAddNewTaskToReadyList+0xc4>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	3301      	adds	r3, #1
 800e54a:	4a2c      	ldr	r2, [pc, #176]	@ (800e5fc <prvAddNewTaskToReadyList+0xc4>)
 800e54c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e54e:	4b2c      	ldr	r3, [pc, #176]	@ (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d109      	bne.n	800e56a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e556:	4a2a      	ldr	r2, [pc, #168]	@ (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e55c:	4b27      	ldr	r3, [pc, #156]	@ (800e5fc <prvAddNewTaskToReadyList+0xc4>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d110      	bne.n	800e586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e564:	f000 fc40 	bl	800ede8 <prvInitialiseTaskLists>
 800e568:	e00d      	b.n	800e586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e56a:	4b26      	ldr	r3, [pc, #152]	@ (800e604 <prvAddNewTaskToReadyList+0xcc>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d109      	bne.n	800e586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e572:	4b23      	ldr	r3, [pc, #140]	@ (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d802      	bhi.n	800e586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e580:	4a1f      	ldr	r2, [pc, #124]	@ (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e586:	4b20      	ldr	r3, [pc, #128]	@ (800e608 <prvAddNewTaskToReadyList+0xd0>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3301      	adds	r3, #1
 800e58c:	4a1e      	ldr	r2, [pc, #120]	@ (800e608 <prvAddNewTaskToReadyList+0xd0>)
 800e58e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e590:	4b1d      	ldr	r3, [pc, #116]	@ (800e608 <prvAddNewTaskToReadyList+0xd0>)
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e59c:	4b1b      	ldr	r3, [pc, #108]	@ (800e60c <prvAddNewTaskToReadyList+0xd4>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d903      	bls.n	800e5ac <prvAddNewTaskToReadyList+0x74>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a8:	4a18      	ldr	r2, [pc, #96]	@ (800e60c <prvAddNewTaskToReadyList+0xd4>)
 800e5aa:	6013      	str	r3, [r2, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5b0:	4613      	mov	r3, r2
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	4a15      	ldr	r2, [pc, #84]	@ (800e610 <prvAddNewTaskToReadyList+0xd8>)
 800e5ba:	441a      	add	r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	f7fe fcff 	bl	800cfc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e5c8:	f001 fc60 	bl	800fe8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800e604 <prvAddNewTaskToReadyList+0xcc>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00e      	beq.n	800e5f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d207      	bcs.n	800e5f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e5e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e614 <prvAddNewTaskToReadyList+0xdc>)
 800e5e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e8:	601a      	str	r2, [r3, #0]
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5f2:	bf00      	nop
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	240066e8 	.word	0x240066e8
 800e600:	24006214 	.word	0x24006214
 800e604:	240066f4 	.word	0x240066f4
 800e608:	24006704 	.word	0x24006704
 800e60c:	240066f0 	.word	0x240066f0
 800e610:	24006218 	.word	0x24006218
 800e614:	e000ed04 	.word	0xe000ed04

0800e618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e620:	2300      	movs	r3, #0
 800e622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d018      	beq.n	800e65c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e62a:	4b14      	ldr	r3, [pc, #80]	@ (800e67c <vTaskDelay+0x64>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00b      	beq.n	800e64a <vTaskDelay+0x32>
	__asm volatile
 800e632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e636:	f383 8811 	msr	BASEPRI, r3
 800e63a:	f3bf 8f6f 	isb	sy
 800e63e:	f3bf 8f4f 	dsb	sy
 800e642:	60bb      	str	r3, [r7, #8]
}
 800e644:	bf00      	nop
 800e646:	bf00      	nop
 800e648:	e7fd      	b.n	800e646 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e64a:	f000 f88b 	bl	800e764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e64e:	2100      	movs	r1, #0
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 ff0d 	bl	800f470 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e656:	f000 f893 	bl	800e780 <xTaskResumeAll>
 800e65a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d107      	bne.n	800e672 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e662:	4b07      	ldr	r3, [pc, #28]	@ (800e680 <vTaskDelay+0x68>)
 800e664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e668:	601a      	str	r2, [r3, #0]
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e672:	bf00      	nop
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	24006710 	.word	0x24006710
 800e680:	e000ed04 	.word	0xe000ed04

0800e684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b08a      	sub	sp, #40	@ 0x28
 800e688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e68a:	2300      	movs	r3, #0
 800e68c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e68e:	2300      	movs	r3, #0
 800e690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e692:	463a      	mov	r2, r7
 800e694:	1d39      	adds	r1, r7, #4
 800e696:	f107 0308 	add.w	r3, r7, #8
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe fc32 	bl	800cf04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e6a0:	6839      	ldr	r1, [r7, #0]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	68ba      	ldr	r2, [r7, #8]
 800e6a6:	9202      	str	r2, [sp, #8]
 800e6a8:	9301      	str	r3, [sp, #4]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	9300      	str	r3, [sp, #0]
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	460a      	mov	r2, r1
 800e6b2:	4924      	ldr	r1, [pc, #144]	@ (800e744 <vTaskStartScheduler+0xc0>)
 800e6b4:	4824      	ldr	r0, [pc, #144]	@ (800e748 <vTaskStartScheduler+0xc4>)
 800e6b6:	f7ff fdf1 	bl	800e29c <xTaskCreateStatic>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	4a23      	ldr	r2, [pc, #140]	@ (800e74c <vTaskStartScheduler+0xc8>)
 800e6be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e6c0:	4b22      	ldr	r3, [pc, #136]	@ (800e74c <vTaskStartScheduler+0xc8>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d002      	beq.n	800e6ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	617b      	str	r3, [r7, #20]
 800e6cc:	e001      	b.n	800e6d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d102      	bne.n	800e6de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e6d8:	f000 ff1e 	bl	800f518 <xTimerCreateTimerTask>
 800e6dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d11b      	bne.n	800e71c <vTaskStartScheduler+0x98>
	__asm volatile
 800e6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	613b      	str	r3, [r7, #16]
}
 800e6f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e6f8:	4b15      	ldr	r3, [pc, #84]	@ (800e750 <vTaskStartScheduler+0xcc>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3354      	adds	r3, #84	@ 0x54
 800e6fe:	4a15      	ldr	r2, [pc, #84]	@ (800e754 <vTaskStartScheduler+0xd0>)
 800e700:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e702:	4b15      	ldr	r3, [pc, #84]	@ (800e758 <vTaskStartScheduler+0xd4>)
 800e704:	f04f 32ff 	mov.w	r2, #4294967295
 800e708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e70a:	4b14      	ldr	r3, [pc, #80]	@ (800e75c <vTaskStartScheduler+0xd8>)
 800e70c:	2201      	movs	r2, #1
 800e70e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e710:	4b13      	ldr	r3, [pc, #76]	@ (800e760 <vTaskStartScheduler+0xdc>)
 800e712:	2200      	movs	r2, #0
 800e714:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e716:	f001 fae3 	bl	800fce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e71a:	e00f      	b.n	800e73c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e722:	d10b      	bne.n	800e73c <vTaskStartScheduler+0xb8>
	__asm volatile
 800e724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	60fb      	str	r3, [r7, #12]
}
 800e736:	bf00      	nop
 800e738:	bf00      	nop
 800e73a:	e7fd      	b.n	800e738 <vTaskStartScheduler+0xb4>
}
 800e73c:	bf00      	nop
 800e73e:	3718      	adds	r7, #24
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	0801c1f8 	.word	0x0801c1f8
 800e748:	0800edb9 	.word	0x0800edb9
 800e74c:	2400670c 	.word	0x2400670c
 800e750:	24006214 	.word	0x24006214
 800e754:	240049fc 	.word	0x240049fc
 800e758:	24006708 	.word	0x24006708
 800e75c:	240066f4 	.word	0x240066f4
 800e760:	240066ec 	.word	0x240066ec

0800e764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e764:	b480      	push	{r7}
 800e766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e768:	4b04      	ldr	r3, [pc, #16]	@ (800e77c <vTaskSuspendAll+0x18>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	3301      	adds	r3, #1
 800e76e:	4a03      	ldr	r2, [pc, #12]	@ (800e77c <vTaskSuspendAll+0x18>)
 800e770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e772:	bf00      	nop
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr
 800e77c:	24006710 	.word	0x24006710

0800e780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e786:	2300      	movs	r3, #0
 800e788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e78a:	2300      	movs	r3, #0
 800e78c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e78e:	4b42      	ldr	r3, [pc, #264]	@ (800e898 <xTaskResumeAll+0x118>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10b      	bne.n	800e7ae <xTaskResumeAll+0x2e>
	__asm volatile
 800e796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	603b      	str	r3, [r7, #0]
}
 800e7a8:	bf00      	nop
 800e7aa:	bf00      	nop
 800e7ac:	e7fd      	b.n	800e7aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e7ae:	f001 fb3b 	bl	800fe28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e7b2:	4b39      	ldr	r3, [pc, #228]	@ (800e898 <xTaskResumeAll+0x118>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	4a37      	ldr	r2, [pc, #220]	@ (800e898 <xTaskResumeAll+0x118>)
 800e7ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7bc:	4b36      	ldr	r3, [pc, #216]	@ (800e898 <xTaskResumeAll+0x118>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d162      	bne.n	800e88a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e7c4:	4b35      	ldr	r3, [pc, #212]	@ (800e89c <xTaskResumeAll+0x11c>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d05e      	beq.n	800e88a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e7cc:	e02f      	b.n	800e82e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ce:	4b34      	ldr	r3, [pc, #208]	@ (800e8a0 <xTaskResumeAll+0x120>)
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	3318      	adds	r3, #24
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fe fc50 	bl	800d080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	3304      	adds	r3, #4
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe fc4b 	bl	800d080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ee:	4b2d      	ldr	r3, [pc, #180]	@ (800e8a4 <xTaskResumeAll+0x124>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d903      	bls.n	800e7fe <xTaskResumeAll+0x7e>
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7fa:	4a2a      	ldr	r2, [pc, #168]	@ (800e8a4 <xTaskResumeAll+0x124>)
 800e7fc:	6013      	str	r3, [r2, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e802:	4613      	mov	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4413      	add	r3, r2
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	4a27      	ldr	r2, [pc, #156]	@ (800e8a8 <xTaskResumeAll+0x128>)
 800e80c:	441a      	add	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	3304      	adds	r3, #4
 800e812:	4619      	mov	r1, r3
 800e814:	4610      	mov	r0, r2
 800e816:	f7fe fbd6 	bl	800cfc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e81e:	4b23      	ldr	r3, [pc, #140]	@ (800e8ac <xTaskResumeAll+0x12c>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e824:	429a      	cmp	r2, r3
 800e826:	d302      	bcc.n	800e82e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e828:	4b21      	ldr	r3, [pc, #132]	@ (800e8b0 <xTaskResumeAll+0x130>)
 800e82a:	2201      	movs	r2, #1
 800e82c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e82e:	4b1c      	ldr	r3, [pc, #112]	@ (800e8a0 <xTaskResumeAll+0x120>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d1cb      	bne.n	800e7ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d001      	beq.n	800e840 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e83c:	f000 fb78 	bl	800ef30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e840:	4b1c      	ldr	r3, [pc, #112]	@ (800e8b4 <xTaskResumeAll+0x134>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d010      	beq.n	800e86e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e84c:	f000 f858 	bl	800e900 <xTaskIncrementTick>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e856:	4b16      	ldr	r3, [pc, #88]	@ (800e8b0 <xTaskResumeAll+0x130>)
 800e858:	2201      	movs	r2, #1
 800e85a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	3b01      	subs	r3, #1
 800e860:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1f1      	bne.n	800e84c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e868:	4b12      	ldr	r3, [pc, #72]	@ (800e8b4 <xTaskResumeAll+0x134>)
 800e86a:	2200      	movs	r2, #0
 800e86c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e86e:	4b10      	ldr	r3, [pc, #64]	@ (800e8b0 <xTaskResumeAll+0x130>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d009      	beq.n	800e88a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e876:	2301      	movs	r3, #1
 800e878:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e87a:	4b0f      	ldr	r3, [pc, #60]	@ (800e8b8 <xTaskResumeAll+0x138>)
 800e87c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e880:	601a      	str	r2, [r3, #0]
 800e882:	f3bf 8f4f 	dsb	sy
 800e886:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e88a:	f001 faff 	bl	800fe8c <vPortExitCritical>

	return xAlreadyYielded;
 800e88e:	68bb      	ldr	r3, [r7, #8]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3710      	adds	r7, #16
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	24006710 	.word	0x24006710
 800e89c:	240066e8 	.word	0x240066e8
 800e8a0:	240066a8 	.word	0x240066a8
 800e8a4:	240066f0 	.word	0x240066f0
 800e8a8:	24006218 	.word	0x24006218
 800e8ac:	24006214 	.word	0x24006214
 800e8b0:	240066fc 	.word	0x240066fc
 800e8b4:	240066f8 	.word	0x240066f8
 800e8b8:	e000ed04 	.word	0xe000ed04

0800e8bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e8c2:	4b05      	ldr	r3, [pc, #20]	@ (800e8d8 <xTaskGetTickCount+0x1c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e8c8:	687b      	ldr	r3, [r7, #4]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	370c      	adds	r7, #12
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	240066ec 	.word	0x240066ec

0800e8dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8e2:	f001 fb81 	bl	800ffe8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e8ea:	4b04      	ldr	r3, [pc, #16]	@ (800e8fc <xTaskGetTickCountFromISR+0x20>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e8f0:	683b      	ldr	r3, [r7, #0]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	240066ec 	.word	0x240066ec

0800e900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b086      	sub	sp, #24
 800e904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e906:	2300      	movs	r3, #0
 800e908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e90a:	4b4f      	ldr	r3, [pc, #316]	@ (800ea48 <xTaskIncrementTick+0x148>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	f040 8090 	bne.w	800ea34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e914:	4b4d      	ldr	r3, [pc, #308]	@ (800ea4c <xTaskIncrementTick+0x14c>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3301      	adds	r3, #1
 800e91a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e91c:	4a4b      	ldr	r2, [pc, #300]	@ (800ea4c <xTaskIncrementTick+0x14c>)
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d121      	bne.n	800e96c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e928:	4b49      	ldr	r3, [pc, #292]	@ (800ea50 <xTaskIncrementTick+0x150>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00b      	beq.n	800e94a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	603b      	str	r3, [r7, #0]
}
 800e944:	bf00      	nop
 800e946:	bf00      	nop
 800e948:	e7fd      	b.n	800e946 <xTaskIncrementTick+0x46>
 800e94a:	4b41      	ldr	r3, [pc, #260]	@ (800ea50 <xTaskIncrementTick+0x150>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	60fb      	str	r3, [r7, #12]
 800e950:	4b40      	ldr	r3, [pc, #256]	@ (800ea54 <xTaskIncrementTick+0x154>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a3e      	ldr	r2, [pc, #248]	@ (800ea50 <xTaskIncrementTick+0x150>)
 800e956:	6013      	str	r3, [r2, #0]
 800e958:	4a3e      	ldr	r2, [pc, #248]	@ (800ea54 <xTaskIncrementTick+0x154>)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6013      	str	r3, [r2, #0]
 800e95e:	4b3e      	ldr	r3, [pc, #248]	@ (800ea58 <xTaskIncrementTick+0x158>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	3301      	adds	r3, #1
 800e964:	4a3c      	ldr	r2, [pc, #240]	@ (800ea58 <xTaskIncrementTick+0x158>)
 800e966:	6013      	str	r3, [r2, #0]
 800e968:	f000 fae2 	bl	800ef30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e96c:	4b3b      	ldr	r3, [pc, #236]	@ (800ea5c <xTaskIncrementTick+0x15c>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	693a      	ldr	r2, [r7, #16]
 800e972:	429a      	cmp	r2, r3
 800e974:	d349      	bcc.n	800ea0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e976:	4b36      	ldr	r3, [pc, #216]	@ (800ea50 <xTaskIncrementTick+0x150>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d104      	bne.n	800e98a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e980:	4b36      	ldr	r3, [pc, #216]	@ (800ea5c <xTaskIncrementTick+0x15c>)
 800e982:	f04f 32ff 	mov.w	r2, #4294967295
 800e986:	601a      	str	r2, [r3, #0]
					break;
 800e988:	e03f      	b.n	800ea0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e98a:	4b31      	ldr	r3, [pc, #196]	@ (800ea50 <xTaskIncrementTick+0x150>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e99a:	693a      	ldr	r2, [r7, #16]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d203      	bcs.n	800e9aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e9a2:	4a2e      	ldr	r2, [pc, #184]	@ (800ea5c <xTaskIncrementTick+0x15c>)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e9a8:	e02f      	b.n	800ea0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	3304      	adds	r3, #4
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fe fb66 	bl	800d080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d004      	beq.n	800e9c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	3318      	adds	r3, #24
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fe fb5d 	bl	800d080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9ca:	4b25      	ldr	r3, [pc, #148]	@ (800ea60 <xTaskIncrementTick+0x160>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d903      	bls.n	800e9da <xTaskIncrementTick+0xda>
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9d6:	4a22      	ldr	r2, [pc, #136]	@ (800ea60 <xTaskIncrementTick+0x160>)
 800e9d8:	6013      	str	r3, [r2, #0]
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9de:	4613      	mov	r3, r2
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	4413      	add	r3, r2
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	4a1f      	ldr	r2, [pc, #124]	@ (800ea64 <xTaskIncrementTick+0x164>)
 800e9e8:	441a      	add	r2, r3
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	3304      	adds	r3, #4
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	4610      	mov	r0, r2
 800e9f2:	f7fe fae8 	bl	800cfc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9fa:	4b1b      	ldr	r3, [pc, #108]	@ (800ea68 <xTaskIncrementTick+0x168>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d3b8      	bcc.n	800e976 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ea04:	2301      	movs	r3, #1
 800ea06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea08:	e7b5      	b.n	800e976 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ea0a:	4b17      	ldr	r3, [pc, #92]	@ (800ea68 <xTaskIncrementTick+0x168>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea10:	4914      	ldr	r1, [pc, #80]	@ (800ea64 <xTaskIncrementTick+0x164>)
 800ea12:	4613      	mov	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4413      	add	r3, r2
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	440b      	add	r3, r1
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d901      	bls.n	800ea26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ea22:	2301      	movs	r3, #1
 800ea24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ea26:	4b11      	ldr	r3, [pc, #68]	@ (800ea6c <xTaskIncrementTick+0x16c>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d007      	beq.n	800ea3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	617b      	str	r3, [r7, #20]
 800ea32:	e004      	b.n	800ea3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ea34:	4b0e      	ldr	r3, [pc, #56]	@ (800ea70 <xTaskIncrementTick+0x170>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	4a0d      	ldr	r2, [pc, #52]	@ (800ea70 <xTaskIncrementTick+0x170>)
 800ea3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ea3e:	697b      	ldr	r3, [r7, #20]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3718      	adds	r7, #24
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	24006710 	.word	0x24006710
 800ea4c:	240066ec 	.word	0x240066ec
 800ea50:	240066a0 	.word	0x240066a0
 800ea54:	240066a4 	.word	0x240066a4
 800ea58:	24006700 	.word	0x24006700
 800ea5c:	24006708 	.word	0x24006708
 800ea60:	240066f0 	.word	0x240066f0
 800ea64:	24006218 	.word	0x24006218
 800ea68:	24006214 	.word	0x24006214
 800ea6c:	240066fc 	.word	0x240066fc
 800ea70:	240066f8 	.word	0x240066f8

0800ea74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea7a:	4b2b      	ldr	r3, [pc, #172]	@ (800eb28 <vTaskSwitchContext+0xb4>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d003      	beq.n	800ea8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ea82:	4b2a      	ldr	r3, [pc, #168]	@ (800eb2c <vTaskSwitchContext+0xb8>)
 800ea84:	2201      	movs	r2, #1
 800ea86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ea88:	e047      	b.n	800eb1a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ea8a:	4b28      	ldr	r3, [pc, #160]	@ (800eb2c <vTaskSwitchContext+0xb8>)
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea90:	4b27      	ldr	r3, [pc, #156]	@ (800eb30 <vTaskSwitchContext+0xbc>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	60fb      	str	r3, [r7, #12]
 800ea96:	e011      	b.n	800eabc <vTaskSwitchContext+0x48>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d10b      	bne.n	800eab6 <vTaskSwitchContext+0x42>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	607b      	str	r3, [r7, #4]
}
 800eab0:	bf00      	nop
 800eab2:	bf00      	nop
 800eab4:	e7fd      	b.n	800eab2 <vTaskSwitchContext+0x3e>
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	491d      	ldr	r1, [pc, #116]	@ (800eb34 <vTaskSwitchContext+0xc0>)
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	4613      	mov	r3, r2
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	4413      	add	r3, r2
 800eac6:	009b      	lsls	r3, r3, #2
 800eac8:	440b      	add	r3, r1
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d0e3      	beq.n	800ea98 <vTaskSwitchContext+0x24>
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	4613      	mov	r3, r2
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	4413      	add	r3, r2
 800ead8:	009b      	lsls	r3, r3, #2
 800eada:	4a16      	ldr	r2, [pc, #88]	@ (800eb34 <vTaskSwitchContext+0xc0>)
 800eadc:	4413      	add	r3, r2
 800eade:	60bb      	str	r3, [r7, #8]
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	685a      	ldr	r2, [r3, #4]
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	605a      	str	r2, [r3, #4]
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	685a      	ldr	r2, [r3, #4]
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	3308      	adds	r3, #8
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d104      	bne.n	800eb00 <vTaskSwitchContext+0x8c>
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	605a      	str	r2, [r3, #4]
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	4a0c      	ldr	r2, [pc, #48]	@ (800eb38 <vTaskSwitchContext+0xc4>)
 800eb08:	6013      	str	r3, [r2, #0]
 800eb0a:	4a09      	ldr	r2, [pc, #36]	@ (800eb30 <vTaskSwitchContext+0xbc>)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb10:	4b09      	ldr	r3, [pc, #36]	@ (800eb38 <vTaskSwitchContext+0xc4>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3354      	adds	r3, #84	@ 0x54
 800eb16:	4a09      	ldr	r2, [pc, #36]	@ (800eb3c <vTaskSwitchContext+0xc8>)
 800eb18:	6013      	str	r3, [r2, #0]
}
 800eb1a:	bf00      	nop
 800eb1c:	3714      	adds	r7, #20
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop
 800eb28:	24006710 	.word	0x24006710
 800eb2c:	240066fc 	.word	0x240066fc
 800eb30:	240066f0 	.word	0x240066f0
 800eb34:	24006218 	.word	0x24006218
 800eb38:	24006214 	.word	0x24006214
 800eb3c:	240049fc 	.word	0x240049fc

0800eb40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10b      	bne.n	800eb68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	60fb      	str	r3, [r7, #12]
}
 800eb62:	bf00      	nop
 800eb64:	bf00      	nop
 800eb66:	e7fd      	b.n	800eb64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb68:	4b07      	ldr	r3, [pc, #28]	@ (800eb88 <vTaskPlaceOnEventList+0x48>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	3318      	adds	r3, #24
 800eb6e:	4619      	mov	r1, r3
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7fe fa4c 	bl	800d00e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb76:	2101      	movs	r1, #1
 800eb78:	6838      	ldr	r0, [r7, #0]
 800eb7a:	f000 fc79 	bl	800f470 <prvAddCurrentTaskToDelayedList>
}
 800eb7e:	bf00      	nop
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	24006214 	.word	0x24006214

0800eb8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d10b      	bne.n	800ebb6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800eb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	617b      	str	r3, [r7, #20]
}
 800ebb0:	bf00      	nop
 800ebb2:	bf00      	nop
 800ebb4:	e7fd      	b.n	800ebb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebb6:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe0 <vTaskPlaceOnEventListRestricted+0x54>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	3318      	adds	r3, #24
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f7fe fa01 	bl	800cfc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d002      	beq.n	800ebd0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ebca:	f04f 33ff 	mov.w	r3, #4294967295
 800ebce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ebd0:	6879      	ldr	r1, [r7, #4]
 800ebd2:	68b8      	ldr	r0, [r7, #8]
 800ebd4:	f000 fc4c 	bl	800f470 <prvAddCurrentTaskToDelayedList>
	}
 800ebd8:	bf00      	nop
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	24006214 	.word	0x24006214

0800ebe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b086      	sub	sp, #24
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d10b      	bne.n	800ec12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ebfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebfe:	f383 8811 	msr	BASEPRI, r3
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	f3bf 8f4f 	dsb	sy
 800ec0a:	60fb      	str	r3, [r7, #12]
}
 800ec0c:	bf00      	nop
 800ec0e:	bf00      	nop
 800ec10:	e7fd      	b.n	800ec0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	3318      	adds	r3, #24
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe fa32 	bl	800d080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ec94 <xTaskRemoveFromEventList+0xb0>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d11d      	bne.n	800ec60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	3304      	adds	r3, #4
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe fa29 	bl	800d080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec32:	4b19      	ldr	r3, [pc, #100]	@ (800ec98 <xTaskRemoveFromEventList+0xb4>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d903      	bls.n	800ec42 <xTaskRemoveFromEventList+0x5e>
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec3e:	4a16      	ldr	r2, [pc, #88]	@ (800ec98 <xTaskRemoveFromEventList+0xb4>)
 800ec40:	6013      	str	r3, [r2, #0]
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec46:	4613      	mov	r3, r2
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	4413      	add	r3, r2
 800ec4c:	009b      	lsls	r3, r3, #2
 800ec4e:	4a13      	ldr	r2, [pc, #76]	@ (800ec9c <xTaskRemoveFromEventList+0xb8>)
 800ec50:	441a      	add	r2, r3
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	3304      	adds	r3, #4
 800ec56:	4619      	mov	r1, r3
 800ec58:	4610      	mov	r0, r2
 800ec5a:	f7fe f9b4 	bl	800cfc6 <vListInsertEnd>
 800ec5e:	e005      	b.n	800ec6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	3318      	adds	r3, #24
 800ec64:	4619      	mov	r1, r3
 800ec66:	480e      	ldr	r0, [pc, #56]	@ (800eca0 <xTaskRemoveFromEventList+0xbc>)
 800ec68:	f7fe f9ad 	bl	800cfc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec70:	4b0c      	ldr	r3, [pc, #48]	@ (800eca4 <xTaskRemoveFromEventList+0xc0>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d905      	bls.n	800ec86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ec7e:	4b0a      	ldr	r3, [pc, #40]	@ (800eca8 <xTaskRemoveFromEventList+0xc4>)
 800ec80:	2201      	movs	r2, #1
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	e001      	b.n	800ec8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ec86:	2300      	movs	r3, #0
 800ec88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ec8a:	697b      	ldr	r3, [r7, #20]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	24006710 	.word	0x24006710
 800ec98:	240066f0 	.word	0x240066f0
 800ec9c:	24006218 	.word	0x24006218
 800eca0:	240066a8 	.word	0x240066a8
 800eca4:	24006214 	.word	0x24006214
 800eca8:	240066fc 	.word	0x240066fc

0800ecac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ecb4:	4b06      	ldr	r3, [pc, #24]	@ (800ecd0 <vTaskInternalSetTimeOutState+0x24>)
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ecbc:	4b05      	ldr	r3, [pc, #20]	@ (800ecd4 <vTaskInternalSetTimeOutState+0x28>)
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	605a      	str	r2, [r3, #4]
}
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr
 800ecd0:	24006700 	.word	0x24006700
 800ecd4:	240066ec 	.word	0x240066ec

0800ecd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b088      	sub	sp, #32
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d10b      	bne.n	800ed00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ece8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecec:	f383 8811 	msr	BASEPRI, r3
 800ecf0:	f3bf 8f6f 	isb	sy
 800ecf4:	f3bf 8f4f 	dsb	sy
 800ecf8:	613b      	str	r3, [r7, #16]
}
 800ecfa:	bf00      	nop
 800ecfc:	bf00      	nop
 800ecfe:	e7fd      	b.n	800ecfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d10b      	bne.n	800ed1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ed06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed0a:	f383 8811 	msr	BASEPRI, r3
 800ed0e:	f3bf 8f6f 	isb	sy
 800ed12:	f3bf 8f4f 	dsb	sy
 800ed16:	60fb      	str	r3, [r7, #12]
}
 800ed18:	bf00      	nop
 800ed1a:	bf00      	nop
 800ed1c:	e7fd      	b.n	800ed1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ed1e:	f001 f883 	bl	800fe28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ed22:	4b1d      	ldr	r3, [pc, #116]	@ (800ed98 <xTaskCheckForTimeOut+0xc0>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	69ba      	ldr	r2, [r7, #24]
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed3a:	d102      	bne.n	800ed42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	61fb      	str	r3, [r7, #28]
 800ed40:	e023      	b.n	800ed8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	4b15      	ldr	r3, [pc, #84]	@ (800ed9c <xTaskCheckForTimeOut+0xc4>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d007      	beq.n	800ed5e <xTaskCheckForTimeOut+0x86>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	69ba      	ldr	r2, [r7, #24]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d302      	bcc.n	800ed5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	61fb      	str	r3, [r7, #28]
 800ed5c:	e015      	b.n	800ed8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d20b      	bcs.n	800ed80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	1ad2      	subs	r2, r2, r3
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff ff99 	bl	800ecac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	61fb      	str	r3, [r7, #28]
 800ed7e:	e004      	b.n	800ed8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	2200      	movs	r2, #0
 800ed84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ed86:	2301      	movs	r3, #1
 800ed88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ed8a:	f001 f87f 	bl	800fe8c <vPortExitCritical>

	return xReturn;
 800ed8e:	69fb      	ldr	r3, [r7, #28]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3720      	adds	r7, #32
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	240066ec 	.word	0x240066ec
 800ed9c:	24006700 	.word	0x24006700

0800eda0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eda0:	b480      	push	{r7}
 800eda2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eda4:	4b03      	ldr	r3, [pc, #12]	@ (800edb4 <vTaskMissedYield+0x14>)
 800eda6:	2201      	movs	r2, #1
 800eda8:	601a      	str	r2, [r3, #0]
}
 800edaa:	bf00      	nop
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	240066fc 	.word	0x240066fc

0800edb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800edc0:	f000 f852 	bl	800ee68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800edc4:	4b06      	ldr	r3, [pc, #24]	@ (800ede0 <prvIdleTask+0x28>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d9f9      	bls.n	800edc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800edcc:	4b05      	ldr	r3, [pc, #20]	@ (800ede4 <prvIdleTask+0x2c>)
 800edce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edd2:	601a      	str	r2, [r3, #0]
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eddc:	e7f0      	b.n	800edc0 <prvIdleTask+0x8>
 800edde:	bf00      	nop
 800ede0:	24006218 	.word	0x24006218
 800ede4:	e000ed04 	.word	0xe000ed04

0800ede8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800edee:	2300      	movs	r3, #0
 800edf0:	607b      	str	r3, [r7, #4]
 800edf2:	e00c      	b.n	800ee0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	4613      	mov	r3, r2
 800edf8:	009b      	lsls	r3, r3, #2
 800edfa:	4413      	add	r3, r2
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4a12      	ldr	r2, [pc, #72]	@ (800ee48 <prvInitialiseTaskLists+0x60>)
 800ee00:	4413      	add	r3, r2
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fe f8b2 	bl	800cf6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	607b      	str	r3, [r7, #4]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b37      	cmp	r3, #55	@ 0x37
 800ee12:	d9ef      	bls.n	800edf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ee14:	480d      	ldr	r0, [pc, #52]	@ (800ee4c <prvInitialiseTaskLists+0x64>)
 800ee16:	f7fe f8a9 	bl	800cf6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ee1a:	480d      	ldr	r0, [pc, #52]	@ (800ee50 <prvInitialiseTaskLists+0x68>)
 800ee1c:	f7fe f8a6 	bl	800cf6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ee20:	480c      	ldr	r0, [pc, #48]	@ (800ee54 <prvInitialiseTaskLists+0x6c>)
 800ee22:	f7fe f8a3 	bl	800cf6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ee26:	480c      	ldr	r0, [pc, #48]	@ (800ee58 <prvInitialiseTaskLists+0x70>)
 800ee28:	f7fe f8a0 	bl	800cf6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ee2c:	480b      	ldr	r0, [pc, #44]	@ (800ee5c <prvInitialiseTaskLists+0x74>)
 800ee2e:	f7fe f89d 	bl	800cf6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ee32:	4b0b      	ldr	r3, [pc, #44]	@ (800ee60 <prvInitialiseTaskLists+0x78>)
 800ee34:	4a05      	ldr	r2, [pc, #20]	@ (800ee4c <prvInitialiseTaskLists+0x64>)
 800ee36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ee38:	4b0a      	ldr	r3, [pc, #40]	@ (800ee64 <prvInitialiseTaskLists+0x7c>)
 800ee3a:	4a05      	ldr	r2, [pc, #20]	@ (800ee50 <prvInitialiseTaskLists+0x68>)
 800ee3c:	601a      	str	r2, [r3, #0]
}
 800ee3e:	bf00      	nop
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	24006218 	.word	0x24006218
 800ee4c:	24006678 	.word	0x24006678
 800ee50:	2400668c 	.word	0x2400668c
 800ee54:	240066a8 	.word	0x240066a8
 800ee58:	240066bc 	.word	0x240066bc
 800ee5c:	240066d4 	.word	0x240066d4
 800ee60:	240066a0 	.word	0x240066a0
 800ee64:	240066a4 	.word	0x240066a4

0800ee68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee6e:	e019      	b.n	800eea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ee70:	f000 ffda 	bl	800fe28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee74:	4b10      	ldr	r3, [pc, #64]	@ (800eeb8 <prvCheckTasksWaitingTermination+0x50>)
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	3304      	adds	r3, #4
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7fe f8fd 	bl	800d080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ee86:	4b0d      	ldr	r3, [pc, #52]	@ (800eebc <prvCheckTasksWaitingTermination+0x54>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	4a0b      	ldr	r2, [pc, #44]	@ (800eebc <prvCheckTasksWaitingTermination+0x54>)
 800ee8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ee90:	4b0b      	ldr	r3, [pc, #44]	@ (800eec0 <prvCheckTasksWaitingTermination+0x58>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	3b01      	subs	r3, #1
 800ee96:	4a0a      	ldr	r2, [pc, #40]	@ (800eec0 <prvCheckTasksWaitingTermination+0x58>)
 800ee98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ee9a:	f000 fff7 	bl	800fe8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 f810 	bl	800eec4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eea4:	4b06      	ldr	r3, [pc, #24]	@ (800eec0 <prvCheckTasksWaitingTermination+0x58>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d1e1      	bne.n	800ee70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eeac:	bf00      	nop
 800eeae:	bf00      	nop
 800eeb0:	3708      	adds	r7, #8
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	240066bc 	.word	0x240066bc
 800eebc:	240066e8 	.word	0x240066e8
 800eec0:	240066d0 	.word	0x240066d0

0800eec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3354      	adds	r3, #84	@ 0x54
 800eed0:	4618      	mov	r0, r3
 800eed2:	f00c fa5d 	bl	801b390 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d108      	bne.n	800eef2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eee4:	4618      	mov	r0, r3
 800eee6:	f001 f98f 	bl	8010208 <vPortFree>
				vPortFree( pxTCB );
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f001 f98c 	bl	8010208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eef0:	e019      	b.n	800ef26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d103      	bne.n	800ef04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f001 f983 	bl	8010208 <vPortFree>
	}
 800ef02:	e010      	b.n	800ef26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	d00b      	beq.n	800ef26 <prvDeleteTCB+0x62>
	__asm volatile
 800ef0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	60fb      	str	r3, [r7, #12]
}
 800ef20:	bf00      	nop
 800ef22:	bf00      	nop
 800ef24:	e7fd      	b.n	800ef22 <prvDeleteTCB+0x5e>
	}
 800ef26:	bf00      	nop
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
	...

0800ef30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ef30:	b480      	push	{r7}
 800ef32:	b083      	sub	sp, #12
 800ef34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef36:	4b0c      	ldr	r3, [pc, #48]	@ (800ef68 <prvResetNextTaskUnblockTime+0x38>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d104      	bne.n	800ef4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ef40:	4b0a      	ldr	r3, [pc, #40]	@ (800ef6c <prvResetNextTaskUnblockTime+0x3c>)
 800ef42:	f04f 32ff 	mov.w	r2, #4294967295
 800ef46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ef48:	e008      	b.n	800ef5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef4a:	4b07      	ldr	r3, [pc, #28]	@ (800ef68 <prvResetNextTaskUnblockTime+0x38>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	4a04      	ldr	r2, [pc, #16]	@ (800ef6c <prvResetNextTaskUnblockTime+0x3c>)
 800ef5a:	6013      	str	r3, [r2, #0]
}
 800ef5c:	bf00      	nop
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	240066a0 	.word	0x240066a0
 800ef6c:	24006708 	.word	0x24006708

0800ef70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ef76:	4b05      	ldr	r3, [pc, #20]	@ (800ef8c <xTaskGetCurrentTaskHandle+0x1c>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ef7c:	687b      	ldr	r3, [r7, #4]
	}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	370c      	adds	r7, #12
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop
 800ef8c:	24006214 	.word	0x24006214

0800ef90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ef96:	4b0b      	ldr	r3, [pc, #44]	@ (800efc4 <xTaskGetSchedulerState+0x34>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d102      	bne.n	800efa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	607b      	str	r3, [r7, #4]
 800efa2:	e008      	b.n	800efb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efa4:	4b08      	ldr	r3, [pc, #32]	@ (800efc8 <xTaskGetSchedulerState+0x38>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d102      	bne.n	800efb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800efac:	2302      	movs	r3, #2
 800efae:	607b      	str	r3, [r7, #4]
 800efb0:	e001      	b.n	800efb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800efb2:	2300      	movs	r3, #0
 800efb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800efb6:	687b      	ldr	r3, [r7, #4]
	}
 800efb8:	4618      	mov	r0, r3
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr
 800efc4:	240066f4 	.word	0x240066f4
 800efc8:	24006710 	.word	0x24006710

0800efcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800efd8:	2300      	movs	r3, #0
 800efda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d051      	beq.n	800f086 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efe6:	4b2a      	ldr	r3, [pc, #168]	@ (800f090 <xTaskPriorityInherit+0xc4>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efec:	429a      	cmp	r2, r3
 800efee:	d241      	bcs.n	800f074 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	699b      	ldr	r3, [r3, #24]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	db06      	blt.n	800f006 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eff8:	4b25      	ldr	r3, [pc, #148]	@ (800f090 <xTaskPriorityInherit+0xc4>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800effe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	6959      	ldr	r1, [r3, #20]
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f00e:	4613      	mov	r3, r2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	4413      	add	r3, r2
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	4a1f      	ldr	r2, [pc, #124]	@ (800f094 <xTaskPriorityInherit+0xc8>)
 800f018:	4413      	add	r3, r2
 800f01a:	4299      	cmp	r1, r3
 800f01c:	d122      	bne.n	800f064 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	3304      	adds	r3, #4
 800f022:	4618      	mov	r0, r3
 800f024:	f7fe f82c 	bl	800d080 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f028:	4b19      	ldr	r3, [pc, #100]	@ (800f090 <xTaskPriorityInherit+0xc4>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f036:	4b18      	ldr	r3, [pc, #96]	@ (800f098 <xTaskPriorityInherit+0xcc>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d903      	bls.n	800f046 <xTaskPriorityInherit+0x7a>
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f042:	4a15      	ldr	r2, [pc, #84]	@ (800f098 <xTaskPriorityInherit+0xcc>)
 800f044:	6013      	str	r3, [r2, #0]
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f04a:	4613      	mov	r3, r2
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	4413      	add	r3, r2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4a10      	ldr	r2, [pc, #64]	@ (800f094 <xTaskPriorityInherit+0xc8>)
 800f054:	441a      	add	r2, r3
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	3304      	adds	r3, #4
 800f05a:	4619      	mov	r1, r3
 800f05c:	4610      	mov	r0, r2
 800f05e:	f7fd ffb2 	bl	800cfc6 <vListInsertEnd>
 800f062:	e004      	b.n	800f06e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f064:	4b0a      	ldr	r3, [pc, #40]	@ (800f090 <xTaskPriorityInherit+0xc4>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f06e:	2301      	movs	r3, #1
 800f070:	60fb      	str	r3, [r7, #12]
 800f072:	e008      	b.n	800f086 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f078:	4b05      	ldr	r3, [pc, #20]	@ (800f090 <xTaskPriorityInherit+0xc4>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f07e:	429a      	cmp	r2, r3
 800f080:	d201      	bcs.n	800f086 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f082:	2301      	movs	r3, #1
 800f084:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f086:	68fb      	ldr	r3, [r7, #12]
	}
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	24006214 	.word	0x24006214
 800f094:	24006218 	.word	0x24006218
 800f098:	240066f0 	.word	0x240066f0

0800f09c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b086      	sub	sp, #24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d058      	beq.n	800f164 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f0b2:	4b2f      	ldr	r3, [pc, #188]	@ (800f170 <xTaskPriorityDisinherit+0xd4>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	693a      	ldr	r2, [r7, #16]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d00b      	beq.n	800f0d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c0:	f383 8811 	msr	BASEPRI, r3
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	60fb      	str	r3, [r7, #12]
}
 800f0ce:	bf00      	nop
 800f0d0:	bf00      	nop
 800f0d2:	e7fd      	b.n	800f0d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d10b      	bne.n	800f0f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e0:	f383 8811 	msr	BASEPRI, r3
 800f0e4:	f3bf 8f6f 	isb	sy
 800f0e8:	f3bf 8f4f 	dsb	sy
 800f0ec:	60bb      	str	r3, [r7, #8]
}
 800f0ee:	bf00      	nop
 800f0f0:	bf00      	nop
 800f0f2:	e7fd      	b.n	800f0f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0f8:	1e5a      	subs	r2, r3, #1
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f106:	429a      	cmp	r2, r3
 800f108:	d02c      	beq.n	800f164 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d128      	bne.n	800f164 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	3304      	adds	r3, #4
 800f116:	4618      	mov	r0, r3
 800f118:	f7fd ffb2 	bl	800d080 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f128:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f134:	4b0f      	ldr	r3, [pc, #60]	@ (800f174 <xTaskPriorityDisinherit+0xd8>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d903      	bls.n	800f144 <xTaskPriorityDisinherit+0xa8>
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f140:	4a0c      	ldr	r2, [pc, #48]	@ (800f174 <xTaskPriorityDisinherit+0xd8>)
 800f142:	6013      	str	r3, [r2, #0]
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f148:	4613      	mov	r3, r2
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	4413      	add	r3, r2
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	4a09      	ldr	r2, [pc, #36]	@ (800f178 <xTaskPriorityDisinherit+0xdc>)
 800f152:	441a      	add	r2, r3
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	3304      	adds	r3, #4
 800f158:	4619      	mov	r1, r3
 800f15a:	4610      	mov	r0, r2
 800f15c:	f7fd ff33 	bl	800cfc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f160:	2301      	movs	r3, #1
 800f162:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f164:	697b      	ldr	r3, [r7, #20]
	}
 800f166:	4618      	mov	r0, r3
 800f168:	3718      	adds	r7, #24
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	24006214 	.word	0x24006214
 800f174:	240066f0 	.word	0x240066f0
 800f178:	24006218 	.word	0x24006218

0800f17c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b088      	sub	sp, #32
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f18a:	2301      	movs	r3, #1
 800f18c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d06c      	beq.n	800f26e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d10b      	bne.n	800f1b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a0:	f383 8811 	msr	BASEPRI, r3
 800f1a4:	f3bf 8f6f 	isb	sy
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	60fb      	str	r3, [r7, #12]
}
 800f1ae:	bf00      	nop
 800f1b0:	bf00      	nop
 800f1b2:	e7fd      	b.n	800f1b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d902      	bls.n	800f1c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	e002      	b.n	800f1ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f1c4:	69bb      	ldr	r3, [r7, #24]
 800f1c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ce:	69fa      	ldr	r2, [r7, #28]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d04c      	beq.n	800f26e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1d8:	697a      	ldr	r2, [r7, #20]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d147      	bne.n	800f26e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f1de:	4b26      	ldr	r3, [pc, #152]	@ (800f278 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	69ba      	ldr	r2, [r7, #24]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d10b      	bne.n	800f200 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ec:	f383 8811 	msr	BASEPRI, r3
 800f1f0:	f3bf 8f6f 	isb	sy
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	60bb      	str	r3, [r7, #8]
}
 800f1fa:	bf00      	nop
 800f1fc:	bf00      	nop
 800f1fe:	e7fd      	b.n	800f1fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f204:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	69fa      	ldr	r2, [r7, #28]
 800f20a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f20c:	69bb      	ldr	r3, [r7, #24]
 800f20e:	699b      	ldr	r3, [r3, #24]
 800f210:	2b00      	cmp	r3, #0
 800f212:	db04      	blt.n	800f21e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	6959      	ldr	r1, [r3, #20]
 800f222:	693a      	ldr	r2, [r7, #16]
 800f224:	4613      	mov	r3, r2
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	4413      	add	r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4a13      	ldr	r2, [pc, #76]	@ (800f27c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f22e:	4413      	add	r3, r2
 800f230:	4299      	cmp	r1, r3
 800f232:	d11c      	bne.n	800f26e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	3304      	adds	r3, #4
 800f238:	4618      	mov	r0, r3
 800f23a:	f7fd ff21 	bl	800d080 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f23e:	69bb      	ldr	r3, [r7, #24]
 800f240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f242:	4b0f      	ldr	r3, [pc, #60]	@ (800f280 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	429a      	cmp	r2, r3
 800f248:	d903      	bls.n	800f252 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f24e:	4a0c      	ldr	r2, [pc, #48]	@ (800f280 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f250:	6013      	str	r3, [r2, #0]
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f256:	4613      	mov	r3, r2
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	4413      	add	r3, r2
 800f25c:	009b      	lsls	r3, r3, #2
 800f25e:	4a07      	ldr	r2, [pc, #28]	@ (800f27c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f260:	441a      	add	r2, r3
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	3304      	adds	r3, #4
 800f266:	4619      	mov	r1, r3
 800f268:	4610      	mov	r0, r2
 800f26a:	f7fd feac 	bl	800cfc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f26e:	bf00      	nop
 800f270:	3720      	adds	r7, #32
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	24006214 	.word	0x24006214
 800f27c:	24006218 	.word	0x24006218
 800f280:	240066f0 	.word	0x240066f0

0800f284 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f288:	4b07      	ldr	r3, [pc, #28]	@ (800f2a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d004      	beq.n	800f29a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f290:	4b05      	ldr	r3, [pc, #20]	@ (800f2a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f296:	3201      	adds	r2, #1
 800f298:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f29a:	4b03      	ldr	r3, [pc, #12]	@ (800f2a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f29c:	681b      	ldr	r3, [r3, #0]
	}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr
 800f2a8:	24006214 	.word	0x24006214

0800f2ac <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f2b6:	f000 fdb7 	bl	800fe28 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f2ba:	4b20      	ldr	r3, [pc, #128]	@ (800f33c <ulTaskNotifyTake+0x90>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d113      	bne.n	800f2ee <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f2c6:	4b1d      	ldr	r3, [pc, #116]	@ (800f33c <ulTaskNotifyTake+0x90>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d00b      	beq.n	800f2ee <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	6838      	ldr	r0, [r7, #0]
 800f2da:	f000 f8c9 	bl	800f470 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f2de:	4b18      	ldr	r3, [pc, #96]	@ (800f340 <ulTaskNotifyTake+0x94>)
 800f2e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2e4:	601a      	str	r2, [r3, #0]
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f2ee:	f000 fdcd 	bl	800fe8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f2f2:	f000 fd99 	bl	800fe28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f2f6:	4b11      	ldr	r3, [pc, #68]	@ (800f33c <ulTaskNotifyTake+0x90>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f2fe:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d00e      	beq.n	800f324 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d005      	beq.n	800f318 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f30c:	4b0b      	ldr	r3, [pc, #44]	@ (800f33c <ulTaskNotifyTake+0x90>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2200      	movs	r2, #0
 800f312:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800f316:	e005      	b.n	800f324 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f318:	4b08      	ldr	r3, [pc, #32]	@ (800f33c <ulTaskNotifyTake+0x90>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	3a01      	subs	r2, #1
 800f320:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f324:	4b05      	ldr	r3, [pc, #20]	@ (800f33c <ulTaskNotifyTake+0x90>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2200      	movs	r2, #0
 800f32a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f32e:	f000 fdad 	bl	800fe8c <vPortExitCritical>

		return ulReturn;
 800f332:	68fb      	ldr	r3, [r7, #12]
	}
 800f334:	4618      	mov	r0, r3
 800f336:	3710      	adds	r7, #16
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	24006214 	.word	0x24006214
 800f340:	e000ed04 	.word	0xe000ed04

0800f344 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08a      	sub	sp, #40	@ 0x28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d10b      	bne.n	800f36c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800f354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f358:	f383 8811 	msr	BASEPRI, r3
 800f35c:	f3bf 8f6f 	isb	sy
 800f360:	f3bf 8f4f 	dsb	sy
 800f364:	61bb      	str	r3, [r7, #24]
}
 800f366:	bf00      	nop
 800f368:	bf00      	nop
 800f36a:	e7fd      	b.n	800f368 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f36c:	f000 fe3c 	bl	800ffe8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800f374:	f3ef 8211 	mrs	r2, BASEPRI
 800f378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	617a      	str	r2, [r7, #20]
 800f38a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f38c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f38e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f392:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f396:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f39a:	2202      	movs	r2, #2
 800f39c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3a6:	1c5a      	adds	r2, r3, #1
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f3ae:	7ffb      	ldrb	r3, [r7, #31]
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d147      	bne.n	800f444 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00b      	beq.n	800f3d4 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800f3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3c0:	f383 8811 	msr	BASEPRI, r3
 800f3c4:	f3bf 8f6f 	isb	sy
 800f3c8:	f3bf 8f4f 	dsb	sy
 800f3cc:	60fb      	str	r3, [r7, #12]
}
 800f3ce:	bf00      	nop
 800f3d0:	bf00      	nop
 800f3d2:	e7fd      	b.n	800f3d0 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3d4:	4b20      	ldr	r3, [pc, #128]	@ (800f458 <vTaskNotifyGiveFromISR+0x114>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d11d      	bne.n	800f418 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3de:	3304      	adds	r3, #4
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fd fe4d 	bl	800d080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ea:	4b1c      	ldr	r3, [pc, #112]	@ (800f45c <vTaskNotifyGiveFromISR+0x118>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d903      	bls.n	800f3fa <vTaskNotifyGiveFromISR+0xb6>
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3f6:	4a19      	ldr	r2, [pc, #100]	@ (800f45c <vTaskNotifyGiveFromISR+0x118>)
 800f3f8:	6013      	str	r3, [r2, #0]
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3fe:	4613      	mov	r3, r2
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	4413      	add	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4a16      	ldr	r2, [pc, #88]	@ (800f460 <vTaskNotifyGiveFromISR+0x11c>)
 800f408:	441a      	add	r2, r3
 800f40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40c:	3304      	adds	r3, #4
 800f40e:	4619      	mov	r1, r3
 800f410:	4610      	mov	r0, r2
 800f412:	f7fd fdd8 	bl	800cfc6 <vListInsertEnd>
 800f416:	e005      	b.n	800f424 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41a:	3318      	adds	r3, #24
 800f41c:	4619      	mov	r1, r3
 800f41e:	4811      	ldr	r0, [pc, #68]	@ (800f464 <vTaskNotifyGiveFromISR+0x120>)
 800f420:	f7fd fdd1 	bl	800cfc6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f428:	4b0f      	ldr	r3, [pc, #60]	@ (800f468 <vTaskNotifyGiveFromISR+0x124>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f42e:	429a      	cmp	r2, r3
 800f430:	d908      	bls.n	800f444 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	2201      	movs	r2, #1
 800f43c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f43e:	4b0b      	ldr	r3, [pc, #44]	@ (800f46c <vTaskNotifyGiveFromISR+0x128>)
 800f440:	2201      	movs	r2, #1
 800f442:	601a      	str	r2, [r3, #0]
 800f444:	6a3b      	ldr	r3, [r7, #32]
 800f446:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	f383 8811 	msr	BASEPRI, r3
}
 800f44e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800f450:	bf00      	nop
 800f452:	3728      	adds	r7, #40	@ 0x28
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}
 800f458:	24006710 	.word	0x24006710
 800f45c:	240066f0 	.word	0x240066f0
 800f460:	24006218 	.word	0x24006218
 800f464:	240066a8 	.word	0x240066a8
 800f468:	24006214 	.word	0x24006214
 800f46c:	240066fc 	.word	0x240066fc

0800f470 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f47a:	4b21      	ldr	r3, [pc, #132]	@ (800f500 <prvAddCurrentTaskToDelayedList+0x90>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f480:	4b20      	ldr	r3, [pc, #128]	@ (800f504 <prvAddCurrentTaskToDelayedList+0x94>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	3304      	adds	r3, #4
 800f486:	4618      	mov	r0, r3
 800f488:	f7fd fdfa 	bl	800d080 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f492:	d10a      	bne.n	800f4aa <prvAddCurrentTaskToDelayedList+0x3a>
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d007      	beq.n	800f4aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f49a:	4b1a      	ldr	r3, [pc, #104]	@ (800f504 <prvAddCurrentTaskToDelayedList+0x94>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	3304      	adds	r3, #4
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	4819      	ldr	r0, [pc, #100]	@ (800f508 <prvAddCurrentTaskToDelayedList+0x98>)
 800f4a4:	f7fd fd8f 	bl	800cfc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f4a8:	e026      	b.n	800f4f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f4b2:	4b14      	ldr	r3, [pc, #80]	@ (800f504 <prvAddCurrentTaskToDelayedList+0x94>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	68ba      	ldr	r2, [r7, #8]
 800f4b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d209      	bcs.n	800f4d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4c2:	4b12      	ldr	r3, [pc, #72]	@ (800f50c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f504 <prvAddCurrentTaskToDelayedList+0x94>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	3304      	adds	r3, #4
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	4610      	mov	r0, r2
 800f4d0:	f7fd fd9d 	bl	800d00e <vListInsert>
}
 800f4d4:	e010      	b.n	800f4f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4d6:	4b0e      	ldr	r3, [pc, #56]	@ (800f510 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	4b0a      	ldr	r3, [pc, #40]	@ (800f504 <prvAddCurrentTaskToDelayedList+0x94>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	3304      	adds	r3, #4
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	f7fd fd93 	bl	800d00e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f514 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	68ba      	ldr	r2, [r7, #8]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d202      	bcs.n	800f4f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f4f2:	4a08      	ldr	r2, [pc, #32]	@ (800f514 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	6013      	str	r3, [r2, #0]
}
 800f4f8:	bf00      	nop
 800f4fa:	3710      	adds	r7, #16
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	240066ec 	.word	0x240066ec
 800f504:	24006214 	.word	0x24006214
 800f508:	240066d4 	.word	0x240066d4
 800f50c:	240066a4 	.word	0x240066a4
 800f510:	240066a0 	.word	0x240066a0
 800f514:	24006708 	.word	0x24006708

0800f518 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08a      	sub	sp, #40	@ 0x28
 800f51c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f51e:	2300      	movs	r3, #0
 800f520:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f522:	f000 fb13 	bl	800fb4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f526:	4b1d      	ldr	r3, [pc, #116]	@ (800f59c <xTimerCreateTimerTask+0x84>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d021      	beq.n	800f572 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f52e:	2300      	movs	r3, #0
 800f530:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f532:	2300      	movs	r3, #0
 800f534:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f536:	1d3a      	adds	r2, r7, #4
 800f538:	f107 0108 	add.w	r1, r7, #8
 800f53c:	f107 030c 	add.w	r3, r7, #12
 800f540:	4618      	mov	r0, r3
 800f542:	f7fd fcf9 	bl	800cf38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f546:	6879      	ldr	r1, [r7, #4]
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	68fa      	ldr	r2, [r7, #12]
 800f54c:	9202      	str	r2, [sp, #8]
 800f54e:	9301      	str	r3, [sp, #4]
 800f550:	2302      	movs	r3, #2
 800f552:	9300      	str	r3, [sp, #0]
 800f554:	2300      	movs	r3, #0
 800f556:	460a      	mov	r2, r1
 800f558:	4911      	ldr	r1, [pc, #68]	@ (800f5a0 <xTimerCreateTimerTask+0x88>)
 800f55a:	4812      	ldr	r0, [pc, #72]	@ (800f5a4 <xTimerCreateTimerTask+0x8c>)
 800f55c:	f7fe fe9e 	bl	800e29c <xTaskCreateStatic>
 800f560:	4603      	mov	r3, r0
 800f562:	4a11      	ldr	r2, [pc, #68]	@ (800f5a8 <xTimerCreateTimerTask+0x90>)
 800f564:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f566:	4b10      	ldr	r3, [pc, #64]	@ (800f5a8 <xTimerCreateTimerTask+0x90>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f56e:	2301      	movs	r3, #1
 800f570:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d10b      	bne.n	800f590 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f57c:	f383 8811 	msr	BASEPRI, r3
 800f580:	f3bf 8f6f 	isb	sy
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	613b      	str	r3, [r7, #16]
}
 800f58a:	bf00      	nop
 800f58c:	bf00      	nop
 800f58e:	e7fd      	b.n	800f58c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f590:	697b      	ldr	r3, [r7, #20]
}
 800f592:	4618      	mov	r0, r3
 800f594:	3718      	adds	r7, #24
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	24006744 	.word	0x24006744
 800f5a0:	0801c200 	.word	0x0801c200
 800f5a4:	0800f6e5 	.word	0x0800f6e5
 800f5a8:	24006748 	.word	0x24006748

0800f5ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b08a      	sub	sp, #40	@ 0x28
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
 800f5b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d10b      	bne.n	800f5dc <xTimerGenericCommand+0x30>
	__asm volatile
 800f5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c8:	f383 8811 	msr	BASEPRI, r3
 800f5cc:	f3bf 8f6f 	isb	sy
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	623b      	str	r3, [r7, #32]
}
 800f5d6:	bf00      	nop
 800f5d8:	bf00      	nop
 800f5da:	e7fd      	b.n	800f5d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f5dc:	4b19      	ldr	r3, [pc, #100]	@ (800f644 <xTimerGenericCommand+0x98>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d02a      	beq.n	800f63a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	2b05      	cmp	r3, #5
 800f5f4:	dc18      	bgt.n	800f628 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f5f6:	f7ff fccb 	bl	800ef90 <xTaskGetSchedulerState>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	d109      	bne.n	800f614 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f600:	4b10      	ldr	r3, [pc, #64]	@ (800f644 <xTimerGenericCommand+0x98>)
 800f602:	6818      	ldr	r0, [r3, #0]
 800f604:	f107 0110 	add.w	r1, r7, #16
 800f608:	2300      	movs	r3, #0
 800f60a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f60c:	f7fd ffce 	bl	800d5ac <xQueueGenericSend>
 800f610:	6278      	str	r0, [r7, #36]	@ 0x24
 800f612:	e012      	b.n	800f63a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f614:	4b0b      	ldr	r3, [pc, #44]	@ (800f644 <xTimerGenericCommand+0x98>)
 800f616:	6818      	ldr	r0, [r3, #0]
 800f618:	f107 0110 	add.w	r1, r7, #16
 800f61c:	2300      	movs	r3, #0
 800f61e:	2200      	movs	r2, #0
 800f620:	f7fd ffc4 	bl	800d5ac <xQueueGenericSend>
 800f624:	6278      	str	r0, [r7, #36]	@ 0x24
 800f626:	e008      	b.n	800f63a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f628:	4b06      	ldr	r3, [pc, #24]	@ (800f644 <xTimerGenericCommand+0x98>)
 800f62a:	6818      	ldr	r0, [r3, #0]
 800f62c:	f107 0110 	add.w	r1, r7, #16
 800f630:	2300      	movs	r3, #0
 800f632:	683a      	ldr	r2, [r7, #0]
 800f634:	f7fe f8bc 	bl	800d7b0 <xQueueGenericSendFromISR>
 800f638:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3728      	adds	r7, #40	@ 0x28
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	24006744 	.word	0x24006744

0800f648 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b088      	sub	sp, #32
 800f64c:	af02      	add	r7, sp, #8
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f652:	4b23      	ldr	r3, [pc, #140]	@ (800f6e0 <prvProcessExpiredTimer+0x98>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	68db      	ldr	r3, [r3, #12]
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	3304      	adds	r3, #4
 800f660:	4618      	mov	r0, r3
 800f662:	f7fd fd0d 	bl	800d080 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f66c:	f003 0304 	and.w	r3, r3, #4
 800f670:	2b00      	cmp	r3, #0
 800f672:	d023      	beq.n	800f6bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	699a      	ldr	r2, [r3, #24]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	18d1      	adds	r1, r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	6978      	ldr	r0, [r7, #20]
 800f682:	f000 f8d5 	bl	800f830 <prvInsertTimerInActiveList>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d020      	beq.n	800f6ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f68c:	2300      	movs	r3, #0
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	2300      	movs	r3, #0
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	2100      	movs	r1, #0
 800f696:	6978      	ldr	r0, [r7, #20]
 800f698:	f7ff ff88 	bl	800f5ac <xTimerGenericCommand>
 800f69c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d114      	bne.n	800f6ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a8:	f383 8811 	msr	BASEPRI, r3
 800f6ac:	f3bf 8f6f 	isb	sy
 800f6b0:	f3bf 8f4f 	dsb	sy
 800f6b4:	60fb      	str	r3, [r7, #12]
}
 800f6b6:	bf00      	nop
 800f6b8:	bf00      	nop
 800f6ba:	e7fd      	b.n	800f6b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6c2:	f023 0301 	bic.w	r3, r3, #1
 800f6c6:	b2da      	uxtb	r2, r3
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	6978      	ldr	r0, [r7, #20]
 800f6d4:	4798      	blx	r3
}
 800f6d6:	bf00      	nop
 800f6d8:	3718      	adds	r7, #24
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	2400673c 	.word	0x2400673c

0800f6e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b084      	sub	sp, #16
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f6ec:	f107 0308 	add.w	r3, r7, #8
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 f859 	bl	800f7a8 <prvGetNextExpireTime>
 800f6f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f000 f805 	bl	800f70c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f702:	f000 f8d7 	bl	800f8b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f706:	bf00      	nop
 800f708:	e7f0      	b.n	800f6ec <prvTimerTask+0x8>
	...

0800f70c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f716:	f7ff f825 	bl	800e764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f71a:	f107 0308 	add.w	r3, r7, #8
 800f71e:	4618      	mov	r0, r3
 800f720:	f000 f866 	bl	800f7f0 <prvSampleTimeNow>
 800f724:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d130      	bne.n	800f78e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10a      	bne.n	800f748 <prvProcessTimerOrBlockTask+0x3c>
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	429a      	cmp	r2, r3
 800f738:	d806      	bhi.n	800f748 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f73a:	f7ff f821 	bl	800e780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f73e:	68f9      	ldr	r1, [r7, #12]
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7ff ff81 	bl	800f648 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f746:	e024      	b.n	800f792 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d008      	beq.n	800f760 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f74e:	4b13      	ldr	r3, [pc, #76]	@ (800f79c <prvProcessTimerOrBlockTask+0x90>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d101      	bne.n	800f75c <prvProcessTimerOrBlockTask+0x50>
 800f758:	2301      	movs	r3, #1
 800f75a:	e000      	b.n	800f75e <prvProcessTimerOrBlockTask+0x52>
 800f75c:	2300      	movs	r3, #0
 800f75e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f760:	4b0f      	ldr	r3, [pc, #60]	@ (800f7a0 <prvProcessTimerOrBlockTask+0x94>)
 800f762:	6818      	ldr	r0, [r3, #0]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	1ad3      	subs	r3, r2, r3
 800f76a:	683a      	ldr	r2, [r7, #0]
 800f76c:	4619      	mov	r1, r3
 800f76e:	f7fe fd61 	bl	800e234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f772:	f7ff f805 	bl	800e780 <xTaskResumeAll>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d10a      	bne.n	800f792 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f77c:	4b09      	ldr	r3, [pc, #36]	@ (800f7a4 <prvProcessTimerOrBlockTask+0x98>)
 800f77e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f782:	601a      	str	r2, [r3, #0]
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	f3bf 8f6f 	isb	sy
}
 800f78c:	e001      	b.n	800f792 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f78e:	f7fe fff7 	bl	800e780 <xTaskResumeAll>
}
 800f792:	bf00      	nop
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	24006740 	.word	0x24006740
 800f7a0:	24006744 	.word	0x24006744
 800f7a4:	e000ed04 	.word	0xe000ed04

0800f7a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b085      	sub	sp, #20
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f7b0:	4b0e      	ldr	r3, [pc, #56]	@ (800f7ec <prvGetNextExpireTime+0x44>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d101      	bne.n	800f7be <prvGetNextExpireTime+0x16>
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	e000      	b.n	800f7c0 <prvGetNextExpireTime+0x18>
 800f7be:	2200      	movs	r2, #0
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d105      	bne.n	800f7d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f7cc:	4b07      	ldr	r3, [pc, #28]	@ (800f7ec <prvGetNextExpireTime+0x44>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	60fb      	str	r3, [r7, #12]
 800f7d6:	e001      	b.n	800f7dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	2400673c 	.word	0x2400673c

0800f7f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f7f8:	f7ff f860 	bl	800e8bc <xTaskGetTickCount>
 800f7fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f82c <prvSampleTimeNow+0x3c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	429a      	cmp	r2, r3
 800f806:	d205      	bcs.n	800f814 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f808:	f000 f93a 	bl	800fa80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	601a      	str	r2, [r3, #0]
 800f812:	e002      	b.n	800f81a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2200      	movs	r2, #0
 800f818:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f81a:	4a04      	ldr	r2, [pc, #16]	@ (800f82c <prvSampleTimeNow+0x3c>)
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f820:	68fb      	ldr	r3, [r7, #12]
}
 800f822:	4618      	mov	r0, r3
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	2400674c 	.word	0x2400674c

0800f830 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
 800f83c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f83e:	2300      	movs	r3, #0
 800f840:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	429a      	cmp	r2, r3
 800f854:	d812      	bhi.n	800f87c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	1ad2      	subs	r2, r2, r3
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	699b      	ldr	r3, [r3, #24]
 800f860:	429a      	cmp	r2, r3
 800f862:	d302      	bcc.n	800f86a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f864:	2301      	movs	r3, #1
 800f866:	617b      	str	r3, [r7, #20]
 800f868:	e01b      	b.n	800f8a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f86a:	4b10      	ldr	r3, [pc, #64]	@ (800f8ac <prvInsertTimerInActiveList+0x7c>)
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	3304      	adds	r3, #4
 800f872:	4619      	mov	r1, r3
 800f874:	4610      	mov	r0, r2
 800f876:	f7fd fbca 	bl	800d00e <vListInsert>
 800f87a:	e012      	b.n	800f8a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	429a      	cmp	r2, r3
 800f882:	d206      	bcs.n	800f892 <prvInsertTimerInActiveList+0x62>
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d302      	bcc.n	800f892 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f88c:	2301      	movs	r3, #1
 800f88e:	617b      	str	r3, [r7, #20]
 800f890:	e007      	b.n	800f8a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f892:	4b07      	ldr	r3, [pc, #28]	@ (800f8b0 <prvInsertTimerInActiveList+0x80>)
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	3304      	adds	r3, #4
 800f89a:	4619      	mov	r1, r3
 800f89c:	4610      	mov	r0, r2
 800f89e:	f7fd fbb6 	bl	800d00e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f8a2:	697b      	ldr	r3, [r7, #20]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3718      	adds	r7, #24
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	24006740 	.word	0x24006740
 800f8b0:	2400673c 	.word	0x2400673c

0800f8b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b08e      	sub	sp, #56	@ 0x38
 800f8b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8ba:	e0ce      	b.n	800fa5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	da19      	bge.n	800f8f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f8c2:	1d3b      	adds	r3, r7, #4
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10b      	bne.n	800f8e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	61fb      	str	r3, [r7, #28]
}
 800f8e0:	bf00      	nop
 800f8e2:	bf00      	nop
 800f8e4:	e7fd      	b.n	800f8e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8ec:	6850      	ldr	r0, [r2, #4]
 800f8ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8f0:	6892      	ldr	r2, [r2, #8]
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f2c0 80ae 	blt.w	800fa5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f904:	695b      	ldr	r3, [r3, #20]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d004      	beq.n	800f914 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90c:	3304      	adds	r3, #4
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fd fbb6 	bl	800d080 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f914:	463b      	mov	r3, r7
 800f916:	4618      	mov	r0, r3
 800f918:	f7ff ff6a 	bl	800f7f0 <prvSampleTimeNow>
 800f91c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2b09      	cmp	r3, #9
 800f922:	f200 8097 	bhi.w	800fa54 <prvProcessReceivedCommands+0x1a0>
 800f926:	a201      	add	r2, pc, #4	@ (adr r2, 800f92c <prvProcessReceivedCommands+0x78>)
 800f928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f92c:	0800f955 	.word	0x0800f955
 800f930:	0800f955 	.word	0x0800f955
 800f934:	0800f955 	.word	0x0800f955
 800f938:	0800f9cb 	.word	0x0800f9cb
 800f93c:	0800f9df 	.word	0x0800f9df
 800f940:	0800fa2b 	.word	0x0800fa2b
 800f944:	0800f955 	.word	0x0800f955
 800f948:	0800f955 	.word	0x0800f955
 800f94c:	0800f9cb 	.word	0x0800f9cb
 800f950:	0800f9df 	.word	0x0800f9df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f956:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f95a:	f043 0301 	orr.w	r3, r3, #1
 800f95e:	b2da      	uxtb	r2, r3
 800f960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f962:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f966:	68ba      	ldr	r2, [r7, #8]
 800f968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f96a:	699b      	ldr	r3, [r3, #24]
 800f96c:	18d1      	adds	r1, r2, r3
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f974:	f7ff ff5c 	bl	800f830 <prvInsertTimerInActiveList>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d06c      	beq.n	800fa58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f980:	6a1b      	ldr	r3, [r3, #32]
 800f982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f984:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f98c:	f003 0304 	and.w	r3, r3, #4
 800f990:	2b00      	cmp	r3, #0
 800f992:	d061      	beq.n	800fa58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f994:	68ba      	ldr	r2, [r7, #8]
 800f996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f998:	699b      	ldr	r3, [r3, #24]
 800f99a:	441a      	add	r2, r3
 800f99c:	2300      	movs	r3, #0
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9a6:	f7ff fe01 	bl	800f5ac <xTimerGenericCommand>
 800f9aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f9ac:	6a3b      	ldr	r3, [r7, #32]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d152      	bne.n	800fa58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b6:	f383 8811 	msr	BASEPRI, r3
 800f9ba:	f3bf 8f6f 	isb	sy
 800f9be:	f3bf 8f4f 	dsb	sy
 800f9c2:	61bb      	str	r3, [r7, #24]
}
 800f9c4:	bf00      	nop
 800f9c6:	bf00      	nop
 800f9c8:	e7fd      	b.n	800f9c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9d0:	f023 0301 	bic.w	r3, r3, #1
 800f9d4:	b2da      	uxtb	r2, r3
 800f9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f9dc:	e03d      	b.n	800fa5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9e4:	f043 0301 	orr.w	r3, r3, #1
 800f9e8:	b2da      	uxtb	r2, r3
 800f9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d10b      	bne.n	800fa16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	617b      	str	r3, [r7, #20]
}
 800fa10:	bf00      	nop
 800fa12:	bf00      	nop
 800fa14:	e7fd      	b.n	800fa12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fa16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa18:	699a      	ldr	r2, [r3, #24]
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1c:	18d1      	adds	r1, r2, r3
 800fa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa24:	f7ff ff04 	bl	800f830 <prvInsertTimerInActiveList>
					break;
 800fa28:	e017      	b.n	800fa5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fa2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa30:	f003 0302 	and.w	r3, r3, #2
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d103      	bne.n	800fa40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fa38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa3a:	f000 fbe5 	bl	8010208 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fa3e:	e00c      	b.n	800fa5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa46:	f023 0301 	bic.w	r3, r3, #1
 800fa4a:	b2da      	uxtb	r2, r3
 800fa4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fa52:	e002      	b.n	800fa5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fa54:	bf00      	nop
 800fa56:	e000      	b.n	800fa5a <prvProcessReceivedCommands+0x1a6>
					break;
 800fa58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fa5a:	4b08      	ldr	r3, [pc, #32]	@ (800fa7c <prvProcessReceivedCommands+0x1c8>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	1d39      	adds	r1, r7, #4
 800fa60:	2200      	movs	r2, #0
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fd ffd2 	bl	800da0c <xQueueReceive>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f47f af26 	bne.w	800f8bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fa70:	bf00      	nop
 800fa72:	bf00      	nop
 800fa74:	3730      	adds	r7, #48	@ 0x30
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	24006744 	.word	0x24006744

0800fa80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b088      	sub	sp, #32
 800fa84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa86:	e049      	b.n	800fb1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa88:	4b2e      	ldr	r3, [pc, #184]	@ (800fb44 <prvSwitchTimerLists+0xc4>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa92:	4b2c      	ldr	r3, [pc, #176]	@ (800fb44 <prvSwitchTimerLists+0xc4>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	3304      	adds	r3, #4
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fd faed 	bl	800d080 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6a1b      	ldr	r3, [r3, #32]
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fab4:	f003 0304 	and.w	r3, r3, #4
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d02f      	beq.n	800fb1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	699b      	ldr	r3, [r3, #24]
 800fac0:	693a      	ldr	r2, [r7, #16]
 800fac2:	4413      	add	r3, r2
 800fac4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	429a      	cmp	r2, r3
 800facc:	d90e      	bls.n	800faec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	68fa      	ldr	r2, [r7, #12]
 800fad8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fada:	4b1a      	ldr	r3, [pc, #104]	@ (800fb44 <prvSwitchTimerLists+0xc4>)
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	3304      	adds	r3, #4
 800fae2:	4619      	mov	r1, r3
 800fae4:	4610      	mov	r0, r2
 800fae6:	f7fd fa92 	bl	800d00e <vListInsert>
 800faea:	e017      	b.n	800fb1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800faec:	2300      	movs	r3, #0
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	2300      	movs	r3, #0
 800faf2:	693a      	ldr	r2, [r7, #16]
 800faf4:	2100      	movs	r1, #0
 800faf6:	68f8      	ldr	r0, [r7, #12]
 800faf8:	f7ff fd58 	bl	800f5ac <xTimerGenericCommand>
 800fafc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d10b      	bne.n	800fb1c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb08:	f383 8811 	msr	BASEPRI, r3
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	f3bf 8f4f 	dsb	sy
 800fb14:	603b      	str	r3, [r7, #0]
}
 800fb16:	bf00      	nop
 800fb18:	bf00      	nop
 800fb1a:	e7fd      	b.n	800fb18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb1c:	4b09      	ldr	r3, [pc, #36]	@ (800fb44 <prvSwitchTimerLists+0xc4>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1b0      	bne.n	800fa88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fb26:	4b07      	ldr	r3, [pc, #28]	@ (800fb44 <prvSwitchTimerLists+0xc4>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fb2c:	4b06      	ldr	r3, [pc, #24]	@ (800fb48 <prvSwitchTimerLists+0xc8>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a04      	ldr	r2, [pc, #16]	@ (800fb44 <prvSwitchTimerLists+0xc4>)
 800fb32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fb34:	4a04      	ldr	r2, [pc, #16]	@ (800fb48 <prvSwitchTimerLists+0xc8>)
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	6013      	str	r3, [r2, #0]
}
 800fb3a:	bf00      	nop
 800fb3c:	3718      	adds	r7, #24
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}
 800fb42:	bf00      	nop
 800fb44:	2400673c 	.word	0x2400673c
 800fb48:	24006740 	.word	0x24006740

0800fb4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fb52:	f000 f969 	bl	800fe28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fb56:	4b15      	ldr	r3, [pc, #84]	@ (800fbac <prvCheckForValidListAndQueue+0x60>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d120      	bne.n	800fba0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fb5e:	4814      	ldr	r0, [pc, #80]	@ (800fbb0 <prvCheckForValidListAndQueue+0x64>)
 800fb60:	f7fd fa04 	bl	800cf6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fb64:	4813      	ldr	r0, [pc, #76]	@ (800fbb4 <prvCheckForValidListAndQueue+0x68>)
 800fb66:	f7fd fa01 	bl	800cf6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fb6a:	4b13      	ldr	r3, [pc, #76]	@ (800fbb8 <prvCheckForValidListAndQueue+0x6c>)
 800fb6c:	4a10      	ldr	r2, [pc, #64]	@ (800fbb0 <prvCheckForValidListAndQueue+0x64>)
 800fb6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fb70:	4b12      	ldr	r3, [pc, #72]	@ (800fbbc <prvCheckForValidListAndQueue+0x70>)
 800fb72:	4a10      	ldr	r2, [pc, #64]	@ (800fbb4 <prvCheckForValidListAndQueue+0x68>)
 800fb74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fb76:	2300      	movs	r3, #0
 800fb78:	9300      	str	r3, [sp, #0]
 800fb7a:	4b11      	ldr	r3, [pc, #68]	@ (800fbc0 <prvCheckForValidListAndQueue+0x74>)
 800fb7c:	4a11      	ldr	r2, [pc, #68]	@ (800fbc4 <prvCheckForValidListAndQueue+0x78>)
 800fb7e:	2110      	movs	r1, #16
 800fb80:	200a      	movs	r0, #10
 800fb82:	f7fd fb11 	bl	800d1a8 <xQueueGenericCreateStatic>
 800fb86:	4603      	mov	r3, r0
 800fb88:	4a08      	ldr	r2, [pc, #32]	@ (800fbac <prvCheckForValidListAndQueue+0x60>)
 800fb8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fb8c:	4b07      	ldr	r3, [pc, #28]	@ (800fbac <prvCheckForValidListAndQueue+0x60>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d005      	beq.n	800fba0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fb94:	4b05      	ldr	r3, [pc, #20]	@ (800fbac <prvCheckForValidListAndQueue+0x60>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	490b      	ldr	r1, [pc, #44]	@ (800fbc8 <prvCheckForValidListAndQueue+0x7c>)
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fe faf6 	bl	800e18c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fba0:	f000 f974 	bl	800fe8c <vPortExitCritical>
}
 800fba4:	bf00      	nop
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	24006744 	.word	0x24006744
 800fbb0:	24006714 	.word	0x24006714
 800fbb4:	24006728 	.word	0x24006728
 800fbb8:	2400673c 	.word	0x2400673c
 800fbbc:	24006740 	.word	0x24006740
 800fbc0:	240067f0 	.word	0x240067f0
 800fbc4:	24006750 	.word	0x24006750
 800fbc8:	0801c208 	.word	0x0801c208

0800fbcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	3b04      	subs	r3, #4
 800fbdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fbe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	3b04      	subs	r3, #4
 800fbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	f023 0201 	bic.w	r2, r3, #1
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	3b04      	subs	r3, #4
 800fbfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fbfc:	4a0c      	ldr	r2, [pc, #48]	@ (800fc30 <pxPortInitialiseStack+0x64>)
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3b14      	subs	r3, #20
 800fc06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	3b04      	subs	r3, #4
 800fc12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f06f 0202 	mvn.w	r2, #2
 800fc1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3b20      	subs	r3, #32
 800fc20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc22:	68fb      	ldr	r3, [r7, #12]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3714      	adds	r7, #20
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr
 800fc30:	0800fc35 	.word	0x0800fc35

0800fc34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fc34:	b480      	push	{r7}
 800fc36:	b085      	sub	sp, #20
 800fc38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fc3e:	4b13      	ldr	r3, [pc, #76]	@ (800fc8c <prvTaskExitError+0x58>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc46:	d00b      	beq.n	800fc60 <prvTaskExitError+0x2c>
	__asm volatile
 800fc48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc4c:	f383 8811 	msr	BASEPRI, r3
 800fc50:	f3bf 8f6f 	isb	sy
 800fc54:	f3bf 8f4f 	dsb	sy
 800fc58:	60fb      	str	r3, [r7, #12]
}
 800fc5a:	bf00      	nop
 800fc5c:	bf00      	nop
 800fc5e:	e7fd      	b.n	800fc5c <prvTaskExitError+0x28>
	__asm volatile
 800fc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc64:	f383 8811 	msr	BASEPRI, r3
 800fc68:	f3bf 8f6f 	isb	sy
 800fc6c:	f3bf 8f4f 	dsb	sy
 800fc70:	60bb      	str	r3, [r7, #8]
}
 800fc72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fc74:	bf00      	nop
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d0fc      	beq.n	800fc76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fc7c:	bf00      	nop
 800fc7e:	bf00      	nop
 800fc80:	3714      	adds	r7, #20
 800fc82:	46bd      	mov	sp, r7
 800fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop
 800fc8c:	240049e0 	.word	0x240049e0

0800fc90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fc90:	4b07      	ldr	r3, [pc, #28]	@ (800fcb0 <pxCurrentTCBConst2>)
 800fc92:	6819      	ldr	r1, [r3, #0]
 800fc94:	6808      	ldr	r0, [r1, #0]
 800fc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9a:	f380 8809 	msr	PSP, r0
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f04f 0000 	mov.w	r0, #0
 800fca6:	f380 8811 	msr	BASEPRI, r0
 800fcaa:	4770      	bx	lr
 800fcac:	f3af 8000 	nop.w

0800fcb0 <pxCurrentTCBConst2>:
 800fcb0:	24006214 	.word	0x24006214
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fcb4:	bf00      	nop
 800fcb6:	bf00      	nop

0800fcb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fcb8:	4808      	ldr	r0, [pc, #32]	@ (800fcdc <prvPortStartFirstTask+0x24>)
 800fcba:	6800      	ldr	r0, [r0, #0]
 800fcbc:	6800      	ldr	r0, [r0, #0]
 800fcbe:	f380 8808 	msr	MSP, r0
 800fcc2:	f04f 0000 	mov.w	r0, #0
 800fcc6:	f380 8814 	msr	CONTROL, r0
 800fcca:	b662      	cpsie	i
 800fccc:	b661      	cpsie	f
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	df00      	svc	0
 800fcd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fcda:	bf00      	nop
 800fcdc:	e000ed08 	.word	0xe000ed08

0800fce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fce6:	4b47      	ldr	r3, [pc, #284]	@ (800fe04 <xPortStartScheduler+0x124>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a47      	ldr	r2, [pc, #284]	@ (800fe08 <xPortStartScheduler+0x128>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d10b      	bne.n	800fd08 <xPortStartScheduler+0x28>
	__asm volatile
 800fcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf4:	f383 8811 	msr	BASEPRI, r3
 800fcf8:	f3bf 8f6f 	isb	sy
 800fcfc:	f3bf 8f4f 	dsb	sy
 800fd00:	60fb      	str	r3, [r7, #12]
}
 800fd02:	bf00      	nop
 800fd04:	bf00      	nop
 800fd06:	e7fd      	b.n	800fd04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd08:	4b3e      	ldr	r3, [pc, #248]	@ (800fe04 <xPortStartScheduler+0x124>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	4a3f      	ldr	r2, [pc, #252]	@ (800fe0c <xPortStartScheduler+0x12c>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d10b      	bne.n	800fd2a <xPortStartScheduler+0x4a>
	__asm volatile
 800fd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd16:	f383 8811 	msr	BASEPRI, r3
 800fd1a:	f3bf 8f6f 	isb	sy
 800fd1e:	f3bf 8f4f 	dsb	sy
 800fd22:	613b      	str	r3, [r7, #16]
}
 800fd24:	bf00      	nop
 800fd26:	bf00      	nop
 800fd28:	e7fd      	b.n	800fd26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fd2a:	4b39      	ldr	r3, [pc, #228]	@ (800fe10 <xPortStartScheduler+0x130>)
 800fd2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	22ff      	movs	r2, #255	@ 0xff
 800fd3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd44:	78fb      	ldrb	r3, [r7, #3]
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fd4c:	b2da      	uxtb	r2, r3
 800fd4e:	4b31      	ldr	r3, [pc, #196]	@ (800fe14 <xPortStartScheduler+0x134>)
 800fd50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fd52:	4b31      	ldr	r3, [pc, #196]	@ (800fe18 <xPortStartScheduler+0x138>)
 800fd54:	2207      	movs	r2, #7
 800fd56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd58:	e009      	b.n	800fd6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fd5a:	4b2f      	ldr	r3, [pc, #188]	@ (800fe18 <xPortStartScheduler+0x138>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3b01      	subs	r3, #1
 800fd60:	4a2d      	ldr	r2, [pc, #180]	@ (800fe18 <xPortStartScheduler+0x138>)
 800fd62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fd64:	78fb      	ldrb	r3, [r7, #3]
 800fd66:	b2db      	uxtb	r3, r3
 800fd68:	005b      	lsls	r3, r3, #1
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd6e:	78fb      	ldrb	r3, [r7, #3]
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd76:	2b80      	cmp	r3, #128	@ 0x80
 800fd78:	d0ef      	beq.n	800fd5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fd7a:	4b27      	ldr	r3, [pc, #156]	@ (800fe18 <xPortStartScheduler+0x138>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f1c3 0307 	rsb	r3, r3, #7
 800fd82:	2b04      	cmp	r3, #4
 800fd84:	d00b      	beq.n	800fd9e <xPortStartScheduler+0xbe>
	__asm volatile
 800fd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd8a:	f383 8811 	msr	BASEPRI, r3
 800fd8e:	f3bf 8f6f 	isb	sy
 800fd92:	f3bf 8f4f 	dsb	sy
 800fd96:	60bb      	str	r3, [r7, #8]
}
 800fd98:	bf00      	nop
 800fd9a:	bf00      	nop
 800fd9c:	e7fd      	b.n	800fd9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fd9e:	4b1e      	ldr	r3, [pc, #120]	@ (800fe18 <xPortStartScheduler+0x138>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	021b      	lsls	r3, r3, #8
 800fda4:	4a1c      	ldr	r2, [pc, #112]	@ (800fe18 <xPortStartScheduler+0x138>)
 800fda6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fda8:	4b1b      	ldr	r3, [pc, #108]	@ (800fe18 <xPortStartScheduler+0x138>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fdb0:	4a19      	ldr	r2, [pc, #100]	@ (800fe18 <xPortStartScheduler+0x138>)
 800fdb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fdbc:	4b17      	ldr	r3, [pc, #92]	@ (800fe1c <xPortStartScheduler+0x13c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a16      	ldr	r2, [pc, #88]	@ (800fe1c <xPortStartScheduler+0x13c>)
 800fdc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fdc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fdc8:	4b14      	ldr	r3, [pc, #80]	@ (800fe1c <xPortStartScheduler+0x13c>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4a13      	ldr	r2, [pc, #76]	@ (800fe1c <xPortStartScheduler+0x13c>)
 800fdce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fdd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fdd4:	f000 f8da 	bl	800ff8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fdd8:	4b11      	ldr	r3, [pc, #68]	@ (800fe20 <xPortStartScheduler+0x140>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fdde:	f000 f8f9 	bl	800ffd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fde2:	4b10      	ldr	r3, [pc, #64]	@ (800fe24 <xPortStartScheduler+0x144>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	4a0f      	ldr	r2, [pc, #60]	@ (800fe24 <xPortStartScheduler+0x144>)
 800fde8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fdec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fdee:	f7ff ff63 	bl	800fcb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fdf2:	f7fe fe3f 	bl	800ea74 <vTaskSwitchContext>
	prvTaskExitError();
 800fdf6:	f7ff ff1d 	bl	800fc34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3718      	adds	r7, #24
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	e000ed00 	.word	0xe000ed00
 800fe08:	410fc271 	.word	0x410fc271
 800fe0c:	410fc270 	.word	0x410fc270
 800fe10:	e000e400 	.word	0xe000e400
 800fe14:	24006840 	.word	0x24006840
 800fe18:	24006844 	.word	0x24006844
 800fe1c:	e000ed20 	.word	0xe000ed20
 800fe20:	240049e0 	.word	0x240049e0
 800fe24:	e000ef34 	.word	0xe000ef34

0800fe28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe32:	f383 8811 	msr	BASEPRI, r3
 800fe36:	f3bf 8f6f 	isb	sy
 800fe3a:	f3bf 8f4f 	dsb	sy
 800fe3e:	607b      	str	r3, [r7, #4]
}
 800fe40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fe42:	4b10      	ldr	r3, [pc, #64]	@ (800fe84 <vPortEnterCritical+0x5c>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	3301      	adds	r3, #1
 800fe48:	4a0e      	ldr	r2, [pc, #56]	@ (800fe84 <vPortEnterCritical+0x5c>)
 800fe4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fe4c:	4b0d      	ldr	r3, [pc, #52]	@ (800fe84 <vPortEnterCritical+0x5c>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d110      	bne.n	800fe76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fe54:	4b0c      	ldr	r3, [pc, #48]	@ (800fe88 <vPortEnterCritical+0x60>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00b      	beq.n	800fe76 <vPortEnterCritical+0x4e>
	__asm volatile
 800fe5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	603b      	str	r3, [r7, #0]
}
 800fe70:	bf00      	nop
 800fe72:	bf00      	nop
 800fe74:	e7fd      	b.n	800fe72 <vPortEnterCritical+0x4a>
	}
}
 800fe76:	bf00      	nop
 800fe78:	370c      	adds	r7, #12
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop
 800fe84:	240049e0 	.word	0x240049e0
 800fe88:	e000ed04 	.word	0xe000ed04

0800fe8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fe92:	4b12      	ldr	r3, [pc, #72]	@ (800fedc <vPortExitCritical+0x50>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d10b      	bne.n	800feb2 <vPortExitCritical+0x26>
	__asm volatile
 800fe9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe9e:	f383 8811 	msr	BASEPRI, r3
 800fea2:	f3bf 8f6f 	isb	sy
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	607b      	str	r3, [r7, #4]
}
 800feac:	bf00      	nop
 800feae:	bf00      	nop
 800feb0:	e7fd      	b.n	800feae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800feb2:	4b0a      	ldr	r3, [pc, #40]	@ (800fedc <vPortExitCritical+0x50>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	3b01      	subs	r3, #1
 800feb8:	4a08      	ldr	r2, [pc, #32]	@ (800fedc <vPortExitCritical+0x50>)
 800feba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800febc:	4b07      	ldr	r3, [pc, #28]	@ (800fedc <vPortExitCritical+0x50>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d105      	bne.n	800fed0 <vPortExitCritical+0x44>
 800fec4:	2300      	movs	r3, #0
 800fec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	f383 8811 	msr	BASEPRI, r3
}
 800fece:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fed0:	bf00      	nop
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr
 800fedc:	240049e0 	.word	0x240049e0

0800fee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fee0:	f3ef 8009 	mrs	r0, PSP
 800fee4:	f3bf 8f6f 	isb	sy
 800fee8:	4b15      	ldr	r3, [pc, #84]	@ (800ff40 <pxCurrentTCBConst>)
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	f01e 0f10 	tst.w	lr, #16
 800fef0:	bf08      	it	eq
 800fef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fefa:	6010      	str	r0, [r2, #0]
 800fefc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ff00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ff04:	f380 8811 	msr	BASEPRI, r0
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	f3bf 8f6f 	isb	sy
 800ff10:	f7fe fdb0 	bl	800ea74 <vTaskSwitchContext>
 800ff14:	f04f 0000 	mov.w	r0, #0
 800ff18:	f380 8811 	msr	BASEPRI, r0
 800ff1c:	bc09      	pop	{r0, r3}
 800ff1e:	6819      	ldr	r1, [r3, #0]
 800ff20:	6808      	ldr	r0, [r1, #0]
 800ff22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff26:	f01e 0f10 	tst.w	lr, #16
 800ff2a:	bf08      	it	eq
 800ff2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ff30:	f380 8809 	msr	PSP, r0
 800ff34:	f3bf 8f6f 	isb	sy
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	f3af 8000 	nop.w

0800ff40 <pxCurrentTCBConst>:
 800ff40:	24006214 	.word	0x24006214
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ff44:	bf00      	nop
 800ff46:	bf00      	nop

0800ff48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	607b      	str	r3, [r7, #4]
}
 800ff60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ff62:	f7fe fccd 	bl	800e900 <xTaskIncrementTick>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d003      	beq.n	800ff74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ff6c:	4b06      	ldr	r3, [pc, #24]	@ (800ff88 <xPortSysTickHandler+0x40>)
 800ff6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff72:	601a      	str	r2, [r3, #0]
 800ff74:	2300      	movs	r3, #0
 800ff76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	f383 8811 	msr	BASEPRI, r3
}
 800ff7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ff80:	bf00      	nop
 800ff82:	3708      	adds	r7, #8
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	e000ed04 	.word	0xe000ed04

0800ff8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ff90:	4b0b      	ldr	r3, [pc, #44]	@ (800ffc0 <vPortSetupTimerInterrupt+0x34>)
 800ff92:	2200      	movs	r2, #0
 800ff94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ff96:	4b0b      	ldr	r3, [pc, #44]	@ (800ffc4 <vPortSetupTimerInterrupt+0x38>)
 800ff98:	2200      	movs	r2, #0
 800ff9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ff9c:	4b0a      	ldr	r3, [pc, #40]	@ (800ffc8 <vPortSetupTimerInterrupt+0x3c>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4a0a      	ldr	r2, [pc, #40]	@ (800ffcc <vPortSetupTimerInterrupt+0x40>)
 800ffa2:	fba2 2303 	umull	r2, r3, r2, r3
 800ffa6:	099b      	lsrs	r3, r3, #6
 800ffa8:	4a09      	ldr	r2, [pc, #36]	@ (800ffd0 <vPortSetupTimerInterrupt+0x44>)
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ffae:	4b04      	ldr	r3, [pc, #16]	@ (800ffc0 <vPortSetupTimerInterrupt+0x34>)
 800ffb0:	2207      	movs	r2, #7
 800ffb2:	601a      	str	r2, [r3, #0]
}
 800ffb4:	bf00      	nop
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop
 800ffc0:	e000e010 	.word	0xe000e010
 800ffc4:	e000e018 	.word	0xe000e018
 800ffc8:	240049bc 	.word	0x240049bc
 800ffcc:	10624dd3 	.word	0x10624dd3
 800ffd0:	e000e014 	.word	0xe000e014

0800ffd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ffd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ffe4 <vPortEnableVFP+0x10>
 800ffd8:	6801      	ldr	r1, [r0, #0]
 800ffda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ffde:	6001      	str	r1, [r0, #0]
 800ffe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ffe2:	bf00      	nop
 800ffe4:	e000ed88 	.word	0xe000ed88

0800ffe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ffee:	f3ef 8305 	mrs	r3, IPSR
 800fff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2b0f      	cmp	r3, #15
 800fff8:	d915      	bls.n	8010026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fffa:	4a18      	ldr	r2, [pc, #96]	@ (801005c <vPortValidateInterruptPriority+0x74>)
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	4413      	add	r3, r2
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010004:	4b16      	ldr	r3, [pc, #88]	@ (8010060 <vPortValidateInterruptPriority+0x78>)
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	7afa      	ldrb	r2, [r7, #11]
 801000a:	429a      	cmp	r2, r3
 801000c:	d20b      	bcs.n	8010026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	607b      	str	r3, [r7, #4]
}
 8010020:	bf00      	nop
 8010022:	bf00      	nop
 8010024:	e7fd      	b.n	8010022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010026:	4b0f      	ldr	r3, [pc, #60]	@ (8010064 <vPortValidateInterruptPriority+0x7c>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801002e:	4b0e      	ldr	r3, [pc, #56]	@ (8010068 <vPortValidateInterruptPriority+0x80>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	429a      	cmp	r2, r3
 8010034:	d90b      	bls.n	801004e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801003a:	f383 8811 	msr	BASEPRI, r3
 801003e:	f3bf 8f6f 	isb	sy
 8010042:	f3bf 8f4f 	dsb	sy
 8010046:	603b      	str	r3, [r7, #0]
}
 8010048:	bf00      	nop
 801004a:	bf00      	nop
 801004c:	e7fd      	b.n	801004a <vPortValidateInterruptPriority+0x62>
	}
 801004e:	bf00      	nop
 8010050:	3714      	adds	r7, #20
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop
 801005c:	e000e3f0 	.word	0xe000e3f0
 8010060:	24006840 	.word	0x24006840
 8010064:	e000ed0c 	.word	0xe000ed0c
 8010068:	24006844 	.word	0x24006844

0801006c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b08a      	sub	sp, #40	@ 0x28
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010074:	2300      	movs	r3, #0
 8010076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010078:	f7fe fb74 	bl	800e764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801007c:	4b5c      	ldr	r3, [pc, #368]	@ (80101f0 <pvPortMalloc+0x184>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d101      	bne.n	8010088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010084:	f000 f924 	bl	80102d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010088:	4b5a      	ldr	r3, [pc, #360]	@ (80101f4 <pvPortMalloc+0x188>)
 801008a:	681a      	ldr	r2, [r3, #0]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4013      	ands	r3, r2
 8010090:	2b00      	cmp	r3, #0
 8010092:	f040 8095 	bne.w	80101c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d01e      	beq.n	80100da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801009c:	2208      	movs	r2, #8
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4413      	add	r3, r2
 80100a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f003 0307 	and.w	r3, r3, #7
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d015      	beq.n	80100da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f023 0307 	bic.w	r3, r3, #7
 80100b4:	3308      	adds	r3, #8
 80100b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f003 0307 	and.w	r3, r3, #7
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d00b      	beq.n	80100da <pvPortMalloc+0x6e>
	__asm volatile
 80100c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c6:	f383 8811 	msr	BASEPRI, r3
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	617b      	str	r3, [r7, #20]
}
 80100d4:	bf00      	nop
 80100d6:	bf00      	nop
 80100d8:	e7fd      	b.n	80100d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d06f      	beq.n	80101c0 <pvPortMalloc+0x154>
 80100e0:	4b45      	ldr	r3, [pc, #276]	@ (80101f8 <pvPortMalloc+0x18c>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d86a      	bhi.n	80101c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80100ea:	4b44      	ldr	r3, [pc, #272]	@ (80101fc <pvPortMalloc+0x190>)
 80100ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80100ee:	4b43      	ldr	r3, [pc, #268]	@ (80101fc <pvPortMalloc+0x190>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100f4:	e004      	b.n	8010100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80100f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80100fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	429a      	cmp	r2, r3
 8010108:	d903      	bls.n	8010112 <pvPortMalloc+0xa6>
 801010a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1f1      	bne.n	80100f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010112:	4b37      	ldr	r3, [pc, #220]	@ (80101f0 <pvPortMalloc+0x184>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010118:	429a      	cmp	r2, r3
 801011a:	d051      	beq.n	80101c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801011c:	6a3b      	ldr	r3, [r7, #32]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	2208      	movs	r2, #8
 8010122:	4413      	add	r3, r2
 8010124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010128:	681a      	ldr	r2, [r3, #0]
 801012a:	6a3b      	ldr	r3, [r7, #32]
 801012c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801012e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010130:	685a      	ldr	r2, [r3, #4]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	1ad2      	subs	r2, r2, r3
 8010136:	2308      	movs	r3, #8
 8010138:	005b      	lsls	r3, r3, #1
 801013a:	429a      	cmp	r2, r3
 801013c:	d920      	bls.n	8010180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801013e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4413      	add	r3, r2
 8010144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	f003 0307 	and.w	r3, r3, #7
 801014c:	2b00      	cmp	r3, #0
 801014e:	d00b      	beq.n	8010168 <pvPortMalloc+0xfc>
	__asm volatile
 8010150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	613b      	str	r3, [r7, #16]
}
 8010162:	bf00      	nop
 8010164:	bf00      	nop
 8010166:	e7fd      	b.n	8010164 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016a:	685a      	ldr	r2, [r3, #4]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	1ad2      	subs	r2, r2, r3
 8010170:	69bb      	ldr	r3, [r7, #24]
 8010172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801017a:	69b8      	ldr	r0, [r7, #24]
 801017c:	f000 f90a 	bl	8010394 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010180:	4b1d      	ldr	r3, [pc, #116]	@ (80101f8 <pvPortMalloc+0x18c>)
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	1ad3      	subs	r3, r2, r3
 801018a:	4a1b      	ldr	r2, [pc, #108]	@ (80101f8 <pvPortMalloc+0x18c>)
 801018c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801018e:	4b1a      	ldr	r3, [pc, #104]	@ (80101f8 <pvPortMalloc+0x18c>)
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	4b1b      	ldr	r3, [pc, #108]	@ (8010200 <pvPortMalloc+0x194>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	429a      	cmp	r2, r3
 8010198:	d203      	bcs.n	80101a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801019a:	4b17      	ldr	r3, [pc, #92]	@ (80101f8 <pvPortMalloc+0x18c>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4a18      	ldr	r2, [pc, #96]	@ (8010200 <pvPortMalloc+0x194>)
 80101a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80101a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a4:	685a      	ldr	r2, [r3, #4]
 80101a6:	4b13      	ldr	r3, [pc, #76]	@ (80101f4 <pvPortMalloc+0x188>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	431a      	orrs	r2, r3
 80101ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80101b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b2:	2200      	movs	r2, #0
 80101b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80101b6:	4b13      	ldr	r3, [pc, #76]	@ (8010204 <pvPortMalloc+0x198>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3301      	adds	r3, #1
 80101bc:	4a11      	ldr	r2, [pc, #68]	@ (8010204 <pvPortMalloc+0x198>)
 80101be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80101c0:	f7fe fade 	bl	800e780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	f003 0307 	and.w	r3, r3, #7
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00b      	beq.n	80101e6 <pvPortMalloc+0x17a>
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	60fb      	str	r3, [r7, #12]
}
 80101e0:	bf00      	nop
 80101e2:	bf00      	nop
 80101e4:	e7fd      	b.n	80101e2 <pvPortMalloc+0x176>
	return pvReturn;
 80101e6:	69fb      	ldr	r3, [r7, #28]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3728      	adds	r7, #40	@ 0x28
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	2400e050 	.word	0x2400e050
 80101f4:	2400e064 	.word	0x2400e064
 80101f8:	2400e054 	.word	0x2400e054
 80101fc:	2400e048 	.word	0x2400e048
 8010200:	2400e058 	.word	0x2400e058
 8010204:	2400e05c 	.word	0x2400e05c

08010208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b086      	sub	sp, #24
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d04f      	beq.n	80102ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801021a:	2308      	movs	r3, #8
 801021c:	425b      	negs	r3, r3
 801021e:	697a      	ldr	r2, [r7, #20]
 8010220:	4413      	add	r3, r2
 8010222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	685a      	ldr	r2, [r3, #4]
 801022c:	4b25      	ldr	r3, [pc, #148]	@ (80102c4 <vPortFree+0xbc>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	4013      	ands	r3, r2
 8010232:	2b00      	cmp	r3, #0
 8010234:	d10b      	bne.n	801024e <vPortFree+0x46>
	__asm volatile
 8010236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801023a:	f383 8811 	msr	BASEPRI, r3
 801023e:	f3bf 8f6f 	isb	sy
 8010242:	f3bf 8f4f 	dsb	sy
 8010246:	60fb      	str	r3, [r7, #12]
}
 8010248:	bf00      	nop
 801024a:	bf00      	nop
 801024c:	e7fd      	b.n	801024a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d00b      	beq.n	801026e <vPortFree+0x66>
	__asm volatile
 8010256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801025a:	f383 8811 	msr	BASEPRI, r3
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f3bf 8f4f 	dsb	sy
 8010266:	60bb      	str	r3, [r7, #8]
}
 8010268:	bf00      	nop
 801026a:	bf00      	nop
 801026c:	e7fd      	b.n	801026a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	685a      	ldr	r2, [r3, #4]
 8010272:	4b14      	ldr	r3, [pc, #80]	@ (80102c4 <vPortFree+0xbc>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4013      	ands	r3, r2
 8010278:	2b00      	cmp	r3, #0
 801027a:	d01e      	beq.n	80102ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d11a      	bne.n	80102ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	685a      	ldr	r2, [r3, #4]
 8010288:	4b0e      	ldr	r3, [pc, #56]	@ (80102c4 <vPortFree+0xbc>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	43db      	mvns	r3, r3
 801028e:	401a      	ands	r2, r3
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010294:	f7fe fa66 	bl	800e764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	685a      	ldr	r2, [r3, #4]
 801029c:	4b0a      	ldr	r3, [pc, #40]	@ (80102c8 <vPortFree+0xc0>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	4413      	add	r3, r2
 80102a2:	4a09      	ldr	r2, [pc, #36]	@ (80102c8 <vPortFree+0xc0>)
 80102a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80102a6:	6938      	ldr	r0, [r7, #16]
 80102a8:	f000 f874 	bl	8010394 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80102ac:	4b07      	ldr	r3, [pc, #28]	@ (80102cc <vPortFree+0xc4>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	3301      	adds	r3, #1
 80102b2:	4a06      	ldr	r2, [pc, #24]	@ (80102cc <vPortFree+0xc4>)
 80102b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80102b6:	f7fe fa63 	bl	800e780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80102ba:	bf00      	nop
 80102bc:	3718      	adds	r7, #24
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	2400e064 	.word	0x2400e064
 80102c8:	2400e054 	.word	0x2400e054
 80102cc:	2400e060 	.word	0x2400e060

080102d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80102d0:	b480      	push	{r7}
 80102d2:	b085      	sub	sp, #20
 80102d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80102d6:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80102da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80102dc:	4b27      	ldr	r3, [pc, #156]	@ (801037c <prvHeapInit+0xac>)
 80102de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f003 0307 	and.w	r3, r3, #7
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d00c      	beq.n	8010304 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	3307      	adds	r3, #7
 80102ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f023 0307 	bic.w	r3, r3, #7
 80102f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	1ad3      	subs	r3, r2, r3
 80102fe:	4a1f      	ldr	r2, [pc, #124]	@ (801037c <prvHeapInit+0xac>)
 8010300:	4413      	add	r3, r2
 8010302:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010308:	4a1d      	ldr	r2, [pc, #116]	@ (8010380 <prvHeapInit+0xb0>)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801030e:	4b1c      	ldr	r3, [pc, #112]	@ (8010380 <prvHeapInit+0xb0>)
 8010310:	2200      	movs	r2, #0
 8010312:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	68ba      	ldr	r2, [r7, #8]
 8010318:	4413      	add	r3, r2
 801031a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801031c:	2208      	movs	r2, #8
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	1a9b      	subs	r3, r3, r2
 8010322:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f023 0307 	bic.w	r3, r3, #7
 801032a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	4a15      	ldr	r2, [pc, #84]	@ (8010384 <prvHeapInit+0xb4>)
 8010330:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010332:	4b14      	ldr	r3, [pc, #80]	@ (8010384 <prvHeapInit+0xb4>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2200      	movs	r2, #0
 8010338:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801033a:	4b12      	ldr	r3, [pc, #72]	@ (8010384 <prvHeapInit+0xb4>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2200      	movs	r2, #0
 8010340:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	1ad2      	subs	r2, r2, r3
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010350:	4b0c      	ldr	r3, [pc, #48]	@ (8010384 <prvHeapInit+0xb4>)
 8010352:	681a      	ldr	r2, [r3, #0]
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	4a0a      	ldr	r2, [pc, #40]	@ (8010388 <prvHeapInit+0xb8>)
 801035e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	4a09      	ldr	r2, [pc, #36]	@ (801038c <prvHeapInit+0xbc>)
 8010366:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010368:	4b09      	ldr	r3, [pc, #36]	@ (8010390 <prvHeapInit+0xc0>)
 801036a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801036e:	601a      	str	r2, [r3, #0]
}
 8010370:	bf00      	nop
 8010372:	3714      	adds	r7, #20
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr
 801037c:	24006848 	.word	0x24006848
 8010380:	2400e048 	.word	0x2400e048
 8010384:	2400e050 	.word	0x2400e050
 8010388:	2400e058 	.word	0x2400e058
 801038c:	2400e054 	.word	0x2400e054
 8010390:	2400e064 	.word	0x2400e064

08010394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801039c:	4b28      	ldr	r3, [pc, #160]	@ (8010440 <prvInsertBlockIntoFreeList+0xac>)
 801039e:	60fb      	str	r3, [r7, #12]
 80103a0:	e002      	b.n	80103a8 <prvInsertBlockIntoFreeList+0x14>
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d8f7      	bhi.n	80103a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	68ba      	ldr	r2, [r7, #8]
 80103bc:	4413      	add	r3, r2
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d108      	bne.n	80103d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	685a      	ldr	r2, [r3, #4]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	441a      	add	r2, r3
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	68ba      	ldr	r2, [r7, #8]
 80103e0:	441a      	add	r2, r3
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d118      	bne.n	801041c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	4b15      	ldr	r3, [pc, #84]	@ (8010444 <prvInsertBlockIntoFreeList+0xb0>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d00d      	beq.n	8010412 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	685a      	ldr	r2, [r3, #4]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	441a      	add	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	601a      	str	r2, [r3, #0]
 8010410:	e008      	b.n	8010424 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010412:	4b0c      	ldr	r3, [pc, #48]	@ (8010444 <prvInsertBlockIntoFreeList+0xb0>)
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	601a      	str	r2, [r3, #0]
 801041a:	e003      	b.n	8010424 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681a      	ldr	r2, [r3, #0]
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010424:	68fa      	ldr	r2, [r7, #12]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	429a      	cmp	r2, r3
 801042a:	d002      	beq.n	8010432 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010432:	bf00      	nop
 8010434:	3714      	adds	r7, #20
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr
 801043e:	bf00      	nop
 8010440:	2400e048 	.word	0x2400e048
 8010444:	2400e050 	.word	0x2400e050

08010448 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010452:	f007 fc83 	bl	8017d5c <sys_timeouts_sleeptime>
 8010456:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801045e:	d10b      	bne.n	8010478 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010460:	4813      	ldr	r0, [pc, #76]	@ (80104b0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010462:	f00a fdcc 	bl	801affe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010466:	2200      	movs	r2, #0
 8010468:	6839      	ldr	r1, [r7, #0]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f00a fd54 	bl	801af18 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010470:	480f      	ldr	r0, [pc, #60]	@ (80104b0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010472:	f00a fdb5 	bl	801afe0 <sys_mutex_lock>
    return;
 8010476:	e018      	b.n	80104aa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d102      	bne.n	8010484 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801047e:	f007 fc33 	bl	8017ce8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010482:	e7e6      	b.n	8010452 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010484:	480a      	ldr	r0, [pc, #40]	@ (80104b0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010486:	f00a fdba 	bl	801affe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	6839      	ldr	r1, [r7, #0]
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f00a fd42 	bl	801af18 <sys_arch_mbox_fetch>
 8010494:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010496:	4806      	ldr	r0, [pc, #24]	@ (80104b0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010498:	f00a fda2 	bl	801afe0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a2:	d102      	bne.n	80104aa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80104a4:	f007 fc20 	bl	8017ce8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80104a8:	e7d3      	b.n	8010452 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80104aa:	3710      	adds	r7, #16
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	2400e074 	.word	0x2400e074

080104b4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80104bc:	4810      	ldr	r0, [pc, #64]	@ (8010500 <tcpip_thread+0x4c>)
 80104be:	f00a fd8f 	bl	801afe0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80104c2:	4b10      	ldr	r3, [pc, #64]	@ (8010504 <tcpip_thread+0x50>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d005      	beq.n	80104d6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80104ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010504 <tcpip_thread+0x50>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a0e      	ldr	r2, [pc, #56]	@ (8010508 <tcpip_thread+0x54>)
 80104d0:	6812      	ldr	r2, [r2, #0]
 80104d2:	4610      	mov	r0, r2
 80104d4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80104d6:	f107 030c 	add.w	r3, r7, #12
 80104da:	4619      	mov	r1, r3
 80104dc:	480b      	ldr	r0, [pc, #44]	@ (801050c <tcpip_thread+0x58>)
 80104de:	f7ff ffb3 	bl	8010448 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d106      	bne.n	80104f6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80104e8:	4b09      	ldr	r3, [pc, #36]	@ (8010510 <tcpip_thread+0x5c>)
 80104ea:	2291      	movs	r2, #145	@ 0x91
 80104ec:	4909      	ldr	r1, [pc, #36]	@ (8010514 <tcpip_thread+0x60>)
 80104ee:	480a      	ldr	r0, [pc, #40]	@ (8010518 <tcpip_thread+0x64>)
 80104f0:	f00a fed0 	bl	801b294 <iprintf>
      continue;
 80104f4:	e003      	b.n	80104fe <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 f80f 	bl	801051c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80104fe:	e7ea      	b.n	80104d6 <tcpip_thread+0x22>
 8010500:	2400e074 	.word	0x2400e074
 8010504:	2400e068 	.word	0x2400e068
 8010508:	2400e06c 	.word	0x2400e06c
 801050c:	2400e070 	.word	0x2400e070
 8010510:	0801c210 	.word	0x0801c210
 8010514:	0801c240 	.word	0x0801c240
 8010518:	0801c260 	.word	0x0801c260

0801051c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	2b02      	cmp	r3, #2
 801052a:	d026      	beq.n	801057a <tcpip_thread_handle_msg+0x5e>
 801052c:	2b02      	cmp	r3, #2
 801052e:	dc2b      	bgt.n	8010588 <tcpip_thread_handle_msg+0x6c>
 8010530:	2b00      	cmp	r3, #0
 8010532:	d002      	beq.n	801053a <tcpip_thread_handle_msg+0x1e>
 8010534:	2b01      	cmp	r3, #1
 8010536:	d015      	beq.n	8010564 <tcpip_thread_handle_msg+0x48>
 8010538:	e026      	b.n	8010588 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	68db      	ldr	r3, [r3, #12]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	6850      	ldr	r0, [r2, #4]
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	6892      	ldr	r2, [r2, #8]
 8010546:	4611      	mov	r1, r2
 8010548:	4798      	blx	r3
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d004      	beq.n	801055a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	4618      	mov	r0, r3
 8010556:	f001 fdcb 	bl	80120f0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801055a:	6879      	ldr	r1, [r7, #4]
 801055c:	200a      	movs	r0, #10
 801055e:	f000 ff1b 	bl	8011398 <memp_free>
      break;
 8010562:	e018      	b.n	8010596 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	6892      	ldr	r2, [r2, #8]
 801056c:	4610      	mov	r0, r2
 801056e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010570:	6879      	ldr	r1, [r7, #4]
 8010572:	2009      	movs	r0, #9
 8010574:	f000 ff10 	bl	8011398 <memp_free>
      break;
 8010578:	e00d      	b.n	8010596 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	6892      	ldr	r2, [r2, #8]
 8010582:	4610      	mov	r0, r2
 8010584:	4798      	blx	r3
      break;
 8010586:	e006      	b.n	8010596 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010588:	4b05      	ldr	r3, [pc, #20]	@ (80105a0 <tcpip_thread_handle_msg+0x84>)
 801058a:	22cf      	movs	r2, #207	@ 0xcf
 801058c:	4905      	ldr	r1, [pc, #20]	@ (80105a4 <tcpip_thread_handle_msg+0x88>)
 801058e:	4806      	ldr	r0, [pc, #24]	@ (80105a8 <tcpip_thread_handle_msg+0x8c>)
 8010590:	f00a fe80 	bl	801b294 <iprintf>
      break;
 8010594:	bf00      	nop
  }
}
 8010596:	bf00      	nop
 8010598:	3708      	adds	r7, #8
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	0801c210 	.word	0x0801c210
 80105a4:	0801c240 	.word	0x0801c240
 80105a8:	0801c260 	.word	0x0801c260

080105ac <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b086      	sub	sp, #24
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80105b8:	481a      	ldr	r0, [pc, #104]	@ (8010624 <tcpip_inpkt+0x78>)
 80105ba:	f00a fcde 	bl	801af7a <sys_mbox_valid>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d105      	bne.n	80105d0 <tcpip_inpkt+0x24>
 80105c4:	4b18      	ldr	r3, [pc, #96]	@ (8010628 <tcpip_inpkt+0x7c>)
 80105c6:	22fc      	movs	r2, #252	@ 0xfc
 80105c8:	4918      	ldr	r1, [pc, #96]	@ (801062c <tcpip_inpkt+0x80>)
 80105ca:	4819      	ldr	r0, [pc, #100]	@ (8010630 <tcpip_inpkt+0x84>)
 80105cc:	f00a fe62 	bl	801b294 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80105d0:	200a      	movs	r0, #10
 80105d2:	f000 fe6b 	bl	80112ac <memp_malloc>
 80105d6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d102      	bne.n	80105e4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80105de:	f04f 33ff 	mov.w	r3, #4294967295
 80105e2:	e01a      	b.n	801061a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	2200      	movs	r2, #0
 80105e8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	68fa      	ldr	r2, [r7, #12]
 80105ee:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	68ba      	ldr	r2, [r7, #8]
 80105f4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80105fc:	6979      	ldr	r1, [r7, #20]
 80105fe:	4809      	ldr	r0, [pc, #36]	@ (8010624 <tcpip_inpkt+0x78>)
 8010600:	f00a fc70 	bl	801aee4 <sys_mbox_trypost>
 8010604:	4603      	mov	r3, r0
 8010606:	2b00      	cmp	r3, #0
 8010608:	d006      	beq.n	8010618 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801060a:	6979      	ldr	r1, [r7, #20]
 801060c:	200a      	movs	r0, #10
 801060e:	f000 fec3 	bl	8011398 <memp_free>
    return ERR_MEM;
 8010612:	f04f 33ff 	mov.w	r3, #4294967295
 8010616:	e000      	b.n	801061a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010618:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801061a:	4618      	mov	r0, r3
 801061c:	3718      	adds	r7, #24
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	2400e070 	.word	0x2400e070
 8010628:	0801c210 	.word	0x0801c210
 801062c:	0801c288 	.word	0x0801c288
 8010630:	0801c260 	.word	0x0801c260

08010634 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010644:	f003 0318 	and.w	r3, r3, #24
 8010648:	2b00      	cmp	r3, #0
 801064a:	d006      	beq.n	801065a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801064c:	4a08      	ldr	r2, [pc, #32]	@ (8010670 <tcpip_input+0x3c>)
 801064e:	6839      	ldr	r1, [r7, #0]
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7ff ffab 	bl	80105ac <tcpip_inpkt>
 8010656:	4603      	mov	r3, r0
 8010658:	e005      	b.n	8010666 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801065a:	4a06      	ldr	r2, [pc, #24]	@ (8010674 <tcpip_input+0x40>)
 801065c:	6839      	ldr	r1, [r7, #0]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f7ff ffa4 	bl	80105ac <tcpip_inpkt>
 8010664:	4603      	mov	r3, r0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	0801ad05 	.word	0x0801ad05
 8010674:	08019ad5 	.word	0x08019ad5

08010678 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010682:	4819      	ldr	r0, [pc, #100]	@ (80106e8 <tcpip_try_callback+0x70>)
 8010684:	f00a fc79 	bl	801af7a <sys_mbox_valid>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d106      	bne.n	801069c <tcpip_try_callback+0x24>
 801068e:	4b17      	ldr	r3, [pc, #92]	@ (80106ec <tcpip_try_callback+0x74>)
 8010690:	f240 125d 	movw	r2, #349	@ 0x15d
 8010694:	4916      	ldr	r1, [pc, #88]	@ (80106f0 <tcpip_try_callback+0x78>)
 8010696:	4817      	ldr	r0, [pc, #92]	@ (80106f4 <tcpip_try_callback+0x7c>)
 8010698:	f00a fdfc 	bl	801b294 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801069c:	2009      	movs	r0, #9
 801069e:	f000 fe05 	bl	80112ac <memp_malloc>
 80106a2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d102      	bne.n	80106b0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80106aa:	f04f 33ff 	mov.w	r3, #4294967295
 80106ae:	e017      	b.n	80106e0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2201      	movs	r2, #1
 80106b4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80106c2:	68f9      	ldr	r1, [r7, #12]
 80106c4:	4808      	ldr	r0, [pc, #32]	@ (80106e8 <tcpip_try_callback+0x70>)
 80106c6:	f00a fc0d 	bl	801aee4 <sys_mbox_trypost>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d006      	beq.n	80106de <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80106d0:	68f9      	ldr	r1, [r7, #12]
 80106d2:	2009      	movs	r0, #9
 80106d4:	f000 fe60 	bl	8011398 <memp_free>
    return ERR_MEM;
 80106d8:	f04f 33ff 	mov.w	r3, #4294967295
 80106dc:	e000      	b.n	80106e0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80106de:	2300      	movs	r3, #0
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3710      	adds	r7, #16
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	2400e070 	.word	0x2400e070
 80106ec:	0801c210 	.word	0x0801c210
 80106f0:	0801c288 	.word	0x0801c288
 80106f4:	0801c260 	.word	0x0801c260

080106f8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af02      	add	r7, sp, #8
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010702:	f000 f92e 	bl	8010962 <lwip_init>

  tcpip_init_done = initfunc;
 8010706:	4a17      	ldr	r2, [pc, #92]	@ (8010764 <tcpip_init+0x6c>)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801070c:	4a16      	ldr	r2, [pc, #88]	@ (8010768 <tcpip_init+0x70>)
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010712:	2106      	movs	r1, #6
 8010714:	4815      	ldr	r0, [pc, #84]	@ (801076c <tcpip_init+0x74>)
 8010716:	f00a fbcb 	bl	801aeb0 <sys_mbox_new>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d006      	beq.n	801072e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010720:	4b13      	ldr	r3, [pc, #76]	@ (8010770 <tcpip_init+0x78>)
 8010722:	f240 2261 	movw	r2, #609	@ 0x261
 8010726:	4913      	ldr	r1, [pc, #76]	@ (8010774 <tcpip_init+0x7c>)
 8010728:	4813      	ldr	r0, [pc, #76]	@ (8010778 <tcpip_init+0x80>)
 801072a:	f00a fdb3 	bl	801b294 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801072e:	4813      	ldr	r0, [pc, #76]	@ (801077c <tcpip_init+0x84>)
 8010730:	f00a fc40 	bl	801afb4 <sys_mutex_new>
 8010734:	4603      	mov	r3, r0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d006      	beq.n	8010748 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801073a:	4b0d      	ldr	r3, [pc, #52]	@ (8010770 <tcpip_init+0x78>)
 801073c:	f240 2265 	movw	r2, #613	@ 0x265
 8010740:	490f      	ldr	r1, [pc, #60]	@ (8010780 <tcpip_init+0x88>)
 8010742:	480d      	ldr	r0, [pc, #52]	@ (8010778 <tcpip_init+0x80>)
 8010744:	f00a fda6 	bl	801b294 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010748:	2318      	movs	r3, #24
 801074a:	9300      	str	r3, [sp, #0]
 801074c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010750:	2200      	movs	r2, #0
 8010752:	490c      	ldr	r1, [pc, #48]	@ (8010784 <tcpip_init+0x8c>)
 8010754:	480c      	ldr	r0, [pc, #48]	@ (8010788 <tcpip_init+0x90>)
 8010756:	f00a fc5f 	bl	801b018 <sys_thread_new>
}
 801075a:	bf00      	nop
 801075c:	3708      	adds	r7, #8
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	2400e068 	.word	0x2400e068
 8010768:	2400e06c 	.word	0x2400e06c
 801076c:	2400e070 	.word	0x2400e070
 8010770:	0801c210 	.word	0x0801c210
 8010774:	0801c298 	.word	0x0801c298
 8010778:	0801c260 	.word	0x0801c260
 801077c:	2400e074 	.word	0x2400e074
 8010780:	0801c2bc 	.word	0x0801c2bc
 8010784:	080104b5 	.word	0x080104b5
 8010788:	0801c2e0 	.word	0x0801c2e0

0801078c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	4603      	mov	r3, r0
 8010794:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801079a:	021b      	lsls	r3, r3, #8
 801079c:	b21a      	sxth	r2, r3
 801079e:	88fb      	ldrh	r3, [r7, #6]
 80107a0:	0a1b      	lsrs	r3, r3, #8
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	b21b      	sxth	r3, r3
 80107a6:	4313      	orrs	r3, r2
 80107a8:	b21b      	sxth	r3, r3
 80107aa:	b29b      	uxth	r3, r3
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	370c      	adds	r7, #12
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr

080107b8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	061a      	lsls	r2, r3, #24
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	021b      	lsls	r3, r3, #8
 80107c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80107cc:	431a      	orrs	r2, r3
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	0a1b      	lsrs	r3, r3, #8
 80107d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80107d6:	431a      	orrs	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	0e1b      	lsrs	r3, r3, #24
 80107dc:	4313      	orrs	r3, r2
}
 80107de:	4618      	mov	r0, r3
 80107e0:	370c      	adds	r7, #12
 80107e2:	46bd      	mov	sp, r7
 80107e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e8:	4770      	bx	lr

080107ea <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80107ea:	b480      	push	{r7}
 80107ec:	b089      	sub	sp, #36	@ 0x24
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
 80107f2:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80107f8:	2300      	movs	r3, #0
 80107fa:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80107fc:	2300      	movs	r3, #0
 80107fe:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	f003 0301 	and.w	r3, r3, #1
 8010806:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00d      	beq.n	801082a <lwip_standard_chksum+0x40>
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	dd0a      	ble.n	801082a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8010814:	69fa      	ldr	r2, [r7, #28]
 8010816:	1c53      	adds	r3, r2, #1
 8010818:	61fb      	str	r3, [r7, #28]
 801081a:	f107 030e 	add.w	r3, r7, #14
 801081e:	3301      	adds	r3, #1
 8010820:	7812      	ldrb	r2, [r2, #0]
 8010822:	701a      	strb	r2, [r3, #0]
    len--;
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	3b01      	subs	r3, #1
 8010828:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801082e:	e00a      	b.n	8010846 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8010830:	69bb      	ldr	r3, [r7, #24]
 8010832:	1c9a      	adds	r2, r3, #2
 8010834:	61ba      	str	r2, [r7, #24]
 8010836:	881b      	ldrh	r3, [r3, #0]
 8010838:	461a      	mov	r2, r3
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	4413      	add	r3, r2
 801083e:	617b      	str	r3, [r7, #20]
    len -= 2;
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	3b02      	subs	r3, #2
 8010844:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	2b01      	cmp	r3, #1
 801084a:	dcf1      	bgt.n	8010830 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	dd04      	ble.n	801085c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010852:	f107 030e 	add.w	r3, r7, #14
 8010856:	69ba      	ldr	r2, [r7, #24]
 8010858:	7812      	ldrb	r2, [r2, #0]
 801085a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801085c:	89fb      	ldrh	r3, [r7, #14]
 801085e:	461a      	mov	r2, r3
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	4413      	add	r3, r2
 8010864:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	0c1a      	lsrs	r2, r3, #16
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	b29b      	uxth	r3, r3
 801086e:	4413      	add	r3, r2
 8010870:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	0c1a      	lsrs	r2, r3, #16
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	b29b      	uxth	r3, r3
 801087a:	4413      	add	r3, r2
 801087c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d007      	beq.n	8010894 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	021b      	lsls	r3, r3, #8
 8010888:	b29a      	uxth	r2, r3
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	0a1b      	lsrs	r3, r3, #8
 801088e:	b2db      	uxtb	r3, r3
 8010890:	4313      	orrs	r3, r2
 8010892:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	b29b      	uxth	r3, r3
}
 8010898:	4618      	mov	r0, r3
 801089a:	3724      	adds	r7, #36	@ 0x24
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80108b0:	887b      	ldrh	r3, [r7, #2]
 80108b2:	4619      	mov	r1, r3
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7ff ff98 	bl	80107ea <lwip_standard_chksum>
 80108ba:	4603      	mov	r3, r0
 80108bc:	43db      	mvns	r3, r3
 80108be:	b29b      	uxth	r3, r3
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b086      	sub	sp, #24
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80108d0:	2300      	movs	r3, #0
 80108d2:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80108d4:	2300      	movs	r3, #0
 80108d6:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	613b      	str	r3, [r7, #16]
 80108dc:	e02b      	b.n	8010936 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	685a      	ldr	r2, [r3, #4]
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	895b      	ldrh	r3, [r3, #10]
 80108e6:	4619      	mov	r1, r3
 80108e8:	4610      	mov	r0, r2
 80108ea:	f7ff ff7e 	bl	80107ea <lwip_standard_chksum>
 80108ee:	4603      	mov	r3, r0
 80108f0:	461a      	mov	r2, r3
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	4413      	add	r3, r2
 80108f6:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	0c1a      	lsrs	r2, r3, #16
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	b29b      	uxth	r3, r3
 8010900:	4413      	add	r3, r2
 8010902:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	895b      	ldrh	r3, [r3, #10]
 8010908:	f003 0301 	and.w	r3, r3, #1
 801090c:	b29b      	uxth	r3, r3
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00e      	beq.n	8010930 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2b00      	cmp	r3, #0
 8010916:	bf0c      	ite	eq
 8010918:	2301      	moveq	r3, #1
 801091a:	2300      	movne	r3, #0
 801091c:	b2db      	uxtb	r3, r3
 801091e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	021b      	lsls	r3, r3, #8
 8010924:	b29a      	uxth	r2, r3
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	0a1b      	lsrs	r3, r3, #8
 801092a:	b2db      	uxtb	r3, r3
 801092c:	4313      	orrs	r3, r2
 801092e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	613b      	str	r3, [r7, #16]
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d1d0      	bne.n	80108de <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d007      	beq.n	8010952 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	021b      	lsls	r3, r3, #8
 8010946:	b29a      	uxth	r2, r3
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	0a1b      	lsrs	r3, r3, #8
 801094c:	b2db      	uxtb	r3, r3
 801094e:	4313      	orrs	r3, r2
 8010950:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	b29b      	uxth	r3, r3
 8010956:	43db      	mvns	r3, r3
 8010958:	b29b      	uxth	r3, r3
}
 801095a:	4618      	mov	r0, r3
 801095c:	3718      	adds	r7, #24
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b082      	sub	sp, #8
 8010966:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010968:	2300      	movs	r3, #0
 801096a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801096c:	f00a fb16 	bl	801af9c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010970:	f000 f8d4 	bl	8010b1c <mem_init>
  memp_init();
 8010974:	f000 fc2c 	bl	80111d0 <memp_init>
  pbuf_init();
  netif_init();
 8010978:	f000 fd38 	bl	80113ec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801097c:	f007 fa26 	bl	8017dcc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010980:	f001 ff4c 	bl	801281c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010984:	f007 f968 	bl	8017c58 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010988:	bf00      	nop
 801098a:	3708      	adds	r7, #8
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	4603      	mov	r3, r0
 8010998:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801099a:	4b05      	ldr	r3, [pc, #20]	@ (80109b0 <ptr_to_mem+0x20>)
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	88fb      	ldrh	r3, [r7, #6]
 80109a0:	4413      	add	r3, r2
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	370c      	adds	r7, #12
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	2400e090 	.word	0x2400e090

080109b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80109bc:	4b05      	ldr	r3, [pc, #20]	@ (80109d4 <mem_to_ptr+0x20>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	b29b      	uxth	r3, r3
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	370c      	adds	r7, #12
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	2400e090 	.word	0x2400e090

080109d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80109d8:	b590      	push	{r4, r7, lr}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80109e0:	4b45      	ldr	r3, [pc, #276]	@ (8010af8 <plug_holes+0x120>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d206      	bcs.n	80109f8 <plug_holes+0x20>
 80109ea:	4b44      	ldr	r3, [pc, #272]	@ (8010afc <plug_holes+0x124>)
 80109ec:	f240 12df 	movw	r2, #479	@ 0x1df
 80109f0:	4943      	ldr	r1, [pc, #268]	@ (8010b00 <plug_holes+0x128>)
 80109f2:	4844      	ldr	r0, [pc, #272]	@ (8010b04 <plug_holes+0x12c>)
 80109f4:	f00a fc4e 	bl	801b294 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80109f8:	4b43      	ldr	r3, [pc, #268]	@ (8010b08 <plug_holes+0x130>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	687a      	ldr	r2, [r7, #4]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d306      	bcc.n	8010a10 <plug_holes+0x38>
 8010a02:	4b3e      	ldr	r3, [pc, #248]	@ (8010afc <plug_holes+0x124>)
 8010a04:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010a08:	4940      	ldr	r1, [pc, #256]	@ (8010b0c <plug_holes+0x134>)
 8010a0a:	483e      	ldr	r0, [pc, #248]	@ (8010b04 <plug_holes+0x12c>)
 8010a0c:	f00a fc42 	bl	801b294 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	791b      	ldrb	r3, [r3, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d006      	beq.n	8010a26 <plug_holes+0x4e>
 8010a18:	4b38      	ldr	r3, [pc, #224]	@ (8010afc <plug_holes+0x124>)
 8010a1a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8010a1e:	493c      	ldr	r1, [pc, #240]	@ (8010b10 <plug_holes+0x138>)
 8010a20:	4838      	ldr	r0, [pc, #224]	@ (8010b04 <plug_holes+0x12c>)
 8010a22:	f00a fc37 	bl	801b294 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	881b      	ldrh	r3, [r3, #0]
 8010a2a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010a2e:	d906      	bls.n	8010a3e <plug_holes+0x66>
 8010a30:	4b32      	ldr	r3, [pc, #200]	@ (8010afc <plug_holes+0x124>)
 8010a32:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010a36:	4937      	ldr	r1, [pc, #220]	@ (8010b14 <plug_holes+0x13c>)
 8010a38:	4832      	ldr	r0, [pc, #200]	@ (8010b04 <plug_holes+0x12c>)
 8010a3a:	f00a fc2b 	bl	801b294 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	881b      	ldrh	r3, [r3, #0]
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7ff ffa4 	bl	8010990 <ptr_to_mem>
 8010a48:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010a4a:	687a      	ldr	r2, [r7, #4]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d024      	beq.n	8010a9c <plug_holes+0xc4>
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	791b      	ldrb	r3, [r3, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d120      	bne.n	8010a9c <plug_holes+0xc4>
 8010a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8010b08 <plug_holes+0x130>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d01b      	beq.n	8010a9c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010a64:	4b2c      	ldr	r3, [pc, #176]	@ (8010b18 <plug_holes+0x140>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	68fa      	ldr	r2, [r7, #12]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d102      	bne.n	8010a74 <plug_holes+0x9c>
      lfree = mem;
 8010a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8010b18 <plug_holes+0x140>)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	881a      	ldrh	r2, [r3, #0]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	881b      	ldrh	r3, [r3, #0]
 8010a80:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010a84:	d00a      	beq.n	8010a9c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	881b      	ldrh	r3, [r3, #0]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff ff80 	bl	8010990 <ptr_to_mem>
 8010a90:	4604      	mov	r4, r0
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7ff ff8e 	bl	80109b4 <mem_to_ptr>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	885b      	ldrh	r3, [r3, #2]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff ff75 	bl	8010990 <ptr_to_mem>
 8010aa6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010aa8:	68ba      	ldr	r2, [r7, #8]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d01f      	beq.n	8010af0 <plug_holes+0x118>
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	791b      	ldrb	r3, [r3, #4]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d11b      	bne.n	8010af0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010ab8:	4b17      	ldr	r3, [pc, #92]	@ (8010b18 <plug_holes+0x140>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d102      	bne.n	8010ac8 <plug_holes+0xf0>
      lfree = pmem;
 8010ac2:	4a15      	ldr	r2, [pc, #84]	@ (8010b18 <plug_holes+0x140>)
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	881a      	ldrh	r2, [r3, #0]
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	881b      	ldrh	r3, [r3, #0]
 8010ad4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010ad8:	d00a      	beq.n	8010af0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	881b      	ldrh	r3, [r3, #0]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7ff ff56 	bl	8010990 <ptr_to_mem>
 8010ae4:	4604      	mov	r4, r0
 8010ae6:	68b8      	ldr	r0, [r7, #8]
 8010ae8:	f7ff ff64 	bl	80109b4 <mem_to_ptr>
 8010aec:	4603      	mov	r3, r0
 8010aee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010af0:	bf00      	nop
 8010af2:	3714      	adds	r7, #20
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd90      	pop	{r4, r7, pc}
 8010af8:	2400e090 	.word	0x2400e090
 8010afc:	0801c2f0 	.word	0x0801c2f0
 8010b00:	0801c320 	.word	0x0801c320
 8010b04:	0801c338 	.word	0x0801c338
 8010b08:	2400e094 	.word	0x2400e094
 8010b0c:	0801c360 	.word	0x0801c360
 8010b10:	0801c37c 	.word	0x0801c37c
 8010b14:	0801c398 	.word	0x0801c398
 8010b18:	2400e09c 	.word	0x2400e09c

08010b1c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010b22:	4b1d      	ldr	r3, [pc, #116]	@ (8010b98 <mem_init+0x7c>)
 8010b24:	4a1d      	ldr	r2, [pc, #116]	@ (8010b9c <mem_init+0x80>)
 8010b26:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010b28:	4b1b      	ldr	r3, [pc, #108]	@ (8010b98 <mem_init+0x7c>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010b34:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010b42:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8010b46:	f7ff ff23 	bl	8010990 <ptr_to_mem>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	4a14      	ldr	r2, [pc, #80]	@ (8010ba0 <mem_init+0x84>)
 8010b4e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010b50:	4b13      	ldr	r3, [pc, #76]	@ (8010ba0 <mem_init+0x84>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	2201      	movs	r2, #1
 8010b56:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010b58:	4b11      	ldr	r3, [pc, #68]	@ (8010ba0 <mem_init+0x84>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010b60:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010b62:	4b0f      	ldr	r3, [pc, #60]	@ (8010ba0 <mem_init+0x84>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010b6a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010b98 <mem_init+0x7c>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a0c      	ldr	r2, [pc, #48]	@ (8010ba4 <mem_init+0x88>)
 8010b72:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010b74:	480c      	ldr	r0, [pc, #48]	@ (8010ba8 <mem_init+0x8c>)
 8010b76:	f00a fa1d 	bl	801afb4 <sys_mutex_new>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d006      	beq.n	8010b8e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010b80:	4b0a      	ldr	r3, [pc, #40]	@ (8010bac <mem_init+0x90>)
 8010b82:	f240 221f 	movw	r2, #543	@ 0x21f
 8010b86:	490a      	ldr	r1, [pc, #40]	@ (8010bb0 <mem_init+0x94>)
 8010b88:	480a      	ldr	r0, [pc, #40]	@ (8010bb4 <mem_init+0x98>)
 8010b8a:	f00a fb83 	bl	801b294 <iprintf>
  }
}
 8010b8e:	bf00      	nop
 8010b90:	3708      	adds	r7, #8
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	2400e090 	.word	0x2400e090
 8010b9c:	30000200 	.word	0x30000200
 8010ba0:	2400e094 	.word	0x2400e094
 8010ba4:	2400e09c 	.word	0x2400e09c
 8010ba8:	2400e098 	.word	0x2400e098
 8010bac:	0801c2f0 	.word	0x0801c2f0
 8010bb0:	0801c3c4 	.word	0x0801c3c4
 8010bb4:	0801c338 	.word	0x0801c338

08010bb8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b086      	sub	sp, #24
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f7ff fef7 	bl	80109b4 <mem_to_ptr>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7ff fede 	bl	8010990 <ptr_to_mem>
 8010bd4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	885b      	ldrh	r3, [r3, #2]
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7ff fed8 	bl	8010990 <ptr_to_mem>
 8010be0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	881b      	ldrh	r3, [r3, #0]
 8010be6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010bea:	d818      	bhi.n	8010c1e <mem_link_valid+0x66>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	885b      	ldrh	r3, [r3, #2]
 8010bf0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010bf4:	d813      	bhi.n	8010c1e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010bfa:	8afa      	ldrh	r2, [r7, #22]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d004      	beq.n	8010c0a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	881b      	ldrh	r3, [r3, #0]
 8010c04:	8afa      	ldrh	r2, [r7, #22]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d109      	bne.n	8010c1e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010c0a:	4b08      	ldr	r3, [pc, #32]	@ (8010c2c <mem_link_valid+0x74>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010c0e:	693a      	ldr	r2, [r7, #16]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d006      	beq.n	8010c22 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	885b      	ldrh	r3, [r3, #2]
 8010c18:	8afa      	ldrh	r2, [r7, #22]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d001      	beq.n	8010c22 <mem_link_valid+0x6a>
    return 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e000      	b.n	8010c24 <mem_link_valid+0x6c>
  }
  return 1;
 8010c22:	2301      	movs	r3, #1
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3718      	adds	r7, #24
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	2400e094 	.word	0x2400e094

08010c30 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b088      	sub	sp, #32
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d070      	beq.n	8010d20 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f003 0303 	and.w	r3, r3, #3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d00d      	beq.n	8010c64 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010c48:	4b37      	ldr	r3, [pc, #220]	@ (8010d28 <mem_free+0xf8>)
 8010c4a:	f240 2273 	movw	r2, #627	@ 0x273
 8010c4e:	4937      	ldr	r1, [pc, #220]	@ (8010d2c <mem_free+0xfc>)
 8010c50:	4837      	ldr	r0, [pc, #220]	@ (8010d30 <mem_free+0x100>)
 8010c52:	f00a fb1f 	bl	801b294 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c56:	f00a f9ff 	bl	801b058 <sys_arch_protect>
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f00a fa09 	bl	801b074 <sys_arch_unprotect>
    return;
 8010c62:	e05e      	b.n	8010d22 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	3b08      	subs	r3, #8
 8010c68:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010c6a:	4b32      	ldr	r3, [pc, #200]	@ (8010d34 <mem_free+0x104>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	69fa      	ldr	r2, [r7, #28]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d306      	bcc.n	8010c82 <mem_free+0x52>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f103 020c 	add.w	r2, r3, #12
 8010c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8010d38 <mem_free+0x108>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d90d      	bls.n	8010c9e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010c82:	4b29      	ldr	r3, [pc, #164]	@ (8010d28 <mem_free+0xf8>)
 8010c84:	f240 227f 	movw	r2, #639	@ 0x27f
 8010c88:	492c      	ldr	r1, [pc, #176]	@ (8010d3c <mem_free+0x10c>)
 8010c8a:	4829      	ldr	r0, [pc, #164]	@ (8010d30 <mem_free+0x100>)
 8010c8c:	f00a fb02 	bl	801b294 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c90:	f00a f9e2 	bl	801b058 <sys_arch_protect>
 8010c94:	6138      	str	r0, [r7, #16]
 8010c96:	6938      	ldr	r0, [r7, #16]
 8010c98:	f00a f9ec 	bl	801b074 <sys_arch_unprotect>
    return;
 8010c9c:	e041      	b.n	8010d22 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010c9e:	4828      	ldr	r0, [pc, #160]	@ (8010d40 <mem_free+0x110>)
 8010ca0:	f00a f99e 	bl	801afe0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	791b      	ldrb	r3, [r3, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d110      	bne.n	8010cce <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010cac:	4b1e      	ldr	r3, [pc, #120]	@ (8010d28 <mem_free+0xf8>)
 8010cae:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8010cb2:	4924      	ldr	r1, [pc, #144]	@ (8010d44 <mem_free+0x114>)
 8010cb4:	481e      	ldr	r0, [pc, #120]	@ (8010d30 <mem_free+0x100>)
 8010cb6:	f00a faed 	bl	801b294 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010cba:	4821      	ldr	r0, [pc, #132]	@ (8010d40 <mem_free+0x110>)
 8010cbc:	f00a f99f 	bl	801affe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010cc0:	f00a f9ca 	bl	801b058 <sys_arch_protect>
 8010cc4:	6178      	str	r0, [r7, #20]
 8010cc6:	6978      	ldr	r0, [r7, #20]
 8010cc8:	f00a f9d4 	bl	801b074 <sys_arch_unprotect>
    return;
 8010ccc:	e029      	b.n	8010d22 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010cce:	69f8      	ldr	r0, [r7, #28]
 8010cd0:	f7ff ff72 	bl	8010bb8 <mem_link_valid>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d110      	bne.n	8010cfc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010cda:	4b13      	ldr	r3, [pc, #76]	@ (8010d28 <mem_free+0xf8>)
 8010cdc:	f240 2295 	movw	r2, #661	@ 0x295
 8010ce0:	4919      	ldr	r1, [pc, #100]	@ (8010d48 <mem_free+0x118>)
 8010ce2:	4813      	ldr	r0, [pc, #76]	@ (8010d30 <mem_free+0x100>)
 8010ce4:	f00a fad6 	bl	801b294 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010ce8:	4815      	ldr	r0, [pc, #84]	@ (8010d40 <mem_free+0x110>)
 8010cea:	f00a f988 	bl	801affe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010cee:	f00a f9b3 	bl	801b058 <sys_arch_protect>
 8010cf2:	61b8      	str	r0, [r7, #24]
 8010cf4:	69b8      	ldr	r0, [r7, #24]
 8010cf6:	f00a f9bd 	bl	801b074 <sys_arch_unprotect>
    return;
 8010cfa:	e012      	b.n	8010d22 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010d02:	4b12      	ldr	r3, [pc, #72]	@ (8010d4c <mem_free+0x11c>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	69fa      	ldr	r2, [r7, #28]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d202      	bcs.n	8010d12 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8010d4c <mem_free+0x11c>)
 8010d0e:	69fb      	ldr	r3, [r7, #28]
 8010d10:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010d12:	69f8      	ldr	r0, [r7, #28]
 8010d14:	f7ff fe60 	bl	80109d8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010d18:	4809      	ldr	r0, [pc, #36]	@ (8010d40 <mem_free+0x110>)
 8010d1a:	f00a f970 	bl	801affe <sys_mutex_unlock>
 8010d1e:	e000      	b.n	8010d22 <mem_free+0xf2>
    return;
 8010d20:	bf00      	nop
}
 8010d22:	3720      	adds	r7, #32
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	0801c2f0 	.word	0x0801c2f0
 8010d2c:	0801c3e0 	.word	0x0801c3e0
 8010d30:	0801c338 	.word	0x0801c338
 8010d34:	2400e090 	.word	0x2400e090
 8010d38:	2400e094 	.word	0x2400e094
 8010d3c:	0801c404 	.word	0x0801c404
 8010d40:	2400e098 	.word	0x2400e098
 8010d44:	0801c420 	.word	0x0801c420
 8010d48:	0801c448 	.word	0x0801c448
 8010d4c:	2400e09c 	.word	0x2400e09c

08010d50 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b088      	sub	sp, #32
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	460b      	mov	r3, r1
 8010d5a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010d5c:	887b      	ldrh	r3, [r7, #2]
 8010d5e:	3303      	adds	r3, #3
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	f023 0303 	bic.w	r3, r3, #3
 8010d66:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010d68:	8bfb      	ldrh	r3, [r7, #30]
 8010d6a:	2b0b      	cmp	r3, #11
 8010d6c:	d801      	bhi.n	8010d72 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010d6e:	230c      	movs	r3, #12
 8010d70:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010d72:	8bfb      	ldrh	r3, [r7, #30]
 8010d74:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010d78:	d803      	bhi.n	8010d82 <mem_trim+0x32>
 8010d7a:	8bfa      	ldrh	r2, [r7, #30]
 8010d7c:	887b      	ldrh	r3, [r7, #2]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d201      	bcs.n	8010d86 <mem_trim+0x36>
    return NULL;
 8010d82:	2300      	movs	r3, #0
 8010d84:	e0d8      	b.n	8010f38 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010d86:	4b6e      	ldr	r3, [pc, #440]	@ (8010f40 <mem_trim+0x1f0>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d304      	bcc.n	8010d9a <mem_trim+0x4a>
 8010d90:	4b6c      	ldr	r3, [pc, #432]	@ (8010f44 <mem_trim+0x1f4>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d306      	bcc.n	8010da8 <mem_trim+0x58>
 8010d9a:	4b6b      	ldr	r3, [pc, #428]	@ (8010f48 <mem_trim+0x1f8>)
 8010d9c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010da0:	496a      	ldr	r1, [pc, #424]	@ (8010f4c <mem_trim+0x1fc>)
 8010da2:	486b      	ldr	r0, [pc, #428]	@ (8010f50 <mem_trim+0x200>)
 8010da4:	f00a fa76 	bl	801b294 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010da8:	4b65      	ldr	r3, [pc, #404]	@ (8010f40 <mem_trim+0x1f0>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d304      	bcc.n	8010dbc <mem_trim+0x6c>
 8010db2:	4b64      	ldr	r3, [pc, #400]	@ (8010f44 <mem_trim+0x1f4>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d307      	bcc.n	8010dcc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010dbc:	f00a f94c 	bl	801b058 <sys_arch_protect>
 8010dc0:	60b8      	str	r0, [r7, #8]
 8010dc2:	68b8      	ldr	r0, [r7, #8]
 8010dc4:	f00a f956 	bl	801b074 <sys_arch_unprotect>
    return rmem;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	e0b5      	b.n	8010f38 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	3b08      	subs	r3, #8
 8010dd0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010dd2:	69b8      	ldr	r0, [r7, #24]
 8010dd4:	f7ff fdee 	bl	80109b4 <mem_to_ptr>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010ddc:	69bb      	ldr	r3, [r7, #24]
 8010dde:	881a      	ldrh	r2, [r3, #0]
 8010de0:	8afb      	ldrh	r3, [r7, #22]
 8010de2:	1ad3      	subs	r3, r2, r3
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	3b08      	subs	r3, #8
 8010de8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010dea:	8bfa      	ldrh	r2, [r7, #30]
 8010dec:	8abb      	ldrh	r3, [r7, #20]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d906      	bls.n	8010e00 <mem_trim+0xb0>
 8010df2:	4b55      	ldr	r3, [pc, #340]	@ (8010f48 <mem_trim+0x1f8>)
 8010df4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8010df8:	4956      	ldr	r1, [pc, #344]	@ (8010f54 <mem_trim+0x204>)
 8010dfa:	4855      	ldr	r0, [pc, #340]	@ (8010f50 <mem_trim+0x200>)
 8010dfc:	f00a fa4a 	bl	801b294 <iprintf>
  if (newsize > size) {
 8010e00:	8bfa      	ldrh	r2, [r7, #30]
 8010e02:	8abb      	ldrh	r3, [r7, #20]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d901      	bls.n	8010e0c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	e095      	b.n	8010f38 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010e0c:	8bfa      	ldrh	r2, [r7, #30]
 8010e0e:	8abb      	ldrh	r3, [r7, #20]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d101      	bne.n	8010e18 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	e08f      	b.n	8010f38 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010e18:	484f      	ldr	r0, [pc, #316]	@ (8010f58 <mem_trim+0x208>)
 8010e1a:	f00a f8e1 	bl	801afe0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010e1e:	69bb      	ldr	r3, [r7, #24]
 8010e20:	881b      	ldrh	r3, [r3, #0]
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7ff fdb4 	bl	8010990 <ptr_to_mem>
 8010e28:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	791b      	ldrb	r3, [r3, #4]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d13f      	bne.n	8010eb2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010e32:	69bb      	ldr	r3, [r7, #24]
 8010e34:	881b      	ldrh	r3, [r3, #0]
 8010e36:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010e3a:	d106      	bne.n	8010e4a <mem_trim+0xfa>
 8010e3c:	4b42      	ldr	r3, [pc, #264]	@ (8010f48 <mem_trim+0x1f8>)
 8010e3e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8010e42:	4946      	ldr	r1, [pc, #280]	@ (8010f5c <mem_trim+0x20c>)
 8010e44:	4842      	ldr	r0, [pc, #264]	@ (8010f50 <mem_trim+0x200>)
 8010e46:	f00a fa25 	bl	801b294 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010e4a:	693b      	ldr	r3, [r7, #16]
 8010e4c:	881b      	ldrh	r3, [r3, #0]
 8010e4e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010e50:	8afa      	ldrh	r2, [r7, #22]
 8010e52:	8bfb      	ldrh	r3, [r7, #30]
 8010e54:	4413      	add	r3, r2
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	3308      	adds	r3, #8
 8010e5a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010e5c:	4b40      	ldr	r3, [pc, #256]	@ (8010f60 <mem_trim+0x210>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	693a      	ldr	r2, [r7, #16]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d106      	bne.n	8010e74 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010e66:	89fb      	ldrh	r3, [r7, #14]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7ff fd91 	bl	8010990 <ptr_to_mem>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	4a3b      	ldr	r2, [pc, #236]	@ (8010f60 <mem_trim+0x210>)
 8010e72:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010e74:	89fb      	ldrh	r3, [r7, #14]
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7ff fd8a 	bl	8010990 <ptr_to_mem>
 8010e7c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	2200      	movs	r2, #0
 8010e82:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	89ba      	ldrh	r2, [r7, #12]
 8010e88:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	8afa      	ldrh	r2, [r7, #22]
 8010e8e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010e90:	69bb      	ldr	r3, [r7, #24]
 8010e92:	89fa      	ldrh	r2, [r7, #14]
 8010e94:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	881b      	ldrh	r3, [r3, #0]
 8010e9a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010e9e:	d047      	beq.n	8010f30 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	881b      	ldrh	r3, [r3, #0]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7ff fd73 	bl	8010990 <ptr_to_mem>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	89fb      	ldrh	r3, [r7, #14]
 8010eae:	8053      	strh	r3, [r2, #2]
 8010eb0:	e03e      	b.n	8010f30 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010eb2:	8bfb      	ldrh	r3, [r7, #30]
 8010eb4:	f103 0214 	add.w	r2, r3, #20
 8010eb8:	8abb      	ldrh	r3, [r7, #20]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d838      	bhi.n	8010f30 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010ebe:	8afa      	ldrh	r2, [r7, #22]
 8010ec0:	8bfb      	ldrh	r3, [r7, #30]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	3308      	adds	r3, #8
 8010ec8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	881b      	ldrh	r3, [r3, #0]
 8010ece:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010ed2:	d106      	bne.n	8010ee2 <mem_trim+0x192>
 8010ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8010f48 <mem_trim+0x1f8>)
 8010ed6:	f240 3216 	movw	r2, #790	@ 0x316
 8010eda:	4920      	ldr	r1, [pc, #128]	@ (8010f5c <mem_trim+0x20c>)
 8010edc:	481c      	ldr	r0, [pc, #112]	@ (8010f50 <mem_trim+0x200>)
 8010ede:	f00a f9d9 	bl	801b294 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010ee2:	89fb      	ldrh	r3, [r7, #14]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7ff fd53 	bl	8010990 <ptr_to_mem>
 8010eea:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010eec:	4b1c      	ldr	r3, [pc, #112]	@ (8010f60 <mem_trim+0x210>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	693a      	ldr	r2, [r7, #16]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d202      	bcs.n	8010efc <mem_trim+0x1ac>
      lfree = mem2;
 8010ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8010f60 <mem_trim+0x210>)
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	2200      	movs	r2, #0
 8010f00:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	881a      	ldrh	r2, [r3, #0]
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	8afa      	ldrh	r2, [r7, #22]
 8010f0e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	89fa      	ldrh	r2, [r7, #14]
 8010f14:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	881b      	ldrh	r3, [r3, #0]
 8010f1a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010f1e:	d007      	beq.n	8010f30 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	881b      	ldrh	r3, [r3, #0]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7ff fd33 	bl	8010990 <ptr_to_mem>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	89fb      	ldrh	r3, [r7, #14]
 8010f2e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010f30:	4809      	ldr	r0, [pc, #36]	@ (8010f58 <mem_trim+0x208>)
 8010f32:	f00a f864 	bl	801affe <sys_mutex_unlock>
  return rmem;
 8010f36:	687b      	ldr	r3, [r7, #4]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3720      	adds	r7, #32
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	2400e090 	.word	0x2400e090
 8010f44:	2400e094 	.word	0x2400e094
 8010f48:	0801c2f0 	.word	0x0801c2f0
 8010f4c:	0801c47c 	.word	0x0801c47c
 8010f50:	0801c338 	.word	0x0801c338
 8010f54:	0801c494 	.word	0x0801c494
 8010f58:	2400e098 	.word	0x2400e098
 8010f5c:	0801c4b4 	.word	0x0801c4b4
 8010f60:	2400e09c 	.word	0x2400e09c

08010f64 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b088      	sub	sp, #32
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010f6e:	88fb      	ldrh	r3, [r7, #6]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d101      	bne.n	8010f78 <mem_malloc+0x14>
    return NULL;
 8010f74:	2300      	movs	r3, #0
 8010f76:	e0e2      	b.n	801113e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010f78:	88fb      	ldrh	r3, [r7, #6]
 8010f7a:	3303      	adds	r3, #3
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	f023 0303 	bic.w	r3, r3, #3
 8010f82:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010f84:	8bbb      	ldrh	r3, [r7, #28]
 8010f86:	2b0b      	cmp	r3, #11
 8010f88:	d801      	bhi.n	8010f8e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010f8a:	230c      	movs	r3, #12
 8010f8c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010f8e:	8bbb      	ldrh	r3, [r7, #28]
 8010f90:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010f94:	d803      	bhi.n	8010f9e <mem_malloc+0x3a>
 8010f96:	8bba      	ldrh	r2, [r7, #28]
 8010f98:	88fb      	ldrh	r3, [r7, #6]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d201      	bcs.n	8010fa2 <mem_malloc+0x3e>
    return NULL;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	e0cd      	b.n	801113e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010fa2:	4869      	ldr	r0, [pc, #420]	@ (8011148 <mem_malloc+0x1e4>)
 8010fa4:	f00a f81c 	bl	801afe0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010fa8:	4b68      	ldr	r3, [pc, #416]	@ (801114c <mem_malloc+0x1e8>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ff fd01 	bl	80109b4 <mem_to_ptr>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	83fb      	strh	r3, [r7, #30]
 8010fb6:	e0b7      	b.n	8011128 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010fb8:	8bfb      	ldrh	r3, [r7, #30]
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7ff fce8 	bl	8010990 <ptr_to_mem>
 8010fc0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	791b      	ldrb	r3, [r3, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f040 80a7 	bne.w	801111a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	881b      	ldrh	r3, [r3, #0]
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	8bfb      	ldrh	r3, [r7, #30]
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	f1a3 0208 	sub.w	r2, r3, #8
 8010fda:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	f0c0 809c 	bcc.w	801111a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	881b      	ldrh	r3, [r3, #0]
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	8bfb      	ldrh	r3, [r7, #30]
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	f1a3 0208 	sub.w	r2, r3, #8
 8010ff0:	8bbb      	ldrh	r3, [r7, #28]
 8010ff2:	3314      	adds	r3, #20
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d333      	bcc.n	8011060 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010ff8:	8bfa      	ldrh	r2, [r7, #30]
 8010ffa:	8bbb      	ldrh	r3, [r7, #28]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	3308      	adds	r3, #8
 8011002:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011004:	8a7b      	ldrh	r3, [r7, #18]
 8011006:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801100a:	d106      	bne.n	801101a <mem_malloc+0xb6>
 801100c:	4b50      	ldr	r3, [pc, #320]	@ (8011150 <mem_malloc+0x1ec>)
 801100e:	f240 3287 	movw	r2, #903	@ 0x387
 8011012:	4950      	ldr	r1, [pc, #320]	@ (8011154 <mem_malloc+0x1f0>)
 8011014:	4850      	ldr	r0, [pc, #320]	@ (8011158 <mem_malloc+0x1f4>)
 8011016:	f00a f93d 	bl	801b294 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801101a:	8a7b      	ldrh	r3, [r7, #18]
 801101c:	4618      	mov	r0, r3
 801101e:	f7ff fcb7 	bl	8010990 <ptr_to_mem>
 8011022:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2200      	movs	r2, #0
 8011028:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	881a      	ldrh	r2, [r3, #0]
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	8bfa      	ldrh	r2, [r7, #30]
 8011036:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	8a7a      	ldrh	r2, [r7, #18]
 801103c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	2201      	movs	r2, #1
 8011042:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801104c:	d00b      	beq.n	8011066 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	4618      	mov	r0, r3
 8011054:	f7ff fc9c 	bl	8010990 <ptr_to_mem>
 8011058:	4602      	mov	r2, r0
 801105a:	8a7b      	ldrh	r3, [r7, #18]
 801105c:	8053      	strh	r3, [r2, #2]
 801105e:	e002      	b.n	8011066 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	2201      	movs	r2, #1
 8011064:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011066:	4b39      	ldr	r3, [pc, #228]	@ (801114c <mem_malloc+0x1e8>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	697a      	ldr	r2, [r7, #20]
 801106c:	429a      	cmp	r2, r3
 801106e:	d127      	bne.n	80110c0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011070:	4b36      	ldr	r3, [pc, #216]	@ (801114c <mem_malloc+0x1e8>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011076:	e005      	b.n	8011084 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011078:	69bb      	ldr	r3, [r7, #24]
 801107a:	881b      	ldrh	r3, [r3, #0]
 801107c:	4618      	mov	r0, r3
 801107e:	f7ff fc87 	bl	8010990 <ptr_to_mem>
 8011082:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011084:	69bb      	ldr	r3, [r7, #24]
 8011086:	791b      	ldrb	r3, [r3, #4]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d004      	beq.n	8011096 <mem_malloc+0x132>
 801108c:	4b33      	ldr	r3, [pc, #204]	@ (801115c <mem_malloc+0x1f8>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	69ba      	ldr	r2, [r7, #24]
 8011092:	429a      	cmp	r2, r3
 8011094:	d1f0      	bne.n	8011078 <mem_malloc+0x114>
          }
          lfree = cur;
 8011096:	4a2d      	ldr	r2, [pc, #180]	@ (801114c <mem_malloc+0x1e8>)
 8011098:	69bb      	ldr	r3, [r7, #24]
 801109a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801109c:	4b2b      	ldr	r3, [pc, #172]	@ (801114c <mem_malloc+0x1e8>)
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	4b2e      	ldr	r3, [pc, #184]	@ (801115c <mem_malloc+0x1f8>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d00b      	beq.n	80110c0 <mem_malloc+0x15c>
 80110a8:	4b28      	ldr	r3, [pc, #160]	@ (801114c <mem_malloc+0x1e8>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	791b      	ldrb	r3, [r3, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d006      	beq.n	80110c0 <mem_malloc+0x15c>
 80110b2:	4b27      	ldr	r3, [pc, #156]	@ (8011150 <mem_malloc+0x1ec>)
 80110b4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80110b8:	4929      	ldr	r1, [pc, #164]	@ (8011160 <mem_malloc+0x1fc>)
 80110ba:	4827      	ldr	r0, [pc, #156]	@ (8011158 <mem_malloc+0x1f4>)
 80110bc:	f00a f8ea 	bl	801b294 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80110c0:	4821      	ldr	r0, [pc, #132]	@ (8011148 <mem_malloc+0x1e4>)
 80110c2:	f009 ff9c 	bl	801affe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80110c6:	8bba      	ldrh	r2, [r7, #28]
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	4413      	add	r3, r2
 80110cc:	3308      	adds	r3, #8
 80110ce:	4a23      	ldr	r2, [pc, #140]	@ (801115c <mem_malloc+0x1f8>)
 80110d0:	6812      	ldr	r2, [r2, #0]
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d906      	bls.n	80110e4 <mem_malloc+0x180>
 80110d6:	4b1e      	ldr	r3, [pc, #120]	@ (8011150 <mem_malloc+0x1ec>)
 80110d8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80110dc:	4921      	ldr	r1, [pc, #132]	@ (8011164 <mem_malloc+0x200>)
 80110de:	481e      	ldr	r0, [pc, #120]	@ (8011158 <mem_malloc+0x1f4>)
 80110e0:	f00a f8d8 	bl	801b294 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	f003 0303 	and.w	r3, r3, #3
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d006      	beq.n	80110fc <mem_malloc+0x198>
 80110ee:	4b18      	ldr	r3, [pc, #96]	@ (8011150 <mem_malloc+0x1ec>)
 80110f0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80110f4:	491c      	ldr	r1, [pc, #112]	@ (8011168 <mem_malloc+0x204>)
 80110f6:	4818      	ldr	r0, [pc, #96]	@ (8011158 <mem_malloc+0x1f4>)
 80110f8:	f00a f8cc 	bl	801b294 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	f003 0303 	and.w	r3, r3, #3
 8011102:	2b00      	cmp	r3, #0
 8011104:	d006      	beq.n	8011114 <mem_malloc+0x1b0>
 8011106:	4b12      	ldr	r3, [pc, #72]	@ (8011150 <mem_malloc+0x1ec>)
 8011108:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801110c:	4917      	ldr	r1, [pc, #92]	@ (801116c <mem_malloc+0x208>)
 801110e:	4812      	ldr	r0, [pc, #72]	@ (8011158 <mem_malloc+0x1f4>)
 8011110:	f00a f8c0 	bl	801b294 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	3308      	adds	r3, #8
 8011118:	e011      	b.n	801113e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801111a:	8bfb      	ldrh	r3, [r7, #30]
 801111c:	4618      	mov	r0, r3
 801111e:	f7ff fc37 	bl	8010990 <ptr_to_mem>
 8011122:	4603      	mov	r3, r0
 8011124:	881b      	ldrh	r3, [r3, #0]
 8011126:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011128:	8bfa      	ldrh	r2, [r7, #30]
 801112a:	8bbb      	ldrh	r3, [r7, #28]
 801112c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8011130:	429a      	cmp	r2, r3
 8011132:	f4ff af41 	bcc.w	8010fb8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011136:	4804      	ldr	r0, [pc, #16]	@ (8011148 <mem_malloc+0x1e4>)
 8011138:	f009 ff61 	bl	801affe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	3720      	adds	r7, #32
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	2400e098 	.word	0x2400e098
 801114c:	2400e09c 	.word	0x2400e09c
 8011150:	0801c2f0 	.word	0x0801c2f0
 8011154:	0801c4b4 	.word	0x0801c4b4
 8011158:	0801c338 	.word	0x0801c338
 801115c:	2400e094 	.word	0x2400e094
 8011160:	0801c4c8 	.word	0x0801c4c8
 8011164:	0801c4e4 	.word	0x0801c4e4
 8011168:	0801c514 	.word	0x0801c514
 801116c:	0801c544 	.word	0x0801c544

08011170 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011170:	b480      	push	{r7}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	689b      	ldr	r3, [r3, #8]
 801117c:	2200      	movs	r2, #0
 801117e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	3303      	adds	r3, #3
 8011186:	f023 0303 	bic.w	r3, r3, #3
 801118a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801118c:	2300      	movs	r3, #0
 801118e:	60fb      	str	r3, [r7, #12]
 8011190:	e011      	b.n	80111b6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	68ba      	ldr	r2, [r7, #8]
 80111a2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	461a      	mov	r2, r3
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	4413      	add	r3, r2
 80111ae:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	3301      	adds	r3, #1
 80111b4:	60fb      	str	r3, [r7, #12]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	885b      	ldrh	r3, [r3, #2]
 80111ba:	461a      	mov	r2, r3
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	4293      	cmp	r3, r2
 80111c0:	dbe7      	blt.n	8011192 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80111c2:	bf00      	nop
 80111c4:	bf00      	nop
 80111c6:	3714      	adds	r7, #20
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr

080111d0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80111d6:	2300      	movs	r3, #0
 80111d8:	80fb      	strh	r3, [r7, #6]
 80111da:	e009      	b.n	80111f0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80111dc:	88fb      	ldrh	r3, [r7, #6]
 80111de:	4a08      	ldr	r2, [pc, #32]	@ (8011200 <memp_init+0x30>)
 80111e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff ffc3 	bl	8011170 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80111ea:	88fb      	ldrh	r3, [r7, #6]
 80111ec:	3301      	adds	r3, #1
 80111ee:	80fb      	strh	r3, [r7, #6]
 80111f0:	88fb      	ldrh	r3, [r7, #6]
 80111f2:	2b0d      	cmp	r3, #13
 80111f4:	d9f2      	bls.n	80111dc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80111f6:	bf00      	nop
 80111f8:	bf00      	nop
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	0801ee78 	.word	0x0801ee78

08011204 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801120c:	f009 ff24 	bl	801b058 <sys_arch_protect>
 8011210:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	689b      	ldr	r3, [r3, #8]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d015      	beq.n	801124c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	68ba      	ldr	r2, [r7, #8]
 8011226:	6812      	ldr	r2, [r2, #0]
 8011228:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	f003 0303 	and.w	r3, r3, #3
 8011230:	2b00      	cmp	r3, #0
 8011232:	d006      	beq.n	8011242 <do_memp_malloc_pool+0x3e>
 8011234:	4b09      	ldr	r3, [pc, #36]	@ (801125c <do_memp_malloc_pool+0x58>)
 8011236:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801123a:	4909      	ldr	r1, [pc, #36]	@ (8011260 <do_memp_malloc_pool+0x5c>)
 801123c:	4809      	ldr	r0, [pc, #36]	@ (8011264 <do_memp_malloc_pool+0x60>)
 801123e:	f00a f829 	bl	801b294 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	f009 ff16 	bl	801b074 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	e003      	b.n	8011254 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f009 ff11 	bl	801b074 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011252:	2300      	movs	r3, #0
}
 8011254:	4618      	mov	r0, r3
 8011256:	3710      	adds	r7, #16
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	0801c568 	.word	0x0801c568
 8011260:	0801c598 	.word	0x0801c598
 8011264:	0801c5bc 	.word	0x0801c5bc

08011268 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d106      	bne.n	8011284 <memp_malloc_pool+0x1c>
 8011276:	4b0a      	ldr	r3, [pc, #40]	@ (80112a0 <memp_malloc_pool+0x38>)
 8011278:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801127c:	4909      	ldr	r1, [pc, #36]	@ (80112a4 <memp_malloc_pool+0x3c>)
 801127e:	480a      	ldr	r0, [pc, #40]	@ (80112a8 <memp_malloc_pool+0x40>)
 8011280:	f00a f808 	bl	801b294 <iprintf>
  if (desc == NULL) {
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d101      	bne.n	801128e <memp_malloc_pool+0x26>
    return NULL;
 801128a:	2300      	movs	r3, #0
 801128c:	e003      	b.n	8011296 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f7ff ffb8 	bl	8011204 <do_memp_malloc_pool>
 8011294:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011296:	4618      	mov	r0, r3
 8011298:	3708      	adds	r7, #8
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	0801c568 	.word	0x0801c568
 80112a4:	0801c5e4 	.word	0x0801c5e4
 80112a8:	0801c5bc 	.word	0x0801c5bc

080112ac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	4603      	mov	r3, r0
 80112b4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80112b6:	79fb      	ldrb	r3, [r7, #7]
 80112b8:	2b0d      	cmp	r3, #13
 80112ba:	d908      	bls.n	80112ce <memp_malloc+0x22>
 80112bc:	4b0a      	ldr	r3, [pc, #40]	@ (80112e8 <memp_malloc+0x3c>)
 80112be:	f240 1257 	movw	r2, #343	@ 0x157
 80112c2:	490a      	ldr	r1, [pc, #40]	@ (80112ec <memp_malloc+0x40>)
 80112c4:	480a      	ldr	r0, [pc, #40]	@ (80112f0 <memp_malloc+0x44>)
 80112c6:	f009 ffe5 	bl	801b294 <iprintf>
 80112ca:	2300      	movs	r3, #0
 80112cc:	e008      	b.n	80112e0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80112ce:	79fb      	ldrb	r3, [r7, #7]
 80112d0:	4a08      	ldr	r2, [pc, #32]	@ (80112f4 <memp_malloc+0x48>)
 80112d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7ff ff94 	bl	8011204 <do_memp_malloc_pool>
 80112dc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80112de:	68fb      	ldr	r3, [r7, #12]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3710      	adds	r7, #16
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	0801c568 	.word	0x0801c568
 80112ec:	0801c5f8 	.word	0x0801c5f8
 80112f0:	0801c5bc 	.word	0x0801c5bc
 80112f4:	0801ee78 	.word	0x0801ee78

080112f8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	f003 0303 	and.w	r3, r3, #3
 8011308:	2b00      	cmp	r3, #0
 801130a:	d006      	beq.n	801131a <do_memp_free_pool+0x22>
 801130c:	4b0d      	ldr	r3, [pc, #52]	@ (8011344 <do_memp_free_pool+0x4c>)
 801130e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8011312:	490d      	ldr	r1, [pc, #52]	@ (8011348 <do_memp_free_pool+0x50>)
 8011314:	480d      	ldr	r0, [pc, #52]	@ (801134c <do_memp_free_pool+0x54>)
 8011316:	f009 ffbd 	bl	801b294 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801131e:	f009 fe9b 	bl	801b058 <sys_arch_protect>
 8011322:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	689b      	ldr	r3, [r3, #8]
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	689b      	ldr	r3, [r3, #8]
 8011332:	68fa      	ldr	r2, [r7, #12]
 8011334:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011336:	68b8      	ldr	r0, [r7, #8]
 8011338:	f009 fe9c 	bl	801b074 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801133c:	bf00      	nop
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}
 8011344:	0801c568 	.word	0x0801c568
 8011348:	0801c618 	.word	0x0801c618
 801134c:	0801c5bc 	.word	0x0801c5bc

08011350 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d106      	bne.n	801136e <memp_free_pool+0x1e>
 8011360:	4b0a      	ldr	r3, [pc, #40]	@ (801138c <memp_free_pool+0x3c>)
 8011362:	f240 1295 	movw	r2, #405	@ 0x195
 8011366:	490a      	ldr	r1, [pc, #40]	@ (8011390 <memp_free_pool+0x40>)
 8011368:	480a      	ldr	r0, [pc, #40]	@ (8011394 <memp_free_pool+0x44>)
 801136a:	f009 ff93 	bl	801b294 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d007      	beq.n	8011384 <memp_free_pool+0x34>
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d004      	beq.n	8011384 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801137a:	6839      	ldr	r1, [r7, #0]
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f7ff ffbb 	bl	80112f8 <do_memp_free_pool>
 8011382:	e000      	b.n	8011386 <memp_free_pool+0x36>
    return;
 8011384:	bf00      	nop
}
 8011386:	3708      	adds	r7, #8
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}
 801138c:	0801c568 	.word	0x0801c568
 8011390:	0801c5e4 	.word	0x0801c5e4
 8011394:	0801c5bc 	.word	0x0801c5bc

08011398 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	4603      	mov	r3, r0
 80113a0:	6039      	str	r1, [r7, #0]
 80113a2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80113a4:	79fb      	ldrb	r3, [r7, #7]
 80113a6:	2b0d      	cmp	r3, #13
 80113a8:	d907      	bls.n	80113ba <memp_free+0x22>
 80113aa:	4b0c      	ldr	r3, [pc, #48]	@ (80113dc <memp_free+0x44>)
 80113ac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80113b0:	490b      	ldr	r1, [pc, #44]	@ (80113e0 <memp_free+0x48>)
 80113b2:	480c      	ldr	r0, [pc, #48]	@ (80113e4 <memp_free+0x4c>)
 80113b4:	f009 ff6e 	bl	801b294 <iprintf>
 80113b8:	e00c      	b.n	80113d4 <memp_free+0x3c>

  if (mem == NULL) {
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d008      	beq.n	80113d2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80113c0:	79fb      	ldrb	r3, [r7, #7]
 80113c2:	4a09      	ldr	r2, [pc, #36]	@ (80113e8 <memp_free+0x50>)
 80113c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113c8:	6839      	ldr	r1, [r7, #0]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff ff94 	bl	80112f8 <do_memp_free_pool>
 80113d0:	e000      	b.n	80113d4 <memp_free+0x3c>
    return;
 80113d2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80113d4:	3708      	adds	r7, #8
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	0801c568 	.word	0x0801c568
 80113e0:	0801c638 	.word	0x0801c638
 80113e4:	0801c5bc 	.word	0x0801c5bc
 80113e8:	0801ee78 	.word	0x0801ee78

080113ec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80113ec:	b480      	push	{r7}
 80113ee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80113f0:	bf00      	nop
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr
	...

080113fc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b086      	sub	sp, #24
 8011400:	af00      	add	r7, sp, #0
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	607a      	str	r2, [r7, #4]
 8011408:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d108      	bne.n	8011422 <netif_add+0x26>
 8011410:	4b57      	ldr	r3, [pc, #348]	@ (8011570 <netif_add+0x174>)
 8011412:	f240 1227 	movw	r2, #295	@ 0x127
 8011416:	4957      	ldr	r1, [pc, #348]	@ (8011574 <netif_add+0x178>)
 8011418:	4857      	ldr	r0, [pc, #348]	@ (8011578 <netif_add+0x17c>)
 801141a:	f009 ff3b 	bl	801b294 <iprintf>
 801141e:	2300      	movs	r3, #0
 8011420:	e0a2      	b.n	8011568 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011424:	2b00      	cmp	r3, #0
 8011426:	d108      	bne.n	801143a <netif_add+0x3e>
 8011428:	4b51      	ldr	r3, [pc, #324]	@ (8011570 <netif_add+0x174>)
 801142a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801142e:	4953      	ldr	r1, [pc, #332]	@ (801157c <netif_add+0x180>)
 8011430:	4851      	ldr	r0, [pc, #324]	@ (8011578 <netif_add+0x17c>)
 8011432:	f009 ff2f 	bl	801b294 <iprintf>
 8011436:	2300      	movs	r3, #0
 8011438:	e096      	b.n	8011568 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d101      	bne.n	8011444 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011440:	4b4f      	ldr	r3, [pc, #316]	@ (8011580 <netif_add+0x184>)
 8011442:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d101      	bne.n	801144e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801144a:	4b4d      	ldr	r3, [pc, #308]	@ (8011580 <netif_add+0x184>)
 801144c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d101      	bne.n	8011458 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011454:	4b4a      	ldr	r3, [pc, #296]	@ (8011580 <netif_add+0x184>)
 8011456:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2200      	movs	r2, #0
 801145c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2200      	movs	r2, #0
 8011462:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	2200      	movs	r2, #0
 8011468:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	4a45      	ldr	r2, [pc, #276]	@ (8011584 <netif_add+0x188>)
 801146e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2200      	movs	r2, #0
 8011474:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2200      	movs	r2, #0
 801147a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2200      	movs	r2, #0
 8011482:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	6a3a      	ldr	r2, [r7, #32]
 8011488:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801148a:	4b3f      	ldr	r3, [pc, #252]	@ (8011588 <netif_add+0x18c>)
 801148c:	781a      	ldrb	r2, [r3, #0]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011498:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	68b9      	ldr	r1, [r7, #8]
 80114a0:	68f8      	ldr	r0, [r7, #12]
 80114a2:	f000 f917 	bl	80116d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80114a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	4798      	blx	r3
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d001      	beq.n	80114b6 <netif_add+0xba>
    return NULL;
 80114b2:	2300      	movs	r3, #0
 80114b4:	e058      	b.n	8011568 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80114bc:	2bff      	cmp	r3, #255	@ 0xff
 80114be:	d103      	bne.n	80114c8 <netif_add+0xcc>
        netif->num = 0;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	2200      	movs	r2, #0
 80114c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80114c8:	2300      	movs	r3, #0
 80114ca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80114cc:	4b2f      	ldr	r3, [pc, #188]	@ (801158c <netif_add+0x190>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	617b      	str	r3, [r7, #20]
 80114d2:	e02b      	b.n	801152c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80114d4:	697a      	ldr	r2, [r7, #20]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d106      	bne.n	80114ea <netif_add+0xee>
 80114dc:	4b24      	ldr	r3, [pc, #144]	@ (8011570 <netif_add+0x174>)
 80114de:	f240 128b 	movw	r2, #395	@ 0x18b
 80114e2:	492b      	ldr	r1, [pc, #172]	@ (8011590 <netif_add+0x194>)
 80114e4:	4824      	ldr	r0, [pc, #144]	@ (8011578 <netif_add+0x17c>)
 80114e6:	f009 fed5 	bl	801b294 <iprintf>
        num_netifs++;
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	3301      	adds	r3, #1
 80114ee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	2bff      	cmp	r3, #255	@ 0xff
 80114f4:	dd06      	ble.n	8011504 <netif_add+0x108>
 80114f6:	4b1e      	ldr	r3, [pc, #120]	@ (8011570 <netif_add+0x174>)
 80114f8:	f240 128d 	movw	r2, #397	@ 0x18d
 80114fc:	4925      	ldr	r1, [pc, #148]	@ (8011594 <netif_add+0x198>)
 80114fe:	481e      	ldr	r0, [pc, #120]	@ (8011578 <netif_add+0x17c>)
 8011500:	f009 fec8 	bl	801b294 <iprintf>
        if (netif2->num == netif->num) {
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011510:	429a      	cmp	r2, r3
 8011512:	d108      	bne.n	8011526 <netif_add+0x12a>
          netif->num++;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801151a:	3301      	adds	r3, #1
 801151c:	b2da      	uxtb	r2, r3
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8011524:	e005      	b.n	8011532 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	617b      	str	r3, [r7, #20]
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d1d0      	bne.n	80114d4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d1be      	bne.n	80114b6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801153e:	2bfe      	cmp	r3, #254	@ 0xfe
 8011540:	d103      	bne.n	801154a <netif_add+0x14e>
    netif_num = 0;
 8011542:	4b11      	ldr	r3, [pc, #68]	@ (8011588 <netif_add+0x18c>)
 8011544:	2200      	movs	r2, #0
 8011546:	701a      	strb	r2, [r3, #0]
 8011548:	e006      	b.n	8011558 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011550:	3301      	adds	r3, #1
 8011552:	b2da      	uxtb	r2, r3
 8011554:	4b0c      	ldr	r3, [pc, #48]	@ (8011588 <netif_add+0x18c>)
 8011556:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011558:	4b0c      	ldr	r3, [pc, #48]	@ (801158c <netif_add+0x190>)
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011560:	4a0a      	ldr	r2, [pc, #40]	@ (801158c <netif_add+0x190>)
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011566:	68fb      	ldr	r3, [r7, #12]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3718      	adds	r7, #24
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}
 8011570:	0801c654 	.word	0x0801c654
 8011574:	0801c6e8 	.word	0x0801c6e8
 8011578:	0801c6a4 	.word	0x0801c6a4
 801157c:	0801c704 	.word	0x0801c704
 8011580:	0801eef0 	.word	0x0801eef0
 8011584:	080119af 	.word	0x080119af
 8011588:	24014bac 	.word	0x24014bac
 801158c:	24014ba4 	.word	0x24014ba4
 8011590:	0801c728 	.word	0x0801c728
 8011594:	0801c73c 	.word	0x0801c73c

08011598 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
 80115a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80115a2:	6839      	ldr	r1, [r7, #0]
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f002 fc87 	bl	8013eb8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80115aa:	6839      	ldr	r1, [r7, #0]
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f007 f8c7 	bl	8018740 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 80115b2:	6839      	ldr	r1, [r7, #0]
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f001 f901 	bl	80127bc <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 80115ba:	bf00      	nop
 80115bc:	3708      	adds	r7, #8
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
	...

080115c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b086      	sub	sp, #24
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d106      	bne.n	80115e4 <netif_do_set_ipaddr+0x20>
 80115d6:	4b1d      	ldr	r3, [pc, #116]	@ (801164c <netif_do_set_ipaddr+0x88>)
 80115d8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80115dc:	491c      	ldr	r1, [pc, #112]	@ (8011650 <netif_do_set_ipaddr+0x8c>)
 80115de:	481d      	ldr	r0, [pc, #116]	@ (8011654 <netif_do_set_ipaddr+0x90>)
 80115e0:	f009 fe58 	bl	801b294 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d106      	bne.n	80115f8 <netif_do_set_ipaddr+0x34>
 80115ea:	4b18      	ldr	r3, [pc, #96]	@ (801164c <netif_do_set_ipaddr+0x88>)
 80115ec:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80115f0:	4917      	ldr	r1, [pc, #92]	@ (8011650 <netif_do_set_ipaddr+0x8c>)
 80115f2:	4818      	ldr	r0, [pc, #96]	@ (8011654 <netif_do_set_ipaddr+0x90>)
 80115f4:	f009 fe4e 	bl	801b294 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	3304      	adds	r3, #4
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	429a      	cmp	r2, r3
 8011604:	d01c      	beq.n	8011640 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	3304      	adds	r3, #4
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011616:	f107 0314 	add.w	r3, r7, #20
 801161a:	4619      	mov	r1, r3
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f7ff ffbb 	bl	8011598 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d002      	beq.n	801162e <netif_do_set_ipaddr+0x6a>
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	e000      	b.n	8011630 <netif_do_set_ipaddr+0x6c>
 801162e:	2300      	movs	r3, #0
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011634:	2101      	movs	r1, #1
 8011636:	68f8      	ldr	r0, [r7, #12]
 8011638:	f000 f8d2 	bl	80117e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801163c:	2301      	movs	r3, #1
 801163e:	e000      	b.n	8011642 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011640:	2300      	movs	r3, #0
}
 8011642:	4618      	mov	r0, r3
 8011644:	3718      	adds	r7, #24
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop
 801164c:	0801c654 	.word	0x0801c654
 8011650:	0801c76c 	.word	0x0801c76c
 8011654:	0801c6a4 	.word	0x0801c6a4

08011658 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011658:	b480      	push	{r7}
 801165a:	b085      	sub	sp, #20
 801165c:	af00      	add	r7, sp, #0
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	60b9      	str	r1, [r7, #8]
 8011662:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	3308      	adds	r3, #8
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	429a      	cmp	r2, r3
 8011670:	d00a      	beq.n	8011688 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d002      	beq.n	801167e <netif_do_set_netmask+0x26>
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	e000      	b.n	8011680 <netif_do_set_netmask+0x28>
 801167e:	2300      	movs	r3, #0
 8011680:	68fa      	ldr	r2, [r7, #12]
 8011682:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011684:	2301      	movs	r3, #1
 8011686:	e000      	b.n	801168a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011688:	2300      	movs	r3, #0
}
 801168a:	4618      	mov	r0, r3
 801168c:	3714      	adds	r7, #20
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr

08011696 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011696:	b480      	push	{r7}
 8011698:	b085      	sub	sp, #20
 801169a:	af00      	add	r7, sp, #0
 801169c:	60f8      	str	r0, [r7, #12]
 801169e:	60b9      	str	r1, [r7, #8]
 80116a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	330c      	adds	r3, #12
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d00a      	beq.n	80116c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d002      	beq.n	80116bc <netif_do_set_gw+0x26>
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	e000      	b.n	80116be <netif_do_set_gw+0x28>
 80116bc:	2300      	movs	r3, #0
 80116be:	68fa      	ldr	r2, [r7, #12]
 80116c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80116c2:	2301      	movs	r3, #1
 80116c4:	e000      	b.n	80116c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80116c6:	2300      	movs	r3, #0
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3714      	adds	r7, #20
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b088      	sub	sp, #32
 80116d8:	af00      	add	r7, sp, #0
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	607a      	str	r2, [r7, #4]
 80116e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80116e2:	2300      	movs	r3, #0
 80116e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80116e6:	2300      	movs	r3, #0
 80116e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d101      	bne.n	80116f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80116f0:	4b1c      	ldr	r3, [pc, #112]	@ (8011764 <netif_set_addr+0x90>)
 80116f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d101      	bne.n	80116fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80116fa:	4b1a      	ldr	r3, [pc, #104]	@ (8011764 <netif_set_addr+0x90>)
 80116fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d101      	bne.n	8011708 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011704:	4b17      	ldr	r3, [pc, #92]	@ (8011764 <netif_set_addr+0x90>)
 8011706:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d003      	beq.n	8011716 <netif_set_addr+0x42>
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d101      	bne.n	801171a <netif_set_addr+0x46>
 8011716:	2301      	movs	r3, #1
 8011718:	e000      	b.n	801171c <netif_set_addr+0x48>
 801171a:	2300      	movs	r3, #0
 801171c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d006      	beq.n	8011732 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011724:	f107 0310 	add.w	r3, r7, #16
 8011728:	461a      	mov	r2, r3
 801172a:	68b9      	ldr	r1, [r7, #8]
 801172c:	68f8      	ldr	r0, [r7, #12]
 801172e:	f7ff ff49 	bl	80115c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011732:	69fa      	ldr	r2, [r7, #28]
 8011734:	6879      	ldr	r1, [r7, #4]
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f7ff ff8e 	bl	8011658 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801173c:	69ba      	ldr	r2, [r7, #24]
 801173e:	6839      	ldr	r1, [r7, #0]
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f7ff ffa8 	bl	8011696 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d106      	bne.n	801175a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801174c:	f107 0310 	add.w	r3, r7, #16
 8011750:	461a      	mov	r2, r3
 8011752:	68b9      	ldr	r1, [r7, #8]
 8011754:	68f8      	ldr	r0, [r7, #12]
 8011756:	f7ff ff35 	bl	80115c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801175a:	bf00      	nop
 801175c:	3720      	adds	r7, #32
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	0801eef0 	.word	0x0801eef0

08011768 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011770:	4a04      	ldr	r2, [pc, #16]	@ (8011784 <netif_set_default+0x1c>)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011776:	bf00      	nop
 8011778:	370c      	adds	r7, #12
 801177a:	46bd      	mov	sp, r7
 801177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop
 8011784:	24014ba8 	.word	0x24014ba8

08011788 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d107      	bne.n	80117a6 <netif_set_up+0x1e>
 8011796:	4b0f      	ldr	r3, [pc, #60]	@ (80117d4 <netif_set_up+0x4c>)
 8011798:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801179c:	490e      	ldr	r1, [pc, #56]	@ (80117d8 <netif_set_up+0x50>)
 801179e:	480f      	ldr	r0, [pc, #60]	@ (80117dc <netif_set_up+0x54>)
 80117a0:	f009 fd78 	bl	801b294 <iprintf>
 80117a4:	e013      	b.n	80117ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80117ac:	f003 0301 	and.w	r3, r3, #1
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d10c      	bne.n	80117ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80117ba:	f043 0301 	orr.w	r3, r3, #1
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80117c6:	2103      	movs	r1, #3
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f000 f809 	bl	80117e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	0801c654 	.word	0x0801c654
 80117d8:	0801c7dc 	.word	0x0801c7dc
 80117dc:	0801c6a4 	.word	0x0801c6a4

080117e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	460b      	mov	r3, r1
 80117ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d106      	bne.n	8011800 <netif_issue_reports+0x20>
 80117f2:	4b18      	ldr	r3, [pc, #96]	@ (8011854 <netif_issue_reports+0x74>)
 80117f4:	f240 326d 	movw	r2, #877	@ 0x36d
 80117f8:	4917      	ldr	r1, [pc, #92]	@ (8011858 <netif_issue_reports+0x78>)
 80117fa:	4818      	ldr	r0, [pc, #96]	@ (801185c <netif_issue_reports+0x7c>)
 80117fc:	f009 fd4a 	bl	801b294 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011806:	f003 0304 	and.w	r3, r3, #4
 801180a:	2b00      	cmp	r3, #0
 801180c:	d01e      	beq.n	801184c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011814:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011818:	2b00      	cmp	r3, #0
 801181a:	d017      	beq.n	801184c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801181c:	78fb      	ldrb	r3, [r7, #3]
 801181e:	f003 0301 	and.w	r3, r3, #1
 8011822:	2b00      	cmp	r3, #0
 8011824:	d013      	beq.n	801184e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	3304      	adds	r3, #4
 801182a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801182c:	2b00      	cmp	r3, #0
 801182e:	d00e      	beq.n	801184e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011836:	f003 0308 	and.w	r3, r3, #8
 801183a:	2b00      	cmp	r3, #0
 801183c:	d007      	beq.n	801184e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	3304      	adds	r3, #4
 8011842:	4619      	mov	r1, r3
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f007 fee5 	bl	8019614 <etharp_request>
 801184a:	e000      	b.n	801184e <netif_issue_reports+0x6e>
    return;
 801184c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	0801c654 	.word	0x0801c654
 8011858:	0801c7f8 	.word	0x0801c7f8
 801185c:	0801c6a4 	.word	0x0801c6a4

08011860 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d107      	bne.n	801187e <netif_set_down+0x1e>
 801186e:	4b12      	ldr	r3, [pc, #72]	@ (80118b8 <netif_set_down+0x58>)
 8011870:	f240 329b 	movw	r2, #923	@ 0x39b
 8011874:	4911      	ldr	r1, [pc, #68]	@ (80118bc <netif_set_down+0x5c>)
 8011876:	4812      	ldr	r0, [pc, #72]	@ (80118c0 <netif_set_down+0x60>)
 8011878:	f009 fd0c 	bl	801b294 <iprintf>
 801187c:	e019      	b.n	80118b2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011884:	f003 0301 	and.w	r3, r3, #1
 8011888:	2b00      	cmp	r3, #0
 801188a:	d012      	beq.n	80118b2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011892:	f023 0301 	bic.w	r3, r3, #1
 8011896:	b2da      	uxtb	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80118a4:	f003 0308 	and.w	r3, r3, #8
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d002      	beq.n	80118b2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f007 fa6f 	bl	8018d90 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	0801c654 	.word	0x0801c654
 80118bc:	0801c81c 	.word	0x0801c81c
 80118c0:	0801c6a4 	.word	0x0801c6a4

080118c4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d107      	bne.n	80118e2 <netif_set_link_up+0x1e>
 80118d2:	4b13      	ldr	r3, [pc, #76]	@ (8011920 <netif_set_link_up+0x5c>)
 80118d4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80118d8:	4912      	ldr	r1, [pc, #72]	@ (8011924 <netif_set_link_up+0x60>)
 80118da:	4813      	ldr	r0, [pc, #76]	@ (8011928 <netif_set_link_up+0x64>)
 80118dc:	f009 fcda 	bl	801b294 <iprintf>
 80118e0:	e01b      	b.n	801191a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80118e8:	f003 0304 	and.w	r3, r3, #4
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d114      	bne.n	801191a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80118f6:	f043 0304 	orr.w	r3, r3, #4
 80118fa:	b2da      	uxtb	r2, r3
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011902:	2103      	movs	r1, #3
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7ff ff6b 	bl	80117e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	69db      	ldr	r3, [r3, #28]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d003      	beq.n	801191a <netif_set_link_up+0x56>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	69db      	ldr	r3, [r3, #28]
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	0801c654 	.word	0x0801c654
 8011924:	0801c83c 	.word	0x0801c83c
 8011928:	0801c6a4 	.word	0x0801c6a4

0801192c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d107      	bne.n	801194a <netif_set_link_down+0x1e>
 801193a:	4b11      	ldr	r3, [pc, #68]	@ (8011980 <netif_set_link_down+0x54>)
 801193c:	f240 4206 	movw	r2, #1030	@ 0x406
 8011940:	4910      	ldr	r1, [pc, #64]	@ (8011984 <netif_set_link_down+0x58>)
 8011942:	4811      	ldr	r0, [pc, #68]	@ (8011988 <netif_set_link_down+0x5c>)
 8011944:	f009 fca6 	bl	801b294 <iprintf>
 8011948:	e017      	b.n	801197a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011950:	f003 0304 	and.w	r3, r3, #4
 8011954:	2b00      	cmp	r3, #0
 8011956:	d010      	beq.n	801197a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801195e:	f023 0304 	bic.w	r3, r3, #4
 8011962:	b2da      	uxtb	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	69db      	ldr	r3, [r3, #28]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d003      	beq.n	801197a <netif_set_link_down+0x4e>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	69db      	ldr	r3, [r3, #28]
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	0801c654 	.word	0x0801c654
 8011984:	0801c860 	.word	0x0801c860
 8011988:	0801c6a4 	.word	0x0801c6a4

0801198c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801198c:	b480      	push	{r7}
 801198e:	b083      	sub	sp, #12
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d002      	beq.n	80119a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	683a      	ldr	r2, [r7, #0]
 80119a0:	61da      	str	r2, [r3, #28]
  }
}
 80119a2:	bf00      	nop
 80119a4:	370c      	adds	r7, #12
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr

080119ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80119ae:	b480      	push	{r7}
 80119b0:	b085      	sub	sp, #20
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	60f8      	str	r0, [r7, #12]
 80119b6:	60b9      	str	r1, [r7, #8]
 80119b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80119ba:	f06f 030b 	mvn.w	r3, #11
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3714      	adds	r7, #20
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr
	...

080119cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80119cc:	b480      	push	{r7}
 80119ce:	b085      	sub	sp, #20
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	4603      	mov	r3, r0
 80119d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80119d6:	79fb      	ldrb	r3, [r7, #7]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d013      	beq.n	8011a04 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80119dc:	4b0d      	ldr	r3, [pc, #52]	@ (8011a14 <netif_get_by_index+0x48>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	60fb      	str	r3, [r7, #12]
 80119e2:	e00c      	b.n	80119fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80119ea:	3301      	adds	r3, #1
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	79fa      	ldrb	r2, [r7, #7]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d101      	bne.n	80119f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	e006      	b.n	8011a06 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	60fb      	str	r3, [r7, #12]
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d1ef      	bne.n	80119e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3714      	adds	r7, #20
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr
 8011a12:	bf00      	nop
 8011a14:	24014ba4 	.word	0x24014ba4

08011a18 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011a1e:	f009 fb1b 	bl	801b058 <sys_arch_protect>
 8011a22:	6038      	str	r0, [r7, #0]
 8011a24:	4b0d      	ldr	r3, [pc, #52]	@ (8011a5c <pbuf_free_ooseq+0x44>)
 8011a26:	2200      	movs	r2, #0
 8011a28:	701a      	strb	r2, [r3, #0]
 8011a2a:	6838      	ldr	r0, [r7, #0]
 8011a2c:	f009 fb22 	bl	801b074 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011a30:	4b0b      	ldr	r3, [pc, #44]	@ (8011a60 <pbuf_free_ooseq+0x48>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	607b      	str	r3, [r7, #4]
 8011a36:	e00a      	b.n	8011a4e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d003      	beq.n	8011a48 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f002 fa77 	bl	8013f34 <tcp_free_ooseq>
      return;
 8011a46:	e005      	b.n	8011a54 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	68db      	ldr	r3, [r3, #12]
 8011a4c:	607b      	str	r3, [r7, #4]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d1f1      	bne.n	8011a38 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011a54:	3708      	adds	r7, #8
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	24014bad 	.word	0x24014bad
 8011a60:	24014bc0 	.word	0x24014bc0

08011a64 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011a6c:	f7ff ffd4 	bl	8011a18 <pbuf_free_ooseq>
}
 8011a70:	bf00      	nop
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011a7e:	f009 faeb 	bl	801b058 <sys_arch_protect>
 8011a82:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011a84:	4b0f      	ldr	r3, [pc, #60]	@ (8011ac4 <pbuf_pool_is_empty+0x4c>)
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8011ac4 <pbuf_pool_is_empty+0x4c>)
 8011a8c:	2201      	movs	r2, #1
 8011a8e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f009 faef 	bl	801b074 <sys_arch_unprotect>

  if (!queued) {
 8011a96:	78fb      	ldrb	r3, [r7, #3]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d10f      	bne.n	8011abc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011a9c:	2100      	movs	r1, #0
 8011a9e:	480a      	ldr	r0, [pc, #40]	@ (8011ac8 <pbuf_pool_is_empty+0x50>)
 8011aa0:	f7fe fdea 	bl	8010678 <tcpip_try_callback>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d008      	beq.n	8011abc <pbuf_pool_is_empty+0x44>
 8011aaa:	f009 fad5 	bl	801b058 <sys_arch_protect>
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	4b04      	ldr	r3, [pc, #16]	@ (8011ac4 <pbuf_pool_is_empty+0x4c>)
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	701a      	strb	r2, [r3, #0]
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f009 fadc 	bl	801b074 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011abc:	bf00      	nop
 8011abe:	3708      	adds	r7, #8
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	24014bad 	.word	0x24014bad
 8011ac8:	08011a65 	.word	0x08011a65

08011acc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011acc:	b480      	push	{r7}
 8011ace:	b085      	sub	sp, #20
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	4611      	mov	r1, r2
 8011ad8:	461a      	mov	r2, r3
 8011ada:	460b      	mov	r3, r1
 8011adc:	80fb      	strh	r3, [r7, #6]
 8011ade:	4613      	mov	r3, r2
 8011ae0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	68ba      	ldr	r2, [r7, #8]
 8011aec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	88fa      	ldrh	r2, [r7, #6]
 8011af2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	88ba      	ldrh	r2, [r7, #4]
 8011af8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011afa:	8b3b      	ldrh	r3, [r7, #24]
 8011afc:	b2da      	uxtb	r2, r3
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	7f3a      	ldrb	r2, [r7, #28]
 8011b06:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2200      	movs	r2, #0
 8011b12:	73da      	strb	r2, [r3, #15]
}
 8011b14:	bf00      	nop
 8011b16:	3714      	adds	r7, #20
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b08c      	sub	sp, #48	@ 0x30
 8011b24:	af02      	add	r7, sp, #8
 8011b26:	4603      	mov	r3, r0
 8011b28:	71fb      	strb	r3, [r7, #7]
 8011b2a:	460b      	mov	r3, r1
 8011b2c:	80bb      	strh	r3, [r7, #4]
 8011b2e:	4613      	mov	r3, r2
 8011b30:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011b32:	79fb      	ldrb	r3, [r7, #7]
 8011b34:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011b36:	887b      	ldrh	r3, [r7, #2]
 8011b38:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011b3c:	f000 8082 	beq.w	8011c44 <pbuf_alloc+0x124>
 8011b40:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011b44:	f300 80ca 	bgt.w	8011cdc <pbuf_alloc+0x1bc>
 8011b48:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011b4c:	d010      	beq.n	8011b70 <pbuf_alloc+0x50>
 8011b4e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011b52:	f300 80c3 	bgt.w	8011cdc <pbuf_alloc+0x1bc>
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d002      	beq.n	8011b60 <pbuf_alloc+0x40>
 8011b5a:	2b41      	cmp	r3, #65	@ 0x41
 8011b5c:	f040 80be 	bne.w	8011cdc <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011b60:	887a      	ldrh	r2, [r7, #2]
 8011b62:	88bb      	ldrh	r3, [r7, #4]
 8011b64:	4619      	mov	r1, r3
 8011b66:	2000      	movs	r0, #0
 8011b68:	f000 f8d4 	bl	8011d14 <pbuf_alloc_reference>
 8011b6c:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011b6e:	e0bf      	b.n	8011cf0 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011b70:	2300      	movs	r3, #0
 8011b72:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011b74:	2300      	movs	r3, #0
 8011b76:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011b78:	88bb      	ldrh	r3, [r7, #4]
 8011b7a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011b7c:	200d      	movs	r0, #13
 8011b7e:	f7ff fb95 	bl	80112ac <memp_malloc>
 8011b82:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d109      	bne.n	8011b9e <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8011b8a:	f7ff ff75 	bl	8011a78 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d002      	beq.n	8011b9a <pbuf_alloc+0x7a>
            pbuf_free(p);
 8011b94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b96:	f000 faab 	bl	80120f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	e0a9      	b.n	8011cf2 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011b9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011ba0:	3303      	adds	r3, #3
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	f023 0303 	bic.w	r3, r3, #3
 8011ba8:	b29a      	uxth	r2, r3
 8011baa:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8011bae:	1a9b      	subs	r3, r3, r2
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	8b7a      	ldrh	r2, [r7, #26]
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	bf28      	it	cs
 8011bb8:	4613      	movcs	r3, r2
 8011bba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011bbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011bbe:	3310      	adds	r3, #16
 8011bc0:	693a      	ldr	r2, [r7, #16]
 8011bc2:	4413      	add	r3, r2
 8011bc4:	3303      	adds	r3, #3
 8011bc6:	f023 0303 	bic.w	r3, r3, #3
 8011bca:	4618      	mov	r0, r3
 8011bcc:	89f9      	ldrh	r1, [r7, #14]
 8011bce:	8b7a      	ldrh	r2, [r7, #26]
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	9301      	str	r3, [sp, #4]
 8011bd4:	887b      	ldrh	r3, [r7, #2]
 8011bd6:	9300      	str	r3, [sp, #0]
 8011bd8:	460b      	mov	r3, r1
 8011bda:	4601      	mov	r1, r0
 8011bdc:	6938      	ldr	r0, [r7, #16]
 8011bde:	f7ff ff75 	bl	8011acc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	f003 0303 	and.w	r3, r3, #3
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d006      	beq.n	8011bfc <pbuf_alloc+0xdc>
 8011bee:	4b43      	ldr	r3, [pc, #268]	@ (8011cfc <pbuf_alloc+0x1dc>)
 8011bf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011bf4:	4942      	ldr	r1, [pc, #264]	@ (8011d00 <pbuf_alloc+0x1e0>)
 8011bf6:	4843      	ldr	r0, [pc, #268]	@ (8011d04 <pbuf_alloc+0x1e4>)
 8011bf8:	f009 fb4c 	bl	801b294 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011bfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011bfe:	3303      	adds	r3, #3
 8011c00:	f023 0303 	bic.w	r3, r3, #3
 8011c04:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d106      	bne.n	8011c1a <pbuf_alloc+0xfa>
 8011c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8011cfc <pbuf_alloc+0x1dc>)
 8011c0e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011c12:	493d      	ldr	r1, [pc, #244]	@ (8011d08 <pbuf_alloc+0x1e8>)
 8011c14:	483b      	ldr	r0, [pc, #236]	@ (8011d04 <pbuf_alloc+0x1e4>)
 8011c16:	f009 fb3d 	bl	801b294 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d102      	bne.n	8011c26 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c24:	e002      	b.n	8011c2c <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011c26:	69fb      	ldr	r3, [r7, #28]
 8011c28:	693a      	ldr	r2, [r7, #16]
 8011c2a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011c30:	8b7a      	ldrh	r2, [r7, #26]
 8011c32:	89fb      	ldrh	r3, [r7, #14]
 8011c34:	1ad3      	subs	r3, r2, r3
 8011c36:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8011c3c:	8b7b      	ldrh	r3, [r7, #26]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d19c      	bne.n	8011b7c <pbuf_alloc+0x5c>
      break;
 8011c42:	e055      	b.n	8011cf0 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011c44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011c46:	3303      	adds	r3, #3
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	f023 0303 	bic.w	r3, r3, #3
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	88bb      	ldrh	r3, [r7, #4]
 8011c52:	3303      	adds	r3, #3
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	f023 0303 	bic.w	r3, r3, #3
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	4413      	add	r3, r2
 8011c5e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011c60:	8b3b      	ldrh	r3, [r7, #24]
 8011c62:	3310      	adds	r3, #16
 8011c64:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011c66:	8b3a      	ldrh	r2, [r7, #24]
 8011c68:	88bb      	ldrh	r3, [r7, #4]
 8011c6a:	3303      	adds	r3, #3
 8011c6c:	f023 0303 	bic.w	r3, r3, #3
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d306      	bcc.n	8011c82 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011c74:	8afa      	ldrh	r2, [r7, #22]
 8011c76:	88bb      	ldrh	r3, [r7, #4]
 8011c78:	3303      	adds	r3, #3
 8011c7a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d201      	bcs.n	8011c86 <pbuf_alloc+0x166>
        return NULL;
 8011c82:	2300      	movs	r3, #0
 8011c84:	e035      	b.n	8011cf2 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011c86:	8afb      	ldrh	r3, [r7, #22]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7ff f96b 	bl	8010f64 <mem_malloc>
 8011c8e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8011c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d101      	bne.n	8011c9a <pbuf_alloc+0x17a>
        return NULL;
 8011c96:	2300      	movs	r3, #0
 8011c98:	e02b      	b.n	8011cf2 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011c9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011c9c:	3310      	adds	r3, #16
 8011c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ca0:	4413      	add	r3, r2
 8011ca2:	3303      	adds	r3, #3
 8011ca4:	f023 0303 	bic.w	r3, r3, #3
 8011ca8:	4618      	mov	r0, r3
 8011caa:	88b9      	ldrh	r1, [r7, #4]
 8011cac:	88ba      	ldrh	r2, [r7, #4]
 8011cae:	2300      	movs	r3, #0
 8011cb0:	9301      	str	r3, [sp, #4]
 8011cb2:	887b      	ldrh	r3, [r7, #2]
 8011cb4:	9300      	str	r3, [sp, #0]
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	4601      	mov	r1, r0
 8011cba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011cbc:	f7ff ff06 	bl	8011acc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	f003 0303 	and.w	r3, r3, #3
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d010      	beq.n	8011cee <pbuf_alloc+0x1ce>
 8011ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8011cfc <pbuf_alloc+0x1dc>)
 8011cce:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8011cd2:	490e      	ldr	r1, [pc, #56]	@ (8011d0c <pbuf_alloc+0x1ec>)
 8011cd4:	480b      	ldr	r0, [pc, #44]	@ (8011d04 <pbuf_alloc+0x1e4>)
 8011cd6:	f009 fadd 	bl	801b294 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011cda:	e008      	b.n	8011cee <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011cdc:	4b07      	ldr	r3, [pc, #28]	@ (8011cfc <pbuf_alloc+0x1dc>)
 8011cde:	f240 1227 	movw	r2, #295	@ 0x127
 8011ce2:	490b      	ldr	r1, [pc, #44]	@ (8011d10 <pbuf_alloc+0x1f0>)
 8011ce4:	4807      	ldr	r0, [pc, #28]	@ (8011d04 <pbuf_alloc+0x1e4>)
 8011ce6:	f009 fad5 	bl	801b294 <iprintf>
      return NULL;
 8011cea:	2300      	movs	r3, #0
 8011cec:	e001      	b.n	8011cf2 <pbuf_alloc+0x1d2>
      break;
 8011cee:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3728      	adds	r7, #40	@ 0x28
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	0801c884 	.word	0x0801c884
 8011d00:	0801c8b4 	.word	0x0801c8b4
 8011d04:	0801c8e4 	.word	0x0801c8e4
 8011d08:	0801c90c 	.word	0x0801c90c
 8011d0c:	0801c940 	.word	0x0801c940
 8011d10:	0801c96c 	.word	0x0801c96c

08011d14 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b086      	sub	sp, #24
 8011d18:	af02      	add	r7, sp, #8
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	807b      	strh	r3, [r7, #2]
 8011d20:	4613      	mov	r3, r2
 8011d22:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011d24:	883b      	ldrh	r3, [r7, #0]
 8011d26:	2b41      	cmp	r3, #65	@ 0x41
 8011d28:	d009      	beq.n	8011d3e <pbuf_alloc_reference+0x2a>
 8011d2a:	883b      	ldrh	r3, [r7, #0]
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d006      	beq.n	8011d3e <pbuf_alloc_reference+0x2a>
 8011d30:	4b0f      	ldr	r3, [pc, #60]	@ (8011d70 <pbuf_alloc_reference+0x5c>)
 8011d32:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8011d36:	490f      	ldr	r1, [pc, #60]	@ (8011d74 <pbuf_alloc_reference+0x60>)
 8011d38:	480f      	ldr	r0, [pc, #60]	@ (8011d78 <pbuf_alloc_reference+0x64>)
 8011d3a:	f009 faab 	bl	801b294 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011d3e:	200c      	movs	r0, #12
 8011d40:	f7ff fab4 	bl	80112ac <memp_malloc>
 8011d44:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d101      	bne.n	8011d50 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	e00b      	b.n	8011d68 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011d50:	8879      	ldrh	r1, [r7, #2]
 8011d52:	887a      	ldrh	r2, [r7, #2]
 8011d54:	2300      	movs	r3, #0
 8011d56:	9301      	str	r3, [sp, #4]
 8011d58:	883b      	ldrh	r3, [r7, #0]
 8011d5a:	9300      	str	r3, [sp, #0]
 8011d5c:	460b      	mov	r3, r1
 8011d5e:	6879      	ldr	r1, [r7, #4]
 8011d60:	68f8      	ldr	r0, [r7, #12]
 8011d62:	f7ff feb3 	bl	8011acc <pbuf_init_alloced_pbuf>
  return p;
 8011d66:	68fb      	ldr	r3, [r7, #12]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}
 8011d70:	0801c884 	.word	0x0801c884
 8011d74:	0801c988 	.word	0x0801c988
 8011d78:	0801c8e4 	.word	0x0801c8e4

08011d7c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b088      	sub	sp, #32
 8011d80:	af02      	add	r7, sp, #8
 8011d82:	607b      	str	r3, [r7, #4]
 8011d84:	4603      	mov	r3, r0
 8011d86:	73fb      	strb	r3, [r7, #15]
 8011d88:	460b      	mov	r3, r1
 8011d8a:	81bb      	strh	r3, [r7, #12]
 8011d8c:	4613      	mov	r3, r2
 8011d8e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011d90:	7bfb      	ldrb	r3, [r7, #15]
 8011d92:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011d94:	8a7b      	ldrh	r3, [r7, #18]
 8011d96:	3303      	adds	r3, #3
 8011d98:	f023 0203 	bic.w	r2, r3, #3
 8011d9c:	89bb      	ldrh	r3, [r7, #12]
 8011d9e:	441a      	add	r2, r3
 8011da0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d901      	bls.n	8011daa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011da6:	2300      	movs	r3, #0
 8011da8:	e018      	b.n	8011ddc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011daa:	6a3b      	ldr	r3, [r7, #32]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d007      	beq.n	8011dc0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011db0:	8a7b      	ldrh	r3, [r7, #18]
 8011db2:	3303      	adds	r3, #3
 8011db4:	f023 0303 	bic.w	r3, r3, #3
 8011db8:	6a3a      	ldr	r2, [r7, #32]
 8011dba:	4413      	add	r3, r2
 8011dbc:	617b      	str	r3, [r7, #20]
 8011dbe:	e001      	b.n	8011dc4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	89b9      	ldrh	r1, [r7, #12]
 8011dc8:	89ba      	ldrh	r2, [r7, #12]
 8011dca:	2302      	movs	r3, #2
 8011dcc:	9301      	str	r3, [sp, #4]
 8011dce:	897b      	ldrh	r3, [r7, #10]
 8011dd0:	9300      	str	r3, [sp, #0]
 8011dd2:	460b      	mov	r3, r1
 8011dd4:	6979      	ldr	r1, [r7, #20]
 8011dd6:	f7ff fe79 	bl	8011acc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011dda:	687b      	ldr	r3, [r7, #4]
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3718      	adds	r7, #24
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	460b      	mov	r3, r1
 8011dee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d106      	bne.n	8011e04 <pbuf_realloc+0x20>
 8011df6:	4b3a      	ldr	r3, [pc, #232]	@ (8011ee0 <pbuf_realloc+0xfc>)
 8011df8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8011dfc:	4939      	ldr	r1, [pc, #228]	@ (8011ee4 <pbuf_realloc+0x100>)
 8011dfe:	483a      	ldr	r0, [pc, #232]	@ (8011ee8 <pbuf_realloc+0x104>)
 8011e00:	f009 fa48 	bl	801b294 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	891b      	ldrh	r3, [r3, #8]
 8011e08:	887a      	ldrh	r2, [r7, #2]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d263      	bcs.n	8011ed6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	891a      	ldrh	r2, [r3, #8]
 8011e12:	887b      	ldrh	r3, [r7, #2]
 8011e14:	1ad3      	subs	r3, r2, r3
 8011e16:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011e18:	887b      	ldrh	r3, [r7, #2]
 8011e1a:	817b      	strh	r3, [r7, #10]
  q = p;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011e20:	e018      	b.n	8011e54 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	895b      	ldrh	r3, [r3, #10]
 8011e26:	897a      	ldrh	r2, [r7, #10]
 8011e28:	1ad3      	subs	r3, r2, r3
 8011e2a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	891a      	ldrh	r2, [r3, #8]
 8011e30:	893b      	ldrh	r3, [r7, #8]
 8011e32:	1ad3      	subs	r3, r2, r3
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d106      	bne.n	8011e54 <pbuf_realloc+0x70>
 8011e46:	4b26      	ldr	r3, [pc, #152]	@ (8011ee0 <pbuf_realloc+0xfc>)
 8011e48:	f240 12af 	movw	r2, #431	@ 0x1af
 8011e4c:	4927      	ldr	r1, [pc, #156]	@ (8011eec <pbuf_realloc+0x108>)
 8011e4e:	4826      	ldr	r0, [pc, #152]	@ (8011ee8 <pbuf_realloc+0x104>)
 8011e50:	f009 fa20 	bl	801b294 <iprintf>
  while (rem_len > q->len) {
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	895b      	ldrh	r3, [r3, #10]
 8011e58:	897a      	ldrh	r2, [r7, #10]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d8e1      	bhi.n	8011e22 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	7b1b      	ldrb	r3, [r3, #12]
 8011e62:	f003 030f 	and.w	r3, r3, #15
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d121      	bne.n	8011eae <pbuf_realloc+0xca>
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	895b      	ldrh	r3, [r3, #10]
 8011e6e:	897a      	ldrh	r2, [r7, #10]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d01c      	beq.n	8011eae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	7b5b      	ldrb	r3, [r3, #13]
 8011e78:	f003 0302 	and.w	r3, r3, #2
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d116      	bne.n	8011eae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	685a      	ldr	r2, [r3, #4]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	1ad3      	subs	r3, r2, r3
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	897b      	ldrh	r3, [r7, #10]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	4619      	mov	r1, r3
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f7fe ff5c 	bl	8010d50 <mem_trim>
 8011e98:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d106      	bne.n	8011eae <pbuf_realloc+0xca>
 8011ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8011ee0 <pbuf_realloc+0xfc>)
 8011ea2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8011ea6:	4912      	ldr	r1, [pc, #72]	@ (8011ef0 <pbuf_realloc+0x10c>)
 8011ea8:	480f      	ldr	r0, [pc, #60]	@ (8011ee8 <pbuf_realloc+0x104>)
 8011eaa:	f009 f9f3 	bl	801b294 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	897a      	ldrh	r2, [r7, #10]
 8011eb2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	895a      	ldrh	r2, [r3, #10]
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d004      	beq.n	8011ece <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f000 f911 	bl	80120f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	601a      	str	r2, [r3, #0]
 8011ed4:	e000      	b.n	8011ed8 <pbuf_realloc+0xf4>
    return;
 8011ed6:	bf00      	nop

}
 8011ed8:	3710      	adds	r7, #16
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	0801c884 	.word	0x0801c884
 8011ee4:	0801c99c 	.word	0x0801c99c
 8011ee8:	0801c8e4 	.word	0x0801c8e4
 8011eec:	0801c9b4 	.word	0x0801c9b4
 8011ef0:	0801c9cc 	.word	0x0801c9cc

08011ef4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b086      	sub	sp, #24
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	60f8      	str	r0, [r7, #12]
 8011efc:	60b9      	str	r1, [r7, #8]
 8011efe:	4613      	mov	r3, r2
 8011f00:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d106      	bne.n	8011f16 <pbuf_add_header_impl+0x22>
 8011f08:	4b2b      	ldr	r3, [pc, #172]	@ (8011fb8 <pbuf_add_header_impl+0xc4>)
 8011f0a:	f240 12df 	movw	r2, #479	@ 0x1df
 8011f0e:	492b      	ldr	r1, [pc, #172]	@ (8011fbc <pbuf_add_header_impl+0xc8>)
 8011f10:	482b      	ldr	r0, [pc, #172]	@ (8011fc0 <pbuf_add_header_impl+0xcc>)
 8011f12:	f009 f9bf 	bl	801b294 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d003      	beq.n	8011f24 <pbuf_add_header_impl+0x30>
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011f22:	d301      	bcc.n	8011f28 <pbuf_add_header_impl+0x34>
    return 1;
 8011f24:	2301      	movs	r3, #1
 8011f26:	e043      	b.n	8011fb0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d101      	bne.n	8011f32 <pbuf_add_header_impl+0x3e>
    return 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	e03e      	b.n	8011fb0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	891a      	ldrh	r2, [r3, #8]
 8011f3a:	8a7b      	ldrh	r3, [r7, #18]
 8011f3c:	4413      	add	r3, r2
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	8a7a      	ldrh	r2, [r7, #18]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d901      	bls.n	8011f4a <pbuf_add_header_impl+0x56>
    return 1;
 8011f46:	2301      	movs	r3, #1
 8011f48:	e032      	b.n	8011fb0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	7b1b      	ldrb	r3, [r3, #12]
 8011f4e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011f50:	8a3b      	ldrh	r3, [r7, #16]
 8011f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d00c      	beq.n	8011f74 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	685a      	ldr	r2, [r3, #4]
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	425b      	negs	r3, r3
 8011f62:	4413      	add	r3, r2
 8011f64:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	3310      	adds	r3, #16
 8011f6a:	697a      	ldr	r2, [r7, #20]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d20d      	bcs.n	8011f8c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011f70:	2301      	movs	r3, #1
 8011f72:	e01d      	b.n	8011fb0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d006      	beq.n	8011f88 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	685a      	ldr	r2, [r3, #4]
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	425b      	negs	r3, r3
 8011f82:	4413      	add	r3, r2
 8011f84:	617b      	str	r3, [r7, #20]
 8011f86:	e001      	b.n	8011f8c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	e011      	b.n	8011fb0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	697a      	ldr	r2, [r7, #20]
 8011f90:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	895a      	ldrh	r2, [r3, #10]
 8011f96:	8a7b      	ldrh	r3, [r7, #18]
 8011f98:	4413      	add	r3, r2
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	891a      	ldrh	r2, [r3, #8]
 8011fa4:	8a7b      	ldrh	r3, [r7, #18]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	b29a      	uxth	r2, r3
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	811a      	strh	r2, [r3, #8]


  return 0;
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3718      	adds	r7, #24
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	0801c884 	.word	0x0801c884
 8011fbc:	0801c9e8 	.word	0x0801c9e8
 8011fc0:	0801c8e4 	.word	0x0801c8e4

08011fc4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011fce:	2200      	movs	r2, #0
 8011fd0:	6839      	ldr	r1, [r7, #0]
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f7ff ff8e 	bl	8011ef4 <pbuf_add_header_impl>
 8011fd8:	4603      	mov	r3, r0
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3708      	adds	r7, #8
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
	...

08011fe4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d106      	bne.n	8012002 <pbuf_remove_header+0x1e>
 8011ff4:	4b20      	ldr	r3, [pc, #128]	@ (8012078 <pbuf_remove_header+0x94>)
 8011ff6:	f240 224b 	movw	r2, #587	@ 0x24b
 8011ffa:	4920      	ldr	r1, [pc, #128]	@ (801207c <pbuf_remove_header+0x98>)
 8011ffc:	4820      	ldr	r0, [pc, #128]	@ (8012080 <pbuf_remove_header+0x9c>)
 8011ffe:	f009 f949 	bl	801b294 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d003      	beq.n	8012010 <pbuf_remove_header+0x2c>
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801200e:	d301      	bcc.n	8012014 <pbuf_remove_header+0x30>
    return 1;
 8012010:	2301      	movs	r3, #1
 8012012:	e02c      	b.n	801206e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d101      	bne.n	801201e <pbuf_remove_header+0x3a>
    return 0;
 801201a:	2300      	movs	r3, #0
 801201c:	e027      	b.n	801206e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	895b      	ldrh	r3, [r3, #10]
 8012026:	89fa      	ldrh	r2, [r7, #14]
 8012028:	429a      	cmp	r2, r3
 801202a:	d908      	bls.n	801203e <pbuf_remove_header+0x5a>
 801202c:	4b12      	ldr	r3, [pc, #72]	@ (8012078 <pbuf_remove_header+0x94>)
 801202e:	f240 2255 	movw	r2, #597	@ 0x255
 8012032:	4914      	ldr	r1, [pc, #80]	@ (8012084 <pbuf_remove_header+0xa0>)
 8012034:	4812      	ldr	r0, [pc, #72]	@ (8012080 <pbuf_remove_header+0x9c>)
 8012036:	f009 f92d 	bl	801b294 <iprintf>
 801203a:	2301      	movs	r3, #1
 801203c:	e017      	b.n	801206e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	685a      	ldr	r2, [r3, #4]
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	441a      	add	r2, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	895a      	ldrh	r2, [r3, #10]
 8012054:	89fb      	ldrh	r3, [r7, #14]
 8012056:	1ad3      	subs	r3, r2, r3
 8012058:	b29a      	uxth	r2, r3
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	891a      	ldrh	r2, [r3, #8]
 8012062:	89fb      	ldrh	r3, [r7, #14]
 8012064:	1ad3      	subs	r3, r2, r3
 8012066:	b29a      	uxth	r2, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801206c:	2300      	movs	r3, #0
}
 801206e:	4618      	mov	r0, r3
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	0801c884 	.word	0x0801c884
 801207c:	0801c9e8 	.word	0x0801c9e8
 8012080:	0801c8e4 	.word	0x0801c8e4
 8012084:	0801c9f4 	.word	0x0801c9f4

08012088 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	460b      	mov	r3, r1
 8012092:	807b      	strh	r3, [r7, #2]
 8012094:	4613      	mov	r3, r2
 8012096:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012098:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801209c:	2b00      	cmp	r3, #0
 801209e:	da08      	bge.n	80120b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80120a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80120a4:	425b      	negs	r3, r3
 80120a6:	4619      	mov	r1, r3
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ff ff9b 	bl	8011fe4 <pbuf_remove_header>
 80120ae:	4603      	mov	r3, r0
 80120b0:	e007      	b.n	80120c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80120b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80120b6:	787a      	ldrb	r2, [r7, #1]
 80120b8:	4619      	mov	r1, r3
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7ff ff1a 	bl	8011ef4 <pbuf_add_header_impl>
 80120c0:	4603      	mov	r3, r0
  }
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	3708      	adds	r7, #8
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}

080120ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80120ca:	b580      	push	{r7, lr}
 80120cc:	b082      	sub	sp, #8
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
 80120d2:	460b      	mov	r3, r1
 80120d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80120d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80120da:	2201      	movs	r2, #1
 80120dc:	4619      	mov	r1, r3
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7ff ffd2 	bl	8012088 <pbuf_header_impl>
 80120e4:	4603      	mov	r3, r0
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3708      	adds	r7, #8
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
	...

080120f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b088      	sub	sp, #32
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d10b      	bne.n	8012116 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d106      	bne.n	8012112 <pbuf_free+0x22>
 8012104:	4b3b      	ldr	r3, [pc, #236]	@ (80121f4 <pbuf_free+0x104>)
 8012106:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801210a:	493b      	ldr	r1, [pc, #236]	@ (80121f8 <pbuf_free+0x108>)
 801210c:	483b      	ldr	r0, [pc, #236]	@ (80121fc <pbuf_free+0x10c>)
 801210e:	f009 f8c1 	bl	801b294 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012112:	2300      	movs	r3, #0
 8012114:	e069      	b.n	80121ea <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012116:	2300      	movs	r3, #0
 8012118:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801211a:	e062      	b.n	80121e2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801211c:	f008 ff9c 	bl	801b058 <sys_arch_protect>
 8012120:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	7b9b      	ldrb	r3, [r3, #14]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d106      	bne.n	8012138 <pbuf_free+0x48>
 801212a:	4b32      	ldr	r3, [pc, #200]	@ (80121f4 <pbuf_free+0x104>)
 801212c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012130:	4933      	ldr	r1, [pc, #204]	@ (8012200 <pbuf_free+0x110>)
 8012132:	4832      	ldr	r0, [pc, #200]	@ (80121fc <pbuf_free+0x10c>)
 8012134:	f009 f8ae 	bl	801b294 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	7b9b      	ldrb	r3, [r3, #14]
 801213c:	3b01      	subs	r3, #1
 801213e:	b2da      	uxtb	r2, r3
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	739a      	strb	r2, [r3, #14]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	7b9b      	ldrb	r3, [r3, #14]
 8012148:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801214a:	69b8      	ldr	r0, [r7, #24]
 801214c:	f008 ff92 	bl	801b074 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012150:	7dfb      	ldrb	r3, [r7, #23]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d143      	bne.n	80121de <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	7b1b      	ldrb	r3, [r3, #12]
 8012160:	f003 030f 	and.w	r3, r3, #15
 8012164:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	7b5b      	ldrb	r3, [r3, #13]
 801216a:	f003 0302 	and.w	r3, r3, #2
 801216e:	2b00      	cmp	r3, #0
 8012170:	d011      	beq.n	8012196 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	691b      	ldr	r3, [r3, #16]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d106      	bne.n	801218c <pbuf_free+0x9c>
 801217e:	4b1d      	ldr	r3, [pc, #116]	@ (80121f4 <pbuf_free+0x104>)
 8012180:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012184:	491f      	ldr	r1, [pc, #124]	@ (8012204 <pbuf_free+0x114>)
 8012186:	481d      	ldr	r0, [pc, #116]	@ (80121fc <pbuf_free+0x10c>)
 8012188:	f009 f884 	bl	801b294 <iprintf>
        pc->custom_free_function(p);
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	691b      	ldr	r3, [r3, #16]
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	4798      	blx	r3
 8012194:	e01d      	b.n	80121d2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012196:	7bfb      	ldrb	r3, [r7, #15]
 8012198:	2b02      	cmp	r3, #2
 801219a:	d104      	bne.n	80121a6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801219c:	6879      	ldr	r1, [r7, #4]
 801219e:	200d      	movs	r0, #13
 80121a0:	f7ff f8fa 	bl	8011398 <memp_free>
 80121a4:	e015      	b.n	80121d2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80121a6:	7bfb      	ldrb	r3, [r7, #15]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d104      	bne.n	80121b6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80121ac:	6879      	ldr	r1, [r7, #4]
 80121ae:	200c      	movs	r0, #12
 80121b0:	f7ff f8f2 	bl	8011398 <memp_free>
 80121b4:	e00d      	b.n	80121d2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80121b6:	7bfb      	ldrb	r3, [r7, #15]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d103      	bne.n	80121c4 <pbuf_free+0xd4>
          mem_free(p);
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7fe fd37 	bl	8010c30 <mem_free>
 80121c2:	e006      	b.n	80121d2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80121c4:	4b0b      	ldr	r3, [pc, #44]	@ (80121f4 <pbuf_free+0x104>)
 80121c6:	f240 320f 	movw	r2, #783	@ 0x30f
 80121ca:	490f      	ldr	r1, [pc, #60]	@ (8012208 <pbuf_free+0x118>)
 80121cc:	480b      	ldr	r0, [pc, #44]	@ (80121fc <pbuf_free+0x10c>)
 80121ce:	f009 f861 	bl	801b294 <iprintf>
        }
      }
      count++;
 80121d2:	7ffb      	ldrb	r3, [r7, #31]
 80121d4:	3301      	adds	r3, #1
 80121d6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	607b      	str	r3, [r7, #4]
 80121dc:	e001      	b.n	80121e2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80121de:	2300      	movs	r3, #0
 80121e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d199      	bne.n	801211c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80121e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3720      	adds	r7, #32
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	0801c884 	.word	0x0801c884
 80121f8:	0801c9e8 	.word	0x0801c9e8
 80121fc:	0801c8e4 	.word	0x0801c8e4
 8012200:	0801ca14 	.word	0x0801ca14
 8012204:	0801ca2c 	.word	0x0801ca2c
 8012208:	0801ca50 	.word	0x0801ca50

0801220c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801220c:	b480      	push	{r7}
 801220e:	b085      	sub	sp, #20
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012214:	2300      	movs	r3, #0
 8012216:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012218:	e005      	b.n	8012226 <pbuf_clen+0x1a>
    ++len;
 801221a:	89fb      	ldrh	r3, [r7, #14]
 801221c:	3301      	adds	r3, #1
 801221e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d1f6      	bne.n	801221a <pbuf_clen+0xe>
  }
  return len;
 801222c:	89fb      	ldrh	r3, [r7, #14]
}
 801222e:	4618      	mov	r0, r3
 8012230:	3714      	adds	r7, #20
 8012232:	46bd      	mov	sp, r7
 8012234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012238:	4770      	bx	lr
	...

0801223c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b084      	sub	sp, #16
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d016      	beq.n	8012278 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801224a:	f008 ff05 	bl	801b058 <sys_arch_protect>
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	7b9b      	ldrb	r3, [r3, #14]
 8012254:	3301      	adds	r3, #1
 8012256:	b2da      	uxtb	r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	739a      	strb	r2, [r3, #14]
 801225c:	68f8      	ldr	r0, [r7, #12]
 801225e:	f008 ff09 	bl	801b074 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	7b9b      	ldrb	r3, [r3, #14]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d106      	bne.n	8012278 <pbuf_ref+0x3c>
 801226a:	4b05      	ldr	r3, [pc, #20]	@ (8012280 <pbuf_ref+0x44>)
 801226c:	f240 3242 	movw	r2, #834	@ 0x342
 8012270:	4904      	ldr	r1, [pc, #16]	@ (8012284 <pbuf_ref+0x48>)
 8012272:	4805      	ldr	r0, [pc, #20]	@ (8012288 <pbuf_ref+0x4c>)
 8012274:	f009 f80e 	bl	801b294 <iprintf>
  }
}
 8012278:	bf00      	nop
 801227a:	3710      	adds	r7, #16
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	0801c884 	.word	0x0801c884
 8012284:	0801ca64 	.word	0x0801ca64
 8012288:	0801c8e4 	.word	0x0801c8e4

0801228c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d002      	beq.n	80122a2 <pbuf_cat+0x16>
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d107      	bne.n	80122b2 <pbuf_cat+0x26>
 80122a2:	4b20      	ldr	r3, [pc, #128]	@ (8012324 <pbuf_cat+0x98>)
 80122a4:	f240 3259 	movw	r2, #857	@ 0x359
 80122a8:	491f      	ldr	r1, [pc, #124]	@ (8012328 <pbuf_cat+0x9c>)
 80122aa:	4820      	ldr	r0, [pc, #128]	@ (801232c <pbuf_cat+0xa0>)
 80122ac:	f008 fff2 	bl	801b294 <iprintf>
 80122b0:	e034      	b.n	801231c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	60fb      	str	r3, [r7, #12]
 80122b6:	e00a      	b.n	80122ce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	891a      	ldrh	r2, [r3, #8]
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	891b      	ldrh	r3, [r3, #8]
 80122c0:	4413      	add	r3, r2
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	60fb      	str	r3, [r7, #12]
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d1f0      	bne.n	80122b8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	891a      	ldrh	r2, [r3, #8]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	895b      	ldrh	r3, [r3, #10]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d006      	beq.n	80122f0 <pbuf_cat+0x64>
 80122e2:	4b10      	ldr	r3, [pc, #64]	@ (8012324 <pbuf_cat+0x98>)
 80122e4:	f240 3262 	movw	r2, #866	@ 0x362
 80122e8:	4911      	ldr	r1, [pc, #68]	@ (8012330 <pbuf_cat+0xa4>)
 80122ea:	4810      	ldr	r0, [pc, #64]	@ (801232c <pbuf_cat+0xa0>)
 80122ec:	f008 ffd2 	bl	801b294 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d006      	beq.n	8012306 <pbuf_cat+0x7a>
 80122f8:	4b0a      	ldr	r3, [pc, #40]	@ (8012324 <pbuf_cat+0x98>)
 80122fa:	f240 3263 	movw	r2, #867	@ 0x363
 80122fe:	490d      	ldr	r1, [pc, #52]	@ (8012334 <pbuf_cat+0xa8>)
 8012300:	480a      	ldr	r0, [pc, #40]	@ (801232c <pbuf_cat+0xa0>)
 8012302:	f008 ffc7 	bl	801b294 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	891a      	ldrh	r2, [r3, #8]
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	891b      	ldrh	r3, [r3, #8]
 801230e:	4413      	add	r3, r2
 8012310:	b29a      	uxth	r2, r3
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	683a      	ldr	r2, [r7, #0]
 801231a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801231c:	3710      	adds	r7, #16
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	0801c884 	.word	0x0801c884
 8012328:	0801ca78 	.word	0x0801ca78
 801232c:	0801c8e4 	.word	0x0801c8e4
 8012330:	0801cab0 	.word	0x0801cab0
 8012334:	0801cae0 	.word	0x0801cae0

08012338 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012342:	6839      	ldr	r1, [r7, #0]
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f7ff ffa1 	bl	801228c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801234a:	6838      	ldr	r0, [r7, #0]
 801234c:	f7ff ff76 	bl	801223c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012350:	bf00      	nop
 8012352:	3708      	adds	r7, #8
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b086      	sub	sp, #24
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012362:	2300      	movs	r3, #0
 8012364:	617b      	str	r3, [r7, #20]
 8012366:	2300      	movs	r3, #0
 8012368:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d008      	beq.n	8012382 <pbuf_copy+0x2a>
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d005      	beq.n	8012382 <pbuf_copy+0x2a>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	891a      	ldrh	r2, [r3, #8]
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	891b      	ldrh	r3, [r3, #8]
 801237e:	429a      	cmp	r2, r3
 8012380:	d209      	bcs.n	8012396 <pbuf_copy+0x3e>
 8012382:	4b57      	ldr	r3, [pc, #348]	@ (80124e0 <pbuf_copy+0x188>)
 8012384:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8012388:	4956      	ldr	r1, [pc, #344]	@ (80124e4 <pbuf_copy+0x18c>)
 801238a:	4857      	ldr	r0, [pc, #348]	@ (80124e8 <pbuf_copy+0x190>)
 801238c:	f008 ff82 	bl	801b294 <iprintf>
 8012390:	f06f 030f 	mvn.w	r3, #15
 8012394:	e09f      	b.n	80124d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	895b      	ldrh	r3, [r3, #10]
 801239a:	461a      	mov	r2, r3
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	1ad2      	subs	r2, r2, r3
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	895b      	ldrh	r3, [r3, #10]
 80123a4:	4619      	mov	r1, r3
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	1acb      	subs	r3, r1, r3
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d306      	bcc.n	80123bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	895b      	ldrh	r3, [r3, #10]
 80123b2:	461a      	mov	r2, r3
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	1ad3      	subs	r3, r2, r3
 80123b8:	60fb      	str	r3, [r7, #12]
 80123ba:	e005      	b.n	80123c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	895b      	ldrh	r3, [r3, #10]
 80123c0:	461a      	mov	r2, r3
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	1ad3      	subs	r3, r2, r3
 80123c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	685a      	ldr	r2, [r3, #4]
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	18d0      	adds	r0, r2, r3
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	685a      	ldr	r2, [r3, #4]
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	4413      	add	r3, r2
 80123d8:	68fa      	ldr	r2, [r7, #12]
 80123da:	4619      	mov	r1, r3
 80123dc:	f009 f893 	bl	801b506 <memcpy>
    offset_to += len;
 80123e0:	697a      	ldr	r2, [r7, #20]
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	4413      	add	r3, r2
 80123e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80123e8:	693a      	ldr	r2, [r7, #16]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	4413      	add	r3, r2
 80123ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	895b      	ldrh	r3, [r3, #10]
 80123f4:	461a      	mov	r2, r3
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	4293      	cmp	r3, r2
 80123fa:	d906      	bls.n	801240a <pbuf_copy+0xb2>
 80123fc:	4b38      	ldr	r3, [pc, #224]	@ (80124e0 <pbuf_copy+0x188>)
 80123fe:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8012402:	493a      	ldr	r1, [pc, #232]	@ (80124ec <pbuf_copy+0x194>)
 8012404:	4838      	ldr	r0, [pc, #224]	@ (80124e8 <pbuf_copy+0x190>)
 8012406:	f008 ff45 	bl	801b294 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	895b      	ldrh	r3, [r3, #10]
 801240e:	461a      	mov	r2, r3
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	4293      	cmp	r3, r2
 8012414:	d906      	bls.n	8012424 <pbuf_copy+0xcc>
 8012416:	4b32      	ldr	r3, [pc, #200]	@ (80124e0 <pbuf_copy+0x188>)
 8012418:	f240 32da 	movw	r2, #986	@ 0x3da
 801241c:	4934      	ldr	r1, [pc, #208]	@ (80124f0 <pbuf_copy+0x198>)
 801241e:	4832      	ldr	r0, [pc, #200]	@ (80124e8 <pbuf_copy+0x190>)
 8012420:	f008 ff38 	bl	801b294 <iprintf>
    if (offset_from >= p_from->len) {
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	895b      	ldrh	r3, [r3, #10]
 8012428:	461a      	mov	r2, r3
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	4293      	cmp	r3, r2
 801242e:	d304      	bcc.n	801243a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012430:	2300      	movs	r3, #0
 8012432:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	895b      	ldrh	r3, [r3, #10]
 801243e:	461a      	mov	r2, r3
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	4293      	cmp	r3, r2
 8012444:	d114      	bne.n	8012470 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012446:	2300      	movs	r3, #0
 8012448:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d10c      	bne.n	8012470 <pbuf_copy+0x118>
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d009      	beq.n	8012470 <pbuf_copy+0x118>
 801245c:	4b20      	ldr	r3, [pc, #128]	@ (80124e0 <pbuf_copy+0x188>)
 801245e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8012462:	4924      	ldr	r1, [pc, #144]	@ (80124f4 <pbuf_copy+0x19c>)
 8012464:	4820      	ldr	r0, [pc, #128]	@ (80124e8 <pbuf_copy+0x190>)
 8012466:	f008 ff15 	bl	801b294 <iprintf>
 801246a:	f06f 030f 	mvn.w	r3, #15
 801246e:	e032      	b.n	80124d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d013      	beq.n	801249e <pbuf_copy+0x146>
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	895a      	ldrh	r2, [r3, #10]
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	891b      	ldrh	r3, [r3, #8]
 801247e:	429a      	cmp	r2, r3
 8012480:	d10d      	bne.n	801249e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d009      	beq.n	801249e <pbuf_copy+0x146>
 801248a:	4b15      	ldr	r3, [pc, #84]	@ (80124e0 <pbuf_copy+0x188>)
 801248c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8012490:	4919      	ldr	r1, [pc, #100]	@ (80124f8 <pbuf_copy+0x1a0>)
 8012492:	4815      	ldr	r0, [pc, #84]	@ (80124e8 <pbuf_copy+0x190>)
 8012494:	f008 fefe 	bl	801b294 <iprintf>
 8012498:	f06f 0305 	mvn.w	r3, #5
 801249c:	e01b      	b.n	80124d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d013      	beq.n	80124cc <pbuf_copy+0x174>
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	895a      	ldrh	r2, [r3, #10]
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	891b      	ldrh	r3, [r3, #8]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d10d      	bne.n	80124cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d009      	beq.n	80124cc <pbuf_copy+0x174>
 80124b8:	4b09      	ldr	r3, [pc, #36]	@ (80124e0 <pbuf_copy+0x188>)
 80124ba:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80124be:	490e      	ldr	r1, [pc, #56]	@ (80124f8 <pbuf_copy+0x1a0>)
 80124c0:	4809      	ldr	r0, [pc, #36]	@ (80124e8 <pbuf_copy+0x190>)
 80124c2:	f008 fee7 	bl	801b294 <iprintf>
 80124c6:	f06f 0305 	mvn.w	r3, #5
 80124ca:	e004      	b.n	80124d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	f47f af61 	bne.w	8012396 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80124d4:	2300      	movs	r3, #0
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3718      	adds	r7, #24
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	0801c884 	.word	0x0801c884
 80124e4:	0801cb2c 	.word	0x0801cb2c
 80124e8:	0801c8e4 	.word	0x0801c8e4
 80124ec:	0801cb5c 	.word	0x0801cb5c
 80124f0:	0801cb74 	.word	0x0801cb74
 80124f4:	0801cb90 	.word	0x0801cb90
 80124f8:	0801cba0 	.word	0x0801cba0

080124fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b088      	sub	sp, #32
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	4611      	mov	r1, r2
 8012508:	461a      	mov	r2, r3
 801250a:	460b      	mov	r3, r1
 801250c:	80fb      	strh	r3, [r7, #6]
 801250e:	4613      	mov	r3, r2
 8012510:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012512:	2300      	movs	r3, #0
 8012514:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012516:	2300      	movs	r3, #0
 8012518:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d108      	bne.n	8012532 <pbuf_copy_partial+0x36>
 8012520:	4b2b      	ldr	r3, [pc, #172]	@ (80125d0 <pbuf_copy_partial+0xd4>)
 8012522:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012526:	492b      	ldr	r1, [pc, #172]	@ (80125d4 <pbuf_copy_partial+0xd8>)
 8012528:	482b      	ldr	r0, [pc, #172]	@ (80125d8 <pbuf_copy_partial+0xdc>)
 801252a:	f008 feb3 	bl	801b294 <iprintf>
 801252e:	2300      	movs	r3, #0
 8012530:	e04a      	b.n	80125c8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d108      	bne.n	801254a <pbuf_copy_partial+0x4e>
 8012538:	4b25      	ldr	r3, [pc, #148]	@ (80125d0 <pbuf_copy_partial+0xd4>)
 801253a:	f240 420b 	movw	r2, #1035	@ 0x40b
 801253e:	4927      	ldr	r1, [pc, #156]	@ (80125dc <pbuf_copy_partial+0xe0>)
 8012540:	4825      	ldr	r0, [pc, #148]	@ (80125d8 <pbuf_copy_partial+0xdc>)
 8012542:	f008 fea7 	bl	801b294 <iprintf>
 8012546:	2300      	movs	r3, #0
 8012548:	e03e      	b.n	80125c8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	61fb      	str	r3, [r7, #28]
 801254e:	e034      	b.n	80125ba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012550:	88bb      	ldrh	r3, [r7, #4]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d00a      	beq.n	801256c <pbuf_copy_partial+0x70>
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	895b      	ldrh	r3, [r3, #10]
 801255a:	88ba      	ldrh	r2, [r7, #4]
 801255c:	429a      	cmp	r2, r3
 801255e:	d305      	bcc.n	801256c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	895b      	ldrh	r3, [r3, #10]
 8012564:	88ba      	ldrh	r2, [r7, #4]
 8012566:	1ad3      	subs	r3, r2, r3
 8012568:	80bb      	strh	r3, [r7, #4]
 801256a:	e023      	b.n	80125b4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	895a      	ldrh	r2, [r3, #10]
 8012570:	88bb      	ldrh	r3, [r7, #4]
 8012572:	1ad3      	subs	r3, r2, r3
 8012574:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012576:	8b3a      	ldrh	r2, [r7, #24]
 8012578:	88fb      	ldrh	r3, [r7, #6]
 801257a:	429a      	cmp	r2, r3
 801257c:	d901      	bls.n	8012582 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801257e:	88fb      	ldrh	r3, [r7, #6]
 8012580:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012582:	8b7b      	ldrh	r3, [r7, #26]
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	18d0      	adds	r0, r2, r3
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	685a      	ldr	r2, [r3, #4]
 801258c:	88bb      	ldrh	r3, [r7, #4]
 801258e:	4413      	add	r3, r2
 8012590:	8b3a      	ldrh	r2, [r7, #24]
 8012592:	4619      	mov	r1, r3
 8012594:	f008 ffb7 	bl	801b506 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012598:	8afa      	ldrh	r2, [r7, #22]
 801259a:	8b3b      	ldrh	r3, [r7, #24]
 801259c:	4413      	add	r3, r2
 801259e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80125a0:	8b7a      	ldrh	r2, [r7, #26]
 80125a2:	8b3b      	ldrh	r3, [r7, #24]
 80125a4:	4413      	add	r3, r2
 80125a6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80125a8:	88fa      	ldrh	r2, [r7, #6]
 80125aa:	8b3b      	ldrh	r3, [r7, #24]
 80125ac:	1ad3      	subs	r3, r2, r3
 80125ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80125b0:	2300      	movs	r3, #0
 80125b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	61fb      	str	r3, [r7, #28]
 80125ba:	88fb      	ldrh	r3, [r7, #6]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d002      	beq.n	80125c6 <pbuf_copy_partial+0xca>
 80125c0:	69fb      	ldr	r3, [r7, #28]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d1c4      	bne.n	8012550 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80125c6:	8afb      	ldrh	r3, [r7, #22]
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3720      	adds	r7, #32
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	0801c884 	.word	0x0801c884
 80125d4:	0801cbcc 	.word	0x0801cbcc
 80125d8:	0801c8e4 	.word	0x0801c8e4
 80125dc:	0801cbec 	.word	0x0801cbec

080125e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	4603      	mov	r3, r0
 80125e8:	603a      	str	r2, [r7, #0]
 80125ea:	71fb      	strb	r3, [r7, #7]
 80125ec:	460b      	mov	r3, r1
 80125ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	8919      	ldrh	r1, [r3, #8]
 80125f4:	88ba      	ldrh	r2, [r7, #4]
 80125f6:	79fb      	ldrb	r3, [r7, #7]
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7ff fa91 	bl	8011b20 <pbuf_alloc>
 80125fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d101      	bne.n	801260a <pbuf_clone+0x2a>
    return NULL;
 8012606:	2300      	movs	r3, #0
 8012608:	e011      	b.n	801262e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801260a:	6839      	ldr	r1, [r7, #0]
 801260c:	68f8      	ldr	r0, [r7, #12]
 801260e:	f7ff fea3 	bl	8012358 <pbuf_copy>
 8012612:	4603      	mov	r3, r0
 8012614:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012616:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d006      	beq.n	801262c <pbuf_clone+0x4c>
 801261e:	4b06      	ldr	r3, [pc, #24]	@ (8012638 <pbuf_clone+0x58>)
 8012620:	f240 5224 	movw	r2, #1316	@ 0x524
 8012624:	4905      	ldr	r1, [pc, #20]	@ (801263c <pbuf_clone+0x5c>)
 8012626:	4806      	ldr	r0, [pc, #24]	@ (8012640 <pbuf_clone+0x60>)
 8012628:	f008 fe34 	bl	801b294 <iprintf>
  return q;
 801262c:	68fb      	ldr	r3, [r7, #12]
}
 801262e:	4618      	mov	r0, r3
 8012630:	3710      	adds	r7, #16
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	0801c884 	.word	0x0801c884
 801263c:	0801ccf8 	.word	0x0801ccf8
 8012640:	0801c8e4 	.word	0x0801c8e4

08012644 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8012644:	b480      	push	{r7}
 8012646:	b083      	sub	sp, #12
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	460b      	mov	r3, r1
 801264e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	7a1b      	ldrb	r3, [r3, #8]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d00b      	beq.n	8012670 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	7a1a      	ldrb	r2, [r3, #8]
 801265c:	4b15      	ldr	r3, [pc, #84]	@ (80126b4 <raw_input_local_match+0x70>)
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012664:	3301      	adds	r3, #1
 8012666:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012668:	429a      	cmp	r2, r3
 801266a:	d001      	beq.n	8012670 <raw_input_local_match+0x2c>
    return 0;
 801266c:	2300      	movs	r3, #0
 801266e:	e01b      	b.n	80126a8 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012670:	78fb      	ldrb	r3, [r7, #3]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d008      	beq.n	8012688 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d003      	beq.n	8012684 <raw_input_local_match+0x40>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d110      	bne.n	80126a6 <raw_input_local_match+0x62>
          return 1;
 8012684:	2301      	movs	r3, #1
 8012686:	e00f      	b.n	80126a8 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d009      	beq.n	80126a2 <raw_input_local_match+0x5e>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d005      	beq.n	80126a2 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	4b06      	ldr	r3, [pc, #24]	@ (80126b4 <raw_input_local_match+0x70>)
 801269c:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 801269e:	429a      	cmp	r2, r3
 80126a0:	d101      	bne.n	80126a6 <raw_input_local_match+0x62>
        return 1;
 80126a2:	2301      	movs	r3, #1
 80126a4:	e000      	b.n	80126a8 <raw_input_local_match+0x64>
      }
  }

  return 0;
 80126a6:	2300      	movs	r3, #0
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	370c      	adds	r7, #12
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr
 80126b4:	2400e078 	.word	0x2400e078

080126b8 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80126b8:	b590      	push	{r4, r7, lr}
 80126ba:	b089      	sub	sp, #36	@ 0x24
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 80126c2:	2300      	movs	r3, #0
 80126c4:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80126c6:	4b37      	ldr	r3, [pc, #220]	@ (80127a4 <raw_input+0xec>)
 80126c8:	695b      	ldr	r3, [r3, #20]
 80126ca:	4a36      	ldr	r2, [pc, #216]	@ (80127a4 <raw_input+0xec>)
 80126cc:	6812      	ldr	r2, [r2, #0]
 80126ce:	4611      	mov	r1, r2
 80126d0:	4618      	mov	r0, r3
 80126d2:	f007 fc07 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 80126d6:	4603      	mov	r3, r0
 80126d8:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	7a5b      	ldrb	r3, [r3, #9]
 80126e0:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 80126e2:	2300      	movs	r3, #0
 80126e4:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 80126e6:	4b30      	ldr	r3, [pc, #192]	@ (80127a8 <raw_input+0xf0>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 80126ec:	e052      	b.n	8012794 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	7c1b      	ldrb	r3, [r3, #16]
 80126f2:	461a      	mov	r2, r3
 80126f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d146      	bne.n	801278a <raw_input+0xd2>
 80126fc:	7dbb      	ldrb	r3, [r7, #22]
 80126fe:	4619      	mov	r1, r3
 8012700:	69f8      	ldr	r0, [r7, #28]
 8012702:	f7ff ff9f 	bl	8012644 <raw_input_local_match>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d03e      	beq.n	801278a <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	7c5b      	ldrb	r3, [r3, #17]
 8012710:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8012714:	2b00      	cmp	r3, #0
 8012716:	d005      	beq.n	8012724 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	685a      	ldr	r2, [r3, #4]
 801271c:	4b21      	ldr	r3, [pc, #132]	@ (80127a4 <raw_input+0xec>)
 801271e:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8012720:	429a      	cmp	r2, r3
 8012722:	d132      	bne.n	801278a <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	695b      	ldr	r3, [r3, #20]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d02e      	beq.n	801278a <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 8012732:	2302      	movs	r3, #2
 8012734:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	695c      	ldr	r4, [r3, #20]
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	6998      	ldr	r0, [r3, #24]
 801273e:	4b1b      	ldr	r3, [pc, #108]	@ (80127ac <raw_input+0xf4>)
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	69f9      	ldr	r1, [r7, #28]
 8012744:	47a0      	blx	r4
 8012746:	4603      	mov	r3, r0
 8012748:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 801274a:	7bfb      	ldrb	r3, [r7, #15]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d011      	beq.n	8012774 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 8012750:	2300      	movs	r3, #0
 8012752:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8012754:	69bb      	ldr	r3, [r7, #24]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d00a      	beq.n	8012770 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	68da      	ldr	r2, [r3, #12]
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8012762:	4b11      	ldr	r3, [pc, #68]	@ (80127a8 <raw_input+0xf0>)
 8012764:	681a      	ldr	r2, [r3, #0]
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 801276a:	4a0f      	ldr	r2, [pc, #60]	@ (80127a8 <raw_input+0xf0>)
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8012770:	2301      	movs	r3, #1
 8012772:	e013      	b.n	801279c <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	693a      	ldr	r2, [r7, #16]
 801277a:	429a      	cmp	r2, r3
 801277c:	d005      	beq.n	801278a <raw_input+0xd2>
 801277e:	4b0c      	ldr	r3, [pc, #48]	@ (80127b0 <raw_input+0xf8>)
 8012780:	22c0      	movs	r2, #192	@ 0xc0
 8012782:	490c      	ldr	r1, [pc, #48]	@ (80127b4 <raw_input+0xfc>)
 8012784:	480c      	ldr	r0, [pc, #48]	@ (80127b8 <raw_input+0x100>)
 8012786:	f008 fd85 	bl	801b294 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 801278a:	69fb      	ldr	r3, [r7, #28]
 801278c:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	68db      	ldr	r3, [r3, #12]
 8012792:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1a9      	bne.n	80126ee <raw_input+0x36>
  }
  return ret;
 801279a:	7dfb      	ldrb	r3, [r7, #23]
}
 801279c:	4618      	mov	r0, r3
 801279e:	3724      	adds	r7, #36	@ 0x24
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd90      	pop	{r4, r7, pc}
 80127a4:	2400e078 	.word	0x2400e078
 80127a8:	24014bb0 	.word	0x24014bb0
 80127ac:	2400e088 	.word	0x2400e088
 80127b0:	0801cd0c 	.word	0x0801cd0c
 80127b4:	0801cd3c 	.word	0x0801cd3c
 80127b8:	0801cd88 	.word	0x0801cd88

080127bc <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127bc:	b480      	push	{r7}
 80127be:	b085      	sub	sp, #20
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d01e      	beq.n	801280a <raw_netif_ip_addr_changed+0x4e>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d01a      	beq.n	801280a <raw_netif_ip_addr_changed+0x4e>
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d017      	beq.n	801280a <raw_netif_ip_addr_changed+0x4e>
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d013      	beq.n	801280a <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80127e2:	4b0d      	ldr	r3, [pc, #52]	@ (8012818 <raw_netif_ip_addr_changed+0x5c>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	60fb      	str	r3, [r7, #12]
 80127e8:	e00c      	b.n	8012804 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d103      	bne.n	80127fe <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	68db      	ldr	r3, [r3, #12]
 8012802:	60fb      	str	r3, [r7, #12]
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d1ef      	bne.n	80127ea <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801280a:	bf00      	nop
 801280c:	3714      	adds	r7, #20
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	24014bb0 	.word	0x24014bb0

0801281c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012820:	f008 fc38 	bl	801b094 <rand>
 8012824:	4603      	mov	r3, r0
 8012826:	b29b      	uxth	r3, r3
 8012828:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801282c:	b29b      	uxth	r3, r3
 801282e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012832:	b29a      	uxth	r2, r3
 8012834:	4b01      	ldr	r3, [pc, #4]	@ (801283c <tcp_init+0x20>)
 8012836:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012838:	bf00      	nop
 801283a:	bd80      	pop	{r7, pc}
 801283c:	240049e4 	.word	0x240049e4

08012840 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	7d1b      	ldrb	r3, [r3, #20]
 801284c:	2b01      	cmp	r3, #1
 801284e:	d105      	bne.n	801285c <tcp_free+0x1c>
 8012850:	4b06      	ldr	r3, [pc, #24]	@ (801286c <tcp_free+0x2c>)
 8012852:	22d4      	movs	r2, #212	@ 0xd4
 8012854:	4906      	ldr	r1, [pc, #24]	@ (8012870 <tcp_free+0x30>)
 8012856:	4807      	ldr	r0, [pc, #28]	@ (8012874 <tcp_free+0x34>)
 8012858:	f008 fd1c 	bl	801b294 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801285c:	6879      	ldr	r1, [r7, #4]
 801285e:	2002      	movs	r0, #2
 8012860:	f7fe fd9a 	bl	8011398 <memp_free>
}
 8012864:	bf00      	nop
 8012866:	3708      	adds	r7, #8
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}
 801286c:	0801ce50 	.word	0x0801ce50
 8012870:	0801ce80 	.word	0x0801ce80
 8012874:	0801ce94 	.word	0x0801ce94

08012878 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	7d1b      	ldrb	r3, [r3, #20]
 8012884:	2b01      	cmp	r3, #1
 8012886:	d105      	bne.n	8012894 <tcp_free_listen+0x1c>
 8012888:	4b06      	ldr	r3, [pc, #24]	@ (80128a4 <tcp_free_listen+0x2c>)
 801288a:	22df      	movs	r2, #223	@ 0xdf
 801288c:	4906      	ldr	r1, [pc, #24]	@ (80128a8 <tcp_free_listen+0x30>)
 801288e:	4807      	ldr	r0, [pc, #28]	@ (80128ac <tcp_free_listen+0x34>)
 8012890:	f008 fd00 	bl	801b294 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012894:	6879      	ldr	r1, [r7, #4]
 8012896:	2003      	movs	r0, #3
 8012898:	f7fe fd7e 	bl	8011398 <memp_free>
}
 801289c:	bf00      	nop
 801289e:	3708      	adds	r7, #8
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	0801ce50 	.word	0x0801ce50
 80128a8:	0801cebc 	.word	0x0801cebc
 80128ac:	0801ce94 	.word	0x0801ce94

080128b0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80128b4:	f000 fea6 	bl	8013604 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80128b8:	4b07      	ldr	r3, [pc, #28]	@ (80128d8 <tcp_tmr+0x28>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	3301      	adds	r3, #1
 80128be:	b2da      	uxtb	r2, r3
 80128c0:	4b05      	ldr	r3, [pc, #20]	@ (80128d8 <tcp_tmr+0x28>)
 80128c2:	701a      	strb	r2, [r3, #0]
 80128c4:	4b04      	ldr	r3, [pc, #16]	@ (80128d8 <tcp_tmr+0x28>)
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	f003 0301 	and.w	r3, r3, #1
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d001      	beq.n	80128d4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80128d0:	f000 fb56 	bl	8012f80 <tcp_slowtmr>
  }
}
 80128d4:	bf00      	nop
 80128d6:	bd80      	pop	{r7, pc}
 80128d8:	24014bc9 	.word	0x24014bc9

080128dc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b084      	sub	sp, #16
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d105      	bne.n	80128f8 <tcp_remove_listener+0x1c>
 80128ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012924 <tcp_remove_listener+0x48>)
 80128ee:	22ff      	movs	r2, #255	@ 0xff
 80128f0:	490d      	ldr	r1, [pc, #52]	@ (8012928 <tcp_remove_listener+0x4c>)
 80128f2:	480e      	ldr	r0, [pc, #56]	@ (801292c <tcp_remove_listener+0x50>)
 80128f4:	f008 fcce 	bl	801b294 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	60fb      	str	r3, [r7, #12]
 80128fc:	e00a      	b.n	8012914 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012902:	683a      	ldr	r2, [r7, #0]
 8012904:	429a      	cmp	r2, r3
 8012906:	d102      	bne.n	801290e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2200      	movs	r2, #0
 801290c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	68db      	ldr	r3, [r3, #12]
 8012912:	60fb      	str	r3, [r7, #12]
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d1f1      	bne.n	80128fe <tcp_remove_listener+0x22>
    }
  }
}
 801291a:	bf00      	nop
 801291c:	bf00      	nop
 801291e:	3710      	adds	r7, #16
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}
 8012924:	0801ce50 	.word	0x0801ce50
 8012928:	0801ced8 	.word	0x0801ced8
 801292c:	0801ce94 	.word	0x0801ce94

08012930 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d106      	bne.n	801294c <tcp_listen_closed+0x1c>
 801293e:	4b14      	ldr	r3, [pc, #80]	@ (8012990 <tcp_listen_closed+0x60>)
 8012940:	f240 1211 	movw	r2, #273	@ 0x111
 8012944:	4913      	ldr	r1, [pc, #76]	@ (8012994 <tcp_listen_closed+0x64>)
 8012946:	4814      	ldr	r0, [pc, #80]	@ (8012998 <tcp_listen_closed+0x68>)
 8012948:	f008 fca4 	bl	801b294 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	7d1b      	ldrb	r3, [r3, #20]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d006      	beq.n	8012962 <tcp_listen_closed+0x32>
 8012954:	4b0e      	ldr	r3, [pc, #56]	@ (8012990 <tcp_listen_closed+0x60>)
 8012956:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801295a:	4910      	ldr	r1, [pc, #64]	@ (801299c <tcp_listen_closed+0x6c>)
 801295c:	480e      	ldr	r0, [pc, #56]	@ (8012998 <tcp_listen_closed+0x68>)
 801295e:	f008 fc99 	bl	801b294 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012962:	2301      	movs	r3, #1
 8012964:	60fb      	str	r3, [r7, #12]
 8012966:	e00b      	b.n	8012980 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012968:	4a0d      	ldr	r2, [pc, #52]	@ (80129a0 <tcp_listen_closed+0x70>)
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	6879      	ldr	r1, [r7, #4]
 8012974:	4618      	mov	r0, r3
 8012976:	f7ff ffb1 	bl	80128dc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	3301      	adds	r3, #1
 801297e:	60fb      	str	r3, [r7, #12]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2b03      	cmp	r3, #3
 8012984:	d9f0      	bls.n	8012968 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012986:	bf00      	nop
 8012988:	bf00      	nop
 801298a:	3710      	adds	r7, #16
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}
 8012990:	0801ce50 	.word	0x0801ce50
 8012994:	0801cf00 	.word	0x0801cf00
 8012998:	0801ce94 	.word	0x0801ce94
 801299c:	0801cf0c 	.word	0x0801cf0c
 80129a0:	0801eec8 	.word	0x0801eec8

080129a4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80129a4:	b5b0      	push	{r4, r5, r7, lr}
 80129a6:	b088      	sub	sp, #32
 80129a8:	af04      	add	r7, sp, #16
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	460b      	mov	r3, r1
 80129ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d106      	bne.n	80129c4 <tcp_close_shutdown+0x20>
 80129b6:	4b63      	ldr	r3, [pc, #396]	@ (8012b44 <tcp_close_shutdown+0x1a0>)
 80129b8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80129bc:	4962      	ldr	r1, [pc, #392]	@ (8012b48 <tcp_close_shutdown+0x1a4>)
 80129be:	4863      	ldr	r0, [pc, #396]	@ (8012b4c <tcp_close_shutdown+0x1a8>)
 80129c0:	f008 fc68 	bl	801b294 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80129c4:	78fb      	ldrb	r3, [r7, #3]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d067      	beq.n	8012a9a <tcp_close_shutdown+0xf6>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	7d1b      	ldrb	r3, [r3, #20]
 80129ce:	2b04      	cmp	r3, #4
 80129d0:	d003      	beq.n	80129da <tcp_close_shutdown+0x36>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	7d1b      	ldrb	r3, [r3, #20]
 80129d6:	2b07      	cmp	r3, #7
 80129d8:	d15f      	bne.n	8012a9a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d105      	bne.n	80129ee <tcp_close_shutdown+0x4a>
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80129e6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d055      	beq.n	8012a9a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	8b5b      	ldrh	r3, [r3, #26]
 80129f2:	f003 0310 	and.w	r3, r3, #16
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d106      	bne.n	8012a08 <tcp_close_shutdown+0x64>
 80129fa:	4b52      	ldr	r3, [pc, #328]	@ (8012b44 <tcp_close_shutdown+0x1a0>)
 80129fc:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012a00:	4953      	ldr	r1, [pc, #332]	@ (8012b50 <tcp_close_shutdown+0x1ac>)
 8012a02:	4852      	ldr	r0, [pc, #328]	@ (8012b4c <tcp_close_shutdown+0x1a8>)
 8012a04:	f008 fc46 	bl	801b294 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012a10:	687d      	ldr	r5, [r7, #4]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	3304      	adds	r3, #4
 8012a16:	687a      	ldr	r2, [r7, #4]
 8012a18:	8ad2      	ldrh	r2, [r2, #22]
 8012a1a:	6879      	ldr	r1, [r7, #4]
 8012a1c:	8b09      	ldrh	r1, [r1, #24]
 8012a1e:	9102      	str	r1, [sp, #8]
 8012a20:	9201      	str	r2, [sp, #4]
 8012a22:	9300      	str	r3, [sp, #0]
 8012a24:	462b      	mov	r3, r5
 8012a26:	4622      	mov	r2, r4
 8012a28:	4601      	mov	r1, r0
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f004 fe92 	bl	8017754 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f001 f8cb 	bl	8013bcc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012a36:	4b47      	ldr	r3, [pc, #284]	@ (8012b54 <tcp_close_shutdown+0x1b0>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	687a      	ldr	r2, [r7, #4]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d105      	bne.n	8012a4c <tcp_close_shutdown+0xa8>
 8012a40:	4b44      	ldr	r3, [pc, #272]	@ (8012b54 <tcp_close_shutdown+0x1b0>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	68db      	ldr	r3, [r3, #12]
 8012a46:	4a43      	ldr	r2, [pc, #268]	@ (8012b54 <tcp_close_shutdown+0x1b0>)
 8012a48:	6013      	str	r3, [r2, #0]
 8012a4a:	e013      	b.n	8012a74 <tcp_close_shutdown+0xd0>
 8012a4c:	4b41      	ldr	r3, [pc, #260]	@ (8012b54 <tcp_close_shutdown+0x1b0>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	60fb      	str	r3, [r7, #12]
 8012a52:	e00c      	b.n	8012a6e <tcp_close_shutdown+0xca>
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d104      	bne.n	8012a68 <tcp_close_shutdown+0xc4>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	68da      	ldr	r2, [r3, #12]
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	60da      	str	r2, [r3, #12]
 8012a66:	e005      	b.n	8012a74 <tcp_close_shutdown+0xd0>
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	60fb      	str	r3, [r7, #12]
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d1ef      	bne.n	8012a54 <tcp_close_shutdown+0xb0>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2200      	movs	r2, #0
 8012a78:	60da      	str	r2, [r3, #12]
 8012a7a:	4b37      	ldr	r3, [pc, #220]	@ (8012b58 <tcp_close_shutdown+0x1b4>)
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012a80:	4b36      	ldr	r3, [pc, #216]	@ (8012b5c <tcp_close_shutdown+0x1b8>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d102      	bne.n	8012a90 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012a8a:	f003 fd61 	bl	8016550 <tcp_trigger_input_pcb_close>
 8012a8e:	e002      	b.n	8012a96 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff fed5 	bl	8012840 <tcp_free>
      }
      return ERR_OK;
 8012a96:	2300      	movs	r3, #0
 8012a98:	e050      	b.n	8012b3c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	7d1b      	ldrb	r3, [r3, #20]
 8012a9e:	2b02      	cmp	r3, #2
 8012aa0:	d03b      	beq.n	8012b1a <tcp_close_shutdown+0x176>
 8012aa2:	2b02      	cmp	r3, #2
 8012aa4:	dc44      	bgt.n	8012b30 <tcp_close_shutdown+0x18c>
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d002      	beq.n	8012ab0 <tcp_close_shutdown+0x10c>
 8012aaa:	2b01      	cmp	r3, #1
 8012aac:	d02a      	beq.n	8012b04 <tcp_close_shutdown+0x160>
 8012aae:	e03f      	b.n	8012b30 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	8adb      	ldrh	r3, [r3, #22]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d021      	beq.n	8012afc <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012ab8:	4b29      	ldr	r3, [pc, #164]	@ (8012b60 <tcp_close_shutdown+0x1bc>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	d105      	bne.n	8012ace <tcp_close_shutdown+0x12a>
 8012ac2:	4b27      	ldr	r3, [pc, #156]	@ (8012b60 <tcp_close_shutdown+0x1bc>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	4a25      	ldr	r2, [pc, #148]	@ (8012b60 <tcp_close_shutdown+0x1bc>)
 8012aca:	6013      	str	r3, [r2, #0]
 8012acc:	e013      	b.n	8012af6 <tcp_close_shutdown+0x152>
 8012ace:	4b24      	ldr	r3, [pc, #144]	@ (8012b60 <tcp_close_shutdown+0x1bc>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	60bb      	str	r3, [r7, #8]
 8012ad4:	e00c      	b.n	8012af0 <tcp_close_shutdown+0x14c>
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	68db      	ldr	r3, [r3, #12]
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d104      	bne.n	8012aea <tcp_close_shutdown+0x146>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	68da      	ldr	r2, [r3, #12]
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	60da      	str	r2, [r3, #12]
 8012ae8:	e005      	b.n	8012af6 <tcp_close_shutdown+0x152>
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	60bb      	str	r3, [r7, #8]
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d1ef      	bne.n	8012ad6 <tcp_close_shutdown+0x132>
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2200      	movs	r2, #0
 8012afa:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f7ff fe9f 	bl	8012840 <tcp_free>
      break;
 8012b02:	e01a      	b.n	8012b3a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff ff13 	bl	8012930 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012b0a:	6879      	ldr	r1, [r7, #4]
 8012b0c:	4815      	ldr	r0, [pc, #84]	@ (8012b64 <tcp_close_shutdown+0x1c0>)
 8012b0e:	f001 f8ad 	bl	8013c6c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f7ff feb0 	bl	8012878 <tcp_free_listen>
      break;
 8012b18:	e00f      	b.n	8012b3a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012b1a:	6879      	ldr	r1, [r7, #4]
 8012b1c:	480d      	ldr	r0, [pc, #52]	@ (8012b54 <tcp_close_shutdown+0x1b0>)
 8012b1e:	f001 f8a5 	bl	8013c6c <tcp_pcb_remove>
 8012b22:	4b0d      	ldr	r3, [pc, #52]	@ (8012b58 <tcp_close_shutdown+0x1b4>)
 8012b24:	2201      	movs	r2, #1
 8012b26:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f7ff fe89 	bl	8012840 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012b2e:	e004      	b.n	8012b3a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f000 f819 	bl	8012b68 <tcp_close_shutdown_fin>
 8012b36:	4603      	mov	r3, r0
 8012b38:	e000      	b.n	8012b3c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8012b3a:	2300      	movs	r3, #0
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3710      	adds	r7, #16
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bdb0      	pop	{r4, r5, r7, pc}
 8012b44:	0801ce50 	.word	0x0801ce50
 8012b48:	0801cf24 	.word	0x0801cf24
 8012b4c:	0801ce94 	.word	0x0801ce94
 8012b50:	0801cf44 	.word	0x0801cf44
 8012b54:	24014bc0 	.word	0x24014bc0
 8012b58:	24014bc8 	.word	0x24014bc8
 8012b5c:	24014c00 	.word	0x24014c00
 8012b60:	24014bb8 	.word	0x24014bb8
 8012b64:	24014bbc 	.word	0x24014bbc

08012b68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d106      	bne.n	8012b84 <tcp_close_shutdown_fin+0x1c>
 8012b76:	4b2e      	ldr	r3, [pc, #184]	@ (8012c30 <tcp_close_shutdown_fin+0xc8>)
 8012b78:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8012b7c:	492d      	ldr	r1, [pc, #180]	@ (8012c34 <tcp_close_shutdown_fin+0xcc>)
 8012b7e:	482e      	ldr	r0, [pc, #184]	@ (8012c38 <tcp_close_shutdown_fin+0xd0>)
 8012b80:	f008 fb88 	bl	801b294 <iprintf>

  switch (pcb->state) {
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	7d1b      	ldrb	r3, [r3, #20]
 8012b88:	2b07      	cmp	r3, #7
 8012b8a:	d020      	beq.n	8012bce <tcp_close_shutdown_fin+0x66>
 8012b8c:	2b07      	cmp	r3, #7
 8012b8e:	dc2b      	bgt.n	8012be8 <tcp_close_shutdown_fin+0x80>
 8012b90:	2b03      	cmp	r3, #3
 8012b92:	d002      	beq.n	8012b9a <tcp_close_shutdown_fin+0x32>
 8012b94:	2b04      	cmp	r3, #4
 8012b96:	d00d      	beq.n	8012bb4 <tcp_close_shutdown_fin+0x4c>
 8012b98:	e026      	b.n	8012be8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f003 fee8 	bl	8016970 <tcp_send_fin>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d11f      	bne.n	8012bec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2205      	movs	r2, #5
 8012bb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012bb2:	e01b      	b.n	8012bec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f003 fedb 	bl	8016970 <tcp_send_fin>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d114      	bne.n	8012bf0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2205      	movs	r2, #5
 8012bca:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012bcc:	e010      	b.n	8012bf0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f003 fece 	bl	8016970 <tcp_send_fin>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d109      	bne.n	8012bf4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2209      	movs	r2, #9
 8012be4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012be6:	e005      	b.n	8012bf4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012be8:	2300      	movs	r3, #0
 8012bea:	e01c      	b.n	8012c26 <tcp_close_shutdown_fin+0xbe>
      break;
 8012bec:	bf00      	nop
 8012bee:	e002      	b.n	8012bf6 <tcp_close_shutdown_fin+0x8e>
      break;
 8012bf0:	bf00      	nop
 8012bf2:	e000      	b.n	8012bf6 <tcp_close_shutdown_fin+0x8e>
      break;
 8012bf4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d103      	bne.n	8012c06 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f003 fff4 	bl	8016bec <tcp_output>
 8012c04:	e00d      	b.n	8012c22 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c0e:	d108      	bne.n	8012c22 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	8b5b      	ldrh	r3, [r3, #26]
 8012c14:	f043 0308 	orr.w	r3, r3, #8
 8012c18:	b29a      	uxth	r2, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	e001      	b.n	8012c26 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3710      	adds	r7, #16
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	0801ce50 	.word	0x0801ce50
 8012c34:	0801cf00 	.word	0x0801cf00
 8012c38:	0801ce94 	.word	0x0801ce94

08012c3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d109      	bne.n	8012c5e <tcp_close+0x22>
 8012c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8012c88 <tcp_close+0x4c>)
 8012c4c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012c50:	490e      	ldr	r1, [pc, #56]	@ (8012c8c <tcp_close+0x50>)
 8012c52:	480f      	ldr	r0, [pc, #60]	@ (8012c90 <tcp_close+0x54>)
 8012c54:	f008 fb1e 	bl	801b294 <iprintf>
 8012c58:	f06f 030f 	mvn.w	r3, #15
 8012c5c:	e00f      	b.n	8012c7e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	7d1b      	ldrb	r3, [r3, #20]
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d006      	beq.n	8012c74 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	8b5b      	ldrh	r3, [r3, #26]
 8012c6a:	f043 0310 	orr.w	r3, r3, #16
 8012c6e:	b29a      	uxth	r2, r3
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012c74:	2101      	movs	r1, #1
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f7ff fe94 	bl	80129a4 <tcp_close_shutdown>
 8012c7c:	4603      	mov	r3, r0
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3708      	adds	r7, #8
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	0801ce50 	.word	0x0801ce50
 8012c8c:	0801cf60 	.word	0x0801cf60
 8012c90:	0801ce94 	.word	0x0801ce94

08012c94 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b08e      	sub	sp, #56	@ 0x38
 8012c98:	af04      	add	r7, sp, #16
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d107      	bne.n	8012cb4 <tcp_abandon+0x20>
 8012ca4:	4b52      	ldr	r3, [pc, #328]	@ (8012df0 <tcp_abandon+0x15c>)
 8012ca6:	f240 223d 	movw	r2, #573	@ 0x23d
 8012caa:	4952      	ldr	r1, [pc, #328]	@ (8012df4 <tcp_abandon+0x160>)
 8012cac:	4852      	ldr	r0, [pc, #328]	@ (8012df8 <tcp_abandon+0x164>)
 8012cae:	f008 faf1 	bl	801b294 <iprintf>
 8012cb2:	e099      	b.n	8012de8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	7d1b      	ldrb	r3, [r3, #20]
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d106      	bne.n	8012cca <tcp_abandon+0x36>
 8012cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8012df0 <tcp_abandon+0x15c>)
 8012cbe:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012cc2:	494e      	ldr	r1, [pc, #312]	@ (8012dfc <tcp_abandon+0x168>)
 8012cc4:	484c      	ldr	r0, [pc, #304]	@ (8012df8 <tcp_abandon+0x164>)
 8012cc6:	f008 fae5 	bl	801b294 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	7d1b      	ldrb	r3, [r3, #20]
 8012cce:	2b0a      	cmp	r3, #10
 8012cd0:	d107      	bne.n	8012ce2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012cd2:	6879      	ldr	r1, [r7, #4]
 8012cd4:	484a      	ldr	r0, [pc, #296]	@ (8012e00 <tcp_abandon+0x16c>)
 8012cd6:	f000 ffc9 	bl	8013c6c <tcp_pcb_remove>
    tcp_free(pcb);
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f7ff fdb0 	bl	8012840 <tcp_free>
 8012ce0:	e082      	b.n	8012de8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012cee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cf4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012cfc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	691b      	ldr	r3, [r3, #16]
 8012d02:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	7d1b      	ldrb	r3, [r3, #20]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d126      	bne.n	8012d5a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	8adb      	ldrh	r3, [r3, #22]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d02e      	beq.n	8012d72 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012d14:	4b3b      	ldr	r3, [pc, #236]	@ (8012e04 <tcp_abandon+0x170>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d105      	bne.n	8012d2a <tcp_abandon+0x96>
 8012d1e:	4b39      	ldr	r3, [pc, #228]	@ (8012e04 <tcp_abandon+0x170>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	4a37      	ldr	r2, [pc, #220]	@ (8012e04 <tcp_abandon+0x170>)
 8012d26:	6013      	str	r3, [r2, #0]
 8012d28:	e013      	b.n	8012d52 <tcp_abandon+0xbe>
 8012d2a:	4b36      	ldr	r3, [pc, #216]	@ (8012e04 <tcp_abandon+0x170>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	61fb      	str	r3, [r7, #28]
 8012d30:	e00c      	b.n	8012d4c <tcp_abandon+0xb8>
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	68db      	ldr	r3, [r3, #12]
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d104      	bne.n	8012d46 <tcp_abandon+0xb2>
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	68da      	ldr	r2, [r3, #12]
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	60da      	str	r2, [r3, #12]
 8012d44:	e005      	b.n	8012d52 <tcp_abandon+0xbe>
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	68db      	ldr	r3, [r3, #12]
 8012d4a:	61fb      	str	r3, [r7, #28]
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d1ef      	bne.n	8012d32 <tcp_abandon+0x9e>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2200      	movs	r2, #0
 8012d56:	60da      	str	r2, [r3, #12]
 8012d58:	e00b      	b.n	8012d72 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8adb      	ldrh	r3, [r3, #22]
 8012d62:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012d64:	6879      	ldr	r1, [r7, #4]
 8012d66:	4828      	ldr	r0, [pc, #160]	@ (8012e08 <tcp_abandon+0x174>)
 8012d68:	f000 ff80 	bl	8013c6c <tcp_pcb_remove>
 8012d6c:	4b27      	ldr	r3, [pc, #156]	@ (8012e0c <tcp_abandon+0x178>)
 8012d6e:	2201      	movs	r2, #1
 8012d70:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d004      	beq.n	8012d84 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f000 fd22 	bl	80137c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d004      	beq.n	8012d96 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d90:	4618      	mov	r0, r3
 8012d92:	f000 fd19 	bl	80137c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d004      	beq.n	8012da8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012da2:	4618      	mov	r0, r3
 8012da4:	f000 fd10 	bl	80137c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d00e      	beq.n	8012dcc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012dae:	6879      	ldr	r1, [r7, #4]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	3304      	adds	r3, #4
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	8b12      	ldrh	r2, [r2, #24]
 8012db8:	9202      	str	r2, [sp, #8]
 8012dba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012dbc:	9201      	str	r2, [sp, #4]
 8012dbe:	9300      	str	r3, [sp, #0]
 8012dc0:	460b      	mov	r3, r1
 8012dc2:	697a      	ldr	r2, [r7, #20]
 8012dc4:	69b9      	ldr	r1, [r7, #24]
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f004 fcc4 	bl	8017754 <tcp_rst>
    }
    last_state = pcb->state;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	7d1b      	ldrb	r3, [r3, #20]
 8012dd0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f7ff fd34 	bl	8012840 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d004      	beq.n	8012de8 <tcp_abandon+0x154>
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	f06f 010c 	mvn.w	r1, #12
 8012de4:	68f8      	ldr	r0, [r7, #12]
 8012de6:	4798      	blx	r3
  }
}
 8012de8:	3728      	adds	r7, #40	@ 0x28
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	0801ce50 	.word	0x0801ce50
 8012df4:	0801cf94 	.word	0x0801cf94
 8012df8:	0801ce94 	.word	0x0801ce94
 8012dfc:	0801cfb0 	.word	0x0801cfb0
 8012e00:	24014bc4 	.word	0x24014bc4
 8012e04:	24014bb8 	.word	0x24014bb8
 8012e08:	24014bc0 	.word	0x24014bc0
 8012e0c:	24014bc8 	.word	0x24014bc8

08012e10 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012e18:	2101      	movs	r1, #1
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f7ff ff3a 	bl	8012c94 <tcp_abandon>
}
 8012e20:	bf00      	nop
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b084      	sub	sp, #16
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d106      	bne.n	8012e44 <tcp_update_rcv_ann_wnd+0x1c>
 8012e36:	4b25      	ldr	r3, [pc, #148]	@ (8012ecc <tcp_update_rcv_ann_wnd+0xa4>)
 8012e38:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012e3c:	4924      	ldr	r1, [pc, #144]	@ (8012ed0 <tcp_update_rcv_ann_wnd+0xa8>)
 8012e3e:	4825      	ldr	r0, [pc, #148]	@ (8012ed4 <tcp_update_rcv_ann_wnd+0xac>)
 8012e40:	f008 fa28 	bl	801b294 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012e4c:	4413      	add	r3, r2
 8012e4e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012e58:	f640 3168 	movw	r1, #2920	@ 0xb68
 8012e5c:	428a      	cmp	r2, r1
 8012e5e:	bf28      	it	cs
 8012e60:	460a      	movcs	r2, r1
 8012e62:	b292      	uxth	r2, r2
 8012e64:	4413      	add	r3, r2
 8012e66:	68fa      	ldr	r2, [r7, #12]
 8012e68:	1ad3      	subs	r3, r2, r3
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	db08      	blt.n	8012e80 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e7a:	68fa      	ldr	r2, [r7, #12]
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	e020      	b.n	8012ec2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e88:	1ad3      	subs	r3, r2, r3
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	dd03      	ble.n	8012e96 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2200      	movs	r2, #0
 8012e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012e94:	e014      	b.n	8012ec0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e9e:	1ad3      	subs	r3, r2, r3
 8012ea0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ea8:	d306      	bcc.n	8012eb8 <tcp_update_rcv_ann_wnd+0x90>
 8012eaa:	4b08      	ldr	r3, [pc, #32]	@ (8012ecc <tcp_update_rcv_ann_wnd+0xa4>)
 8012eac:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8012eb0:	4909      	ldr	r1, [pc, #36]	@ (8012ed8 <tcp_update_rcv_ann_wnd+0xb0>)
 8012eb2:	4808      	ldr	r0, [pc, #32]	@ (8012ed4 <tcp_update_rcv_ann_wnd+0xac>)
 8012eb4:	f008 f9ee 	bl	801b294 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8012ec0:	2300      	movs	r3, #0
  }
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3710      	adds	r7, #16
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
 8012eca:	bf00      	nop
 8012ecc:	0801ce50 	.word	0x0801ce50
 8012ed0:	0801d0ac 	.word	0x0801d0ac
 8012ed4:	0801ce94 	.word	0x0801ce94
 8012ed8:	0801d0d0 	.word	0x0801d0d0

08012edc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	460b      	mov	r3, r1
 8012ee6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d107      	bne.n	8012efe <tcp_recved+0x22>
 8012eee:	4b20      	ldr	r3, [pc, #128]	@ (8012f70 <tcp_recved+0x94>)
 8012ef0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012ef4:	491f      	ldr	r1, [pc, #124]	@ (8012f74 <tcp_recved+0x98>)
 8012ef6:	4820      	ldr	r0, [pc, #128]	@ (8012f78 <tcp_recved+0x9c>)
 8012ef8:	f008 f9cc 	bl	801b294 <iprintf>
 8012efc:	e034      	b.n	8012f68 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	7d1b      	ldrb	r3, [r3, #20]
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	d106      	bne.n	8012f14 <tcp_recved+0x38>
 8012f06:	4b1a      	ldr	r3, [pc, #104]	@ (8012f70 <tcp_recved+0x94>)
 8012f08:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8012f0c:	491b      	ldr	r1, [pc, #108]	@ (8012f7c <tcp_recved+0xa0>)
 8012f0e:	481a      	ldr	r0, [pc, #104]	@ (8012f78 <tcp_recved+0x9c>)
 8012f10:	f008 f9c0 	bl	801b294 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012f18:	887b      	ldrh	r3, [r7, #2]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012f1e:	89fb      	ldrh	r3, [r7, #14]
 8012f20:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d804      	bhi.n	8012f32 <tcp_recved+0x56>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f2c:	89fa      	ldrh	r2, [r7, #14]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d204      	bcs.n	8012f3c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012f38:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012f3a:	e002      	b.n	8012f42 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	89fa      	ldrh	r2, [r7, #14]
 8012f40:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f7ff ff70 	bl	8012e28 <tcp_update_rcv_ann_wnd>
 8012f48:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d909      	bls.n	8012f68 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	8b5b      	ldrh	r3, [r3, #26]
 8012f58:	f043 0302 	orr.w	r3, r3, #2
 8012f5c:	b29a      	uxth	r2, r3
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f003 fe42 	bl	8016bec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012f68:	3710      	adds	r7, #16
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	0801ce50 	.word	0x0801ce50
 8012f74:	0801d0ec 	.word	0x0801d0ec
 8012f78:	0801ce94 	.word	0x0801ce94
 8012f7c:	0801d104 	.word	0x0801d104

08012f80 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012f80:	b5b0      	push	{r4, r5, r7, lr}
 8012f82:	b090      	sub	sp, #64	@ 0x40
 8012f84:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012f86:	2300      	movs	r3, #0
 8012f88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8012f8c:	4b95      	ldr	r3, [pc, #596]	@ (80131e4 <tcp_slowtmr+0x264>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	3301      	adds	r3, #1
 8012f92:	4a94      	ldr	r2, [pc, #592]	@ (80131e4 <tcp_slowtmr+0x264>)
 8012f94:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012f96:	4b94      	ldr	r3, [pc, #592]	@ (80131e8 <tcp_slowtmr+0x268>)
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	b2da      	uxtb	r2, r3
 8012f9e:	4b92      	ldr	r3, [pc, #584]	@ (80131e8 <tcp_slowtmr+0x268>)
 8012fa0:	701a      	strb	r2, [r3, #0]
 8012fa2:	e000      	b.n	8012fa6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8012fa4:	bf00      	nop
  prev = NULL;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8012faa:	4b90      	ldr	r3, [pc, #576]	@ (80131ec <tcp_slowtmr+0x26c>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012fb0:	e29d      	b.n	80134ee <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb4:	7d1b      	ldrb	r3, [r3, #20]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d106      	bne.n	8012fc8 <tcp_slowtmr+0x48>
 8012fba:	4b8d      	ldr	r3, [pc, #564]	@ (80131f0 <tcp_slowtmr+0x270>)
 8012fbc:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012fc0:	498c      	ldr	r1, [pc, #560]	@ (80131f4 <tcp_slowtmr+0x274>)
 8012fc2:	488d      	ldr	r0, [pc, #564]	@ (80131f8 <tcp_slowtmr+0x278>)
 8012fc4:	f008 f966 	bl	801b294 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fca:	7d1b      	ldrb	r3, [r3, #20]
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	d106      	bne.n	8012fde <tcp_slowtmr+0x5e>
 8012fd0:	4b87      	ldr	r3, [pc, #540]	@ (80131f0 <tcp_slowtmr+0x270>)
 8012fd2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8012fd6:	4989      	ldr	r1, [pc, #548]	@ (80131fc <tcp_slowtmr+0x27c>)
 8012fd8:	4887      	ldr	r0, [pc, #540]	@ (80131f8 <tcp_slowtmr+0x278>)
 8012fda:	f008 f95b 	bl	801b294 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fe0:	7d1b      	ldrb	r3, [r3, #20]
 8012fe2:	2b0a      	cmp	r3, #10
 8012fe4:	d106      	bne.n	8012ff4 <tcp_slowtmr+0x74>
 8012fe6:	4b82      	ldr	r3, [pc, #520]	@ (80131f0 <tcp_slowtmr+0x270>)
 8012fe8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012fec:	4984      	ldr	r1, [pc, #528]	@ (8013200 <tcp_slowtmr+0x280>)
 8012fee:	4882      	ldr	r0, [pc, #520]	@ (80131f8 <tcp_slowtmr+0x278>)
 8012ff0:	f008 f950 	bl	801b294 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ff6:	7f9a      	ldrb	r2, [r3, #30]
 8012ff8:	4b7b      	ldr	r3, [pc, #492]	@ (80131e8 <tcp_slowtmr+0x268>)
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d105      	bne.n	801300c <tcp_slowtmr+0x8c>
      prev = pcb;
 8013000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013002:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013006:	68db      	ldr	r3, [r3, #12]
 8013008:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801300a:	e270      	b.n	80134ee <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801300c:	4b76      	ldr	r3, [pc, #472]	@ (80131e8 <tcp_slowtmr+0x268>)
 801300e:	781a      	ldrb	r2, [r3, #0]
 8013010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013012:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013014:	2300      	movs	r3, #0
 8013016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801301a:	2300      	movs	r3, #0
 801301c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013022:	7d1b      	ldrb	r3, [r3, #20]
 8013024:	2b02      	cmp	r3, #2
 8013026:	d10a      	bne.n	801303e <tcp_slowtmr+0xbe>
 8013028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801302a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801302e:	2b05      	cmp	r3, #5
 8013030:	d905      	bls.n	801303e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8013032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013036:	3301      	adds	r3, #1
 8013038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801303c:	e11e      	b.n	801327c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013040:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013044:	2b0b      	cmp	r3, #11
 8013046:	d905      	bls.n	8013054 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8013048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801304c:	3301      	adds	r3, #1
 801304e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013052:	e113      	b.n	801327c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8013054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013056:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801305a:	2b00      	cmp	r3, #0
 801305c:	d075      	beq.n	801314a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801305e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013062:	2b00      	cmp	r3, #0
 8013064:	d006      	beq.n	8013074 <tcp_slowtmr+0xf4>
 8013066:	4b62      	ldr	r3, [pc, #392]	@ (80131f0 <tcp_slowtmr+0x270>)
 8013068:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801306c:	4965      	ldr	r1, [pc, #404]	@ (8013204 <tcp_slowtmr+0x284>)
 801306e:	4862      	ldr	r0, [pc, #392]	@ (80131f8 <tcp_slowtmr+0x278>)
 8013070:	f008 f910 	bl	801b294 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013078:	2b00      	cmp	r3, #0
 801307a:	d106      	bne.n	801308a <tcp_slowtmr+0x10a>
 801307c:	4b5c      	ldr	r3, [pc, #368]	@ (80131f0 <tcp_slowtmr+0x270>)
 801307e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8013082:	4961      	ldr	r1, [pc, #388]	@ (8013208 <tcp_slowtmr+0x288>)
 8013084:	485c      	ldr	r0, [pc, #368]	@ (80131f8 <tcp_slowtmr+0x278>)
 8013086:	f008 f905 	bl	801b294 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801308a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801308c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013090:	2b0b      	cmp	r3, #11
 8013092:	d905      	bls.n	80130a0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013098:	3301      	adds	r3, #1
 801309a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801309e:	e0ed      	b.n	801327c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80130a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80130a6:	3b01      	subs	r3, #1
 80130a8:	4a58      	ldr	r2, [pc, #352]	@ (801320c <tcp_slowtmr+0x28c>)
 80130aa:	5cd3      	ldrb	r3, [r2, r3]
 80130ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80130ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80130b4:	7c7a      	ldrb	r2, [r7, #17]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d907      	bls.n	80130ca <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80130ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80130c0:	3301      	adds	r3, #1
 80130c2:	b2da      	uxtb	r2, r3
 80130c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80130ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80130d0:	7c7a      	ldrb	r2, [r7, #17]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	f200 80d2 	bhi.w	801327c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80130d8:	2301      	movs	r3, #1
 80130da:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80130dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d108      	bne.n	80130f8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80130e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80130e8:	f004 fc28 	bl	801793c <tcp_zero_window_probe>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d014      	beq.n	801311c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80130f2:	2300      	movs	r3, #0
 80130f4:	623b      	str	r3, [r7, #32]
 80130f6:	e011      	b.n	801311c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80130f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80130fe:	4619      	mov	r1, r3
 8013100:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013102:	f003 faed 	bl	80166e0 <tcp_split_unsent_seg>
 8013106:	4603      	mov	r3, r0
 8013108:	2b00      	cmp	r3, #0
 801310a:	d107      	bne.n	801311c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801310c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801310e:	f003 fd6d 	bl	8016bec <tcp_output>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d101      	bne.n	801311c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013118:	2300      	movs	r3, #0
 801311a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801311c:	6a3b      	ldr	r3, [r7, #32]
 801311e:	2b00      	cmp	r3, #0
 8013120:	f000 80ac 	beq.w	801327c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013126:	2200      	movs	r2, #0
 8013128:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801312e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013132:	2b06      	cmp	r3, #6
 8013134:	f200 80a2 	bhi.w	801327c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8013138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801313a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801313e:	3301      	adds	r3, #1
 8013140:	b2da      	uxtb	r2, r3
 8013142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013144:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8013148:	e098      	b.n	801327c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801314a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801314c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013150:	2b00      	cmp	r3, #0
 8013152:	db0f      	blt.n	8013174 <tcp_slowtmr+0x1f4>
 8013154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013156:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801315a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801315e:	4293      	cmp	r3, r2
 8013160:	d008      	beq.n	8013174 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8013162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013164:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013168:	b29b      	uxth	r3, r3
 801316a:	3301      	adds	r3, #1
 801316c:	b29b      	uxth	r3, r3
 801316e:	b21a      	sxth	r2, r3
 8013170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013172:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8013174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013176:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801317c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013180:	429a      	cmp	r2, r3
 8013182:	db7b      	blt.n	801327c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013184:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013186:	f004 f825 	bl	80171d4 <tcp_rexmit_rto_prepare>
 801318a:	4603      	mov	r3, r0
 801318c:	2b00      	cmp	r3, #0
 801318e:	d007      	beq.n	80131a0 <tcp_slowtmr+0x220>
 8013190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013194:	2b00      	cmp	r3, #0
 8013196:	d171      	bne.n	801327c <tcp_slowtmr+0x2fc>
 8013198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801319a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801319c:	2b00      	cmp	r3, #0
 801319e:	d06d      	beq.n	801327c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80131a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131a2:	7d1b      	ldrb	r3, [r3, #20]
 80131a4:	2b02      	cmp	r3, #2
 80131a6:	d03a      	beq.n	801321e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80131a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80131ae:	2b0c      	cmp	r3, #12
 80131b0:	bf28      	it	cs
 80131b2:	230c      	movcs	r3, #12
 80131b4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80131b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80131bc:	10db      	asrs	r3, r3, #3
 80131be:	b21b      	sxth	r3, r3
 80131c0:	461a      	mov	r2, r3
 80131c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80131c8:	4413      	add	r3, r2
 80131ca:	7efa      	ldrb	r2, [r7, #27]
 80131cc:	4910      	ldr	r1, [pc, #64]	@ (8013210 <tcp_slowtmr+0x290>)
 80131ce:	5c8a      	ldrb	r2, [r1, r2]
 80131d0:	4093      	lsls	r3, r2
 80131d2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80131da:	4293      	cmp	r3, r2
 80131dc:	dc1a      	bgt.n	8013214 <tcp_slowtmr+0x294>
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	b21a      	sxth	r2, r3
 80131e2:	e019      	b.n	8013218 <tcp_slowtmr+0x298>
 80131e4:	24014bb4 	.word	0x24014bb4
 80131e8:	24014bca 	.word	0x24014bca
 80131ec:	24014bc0 	.word	0x24014bc0
 80131f0:	0801ce50 	.word	0x0801ce50
 80131f4:	0801d194 	.word	0x0801d194
 80131f8:	0801ce94 	.word	0x0801ce94
 80131fc:	0801d1c0 	.word	0x0801d1c0
 8013200:	0801d1ec 	.word	0x0801d1ec
 8013204:	0801d21c 	.word	0x0801d21c
 8013208:	0801d250 	.word	0x0801d250
 801320c:	0801eec0 	.word	0x0801eec0
 8013210:	0801eeb0 	.word	0x0801eeb0
 8013214:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801321a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801321e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013220:	2200      	movs	r2, #0
 8013222:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013226:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801322a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801322c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013230:	4293      	cmp	r3, r2
 8013232:	bf28      	it	cs
 8013234:	4613      	movcs	r3, r2
 8013236:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013238:	8a7b      	ldrh	r3, [r7, #18]
 801323a:	085b      	lsrs	r3, r3, #1
 801323c:	b29a      	uxth	r2, r3
 801323e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013240:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013246:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	b29b      	uxth	r3, r3
 8013252:	429a      	cmp	r2, r3
 8013254:	d206      	bcs.n	8013264 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013258:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801325a:	005b      	lsls	r3, r3, #1
 801325c:	b29a      	uxth	r2, r3
 801325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013260:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8013264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013266:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8013268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801326a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013270:	2200      	movs	r2, #0
 8013272:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8013276:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013278:	f004 f81c 	bl	80172b4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801327c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801327e:	7d1b      	ldrb	r3, [r3, #20]
 8013280:	2b06      	cmp	r3, #6
 8013282:	d111      	bne.n	80132a8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8013284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013286:	8b5b      	ldrh	r3, [r3, #26]
 8013288:	f003 0310 	and.w	r3, r3, #16
 801328c:	2b00      	cmp	r3, #0
 801328e:	d00b      	beq.n	80132a8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013290:	4b9c      	ldr	r3, [pc, #624]	@ (8013504 <tcp_slowtmr+0x584>)
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013296:	6a1b      	ldr	r3, [r3, #32]
 8013298:	1ad3      	subs	r3, r2, r3
 801329a:	2b28      	cmp	r3, #40	@ 0x28
 801329c:	d904      	bls.n	80132a8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801329e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132a2:	3301      	adds	r3, #1
 80132a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80132a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132aa:	7a5b      	ldrb	r3, [r3, #9]
 80132ac:	f003 0308 	and.w	r3, r3, #8
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d04a      	beq.n	801334a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80132b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80132b8:	2b04      	cmp	r3, #4
 80132ba:	d003      	beq.n	80132c4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80132bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132be:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80132c0:	2b07      	cmp	r3, #7
 80132c2:	d142      	bne.n	801334a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80132c4:	4b8f      	ldr	r3, [pc, #572]	@ (8013504 <tcp_slowtmr+0x584>)
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ca:	6a1b      	ldr	r3, [r3, #32]
 80132cc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80132ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80132d4:	4b8c      	ldr	r3, [pc, #560]	@ (8013508 <tcp_slowtmr+0x588>)
 80132d6:	440b      	add	r3, r1
 80132d8:	498c      	ldr	r1, [pc, #560]	@ (801350c <tcp_slowtmr+0x58c>)
 80132da:	fba1 1303 	umull	r1, r3, r1, r3
 80132de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d90a      	bls.n	80132fa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80132e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132e8:	3301      	adds	r3, #1
 80132ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80132ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80132f2:	3301      	adds	r3, #1
 80132f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80132f8:	e027      	b.n	801334a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80132fa:	4b82      	ldr	r3, [pc, #520]	@ (8013504 <tcp_slowtmr+0x584>)
 80132fc:	681a      	ldr	r2, [r3, #0]
 80132fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013300:	6a1b      	ldr	r3, [r3, #32]
 8013302:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013306:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801330a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801330c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013310:	4618      	mov	r0, r3
 8013312:	4b7f      	ldr	r3, [pc, #508]	@ (8013510 <tcp_slowtmr+0x590>)
 8013314:	fb00 f303 	mul.w	r3, r0, r3
 8013318:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801331a:	497c      	ldr	r1, [pc, #496]	@ (801350c <tcp_slowtmr+0x58c>)
 801331c:	fba1 1303 	umull	r1, r3, r1, r3
 8013320:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013322:	429a      	cmp	r2, r3
 8013324:	d911      	bls.n	801334a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013326:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013328:	f004 fac8 	bl	80178bc <tcp_keepalive>
 801332c:	4603      	mov	r3, r0
 801332e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8013332:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013336:	2b00      	cmp	r3, #0
 8013338:	d107      	bne.n	801334a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801333c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013340:	3301      	adds	r3, #1
 8013342:	b2da      	uxtb	r2, r3
 8013344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013346:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801334a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801334c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801334e:	2b00      	cmp	r3, #0
 8013350:	d011      	beq.n	8013376 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013352:	4b6c      	ldr	r3, [pc, #432]	@ (8013504 <tcp_slowtmr+0x584>)
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013358:	6a1b      	ldr	r3, [r3, #32]
 801335a:	1ad2      	subs	r2, r2, r3
 801335c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801335e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013362:	4619      	mov	r1, r3
 8013364:	460b      	mov	r3, r1
 8013366:	005b      	lsls	r3, r3, #1
 8013368:	440b      	add	r3, r1
 801336a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801336c:	429a      	cmp	r2, r3
 801336e:	d302      	bcc.n	8013376 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8013370:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013372:	f000 fddf 	bl	8013f34 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8013376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013378:	7d1b      	ldrb	r3, [r3, #20]
 801337a:	2b03      	cmp	r3, #3
 801337c:	d10b      	bne.n	8013396 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801337e:	4b61      	ldr	r3, [pc, #388]	@ (8013504 <tcp_slowtmr+0x584>)
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013384:	6a1b      	ldr	r3, [r3, #32]
 8013386:	1ad3      	subs	r3, r2, r3
 8013388:	2b28      	cmp	r3, #40	@ 0x28
 801338a:	d904      	bls.n	8013396 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801338c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013390:	3301      	adds	r3, #1
 8013392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8013396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013398:	7d1b      	ldrb	r3, [r3, #20]
 801339a:	2b09      	cmp	r3, #9
 801339c:	d10b      	bne.n	80133b6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801339e:	4b59      	ldr	r3, [pc, #356]	@ (8013504 <tcp_slowtmr+0x584>)
 80133a0:	681a      	ldr	r2, [r3, #0]
 80133a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133a4:	6a1b      	ldr	r3, [r3, #32]
 80133a6:	1ad3      	subs	r3, r2, r3
 80133a8:	2bf0      	cmp	r3, #240	@ 0xf0
 80133aa:	d904      	bls.n	80133b6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80133ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133b0:	3301      	adds	r3, #1
 80133b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80133b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d060      	beq.n	8013480 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80133be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80133c4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80133c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80133c8:	f000 fc00 	bl	8013bcc <tcp_pcb_purge>
      if (prev != NULL) {
 80133cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d010      	beq.n	80133f4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80133d2:	4b50      	ldr	r3, [pc, #320]	@ (8013514 <tcp_slowtmr+0x594>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133d8:	429a      	cmp	r2, r3
 80133da:	d106      	bne.n	80133ea <tcp_slowtmr+0x46a>
 80133dc:	4b4e      	ldr	r3, [pc, #312]	@ (8013518 <tcp_slowtmr+0x598>)
 80133de:	f240 526d 	movw	r2, #1389	@ 0x56d
 80133e2:	494e      	ldr	r1, [pc, #312]	@ (801351c <tcp_slowtmr+0x59c>)
 80133e4:	484e      	ldr	r0, [pc, #312]	@ (8013520 <tcp_slowtmr+0x5a0>)
 80133e6:	f007 ff55 	bl	801b294 <iprintf>
        prev->next = pcb->next;
 80133ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ec:	68da      	ldr	r2, [r3, #12]
 80133ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f0:	60da      	str	r2, [r3, #12]
 80133f2:	e00f      	b.n	8013414 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80133f4:	4b47      	ldr	r3, [pc, #284]	@ (8013514 <tcp_slowtmr+0x594>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d006      	beq.n	801340c <tcp_slowtmr+0x48c>
 80133fe:	4b46      	ldr	r3, [pc, #280]	@ (8013518 <tcp_slowtmr+0x598>)
 8013400:	f240 5271 	movw	r2, #1393	@ 0x571
 8013404:	4947      	ldr	r1, [pc, #284]	@ (8013524 <tcp_slowtmr+0x5a4>)
 8013406:	4846      	ldr	r0, [pc, #280]	@ (8013520 <tcp_slowtmr+0x5a0>)
 8013408:	f007 ff44 	bl	801b294 <iprintf>
        tcp_active_pcbs = pcb->next;
 801340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	4a40      	ldr	r2, [pc, #256]	@ (8013514 <tcp_slowtmr+0x594>)
 8013412:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8013414:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013418:	2b00      	cmp	r3, #0
 801341a:	d013      	beq.n	8013444 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801341c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801341e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013422:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013424:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8013426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013428:	3304      	adds	r3, #4
 801342a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801342c:	8ad2      	ldrh	r2, [r2, #22]
 801342e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013430:	8b09      	ldrh	r1, [r1, #24]
 8013432:	9102      	str	r1, [sp, #8]
 8013434:	9201      	str	r2, [sp, #4]
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	462b      	mov	r3, r5
 801343a:	4622      	mov	r2, r4
 801343c:	4601      	mov	r1, r0
 801343e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013440:	f004 f988 	bl	8017754 <tcp_rst>
      err_arg = pcb->callback_arg;
 8013444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013446:	691b      	ldr	r3, [r3, #16]
 8013448:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801344a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801344c:	7d1b      	ldrb	r3, [r3, #20]
 801344e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013452:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013456:	68db      	ldr	r3, [r3, #12]
 8013458:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801345a:	6838      	ldr	r0, [r7, #0]
 801345c:	f7ff f9f0 	bl	8012840 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8013460:	4b31      	ldr	r3, [pc, #196]	@ (8013528 <tcp_slowtmr+0x5a8>)
 8013462:	2200      	movs	r2, #0
 8013464:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d004      	beq.n	8013476 <tcp_slowtmr+0x4f6>
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	f06f 010c 	mvn.w	r1, #12
 8013472:	68b8      	ldr	r0, [r7, #8]
 8013474:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013476:	4b2c      	ldr	r3, [pc, #176]	@ (8013528 <tcp_slowtmr+0x5a8>)
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d037      	beq.n	80134ee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801347e:	e592      	b.n	8012fa6 <tcp_slowtmr+0x26>
      prev = pcb;
 8013480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013482:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801348a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801348c:	7f1b      	ldrb	r3, [r3, #28]
 801348e:	3301      	adds	r3, #1
 8013490:	b2da      	uxtb	r2, r3
 8013492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013494:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013498:	7f1a      	ldrb	r2, [r3, #28]
 801349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801349c:	7f5b      	ldrb	r3, [r3, #29]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d325      	bcc.n	80134ee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80134a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134a4:	2200      	movs	r2, #0
 80134a6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80134a8:	4b1f      	ldr	r3, [pc, #124]	@ (8013528 <tcp_slowtmr+0x5a8>)
 80134aa:	2200      	movs	r2, #0
 80134ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80134ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00b      	beq.n	80134d0 <tcp_slowtmr+0x550>
 80134b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80134be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134c0:	6912      	ldr	r2, [r2, #16]
 80134c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80134c4:	4610      	mov	r0, r2
 80134c6:	4798      	blx	r3
 80134c8:	4603      	mov	r3, r0
 80134ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80134ce:	e002      	b.n	80134d6 <tcp_slowtmr+0x556>
 80134d0:	2300      	movs	r3, #0
 80134d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80134d6:	4b14      	ldr	r3, [pc, #80]	@ (8013528 <tcp_slowtmr+0x5a8>)
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	f47f ad62 	bne.w	8012fa4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80134e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d102      	bne.n	80134ee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80134e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134ea:	f003 fb7f 	bl	8016bec <tcp_output>
  while (pcb != NULL) {
 80134ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	f47f ad5e 	bne.w	8012fb2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80134f6:	2300      	movs	r3, #0
 80134f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80134fa:	4b0c      	ldr	r3, [pc, #48]	@ (801352c <tcp_slowtmr+0x5ac>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013500:	e069      	b.n	80135d6 <tcp_slowtmr+0x656>
 8013502:	bf00      	nop
 8013504:	24014bb4 	.word	0x24014bb4
 8013508:	000a4cb8 	.word	0x000a4cb8
 801350c:	10624dd3 	.word	0x10624dd3
 8013510:	000124f8 	.word	0x000124f8
 8013514:	24014bc0 	.word	0x24014bc0
 8013518:	0801ce50 	.word	0x0801ce50
 801351c:	0801d288 	.word	0x0801d288
 8013520:	0801ce94 	.word	0x0801ce94
 8013524:	0801d2b4 	.word	0x0801d2b4
 8013528:	24014bc8 	.word	0x24014bc8
 801352c:	24014bc4 	.word	0x24014bc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013532:	7d1b      	ldrb	r3, [r3, #20]
 8013534:	2b0a      	cmp	r3, #10
 8013536:	d006      	beq.n	8013546 <tcp_slowtmr+0x5c6>
 8013538:	4b2b      	ldr	r3, [pc, #172]	@ (80135e8 <tcp_slowtmr+0x668>)
 801353a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801353e:	492b      	ldr	r1, [pc, #172]	@ (80135ec <tcp_slowtmr+0x66c>)
 8013540:	482b      	ldr	r0, [pc, #172]	@ (80135f0 <tcp_slowtmr+0x670>)
 8013542:	f007 fea7 	bl	801b294 <iprintf>
    pcb_remove = 0;
 8013546:	2300      	movs	r3, #0
 8013548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801354c:	4b29      	ldr	r3, [pc, #164]	@ (80135f4 <tcp_slowtmr+0x674>)
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013552:	6a1b      	ldr	r3, [r3, #32]
 8013554:	1ad3      	subs	r3, r2, r3
 8013556:	2bf0      	cmp	r3, #240	@ 0xf0
 8013558:	d904      	bls.n	8013564 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801355a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801355e:	3301      	adds	r3, #1
 8013560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013568:	2b00      	cmp	r3, #0
 801356a:	d02f      	beq.n	80135cc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801356c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801356e:	f000 fb2d 	bl	8013bcc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013574:	2b00      	cmp	r3, #0
 8013576:	d010      	beq.n	801359a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013578:	4b1f      	ldr	r3, [pc, #124]	@ (80135f8 <tcp_slowtmr+0x678>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801357e:	429a      	cmp	r2, r3
 8013580:	d106      	bne.n	8013590 <tcp_slowtmr+0x610>
 8013582:	4b19      	ldr	r3, [pc, #100]	@ (80135e8 <tcp_slowtmr+0x668>)
 8013584:	f240 52af 	movw	r2, #1455	@ 0x5af
 8013588:	491c      	ldr	r1, [pc, #112]	@ (80135fc <tcp_slowtmr+0x67c>)
 801358a:	4819      	ldr	r0, [pc, #100]	@ (80135f0 <tcp_slowtmr+0x670>)
 801358c:	f007 fe82 	bl	801b294 <iprintf>
        prev->next = pcb->next;
 8013590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013592:	68da      	ldr	r2, [r3, #12]
 8013594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013596:	60da      	str	r2, [r3, #12]
 8013598:	e00f      	b.n	80135ba <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801359a:	4b17      	ldr	r3, [pc, #92]	@ (80135f8 <tcp_slowtmr+0x678>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d006      	beq.n	80135b2 <tcp_slowtmr+0x632>
 80135a4:	4b10      	ldr	r3, [pc, #64]	@ (80135e8 <tcp_slowtmr+0x668>)
 80135a6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80135aa:	4915      	ldr	r1, [pc, #84]	@ (8013600 <tcp_slowtmr+0x680>)
 80135ac:	4810      	ldr	r0, [pc, #64]	@ (80135f0 <tcp_slowtmr+0x670>)
 80135ae:	f007 fe71 	bl	801b294 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80135b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	4a10      	ldr	r2, [pc, #64]	@ (80135f8 <tcp_slowtmr+0x678>)
 80135b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80135ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135bc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80135be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135c0:	68db      	ldr	r3, [r3, #12]
 80135c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80135c4:	69f8      	ldr	r0, [r7, #28]
 80135c6:	f7ff f93b 	bl	8012840 <tcp_free>
 80135ca:	e004      	b.n	80135d6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80135cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80135d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135d2:	68db      	ldr	r3, [r3, #12]
 80135d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80135d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d1a9      	bne.n	8013530 <tcp_slowtmr+0x5b0>
    }
  }
}
 80135dc:	bf00      	nop
 80135de:	bf00      	nop
 80135e0:	3730      	adds	r7, #48	@ 0x30
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bdb0      	pop	{r4, r5, r7, pc}
 80135e6:	bf00      	nop
 80135e8:	0801ce50 	.word	0x0801ce50
 80135ec:	0801d2e0 	.word	0x0801d2e0
 80135f0:	0801ce94 	.word	0x0801ce94
 80135f4:	24014bb4 	.word	0x24014bb4
 80135f8:	24014bc4 	.word	0x24014bc4
 80135fc:	0801d310 	.word	0x0801d310
 8013600:	0801d338 	.word	0x0801d338

08013604 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b082      	sub	sp, #8
 8013608:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801360a:	4b2d      	ldr	r3, [pc, #180]	@ (80136c0 <tcp_fasttmr+0xbc>)
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	3301      	adds	r3, #1
 8013610:	b2da      	uxtb	r2, r3
 8013612:	4b2b      	ldr	r3, [pc, #172]	@ (80136c0 <tcp_fasttmr+0xbc>)
 8013614:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013616:	4b2b      	ldr	r3, [pc, #172]	@ (80136c4 <tcp_fasttmr+0xc0>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801361c:	e048      	b.n	80136b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	7f9a      	ldrb	r2, [r3, #30]
 8013622:	4b27      	ldr	r3, [pc, #156]	@ (80136c0 <tcp_fasttmr+0xbc>)
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	429a      	cmp	r2, r3
 8013628:	d03f      	beq.n	80136aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801362a:	4b25      	ldr	r3, [pc, #148]	@ (80136c0 <tcp_fasttmr+0xbc>)
 801362c:	781a      	ldrb	r2, [r3, #0]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	8b5b      	ldrh	r3, [r3, #26]
 8013636:	f003 0301 	and.w	r3, r3, #1
 801363a:	2b00      	cmp	r3, #0
 801363c:	d010      	beq.n	8013660 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	8b5b      	ldrh	r3, [r3, #26]
 8013642:	f043 0302 	orr.w	r3, r3, #2
 8013646:	b29a      	uxth	r2, r3
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f003 facd 	bl	8016bec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	8b5b      	ldrh	r3, [r3, #26]
 8013656:	f023 0303 	bic.w	r3, r3, #3
 801365a:	b29a      	uxth	r2, r3
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	8b5b      	ldrh	r3, [r3, #26]
 8013664:	f003 0308 	and.w	r3, r3, #8
 8013668:	2b00      	cmp	r3, #0
 801366a:	d009      	beq.n	8013680 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	8b5b      	ldrh	r3, [r3, #26]
 8013670:	f023 0308 	bic.w	r3, r3, #8
 8013674:	b29a      	uxth	r2, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7ff fa74 	bl	8012b68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	68db      	ldr	r3, [r3, #12]
 8013684:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00a      	beq.n	80136a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801368e:	4b0e      	ldr	r3, [pc, #56]	@ (80136c8 <tcp_fasttmr+0xc4>)
 8013690:	2200      	movs	r2, #0
 8013692:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 f819 	bl	80136cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801369a:	4b0b      	ldr	r3, [pc, #44]	@ (80136c8 <tcp_fasttmr+0xc4>)
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d000      	beq.n	80136a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80136a2:	e7b8      	b.n	8013616 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	607b      	str	r3, [r7, #4]
 80136a8:	e002      	b.n	80136b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d1b3      	bne.n	801361e <tcp_fasttmr+0x1a>
    }
  }
}
 80136b6:	bf00      	nop
 80136b8:	bf00      	nop
 80136ba:	3708      	adds	r7, #8
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	24014bca 	.word	0x24014bca
 80136c4:	24014bc0 	.word	0x24014bc0
 80136c8:	24014bc8 	.word	0x24014bc8

080136cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80136cc:	b590      	push	{r4, r7, lr}
 80136ce:	b085      	sub	sp, #20
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d109      	bne.n	80136ee <tcp_process_refused_data+0x22>
 80136da:	4b38      	ldr	r3, [pc, #224]	@ (80137bc <tcp_process_refused_data+0xf0>)
 80136dc:	f240 6209 	movw	r2, #1545	@ 0x609
 80136e0:	4937      	ldr	r1, [pc, #220]	@ (80137c0 <tcp_process_refused_data+0xf4>)
 80136e2:	4838      	ldr	r0, [pc, #224]	@ (80137c4 <tcp_process_refused_data+0xf8>)
 80136e4:	f007 fdd6 	bl	801b294 <iprintf>
 80136e8:	f06f 030f 	mvn.w	r3, #15
 80136ec:	e061      	b.n	80137b2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80136f2:	7b5b      	ldrb	r3, [r3, #13]
 80136f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80136fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2200      	movs	r2, #0
 8013700:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013708:	2b00      	cmp	r3, #0
 801370a:	d00b      	beq.n	8013724 <tcp_process_refused_data+0x58>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6918      	ldr	r0, [r3, #16]
 8013716:	2300      	movs	r3, #0
 8013718:	68ba      	ldr	r2, [r7, #8]
 801371a:	6879      	ldr	r1, [r7, #4]
 801371c:	47a0      	blx	r4
 801371e:	4603      	mov	r3, r0
 8013720:	73fb      	strb	r3, [r7, #15]
 8013722:	e007      	b.n	8013734 <tcp_process_refused_data+0x68>
 8013724:	2300      	movs	r3, #0
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	6879      	ldr	r1, [r7, #4]
 801372a:	2000      	movs	r0, #0
 801372c:	f000 f8a6 	bl	801387c <tcp_recv_null>
 8013730:	4603      	mov	r3, r0
 8013732:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d12b      	bne.n	8013794 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801373c:	7bbb      	ldrb	r3, [r7, #14]
 801373e:	f003 0320 	and.w	r3, r3, #32
 8013742:	2b00      	cmp	r3, #0
 8013744:	d034      	beq.n	80137b0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801374a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801374e:	4293      	cmp	r3, r2
 8013750:	d005      	beq.n	801375e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013756:	3301      	adds	r3, #1
 8013758:	b29a      	uxth	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013764:	2b00      	cmp	r3, #0
 8013766:	d00b      	beq.n	8013780 <tcp_process_refused_data+0xb4>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6918      	ldr	r0, [r3, #16]
 8013772:	2300      	movs	r3, #0
 8013774:	2200      	movs	r2, #0
 8013776:	6879      	ldr	r1, [r7, #4]
 8013778:	47a0      	blx	r4
 801377a:	4603      	mov	r3, r0
 801377c:	73fb      	strb	r3, [r7, #15]
 801377e:	e001      	b.n	8013784 <tcp_process_refused_data+0xb8>
 8013780:	2300      	movs	r3, #0
 8013782:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013788:	f113 0f0d 	cmn.w	r3, #13
 801378c:	d110      	bne.n	80137b0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801378e:	f06f 030c 	mvn.w	r3, #12
 8013792:	e00e      	b.n	80137b2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8013794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013798:	f113 0f0d 	cmn.w	r3, #13
 801379c:	d102      	bne.n	80137a4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801379e:	f06f 030c 	mvn.w	r3, #12
 80137a2:	e006      	b.n	80137b2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	68ba      	ldr	r2, [r7, #8]
 80137a8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80137aa:	f06f 0304 	mvn.w	r3, #4
 80137ae:	e000      	b.n	80137b2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80137b0:	2300      	movs	r3, #0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3714      	adds	r7, #20
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd90      	pop	{r4, r7, pc}
 80137ba:	bf00      	nop
 80137bc:	0801ce50 	.word	0x0801ce50
 80137c0:	0801d360 	.word	0x0801d360
 80137c4:	0801ce94 	.word	0x0801ce94

080137c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b084      	sub	sp, #16
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80137d0:	e007      	b.n	80137e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f000 f80a 	bl	80137f2 <tcp_seg_free>
    seg = next;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1f4      	bne.n	80137d2 <tcp_segs_free+0xa>
  }
}
 80137e8:	bf00      	nop
 80137ea:	bf00      	nop
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}

080137f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80137f2:	b580      	push	{r7, lr}
 80137f4:	b082      	sub	sp, #8
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d00c      	beq.n	801381a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d004      	beq.n	8013812 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	685b      	ldr	r3, [r3, #4]
 801380c:	4618      	mov	r0, r3
 801380e:	f7fe fc6f 	bl	80120f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013812:	6879      	ldr	r1, [r7, #4]
 8013814:	2004      	movs	r0, #4
 8013816:	f7fd fdbf 	bl	8011398 <memp_free>
  }
}
 801381a:	bf00      	nop
 801381c:	3708      	adds	r7, #8
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
	...

08013824 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b084      	sub	sp, #16
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d106      	bne.n	8013840 <tcp_seg_copy+0x1c>
 8013832:	4b0f      	ldr	r3, [pc, #60]	@ (8013870 <tcp_seg_copy+0x4c>)
 8013834:	f240 6282 	movw	r2, #1666	@ 0x682
 8013838:	490e      	ldr	r1, [pc, #56]	@ (8013874 <tcp_seg_copy+0x50>)
 801383a:	480f      	ldr	r0, [pc, #60]	@ (8013878 <tcp_seg_copy+0x54>)
 801383c:	f007 fd2a 	bl	801b294 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013840:	2004      	movs	r0, #4
 8013842:	f7fd fd33 	bl	80112ac <memp_malloc>
 8013846:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d101      	bne.n	8013852 <tcp_seg_copy+0x2e>
    return NULL;
 801384e:	2300      	movs	r3, #0
 8013850:	e00a      	b.n	8013868 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013852:	2210      	movs	r2, #16
 8013854:	6879      	ldr	r1, [r7, #4]
 8013856:	68f8      	ldr	r0, [r7, #12]
 8013858:	f007 fe55 	bl	801b506 <memcpy>
  pbuf_ref(cseg->p);
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	4618      	mov	r0, r3
 8013862:	f7fe fceb 	bl	801223c <pbuf_ref>
  return cseg;
 8013866:	68fb      	ldr	r3, [r7, #12]
}
 8013868:	4618      	mov	r0, r3
 801386a:	3710      	adds	r7, #16
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	0801ce50 	.word	0x0801ce50
 8013874:	0801d3a4 	.word	0x0801d3a4
 8013878:	0801ce94 	.word	0x0801ce94

0801387c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
 8013888:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d109      	bne.n	80138a4 <tcp_recv_null+0x28>
 8013890:	4b12      	ldr	r3, [pc, #72]	@ (80138dc <tcp_recv_null+0x60>)
 8013892:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013896:	4912      	ldr	r1, [pc, #72]	@ (80138e0 <tcp_recv_null+0x64>)
 8013898:	4812      	ldr	r0, [pc, #72]	@ (80138e4 <tcp_recv_null+0x68>)
 801389a:	f007 fcfb 	bl	801b294 <iprintf>
 801389e:	f06f 030f 	mvn.w	r3, #15
 80138a2:	e016      	b.n	80138d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d009      	beq.n	80138be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	891b      	ldrh	r3, [r3, #8]
 80138ae:	4619      	mov	r1, r3
 80138b0:	68b8      	ldr	r0, [r7, #8]
 80138b2:	f7ff fb13 	bl	8012edc <tcp_recved>
    pbuf_free(p);
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7fe fc1a 	bl	80120f0 <pbuf_free>
 80138bc:	e008      	b.n	80138d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80138be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d104      	bne.n	80138d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80138c6:	68b8      	ldr	r0, [r7, #8]
 80138c8:	f7ff f9b8 	bl	8012c3c <tcp_close>
 80138cc:	4603      	mov	r3, r0
 80138ce:	e000      	b.n	80138d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3710      	adds	r7, #16
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	0801ce50 	.word	0x0801ce50
 80138e0:	0801d3c0 	.word	0x0801d3c0
 80138e4:	0801ce94 	.word	0x0801ce94

080138e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b086      	sub	sp, #24
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	4603      	mov	r3, r0
 80138f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80138f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	db01      	blt.n	80138fe <tcp_kill_prio+0x16>
 80138fa:	79fb      	ldrb	r3, [r7, #7]
 80138fc:	e000      	b.n	8013900 <tcp_kill_prio+0x18>
 80138fe:	237f      	movs	r3, #127	@ 0x7f
 8013900:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013902:	7afb      	ldrb	r3, [r7, #11]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d034      	beq.n	8013972 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013908:	7afb      	ldrb	r3, [r7, #11]
 801390a:	3b01      	subs	r3, #1
 801390c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801390e:	2300      	movs	r3, #0
 8013910:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013912:	2300      	movs	r3, #0
 8013914:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013916:	4b19      	ldr	r3, [pc, #100]	@ (801397c <tcp_kill_prio+0x94>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	617b      	str	r3, [r7, #20]
 801391c:	e01f      	b.n	801395e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	7d5b      	ldrb	r3, [r3, #21]
 8013922:	7afa      	ldrb	r2, [r7, #11]
 8013924:	429a      	cmp	r2, r3
 8013926:	d80c      	bhi.n	8013942 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801392c:	7afa      	ldrb	r2, [r7, #11]
 801392e:	429a      	cmp	r2, r3
 8013930:	d112      	bne.n	8013958 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013932:	4b13      	ldr	r3, [pc, #76]	@ (8013980 <tcp_kill_prio+0x98>)
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	6a1b      	ldr	r3, [r3, #32]
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	68fa      	ldr	r2, [r7, #12]
 801393e:	429a      	cmp	r2, r3
 8013940:	d80a      	bhi.n	8013958 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013942:	4b0f      	ldr	r3, [pc, #60]	@ (8013980 <tcp_kill_prio+0x98>)
 8013944:	681a      	ldr	r2, [r3, #0]
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	6a1b      	ldr	r3, [r3, #32]
 801394a:	1ad3      	subs	r3, r2, r3
 801394c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	7d5b      	ldrb	r3, [r3, #21]
 8013956:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	617b      	str	r3, [r7, #20]
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d1dc      	bne.n	801391e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d004      	beq.n	8013974 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801396a:	6938      	ldr	r0, [r7, #16]
 801396c:	f7ff fa50 	bl	8012e10 <tcp_abort>
 8013970:	e000      	b.n	8013974 <tcp_kill_prio+0x8c>
    return;
 8013972:	bf00      	nop
  }
}
 8013974:	3718      	adds	r7, #24
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	24014bc0 	.word	0x24014bc0
 8013980:	24014bb4 	.word	0x24014bb4

08013984 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b086      	sub	sp, #24
 8013988:	af00      	add	r7, sp, #0
 801398a:	4603      	mov	r3, r0
 801398c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801398e:	79fb      	ldrb	r3, [r7, #7]
 8013990:	2b08      	cmp	r3, #8
 8013992:	d009      	beq.n	80139a8 <tcp_kill_state+0x24>
 8013994:	79fb      	ldrb	r3, [r7, #7]
 8013996:	2b09      	cmp	r3, #9
 8013998:	d006      	beq.n	80139a8 <tcp_kill_state+0x24>
 801399a:	4b1a      	ldr	r3, [pc, #104]	@ (8013a04 <tcp_kill_state+0x80>)
 801399c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80139a0:	4919      	ldr	r1, [pc, #100]	@ (8013a08 <tcp_kill_state+0x84>)
 80139a2:	481a      	ldr	r0, [pc, #104]	@ (8013a0c <tcp_kill_state+0x88>)
 80139a4:	f007 fc76 	bl	801b294 <iprintf>

  inactivity = 0;
 80139a8:	2300      	movs	r3, #0
 80139aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80139ac:	2300      	movs	r3, #0
 80139ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80139b0:	4b17      	ldr	r3, [pc, #92]	@ (8013a10 <tcp_kill_state+0x8c>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	617b      	str	r3, [r7, #20]
 80139b6:	e017      	b.n	80139e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	7d1b      	ldrb	r3, [r3, #20]
 80139bc:	79fa      	ldrb	r2, [r7, #7]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d10f      	bne.n	80139e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80139c2:	4b14      	ldr	r3, [pc, #80]	@ (8013a14 <tcp_kill_state+0x90>)
 80139c4:	681a      	ldr	r2, [r3, #0]
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	6a1b      	ldr	r3, [r3, #32]
 80139ca:	1ad3      	subs	r3, r2, r3
 80139cc:	68fa      	ldr	r2, [r7, #12]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d807      	bhi.n	80139e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80139d2:	4b10      	ldr	r3, [pc, #64]	@ (8013a14 <tcp_kill_state+0x90>)
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	6a1b      	ldr	r3, [r3, #32]
 80139da:	1ad3      	subs	r3, r2, r3
 80139dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	68db      	ldr	r3, [r3, #12]
 80139e6:	617b      	str	r3, [r7, #20]
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d1e4      	bne.n	80139b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d003      	beq.n	80139fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80139f4:	2100      	movs	r1, #0
 80139f6:	6938      	ldr	r0, [r7, #16]
 80139f8:	f7ff f94c 	bl	8012c94 <tcp_abandon>
  }
}
 80139fc:	bf00      	nop
 80139fe:	3718      	adds	r7, #24
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	0801ce50 	.word	0x0801ce50
 8013a08:	0801d3dc 	.word	0x0801d3dc
 8013a0c:	0801ce94 	.word	0x0801ce94
 8013a10:	24014bc0 	.word	0x24014bc0
 8013a14:	24014bb4 	.word	0x24014bb4

08013a18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b084      	sub	sp, #16
 8013a1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013a22:	2300      	movs	r3, #0
 8013a24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a26:	4b12      	ldr	r3, [pc, #72]	@ (8013a70 <tcp_kill_timewait+0x58>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	60fb      	str	r3, [r7, #12]
 8013a2c:	e012      	b.n	8013a54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013a2e:	4b11      	ldr	r3, [pc, #68]	@ (8013a74 <tcp_kill_timewait+0x5c>)
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	6a1b      	ldr	r3, [r3, #32]
 8013a36:	1ad3      	subs	r3, r2, r3
 8013a38:	687a      	ldr	r2, [r7, #4]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d807      	bhi.n	8013a4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8013a74 <tcp_kill_timewait+0x5c>)
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6a1b      	ldr	r3, [r3, #32]
 8013a46:	1ad3      	subs	r3, r2, r3
 8013a48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	60fb      	str	r3, [r7, #12]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d1e9      	bne.n	8013a2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d002      	beq.n	8013a66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013a60:	68b8      	ldr	r0, [r7, #8]
 8013a62:	f7ff f9d5 	bl	8012e10 <tcp_abort>
  }
}
 8013a66:	bf00      	nop
 8013a68:	3710      	adds	r7, #16
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop
 8013a70:	24014bc4 	.word	0x24014bc4
 8013a74:	24014bb4 	.word	0x24014bb4

08013a78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013a7e:	4b10      	ldr	r3, [pc, #64]	@ (8013ac0 <tcp_handle_closepend+0x48>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013a84:	e014      	b.n	8013ab0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	68db      	ldr	r3, [r3, #12]
 8013a8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	8b5b      	ldrh	r3, [r3, #26]
 8013a90:	f003 0308 	and.w	r3, r3, #8
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d009      	beq.n	8013aac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	8b5b      	ldrh	r3, [r3, #26]
 8013a9c:	f023 0308 	bic.w	r3, r3, #8
 8013aa0:	b29a      	uxth	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7ff f85e 	bl	8012b68 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d1e7      	bne.n	8013a86 <tcp_handle_closepend+0xe>
  }
}
 8013ab6:	bf00      	nop
 8013ab8:	bf00      	nop
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	24014bc0 	.word	0x24014bc0

08013ac4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b084      	sub	sp, #16
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	4603      	mov	r3, r0
 8013acc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ace:	2002      	movs	r0, #2
 8013ad0:	f7fd fbec 	bl	80112ac <memp_malloc>
 8013ad4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d126      	bne.n	8013b2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013adc:	f7ff ffcc 	bl	8013a78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013ae0:	f7ff ff9a 	bl	8013a18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ae4:	2002      	movs	r0, #2
 8013ae6:	f7fd fbe1 	bl	80112ac <memp_malloc>
 8013aea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d11b      	bne.n	8013b2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013af2:	2009      	movs	r0, #9
 8013af4:	f7ff ff46 	bl	8013984 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013af8:	2002      	movs	r0, #2
 8013afa:	f7fd fbd7 	bl	80112ac <memp_malloc>
 8013afe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d111      	bne.n	8013b2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013b06:	2008      	movs	r0, #8
 8013b08:	f7ff ff3c 	bl	8013984 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b0c:	2002      	movs	r0, #2
 8013b0e:	f7fd fbcd 	bl	80112ac <memp_malloc>
 8013b12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d107      	bne.n	8013b2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013b1a:	79fb      	ldrb	r3, [r7, #7]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7ff fee3 	bl	80138e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b22:	2002      	movs	r0, #2
 8013b24:	f7fd fbc2 	bl	80112ac <memp_malloc>
 8013b28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d03f      	beq.n	8013bb0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013b30:	229c      	movs	r2, #156	@ 0x9c
 8013b32:	2100      	movs	r1, #0
 8013b34:	68f8      	ldr	r0, [r7, #12]
 8013b36:	f007 fc12 	bl	801b35e <memset>
    pcb->prio = prio;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	79fa      	ldrb	r2, [r7, #7]
 8013b3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8013b46:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8013b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	22ff      	movs	r2, #255	@ 0xff
 8013b5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013b66:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	2206      	movs	r2, #6
 8013b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2206      	movs	r2, #6
 8013b74:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b7c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2201      	movs	r2, #1
 8013b82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8013b86:	4b0d      	ldr	r3, [pc, #52]	@ (8013bbc <tcp_alloc+0xf8>)
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8013bc0 <tcp_alloc+0xfc>)
 8013b90:	781a      	ldrb	r2, [r3, #0]
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8013b9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	4a08      	ldr	r2, [pc, #32]	@ (8013bc4 <tcp_alloc+0x100>)
 8013ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	4a07      	ldr	r2, [pc, #28]	@ (8013bc8 <tcp_alloc+0x104>)
 8013bac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3710      	adds	r7, #16
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd80      	pop	{r7, pc}
 8013bba:	bf00      	nop
 8013bbc:	24014bb4 	.word	0x24014bb4
 8013bc0:	24014bca 	.word	0x24014bca
 8013bc4:	0801387d 	.word	0x0801387d
 8013bc8:	006ddd00 	.word	0x006ddd00

08013bcc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d107      	bne.n	8013bea <tcp_pcb_purge+0x1e>
 8013bda:	4b21      	ldr	r3, [pc, #132]	@ (8013c60 <tcp_pcb_purge+0x94>)
 8013bdc:	f640 0251 	movw	r2, #2129	@ 0x851
 8013be0:	4920      	ldr	r1, [pc, #128]	@ (8013c64 <tcp_pcb_purge+0x98>)
 8013be2:	4821      	ldr	r0, [pc, #132]	@ (8013c68 <tcp_pcb_purge+0x9c>)
 8013be4:	f007 fb56 	bl	801b294 <iprintf>
 8013be8:	e037      	b.n	8013c5a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	7d1b      	ldrb	r3, [r3, #20]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d033      	beq.n	8013c5a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013bf6:	2b0a      	cmp	r3, #10
 8013bf8:	d02f      	beq.n	8013c5a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013bfe:	2b01      	cmp	r3, #1
 8013c00:	d02b      	beq.n	8013c5a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d007      	beq.n	8013c1a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7fe fa6e 	bl	80120f0 <pbuf_free>
      pcb->refused_data = NULL;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2200      	movs	r2, #0
 8013c18:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d002      	beq.n	8013c28 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f000 f986 	bl	8013f34 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c2e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7ff fdc7 	bl	80137c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7ff fdc2 	bl	80137c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2200      	movs	r2, #0
 8013c48:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	2200      	movs	r2, #0
 8013c56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	0801ce50 	.word	0x0801ce50
 8013c64:	0801d49c 	.word	0x0801d49c
 8013c68:	0801ce94 	.word	0x0801ce94

08013c6c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b084      	sub	sp, #16
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d106      	bne.n	8013c8a <tcp_pcb_remove+0x1e>
 8013c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8013d78 <tcp_pcb_remove+0x10c>)
 8013c7e:	f640 0283 	movw	r2, #2179	@ 0x883
 8013c82:	493e      	ldr	r1, [pc, #248]	@ (8013d7c <tcp_pcb_remove+0x110>)
 8013c84:	483e      	ldr	r0, [pc, #248]	@ (8013d80 <tcp_pcb_remove+0x114>)
 8013c86:	f007 fb05 	bl	801b294 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d106      	bne.n	8013c9e <tcp_pcb_remove+0x32>
 8013c90:	4b39      	ldr	r3, [pc, #228]	@ (8013d78 <tcp_pcb_remove+0x10c>)
 8013c92:	f640 0284 	movw	r2, #2180	@ 0x884
 8013c96:	493b      	ldr	r1, [pc, #236]	@ (8013d84 <tcp_pcb_remove+0x118>)
 8013c98:	4839      	ldr	r0, [pc, #228]	@ (8013d80 <tcp_pcb_remove+0x114>)
 8013c9a:	f007 fafb 	bl	801b294 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	683a      	ldr	r2, [r7, #0]
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d105      	bne.n	8013cb4 <tcp_pcb_remove+0x48>
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	68da      	ldr	r2, [r3, #12]
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	601a      	str	r2, [r3, #0]
 8013cb2:	e013      	b.n	8013cdc <tcp_pcb_remove+0x70>
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	60fb      	str	r3, [r7, #12]
 8013cba:	e00c      	b.n	8013cd6 <tcp_pcb_remove+0x6a>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	68db      	ldr	r3, [r3, #12]
 8013cc0:	683a      	ldr	r2, [r7, #0]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d104      	bne.n	8013cd0 <tcp_pcb_remove+0x64>
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	68da      	ldr	r2, [r3, #12]
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	60da      	str	r2, [r3, #12]
 8013cce:	e005      	b.n	8013cdc <tcp_pcb_remove+0x70>
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	60fb      	str	r3, [r7, #12]
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d1ef      	bne.n	8013cbc <tcp_pcb_remove+0x50>
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013ce2:	6838      	ldr	r0, [r7, #0]
 8013ce4:	f7ff ff72 	bl	8013bcc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	7d1b      	ldrb	r3, [r3, #20]
 8013cec:	2b0a      	cmp	r3, #10
 8013cee:	d013      	beq.n	8013d18 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d00f      	beq.n	8013d18 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	8b5b      	ldrh	r3, [r3, #26]
 8013cfc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d009      	beq.n	8013d18 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013d04:	683b      	ldr	r3, [r7, #0]
 8013d06:	8b5b      	ldrh	r3, [r3, #26]
 8013d08:	f043 0302 	orr.w	r3, r3, #2
 8013d0c:	b29a      	uxth	r2, r3
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013d12:	6838      	ldr	r0, [r7, #0]
 8013d14:	f002 ff6a 	bl	8016bec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	7d1b      	ldrb	r3, [r3, #20]
 8013d1c:	2b01      	cmp	r3, #1
 8013d1e:	d020      	beq.n	8013d62 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d006      	beq.n	8013d36 <tcp_pcb_remove+0xca>
 8013d28:	4b13      	ldr	r3, [pc, #76]	@ (8013d78 <tcp_pcb_remove+0x10c>)
 8013d2a:	f640 0293 	movw	r2, #2195	@ 0x893
 8013d2e:	4916      	ldr	r1, [pc, #88]	@ (8013d88 <tcp_pcb_remove+0x11c>)
 8013d30:	4813      	ldr	r0, [pc, #76]	@ (8013d80 <tcp_pcb_remove+0x114>)
 8013d32:	f007 faaf 	bl	801b294 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d006      	beq.n	8013d4c <tcp_pcb_remove+0xe0>
 8013d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8013d78 <tcp_pcb_remove+0x10c>)
 8013d40:	f640 0294 	movw	r2, #2196	@ 0x894
 8013d44:	4911      	ldr	r1, [pc, #68]	@ (8013d8c <tcp_pcb_remove+0x120>)
 8013d46:	480e      	ldr	r0, [pc, #56]	@ (8013d80 <tcp_pcb_remove+0x114>)
 8013d48:	f007 faa4 	bl	801b294 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d006      	beq.n	8013d62 <tcp_pcb_remove+0xf6>
 8013d54:	4b08      	ldr	r3, [pc, #32]	@ (8013d78 <tcp_pcb_remove+0x10c>)
 8013d56:	f640 0296 	movw	r2, #2198	@ 0x896
 8013d5a:	490d      	ldr	r1, [pc, #52]	@ (8013d90 <tcp_pcb_remove+0x124>)
 8013d5c:	4808      	ldr	r0, [pc, #32]	@ (8013d80 <tcp_pcb_remove+0x114>)
 8013d5e:	f007 fa99 	bl	801b294 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	2200      	movs	r2, #0
 8013d66:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013d6e:	bf00      	nop
 8013d70:	3710      	adds	r7, #16
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	0801ce50 	.word	0x0801ce50
 8013d7c:	0801d4b8 	.word	0x0801d4b8
 8013d80:	0801ce94 	.word	0x0801ce94
 8013d84:	0801d4d4 	.word	0x0801d4d4
 8013d88:	0801d4f4 	.word	0x0801d4f4
 8013d8c:	0801d50c 	.word	0x0801d50c
 8013d90:	0801d528 	.word	0x0801d528

08013d94 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d106      	bne.n	8013db0 <tcp_next_iss+0x1c>
 8013da2:	4b0a      	ldr	r3, [pc, #40]	@ (8013dcc <tcp_next_iss+0x38>)
 8013da4:	f640 02af 	movw	r2, #2223	@ 0x8af
 8013da8:	4909      	ldr	r1, [pc, #36]	@ (8013dd0 <tcp_next_iss+0x3c>)
 8013daa:	480a      	ldr	r0, [pc, #40]	@ (8013dd4 <tcp_next_iss+0x40>)
 8013dac:	f007 fa72 	bl	801b294 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013db0:	4b09      	ldr	r3, [pc, #36]	@ (8013dd8 <tcp_next_iss+0x44>)
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	4b09      	ldr	r3, [pc, #36]	@ (8013ddc <tcp_next_iss+0x48>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4413      	add	r3, r2
 8013dba:	4a07      	ldr	r2, [pc, #28]	@ (8013dd8 <tcp_next_iss+0x44>)
 8013dbc:	6013      	str	r3, [r2, #0]
  return iss;
 8013dbe:	4b06      	ldr	r3, [pc, #24]	@ (8013dd8 <tcp_next_iss+0x44>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3708      	adds	r7, #8
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	0801ce50 	.word	0x0801ce50
 8013dd0:	0801d540 	.word	0x0801d540
 8013dd4:	0801ce94 	.word	0x0801ce94
 8013dd8:	240049e8 	.word	0x240049e8
 8013ddc:	24014bb4 	.word	0x24014bb4

08013de0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b086      	sub	sp, #24
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	4603      	mov	r3, r0
 8013de8:	60b9      	str	r1, [r7, #8]
 8013dea:	607a      	str	r2, [r7, #4]
 8013dec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d106      	bne.n	8013e02 <tcp_eff_send_mss_netif+0x22>
 8013df4:	4b14      	ldr	r3, [pc, #80]	@ (8013e48 <tcp_eff_send_mss_netif+0x68>)
 8013df6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8013dfa:	4914      	ldr	r1, [pc, #80]	@ (8013e4c <tcp_eff_send_mss_netif+0x6c>)
 8013dfc:	4814      	ldr	r0, [pc, #80]	@ (8013e50 <tcp_eff_send_mss_netif+0x70>)
 8013dfe:	f007 fa49 	bl	801b294 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d101      	bne.n	8013e0c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013e08:	89fb      	ldrh	r3, [r7, #14]
 8013e0a:	e019      	b.n	8013e40 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013e10:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013e12:	8afb      	ldrh	r3, [r7, #22]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d012      	beq.n	8013e3e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013e18:	2328      	movs	r3, #40	@ 0x28
 8013e1a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013e1c:	8afa      	ldrh	r2, [r7, #22]
 8013e1e:	8abb      	ldrh	r3, [r7, #20]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d904      	bls.n	8013e2e <tcp_eff_send_mss_netif+0x4e>
 8013e24:	8afa      	ldrh	r2, [r7, #22]
 8013e26:	8abb      	ldrh	r3, [r7, #20]
 8013e28:	1ad3      	subs	r3, r2, r3
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	e000      	b.n	8013e30 <tcp_eff_send_mss_netif+0x50>
 8013e2e:	2300      	movs	r3, #0
 8013e30:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013e32:	8a7a      	ldrh	r2, [r7, #18]
 8013e34:	89fb      	ldrh	r3, [r7, #14]
 8013e36:	4293      	cmp	r3, r2
 8013e38:	bf28      	it	cs
 8013e3a:	4613      	movcs	r3, r2
 8013e3c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013e3e:	89fb      	ldrh	r3, [r7, #14]
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	3718      	adds	r7, #24
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	0801ce50 	.word	0x0801ce50
 8013e4c:	0801d55c 	.word	0x0801d55c
 8013e50:	0801ce94 	.word	0x0801ce94

08013e54 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b084      	sub	sp, #16
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
 8013e5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d119      	bne.n	8013e9c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013e68:	4b10      	ldr	r3, [pc, #64]	@ (8013eac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013e6a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8013e6e:	4910      	ldr	r1, [pc, #64]	@ (8013eb0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013e70:	4810      	ldr	r0, [pc, #64]	@ (8013eb4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013e72:	f007 fa0f 	bl	801b294 <iprintf>

  while (pcb != NULL) {
 8013e76:	e011      	b.n	8013e9c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	681a      	ldr	r2, [r3, #0]
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d108      	bne.n	8013e96 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	68db      	ldr	r3, [r3, #12]
 8013e88:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013e8a:	68f8      	ldr	r0, [r7, #12]
 8013e8c:	f7fe ffc0 	bl	8012e10 <tcp_abort>
      pcb = next;
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	60fb      	str	r3, [r7, #12]
 8013e94:	e002      	b.n	8013e9c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d1ea      	bne.n	8013e78 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013ea2:	bf00      	nop
 8013ea4:	bf00      	nop
 8013ea6:	3710      	adds	r7, #16
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	0801ce50 	.word	0x0801ce50
 8013eb0:	0801d584 	.word	0x0801d584
 8013eb4:	0801ce94 	.word	0x0801ce94

08013eb8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d02a      	beq.n	8013f1e <tcp_netif_ip_addr_changed+0x66>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d026      	beq.n	8013f1e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013ed0:	4b15      	ldr	r3, [pc, #84]	@ (8013f28 <tcp_netif_ip_addr_changed+0x70>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f7ff ffbc 	bl	8013e54 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013edc:	4b13      	ldr	r3, [pc, #76]	@ (8013f2c <tcp_netif_ip_addr_changed+0x74>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f7ff ffb6 	bl	8013e54 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013ee8:	683b      	ldr	r3, [r7, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d017      	beq.n	8013f1e <tcp_netif_ip_addr_changed+0x66>
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d013      	beq.n	8013f1e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8013f30 <tcp_netif_ip_addr_changed+0x78>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	60fb      	str	r3, [r7, #12]
 8013efc:	e00c      	b.n	8013f18 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	681a      	ldr	r2, [r3, #0]
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d103      	bne.n	8013f12 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	68db      	ldr	r3, [r3, #12]
 8013f16:	60fb      	str	r3, [r7, #12]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d1ef      	bne.n	8013efe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013f1e:	bf00      	nop
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	24014bc0 	.word	0x24014bc0
 8013f2c:	24014bb8 	.word	0x24014bb8
 8013f30:	24014bbc 	.word	0x24014bbc

08013f34 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d007      	beq.n	8013f54 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7ff fc3d 	bl	80137c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2200      	movs	r2, #0
 8013f52:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013f54:	bf00      	nop
 8013f56:	3708      	adds	r7, #8
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013f5c:	b590      	push	{r4, r7, lr}
 8013f5e:	b08d      	sub	sp, #52	@ 0x34
 8013f60:	af04      	add	r7, sp, #16
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d105      	bne.n	8013f78 <tcp_input+0x1c>
 8013f6c:	4b9b      	ldr	r3, [pc, #620]	@ (80141dc <tcp_input+0x280>)
 8013f6e:	2283      	movs	r2, #131	@ 0x83
 8013f70:	499b      	ldr	r1, [pc, #620]	@ (80141e0 <tcp_input+0x284>)
 8013f72:	489c      	ldr	r0, [pc, #624]	@ (80141e4 <tcp_input+0x288>)
 8013f74:	f007 f98e 	bl	801b294 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	4a9a      	ldr	r2, [pc, #616]	@ (80141e8 <tcp_input+0x28c>)
 8013f7e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	895b      	ldrh	r3, [r3, #10]
 8013f84:	2b13      	cmp	r3, #19
 8013f86:	f240 83d1 	bls.w	801472c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013f8a:	4b98      	ldr	r3, [pc, #608]	@ (80141ec <tcp_input+0x290>)
 8013f8c:	695b      	ldr	r3, [r3, #20]
 8013f8e:	4a97      	ldr	r2, [pc, #604]	@ (80141ec <tcp_input+0x290>)
 8013f90:	6812      	ldr	r2, [r2, #0]
 8013f92:	4611      	mov	r1, r2
 8013f94:	4618      	mov	r0, r3
 8013f96:	f005 ffa5 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	f040 83c7 	bne.w	8014730 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013fa2:	4b92      	ldr	r3, [pc, #584]	@ (80141ec <tcp_input+0x290>)
 8013fa4:	695b      	ldr	r3, [r3, #20]
 8013fa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013faa:	2be0      	cmp	r3, #224	@ 0xe0
 8013fac:	f000 83c0 	beq.w	8014730 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013fb0:	4b8d      	ldr	r3, [pc, #564]	@ (80141e8 <tcp_input+0x28c>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	899b      	ldrh	r3, [r3, #12]
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7fc fbe7 	bl	801078c <lwip_htons>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	0b1b      	lsrs	r3, r3, #12
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	b2db      	uxtb	r3, r3
 8013fc6:	009b      	lsls	r3, r3, #2
 8013fc8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013fca:	7cbb      	ldrb	r3, [r7, #18]
 8013fcc:	2b13      	cmp	r3, #19
 8013fce:	f240 83b1 	bls.w	8014734 <tcp_input+0x7d8>
 8013fd2:	7cbb      	ldrb	r3, [r7, #18]
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	891b      	ldrh	r3, [r3, #8]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	f200 83aa 	bhi.w	8014734 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013fe0:	7cbb      	ldrb	r3, [r7, #18]
 8013fe2:	b29b      	uxth	r3, r3
 8013fe4:	3b14      	subs	r3, #20
 8013fe6:	b29a      	uxth	r2, r3
 8013fe8:	4b81      	ldr	r3, [pc, #516]	@ (80141f0 <tcp_input+0x294>)
 8013fea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013fec:	4b81      	ldr	r3, [pc, #516]	@ (80141f4 <tcp_input+0x298>)
 8013fee:	2200      	movs	r2, #0
 8013ff0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	895a      	ldrh	r2, [r3, #10]
 8013ff6:	7cbb      	ldrb	r3, [r7, #18]
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d309      	bcc.n	8014012 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80141f0 <tcp_input+0x294>)
 8014000:	881a      	ldrh	r2, [r3, #0]
 8014002:	4b7d      	ldr	r3, [pc, #500]	@ (80141f8 <tcp_input+0x29c>)
 8014004:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014006:	7cbb      	ldrb	r3, [r7, #18]
 8014008:	4619      	mov	r1, r3
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f7fd ffea 	bl	8011fe4 <pbuf_remove_header>
 8014010:	e04e      	b.n	80140b0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d105      	bne.n	8014026 <tcp_input+0xca>
 801401a:	4b70      	ldr	r3, [pc, #448]	@ (80141dc <tcp_input+0x280>)
 801401c:	22c2      	movs	r2, #194	@ 0xc2
 801401e:	4977      	ldr	r1, [pc, #476]	@ (80141fc <tcp_input+0x2a0>)
 8014020:	4870      	ldr	r0, [pc, #448]	@ (80141e4 <tcp_input+0x288>)
 8014022:	f007 f937 	bl	801b294 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014026:	2114      	movs	r1, #20
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f7fd ffdb 	bl	8011fe4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	895a      	ldrh	r2, [r3, #10]
 8014032:	4b71      	ldr	r3, [pc, #452]	@ (80141f8 <tcp_input+0x29c>)
 8014034:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014036:	4b6e      	ldr	r3, [pc, #440]	@ (80141f0 <tcp_input+0x294>)
 8014038:	881a      	ldrh	r2, [r3, #0]
 801403a:	4b6f      	ldr	r3, [pc, #444]	@ (80141f8 <tcp_input+0x29c>)
 801403c:	881b      	ldrh	r3, [r3, #0]
 801403e:	1ad3      	subs	r3, r2, r3
 8014040:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014042:	4b6d      	ldr	r3, [pc, #436]	@ (80141f8 <tcp_input+0x29c>)
 8014044:	881b      	ldrh	r3, [r3, #0]
 8014046:	4619      	mov	r1, r3
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f7fd ffcb 	bl	8011fe4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	895b      	ldrh	r3, [r3, #10]
 8014054:	8a3a      	ldrh	r2, [r7, #16]
 8014056:	429a      	cmp	r2, r3
 8014058:	f200 836e 	bhi.w	8014738 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	685b      	ldr	r3, [r3, #4]
 8014062:	4a64      	ldr	r2, [pc, #400]	@ (80141f4 <tcp_input+0x298>)
 8014064:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	8a3a      	ldrh	r2, [r7, #16]
 801406c:	4611      	mov	r1, r2
 801406e:	4618      	mov	r0, r3
 8014070:	f7fd ffb8 	bl	8011fe4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	891a      	ldrh	r2, [r3, #8]
 8014078:	8a3b      	ldrh	r3, [r7, #16]
 801407a:	1ad3      	subs	r3, r2, r3
 801407c:	b29a      	uxth	r2, r3
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	895b      	ldrh	r3, [r3, #10]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d005      	beq.n	8014096 <tcp_input+0x13a>
 801408a:	4b54      	ldr	r3, [pc, #336]	@ (80141dc <tcp_input+0x280>)
 801408c:	22df      	movs	r2, #223	@ 0xdf
 801408e:	495c      	ldr	r1, [pc, #368]	@ (8014200 <tcp_input+0x2a4>)
 8014090:	4854      	ldr	r0, [pc, #336]	@ (80141e4 <tcp_input+0x288>)
 8014092:	f007 f8ff 	bl	801b294 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	891a      	ldrh	r2, [r3, #8]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	891b      	ldrh	r3, [r3, #8]
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d005      	beq.n	80140b0 <tcp_input+0x154>
 80140a4:	4b4d      	ldr	r3, [pc, #308]	@ (80141dc <tcp_input+0x280>)
 80140a6:	22e0      	movs	r2, #224	@ 0xe0
 80140a8:	4956      	ldr	r1, [pc, #344]	@ (8014204 <tcp_input+0x2a8>)
 80140aa:	484e      	ldr	r0, [pc, #312]	@ (80141e4 <tcp_input+0x288>)
 80140ac:	f007 f8f2 	bl	801b294 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80140b0:	4b4d      	ldr	r3, [pc, #308]	@ (80141e8 <tcp_input+0x28c>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	881b      	ldrh	r3, [r3, #0]
 80140b6:	b29b      	uxth	r3, r3
 80140b8:	4a4b      	ldr	r2, [pc, #300]	@ (80141e8 <tcp_input+0x28c>)
 80140ba:	6814      	ldr	r4, [r2, #0]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fc fb65 	bl	801078c <lwip_htons>
 80140c2:	4603      	mov	r3, r0
 80140c4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80140c6:	4b48      	ldr	r3, [pc, #288]	@ (80141e8 <tcp_input+0x28c>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	885b      	ldrh	r3, [r3, #2]
 80140cc:	b29b      	uxth	r3, r3
 80140ce:	4a46      	ldr	r2, [pc, #280]	@ (80141e8 <tcp_input+0x28c>)
 80140d0:	6814      	ldr	r4, [r2, #0]
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fc fb5a 	bl	801078c <lwip_htons>
 80140d8:	4603      	mov	r3, r0
 80140da:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80140dc:	4b42      	ldr	r3, [pc, #264]	@ (80141e8 <tcp_input+0x28c>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	4a41      	ldr	r2, [pc, #260]	@ (80141e8 <tcp_input+0x28c>)
 80140e4:	6814      	ldr	r4, [r2, #0]
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fc fb66 	bl	80107b8 <lwip_htonl>
 80140ec:	4603      	mov	r3, r0
 80140ee:	6063      	str	r3, [r4, #4]
 80140f0:	6863      	ldr	r3, [r4, #4]
 80140f2:	4a45      	ldr	r2, [pc, #276]	@ (8014208 <tcp_input+0x2ac>)
 80140f4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80140f6:	4b3c      	ldr	r3, [pc, #240]	@ (80141e8 <tcp_input+0x28c>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	689b      	ldr	r3, [r3, #8]
 80140fc:	4a3a      	ldr	r2, [pc, #232]	@ (80141e8 <tcp_input+0x28c>)
 80140fe:	6814      	ldr	r4, [r2, #0]
 8014100:	4618      	mov	r0, r3
 8014102:	f7fc fb59 	bl	80107b8 <lwip_htonl>
 8014106:	4603      	mov	r3, r0
 8014108:	60a3      	str	r3, [r4, #8]
 801410a:	68a3      	ldr	r3, [r4, #8]
 801410c:	4a3f      	ldr	r2, [pc, #252]	@ (801420c <tcp_input+0x2b0>)
 801410e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014110:	4b35      	ldr	r3, [pc, #212]	@ (80141e8 <tcp_input+0x28c>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	89db      	ldrh	r3, [r3, #14]
 8014116:	b29b      	uxth	r3, r3
 8014118:	4a33      	ldr	r2, [pc, #204]	@ (80141e8 <tcp_input+0x28c>)
 801411a:	6814      	ldr	r4, [r2, #0]
 801411c:	4618      	mov	r0, r3
 801411e:	f7fc fb35 	bl	801078c <lwip_htons>
 8014122:	4603      	mov	r3, r0
 8014124:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014126:	4b30      	ldr	r3, [pc, #192]	@ (80141e8 <tcp_input+0x28c>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	899b      	ldrh	r3, [r3, #12]
 801412c:	b29b      	uxth	r3, r3
 801412e:	4618      	mov	r0, r3
 8014130:	f7fc fb2c 	bl	801078c <lwip_htons>
 8014134:	4603      	mov	r3, r0
 8014136:	b2db      	uxtb	r3, r3
 8014138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801413c:	b2da      	uxtb	r2, r3
 801413e:	4b34      	ldr	r3, [pc, #208]	@ (8014210 <tcp_input+0x2b4>)
 8014140:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	891a      	ldrh	r2, [r3, #8]
 8014146:	4b33      	ldr	r3, [pc, #204]	@ (8014214 <tcp_input+0x2b8>)
 8014148:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801414a:	4b31      	ldr	r3, [pc, #196]	@ (8014210 <tcp_input+0x2b4>)
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	f003 0303 	and.w	r3, r3, #3
 8014152:	2b00      	cmp	r3, #0
 8014154:	d00c      	beq.n	8014170 <tcp_input+0x214>
    tcplen++;
 8014156:	4b2f      	ldr	r3, [pc, #188]	@ (8014214 <tcp_input+0x2b8>)
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	3301      	adds	r3, #1
 801415c:	b29a      	uxth	r2, r3
 801415e:	4b2d      	ldr	r3, [pc, #180]	@ (8014214 <tcp_input+0x2b8>)
 8014160:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	891a      	ldrh	r2, [r3, #8]
 8014166:	4b2b      	ldr	r3, [pc, #172]	@ (8014214 <tcp_input+0x2b8>)
 8014168:	881b      	ldrh	r3, [r3, #0]
 801416a:	429a      	cmp	r2, r3
 801416c:	f200 82e6 	bhi.w	801473c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014170:	2300      	movs	r3, #0
 8014172:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014174:	4b28      	ldr	r3, [pc, #160]	@ (8014218 <tcp_input+0x2bc>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	61fb      	str	r3, [r7, #28]
 801417a:	e09d      	b.n	80142b8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	7d1b      	ldrb	r3, [r3, #20]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d105      	bne.n	8014190 <tcp_input+0x234>
 8014184:	4b15      	ldr	r3, [pc, #84]	@ (80141dc <tcp_input+0x280>)
 8014186:	22fb      	movs	r2, #251	@ 0xfb
 8014188:	4924      	ldr	r1, [pc, #144]	@ (801421c <tcp_input+0x2c0>)
 801418a:	4816      	ldr	r0, [pc, #88]	@ (80141e4 <tcp_input+0x288>)
 801418c:	f007 f882 	bl	801b294 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014190:	69fb      	ldr	r3, [r7, #28]
 8014192:	7d1b      	ldrb	r3, [r3, #20]
 8014194:	2b0a      	cmp	r3, #10
 8014196:	d105      	bne.n	80141a4 <tcp_input+0x248>
 8014198:	4b10      	ldr	r3, [pc, #64]	@ (80141dc <tcp_input+0x280>)
 801419a:	22fc      	movs	r2, #252	@ 0xfc
 801419c:	4920      	ldr	r1, [pc, #128]	@ (8014220 <tcp_input+0x2c4>)
 801419e:	4811      	ldr	r0, [pc, #68]	@ (80141e4 <tcp_input+0x288>)
 80141a0:	f007 f878 	bl	801b294 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	7d1b      	ldrb	r3, [r3, #20]
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d105      	bne.n	80141b8 <tcp_input+0x25c>
 80141ac:	4b0b      	ldr	r3, [pc, #44]	@ (80141dc <tcp_input+0x280>)
 80141ae:	22fd      	movs	r2, #253	@ 0xfd
 80141b0:	491c      	ldr	r1, [pc, #112]	@ (8014224 <tcp_input+0x2c8>)
 80141b2:	480c      	ldr	r0, [pc, #48]	@ (80141e4 <tcp_input+0x288>)
 80141b4:	f007 f86e 	bl	801b294 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	7a1b      	ldrb	r3, [r3, #8]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d033      	beq.n	8014228 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80141c0:	69fb      	ldr	r3, [r7, #28]
 80141c2:	7a1a      	ldrb	r2, [r3, #8]
 80141c4:	4b09      	ldr	r3, [pc, #36]	@ (80141ec <tcp_input+0x290>)
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80141cc:	3301      	adds	r3, #1
 80141ce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d029      	beq.n	8014228 <tcp_input+0x2cc>
      prev = pcb;
 80141d4:	69fb      	ldr	r3, [r7, #28]
 80141d6:	61bb      	str	r3, [r7, #24]
      continue;
 80141d8:	e06b      	b.n	80142b2 <tcp_input+0x356>
 80141da:	bf00      	nop
 80141dc:	0801d5b8 	.word	0x0801d5b8
 80141e0:	0801d5ec 	.word	0x0801d5ec
 80141e4:	0801d604 	.word	0x0801d604
 80141e8:	24014bdc 	.word	0x24014bdc
 80141ec:	2400e078 	.word	0x2400e078
 80141f0:	24014be0 	.word	0x24014be0
 80141f4:	24014be4 	.word	0x24014be4
 80141f8:	24014be2 	.word	0x24014be2
 80141fc:	0801d62c 	.word	0x0801d62c
 8014200:	0801d63c 	.word	0x0801d63c
 8014204:	0801d648 	.word	0x0801d648
 8014208:	24014bec 	.word	0x24014bec
 801420c:	24014bf0 	.word	0x24014bf0
 8014210:	24014bf8 	.word	0x24014bf8
 8014214:	24014bf6 	.word	0x24014bf6
 8014218:	24014bc0 	.word	0x24014bc0
 801421c:	0801d668 	.word	0x0801d668
 8014220:	0801d690 	.word	0x0801d690
 8014224:	0801d6bc 	.word	0x0801d6bc
    }

    if (pcb->remote_port == tcphdr->src &&
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	8b1a      	ldrh	r2, [r3, #24]
 801422c:	4b72      	ldr	r3, [pc, #456]	@ (80143f8 <tcp_input+0x49c>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	881b      	ldrh	r3, [r3, #0]
 8014232:	b29b      	uxth	r3, r3
 8014234:	429a      	cmp	r2, r3
 8014236:	d13a      	bne.n	80142ae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014238:	69fb      	ldr	r3, [r7, #28]
 801423a:	8ada      	ldrh	r2, [r3, #22]
 801423c:	4b6e      	ldr	r3, [pc, #440]	@ (80143f8 <tcp_input+0x49c>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	885b      	ldrh	r3, [r3, #2]
 8014242:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014244:	429a      	cmp	r2, r3
 8014246:	d132      	bne.n	80142ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014248:	69fb      	ldr	r3, [r7, #28]
 801424a:	685a      	ldr	r2, [r3, #4]
 801424c:	4b6b      	ldr	r3, [pc, #428]	@ (80143fc <tcp_input+0x4a0>)
 801424e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014250:	429a      	cmp	r2, r3
 8014252:	d12c      	bne.n	80142ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014254:	69fb      	ldr	r3, [r7, #28]
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	4b68      	ldr	r3, [pc, #416]	@ (80143fc <tcp_input+0x4a0>)
 801425a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801425c:	429a      	cmp	r2, r3
 801425e:	d126      	bne.n	80142ae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	68db      	ldr	r3, [r3, #12]
 8014264:	69fa      	ldr	r2, [r7, #28]
 8014266:	429a      	cmp	r2, r3
 8014268:	d106      	bne.n	8014278 <tcp_input+0x31c>
 801426a:	4b65      	ldr	r3, [pc, #404]	@ (8014400 <tcp_input+0x4a4>)
 801426c:	f240 120d 	movw	r2, #269	@ 0x10d
 8014270:	4964      	ldr	r1, [pc, #400]	@ (8014404 <tcp_input+0x4a8>)
 8014272:	4865      	ldr	r0, [pc, #404]	@ (8014408 <tcp_input+0x4ac>)
 8014274:	f007 f80e 	bl	801b294 <iprintf>
      if (prev != NULL) {
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d00a      	beq.n	8014294 <tcp_input+0x338>
        prev->next = pcb->next;
 801427e:	69fb      	ldr	r3, [r7, #28]
 8014280:	68da      	ldr	r2, [r3, #12]
 8014282:	69bb      	ldr	r3, [r7, #24]
 8014284:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014286:	4b61      	ldr	r3, [pc, #388]	@ (801440c <tcp_input+0x4b0>)
 8014288:	681a      	ldr	r2, [r3, #0]
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801428e:	4a5f      	ldr	r2, [pc, #380]	@ (801440c <tcp_input+0x4b0>)
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014294:	69fb      	ldr	r3, [r7, #28]
 8014296:	68db      	ldr	r3, [r3, #12]
 8014298:	69fa      	ldr	r2, [r7, #28]
 801429a:	429a      	cmp	r2, r3
 801429c:	d111      	bne.n	80142c2 <tcp_input+0x366>
 801429e:	4b58      	ldr	r3, [pc, #352]	@ (8014400 <tcp_input+0x4a4>)
 80142a0:	f240 1215 	movw	r2, #277	@ 0x115
 80142a4:	495a      	ldr	r1, [pc, #360]	@ (8014410 <tcp_input+0x4b4>)
 80142a6:	4858      	ldr	r0, [pc, #352]	@ (8014408 <tcp_input+0x4ac>)
 80142a8:	f006 fff4 	bl	801b294 <iprintf>
      break;
 80142ac:	e009      	b.n	80142c2 <tcp_input+0x366>
    }
    prev = pcb;
 80142ae:	69fb      	ldr	r3, [r7, #28]
 80142b0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80142b2:	69fb      	ldr	r3, [r7, #28]
 80142b4:	68db      	ldr	r3, [r3, #12]
 80142b6:	61fb      	str	r3, [r7, #28]
 80142b8:	69fb      	ldr	r3, [r7, #28]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f47f af5e 	bne.w	801417c <tcp_input+0x220>
 80142c0:	e000      	b.n	80142c4 <tcp_input+0x368>
      break;
 80142c2:	bf00      	nop
  }

  if (pcb == NULL) {
 80142c4:	69fb      	ldr	r3, [r7, #28]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	f040 80aa 	bne.w	8014420 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80142cc:	4b51      	ldr	r3, [pc, #324]	@ (8014414 <tcp_input+0x4b8>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	61fb      	str	r3, [r7, #28]
 80142d2:	e03f      	b.n	8014354 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80142d4:	69fb      	ldr	r3, [r7, #28]
 80142d6:	7d1b      	ldrb	r3, [r3, #20]
 80142d8:	2b0a      	cmp	r3, #10
 80142da:	d006      	beq.n	80142ea <tcp_input+0x38e>
 80142dc:	4b48      	ldr	r3, [pc, #288]	@ (8014400 <tcp_input+0x4a4>)
 80142de:	f240 121f 	movw	r2, #287	@ 0x11f
 80142e2:	494d      	ldr	r1, [pc, #308]	@ (8014418 <tcp_input+0x4bc>)
 80142e4:	4848      	ldr	r0, [pc, #288]	@ (8014408 <tcp_input+0x4ac>)
 80142e6:	f006 ffd5 	bl	801b294 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80142ea:	69fb      	ldr	r3, [r7, #28]
 80142ec:	7a1b      	ldrb	r3, [r3, #8]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d009      	beq.n	8014306 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	7a1a      	ldrb	r2, [r3, #8]
 80142f6:	4b41      	ldr	r3, [pc, #260]	@ (80143fc <tcp_input+0x4a0>)
 80142f8:	685b      	ldr	r3, [r3, #4]
 80142fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80142fe:	3301      	adds	r3, #1
 8014300:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014302:	429a      	cmp	r2, r3
 8014304:	d122      	bne.n	801434c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8014306:	69fb      	ldr	r3, [r7, #28]
 8014308:	8b1a      	ldrh	r2, [r3, #24]
 801430a:	4b3b      	ldr	r3, [pc, #236]	@ (80143f8 <tcp_input+0x49c>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	881b      	ldrh	r3, [r3, #0]
 8014310:	b29b      	uxth	r3, r3
 8014312:	429a      	cmp	r2, r3
 8014314:	d11b      	bne.n	801434e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8014316:	69fb      	ldr	r3, [r7, #28]
 8014318:	8ada      	ldrh	r2, [r3, #22]
 801431a:	4b37      	ldr	r3, [pc, #220]	@ (80143f8 <tcp_input+0x49c>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	885b      	ldrh	r3, [r3, #2]
 8014320:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014322:	429a      	cmp	r2, r3
 8014324:	d113      	bne.n	801434e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	685a      	ldr	r2, [r3, #4]
 801432a:	4b34      	ldr	r3, [pc, #208]	@ (80143fc <tcp_input+0x4a0>)
 801432c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801432e:	429a      	cmp	r2, r3
 8014330:	d10d      	bne.n	801434e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014332:	69fb      	ldr	r3, [r7, #28]
 8014334:	681a      	ldr	r2, [r3, #0]
 8014336:	4b31      	ldr	r3, [pc, #196]	@ (80143fc <tcp_input+0x4a0>)
 8014338:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801433a:	429a      	cmp	r2, r3
 801433c:	d107      	bne.n	801434e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801433e:	69f8      	ldr	r0, [r7, #28]
 8014340:	f000 fb56 	bl	80149f0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7fd fed3 	bl	80120f0 <pbuf_free>
        return;
 801434a:	e1fd      	b.n	8014748 <tcp_input+0x7ec>
        continue;
 801434c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	61fb      	str	r3, [r7, #28]
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d1bc      	bne.n	80142d4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801435a:	2300      	movs	r3, #0
 801435c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801435e:	4b2f      	ldr	r3, [pc, #188]	@ (801441c <tcp_input+0x4c0>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	617b      	str	r3, [r7, #20]
 8014364:	e02a      	b.n	80143bc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	7a1b      	ldrb	r3, [r3, #8]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d00c      	beq.n	8014388 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	7a1a      	ldrb	r2, [r3, #8]
 8014372:	4b22      	ldr	r3, [pc, #136]	@ (80143fc <tcp_input+0x4a0>)
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801437a:	3301      	adds	r3, #1
 801437c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801437e:	429a      	cmp	r2, r3
 8014380:	d002      	beq.n	8014388 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	61bb      	str	r3, [r7, #24]
        continue;
 8014386:	e016      	b.n	80143b6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	8ada      	ldrh	r2, [r3, #22]
 801438c:	4b1a      	ldr	r3, [pc, #104]	@ (80143f8 <tcp_input+0x49c>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	885b      	ldrh	r3, [r3, #2]
 8014392:	b29b      	uxth	r3, r3
 8014394:	429a      	cmp	r2, r3
 8014396:	d10c      	bne.n	80143b2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	681a      	ldr	r2, [r3, #0]
 801439c:	4b17      	ldr	r3, [pc, #92]	@ (80143fc <tcp_input+0x4a0>)
 801439e:	695b      	ldr	r3, [r3, #20]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d00f      	beq.n	80143c4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d00d      	beq.n	80143c6 <tcp_input+0x46a>
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d009      	beq.n	80143c6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	617b      	str	r3, [r7, #20]
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d1d1      	bne.n	8014366 <tcp_input+0x40a>
 80143c2:	e000      	b.n	80143c6 <tcp_input+0x46a>
            break;
 80143c4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d029      	beq.n	8014420 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80143cc:	69bb      	ldr	r3, [r7, #24]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d00a      	beq.n	80143e8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	68da      	ldr	r2, [r3, #12]
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80143da:	4b10      	ldr	r3, [pc, #64]	@ (801441c <tcp_input+0x4c0>)
 80143dc:	681a      	ldr	r2, [r3, #0]
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80143e2:	4a0e      	ldr	r2, [pc, #56]	@ (801441c <tcp_input+0x4c0>)
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80143e8:	6978      	ldr	r0, [r7, #20]
 80143ea:	f000 fa03 	bl	80147f4 <tcp_listen_input>
      }
      pbuf_free(p);
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f7fd fe7e 	bl	80120f0 <pbuf_free>
      return;
 80143f4:	e1a8      	b.n	8014748 <tcp_input+0x7ec>
 80143f6:	bf00      	nop
 80143f8:	24014bdc 	.word	0x24014bdc
 80143fc:	2400e078 	.word	0x2400e078
 8014400:	0801d5b8 	.word	0x0801d5b8
 8014404:	0801d6e4 	.word	0x0801d6e4
 8014408:	0801d604 	.word	0x0801d604
 801440c:	24014bc0 	.word	0x24014bc0
 8014410:	0801d710 	.word	0x0801d710
 8014414:	24014bc4 	.word	0x24014bc4
 8014418:	0801d73c 	.word	0x0801d73c
 801441c:	24014bbc 	.word	0x24014bbc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	2b00      	cmp	r3, #0
 8014424:	f000 8158 	beq.w	80146d8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014428:	4b95      	ldr	r3, [pc, #596]	@ (8014680 <tcp_input+0x724>)
 801442a:	2200      	movs	r2, #0
 801442c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	891a      	ldrh	r2, [r3, #8]
 8014432:	4b93      	ldr	r3, [pc, #588]	@ (8014680 <tcp_input+0x724>)
 8014434:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014436:	4a92      	ldr	r2, [pc, #584]	@ (8014680 <tcp_input+0x724>)
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801443c:	4b91      	ldr	r3, [pc, #580]	@ (8014684 <tcp_input+0x728>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	4a8f      	ldr	r2, [pc, #572]	@ (8014680 <tcp_input+0x724>)
 8014442:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014444:	4b90      	ldr	r3, [pc, #576]	@ (8014688 <tcp_input+0x72c>)
 8014446:	2200      	movs	r2, #0
 8014448:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801444a:	4b90      	ldr	r3, [pc, #576]	@ (801468c <tcp_input+0x730>)
 801444c:	2200      	movs	r2, #0
 801444e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014450:	4b8f      	ldr	r3, [pc, #572]	@ (8014690 <tcp_input+0x734>)
 8014452:	2200      	movs	r2, #0
 8014454:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014456:	4b8f      	ldr	r3, [pc, #572]	@ (8014694 <tcp_input+0x738>)
 8014458:	781b      	ldrb	r3, [r3, #0]
 801445a:	f003 0308 	and.w	r3, r3, #8
 801445e:	2b00      	cmp	r3, #0
 8014460:	d006      	beq.n	8014470 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	7b5b      	ldrb	r3, [r3, #13]
 8014466:	f043 0301 	orr.w	r3, r3, #1
 801446a:	b2da      	uxtb	r2, r3
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014474:	2b00      	cmp	r3, #0
 8014476:	d017      	beq.n	80144a8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014478:	69f8      	ldr	r0, [r7, #28]
 801447a:	f7ff f927 	bl	80136cc <tcp_process_refused_data>
 801447e:	4603      	mov	r3, r0
 8014480:	f113 0f0d 	cmn.w	r3, #13
 8014484:	d007      	beq.n	8014496 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014486:	69fb      	ldr	r3, [r7, #28]
 8014488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801448a:	2b00      	cmp	r3, #0
 801448c:	d00c      	beq.n	80144a8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801448e:	4b82      	ldr	r3, [pc, #520]	@ (8014698 <tcp_input+0x73c>)
 8014490:	881b      	ldrh	r3, [r3, #0]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d008      	beq.n	80144a8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801449a:	2b00      	cmp	r3, #0
 801449c:	f040 80e4 	bne.w	8014668 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80144a0:	69f8      	ldr	r0, [r7, #28]
 80144a2:	f003 f9a9 	bl	80177f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80144a6:	e0df      	b.n	8014668 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 80144a8:	4a7c      	ldr	r2, [pc, #496]	@ (801469c <tcp_input+0x740>)
 80144aa:	69fb      	ldr	r3, [r7, #28]
 80144ac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80144ae:	69f8      	ldr	r0, [r7, #28]
 80144b0:	f000 fb18 	bl	8014ae4 <tcp_process>
 80144b4:	4603      	mov	r3, r0
 80144b6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80144b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144bc:	f113 0f0d 	cmn.w	r3, #13
 80144c0:	f000 80d4 	beq.w	801466c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 80144c4:	4b71      	ldr	r3, [pc, #452]	@ (801468c <tcp_input+0x730>)
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	f003 0308 	and.w	r3, r3, #8
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d015      	beq.n	80144fc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80144d0:	69fb      	ldr	r3, [r7, #28]
 80144d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d008      	beq.n	80144ec <tcp_input+0x590>
 80144da:	69fb      	ldr	r3, [r7, #28]
 80144dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80144e0:	69fa      	ldr	r2, [r7, #28]
 80144e2:	6912      	ldr	r2, [r2, #16]
 80144e4:	f06f 010d 	mvn.w	r1, #13
 80144e8:	4610      	mov	r0, r2
 80144ea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80144ec:	69f9      	ldr	r1, [r7, #28]
 80144ee:	486c      	ldr	r0, [pc, #432]	@ (80146a0 <tcp_input+0x744>)
 80144f0:	f7ff fbbc 	bl	8013c6c <tcp_pcb_remove>
        tcp_free(pcb);
 80144f4:	69f8      	ldr	r0, [r7, #28]
 80144f6:	f7fe f9a3 	bl	8012840 <tcp_free>
 80144fa:	e0da      	b.n	80146b2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80144fc:	2300      	movs	r3, #0
 80144fe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014500:	4b63      	ldr	r3, [pc, #396]	@ (8014690 <tcp_input+0x734>)
 8014502:	881b      	ldrh	r3, [r3, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d01d      	beq.n	8014544 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014508:	4b61      	ldr	r3, [pc, #388]	@ (8014690 <tcp_input+0x734>)
 801450a:	881b      	ldrh	r3, [r3, #0]
 801450c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801450e:	69fb      	ldr	r3, [r7, #28]
 8014510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014514:	2b00      	cmp	r3, #0
 8014516:	d00a      	beq.n	801452e <tcp_input+0x5d2>
 8014518:	69fb      	ldr	r3, [r7, #28]
 801451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801451e:	69fa      	ldr	r2, [r7, #28]
 8014520:	6910      	ldr	r0, [r2, #16]
 8014522:	89fa      	ldrh	r2, [r7, #14]
 8014524:	69f9      	ldr	r1, [r7, #28]
 8014526:	4798      	blx	r3
 8014528:	4603      	mov	r3, r0
 801452a:	74fb      	strb	r3, [r7, #19]
 801452c:	e001      	b.n	8014532 <tcp_input+0x5d6>
 801452e:	2300      	movs	r3, #0
 8014530:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014536:	f113 0f0d 	cmn.w	r3, #13
 801453a:	f000 8099 	beq.w	8014670 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801453e:	4b54      	ldr	r3, [pc, #336]	@ (8014690 <tcp_input+0x734>)
 8014540:	2200      	movs	r2, #0
 8014542:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014544:	69f8      	ldr	r0, [r7, #28]
 8014546:	f000 f915 	bl	8014774 <tcp_input_delayed_close>
 801454a:	4603      	mov	r3, r0
 801454c:	2b00      	cmp	r3, #0
 801454e:	f040 8091 	bne.w	8014674 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014552:	4b4d      	ldr	r3, [pc, #308]	@ (8014688 <tcp_input+0x72c>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d041      	beq.n	80145de <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801455a:	69fb      	ldr	r3, [r7, #28]
 801455c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801455e:	2b00      	cmp	r3, #0
 8014560:	d006      	beq.n	8014570 <tcp_input+0x614>
 8014562:	4b50      	ldr	r3, [pc, #320]	@ (80146a4 <tcp_input+0x748>)
 8014564:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014568:	494f      	ldr	r1, [pc, #316]	@ (80146a8 <tcp_input+0x74c>)
 801456a:	4850      	ldr	r0, [pc, #320]	@ (80146ac <tcp_input+0x750>)
 801456c:	f006 fe92 	bl	801b294 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	8b5b      	ldrh	r3, [r3, #26]
 8014574:	f003 0310 	and.w	r3, r3, #16
 8014578:	2b00      	cmp	r3, #0
 801457a:	d008      	beq.n	801458e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801457c:	4b42      	ldr	r3, [pc, #264]	@ (8014688 <tcp_input+0x72c>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	4618      	mov	r0, r3
 8014582:	f7fd fdb5 	bl	80120f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014586:	69f8      	ldr	r0, [r7, #28]
 8014588:	f7fe fc42 	bl	8012e10 <tcp_abort>
            goto aborted;
 801458c:	e091      	b.n	80146b2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801458e:	69fb      	ldr	r3, [r7, #28]
 8014590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014594:	2b00      	cmp	r3, #0
 8014596:	d00c      	beq.n	80145b2 <tcp_input+0x656>
 8014598:	69fb      	ldr	r3, [r7, #28]
 801459a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801459e:	69fb      	ldr	r3, [r7, #28]
 80145a0:	6918      	ldr	r0, [r3, #16]
 80145a2:	4b39      	ldr	r3, [pc, #228]	@ (8014688 <tcp_input+0x72c>)
 80145a4:	681a      	ldr	r2, [r3, #0]
 80145a6:	2300      	movs	r3, #0
 80145a8:	69f9      	ldr	r1, [r7, #28]
 80145aa:	47a0      	blx	r4
 80145ac:	4603      	mov	r3, r0
 80145ae:	74fb      	strb	r3, [r7, #19]
 80145b0:	e008      	b.n	80145c4 <tcp_input+0x668>
 80145b2:	4b35      	ldr	r3, [pc, #212]	@ (8014688 <tcp_input+0x72c>)
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	2300      	movs	r3, #0
 80145b8:	69f9      	ldr	r1, [r7, #28]
 80145ba:	2000      	movs	r0, #0
 80145bc:	f7ff f95e 	bl	801387c <tcp_recv_null>
 80145c0:	4603      	mov	r3, r0
 80145c2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80145c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80145c8:	f113 0f0d 	cmn.w	r3, #13
 80145cc:	d054      	beq.n	8014678 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80145ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d003      	beq.n	80145de <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80145d6:	4b2c      	ldr	r3, [pc, #176]	@ (8014688 <tcp_input+0x72c>)
 80145d8:	681a      	ldr	r2, [r3, #0]
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80145de:	4b2b      	ldr	r3, [pc, #172]	@ (801468c <tcp_input+0x730>)
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	f003 0320 	and.w	r3, r3, #32
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d031      	beq.n	801464e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 80145ea:	69fb      	ldr	r3, [r7, #28]
 80145ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d009      	beq.n	8014606 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80145f2:	69fb      	ldr	r3, [r7, #28]
 80145f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80145f6:	7b5a      	ldrb	r2, [r3, #13]
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80145fc:	f042 0220 	orr.w	r2, r2, #32
 8014600:	b2d2      	uxtb	r2, r2
 8014602:	735a      	strb	r2, [r3, #13]
 8014604:	e023      	b.n	801464e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014606:	69fb      	ldr	r3, [r7, #28]
 8014608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801460a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801460e:	4293      	cmp	r3, r2
 8014610:	d005      	beq.n	801461e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8014612:	69fb      	ldr	r3, [r7, #28]
 8014614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014616:	3301      	adds	r3, #1
 8014618:	b29a      	uxth	r2, r3
 801461a:	69fb      	ldr	r3, [r7, #28]
 801461c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801461e:	69fb      	ldr	r3, [r7, #28]
 8014620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014624:	2b00      	cmp	r3, #0
 8014626:	d00b      	beq.n	8014640 <tcp_input+0x6e4>
 8014628:	69fb      	ldr	r3, [r7, #28]
 801462a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801462e:	69fb      	ldr	r3, [r7, #28]
 8014630:	6918      	ldr	r0, [r3, #16]
 8014632:	2300      	movs	r3, #0
 8014634:	2200      	movs	r2, #0
 8014636:	69f9      	ldr	r1, [r7, #28]
 8014638:	47a0      	blx	r4
 801463a:	4603      	mov	r3, r0
 801463c:	74fb      	strb	r3, [r7, #19]
 801463e:	e001      	b.n	8014644 <tcp_input+0x6e8>
 8014640:	2300      	movs	r3, #0
 8014642:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014644:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014648:	f113 0f0d 	cmn.w	r3, #13
 801464c:	d016      	beq.n	801467c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801464e:	4b13      	ldr	r3, [pc, #76]	@ (801469c <tcp_input+0x740>)
 8014650:	2200      	movs	r2, #0
 8014652:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014654:	69f8      	ldr	r0, [r7, #28]
 8014656:	f000 f88d 	bl	8014774 <tcp_input_delayed_close>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d127      	bne.n	80146b0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014660:	69f8      	ldr	r0, [r7, #28]
 8014662:	f002 fac3 	bl	8016bec <tcp_output>
 8014666:	e024      	b.n	80146b2 <tcp_input+0x756>
        goto aborted;
 8014668:	bf00      	nop
 801466a:	e022      	b.n	80146b2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801466c:	bf00      	nop
 801466e:	e020      	b.n	80146b2 <tcp_input+0x756>
              goto aborted;
 8014670:	bf00      	nop
 8014672:	e01e      	b.n	80146b2 <tcp_input+0x756>
          goto aborted;
 8014674:	bf00      	nop
 8014676:	e01c      	b.n	80146b2 <tcp_input+0x756>
            goto aborted;
 8014678:	bf00      	nop
 801467a:	e01a      	b.n	80146b2 <tcp_input+0x756>
              goto aborted;
 801467c:	bf00      	nop
 801467e:	e018      	b.n	80146b2 <tcp_input+0x756>
 8014680:	24014bcc 	.word	0x24014bcc
 8014684:	24014bdc 	.word	0x24014bdc
 8014688:	24014bfc 	.word	0x24014bfc
 801468c:	24014bf9 	.word	0x24014bf9
 8014690:	24014bf4 	.word	0x24014bf4
 8014694:	24014bf8 	.word	0x24014bf8
 8014698:	24014bf6 	.word	0x24014bf6
 801469c:	24014c00 	.word	0x24014c00
 80146a0:	24014bc0 	.word	0x24014bc0
 80146a4:	0801d5b8 	.word	0x0801d5b8
 80146a8:	0801d76c 	.word	0x0801d76c
 80146ac:	0801d604 	.word	0x0801d604
          goto aborted;
 80146b0:	bf00      	nop
    tcp_input_pcb = NULL;
 80146b2:	4b27      	ldr	r3, [pc, #156]	@ (8014750 <tcp_input+0x7f4>)
 80146b4:	2200      	movs	r2, #0
 80146b6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80146b8:	4b26      	ldr	r3, [pc, #152]	@ (8014754 <tcp_input+0x7f8>)
 80146ba:	2200      	movs	r2, #0
 80146bc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80146be:	4b26      	ldr	r3, [pc, #152]	@ (8014758 <tcp_input+0x7fc>)
 80146c0:	685b      	ldr	r3, [r3, #4]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d03f      	beq.n	8014746 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80146c6:	4b24      	ldr	r3, [pc, #144]	@ (8014758 <tcp_input+0x7fc>)
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fd fd10 	bl	80120f0 <pbuf_free>
      inseg.p = NULL;
 80146d0:	4b21      	ldr	r3, [pc, #132]	@ (8014758 <tcp_input+0x7fc>)
 80146d2:	2200      	movs	r2, #0
 80146d4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80146d6:	e036      	b.n	8014746 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80146d8:	4b20      	ldr	r3, [pc, #128]	@ (801475c <tcp_input+0x800>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	899b      	ldrh	r3, [r3, #12]
 80146de:	b29b      	uxth	r3, r3
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7fc f853 	bl	801078c <lwip_htons>
 80146e6:	4603      	mov	r3, r0
 80146e8:	b2db      	uxtb	r3, r3
 80146ea:	f003 0304 	and.w	r3, r3, #4
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d118      	bne.n	8014724 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146f2:	4b1b      	ldr	r3, [pc, #108]	@ (8014760 <tcp_input+0x804>)
 80146f4:	6819      	ldr	r1, [r3, #0]
 80146f6:	4b1b      	ldr	r3, [pc, #108]	@ (8014764 <tcp_input+0x808>)
 80146f8:	881b      	ldrh	r3, [r3, #0]
 80146fa:	461a      	mov	r2, r3
 80146fc:	4b1a      	ldr	r3, [pc, #104]	@ (8014768 <tcp_input+0x80c>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014702:	4b16      	ldr	r3, [pc, #88]	@ (801475c <tcp_input+0x800>)
 8014704:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014706:	885b      	ldrh	r3, [r3, #2]
 8014708:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801470a:	4a14      	ldr	r2, [pc, #80]	@ (801475c <tcp_input+0x800>)
 801470c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801470e:	8812      	ldrh	r2, [r2, #0]
 8014710:	b292      	uxth	r2, r2
 8014712:	9202      	str	r2, [sp, #8]
 8014714:	9301      	str	r3, [sp, #4]
 8014716:	4b15      	ldr	r3, [pc, #84]	@ (801476c <tcp_input+0x810>)
 8014718:	9300      	str	r3, [sp, #0]
 801471a:	4b15      	ldr	r3, [pc, #84]	@ (8014770 <tcp_input+0x814>)
 801471c:	4602      	mov	r2, r0
 801471e:	2000      	movs	r0, #0
 8014720:	f003 f818 	bl	8017754 <tcp_rst>
    pbuf_free(p);
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f7fd fce3 	bl	80120f0 <pbuf_free>
  return;
 801472a:	e00c      	b.n	8014746 <tcp_input+0x7ea>
    goto dropped;
 801472c:	bf00      	nop
 801472e:	e006      	b.n	801473e <tcp_input+0x7e2>
    goto dropped;
 8014730:	bf00      	nop
 8014732:	e004      	b.n	801473e <tcp_input+0x7e2>
    goto dropped;
 8014734:	bf00      	nop
 8014736:	e002      	b.n	801473e <tcp_input+0x7e2>
      goto dropped;
 8014738:	bf00      	nop
 801473a:	e000      	b.n	801473e <tcp_input+0x7e2>
      goto dropped;
 801473c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7fd fcd6 	bl	80120f0 <pbuf_free>
 8014744:	e000      	b.n	8014748 <tcp_input+0x7ec>
  return;
 8014746:	bf00      	nop
}
 8014748:	3724      	adds	r7, #36	@ 0x24
 801474a:	46bd      	mov	sp, r7
 801474c:	bd90      	pop	{r4, r7, pc}
 801474e:	bf00      	nop
 8014750:	24014c00 	.word	0x24014c00
 8014754:	24014bfc 	.word	0x24014bfc
 8014758:	24014bcc 	.word	0x24014bcc
 801475c:	24014bdc 	.word	0x24014bdc
 8014760:	24014bf0 	.word	0x24014bf0
 8014764:	24014bf6 	.word	0x24014bf6
 8014768:	24014bec 	.word	0x24014bec
 801476c:	2400e088 	.word	0x2400e088
 8014770:	2400e08c 	.word	0x2400e08c

08014774 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d106      	bne.n	8014790 <tcp_input_delayed_close+0x1c>
 8014782:	4b17      	ldr	r3, [pc, #92]	@ (80147e0 <tcp_input_delayed_close+0x6c>)
 8014784:	f240 225a 	movw	r2, #602	@ 0x25a
 8014788:	4916      	ldr	r1, [pc, #88]	@ (80147e4 <tcp_input_delayed_close+0x70>)
 801478a:	4817      	ldr	r0, [pc, #92]	@ (80147e8 <tcp_input_delayed_close+0x74>)
 801478c:	f006 fd82 	bl	801b294 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014790:	4b16      	ldr	r3, [pc, #88]	@ (80147ec <tcp_input_delayed_close+0x78>)
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	f003 0310 	and.w	r3, r3, #16
 8014798:	2b00      	cmp	r3, #0
 801479a:	d01c      	beq.n	80147d6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	8b5b      	ldrh	r3, [r3, #26]
 80147a0:	f003 0310 	and.w	r3, r3, #16
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d10d      	bne.n	80147c4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d008      	beq.n	80147c4 <tcp_input_delayed_close+0x50>
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80147b8:	687a      	ldr	r2, [r7, #4]
 80147ba:	6912      	ldr	r2, [r2, #16]
 80147bc:	f06f 010e 	mvn.w	r1, #14
 80147c0:	4610      	mov	r0, r2
 80147c2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80147c4:	6879      	ldr	r1, [r7, #4]
 80147c6:	480a      	ldr	r0, [pc, #40]	@ (80147f0 <tcp_input_delayed_close+0x7c>)
 80147c8:	f7ff fa50 	bl	8013c6c <tcp_pcb_remove>
    tcp_free(pcb);
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7fe f837 	bl	8012840 <tcp_free>
    return 1;
 80147d2:	2301      	movs	r3, #1
 80147d4:	e000      	b.n	80147d8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80147d6:	2300      	movs	r3, #0
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3708      	adds	r7, #8
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}
 80147e0:	0801d5b8 	.word	0x0801d5b8
 80147e4:	0801d788 	.word	0x0801d788
 80147e8:	0801d604 	.word	0x0801d604
 80147ec:	24014bf9 	.word	0x24014bf9
 80147f0:	24014bc0 	.word	0x24014bc0

080147f4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80147f4:	b590      	push	{r4, r7, lr}
 80147f6:	b08b      	sub	sp, #44	@ 0x2c
 80147f8:	af04      	add	r7, sp, #16
 80147fa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80147fc:	4b6f      	ldr	r3, [pc, #444]	@ (80149bc <tcp_listen_input+0x1c8>)
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	f003 0304 	and.w	r3, r3, #4
 8014804:	2b00      	cmp	r3, #0
 8014806:	f040 80d2 	bne.w	80149ae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d106      	bne.n	801481e <tcp_listen_input+0x2a>
 8014810:	4b6b      	ldr	r3, [pc, #428]	@ (80149c0 <tcp_listen_input+0x1cc>)
 8014812:	f240 2281 	movw	r2, #641	@ 0x281
 8014816:	496b      	ldr	r1, [pc, #428]	@ (80149c4 <tcp_listen_input+0x1d0>)
 8014818:	486b      	ldr	r0, [pc, #428]	@ (80149c8 <tcp_listen_input+0x1d4>)
 801481a:	f006 fd3b 	bl	801b294 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801481e:	4b67      	ldr	r3, [pc, #412]	@ (80149bc <tcp_listen_input+0x1c8>)
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	f003 0310 	and.w	r3, r3, #16
 8014826:	2b00      	cmp	r3, #0
 8014828:	d019      	beq.n	801485e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801482a:	4b68      	ldr	r3, [pc, #416]	@ (80149cc <tcp_listen_input+0x1d8>)
 801482c:	6819      	ldr	r1, [r3, #0]
 801482e:	4b68      	ldr	r3, [pc, #416]	@ (80149d0 <tcp_listen_input+0x1dc>)
 8014830:	881b      	ldrh	r3, [r3, #0]
 8014832:	461a      	mov	r2, r3
 8014834:	4b67      	ldr	r3, [pc, #412]	@ (80149d4 <tcp_listen_input+0x1e0>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801483a:	4b67      	ldr	r3, [pc, #412]	@ (80149d8 <tcp_listen_input+0x1e4>)
 801483c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801483e:	885b      	ldrh	r3, [r3, #2]
 8014840:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014842:	4a65      	ldr	r2, [pc, #404]	@ (80149d8 <tcp_listen_input+0x1e4>)
 8014844:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014846:	8812      	ldrh	r2, [r2, #0]
 8014848:	b292      	uxth	r2, r2
 801484a:	9202      	str	r2, [sp, #8]
 801484c:	9301      	str	r3, [sp, #4]
 801484e:	4b63      	ldr	r3, [pc, #396]	@ (80149dc <tcp_listen_input+0x1e8>)
 8014850:	9300      	str	r3, [sp, #0]
 8014852:	4b63      	ldr	r3, [pc, #396]	@ (80149e0 <tcp_listen_input+0x1ec>)
 8014854:	4602      	mov	r2, r0
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f002 ff7c 	bl	8017754 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801485c:	e0a9      	b.n	80149b2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801485e:	4b57      	ldr	r3, [pc, #348]	@ (80149bc <tcp_listen_input+0x1c8>)
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	f003 0302 	and.w	r3, r3, #2
 8014866:	2b00      	cmp	r3, #0
 8014868:	f000 80a3 	beq.w	80149b2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	7d5b      	ldrb	r3, [r3, #21]
 8014870:	4618      	mov	r0, r3
 8014872:	f7ff f927 	bl	8013ac4 <tcp_alloc>
 8014876:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d111      	bne.n	80148a2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	699b      	ldr	r3, [r3, #24]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d00a      	beq.n	801489c <tcp_listen_input+0xa8>
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	699b      	ldr	r3, [r3, #24]
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	6910      	ldr	r0, [r2, #16]
 801488e:	f04f 32ff 	mov.w	r2, #4294967295
 8014892:	2100      	movs	r1, #0
 8014894:	4798      	blx	r3
 8014896:	4603      	mov	r3, r0
 8014898:	73bb      	strb	r3, [r7, #14]
      return;
 801489a:	e08b      	b.n	80149b4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801489c:	23f0      	movs	r3, #240	@ 0xf0
 801489e:	73bb      	strb	r3, [r7, #14]
      return;
 80148a0:	e088      	b.n	80149b4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80148a2:	4b50      	ldr	r3, [pc, #320]	@ (80149e4 <tcp_listen_input+0x1f0>)
 80148a4:	695a      	ldr	r2, [r3, #20]
 80148a6:	697b      	ldr	r3, [r7, #20]
 80148a8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80148aa:	4b4e      	ldr	r3, [pc, #312]	@ (80149e4 <tcp_listen_input+0x1f0>)
 80148ac:	691a      	ldr	r2, [r3, #16]
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	8ada      	ldrh	r2, [r3, #22]
 80148b6:	697b      	ldr	r3, [r7, #20]
 80148b8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80148ba:	4b47      	ldr	r3, [pc, #284]	@ (80149d8 <tcp_listen_input+0x1e4>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	2203      	movs	r2, #3
 80148ca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80148cc:	4b41      	ldr	r3, [pc, #260]	@ (80149d4 <tcp_listen_input+0x1e0>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	1c5a      	adds	r2, r3, #1
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80148de:	6978      	ldr	r0, [r7, #20]
 80148e0:	f7ff fa58 	bl	8013d94 <tcp_next_iss>
 80148e4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	693a      	ldr	r2, [r7, #16]
 80148ea:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	693a      	ldr	r2, [r7, #16]
 80148f0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	693a      	ldr	r2, [r7, #16]
 80148f6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	693a      	ldr	r2, [r7, #16]
 80148fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80148fe:	4b35      	ldr	r3, [pc, #212]	@ (80149d4 <tcp_listen_input+0x1e0>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	1e5a      	subs	r2, r3, #1
 8014904:	697b      	ldr	r3, [r7, #20]
 8014906:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	691a      	ldr	r2, [r3, #16]
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014910:	697b      	ldr	r3, [r7, #20]
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	7a5b      	ldrb	r3, [r3, #9]
 801491a:	f003 030c 	and.w	r3, r3, #12
 801491e:	b2da      	uxtb	r2, r3
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	7a1a      	ldrb	r2, [r3, #8]
 8014928:	697b      	ldr	r3, [r7, #20]
 801492a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801492c:	4b2e      	ldr	r3, [pc, #184]	@ (80149e8 <tcp_listen_input+0x1f4>)
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	60da      	str	r2, [r3, #12]
 8014934:	4a2c      	ldr	r2, [pc, #176]	@ (80149e8 <tcp_listen_input+0x1f4>)
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	6013      	str	r3, [r2, #0]
 801493a:	f003 f8cd 	bl	8017ad8 <tcp_timer_needed>
 801493e:	4b2b      	ldr	r3, [pc, #172]	@ (80149ec <tcp_listen_input+0x1f8>)
 8014940:	2201      	movs	r2, #1
 8014942:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014944:	6978      	ldr	r0, [r7, #20]
 8014946:	f001 fd8b 	bl	8016460 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801494a:	4b23      	ldr	r3, [pc, #140]	@ (80149d8 <tcp_listen_input+0x1e4>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	89db      	ldrh	r3, [r3, #14]
 8014950:	b29a      	uxth	r2, r3
 8014952:	697b      	ldr	r3, [r7, #20]
 8014954:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014964:	697b      	ldr	r3, [r7, #20]
 8014966:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014968:	697b      	ldr	r3, [r7, #20]
 801496a:	3304      	adds	r3, #4
 801496c:	4618      	mov	r0, r3
 801496e:	f005 f817 	bl	80199a0 <ip4_route>
 8014972:	4601      	mov	r1, r0
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	3304      	adds	r3, #4
 8014978:	461a      	mov	r2, r3
 801497a:	4620      	mov	r0, r4
 801497c:	f7ff fa30 	bl	8013de0 <tcp_eff_send_mss_netif>
 8014980:	4603      	mov	r3, r0
 8014982:	461a      	mov	r2, r3
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014988:	2112      	movs	r1, #18
 801498a:	6978      	ldr	r0, [r7, #20]
 801498c:	f002 f840 	bl	8016a10 <tcp_enqueue_flags>
 8014990:	4603      	mov	r3, r0
 8014992:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d004      	beq.n	80149a6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801499c:	2100      	movs	r1, #0
 801499e:	6978      	ldr	r0, [r7, #20]
 80149a0:	f7fe f978 	bl	8012c94 <tcp_abandon>
      return;
 80149a4:	e006      	b.n	80149b4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80149a6:	6978      	ldr	r0, [r7, #20]
 80149a8:	f002 f920 	bl	8016bec <tcp_output>
  return;
 80149ac:	e001      	b.n	80149b2 <tcp_listen_input+0x1be>
    return;
 80149ae:	bf00      	nop
 80149b0:	e000      	b.n	80149b4 <tcp_listen_input+0x1c0>
  return;
 80149b2:	bf00      	nop
}
 80149b4:	371c      	adds	r7, #28
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd90      	pop	{r4, r7, pc}
 80149ba:	bf00      	nop
 80149bc:	24014bf8 	.word	0x24014bf8
 80149c0:	0801d5b8 	.word	0x0801d5b8
 80149c4:	0801d7b0 	.word	0x0801d7b0
 80149c8:	0801d604 	.word	0x0801d604
 80149cc:	24014bf0 	.word	0x24014bf0
 80149d0:	24014bf6 	.word	0x24014bf6
 80149d4:	24014bec 	.word	0x24014bec
 80149d8:	24014bdc 	.word	0x24014bdc
 80149dc:	2400e088 	.word	0x2400e088
 80149e0:	2400e08c 	.word	0x2400e08c
 80149e4:	2400e078 	.word	0x2400e078
 80149e8:	24014bc0 	.word	0x24014bc0
 80149ec:	24014bc8 	.word	0x24014bc8

080149f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b086      	sub	sp, #24
 80149f4:	af04      	add	r7, sp, #16
 80149f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80149f8:	4b2f      	ldr	r3, [pc, #188]	@ (8014ab8 <tcp_timewait_input+0xc8>)
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	f003 0304 	and.w	r3, r3, #4
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d153      	bne.n	8014aac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d106      	bne.n	8014a18 <tcp_timewait_input+0x28>
 8014a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8014abc <tcp_timewait_input+0xcc>)
 8014a0c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014a10:	492b      	ldr	r1, [pc, #172]	@ (8014ac0 <tcp_timewait_input+0xd0>)
 8014a12:	482c      	ldr	r0, [pc, #176]	@ (8014ac4 <tcp_timewait_input+0xd4>)
 8014a14:	f006 fc3e 	bl	801b294 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014a18:	4b27      	ldr	r3, [pc, #156]	@ (8014ab8 <tcp_timewait_input+0xc8>)
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	f003 0302 	and.w	r3, r3, #2
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d02a      	beq.n	8014a7a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014a24:	4b28      	ldr	r3, [pc, #160]	@ (8014ac8 <tcp_timewait_input+0xd8>)
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a2c:	1ad3      	subs	r3, r2, r3
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	db2d      	blt.n	8014a8e <tcp_timewait_input+0x9e>
 8014a32:	4b25      	ldr	r3, [pc, #148]	@ (8014ac8 <tcp_timewait_input+0xd8>)
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a3a:	6879      	ldr	r1, [r7, #4]
 8014a3c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014a3e:	440b      	add	r3, r1
 8014a40:	1ad3      	subs	r3, r2, r3
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	dc23      	bgt.n	8014a8e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a46:	4b21      	ldr	r3, [pc, #132]	@ (8014acc <tcp_timewait_input+0xdc>)
 8014a48:	6819      	ldr	r1, [r3, #0]
 8014a4a:	4b21      	ldr	r3, [pc, #132]	@ (8014ad0 <tcp_timewait_input+0xe0>)
 8014a4c:	881b      	ldrh	r3, [r3, #0]
 8014a4e:	461a      	mov	r2, r3
 8014a50:	4b1d      	ldr	r3, [pc, #116]	@ (8014ac8 <tcp_timewait_input+0xd8>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a56:	4b1f      	ldr	r3, [pc, #124]	@ (8014ad4 <tcp_timewait_input+0xe4>)
 8014a58:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a5a:	885b      	ldrh	r3, [r3, #2]
 8014a5c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8014ad4 <tcp_timewait_input+0xe4>)
 8014a60:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a62:	8812      	ldrh	r2, [r2, #0]
 8014a64:	b292      	uxth	r2, r2
 8014a66:	9202      	str	r2, [sp, #8]
 8014a68:	9301      	str	r3, [sp, #4]
 8014a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8014ad8 <tcp_timewait_input+0xe8>)
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8014adc <tcp_timewait_input+0xec>)
 8014a70:	4602      	mov	r2, r0
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f002 fe6e 	bl	8017754 <tcp_rst>
      return;
 8014a78:	e01b      	b.n	8014ab2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8014ab8 <tcp_timewait_input+0xc8>)
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	f003 0301 	and.w	r3, r3, #1
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d003      	beq.n	8014a8e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014a86:	4b16      	ldr	r3, [pc, #88]	@ (8014ae0 <tcp_timewait_input+0xf0>)
 8014a88:	681a      	ldr	r2, [r3, #0]
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014a8e:	4b10      	ldr	r3, [pc, #64]	@ (8014ad0 <tcp_timewait_input+0xe0>)
 8014a90:	881b      	ldrh	r3, [r3, #0]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d00c      	beq.n	8014ab0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	8b5b      	ldrh	r3, [r3, #26]
 8014a9a:	f043 0302 	orr.w	r3, r3, #2
 8014a9e:	b29a      	uxth	r2, r3
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f002 f8a1 	bl	8016bec <tcp_output>
  }
  return;
 8014aaa:	e001      	b.n	8014ab0 <tcp_timewait_input+0xc0>
    return;
 8014aac:	bf00      	nop
 8014aae:	e000      	b.n	8014ab2 <tcp_timewait_input+0xc2>
  return;
 8014ab0:	bf00      	nop
}
 8014ab2:	3708      	adds	r7, #8
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	24014bf8 	.word	0x24014bf8
 8014abc:	0801d5b8 	.word	0x0801d5b8
 8014ac0:	0801d7d0 	.word	0x0801d7d0
 8014ac4:	0801d604 	.word	0x0801d604
 8014ac8:	24014bec 	.word	0x24014bec
 8014acc:	24014bf0 	.word	0x24014bf0
 8014ad0:	24014bf6 	.word	0x24014bf6
 8014ad4:	24014bdc 	.word	0x24014bdc
 8014ad8:	2400e088 	.word	0x2400e088
 8014adc:	2400e08c 	.word	0x2400e08c
 8014ae0:	24014bb4 	.word	0x24014bb4

08014ae4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014ae4:	b590      	push	{r4, r7, lr}
 8014ae6:	b08d      	sub	sp, #52	@ 0x34
 8014ae8:	af04      	add	r7, sp, #16
 8014aea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014aec:	2300      	movs	r3, #0
 8014aee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014af0:	2300      	movs	r3, #0
 8014af2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d106      	bne.n	8014b08 <tcp_process+0x24>
 8014afa:	4b9d      	ldr	r3, [pc, #628]	@ (8014d70 <tcp_process+0x28c>)
 8014afc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014b00:	499c      	ldr	r1, [pc, #624]	@ (8014d74 <tcp_process+0x290>)
 8014b02:	489d      	ldr	r0, [pc, #628]	@ (8014d78 <tcp_process+0x294>)
 8014b04:	f006 fbc6 	bl	801b294 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014b08:	4b9c      	ldr	r3, [pc, #624]	@ (8014d7c <tcp_process+0x298>)
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	f003 0304 	and.w	r3, r3, #4
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d04e      	beq.n	8014bb2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	7d1b      	ldrb	r3, [r3, #20]
 8014b18:	2b02      	cmp	r3, #2
 8014b1a:	d108      	bne.n	8014b2e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b20:	4b97      	ldr	r3, [pc, #604]	@ (8014d80 <tcp_process+0x29c>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d123      	bne.n	8014b70 <tcp_process+0x8c>
        acceptable = 1;
 8014b28:	2301      	movs	r3, #1
 8014b2a:	76fb      	strb	r3, [r7, #27]
 8014b2c:	e020      	b.n	8014b70 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b32:	4b94      	ldr	r3, [pc, #592]	@ (8014d84 <tcp_process+0x2a0>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d102      	bne.n	8014b40 <tcp_process+0x5c>
        acceptable = 1;
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	76fb      	strb	r3, [r7, #27]
 8014b3e:	e017      	b.n	8014b70 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014b40:	4b90      	ldr	r3, [pc, #576]	@ (8014d84 <tcp_process+0x2a0>)
 8014b42:	681a      	ldr	r2, [r3, #0]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b48:	1ad3      	subs	r3, r2, r3
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	db10      	blt.n	8014b70 <tcp_process+0x8c>
 8014b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8014d84 <tcp_process+0x2a0>)
 8014b50:	681a      	ldr	r2, [r3, #0]
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b56:	6879      	ldr	r1, [r7, #4]
 8014b58:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014b5a:	440b      	add	r3, r1
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	dc06      	bgt.n	8014b70 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	8b5b      	ldrh	r3, [r3, #26]
 8014b66:	f043 0302 	orr.w	r3, r3, #2
 8014b6a:	b29a      	uxth	r2, r3
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014b70:	7efb      	ldrb	r3, [r7, #27]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d01b      	beq.n	8014bae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	7d1b      	ldrb	r3, [r3, #20]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d106      	bne.n	8014b8c <tcp_process+0xa8>
 8014b7e:	4b7c      	ldr	r3, [pc, #496]	@ (8014d70 <tcp_process+0x28c>)
 8014b80:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8014b84:	4980      	ldr	r1, [pc, #512]	@ (8014d88 <tcp_process+0x2a4>)
 8014b86:	487c      	ldr	r0, [pc, #496]	@ (8014d78 <tcp_process+0x294>)
 8014b88:	f006 fb84 	bl	801b294 <iprintf>
      recv_flags |= TF_RESET;
 8014b8c:	4b7f      	ldr	r3, [pc, #508]	@ (8014d8c <tcp_process+0x2a8>)
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	f043 0308 	orr.w	r3, r3, #8
 8014b94:	b2da      	uxtb	r2, r3
 8014b96:	4b7d      	ldr	r3, [pc, #500]	@ (8014d8c <tcp_process+0x2a8>)
 8014b98:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	8b5b      	ldrh	r3, [r3, #26]
 8014b9e:	f023 0301 	bic.w	r3, r3, #1
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014ba8:	f06f 030d 	mvn.w	r3, #13
 8014bac:	e37a      	b.n	80152a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	e378      	b.n	80152a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014bb2:	4b72      	ldr	r3, [pc, #456]	@ (8014d7c <tcp_process+0x298>)
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	f003 0302 	and.w	r3, r3, #2
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d010      	beq.n	8014be0 <tcp_process+0xfc>
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	7d1b      	ldrb	r3, [r3, #20]
 8014bc2:	2b02      	cmp	r3, #2
 8014bc4:	d00c      	beq.n	8014be0 <tcp_process+0xfc>
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	7d1b      	ldrb	r3, [r3, #20]
 8014bca:	2b03      	cmp	r3, #3
 8014bcc:	d008      	beq.n	8014be0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	8b5b      	ldrh	r3, [r3, #26]
 8014bd2:	f043 0302 	orr.w	r3, r3, #2
 8014bd6:	b29a      	uxth	r2, r3
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	e361      	b.n	80152a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	8b5b      	ldrh	r3, [r3, #26]
 8014be4:	f003 0310 	and.w	r3, r3, #16
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d103      	bne.n	8014bf4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014bec:	4b68      	ldr	r3, [pc, #416]	@ (8014d90 <tcp_process+0x2ac>)
 8014bee:	681a      	ldr	r2, [r3, #0]
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f001 fc2b 	bl	8016460 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	7d1b      	ldrb	r3, [r3, #20]
 8014c0e:	3b02      	subs	r3, #2
 8014c10:	2b07      	cmp	r3, #7
 8014c12:	f200 8337 	bhi.w	8015284 <tcp_process+0x7a0>
 8014c16:	a201      	add	r2, pc, #4	@ (adr r2, 8014c1c <tcp_process+0x138>)
 8014c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c1c:	08014c3d 	.word	0x08014c3d
 8014c20:	08014e6d 	.word	0x08014e6d
 8014c24:	08014fe5 	.word	0x08014fe5
 8014c28:	0801500f 	.word	0x0801500f
 8014c2c:	08015133 	.word	0x08015133
 8014c30:	08014fe5 	.word	0x08014fe5
 8014c34:	080151bf 	.word	0x080151bf
 8014c38:	0801524f 	.word	0x0801524f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8014d7c <tcp_process+0x298>)
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	f003 0310 	and.w	r3, r3, #16
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f000 80e4 	beq.w	8014e12 <tcp_process+0x32e>
 8014c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8014d7c <tcp_process+0x298>)
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	f003 0302 	and.w	r3, r3, #2
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	f000 80dd 	beq.w	8014e12 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c5c:	1c5a      	adds	r2, r3, #1
 8014c5e:	4b48      	ldr	r3, [pc, #288]	@ (8014d80 <tcp_process+0x29c>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	f040 80d5 	bne.w	8014e12 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014c68:	4b46      	ldr	r3, [pc, #280]	@ (8014d84 <tcp_process+0x2a0>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	1c5a      	adds	r2, r3, #1
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014c7a:	4b41      	ldr	r3, [pc, #260]	@ (8014d80 <tcp_process+0x29c>)
 8014c7c:	681a      	ldr	r2, [r3, #0]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014c82:	4b44      	ldr	r3, [pc, #272]	@ (8014d94 <tcp_process+0x2b0>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	89db      	ldrh	r3, [r3, #14]
 8014c88:	b29a      	uxth	r2, r3
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014c9c:	4b39      	ldr	r3, [pc, #228]	@ (8014d84 <tcp_process+0x2a0>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	1e5a      	subs	r2, r3, #1
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	2204      	movs	r2, #4
 8014caa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	3304      	adds	r3, #4
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f004 fe73 	bl	80199a0 <ip4_route>
 8014cba:	4601      	mov	r1, r0
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	3304      	adds	r3, #4
 8014cc0:	461a      	mov	r2, r3
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f7ff f88c 	bl	8013de0 <tcp_eff_send_mss_netif>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	461a      	mov	r2, r3
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cd4:	009a      	lsls	r2, r3, #2
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cda:	005b      	lsls	r3, r3, #1
 8014cdc:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014ce0:	428b      	cmp	r3, r1
 8014ce2:	bf38      	it	cc
 8014ce4:	460b      	movcc	r3, r1
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d204      	bcs.n	8014cf4 <tcp_process+0x210>
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cee:	009b      	lsls	r3, r3, #2
 8014cf0:	b29b      	uxth	r3, r3
 8014cf2:	e00d      	b.n	8014d10 <tcp_process+0x22c>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cf8:	005b      	lsls	r3, r3, #1
 8014cfa:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	d904      	bls.n	8014d0c <tcp_process+0x228>
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014d06:	005b      	lsls	r3, r3, #1
 8014d08:	b29b      	uxth	r3, r3
 8014d0a:	e001      	b.n	8014d10 <tcp_process+0x22c>
 8014d0c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d106      	bne.n	8014d2e <tcp_process+0x24a>
 8014d20:	4b13      	ldr	r3, [pc, #76]	@ (8014d70 <tcp_process+0x28c>)
 8014d22:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014d26:	491c      	ldr	r1, [pc, #112]	@ (8014d98 <tcp_process+0x2b4>)
 8014d28:	4813      	ldr	r0, [pc, #76]	@ (8014d78 <tcp_process+0x294>)
 8014d2a:	f006 fab3 	bl	801b294 <iprintf>
        --pcb->snd_queuelen;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d34:	3b01      	subs	r3, #1
 8014d36:	b29a      	uxth	r2, r3
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d42:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014d44:	69fb      	ldr	r3, [r7, #28]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d12a      	bne.n	8014da0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d4e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d106      	bne.n	8014d64 <tcp_process+0x280>
 8014d56:	4b06      	ldr	r3, [pc, #24]	@ (8014d70 <tcp_process+0x28c>)
 8014d58:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014d5c:	490f      	ldr	r1, [pc, #60]	@ (8014d9c <tcp_process+0x2b8>)
 8014d5e:	4806      	ldr	r0, [pc, #24]	@ (8014d78 <tcp_process+0x294>)
 8014d60:	f006 fa98 	bl	801b294 <iprintf>
          pcb->unsent = rseg->next;
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	681a      	ldr	r2, [r3, #0]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014d6c:	e01c      	b.n	8014da8 <tcp_process+0x2c4>
 8014d6e:	bf00      	nop
 8014d70:	0801d5b8 	.word	0x0801d5b8
 8014d74:	0801d7f0 	.word	0x0801d7f0
 8014d78:	0801d604 	.word	0x0801d604
 8014d7c:	24014bf8 	.word	0x24014bf8
 8014d80:	24014bf0 	.word	0x24014bf0
 8014d84:	24014bec 	.word	0x24014bec
 8014d88:	0801d80c 	.word	0x0801d80c
 8014d8c:	24014bf9 	.word	0x24014bf9
 8014d90:	24014bb4 	.word	0x24014bb4
 8014d94:	24014bdc 	.word	0x24014bdc
 8014d98:	0801d82c 	.word	0x0801d82c
 8014d9c:	0801d844 	.word	0x0801d844
        } else {
          pcb->unacked = rseg->next;
 8014da0:	69fb      	ldr	r3, [r7, #28]
 8014da2:	681a      	ldr	r2, [r3, #0]
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8014da8:	69f8      	ldr	r0, [r7, #28]
 8014daa:	f7fe fd22 	bl	80137f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d104      	bne.n	8014dc0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014dbc:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014dbe:	e006      	b.n	8014dce <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d00a      	beq.n	8014dee <tcp_process+0x30a>
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	6910      	ldr	r0, [r2, #16]
 8014de2:	2200      	movs	r2, #0
 8014de4:	6879      	ldr	r1, [r7, #4]
 8014de6:	4798      	blx	r3
 8014de8:	4603      	mov	r3, r0
 8014dea:	76bb      	strb	r3, [r7, #26]
 8014dec:	e001      	b.n	8014df2 <tcp_process+0x30e>
 8014dee:	2300      	movs	r3, #0
 8014df0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014df2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014df6:	f113 0f0d 	cmn.w	r3, #13
 8014dfa:	d102      	bne.n	8014e02 <tcp_process+0x31e>
          return ERR_ABRT;
 8014dfc:	f06f 030c 	mvn.w	r3, #12
 8014e00:	e250      	b.n	80152a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	8b5b      	ldrh	r3, [r3, #26]
 8014e06:	f043 0302 	orr.w	r3, r3, #2
 8014e0a:	b29a      	uxth	r2, r3
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014e10:	e23a      	b.n	8015288 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014e12:	4b98      	ldr	r3, [pc, #608]	@ (8015074 <tcp_process+0x590>)
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	f003 0310 	and.w	r3, r3, #16
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	f000 8234 	beq.w	8015288 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e20:	4b95      	ldr	r3, [pc, #596]	@ (8015078 <tcp_process+0x594>)
 8014e22:	6819      	ldr	r1, [r3, #0]
 8014e24:	4b95      	ldr	r3, [pc, #596]	@ (801507c <tcp_process+0x598>)
 8014e26:	881b      	ldrh	r3, [r3, #0]
 8014e28:	461a      	mov	r2, r3
 8014e2a:	4b95      	ldr	r3, [pc, #596]	@ (8015080 <tcp_process+0x59c>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e30:	4b94      	ldr	r3, [pc, #592]	@ (8015084 <tcp_process+0x5a0>)
 8014e32:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e34:	885b      	ldrh	r3, [r3, #2]
 8014e36:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e38:	4a92      	ldr	r2, [pc, #584]	@ (8015084 <tcp_process+0x5a0>)
 8014e3a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e3c:	8812      	ldrh	r2, [r2, #0]
 8014e3e:	b292      	uxth	r2, r2
 8014e40:	9202      	str	r2, [sp, #8]
 8014e42:	9301      	str	r3, [sp, #4]
 8014e44:	4b90      	ldr	r3, [pc, #576]	@ (8015088 <tcp_process+0x5a4>)
 8014e46:	9300      	str	r3, [sp, #0]
 8014e48:	4b90      	ldr	r3, [pc, #576]	@ (801508c <tcp_process+0x5a8>)
 8014e4a:	4602      	mov	r2, r0
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f002 fc81 	bl	8017754 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014e58:	2b05      	cmp	r3, #5
 8014e5a:	f200 8215 	bhi.w	8015288 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	2200      	movs	r2, #0
 8014e62:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f002 fa4d 	bl	8017304 <tcp_rexmit_rto>
      break;
 8014e6a:	e20d      	b.n	8015288 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014e6c:	4b81      	ldr	r3, [pc, #516]	@ (8015074 <tcp_process+0x590>)
 8014e6e:	781b      	ldrb	r3, [r3, #0]
 8014e70:	f003 0310 	and.w	r3, r3, #16
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f000 80a1 	beq.w	8014fbc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8015078 <tcp_process+0x594>)
 8014e7c:	681a      	ldr	r2, [r3, #0]
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e82:	1ad3      	subs	r3, r2, r3
 8014e84:	3b01      	subs	r3, #1
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	db7e      	blt.n	8014f88 <tcp_process+0x4a4>
 8014e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8015078 <tcp_process+0x594>)
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e92:	1ad3      	subs	r3, r2, r3
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	dc77      	bgt.n	8014f88 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2204      	movs	r2, #4
 8014e9c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d102      	bne.n	8014eac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014ea6:	23fa      	movs	r3, #250	@ 0xfa
 8014ea8:	76bb      	strb	r3, [r7, #26]
 8014eaa:	e01d      	b.n	8014ee8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014eb0:	699b      	ldr	r3, [r3, #24]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d106      	bne.n	8014ec4 <tcp_process+0x3e0>
 8014eb6:	4b76      	ldr	r3, [pc, #472]	@ (8015090 <tcp_process+0x5ac>)
 8014eb8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8014ebc:	4975      	ldr	r1, [pc, #468]	@ (8015094 <tcp_process+0x5b0>)
 8014ebe:	4876      	ldr	r0, [pc, #472]	@ (8015098 <tcp_process+0x5b4>)
 8014ec0:	f006 f9e8 	bl	801b294 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ec8:	699b      	ldr	r3, [r3, #24]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d00a      	beq.n	8014ee4 <tcp_process+0x400>
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ed2:	699b      	ldr	r3, [r3, #24]
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	6910      	ldr	r0, [r2, #16]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	6879      	ldr	r1, [r7, #4]
 8014edc:	4798      	blx	r3
 8014ede:	4603      	mov	r3, r0
 8014ee0:	76bb      	strb	r3, [r7, #26]
 8014ee2:	e001      	b.n	8014ee8 <tcp_process+0x404>
 8014ee4:	23f0      	movs	r3, #240	@ 0xf0
 8014ee6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014ee8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d00a      	beq.n	8014f06 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014ef0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014ef4:	f113 0f0d 	cmn.w	r3, #13
 8014ef8:	d002      	beq.n	8014f00 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f7fd ff88 	bl	8012e10 <tcp_abort>
            }
            return ERR_ABRT;
 8014f00:	f06f 030c 	mvn.w	r3, #12
 8014f04:	e1ce      	b.n	80152a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f000 fae0 	bl	80154cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014f0c:	4b63      	ldr	r3, [pc, #396]	@ (801509c <tcp_process+0x5b8>)
 8014f0e:	881b      	ldrh	r3, [r3, #0]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d005      	beq.n	8014f20 <tcp_process+0x43c>
            recv_acked--;
 8014f14:	4b61      	ldr	r3, [pc, #388]	@ (801509c <tcp_process+0x5b8>)
 8014f16:	881b      	ldrh	r3, [r3, #0]
 8014f18:	3b01      	subs	r3, #1
 8014f1a:	b29a      	uxth	r2, r3
 8014f1c:	4b5f      	ldr	r3, [pc, #380]	@ (801509c <tcp_process+0x5b8>)
 8014f1e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f24:	009a      	lsls	r2, r3, #2
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f2a:	005b      	lsls	r3, r3, #1
 8014f2c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014f30:	428b      	cmp	r3, r1
 8014f32:	bf38      	it	cc
 8014f34:	460b      	movcc	r3, r1
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d204      	bcs.n	8014f44 <tcp_process+0x460>
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	b29b      	uxth	r3, r3
 8014f42:	e00d      	b.n	8014f60 <tcp_process+0x47c>
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f48:	005b      	lsls	r3, r3, #1
 8014f4a:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014f4e:	4293      	cmp	r3, r2
 8014f50:	d904      	bls.n	8014f5c <tcp_process+0x478>
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f56:	005b      	lsls	r3, r3, #1
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	e001      	b.n	8014f60 <tcp_process+0x47c>
 8014f5c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014f60:	687a      	ldr	r2, [r7, #4]
 8014f62:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014f66:	4b4e      	ldr	r3, [pc, #312]	@ (80150a0 <tcp_process+0x5bc>)
 8014f68:	781b      	ldrb	r3, [r3, #0]
 8014f6a:	f003 0320 	and.w	r3, r3, #32
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d037      	beq.n	8014fe2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	8b5b      	ldrh	r3, [r3, #26]
 8014f76:	f043 0302 	orr.w	r3, r3, #2
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2207      	movs	r2, #7
 8014f84:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014f86:	e02c      	b.n	8014fe2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f88:	4b3b      	ldr	r3, [pc, #236]	@ (8015078 <tcp_process+0x594>)
 8014f8a:	6819      	ldr	r1, [r3, #0]
 8014f8c:	4b3b      	ldr	r3, [pc, #236]	@ (801507c <tcp_process+0x598>)
 8014f8e:	881b      	ldrh	r3, [r3, #0]
 8014f90:	461a      	mov	r2, r3
 8014f92:	4b3b      	ldr	r3, [pc, #236]	@ (8015080 <tcp_process+0x59c>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f98:	4b3a      	ldr	r3, [pc, #232]	@ (8015084 <tcp_process+0x5a0>)
 8014f9a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f9c:	885b      	ldrh	r3, [r3, #2]
 8014f9e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014fa0:	4a38      	ldr	r2, [pc, #224]	@ (8015084 <tcp_process+0x5a0>)
 8014fa2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014fa4:	8812      	ldrh	r2, [r2, #0]
 8014fa6:	b292      	uxth	r2, r2
 8014fa8:	9202      	str	r2, [sp, #8]
 8014faa:	9301      	str	r3, [sp, #4]
 8014fac:	4b36      	ldr	r3, [pc, #216]	@ (8015088 <tcp_process+0x5a4>)
 8014fae:	9300      	str	r3, [sp, #0]
 8014fb0:	4b36      	ldr	r3, [pc, #216]	@ (801508c <tcp_process+0x5a8>)
 8014fb2:	4602      	mov	r2, r0
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f002 fbcd 	bl	8017754 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014fba:	e167      	b.n	801528c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8015074 <tcp_process+0x590>)
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	f003 0302 	and.w	r3, r3, #2
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	f000 8161 	beq.w	801528c <tcp_process+0x7a8>
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fce:	1e5a      	subs	r2, r3, #1
 8014fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8015080 <tcp_process+0x59c>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	f040 8159 	bne.w	801528c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f002 f9b4 	bl	8017348 <tcp_rexmit>
      break;
 8014fe0:	e154      	b.n	801528c <tcp_process+0x7a8>
 8014fe2:	e153      	b.n	801528c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f000 fa71 	bl	80154cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014fea:	4b2d      	ldr	r3, [pc, #180]	@ (80150a0 <tcp_process+0x5bc>)
 8014fec:	781b      	ldrb	r3, [r3, #0]
 8014fee:	f003 0320 	and.w	r3, r3, #32
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	f000 814c 	beq.w	8015290 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	8b5b      	ldrh	r3, [r3, #26]
 8014ffc:	f043 0302 	orr.w	r3, r3, #2
 8015000:	b29a      	uxth	r2, r3
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	2207      	movs	r2, #7
 801500a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801500c:	e140      	b.n	8015290 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f000 fa5c 	bl	80154cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015014:	4b22      	ldr	r3, [pc, #136]	@ (80150a0 <tcp_process+0x5bc>)
 8015016:	781b      	ldrb	r3, [r3, #0]
 8015018:	f003 0320 	and.w	r3, r3, #32
 801501c:	2b00      	cmp	r3, #0
 801501e:	d071      	beq.n	8015104 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015020:	4b14      	ldr	r3, [pc, #80]	@ (8015074 <tcp_process+0x590>)
 8015022:	781b      	ldrb	r3, [r3, #0]
 8015024:	f003 0310 	and.w	r3, r3, #16
 8015028:	2b00      	cmp	r3, #0
 801502a:	d060      	beq.n	80150ee <tcp_process+0x60a>
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015030:	4b11      	ldr	r3, [pc, #68]	@ (8015078 <tcp_process+0x594>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	429a      	cmp	r2, r3
 8015036:	d15a      	bne.n	80150ee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801503c:	2b00      	cmp	r3, #0
 801503e:	d156      	bne.n	80150ee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	8b5b      	ldrh	r3, [r3, #26]
 8015044:	f043 0302 	orr.w	r3, r3, #2
 8015048:	b29a      	uxth	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f7fe fdbc 	bl	8013bcc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015054:	4b13      	ldr	r3, [pc, #76]	@ (80150a4 <tcp_process+0x5c0>)
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	687a      	ldr	r2, [r7, #4]
 801505a:	429a      	cmp	r2, r3
 801505c:	d105      	bne.n	801506a <tcp_process+0x586>
 801505e:	4b11      	ldr	r3, [pc, #68]	@ (80150a4 <tcp_process+0x5c0>)
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	68db      	ldr	r3, [r3, #12]
 8015064:	4a0f      	ldr	r2, [pc, #60]	@ (80150a4 <tcp_process+0x5c0>)
 8015066:	6013      	str	r3, [r2, #0]
 8015068:	e02e      	b.n	80150c8 <tcp_process+0x5e4>
 801506a:	4b0e      	ldr	r3, [pc, #56]	@ (80150a4 <tcp_process+0x5c0>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	617b      	str	r3, [r7, #20]
 8015070:	e027      	b.n	80150c2 <tcp_process+0x5de>
 8015072:	bf00      	nop
 8015074:	24014bf8 	.word	0x24014bf8
 8015078:	24014bf0 	.word	0x24014bf0
 801507c:	24014bf6 	.word	0x24014bf6
 8015080:	24014bec 	.word	0x24014bec
 8015084:	24014bdc 	.word	0x24014bdc
 8015088:	2400e088 	.word	0x2400e088
 801508c:	2400e08c 	.word	0x2400e08c
 8015090:	0801d5b8 	.word	0x0801d5b8
 8015094:	0801d858 	.word	0x0801d858
 8015098:	0801d604 	.word	0x0801d604
 801509c:	24014bf4 	.word	0x24014bf4
 80150a0:	24014bf9 	.word	0x24014bf9
 80150a4:	24014bc0 	.word	0x24014bc0
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	687a      	ldr	r2, [r7, #4]
 80150ae:	429a      	cmp	r2, r3
 80150b0:	d104      	bne.n	80150bc <tcp_process+0x5d8>
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	68da      	ldr	r2, [r3, #12]
 80150b6:	697b      	ldr	r3, [r7, #20]
 80150b8:	60da      	str	r2, [r3, #12]
 80150ba:	e005      	b.n	80150c8 <tcp_process+0x5e4>
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	68db      	ldr	r3, [r3, #12]
 80150c0:	617b      	str	r3, [r7, #20]
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1ef      	bne.n	80150a8 <tcp_process+0x5c4>
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2200      	movs	r2, #0
 80150cc:	60da      	str	r2, [r3, #12]
 80150ce:	4b77      	ldr	r3, [pc, #476]	@ (80152ac <tcp_process+0x7c8>)
 80150d0:	2201      	movs	r2, #1
 80150d2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	220a      	movs	r2, #10
 80150d8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80150da:	4b75      	ldr	r3, [pc, #468]	@ (80152b0 <tcp_process+0x7cc>)
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	60da      	str	r2, [r3, #12]
 80150e2:	4a73      	ldr	r2, [pc, #460]	@ (80152b0 <tcp_process+0x7cc>)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6013      	str	r3, [r2, #0]
 80150e8:	f002 fcf6 	bl	8017ad8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80150ec:	e0d2      	b.n	8015294 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	8b5b      	ldrh	r3, [r3, #26]
 80150f2:	f043 0302 	orr.w	r3, r3, #2
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2208      	movs	r2, #8
 8015100:	751a      	strb	r2, [r3, #20]
      break;
 8015102:	e0c7      	b.n	8015294 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015104:	4b6b      	ldr	r3, [pc, #428]	@ (80152b4 <tcp_process+0x7d0>)
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	f003 0310 	and.w	r3, r3, #16
 801510c:	2b00      	cmp	r3, #0
 801510e:	f000 80c1 	beq.w	8015294 <tcp_process+0x7b0>
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015116:	4b68      	ldr	r3, [pc, #416]	@ (80152b8 <tcp_process+0x7d4>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	429a      	cmp	r2, r3
 801511c:	f040 80ba 	bne.w	8015294 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015124:	2b00      	cmp	r3, #0
 8015126:	f040 80b5 	bne.w	8015294 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2206      	movs	r2, #6
 801512e:	751a      	strb	r2, [r3, #20]
      break;
 8015130:	e0b0      	b.n	8015294 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f000 f9ca 	bl	80154cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015138:	4b60      	ldr	r3, [pc, #384]	@ (80152bc <tcp_process+0x7d8>)
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	f003 0320 	and.w	r3, r3, #32
 8015140:	2b00      	cmp	r3, #0
 8015142:	f000 80a9 	beq.w	8015298 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	8b5b      	ldrh	r3, [r3, #26]
 801514a:	f043 0302 	orr.w	r3, r3, #2
 801514e:	b29a      	uxth	r2, r3
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f7fe fd39 	bl	8013bcc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801515a:	4b59      	ldr	r3, [pc, #356]	@ (80152c0 <tcp_process+0x7dc>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	687a      	ldr	r2, [r7, #4]
 8015160:	429a      	cmp	r2, r3
 8015162:	d105      	bne.n	8015170 <tcp_process+0x68c>
 8015164:	4b56      	ldr	r3, [pc, #344]	@ (80152c0 <tcp_process+0x7dc>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	68db      	ldr	r3, [r3, #12]
 801516a:	4a55      	ldr	r2, [pc, #340]	@ (80152c0 <tcp_process+0x7dc>)
 801516c:	6013      	str	r3, [r2, #0]
 801516e:	e013      	b.n	8015198 <tcp_process+0x6b4>
 8015170:	4b53      	ldr	r3, [pc, #332]	@ (80152c0 <tcp_process+0x7dc>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	613b      	str	r3, [r7, #16]
 8015176:	e00c      	b.n	8015192 <tcp_process+0x6ae>
 8015178:	693b      	ldr	r3, [r7, #16]
 801517a:	68db      	ldr	r3, [r3, #12]
 801517c:	687a      	ldr	r2, [r7, #4]
 801517e:	429a      	cmp	r2, r3
 8015180:	d104      	bne.n	801518c <tcp_process+0x6a8>
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	68da      	ldr	r2, [r3, #12]
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	60da      	str	r2, [r3, #12]
 801518a:	e005      	b.n	8015198 <tcp_process+0x6b4>
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	613b      	str	r3, [r7, #16]
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d1ef      	bne.n	8015178 <tcp_process+0x694>
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2200      	movs	r2, #0
 801519c:	60da      	str	r2, [r3, #12]
 801519e:	4b43      	ldr	r3, [pc, #268]	@ (80152ac <tcp_process+0x7c8>)
 80151a0:	2201      	movs	r2, #1
 80151a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	220a      	movs	r2, #10
 80151a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80151aa:	4b41      	ldr	r3, [pc, #260]	@ (80152b0 <tcp_process+0x7cc>)
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	60da      	str	r2, [r3, #12]
 80151b2:	4a3f      	ldr	r2, [pc, #252]	@ (80152b0 <tcp_process+0x7cc>)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	6013      	str	r3, [r2, #0]
 80151b8:	f002 fc8e 	bl	8017ad8 <tcp_timer_needed>
      }
      break;
 80151bc:	e06c      	b.n	8015298 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f000 f984 	bl	80154cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80151c4:	4b3b      	ldr	r3, [pc, #236]	@ (80152b4 <tcp_process+0x7d0>)
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	f003 0310 	and.w	r3, r3, #16
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d065      	beq.n	801529c <tcp_process+0x7b8>
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80151d4:	4b38      	ldr	r3, [pc, #224]	@ (80152b8 <tcp_process+0x7d4>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	429a      	cmp	r2, r3
 80151da:	d15f      	bne.n	801529c <tcp_process+0x7b8>
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d15b      	bne.n	801529c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f7fe fcf1 	bl	8013bcc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80151ea:	4b35      	ldr	r3, [pc, #212]	@ (80152c0 <tcp_process+0x7dc>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	687a      	ldr	r2, [r7, #4]
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d105      	bne.n	8015200 <tcp_process+0x71c>
 80151f4:	4b32      	ldr	r3, [pc, #200]	@ (80152c0 <tcp_process+0x7dc>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	68db      	ldr	r3, [r3, #12]
 80151fa:	4a31      	ldr	r2, [pc, #196]	@ (80152c0 <tcp_process+0x7dc>)
 80151fc:	6013      	str	r3, [r2, #0]
 80151fe:	e013      	b.n	8015228 <tcp_process+0x744>
 8015200:	4b2f      	ldr	r3, [pc, #188]	@ (80152c0 <tcp_process+0x7dc>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	60fb      	str	r3, [r7, #12]
 8015206:	e00c      	b.n	8015222 <tcp_process+0x73e>
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	68db      	ldr	r3, [r3, #12]
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	429a      	cmp	r2, r3
 8015210:	d104      	bne.n	801521c <tcp_process+0x738>
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	68da      	ldr	r2, [r3, #12]
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	60da      	str	r2, [r3, #12]
 801521a:	e005      	b.n	8015228 <tcp_process+0x744>
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	68db      	ldr	r3, [r3, #12]
 8015220:	60fb      	str	r3, [r7, #12]
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d1ef      	bne.n	8015208 <tcp_process+0x724>
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2200      	movs	r2, #0
 801522c:	60da      	str	r2, [r3, #12]
 801522e:	4b1f      	ldr	r3, [pc, #124]	@ (80152ac <tcp_process+0x7c8>)
 8015230:	2201      	movs	r2, #1
 8015232:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	220a      	movs	r2, #10
 8015238:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801523a:	4b1d      	ldr	r3, [pc, #116]	@ (80152b0 <tcp_process+0x7cc>)
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	60da      	str	r2, [r3, #12]
 8015242:	4a1b      	ldr	r2, [pc, #108]	@ (80152b0 <tcp_process+0x7cc>)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	6013      	str	r3, [r2, #0]
 8015248:	f002 fc46 	bl	8017ad8 <tcp_timer_needed>
      }
      break;
 801524c:	e026      	b.n	801529c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f000 f93c 	bl	80154cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015254:	4b17      	ldr	r3, [pc, #92]	@ (80152b4 <tcp_process+0x7d0>)
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	f003 0310 	and.w	r3, r3, #16
 801525c:	2b00      	cmp	r3, #0
 801525e:	d01f      	beq.n	80152a0 <tcp_process+0x7bc>
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015264:	4b14      	ldr	r3, [pc, #80]	@ (80152b8 <tcp_process+0x7d4>)
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	429a      	cmp	r2, r3
 801526a:	d119      	bne.n	80152a0 <tcp_process+0x7bc>
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015270:	2b00      	cmp	r3, #0
 8015272:	d115      	bne.n	80152a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015274:	4b11      	ldr	r3, [pc, #68]	@ (80152bc <tcp_process+0x7d8>)
 8015276:	781b      	ldrb	r3, [r3, #0]
 8015278:	f043 0310 	orr.w	r3, r3, #16
 801527c:	b2da      	uxtb	r2, r3
 801527e:	4b0f      	ldr	r3, [pc, #60]	@ (80152bc <tcp_process+0x7d8>)
 8015280:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015282:	e00d      	b.n	80152a0 <tcp_process+0x7bc>
    default:
      break;
 8015284:	bf00      	nop
 8015286:	e00c      	b.n	80152a2 <tcp_process+0x7be>
      break;
 8015288:	bf00      	nop
 801528a:	e00a      	b.n	80152a2 <tcp_process+0x7be>
      break;
 801528c:	bf00      	nop
 801528e:	e008      	b.n	80152a2 <tcp_process+0x7be>
      break;
 8015290:	bf00      	nop
 8015292:	e006      	b.n	80152a2 <tcp_process+0x7be>
      break;
 8015294:	bf00      	nop
 8015296:	e004      	b.n	80152a2 <tcp_process+0x7be>
      break;
 8015298:	bf00      	nop
 801529a:	e002      	b.n	80152a2 <tcp_process+0x7be>
      break;
 801529c:	bf00      	nop
 801529e:	e000      	b.n	80152a2 <tcp_process+0x7be>
      break;
 80152a0:	bf00      	nop
  }
  return ERR_OK;
 80152a2:	2300      	movs	r3, #0
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	3724      	adds	r7, #36	@ 0x24
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd90      	pop	{r4, r7, pc}
 80152ac:	24014bc8 	.word	0x24014bc8
 80152b0:	24014bc4 	.word	0x24014bc4
 80152b4:	24014bf8 	.word	0x24014bf8
 80152b8:	24014bf0 	.word	0x24014bf0
 80152bc:	24014bf9 	.word	0x24014bf9
 80152c0:	24014bc0 	.word	0x24014bc0

080152c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80152c4:	b590      	push	{r4, r7, lr}
 80152c6:	b085      	sub	sp, #20
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
 80152cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d106      	bne.n	80152e2 <tcp_oos_insert_segment+0x1e>
 80152d4:	4b3b      	ldr	r3, [pc, #236]	@ (80153c4 <tcp_oos_insert_segment+0x100>)
 80152d6:	f240 421f 	movw	r2, #1055	@ 0x41f
 80152da:	493b      	ldr	r1, [pc, #236]	@ (80153c8 <tcp_oos_insert_segment+0x104>)
 80152dc:	483b      	ldr	r0, [pc, #236]	@ (80153cc <tcp_oos_insert_segment+0x108>)
 80152de:	f005 ffd9 	bl	801b294 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	68db      	ldr	r3, [r3, #12]
 80152e6:	899b      	ldrh	r3, [r3, #12]
 80152e8:	b29b      	uxth	r3, r3
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7fb fa4e 	bl	801078c <lwip_htons>
 80152f0:	4603      	mov	r3, r0
 80152f2:	b2db      	uxtb	r3, r3
 80152f4:	f003 0301 	and.w	r3, r3, #1
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d028      	beq.n	801534e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80152fc:	6838      	ldr	r0, [r7, #0]
 80152fe:	f7fe fa63 	bl	80137c8 <tcp_segs_free>
    next = NULL;
 8015302:	2300      	movs	r3, #0
 8015304:	603b      	str	r3, [r7, #0]
 8015306:	e056      	b.n	80153b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	68db      	ldr	r3, [r3, #12]
 801530c:	899b      	ldrh	r3, [r3, #12]
 801530e:	b29b      	uxth	r3, r3
 8015310:	4618      	mov	r0, r3
 8015312:	f7fb fa3b 	bl	801078c <lwip_htons>
 8015316:	4603      	mov	r3, r0
 8015318:	b2db      	uxtb	r3, r3
 801531a:	f003 0301 	and.w	r3, r3, #1
 801531e:	2b00      	cmp	r3, #0
 8015320:	d00d      	beq.n	801533e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	68db      	ldr	r3, [r3, #12]
 8015326:	899b      	ldrh	r3, [r3, #12]
 8015328:	b29c      	uxth	r4, r3
 801532a:	2001      	movs	r0, #1
 801532c:	f7fb fa2e 	bl	801078c <lwip_htons>
 8015330:	4603      	mov	r3, r0
 8015332:	461a      	mov	r2, r3
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	68db      	ldr	r3, [r3, #12]
 8015338:	4322      	orrs	r2, r4
 801533a:	b292      	uxth	r2, r2
 801533c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015348:	68f8      	ldr	r0, [r7, #12]
 801534a:	f7fe fa52 	bl	80137f2 <tcp_seg_free>
    while (next &&
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d00e      	beq.n	8015372 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	891b      	ldrh	r3, [r3, #8]
 8015358:	461a      	mov	r2, r3
 801535a:	4b1d      	ldr	r3, [pc, #116]	@ (80153d0 <tcp_oos_insert_segment+0x10c>)
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	441a      	add	r2, r3
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	685b      	ldr	r3, [r3, #4]
 8015366:	6839      	ldr	r1, [r7, #0]
 8015368:	8909      	ldrh	r1, [r1, #8]
 801536a:	440b      	add	r3, r1
 801536c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801536e:	2b00      	cmp	r3, #0
 8015370:	daca      	bge.n	8015308 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d01e      	beq.n	80153b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	891b      	ldrh	r3, [r3, #8]
 801537c:	461a      	mov	r2, r3
 801537e:	4b14      	ldr	r3, [pc, #80]	@ (80153d0 <tcp_oos_insert_segment+0x10c>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	441a      	add	r2, r3
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	68db      	ldr	r3, [r3, #12]
 8015388:	685b      	ldr	r3, [r3, #4]
 801538a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801538c:	2b00      	cmp	r3, #0
 801538e:	dd12      	ble.n	80153b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	68db      	ldr	r3, [r3, #12]
 8015394:	685b      	ldr	r3, [r3, #4]
 8015396:	b29a      	uxth	r2, r3
 8015398:	4b0d      	ldr	r3, [pc, #52]	@ (80153d0 <tcp_oos_insert_segment+0x10c>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	b29b      	uxth	r3, r3
 801539e:	1ad3      	subs	r3, r2, r3
 80153a0:	b29a      	uxth	r2, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	685a      	ldr	r2, [r3, #4]
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	891b      	ldrh	r3, [r3, #8]
 80153ae:	4619      	mov	r1, r3
 80153b0:	4610      	mov	r0, r2
 80153b2:	f7fc fd17 	bl	8011de4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	683a      	ldr	r2, [r7, #0]
 80153ba:	601a      	str	r2, [r3, #0]
}
 80153bc:	bf00      	nop
 80153be:	3714      	adds	r7, #20
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd90      	pop	{r4, r7, pc}
 80153c4:	0801d5b8 	.word	0x0801d5b8
 80153c8:	0801d878 	.word	0x0801d878
 80153cc:	0801d604 	.word	0x0801d604
 80153d0:	24014bec 	.word	0x24014bec

080153d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80153d4:	b5b0      	push	{r4, r5, r7, lr}
 80153d6:	b086      	sub	sp, #24
 80153d8:	af00      	add	r7, sp, #0
 80153da:	60f8      	str	r0, [r7, #12]
 80153dc:	60b9      	str	r1, [r7, #8]
 80153de:	607a      	str	r2, [r7, #4]
 80153e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80153e2:	e03e      	b.n	8015462 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7fc ff0a 	bl	801220c <pbuf_clen>
 80153f8:	4603      	mov	r3, r0
 80153fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015402:	8a7a      	ldrh	r2, [r7, #18]
 8015404:	429a      	cmp	r2, r3
 8015406:	d906      	bls.n	8015416 <tcp_free_acked_segments+0x42>
 8015408:	4b2a      	ldr	r3, [pc, #168]	@ (80154b4 <tcp_free_acked_segments+0xe0>)
 801540a:	f240 4257 	movw	r2, #1111	@ 0x457
 801540e:	492a      	ldr	r1, [pc, #168]	@ (80154b8 <tcp_free_acked_segments+0xe4>)
 8015410:	482a      	ldr	r0, [pc, #168]	@ (80154bc <tcp_free_acked_segments+0xe8>)
 8015412:	f005 ff3f 	bl	801b294 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801541c:	8a7b      	ldrh	r3, [r7, #18]
 801541e:	1ad3      	subs	r3, r2, r3
 8015420:	b29a      	uxth	r2, r3
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	891a      	ldrh	r2, [r3, #8]
 801542c:	4b24      	ldr	r3, [pc, #144]	@ (80154c0 <tcp_free_acked_segments+0xec>)
 801542e:	881b      	ldrh	r3, [r3, #0]
 8015430:	4413      	add	r3, r2
 8015432:	b29a      	uxth	r2, r3
 8015434:	4b22      	ldr	r3, [pc, #136]	@ (80154c0 <tcp_free_acked_segments+0xec>)
 8015436:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015438:	6978      	ldr	r0, [r7, #20]
 801543a:	f7fe f9da 	bl	80137f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015444:	2b00      	cmp	r3, #0
 8015446:	d00c      	beq.n	8015462 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d109      	bne.n	8015462 <tcp_free_acked_segments+0x8e>
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d106      	bne.n	8015462 <tcp_free_acked_segments+0x8e>
 8015454:	4b17      	ldr	r3, [pc, #92]	@ (80154b4 <tcp_free_acked_segments+0xe0>)
 8015456:	f240 4261 	movw	r2, #1121	@ 0x461
 801545a:	491a      	ldr	r1, [pc, #104]	@ (80154c4 <tcp_free_acked_segments+0xf0>)
 801545c:	4817      	ldr	r0, [pc, #92]	@ (80154bc <tcp_free_acked_segments+0xe8>)
 801545e:	f005 ff19 	bl	801b294 <iprintf>
  while (seg_list != NULL &&
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d020      	beq.n	80154aa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	685b      	ldr	r3, [r3, #4]
 801546e:	4618      	mov	r0, r3
 8015470:	f7fb f9a2 	bl	80107b8 <lwip_htonl>
 8015474:	4604      	mov	r4, r0
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	891b      	ldrh	r3, [r3, #8]
 801547a:	461d      	mov	r5, r3
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	68db      	ldr	r3, [r3, #12]
 8015480:	899b      	ldrh	r3, [r3, #12]
 8015482:	b29b      	uxth	r3, r3
 8015484:	4618      	mov	r0, r3
 8015486:	f7fb f981 	bl	801078c <lwip_htons>
 801548a:	4603      	mov	r3, r0
 801548c:	b2db      	uxtb	r3, r3
 801548e:	f003 0303 	and.w	r3, r3, #3
 8015492:	2b00      	cmp	r3, #0
 8015494:	d001      	beq.n	801549a <tcp_free_acked_segments+0xc6>
 8015496:	2301      	movs	r3, #1
 8015498:	e000      	b.n	801549c <tcp_free_acked_segments+0xc8>
 801549a:	2300      	movs	r3, #0
 801549c:	442b      	add	r3, r5
 801549e:	18e2      	adds	r2, r4, r3
 80154a0:	4b09      	ldr	r3, [pc, #36]	@ (80154c8 <tcp_free_acked_segments+0xf4>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	dd9c      	ble.n	80153e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80154aa:	68bb      	ldr	r3, [r7, #8]
}
 80154ac:	4618      	mov	r0, r3
 80154ae:	3718      	adds	r7, #24
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bdb0      	pop	{r4, r5, r7, pc}
 80154b4:	0801d5b8 	.word	0x0801d5b8
 80154b8:	0801d8a0 	.word	0x0801d8a0
 80154bc:	0801d604 	.word	0x0801d604
 80154c0:	24014bf4 	.word	0x24014bf4
 80154c4:	0801d8c8 	.word	0x0801d8c8
 80154c8:	24014bf0 	.word	0x24014bf0

080154cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80154cc:	b5b0      	push	{r4, r5, r7, lr}
 80154ce:	b094      	sub	sp, #80	@ 0x50
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80154d4:	2300      	movs	r3, #0
 80154d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d106      	bne.n	80154ec <tcp_receive+0x20>
 80154de:	4b91      	ldr	r3, [pc, #580]	@ (8015724 <tcp_receive+0x258>)
 80154e0:	f240 427b 	movw	r2, #1147	@ 0x47b
 80154e4:	4990      	ldr	r1, [pc, #576]	@ (8015728 <tcp_receive+0x25c>)
 80154e6:	4891      	ldr	r0, [pc, #580]	@ (801572c <tcp_receive+0x260>)
 80154e8:	f005 fed4 	bl	801b294 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	7d1b      	ldrb	r3, [r3, #20]
 80154f0:	2b03      	cmp	r3, #3
 80154f2:	d806      	bhi.n	8015502 <tcp_receive+0x36>
 80154f4:	4b8b      	ldr	r3, [pc, #556]	@ (8015724 <tcp_receive+0x258>)
 80154f6:	f240 427c 	movw	r2, #1148	@ 0x47c
 80154fa:	498d      	ldr	r1, [pc, #564]	@ (8015730 <tcp_receive+0x264>)
 80154fc:	488b      	ldr	r0, [pc, #556]	@ (801572c <tcp_receive+0x260>)
 80154fe:	f005 fec9 	bl	801b294 <iprintf>

  if (flags & TCP_ACK) {
 8015502:	4b8c      	ldr	r3, [pc, #560]	@ (8015734 <tcp_receive+0x268>)
 8015504:	781b      	ldrb	r3, [r3, #0]
 8015506:	f003 0310 	and.w	r3, r3, #16
 801550a:	2b00      	cmp	r3, #0
 801550c:	f000 8264 	beq.w	80159d8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015516:	461a      	mov	r2, r3
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801551c:	4413      	add	r3, r2
 801551e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015524:	4b84      	ldr	r3, [pc, #528]	@ (8015738 <tcp_receive+0x26c>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	1ad3      	subs	r3, r2, r3
 801552a:	2b00      	cmp	r3, #0
 801552c:	db1b      	blt.n	8015566 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015532:	4b81      	ldr	r3, [pc, #516]	@ (8015738 <tcp_receive+0x26c>)
 8015534:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015536:	429a      	cmp	r2, r3
 8015538:	d106      	bne.n	8015548 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801553e:	4b7f      	ldr	r3, [pc, #508]	@ (801573c <tcp_receive+0x270>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	1ad3      	subs	r3, r2, r3
 8015544:	2b00      	cmp	r3, #0
 8015546:	db0e      	blt.n	8015566 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801554c:	4b7b      	ldr	r3, [pc, #492]	@ (801573c <tcp_receive+0x270>)
 801554e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015550:	429a      	cmp	r2, r3
 8015552:	d125      	bne.n	80155a0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015554:	4b7a      	ldr	r3, [pc, #488]	@ (8015740 <tcp_receive+0x274>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	89db      	ldrh	r3, [r3, #14]
 801555a:	b29a      	uxth	r2, r3
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015562:	429a      	cmp	r2, r3
 8015564:	d91c      	bls.n	80155a0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015566:	4b76      	ldr	r3, [pc, #472]	@ (8015740 <tcp_receive+0x274>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	89db      	ldrh	r3, [r3, #14]
 801556c:	b29a      	uxth	r2, r3
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015580:	429a      	cmp	r2, r3
 8015582:	d205      	bcs.n	8015590 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8015590:	4b69      	ldr	r3, [pc, #420]	@ (8015738 <tcp_receive+0x26c>)
 8015592:	681a      	ldr	r2, [r3, #0]
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015598:	4b68      	ldr	r3, [pc, #416]	@ (801573c <tcp_receive+0x270>)
 801559a:	681a      	ldr	r2, [r3, #0]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80155a0:	4b66      	ldr	r3, [pc, #408]	@ (801573c <tcp_receive+0x270>)
 80155a2:	681a      	ldr	r2, [r3, #0]
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155a8:	1ad3      	subs	r3, r2, r3
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	dc58      	bgt.n	8015660 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80155ae:	4b65      	ldr	r3, [pc, #404]	@ (8015744 <tcp_receive+0x278>)
 80155b0:	881b      	ldrh	r3, [r3, #0]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d14b      	bne.n	801564e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80155ba:	687a      	ldr	r2, [r7, #4]
 80155bc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80155c0:	4413      	add	r3, r2
 80155c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d142      	bne.n	801564e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	db3d      	blt.n	801564e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80155d6:	4b59      	ldr	r3, [pc, #356]	@ (801573c <tcp_receive+0x270>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	429a      	cmp	r2, r3
 80155dc:	d137      	bne.n	801564e <tcp_receive+0x182>
              found_dupack = 1;
 80155de:	2301      	movs	r3, #1
 80155e0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80155e8:	2bff      	cmp	r3, #255	@ 0xff
 80155ea:	d007      	beq.n	80155fc <tcp_receive+0x130>
                ++pcb->dupacks;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80155f2:	3301      	adds	r3, #1
 80155f4:	b2da      	uxtb	r2, r3
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015602:	2b03      	cmp	r3, #3
 8015604:	d91b      	bls.n	801563e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015610:	4413      	add	r3, r2
 8015612:	b29a      	uxth	r2, r3
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801561a:	429a      	cmp	r2, r3
 801561c:	d30a      	bcc.n	8015634 <tcp_receive+0x168>
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015628:	4413      	add	r3, r2
 801562a:	b29a      	uxth	r2, r3
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015632:	e004      	b.n	801563e <tcp_receive+0x172>
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801563a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015644:	2b02      	cmp	r3, #2
 8015646:	d902      	bls.n	801564e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f001 fee9 	bl	8017420 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801564e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015650:	2b00      	cmp	r3, #0
 8015652:	f040 8161 	bne.w	8015918 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2200      	movs	r2, #0
 801565a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801565e:	e15b      	b.n	8015918 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015660:	4b36      	ldr	r3, [pc, #216]	@ (801573c <tcp_receive+0x270>)
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015668:	1ad3      	subs	r3, r2, r3
 801566a:	3b01      	subs	r3, #1
 801566c:	2b00      	cmp	r3, #0
 801566e:	f2c0 814e 	blt.w	801590e <tcp_receive+0x442>
 8015672:	4b32      	ldr	r3, [pc, #200]	@ (801573c <tcp_receive+0x270>)
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801567a:	1ad3      	subs	r3, r2, r3
 801567c:	2b00      	cmp	r3, #0
 801567e:	f300 8146 	bgt.w	801590e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	8b5b      	ldrh	r3, [r3, #26]
 8015686:	f003 0304 	and.w	r3, r3, #4
 801568a:	2b00      	cmp	r3, #0
 801568c:	d010      	beq.n	80156b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	8b5b      	ldrh	r3, [r3, #26]
 8015692:	f023 0304 	bic.w	r3, r3, #4
 8015696:	b29a      	uxth	r2, r3
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	2200      	movs	r2, #0
 80156ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2200      	movs	r2, #0
 80156b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80156be:	10db      	asrs	r3, r3, #3
 80156c0:	b21b      	sxth	r3, r3
 80156c2:	b29a      	uxth	r2, r3
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80156ca:	b29b      	uxth	r3, r3
 80156cc:	4413      	add	r3, r2
 80156ce:	b29b      	uxth	r3, r3
 80156d0:	b21a      	sxth	r2, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80156d8:	4b18      	ldr	r3, [pc, #96]	@ (801573c <tcp_receive+0x270>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	b29a      	uxth	r2, r3
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	1ad3      	subs	r3, r2, r3
 80156e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80156f0:	4b12      	ldr	r3, [pc, #72]	@ (801573c <tcp_receive+0x270>)
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	7d1b      	ldrb	r3, [r3, #20]
 80156fc:	2b03      	cmp	r3, #3
 80156fe:	f240 8097 	bls.w	8015830 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801570e:	429a      	cmp	r2, r3
 8015710:	d245      	bcs.n	801579e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	8b5b      	ldrh	r3, [r3, #26]
 8015716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801571a:	2b00      	cmp	r3, #0
 801571c:	d014      	beq.n	8015748 <tcp_receive+0x27c>
 801571e:	2301      	movs	r3, #1
 8015720:	e013      	b.n	801574a <tcp_receive+0x27e>
 8015722:	bf00      	nop
 8015724:	0801d5b8 	.word	0x0801d5b8
 8015728:	0801d8e8 	.word	0x0801d8e8
 801572c:	0801d604 	.word	0x0801d604
 8015730:	0801d904 	.word	0x0801d904
 8015734:	24014bf8 	.word	0x24014bf8
 8015738:	24014bec 	.word	0x24014bec
 801573c:	24014bf0 	.word	0x24014bf0
 8015740:	24014bdc 	.word	0x24014bdc
 8015744:	24014bf6 	.word	0x24014bf6
 8015748:	2302      	movs	r3, #2
 801574a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801574e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015752:	b29a      	uxth	r2, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015758:	fb12 f303 	smulbb	r3, r2, r3
 801575c:	b29b      	uxth	r3, r3
 801575e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015760:	4293      	cmp	r3, r2
 8015762:	bf28      	it	cs
 8015764:	4613      	movcs	r3, r2
 8015766:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801576e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015770:	4413      	add	r3, r2
 8015772:	b29a      	uxth	r2, r3
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801577a:	429a      	cmp	r2, r3
 801577c:	d309      	bcc.n	8015792 <tcp_receive+0x2c6>
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015784:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015786:	4413      	add	r3, r2
 8015788:	b29a      	uxth	r2, r3
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015790:	e04e      	b.n	8015830 <tcp_receive+0x364>
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015798:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801579c:	e048      	b.n	8015830 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80157a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80157a6:	4413      	add	r3, r2
 80157a8:	b29a      	uxth	r2, r3
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d309      	bcc.n	80157c8 <tcp_receive+0x2fc>
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80157ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80157bc:	4413      	add	r3, r2
 80157be:	b29a      	uxth	r2, r3
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80157c6:	e004      	b.n	80157d2 <tcp_receive+0x306>
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80157ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80157de:	429a      	cmp	r2, r3
 80157e0:	d326      	bcc.n	8015830 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80157ee:	1ad3      	subs	r3, r2, r3
 80157f0:	b29a      	uxth	r2, r3
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015802:	4413      	add	r3, r2
 8015804:	b29a      	uxth	r2, r3
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801580c:	429a      	cmp	r2, r3
 801580e:	d30a      	bcc.n	8015826 <tcp_receive+0x35a>
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801581a:	4413      	add	r3, r2
 801581c:	b29a      	uxth	r2, r3
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015824:	e004      	b.n	8015830 <tcp_receive+0x364>
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801582c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015838:	4a98      	ldr	r2, [pc, #608]	@ (8015a9c <tcp_receive+0x5d0>)
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f7ff fdca 	bl	80153d4 <tcp_free_acked_segments>
 8015840:	4602      	mov	r2, r0
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801584e:	4a94      	ldr	r2, [pc, #592]	@ (8015aa0 <tcp_receive+0x5d4>)
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f7ff fdbf 	bl	80153d4 <tcp_free_acked_segments>
 8015856:	4602      	mov	r2, r0
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015860:	2b00      	cmp	r3, #0
 8015862:	d104      	bne.n	801586e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801586a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801586c:	e002      	b.n	8015874 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2200      	movs	r2, #0
 8015872:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2200      	movs	r2, #0
 8015878:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801587e:	2b00      	cmp	r3, #0
 8015880:	d103      	bne.n	801588a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	2200      	movs	r2, #0
 8015886:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015890:	4b84      	ldr	r3, [pc, #528]	@ (8015aa4 <tcp_receive+0x5d8>)
 8015892:	881b      	ldrh	r3, [r3, #0]
 8015894:	4413      	add	r3, r2
 8015896:	b29a      	uxth	r2, r3
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	8b5b      	ldrh	r3, [r3, #26]
 80158a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d035      	beq.n	8015916 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d118      	bne.n	80158e4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d00c      	beq.n	80158d4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158c2:	68db      	ldr	r3, [r3, #12]
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7fa ff76 	bl	80107b8 <lwip_htonl>
 80158cc:	4603      	mov	r3, r0
 80158ce:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	dc20      	bgt.n	8015916 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	8b5b      	ldrh	r3, [r3, #26]
 80158d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80158dc:	b29a      	uxth	r2, r3
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80158e2:	e018      	b.n	8015916 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158ec:	68db      	ldr	r3, [r3, #12]
 80158ee:	685b      	ldr	r3, [r3, #4]
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7fa ff61 	bl	80107b8 <lwip_htonl>
 80158f6:	4603      	mov	r3, r0
 80158f8:	1ae3      	subs	r3, r4, r3
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	dc0b      	bgt.n	8015916 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	8b5b      	ldrh	r3, [r3, #26]
 8015902:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015906:	b29a      	uxth	r2, r3
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801590c:	e003      	b.n	8015916 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f001 ff72 	bl	80177f8 <tcp_send_empty_ack>
 8015914:	e000      	b.n	8015918 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015916:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801591c:	2b00      	cmp	r3, #0
 801591e:	d05b      	beq.n	80159d8 <tcp_receive+0x50c>
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015924:	4b60      	ldr	r3, [pc, #384]	@ (8015aa8 <tcp_receive+0x5dc>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	1ad3      	subs	r3, r2, r3
 801592a:	2b00      	cmp	r3, #0
 801592c:	da54      	bge.n	80159d8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801592e:	4b5f      	ldr	r3, [pc, #380]	@ (8015aac <tcp_receive+0x5e0>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	b29a      	uxth	r2, r3
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015938:	b29b      	uxth	r3, r3
 801593a:	1ad3      	subs	r3, r2, r3
 801593c:	b29b      	uxth	r3, r3
 801593e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015942:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801594c:	10db      	asrs	r3, r3, #3
 801594e:	b21b      	sxth	r3, r3
 8015950:	b29b      	uxth	r3, r3
 8015952:	1ad3      	subs	r3, r2, r3
 8015954:	b29b      	uxth	r3, r3
 8015956:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015960:	b29a      	uxth	r2, r3
 8015962:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015966:	4413      	add	r3, r2
 8015968:	b29b      	uxth	r3, r3
 801596a:	b21a      	sxth	r2, r3
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015970:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015974:	2b00      	cmp	r3, #0
 8015976:	da05      	bge.n	8015984 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015978:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801597c:	425b      	negs	r3, r3
 801597e:	b29b      	uxth	r3, r3
 8015980:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015984:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801598e:	109b      	asrs	r3, r3, #2
 8015990:	b21b      	sxth	r3, r3
 8015992:	b29b      	uxth	r3, r3
 8015994:	1ad3      	subs	r3, r2, r3
 8015996:	b29b      	uxth	r3, r3
 8015998:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80159a2:	b29a      	uxth	r2, r3
 80159a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80159a8:	4413      	add	r3, r2
 80159aa:	b29b      	uxth	r3, r3
 80159ac:	b21a      	sxth	r2, r3
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80159b8:	10db      	asrs	r3, r3, #3
 80159ba:	b21b      	sxth	r3, r3
 80159bc:	b29a      	uxth	r2, r3
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	4413      	add	r3, r2
 80159c8:	b29b      	uxth	r3, r3
 80159ca:	b21a      	sxth	r2, r3
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	2200      	movs	r2, #0
 80159d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80159d8:	4b35      	ldr	r3, [pc, #212]	@ (8015ab0 <tcp_receive+0x5e4>)
 80159da:	881b      	ldrh	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	f000 84df 	beq.w	80163a0 <tcp_receive+0xed4>
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	7d1b      	ldrb	r3, [r3, #20]
 80159e6:	2b06      	cmp	r3, #6
 80159e8:	f200 84da 	bhi.w	80163a0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80159f0:	4b30      	ldr	r3, [pc, #192]	@ (8015ab4 <tcp_receive+0x5e8>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	1ad3      	subs	r3, r2, r3
 80159f6:	3b01      	subs	r3, #1
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	f2c0 808f 	blt.w	8015b1c <tcp_receive+0x650>
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015a02:	4b2b      	ldr	r3, [pc, #172]	@ (8015ab0 <tcp_receive+0x5e4>)
 8015a04:	881b      	ldrh	r3, [r3, #0]
 8015a06:	4619      	mov	r1, r3
 8015a08:	4b2a      	ldr	r3, [pc, #168]	@ (8015ab4 <tcp_receive+0x5e8>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	440b      	add	r3, r1
 8015a0e:	1ad3      	subs	r3, r2, r3
 8015a10:	3301      	adds	r3, #1
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	f300 8082 	bgt.w	8015b1c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015a18:	4b27      	ldr	r3, [pc, #156]	@ (8015ab8 <tcp_receive+0x5ec>)
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015a22:	4b24      	ldr	r3, [pc, #144]	@ (8015ab4 <tcp_receive+0x5e8>)
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	1ad3      	subs	r3, r2, r3
 8015a28:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015a2a:	4b23      	ldr	r3, [pc, #140]	@ (8015ab8 <tcp_receive+0x5ec>)
 8015a2c:	685b      	ldr	r3, [r3, #4]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d106      	bne.n	8015a40 <tcp_receive+0x574>
 8015a32:	4b22      	ldr	r3, [pc, #136]	@ (8015abc <tcp_receive+0x5f0>)
 8015a34:	f240 5294 	movw	r2, #1428	@ 0x594
 8015a38:	4921      	ldr	r1, [pc, #132]	@ (8015ac0 <tcp_receive+0x5f4>)
 8015a3a:	4822      	ldr	r0, [pc, #136]	@ (8015ac4 <tcp_receive+0x5f8>)
 8015a3c:	f005 fc2a 	bl	801b294 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015a46:	4293      	cmp	r3, r2
 8015a48:	d906      	bls.n	8015a58 <tcp_receive+0x58c>
 8015a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8015abc <tcp_receive+0x5f0>)
 8015a4c:	f240 5295 	movw	r2, #1429	@ 0x595
 8015a50:	491d      	ldr	r1, [pc, #116]	@ (8015ac8 <tcp_receive+0x5fc>)
 8015a52:	481c      	ldr	r0, [pc, #112]	@ (8015ac4 <tcp_receive+0x5f8>)
 8015a54:	f005 fc1e 	bl	801b294 <iprintf>
      off = (u16_t)off32;
 8015a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015a5e:	4b16      	ldr	r3, [pc, #88]	@ (8015ab8 <tcp_receive+0x5ec>)
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	891b      	ldrh	r3, [r3, #8]
 8015a64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015a68:	429a      	cmp	r2, r3
 8015a6a:	d906      	bls.n	8015a7a <tcp_receive+0x5ae>
 8015a6c:	4b13      	ldr	r3, [pc, #76]	@ (8015abc <tcp_receive+0x5f0>)
 8015a6e:	f240 5297 	movw	r2, #1431	@ 0x597
 8015a72:	4916      	ldr	r1, [pc, #88]	@ (8015acc <tcp_receive+0x600>)
 8015a74:	4813      	ldr	r0, [pc, #76]	@ (8015ac4 <tcp_receive+0x5f8>)
 8015a76:	f005 fc0d 	bl	801b294 <iprintf>
      inseg.len -= off;
 8015a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8015ab8 <tcp_receive+0x5ec>)
 8015a7c:	891a      	ldrh	r2, [r3, #8]
 8015a7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015a82:	1ad3      	subs	r3, r2, r3
 8015a84:	b29a      	uxth	r2, r3
 8015a86:	4b0c      	ldr	r3, [pc, #48]	@ (8015ab8 <tcp_receive+0x5ec>)
 8015a88:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8015ab8 <tcp_receive+0x5ec>)
 8015a8c:	685b      	ldr	r3, [r3, #4]
 8015a8e:	891a      	ldrh	r2, [r3, #8]
 8015a90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015a94:	1ad3      	subs	r3, r2, r3
 8015a96:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015a98:	e02a      	b.n	8015af0 <tcp_receive+0x624>
 8015a9a:	bf00      	nop
 8015a9c:	0801d920 	.word	0x0801d920
 8015aa0:	0801d928 	.word	0x0801d928
 8015aa4:	24014bf4 	.word	0x24014bf4
 8015aa8:	24014bf0 	.word	0x24014bf0
 8015aac:	24014bb4 	.word	0x24014bb4
 8015ab0:	24014bf6 	.word	0x24014bf6
 8015ab4:	24014bec 	.word	0x24014bec
 8015ab8:	24014bcc 	.word	0x24014bcc
 8015abc:	0801d5b8 	.word	0x0801d5b8
 8015ac0:	0801d930 	.word	0x0801d930
 8015ac4:	0801d604 	.word	0x0801d604
 8015ac8:	0801d940 	.word	0x0801d940
 8015acc:	0801d950 	.word	0x0801d950
        off -= p->len;
 8015ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ad2:	895b      	ldrh	r3, [r3, #10]
 8015ad4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015ad8:	1ad3      	subs	r3, r2, r3
 8015ada:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ae0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015ae2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015af2:	895b      	ldrh	r3, [r3, #10]
 8015af4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d8e9      	bhi.n	8015ad0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015afc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015b00:	4619      	mov	r1, r3
 8015b02:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015b04:	f7fc fa6e 	bl	8011fe4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b0c:	4a90      	ldr	r2, [pc, #576]	@ (8015d50 <tcp_receive+0x884>)
 8015b0e:	6013      	str	r3, [r2, #0]
 8015b10:	4b90      	ldr	r3, [pc, #576]	@ (8015d54 <tcp_receive+0x888>)
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	4a8e      	ldr	r2, [pc, #568]	@ (8015d50 <tcp_receive+0x884>)
 8015b16:	6812      	ldr	r2, [r2, #0]
 8015b18:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015b1a:	e00d      	b.n	8015b38 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015b1c:	4b8c      	ldr	r3, [pc, #560]	@ (8015d50 <tcp_receive+0x884>)
 8015b1e:	681a      	ldr	r2, [r3, #0]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b24:	1ad3      	subs	r3, r2, r3
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	da06      	bge.n	8015b38 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	8b5b      	ldrh	r3, [r3, #26]
 8015b2e:	f043 0302 	orr.w	r3, r3, #2
 8015b32:	b29a      	uxth	r2, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b38:	4b85      	ldr	r3, [pc, #532]	@ (8015d50 <tcp_receive+0x884>)
 8015b3a:	681a      	ldr	r2, [r3, #0]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b40:	1ad3      	subs	r3, r2, r3
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	f2c0 8427 	blt.w	8016396 <tcp_receive+0xeca>
 8015b48:	4b81      	ldr	r3, [pc, #516]	@ (8015d50 <tcp_receive+0x884>)
 8015b4a:	681a      	ldr	r2, [r3, #0]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b50:	6879      	ldr	r1, [r7, #4]
 8015b52:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015b54:	440b      	add	r3, r1
 8015b56:	1ad3      	subs	r3, r2, r3
 8015b58:	3301      	adds	r3, #1
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	f300 841b 	bgt.w	8016396 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b64:	4b7a      	ldr	r3, [pc, #488]	@ (8015d50 <tcp_receive+0x884>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	f040 8298 	bne.w	801609e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015b6e:	4b79      	ldr	r3, [pc, #484]	@ (8015d54 <tcp_receive+0x888>)
 8015b70:	891c      	ldrh	r4, [r3, #8]
 8015b72:	4b78      	ldr	r3, [pc, #480]	@ (8015d54 <tcp_receive+0x888>)
 8015b74:	68db      	ldr	r3, [r3, #12]
 8015b76:	899b      	ldrh	r3, [r3, #12]
 8015b78:	b29b      	uxth	r3, r3
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7fa fe06 	bl	801078c <lwip_htons>
 8015b80:	4603      	mov	r3, r0
 8015b82:	b2db      	uxtb	r3, r3
 8015b84:	f003 0303 	and.w	r3, r3, #3
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d001      	beq.n	8015b90 <tcp_receive+0x6c4>
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	e000      	b.n	8015b92 <tcp_receive+0x6c6>
 8015b90:	2300      	movs	r3, #0
 8015b92:	4423      	add	r3, r4
 8015b94:	b29a      	uxth	r2, r3
 8015b96:	4b70      	ldr	r3, [pc, #448]	@ (8015d58 <tcp_receive+0x88c>)
 8015b98:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8015d58 <tcp_receive+0x88c>)
 8015ba0:	881b      	ldrh	r3, [r3, #0]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d274      	bcs.n	8015c90 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8015d54 <tcp_receive+0x888>)
 8015ba8:	68db      	ldr	r3, [r3, #12]
 8015baa:	899b      	ldrh	r3, [r3, #12]
 8015bac:	b29b      	uxth	r3, r3
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f7fa fdec 	bl	801078c <lwip_htons>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	b2db      	uxtb	r3, r3
 8015bb8:	f003 0301 	and.w	r3, r3, #1
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d01e      	beq.n	8015bfe <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015bc0:	4b64      	ldr	r3, [pc, #400]	@ (8015d54 <tcp_receive+0x888>)
 8015bc2:	68db      	ldr	r3, [r3, #12]
 8015bc4:	899b      	ldrh	r3, [r3, #12]
 8015bc6:	b29b      	uxth	r3, r3
 8015bc8:	b21b      	sxth	r3, r3
 8015bca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015bce:	b21c      	sxth	r4, r3
 8015bd0:	4b60      	ldr	r3, [pc, #384]	@ (8015d54 <tcp_receive+0x888>)
 8015bd2:	68db      	ldr	r3, [r3, #12]
 8015bd4:	899b      	ldrh	r3, [r3, #12]
 8015bd6:	b29b      	uxth	r3, r3
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7fa fdd7 	bl	801078c <lwip_htons>
 8015bde:	4603      	mov	r3, r0
 8015be0:	b2db      	uxtb	r3, r3
 8015be2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7fa fdcf 	bl	801078c <lwip_htons>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	b21b      	sxth	r3, r3
 8015bf2:	4323      	orrs	r3, r4
 8015bf4:	b21a      	sxth	r2, r3
 8015bf6:	4b57      	ldr	r3, [pc, #348]	@ (8015d54 <tcp_receive+0x888>)
 8015bf8:	68db      	ldr	r3, [r3, #12]
 8015bfa:	b292      	uxth	r2, r2
 8015bfc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015c02:	4b54      	ldr	r3, [pc, #336]	@ (8015d54 <tcp_receive+0x888>)
 8015c04:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015c06:	4b53      	ldr	r3, [pc, #332]	@ (8015d54 <tcp_receive+0x888>)
 8015c08:	68db      	ldr	r3, [r3, #12]
 8015c0a:	899b      	ldrh	r3, [r3, #12]
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7fa fdbc 	bl	801078c <lwip_htons>
 8015c14:	4603      	mov	r3, r0
 8015c16:	b2db      	uxtb	r3, r3
 8015c18:	f003 0302 	and.w	r3, r3, #2
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d005      	beq.n	8015c2c <tcp_receive+0x760>
            inseg.len -= 1;
 8015c20:	4b4c      	ldr	r3, [pc, #304]	@ (8015d54 <tcp_receive+0x888>)
 8015c22:	891b      	ldrh	r3, [r3, #8]
 8015c24:	3b01      	subs	r3, #1
 8015c26:	b29a      	uxth	r2, r3
 8015c28:	4b4a      	ldr	r3, [pc, #296]	@ (8015d54 <tcp_receive+0x888>)
 8015c2a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015c2c:	4b49      	ldr	r3, [pc, #292]	@ (8015d54 <tcp_receive+0x888>)
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	4a48      	ldr	r2, [pc, #288]	@ (8015d54 <tcp_receive+0x888>)
 8015c32:	8912      	ldrh	r2, [r2, #8]
 8015c34:	4611      	mov	r1, r2
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7fc f8d4 	bl	8011de4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015c3c:	4b45      	ldr	r3, [pc, #276]	@ (8015d54 <tcp_receive+0x888>)
 8015c3e:	891c      	ldrh	r4, [r3, #8]
 8015c40:	4b44      	ldr	r3, [pc, #272]	@ (8015d54 <tcp_receive+0x888>)
 8015c42:	68db      	ldr	r3, [r3, #12]
 8015c44:	899b      	ldrh	r3, [r3, #12]
 8015c46:	b29b      	uxth	r3, r3
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7fa fd9f 	bl	801078c <lwip_htons>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	b2db      	uxtb	r3, r3
 8015c52:	f003 0303 	and.w	r3, r3, #3
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d001      	beq.n	8015c5e <tcp_receive+0x792>
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	e000      	b.n	8015c60 <tcp_receive+0x794>
 8015c5e:	2300      	movs	r3, #0
 8015c60:	4423      	add	r3, r4
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	4b3c      	ldr	r3, [pc, #240]	@ (8015d58 <tcp_receive+0x88c>)
 8015c66:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015c68:	4b3b      	ldr	r3, [pc, #236]	@ (8015d58 <tcp_receive+0x88c>)
 8015c6a:	881b      	ldrh	r3, [r3, #0]
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	4b38      	ldr	r3, [pc, #224]	@ (8015d50 <tcp_receive+0x884>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	441a      	add	r2, r3
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c78:	6879      	ldr	r1, [r7, #4]
 8015c7a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015c7c:	440b      	add	r3, r1
 8015c7e:	429a      	cmp	r2, r3
 8015c80:	d006      	beq.n	8015c90 <tcp_receive+0x7c4>
 8015c82:	4b36      	ldr	r3, [pc, #216]	@ (8015d5c <tcp_receive+0x890>)
 8015c84:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015c88:	4935      	ldr	r1, [pc, #212]	@ (8015d60 <tcp_receive+0x894>)
 8015c8a:	4836      	ldr	r0, [pc, #216]	@ (8015d64 <tcp_receive+0x898>)
 8015c8c:	f005 fb02 	bl	801b294 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	f000 80e6 	beq.w	8015e66 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8015d54 <tcp_receive+0x888>)
 8015c9c:	68db      	ldr	r3, [r3, #12]
 8015c9e:	899b      	ldrh	r3, [r3, #12]
 8015ca0:	b29b      	uxth	r3, r3
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7fa fd72 	bl	801078c <lwip_htons>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	f003 0301 	and.w	r3, r3, #1
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d010      	beq.n	8015cd6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015cb4:	e00a      	b.n	8015ccc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cba:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cc0:	681a      	ldr	r2, [r3, #0]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8015cc6:	68f8      	ldr	r0, [r7, #12]
 8015cc8:	f7fd fd93 	bl	80137f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d1f0      	bne.n	8015cb6 <tcp_receive+0x7ea>
 8015cd4:	e0c7      	b.n	8015e66 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015cdc:	e051      	b.n	8015d82 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ce0:	68db      	ldr	r3, [r3, #12]
 8015ce2:	899b      	ldrh	r3, [r3, #12]
 8015ce4:	b29b      	uxth	r3, r3
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7fa fd50 	bl	801078c <lwip_htons>
 8015cec:	4603      	mov	r3, r0
 8015cee:	b2db      	uxtb	r3, r3
 8015cf0:	f003 0301 	and.w	r3, r3, #1
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d03c      	beq.n	8015d72 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015cf8:	4b16      	ldr	r3, [pc, #88]	@ (8015d54 <tcp_receive+0x888>)
 8015cfa:	68db      	ldr	r3, [r3, #12]
 8015cfc:	899b      	ldrh	r3, [r3, #12]
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7fa fd43 	bl	801078c <lwip_htons>
 8015d06:	4603      	mov	r3, r0
 8015d08:	b2db      	uxtb	r3, r3
 8015d0a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d12f      	bne.n	8015d72 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015d12:	4b10      	ldr	r3, [pc, #64]	@ (8015d54 <tcp_receive+0x888>)
 8015d14:	68db      	ldr	r3, [r3, #12]
 8015d16:	899b      	ldrh	r3, [r3, #12]
 8015d18:	b29c      	uxth	r4, r3
 8015d1a:	2001      	movs	r0, #1
 8015d1c:	f7fa fd36 	bl	801078c <lwip_htons>
 8015d20:	4603      	mov	r3, r0
 8015d22:	461a      	mov	r2, r3
 8015d24:	4b0b      	ldr	r3, [pc, #44]	@ (8015d54 <tcp_receive+0x888>)
 8015d26:	68db      	ldr	r3, [r3, #12]
 8015d28:	4322      	orrs	r2, r4
 8015d2a:	b292      	uxth	r2, r2
 8015d2c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015d2e:	4b09      	ldr	r3, [pc, #36]	@ (8015d54 <tcp_receive+0x888>)
 8015d30:	891c      	ldrh	r4, [r3, #8]
 8015d32:	4b08      	ldr	r3, [pc, #32]	@ (8015d54 <tcp_receive+0x888>)
 8015d34:	68db      	ldr	r3, [r3, #12]
 8015d36:	899b      	ldrh	r3, [r3, #12]
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f7fa fd26 	bl	801078c <lwip_htons>
 8015d40:	4603      	mov	r3, r0
 8015d42:	b2db      	uxtb	r3, r3
 8015d44:	f003 0303 	and.w	r3, r3, #3
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d00d      	beq.n	8015d68 <tcp_receive+0x89c>
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	e00c      	b.n	8015d6a <tcp_receive+0x89e>
 8015d50:	24014bec 	.word	0x24014bec
 8015d54:	24014bcc 	.word	0x24014bcc
 8015d58:	24014bf6 	.word	0x24014bf6
 8015d5c:	0801d5b8 	.word	0x0801d5b8
 8015d60:	0801d960 	.word	0x0801d960
 8015d64:	0801d604 	.word	0x0801d604
 8015d68:	2300      	movs	r3, #0
 8015d6a:	4423      	add	r3, r4
 8015d6c:	b29a      	uxth	r2, r3
 8015d6e:	4b98      	ldr	r3, [pc, #608]	@ (8015fd0 <tcp_receive+0xb04>)
 8015d70:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d74:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015d7c:	6938      	ldr	r0, [r7, #16]
 8015d7e:	f7fd fd38 	bl	80137f2 <tcp_seg_free>
            while (next &&
 8015d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d00e      	beq.n	8015da6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015d88:	4b91      	ldr	r3, [pc, #580]	@ (8015fd0 <tcp_receive+0xb04>)
 8015d8a:	881b      	ldrh	r3, [r3, #0]
 8015d8c:	461a      	mov	r2, r3
 8015d8e:	4b91      	ldr	r3, [pc, #580]	@ (8015fd4 <tcp_receive+0xb08>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	441a      	add	r2, r3
 8015d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d96:	68db      	ldr	r3, [r3, #12]
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015d9c:	8909      	ldrh	r1, [r1, #8]
 8015d9e:	440b      	add	r3, r1
 8015da0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	da9b      	bge.n	8015cde <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d059      	beq.n	8015e60 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015dac:	4b88      	ldr	r3, [pc, #544]	@ (8015fd0 <tcp_receive+0xb04>)
 8015dae:	881b      	ldrh	r3, [r3, #0]
 8015db0:	461a      	mov	r2, r3
 8015db2:	4b88      	ldr	r3, [pc, #544]	@ (8015fd4 <tcp_receive+0xb08>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	441a      	add	r2, r3
 8015db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	dd4d      	ble.n	8015e60 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	b29a      	uxth	r2, r3
 8015dcc:	4b81      	ldr	r3, [pc, #516]	@ (8015fd4 <tcp_receive+0xb08>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	b29b      	uxth	r3, r3
 8015dd2:	1ad3      	subs	r3, r2, r3
 8015dd4:	b29a      	uxth	r2, r3
 8015dd6:	4b80      	ldr	r3, [pc, #512]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015dd8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015dda:	4b7f      	ldr	r3, [pc, #508]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015ddc:	68db      	ldr	r3, [r3, #12]
 8015dde:	899b      	ldrh	r3, [r3, #12]
 8015de0:	b29b      	uxth	r3, r3
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7fa fcd2 	bl	801078c <lwip_htons>
 8015de8:	4603      	mov	r3, r0
 8015dea:	b2db      	uxtb	r3, r3
 8015dec:	f003 0302 	and.w	r3, r3, #2
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d005      	beq.n	8015e00 <tcp_receive+0x934>
                inseg.len -= 1;
 8015df4:	4b78      	ldr	r3, [pc, #480]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015df6:	891b      	ldrh	r3, [r3, #8]
 8015df8:	3b01      	subs	r3, #1
 8015dfa:	b29a      	uxth	r2, r3
 8015dfc:	4b76      	ldr	r3, [pc, #472]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015dfe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015e00:	4b75      	ldr	r3, [pc, #468]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015e02:	685b      	ldr	r3, [r3, #4]
 8015e04:	4a74      	ldr	r2, [pc, #464]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015e06:	8912      	ldrh	r2, [r2, #8]
 8015e08:	4611      	mov	r1, r2
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7fb ffea 	bl	8011de4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015e10:	4b71      	ldr	r3, [pc, #452]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015e12:	891c      	ldrh	r4, [r3, #8]
 8015e14:	4b70      	ldr	r3, [pc, #448]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015e16:	68db      	ldr	r3, [r3, #12]
 8015e18:	899b      	ldrh	r3, [r3, #12]
 8015e1a:	b29b      	uxth	r3, r3
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f7fa fcb5 	bl	801078c <lwip_htons>
 8015e22:	4603      	mov	r3, r0
 8015e24:	b2db      	uxtb	r3, r3
 8015e26:	f003 0303 	and.w	r3, r3, #3
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d001      	beq.n	8015e32 <tcp_receive+0x966>
 8015e2e:	2301      	movs	r3, #1
 8015e30:	e000      	b.n	8015e34 <tcp_receive+0x968>
 8015e32:	2300      	movs	r3, #0
 8015e34:	4423      	add	r3, r4
 8015e36:	b29a      	uxth	r2, r3
 8015e38:	4b65      	ldr	r3, [pc, #404]	@ (8015fd0 <tcp_receive+0xb04>)
 8015e3a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015e3c:	4b64      	ldr	r3, [pc, #400]	@ (8015fd0 <tcp_receive+0xb04>)
 8015e3e:	881b      	ldrh	r3, [r3, #0]
 8015e40:	461a      	mov	r2, r3
 8015e42:	4b64      	ldr	r3, [pc, #400]	@ (8015fd4 <tcp_receive+0xb08>)
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	441a      	add	r2, r3
 8015e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e4a:	68db      	ldr	r3, [r3, #12]
 8015e4c:	685b      	ldr	r3, [r3, #4]
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d006      	beq.n	8015e60 <tcp_receive+0x994>
 8015e52:	4b62      	ldr	r3, [pc, #392]	@ (8015fdc <tcp_receive+0xb10>)
 8015e54:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015e58:	4961      	ldr	r1, [pc, #388]	@ (8015fe0 <tcp_receive+0xb14>)
 8015e5a:	4862      	ldr	r0, [pc, #392]	@ (8015fe4 <tcp_receive+0xb18>)
 8015e5c:	f005 fa1a 	bl	801b294 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015e64:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015e66:	4b5a      	ldr	r3, [pc, #360]	@ (8015fd0 <tcp_receive+0xb04>)
 8015e68:	881b      	ldrh	r3, [r3, #0]
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	4b59      	ldr	r3, [pc, #356]	@ (8015fd4 <tcp_receive+0xb08>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	441a      	add	r2, r3
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015e7a:	4b55      	ldr	r3, [pc, #340]	@ (8015fd0 <tcp_receive+0xb04>)
 8015e7c:	881b      	ldrh	r3, [r3, #0]
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d206      	bcs.n	8015e90 <tcp_receive+0x9c4>
 8015e82:	4b56      	ldr	r3, [pc, #344]	@ (8015fdc <tcp_receive+0xb10>)
 8015e84:	f240 6207 	movw	r2, #1543	@ 0x607
 8015e88:	4957      	ldr	r1, [pc, #348]	@ (8015fe8 <tcp_receive+0xb1c>)
 8015e8a:	4856      	ldr	r0, [pc, #344]	@ (8015fe4 <tcp_receive+0xb18>)
 8015e8c:	f005 fa02 	bl	801b294 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015e94:	4b4e      	ldr	r3, [pc, #312]	@ (8015fd0 <tcp_receive+0xb04>)
 8015e96:	881b      	ldrh	r3, [r3, #0]
 8015e98:	1ad3      	subs	r3, r2, r3
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015ea0:	6878      	ldr	r0, [r7, #4]
 8015ea2:	f7fc ffc1 	bl	8012e28 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015ea6:	4b4c      	ldr	r3, [pc, #304]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	891b      	ldrh	r3, [r3, #8]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d006      	beq.n	8015ebe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015eb0:	4b49      	ldr	r3, [pc, #292]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015eb2:	685b      	ldr	r3, [r3, #4]
 8015eb4:	4a4d      	ldr	r2, [pc, #308]	@ (8015fec <tcp_receive+0xb20>)
 8015eb6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015eb8:	4b47      	ldr	r3, [pc, #284]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015eba:	2200      	movs	r2, #0
 8015ebc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015ebe:	4b46      	ldr	r3, [pc, #280]	@ (8015fd8 <tcp_receive+0xb0c>)
 8015ec0:	68db      	ldr	r3, [r3, #12]
 8015ec2:	899b      	ldrh	r3, [r3, #12]
 8015ec4:	b29b      	uxth	r3, r3
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7fa fc60 	bl	801078c <lwip_htons>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	b2db      	uxtb	r3, r3
 8015ed0:	f003 0301 	and.w	r3, r3, #1
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	f000 80b8 	beq.w	801604a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015eda:	4b45      	ldr	r3, [pc, #276]	@ (8015ff0 <tcp_receive+0xb24>)
 8015edc:	781b      	ldrb	r3, [r3, #0]
 8015ede:	f043 0320 	orr.w	r3, r3, #32
 8015ee2:	b2da      	uxtb	r2, r3
 8015ee4:	4b42      	ldr	r3, [pc, #264]	@ (8015ff0 <tcp_receive+0xb24>)
 8015ee6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015ee8:	e0af      	b.n	801604a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015eee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ef4:	68db      	ldr	r3, [r3, #12]
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	4a36      	ldr	r2, [pc, #216]	@ (8015fd4 <tcp_receive+0xb08>)
 8015efa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015efc:	68bb      	ldr	r3, [r7, #8]
 8015efe:	891b      	ldrh	r3, [r3, #8]
 8015f00:	461c      	mov	r4, r3
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	68db      	ldr	r3, [r3, #12]
 8015f06:	899b      	ldrh	r3, [r3, #12]
 8015f08:	b29b      	uxth	r3, r3
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f7fa fc3e 	bl	801078c <lwip_htons>
 8015f10:	4603      	mov	r3, r0
 8015f12:	b2db      	uxtb	r3, r3
 8015f14:	f003 0303 	and.w	r3, r3, #3
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d001      	beq.n	8015f20 <tcp_receive+0xa54>
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	e000      	b.n	8015f22 <tcp_receive+0xa56>
 8015f20:	2300      	movs	r3, #0
 8015f22:	191a      	adds	r2, r3, r4
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f28:	441a      	add	r2, r3
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f32:	461c      	mov	r4, r3
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	891b      	ldrh	r3, [r3, #8]
 8015f38:	461d      	mov	r5, r3
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	899b      	ldrh	r3, [r3, #12]
 8015f40:	b29b      	uxth	r3, r3
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7fa fc22 	bl	801078c <lwip_htons>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	b2db      	uxtb	r3, r3
 8015f4c:	f003 0303 	and.w	r3, r3, #3
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d001      	beq.n	8015f58 <tcp_receive+0xa8c>
 8015f54:	2301      	movs	r3, #1
 8015f56:	e000      	b.n	8015f5a <tcp_receive+0xa8e>
 8015f58:	2300      	movs	r3, #0
 8015f5a:	442b      	add	r3, r5
 8015f5c:	429c      	cmp	r4, r3
 8015f5e:	d206      	bcs.n	8015f6e <tcp_receive+0xaa2>
 8015f60:	4b1e      	ldr	r3, [pc, #120]	@ (8015fdc <tcp_receive+0xb10>)
 8015f62:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015f66:	4923      	ldr	r1, [pc, #140]	@ (8015ff4 <tcp_receive+0xb28>)
 8015f68:	481e      	ldr	r0, [pc, #120]	@ (8015fe4 <tcp_receive+0xb18>)
 8015f6a:	f005 f993 	bl	801b294 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015f6e:	68bb      	ldr	r3, [r7, #8]
 8015f70:	891b      	ldrh	r3, [r3, #8]
 8015f72:	461c      	mov	r4, r3
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	68db      	ldr	r3, [r3, #12]
 8015f78:	899b      	ldrh	r3, [r3, #12]
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f7fa fc05 	bl	801078c <lwip_htons>
 8015f82:	4603      	mov	r3, r0
 8015f84:	b2db      	uxtb	r3, r3
 8015f86:	f003 0303 	and.w	r3, r3, #3
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d001      	beq.n	8015f92 <tcp_receive+0xac6>
 8015f8e:	2301      	movs	r3, #1
 8015f90:	e000      	b.n	8015f94 <tcp_receive+0xac8>
 8015f92:	2300      	movs	r3, #0
 8015f94:	1919      	adds	r1, r3, r4
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015f9a:	b28b      	uxth	r3, r1
 8015f9c:	1ad3      	subs	r3, r2, r3
 8015f9e:	b29a      	uxth	r2, r3
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015fa4:	6878      	ldr	r0, [r7, #4]
 8015fa6:	f7fc ff3f 	bl	8012e28 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015faa:	68bb      	ldr	r3, [r7, #8]
 8015fac:	685b      	ldr	r3, [r3, #4]
 8015fae:	891b      	ldrh	r3, [r3, #8]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d028      	beq.n	8016006 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8015fec <tcp_receive+0xb20>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d01d      	beq.n	8015ff8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8015fec <tcp_receive+0xb20>)
 8015fbe:	681a      	ldr	r2, [r3, #0]
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	4610      	mov	r0, r2
 8015fc8:	f7fc f960 	bl	801228c <pbuf_cat>
 8015fcc:	e018      	b.n	8016000 <tcp_receive+0xb34>
 8015fce:	bf00      	nop
 8015fd0:	24014bf6 	.word	0x24014bf6
 8015fd4:	24014bec 	.word	0x24014bec
 8015fd8:	24014bcc 	.word	0x24014bcc
 8015fdc:	0801d5b8 	.word	0x0801d5b8
 8015fe0:	0801d998 	.word	0x0801d998
 8015fe4:	0801d604 	.word	0x0801d604
 8015fe8:	0801d9d4 	.word	0x0801d9d4
 8015fec:	24014bfc 	.word	0x24014bfc
 8015ff0:	24014bf9 	.word	0x24014bf9
 8015ff4:	0801d9f4 	.word	0x0801d9f4
            } else {
              recv_data = cseg->p;
 8015ff8:	68bb      	ldr	r3, [r7, #8]
 8015ffa:	685b      	ldr	r3, [r3, #4]
 8015ffc:	4a70      	ldr	r2, [pc, #448]	@ (80161c0 <tcp_receive+0xcf4>)
 8015ffe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	2200      	movs	r2, #0
 8016004:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016006:	68bb      	ldr	r3, [r7, #8]
 8016008:	68db      	ldr	r3, [r3, #12]
 801600a:	899b      	ldrh	r3, [r3, #12]
 801600c:	b29b      	uxth	r3, r3
 801600e:	4618      	mov	r0, r3
 8016010:	f7fa fbbc 	bl	801078c <lwip_htons>
 8016014:	4603      	mov	r3, r0
 8016016:	b2db      	uxtb	r3, r3
 8016018:	f003 0301 	and.w	r3, r3, #1
 801601c:	2b00      	cmp	r3, #0
 801601e:	d00d      	beq.n	801603c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016020:	4b68      	ldr	r3, [pc, #416]	@ (80161c4 <tcp_receive+0xcf8>)
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	f043 0320 	orr.w	r3, r3, #32
 8016028:	b2da      	uxtb	r2, r3
 801602a:	4b66      	ldr	r3, [pc, #408]	@ (80161c4 <tcp_receive+0xcf8>)
 801602c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	7d1b      	ldrb	r3, [r3, #20]
 8016032:	2b04      	cmp	r3, #4
 8016034:	d102      	bne.n	801603c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2207      	movs	r2, #7
 801603a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	681a      	ldr	r2, [r3, #0]
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8016044:	68b8      	ldr	r0, [r7, #8]
 8016046:	f7fd fbd4 	bl	80137f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801604e:	2b00      	cmp	r3, #0
 8016050:	d008      	beq.n	8016064 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016056:	68db      	ldr	r3, [r3, #12]
 8016058:	685a      	ldr	r2, [r3, #4]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801605e:	429a      	cmp	r2, r3
 8016060:	f43f af43 	beq.w	8015eea <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	8b5b      	ldrh	r3, [r3, #26]
 8016068:	f003 0301 	and.w	r3, r3, #1
 801606c:	2b00      	cmp	r3, #0
 801606e:	d00e      	beq.n	801608e <tcp_receive+0xbc2>
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	8b5b      	ldrh	r3, [r3, #26]
 8016074:	f023 0301 	bic.w	r3, r3, #1
 8016078:	b29a      	uxth	r2, r3
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	835a      	strh	r2, [r3, #26]
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	8b5b      	ldrh	r3, [r3, #26]
 8016082:	f043 0302 	orr.w	r3, r3, #2
 8016086:	b29a      	uxth	r2, r3
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801608c:	e187      	b.n	801639e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	8b5b      	ldrh	r3, [r3, #26]
 8016092:	f043 0301 	orr.w	r3, r3, #1
 8016096:	b29a      	uxth	r2, r3
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801609c:	e17f      	b.n	801639e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d106      	bne.n	80160b4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80160a6:	4848      	ldr	r0, [pc, #288]	@ (80161c8 <tcp_receive+0xcfc>)
 80160a8:	f7fd fbbc 	bl	8013824 <tcp_seg_copy>
 80160ac:	4602      	mov	r2, r0
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80160b2:	e16c      	b.n	801638e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80160b4:	2300      	movs	r3, #0
 80160b6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80160bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80160be:	e156      	b.n	801636e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80160c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80160c2:	68db      	ldr	r3, [r3, #12]
 80160c4:	685a      	ldr	r2, [r3, #4]
 80160c6:	4b41      	ldr	r3, [pc, #260]	@ (80161cc <tcp_receive+0xd00>)
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d11d      	bne.n	801610a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80160ce:	4b3e      	ldr	r3, [pc, #248]	@ (80161c8 <tcp_receive+0xcfc>)
 80160d0:	891a      	ldrh	r2, [r3, #8]
 80160d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80160d4:	891b      	ldrh	r3, [r3, #8]
 80160d6:	429a      	cmp	r2, r3
 80160d8:	f240 814e 	bls.w	8016378 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80160dc:	483a      	ldr	r0, [pc, #232]	@ (80161c8 <tcp_receive+0xcfc>)
 80160de:	f7fd fba1 	bl	8013824 <tcp_seg_copy>
 80160e2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80160e4:	697b      	ldr	r3, [r7, #20]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	f000 8148 	beq.w	801637c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80160ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d003      	beq.n	80160fa <tcp_receive+0xc2e>
                    prev->next = cseg;
 80160f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160f4:	697a      	ldr	r2, [r7, #20]
 80160f6:	601a      	str	r2, [r3, #0]
 80160f8:	e002      	b.n	8016100 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	697a      	ldr	r2, [r7, #20]
 80160fe:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016100:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016102:	6978      	ldr	r0, [r7, #20]
 8016104:	f7ff f8de 	bl	80152c4 <tcp_oos_insert_segment>
                }
                break;
 8016108:	e138      	b.n	801637c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801610a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801610c:	2b00      	cmp	r3, #0
 801610e:	d117      	bne.n	8016140 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016110:	4b2e      	ldr	r3, [pc, #184]	@ (80161cc <tcp_receive+0xd00>)
 8016112:	681a      	ldr	r2, [r3, #0]
 8016114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016116:	68db      	ldr	r3, [r3, #12]
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	1ad3      	subs	r3, r2, r3
 801611c:	2b00      	cmp	r3, #0
 801611e:	da57      	bge.n	80161d0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016120:	4829      	ldr	r0, [pc, #164]	@ (80161c8 <tcp_receive+0xcfc>)
 8016122:	f7fd fb7f 	bl	8013824 <tcp_seg_copy>
 8016126:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	2b00      	cmp	r3, #0
 801612c:	f000 8128 	beq.w	8016380 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	69ba      	ldr	r2, [r7, #24]
 8016134:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016136:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016138:	69b8      	ldr	r0, [r7, #24]
 801613a:	f7ff f8c3 	bl	80152c4 <tcp_oos_insert_segment>
                  }
                  break;
 801613e:	e11f      	b.n	8016380 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016140:	4b22      	ldr	r3, [pc, #136]	@ (80161cc <tcp_receive+0xd00>)
 8016142:	681a      	ldr	r2, [r3, #0]
 8016144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016146:	68db      	ldr	r3, [r3, #12]
 8016148:	685b      	ldr	r3, [r3, #4]
 801614a:	1ad3      	subs	r3, r2, r3
 801614c:	3b01      	subs	r3, #1
 801614e:	2b00      	cmp	r3, #0
 8016150:	db3e      	blt.n	80161d0 <tcp_receive+0xd04>
 8016152:	4b1e      	ldr	r3, [pc, #120]	@ (80161cc <tcp_receive+0xd00>)
 8016154:	681a      	ldr	r2, [r3, #0]
 8016156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016158:	68db      	ldr	r3, [r3, #12]
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	1ad3      	subs	r3, r2, r3
 801615e:	3301      	adds	r3, #1
 8016160:	2b00      	cmp	r3, #0
 8016162:	dc35      	bgt.n	80161d0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016164:	4818      	ldr	r0, [pc, #96]	@ (80161c8 <tcp_receive+0xcfc>)
 8016166:	f7fd fb5d 	bl	8013824 <tcp_seg_copy>
 801616a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	2b00      	cmp	r3, #0
 8016170:	f000 8108 	beq.w	8016384 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016176:	68db      	ldr	r3, [r3, #12]
 8016178:	685b      	ldr	r3, [r3, #4]
 801617a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801617c:	8912      	ldrh	r2, [r2, #8]
 801617e:	441a      	add	r2, r3
 8016180:	4b12      	ldr	r3, [pc, #72]	@ (80161cc <tcp_receive+0xd00>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	1ad3      	subs	r3, r2, r3
 8016186:	2b00      	cmp	r3, #0
 8016188:	dd12      	ble.n	80161b0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801618a:	4b10      	ldr	r3, [pc, #64]	@ (80161cc <tcp_receive+0xd00>)
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	b29a      	uxth	r2, r3
 8016190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016192:	68db      	ldr	r3, [r3, #12]
 8016194:	685b      	ldr	r3, [r3, #4]
 8016196:	b29b      	uxth	r3, r3
 8016198:	1ad3      	subs	r3, r2, r3
 801619a:	b29a      	uxth	r2, r3
 801619c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801619e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80161a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161a2:	685a      	ldr	r2, [r3, #4]
 80161a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161a6:	891b      	ldrh	r3, [r3, #8]
 80161a8:	4619      	mov	r1, r3
 80161aa:	4610      	mov	r0, r2
 80161ac:	f7fb fe1a 	bl	8011de4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80161b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161b2:	69fa      	ldr	r2, [r7, #28]
 80161b4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80161b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80161b8:	69f8      	ldr	r0, [r7, #28]
 80161ba:	f7ff f883 	bl	80152c4 <tcp_oos_insert_segment>
                  }
                  break;
 80161be:	e0e1      	b.n	8016384 <tcp_receive+0xeb8>
 80161c0:	24014bfc 	.word	0x24014bfc
 80161c4:	24014bf9 	.word	0x24014bf9
 80161c8:	24014bcc 	.word	0x24014bcc
 80161cc:	24014bec 	.word	0x24014bec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80161d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161d2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80161d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	f040 80c5 	bne.w	8016368 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80161de:	4b7f      	ldr	r3, [pc, #508]	@ (80163dc <tcp_receive+0xf10>)
 80161e0:	681a      	ldr	r2, [r3, #0]
 80161e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161e4:	68db      	ldr	r3, [r3, #12]
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	f340 80bc 	ble.w	8016368 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80161f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161f2:	68db      	ldr	r3, [r3, #12]
 80161f4:	899b      	ldrh	r3, [r3, #12]
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7fa fac7 	bl	801078c <lwip_htons>
 80161fe:	4603      	mov	r3, r0
 8016200:	b2db      	uxtb	r3, r3
 8016202:	f003 0301 	and.w	r3, r3, #1
 8016206:	2b00      	cmp	r3, #0
 8016208:	f040 80be 	bne.w	8016388 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801620c:	4874      	ldr	r0, [pc, #464]	@ (80163e0 <tcp_receive+0xf14>)
 801620e:	f7fd fb09 	bl	8013824 <tcp_seg_copy>
 8016212:	4602      	mov	r2, r0
 8016214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016216:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	2b00      	cmp	r3, #0
 801621e:	f000 80b5 	beq.w	801638c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016224:	68db      	ldr	r3, [r3, #12]
 8016226:	685b      	ldr	r3, [r3, #4]
 8016228:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801622a:	8912      	ldrh	r2, [r2, #8]
 801622c:	441a      	add	r2, r3
 801622e:	4b6b      	ldr	r3, [pc, #428]	@ (80163dc <tcp_receive+0xf10>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	1ad3      	subs	r3, r2, r3
 8016234:	2b00      	cmp	r3, #0
 8016236:	dd12      	ble.n	801625e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016238:	4b68      	ldr	r3, [pc, #416]	@ (80163dc <tcp_receive+0xf10>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	b29a      	uxth	r2, r3
 801623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016240:	68db      	ldr	r3, [r3, #12]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	b29b      	uxth	r3, r3
 8016246:	1ad3      	subs	r3, r2, r3
 8016248:	b29a      	uxth	r2, r3
 801624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801624c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801624e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016250:	685a      	ldr	r2, [r3, #4]
 8016252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016254:	891b      	ldrh	r3, [r3, #8]
 8016256:	4619      	mov	r1, r3
 8016258:	4610      	mov	r0, r2
 801625a:	f7fb fdc3 	bl	8011de4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801625e:	4b61      	ldr	r3, [pc, #388]	@ (80163e4 <tcp_receive+0xf18>)
 8016260:	881b      	ldrh	r3, [r3, #0]
 8016262:	461a      	mov	r2, r3
 8016264:	4b5d      	ldr	r3, [pc, #372]	@ (80163dc <tcp_receive+0xf10>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	441a      	add	r2, r3
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801626e:	6879      	ldr	r1, [r7, #4]
 8016270:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016272:	440b      	add	r3, r1
 8016274:	1ad3      	subs	r3, r2, r3
 8016276:	2b00      	cmp	r3, #0
 8016278:	f340 8088 	ble.w	801638c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801627c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	68db      	ldr	r3, [r3, #12]
 8016282:	899b      	ldrh	r3, [r3, #12]
 8016284:	b29b      	uxth	r3, r3
 8016286:	4618      	mov	r0, r3
 8016288:	f7fa fa80 	bl	801078c <lwip_htons>
 801628c:	4603      	mov	r3, r0
 801628e:	b2db      	uxtb	r3, r3
 8016290:	f003 0301 	and.w	r3, r3, #1
 8016294:	2b00      	cmp	r3, #0
 8016296:	d021      	beq.n	80162dc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	68db      	ldr	r3, [r3, #12]
 801629e:	899b      	ldrh	r3, [r3, #12]
 80162a0:	b29b      	uxth	r3, r3
 80162a2:	b21b      	sxth	r3, r3
 80162a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80162a8:	b21c      	sxth	r4, r3
 80162aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	68db      	ldr	r3, [r3, #12]
 80162b0:	899b      	ldrh	r3, [r3, #12]
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	4618      	mov	r0, r3
 80162b6:	f7fa fa69 	bl	801078c <lwip_htons>
 80162ba:	4603      	mov	r3, r0
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7fa fa61 	bl	801078c <lwip_htons>
 80162ca:	4603      	mov	r3, r0
 80162cc:	b21b      	sxth	r3, r3
 80162ce:	4323      	orrs	r3, r4
 80162d0:	b21a      	sxth	r2, r3
 80162d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	68db      	ldr	r3, [r3, #12]
 80162d8:	b292      	uxth	r2, r2
 80162da:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162e0:	b29a      	uxth	r2, r3
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162e6:	4413      	add	r3, r2
 80162e8:	b299      	uxth	r1, r3
 80162ea:	4b3c      	ldr	r3, [pc, #240]	@ (80163dc <tcp_receive+0xf10>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	b29a      	uxth	r2, r3
 80162f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	1a8a      	subs	r2, r1, r2
 80162f6:	b292      	uxth	r2, r2
 80162f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80162fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	685a      	ldr	r2, [r3, #4]
 8016300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	891b      	ldrh	r3, [r3, #8]
 8016306:	4619      	mov	r1, r3
 8016308:	4610      	mov	r0, r2
 801630a:	f7fb fd6b 	bl	8011de4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	891c      	ldrh	r4, [r3, #8]
 8016314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	68db      	ldr	r3, [r3, #12]
 801631a:	899b      	ldrh	r3, [r3, #12]
 801631c:	b29b      	uxth	r3, r3
 801631e:	4618      	mov	r0, r3
 8016320:	f7fa fa34 	bl	801078c <lwip_htons>
 8016324:	4603      	mov	r3, r0
 8016326:	b2db      	uxtb	r3, r3
 8016328:	f003 0303 	and.w	r3, r3, #3
 801632c:	2b00      	cmp	r3, #0
 801632e:	d001      	beq.n	8016334 <tcp_receive+0xe68>
 8016330:	2301      	movs	r3, #1
 8016332:	e000      	b.n	8016336 <tcp_receive+0xe6a>
 8016334:	2300      	movs	r3, #0
 8016336:	4423      	add	r3, r4
 8016338:	b29a      	uxth	r2, r3
 801633a:	4b2a      	ldr	r3, [pc, #168]	@ (80163e4 <tcp_receive+0xf18>)
 801633c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801633e:	4b29      	ldr	r3, [pc, #164]	@ (80163e4 <tcp_receive+0xf18>)
 8016340:	881b      	ldrh	r3, [r3, #0]
 8016342:	461a      	mov	r2, r3
 8016344:	4b25      	ldr	r3, [pc, #148]	@ (80163dc <tcp_receive+0xf10>)
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	441a      	add	r2, r3
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801634e:	6879      	ldr	r1, [r7, #4]
 8016350:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016352:	440b      	add	r3, r1
 8016354:	429a      	cmp	r2, r3
 8016356:	d019      	beq.n	801638c <tcp_receive+0xec0>
 8016358:	4b23      	ldr	r3, [pc, #140]	@ (80163e8 <tcp_receive+0xf1c>)
 801635a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801635e:	4923      	ldr	r1, [pc, #140]	@ (80163ec <tcp_receive+0xf20>)
 8016360:	4823      	ldr	r0, [pc, #140]	@ (80163f0 <tcp_receive+0xf24>)
 8016362:	f004 ff97 	bl	801b294 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016366:	e011      	b.n	801638c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801636e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016370:	2b00      	cmp	r3, #0
 8016372:	f47f aea5 	bne.w	80160c0 <tcp_receive+0xbf4>
 8016376:	e00a      	b.n	801638e <tcp_receive+0xec2>
                break;
 8016378:	bf00      	nop
 801637a:	e008      	b.n	801638e <tcp_receive+0xec2>
                break;
 801637c:	bf00      	nop
 801637e:	e006      	b.n	801638e <tcp_receive+0xec2>
                  break;
 8016380:	bf00      	nop
 8016382:	e004      	b.n	801638e <tcp_receive+0xec2>
                  break;
 8016384:	bf00      	nop
 8016386:	e002      	b.n	801638e <tcp_receive+0xec2>
                  break;
 8016388:	bf00      	nop
 801638a:	e000      	b.n	801638e <tcp_receive+0xec2>
                break;
 801638c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801638e:	6878      	ldr	r0, [r7, #4]
 8016390:	f001 fa32 	bl	80177f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016394:	e003      	b.n	801639e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f001 fa2e 	bl	80177f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801639c:	e01a      	b.n	80163d4 <tcp_receive+0xf08>
 801639e:	e019      	b.n	80163d4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80163a0:	4b0e      	ldr	r3, [pc, #56]	@ (80163dc <tcp_receive+0xf10>)
 80163a2:	681a      	ldr	r2, [r3, #0]
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163a8:	1ad3      	subs	r3, r2, r3
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	db0a      	blt.n	80163c4 <tcp_receive+0xef8>
 80163ae:	4b0b      	ldr	r3, [pc, #44]	@ (80163dc <tcp_receive+0xf10>)
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163b6:	6879      	ldr	r1, [r7, #4]
 80163b8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80163ba:	440b      	add	r3, r1
 80163bc:	1ad3      	subs	r3, r2, r3
 80163be:	3301      	adds	r3, #1
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	dd07      	ble.n	80163d4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	8b5b      	ldrh	r3, [r3, #26]
 80163c8:	f043 0302 	orr.w	r3, r3, #2
 80163cc:	b29a      	uxth	r2, r3
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80163d2:	e7ff      	b.n	80163d4 <tcp_receive+0xf08>
 80163d4:	bf00      	nop
 80163d6:	3750      	adds	r7, #80	@ 0x50
 80163d8:	46bd      	mov	sp, r7
 80163da:	bdb0      	pop	{r4, r5, r7, pc}
 80163dc:	24014bec 	.word	0x24014bec
 80163e0:	24014bcc 	.word	0x24014bcc
 80163e4:	24014bf6 	.word	0x24014bf6
 80163e8:	0801d5b8 	.word	0x0801d5b8
 80163ec:	0801d960 	.word	0x0801d960
 80163f0:	0801d604 	.word	0x0801d604

080163f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80163f4:	b480      	push	{r7}
 80163f6:	b083      	sub	sp, #12
 80163f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80163fa:	4b15      	ldr	r3, [pc, #84]	@ (8016450 <tcp_get_next_optbyte+0x5c>)
 80163fc:	881b      	ldrh	r3, [r3, #0]
 80163fe:	1c5a      	adds	r2, r3, #1
 8016400:	b291      	uxth	r1, r2
 8016402:	4a13      	ldr	r2, [pc, #76]	@ (8016450 <tcp_get_next_optbyte+0x5c>)
 8016404:	8011      	strh	r1, [r2, #0]
 8016406:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016408:	4b12      	ldr	r3, [pc, #72]	@ (8016454 <tcp_get_next_optbyte+0x60>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d004      	beq.n	801641a <tcp_get_next_optbyte+0x26>
 8016410:	4b11      	ldr	r3, [pc, #68]	@ (8016458 <tcp_get_next_optbyte+0x64>)
 8016412:	881b      	ldrh	r3, [r3, #0]
 8016414:	88fa      	ldrh	r2, [r7, #6]
 8016416:	429a      	cmp	r2, r3
 8016418:	d208      	bcs.n	801642c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801641a:	4b10      	ldr	r3, [pc, #64]	@ (801645c <tcp_get_next_optbyte+0x68>)
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	3314      	adds	r3, #20
 8016420:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016422:	88fb      	ldrh	r3, [r7, #6]
 8016424:	683a      	ldr	r2, [r7, #0]
 8016426:	4413      	add	r3, r2
 8016428:	781b      	ldrb	r3, [r3, #0]
 801642a:	e00b      	b.n	8016444 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801642c:	88fb      	ldrh	r3, [r7, #6]
 801642e:	b2da      	uxtb	r2, r3
 8016430:	4b09      	ldr	r3, [pc, #36]	@ (8016458 <tcp_get_next_optbyte+0x64>)
 8016432:	881b      	ldrh	r3, [r3, #0]
 8016434:	b2db      	uxtb	r3, r3
 8016436:	1ad3      	subs	r3, r2, r3
 8016438:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801643a:	4b06      	ldr	r3, [pc, #24]	@ (8016454 <tcp_get_next_optbyte+0x60>)
 801643c:	681a      	ldr	r2, [r3, #0]
 801643e:	797b      	ldrb	r3, [r7, #5]
 8016440:	4413      	add	r3, r2
 8016442:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016444:	4618      	mov	r0, r3
 8016446:	370c      	adds	r7, #12
 8016448:	46bd      	mov	sp, r7
 801644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644e:	4770      	bx	lr
 8016450:	24014be8 	.word	0x24014be8
 8016454:	24014be4 	.word	0x24014be4
 8016458:	24014be2 	.word	0x24014be2
 801645c:	24014bdc 	.word	0x24014bdc

08016460 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d106      	bne.n	801647c <tcp_parseopt+0x1c>
 801646e:	4b33      	ldr	r3, [pc, #204]	@ (801653c <tcp_parseopt+0xdc>)
 8016470:	f240 727d 	movw	r2, #1917	@ 0x77d
 8016474:	4932      	ldr	r1, [pc, #200]	@ (8016540 <tcp_parseopt+0xe0>)
 8016476:	4833      	ldr	r0, [pc, #204]	@ (8016544 <tcp_parseopt+0xe4>)
 8016478:	f004 ff0c 	bl	801b294 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801647c:	4b32      	ldr	r3, [pc, #200]	@ (8016548 <tcp_parseopt+0xe8>)
 801647e:	881b      	ldrh	r3, [r3, #0]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d057      	beq.n	8016534 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016484:	4b31      	ldr	r3, [pc, #196]	@ (801654c <tcp_parseopt+0xec>)
 8016486:	2200      	movs	r2, #0
 8016488:	801a      	strh	r2, [r3, #0]
 801648a:	e047      	b.n	801651c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 801648c:	f7ff ffb2 	bl	80163f4 <tcp_get_next_optbyte>
 8016490:	4603      	mov	r3, r0
 8016492:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016494:	7bfb      	ldrb	r3, [r7, #15]
 8016496:	2b02      	cmp	r3, #2
 8016498:	d006      	beq.n	80164a8 <tcp_parseopt+0x48>
 801649a:	2b02      	cmp	r3, #2
 801649c:	dc2b      	bgt.n	80164f6 <tcp_parseopt+0x96>
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d043      	beq.n	801652a <tcp_parseopt+0xca>
 80164a2:	2b01      	cmp	r3, #1
 80164a4:	d039      	beq.n	801651a <tcp_parseopt+0xba>
 80164a6:	e026      	b.n	80164f6 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80164a8:	f7ff ffa4 	bl	80163f4 <tcp_get_next_optbyte>
 80164ac:	4603      	mov	r3, r0
 80164ae:	2b04      	cmp	r3, #4
 80164b0:	d13d      	bne.n	801652e <tcp_parseopt+0xce>
 80164b2:	4b26      	ldr	r3, [pc, #152]	@ (801654c <tcp_parseopt+0xec>)
 80164b4:	881b      	ldrh	r3, [r3, #0]
 80164b6:	3301      	adds	r3, #1
 80164b8:	4a23      	ldr	r2, [pc, #140]	@ (8016548 <tcp_parseopt+0xe8>)
 80164ba:	8812      	ldrh	r2, [r2, #0]
 80164bc:	4293      	cmp	r3, r2
 80164be:	da36      	bge.n	801652e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80164c0:	f7ff ff98 	bl	80163f4 <tcp_get_next_optbyte>
 80164c4:	4603      	mov	r3, r0
 80164c6:	021b      	lsls	r3, r3, #8
 80164c8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80164ca:	f7ff ff93 	bl	80163f4 <tcp_get_next_optbyte>
 80164ce:	4603      	mov	r3, r0
 80164d0:	461a      	mov	r2, r3
 80164d2:	89bb      	ldrh	r3, [r7, #12]
 80164d4:	4313      	orrs	r3, r2
 80164d6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80164d8:	89bb      	ldrh	r3, [r7, #12]
 80164da:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80164de:	4293      	cmp	r3, r2
 80164e0:	d804      	bhi.n	80164ec <tcp_parseopt+0x8c>
 80164e2:	89bb      	ldrh	r3, [r7, #12]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d001      	beq.n	80164ec <tcp_parseopt+0x8c>
 80164e8:	89ba      	ldrh	r2, [r7, #12]
 80164ea:	e001      	b.n	80164f0 <tcp_parseopt+0x90>
 80164ec:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80164f4:	e012      	b.n	801651c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80164f6:	f7ff ff7d 	bl	80163f4 <tcp_get_next_optbyte>
 80164fa:	4603      	mov	r3, r0
 80164fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80164fe:	7afb      	ldrb	r3, [r7, #11]
 8016500:	2b01      	cmp	r3, #1
 8016502:	d916      	bls.n	8016532 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016504:	7afb      	ldrb	r3, [r7, #11]
 8016506:	b29a      	uxth	r2, r3
 8016508:	4b10      	ldr	r3, [pc, #64]	@ (801654c <tcp_parseopt+0xec>)
 801650a:	881b      	ldrh	r3, [r3, #0]
 801650c:	4413      	add	r3, r2
 801650e:	b29b      	uxth	r3, r3
 8016510:	3b02      	subs	r3, #2
 8016512:	b29a      	uxth	r2, r3
 8016514:	4b0d      	ldr	r3, [pc, #52]	@ (801654c <tcp_parseopt+0xec>)
 8016516:	801a      	strh	r2, [r3, #0]
 8016518:	e000      	b.n	801651c <tcp_parseopt+0xbc>
          break;
 801651a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801651c:	4b0b      	ldr	r3, [pc, #44]	@ (801654c <tcp_parseopt+0xec>)
 801651e:	881a      	ldrh	r2, [r3, #0]
 8016520:	4b09      	ldr	r3, [pc, #36]	@ (8016548 <tcp_parseopt+0xe8>)
 8016522:	881b      	ldrh	r3, [r3, #0]
 8016524:	429a      	cmp	r2, r3
 8016526:	d3b1      	bcc.n	801648c <tcp_parseopt+0x2c>
 8016528:	e004      	b.n	8016534 <tcp_parseopt+0xd4>
          return;
 801652a:	bf00      	nop
 801652c:	e002      	b.n	8016534 <tcp_parseopt+0xd4>
            return;
 801652e:	bf00      	nop
 8016530:	e000      	b.n	8016534 <tcp_parseopt+0xd4>
            return;
 8016532:	bf00      	nop
      }
    }
  }
}
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	0801d5b8 	.word	0x0801d5b8
 8016540:	0801da1c 	.word	0x0801da1c
 8016544:	0801d604 	.word	0x0801d604
 8016548:	24014be0 	.word	0x24014be0
 801654c:	24014be8 	.word	0x24014be8

08016550 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016550:	b480      	push	{r7}
 8016552:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016554:	4b05      	ldr	r3, [pc, #20]	@ (801656c <tcp_trigger_input_pcb_close+0x1c>)
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	f043 0310 	orr.w	r3, r3, #16
 801655c:	b2da      	uxtb	r2, r3
 801655e:	4b03      	ldr	r3, [pc, #12]	@ (801656c <tcp_trigger_input_pcb_close+0x1c>)
 8016560:	701a      	strb	r2, [r3, #0]
}
 8016562:	bf00      	nop
 8016564:	46bd      	mov	sp, r7
 8016566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656a:	4770      	bx	lr
 801656c:	24014bf9 	.word	0x24014bf9

08016570 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	af00      	add	r7, sp, #0
 8016576:	60f8      	str	r0, [r7, #12]
 8016578:	60b9      	str	r1, [r7, #8]
 801657a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d00a      	beq.n	8016598 <tcp_route+0x28>
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	7a1b      	ldrb	r3, [r3, #8]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d006      	beq.n	8016598 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	7a1b      	ldrb	r3, [r3, #8]
 801658e:	4618      	mov	r0, r3
 8016590:	f7fb fa1c 	bl	80119cc <netif_get_by_index>
 8016594:	4603      	mov	r3, r0
 8016596:	e003      	b.n	80165a0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016598:	6878      	ldr	r0, [r7, #4]
 801659a:	f003 fa01 	bl	80199a0 <ip4_route>
 801659e:	4603      	mov	r3, r0
  }
}
 80165a0:	4618      	mov	r0, r3
 80165a2:	3710      	adds	r7, #16
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80165a8:	b590      	push	{r4, r7, lr}
 80165aa:	b087      	sub	sp, #28
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	60f8      	str	r0, [r7, #12]
 80165b0:	60b9      	str	r1, [r7, #8]
 80165b2:	603b      	str	r3, [r7, #0]
 80165b4:	4613      	mov	r3, r2
 80165b6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d105      	bne.n	80165ca <tcp_create_segment+0x22>
 80165be:	4b43      	ldr	r3, [pc, #268]	@ (80166cc <tcp_create_segment+0x124>)
 80165c0:	22a3      	movs	r2, #163	@ 0xa3
 80165c2:	4943      	ldr	r1, [pc, #268]	@ (80166d0 <tcp_create_segment+0x128>)
 80165c4:	4843      	ldr	r0, [pc, #268]	@ (80166d4 <tcp_create_segment+0x12c>)
 80165c6:	f004 fe65 	bl	801b294 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d105      	bne.n	80165dc <tcp_create_segment+0x34>
 80165d0:	4b3e      	ldr	r3, [pc, #248]	@ (80166cc <tcp_create_segment+0x124>)
 80165d2:	22a4      	movs	r2, #164	@ 0xa4
 80165d4:	4940      	ldr	r1, [pc, #256]	@ (80166d8 <tcp_create_segment+0x130>)
 80165d6:	483f      	ldr	r0, [pc, #252]	@ (80166d4 <tcp_create_segment+0x12c>)
 80165d8:	f004 fe5c 	bl	801b294 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80165dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80165e0:	009b      	lsls	r3, r3, #2
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	f003 0304 	and.w	r3, r3, #4
 80165e8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80165ea:	2004      	movs	r0, #4
 80165ec:	f7fa fe5e 	bl	80112ac <memp_malloc>
 80165f0:	6138      	str	r0, [r7, #16]
 80165f2:	693b      	ldr	r3, [r7, #16]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d104      	bne.n	8016602 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80165f8:	68b8      	ldr	r0, [r7, #8]
 80165fa:	f7fb fd79 	bl	80120f0 <pbuf_free>
    return NULL;
 80165fe:	2300      	movs	r3, #0
 8016600:	e060      	b.n	80166c4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8016602:	693b      	ldr	r3, [r7, #16]
 8016604:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016608:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801660a:	693b      	ldr	r3, [r7, #16]
 801660c:	2200      	movs	r2, #0
 801660e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016610:	693b      	ldr	r3, [r7, #16]
 8016612:	68ba      	ldr	r2, [r7, #8]
 8016614:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016616:	68bb      	ldr	r3, [r7, #8]
 8016618:	891a      	ldrh	r2, [r3, #8]
 801661a:	7dfb      	ldrb	r3, [r7, #23]
 801661c:	b29b      	uxth	r3, r3
 801661e:	429a      	cmp	r2, r3
 8016620:	d205      	bcs.n	801662e <tcp_create_segment+0x86>
 8016622:	4b2a      	ldr	r3, [pc, #168]	@ (80166cc <tcp_create_segment+0x124>)
 8016624:	22b0      	movs	r2, #176	@ 0xb0
 8016626:	492d      	ldr	r1, [pc, #180]	@ (80166dc <tcp_create_segment+0x134>)
 8016628:	482a      	ldr	r0, [pc, #168]	@ (80166d4 <tcp_create_segment+0x12c>)
 801662a:	f004 fe33 	bl	801b294 <iprintf>
  seg->len = p->tot_len - optlen;
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	891a      	ldrh	r2, [r3, #8]
 8016632:	7dfb      	ldrb	r3, [r7, #23]
 8016634:	b29b      	uxth	r3, r3
 8016636:	1ad3      	subs	r3, r2, r3
 8016638:	b29a      	uxth	r2, r3
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801663e:	2114      	movs	r1, #20
 8016640:	68b8      	ldr	r0, [r7, #8]
 8016642:	f7fb fcbf 	bl	8011fc4 <pbuf_add_header>
 8016646:	4603      	mov	r3, r0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d004      	beq.n	8016656 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801664c:	6938      	ldr	r0, [r7, #16]
 801664e:	f7fd f8d0 	bl	80137f2 <tcp_seg_free>
    return NULL;
 8016652:	2300      	movs	r3, #0
 8016654:	e036      	b.n	80166c4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016656:	693b      	ldr	r3, [r7, #16]
 8016658:	685b      	ldr	r3, [r3, #4]
 801665a:	685a      	ldr	r2, [r3, #4]
 801665c:	693b      	ldr	r3, [r7, #16]
 801665e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	8ada      	ldrh	r2, [r3, #22]
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	68dc      	ldr	r4, [r3, #12]
 8016668:	4610      	mov	r0, r2
 801666a:	f7fa f88f 	bl	801078c <lwip_htons>
 801666e:	4603      	mov	r3, r0
 8016670:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	8b1a      	ldrh	r2, [r3, #24]
 8016676:	693b      	ldr	r3, [r7, #16]
 8016678:	68dc      	ldr	r4, [r3, #12]
 801667a:	4610      	mov	r0, r2
 801667c:	f7fa f886 	bl	801078c <lwip_htons>
 8016680:	4603      	mov	r3, r0
 8016682:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016684:	693b      	ldr	r3, [r7, #16]
 8016686:	68dc      	ldr	r4, [r3, #12]
 8016688:	6838      	ldr	r0, [r7, #0]
 801668a:	f7fa f895 	bl	80107b8 <lwip_htonl>
 801668e:	4603      	mov	r3, r0
 8016690:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016692:	7dfb      	ldrb	r3, [r7, #23]
 8016694:	089b      	lsrs	r3, r3, #2
 8016696:	b2db      	uxtb	r3, r3
 8016698:	3305      	adds	r3, #5
 801669a:	b29b      	uxth	r3, r3
 801669c:	031b      	lsls	r3, r3, #12
 801669e:	b29a      	uxth	r2, r3
 80166a0:	79fb      	ldrb	r3, [r7, #7]
 80166a2:	b29b      	uxth	r3, r3
 80166a4:	4313      	orrs	r3, r2
 80166a6:	b29a      	uxth	r2, r3
 80166a8:	693b      	ldr	r3, [r7, #16]
 80166aa:	68dc      	ldr	r4, [r3, #12]
 80166ac:	4610      	mov	r0, r2
 80166ae:	f7fa f86d 	bl	801078c <lwip_htons>
 80166b2:	4603      	mov	r3, r0
 80166b4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80166b6:	693b      	ldr	r3, [r7, #16]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	2200      	movs	r2, #0
 80166bc:	749a      	strb	r2, [r3, #18]
 80166be:	2200      	movs	r2, #0
 80166c0:	74da      	strb	r2, [r3, #19]
  return seg;
 80166c2:	693b      	ldr	r3, [r7, #16]
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	371c      	adds	r7, #28
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd90      	pop	{r4, r7, pc}
 80166cc:	0801da38 	.word	0x0801da38
 80166d0:	0801da6c 	.word	0x0801da6c
 80166d4:	0801da8c 	.word	0x0801da8c
 80166d8:	0801dab4 	.word	0x0801dab4
 80166dc:	0801dad8 	.word	0x0801dad8

080166e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80166e0:	b590      	push	{r4, r7, lr}
 80166e2:	b08b      	sub	sp, #44	@ 0x2c
 80166e4:	af02      	add	r7, sp, #8
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	460b      	mov	r3, r1
 80166ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80166ec:	2300      	movs	r3, #0
 80166ee:	61fb      	str	r3, [r7, #28]
 80166f0:	2300      	movs	r3, #0
 80166f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80166f4:	2300      	movs	r3, #0
 80166f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d106      	bne.n	801670c <tcp_split_unsent_seg+0x2c>
 80166fe:	4b95      	ldr	r3, [pc, #596]	@ (8016954 <tcp_split_unsent_seg+0x274>)
 8016700:	f240 324b 	movw	r2, #843	@ 0x34b
 8016704:	4994      	ldr	r1, [pc, #592]	@ (8016958 <tcp_split_unsent_seg+0x278>)
 8016706:	4895      	ldr	r0, [pc, #596]	@ (801695c <tcp_split_unsent_seg+0x27c>)
 8016708:	f004 fdc4 	bl	801b294 <iprintf>

  useg = pcb->unsent;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016710:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016712:	697b      	ldr	r3, [r7, #20]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d102      	bne.n	801671e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016718:	f04f 33ff 	mov.w	r3, #4294967295
 801671c:	e116      	b.n	801694c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801671e:	887b      	ldrh	r3, [r7, #2]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d109      	bne.n	8016738 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016724:	4b8b      	ldr	r3, [pc, #556]	@ (8016954 <tcp_split_unsent_seg+0x274>)
 8016726:	f240 3253 	movw	r2, #851	@ 0x353
 801672a:	498d      	ldr	r1, [pc, #564]	@ (8016960 <tcp_split_unsent_seg+0x280>)
 801672c:	488b      	ldr	r0, [pc, #556]	@ (801695c <tcp_split_unsent_seg+0x27c>)
 801672e:	f004 fdb1 	bl	801b294 <iprintf>
    return ERR_VAL;
 8016732:	f06f 0305 	mvn.w	r3, #5
 8016736:	e109      	b.n	801694c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	891b      	ldrh	r3, [r3, #8]
 801673c:	887a      	ldrh	r2, [r7, #2]
 801673e:	429a      	cmp	r2, r3
 8016740:	d301      	bcc.n	8016746 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016742:	2300      	movs	r3, #0
 8016744:	e102      	b.n	801694c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801674a:	887a      	ldrh	r2, [r7, #2]
 801674c:	429a      	cmp	r2, r3
 801674e:	d906      	bls.n	801675e <tcp_split_unsent_seg+0x7e>
 8016750:	4b80      	ldr	r3, [pc, #512]	@ (8016954 <tcp_split_unsent_seg+0x274>)
 8016752:	f240 325b 	movw	r2, #859	@ 0x35b
 8016756:	4983      	ldr	r1, [pc, #524]	@ (8016964 <tcp_split_unsent_seg+0x284>)
 8016758:	4880      	ldr	r0, [pc, #512]	@ (801695c <tcp_split_unsent_seg+0x27c>)
 801675a:	f004 fd9b 	bl	801b294 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	891b      	ldrh	r3, [r3, #8]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d106      	bne.n	8016774 <tcp_split_unsent_seg+0x94>
 8016766:	4b7b      	ldr	r3, [pc, #492]	@ (8016954 <tcp_split_unsent_seg+0x274>)
 8016768:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801676c:	497e      	ldr	r1, [pc, #504]	@ (8016968 <tcp_split_unsent_seg+0x288>)
 801676e:	487b      	ldr	r0, [pc, #492]	@ (801695c <tcp_split_unsent_seg+0x27c>)
 8016770:	f004 fd90 	bl	801b294 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016774:	697b      	ldr	r3, [r7, #20]
 8016776:	7a9b      	ldrb	r3, [r3, #10]
 8016778:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801677a:	7bfb      	ldrb	r3, [r7, #15]
 801677c:	009b      	lsls	r3, r3, #2
 801677e:	b2db      	uxtb	r3, r3
 8016780:	f003 0304 	and.w	r3, r3, #4
 8016784:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016786:	697b      	ldr	r3, [r7, #20]
 8016788:	891a      	ldrh	r2, [r3, #8]
 801678a:	887b      	ldrh	r3, [r7, #2]
 801678c:	1ad3      	subs	r3, r2, r3
 801678e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016790:	7bbb      	ldrb	r3, [r7, #14]
 8016792:	b29a      	uxth	r2, r3
 8016794:	89bb      	ldrh	r3, [r7, #12]
 8016796:	4413      	add	r3, r2
 8016798:	b29b      	uxth	r3, r3
 801679a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801679e:	4619      	mov	r1, r3
 80167a0:	2036      	movs	r0, #54	@ 0x36
 80167a2:	f7fb f9bd 	bl	8011b20 <pbuf_alloc>
 80167a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	f000 80b7 	beq.w	801691e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	685b      	ldr	r3, [r3, #4]
 80167b4:	891a      	ldrh	r2, [r3, #8]
 80167b6:	697b      	ldr	r3, [r7, #20]
 80167b8:	891b      	ldrh	r3, [r3, #8]
 80167ba:	1ad3      	subs	r3, r2, r3
 80167bc:	b29a      	uxth	r2, r3
 80167be:	887b      	ldrh	r3, [r7, #2]
 80167c0:	4413      	add	r3, r2
 80167c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	6858      	ldr	r0, [r3, #4]
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	685a      	ldr	r2, [r3, #4]
 80167cc:	7bbb      	ldrb	r3, [r7, #14]
 80167ce:	18d1      	adds	r1, r2, r3
 80167d0:	897b      	ldrh	r3, [r7, #10]
 80167d2:	89ba      	ldrh	r2, [r7, #12]
 80167d4:	f7fb fe92 	bl	80124fc <pbuf_copy_partial>
 80167d8:	4603      	mov	r3, r0
 80167da:	461a      	mov	r2, r3
 80167dc:	89bb      	ldrh	r3, [r7, #12]
 80167de:	4293      	cmp	r3, r2
 80167e0:	f040 809f 	bne.w	8016922 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	68db      	ldr	r3, [r3, #12]
 80167e8:	899b      	ldrh	r3, [r3, #12]
 80167ea:	b29b      	uxth	r3, r3
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7f9 ffcd 	bl	801078c <lwip_htons>
 80167f2:	4603      	mov	r3, r0
 80167f4:	b2db      	uxtb	r3, r3
 80167f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80167fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80167fc:	2300      	movs	r3, #0
 80167fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016800:	7efb      	ldrb	r3, [r7, #27]
 8016802:	f003 0308 	and.w	r3, r3, #8
 8016806:	2b00      	cmp	r3, #0
 8016808:	d007      	beq.n	801681a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801680a:	7efb      	ldrb	r3, [r7, #27]
 801680c:	f023 0308 	bic.w	r3, r3, #8
 8016810:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016812:	7ebb      	ldrb	r3, [r7, #26]
 8016814:	f043 0308 	orr.w	r3, r3, #8
 8016818:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801681a:	7efb      	ldrb	r3, [r7, #27]
 801681c:	f003 0301 	and.w	r3, r3, #1
 8016820:	2b00      	cmp	r3, #0
 8016822:	d007      	beq.n	8016834 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016824:	7efb      	ldrb	r3, [r7, #27]
 8016826:	f023 0301 	bic.w	r3, r3, #1
 801682a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801682c:	7ebb      	ldrb	r3, [r7, #26]
 801682e:	f043 0301 	orr.w	r3, r3, #1
 8016832:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016834:	697b      	ldr	r3, [r7, #20]
 8016836:	68db      	ldr	r3, [r3, #12]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	4618      	mov	r0, r3
 801683c:	f7f9 ffbc 	bl	80107b8 <lwip_htonl>
 8016840:	4602      	mov	r2, r0
 8016842:	887b      	ldrh	r3, [r7, #2]
 8016844:	18d1      	adds	r1, r2, r3
 8016846:	7eba      	ldrb	r2, [r7, #26]
 8016848:	7bfb      	ldrb	r3, [r7, #15]
 801684a:	9300      	str	r3, [sp, #0]
 801684c:	460b      	mov	r3, r1
 801684e:	6939      	ldr	r1, [r7, #16]
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	f7ff fea9 	bl	80165a8 <tcp_create_segment>
 8016856:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016858:	69fb      	ldr	r3, [r7, #28]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d063      	beq.n	8016926 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	685b      	ldr	r3, [r3, #4]
 8016862:	4618      	mov	r0, r3
 8016864:	f7fb fcd2 	bl	801220c <pbuf_clen>
 8016868:	4603      	mov	r3, r0
 801686a:	461a      	mov	r2, r3
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016872:	1a9b      	subs	r3, r3, r2
 8016874:	b29a      	uxth	r2, r3
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801687c:	697b      	ldr	r3, [r7, #20]
 801687e:	6858      	ldr	r0, [r3, #4]
 8016880:	697b      	ldr	r3, [r7, #20]
 8016882:	685b      	ldr	r3, [r3, #4]
 8016884:	891a      	ldrh	r2, [r3, #8]
 8016886:	89bb      	ldrh	r3, [r7, #12]
 8016888:	1ad3      	subs	r3, r2, r3
 801688a:	b29b      	uxth	r3, r3
 801688c:	4619      	mov	r1, r3
 801688e:	f7fb faa9 	bl	8011de4 <pbuf_realloc>
  useg->len -= remainder;
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	891a      	ldrh	r2, [r3, #8]
 8016896:	89bb      	ldrh	r3, [r7, #12]
 8016898:	1ad3      	subs	r3, r2, r3
 801689a:	b29a      	uxth	r2, r3
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	68db      	ldr	r3, [r3, #12]
 80168a4:	899b      	ldrh	r3, [r3, #12]
 80168a6:	b29c      	uxth	r4, r3
 80168a8:	7efb      	ldrb	r3, [r7, #27]
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7f9 ff6d 	bl	801078c <lwip_htons>
 80168b2:	4603      	mov	r3, r0
 80168b4:	461a      	mov	r2, r3
 80168b6:	697b      	ldr	r3, [r7, #20]
 80168b8:	68db      	ldr	r3, [r3, #12]
 80168ba:	4322      	orrs	r2, r4
 80168bc:	b292      	uxth	r2, r2
 80168be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80168c0:	697b      	ldr	r3, [r7, #20]
 80168c2:	685b      	ldr	r3, [r3, #4]
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7fb fca1 	bl	801220c <pbuf_clen>
 80168ca:	4603      	mov	r3, r0
 80168cc:	461a      	mov	r2, r3
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80168d4:	4413      	add	r3, r2
 80168d6:	b29a      	uxth	r2, r3
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80168de:	69fb      	ldr	r3, [r7, #28]
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7fb fc92 	bl	801220c <pbuf_clen>
 80168e8:	4603      	mov	r3, r0
 80168ea:	461a      	mov	r2, r3
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80168f2:	4413      	add	r3, r2
 80168f4:	b29a      	uxth	r2, r3
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	681a      	ldr	r2, [r3, #0]
 8016900:	69fb      	ldr	r3, [r7, #28]
 8016902:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016904:	697b      	ldr	r3, [r7, #20]
 8016906:	69fa      	ldr	r2, [r7, #28]
 8016908:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801690a:	69fb      	ldr	r3, [r7, #28]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d103      	bne.n	801691a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2200      	movs	r2, #0
 8016916:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801691a:	2300      	movs	r3, #0
 801691c:	e016      	b.n	801694c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801691e:	bf00      	nop
 8016920:	e002      	b.n	8016928 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016922:	bf00      	nop
 8016924:	e000      	b.n	8016928 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016926:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016928:	69fb      	ldr	r3, [r7, #28]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d006      	beq.n	801693c <tcp_split_unsent_seg+0x25c>
 801692e:	4b09      	ldr	r3, [pc, #36]	@ (8016954 <tcp_split_unsent_seg+0x274>)
 8016930:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016934:	490d      	ldr	r1, [pc, #52]	@ (801696c <tcp_split_unsent_seg+0x28c>)
 8016936:	4809      	ldr	r0, [pc, #36]	@ (801695c <tcp_split_unsent_seg+0x27c>)
 8016938:	f004 fcac 	bl	801b294 <iprintf>
  if (p != NULL) {
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d002      	beq.n	8016948 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016942:	6938      	ldr	r0, [r7, #16]
 8016944:	f7fb fbd4 	bl	80120f0 <pbuf_free>
  }

  return ERR_MEM;
 8016948:	f04f 33ff 	mov.w	r3, #4294967295
}
 801694c:	4618      	mov	r0, r3
 801694e:	3724      	adds	r7, #36	@ 0x24
 8016950:	46bd      	mov	sp, r7
 8016952:	bd90      	pop	{r4, r7, pc}
 8016954:	0801da38 	.word	0x0801da38
 8016958:	0801ddcc 	.word	0x0801ddcc
 801695c:	0801da8c 	.word	0x0801da8c
 8016960:	0801ddf0 	.word	0x0801ddf0
 8016964:	0801de14 	.word	0x0801de14
 8016968:	0801de24 	.word	0x0801de24
 801696c:	0801de34 	.word	0x0801de34

08016970 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016970:	b590      	push	{r4, r7, lr}
 8016972:	b085      	sub	sp, #20
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d106      	bne.n	801698c <tcp_send_fin+0x1c>
 801697e:	4b21      	ldr	r3, [pc, #132]	@ (8016a04 <tcp_send_fin+0x94>)
 8016980:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016984:	4920      	ldr	r1, [pc, #128]	@ (8016a08 <tcp_send_fin+0x98>)
 8016986:	4821      	ldr	r0, [pc, #132]	@ (8016a0c <tcp_send_fin+0x9c>)
 8016988:	f004 fc84 	bl	801b294 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016990:	2b00      	cmp	r3, #0
 8016992:	d02e      	beq.n	80169f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016998:	60fb      	str	r3, [r7, #12]
 801699a:	e002      	b.n	80169a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d1f8      	bne.n	801699c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	68db      	ldr	r3, [r3, #12]
 80169ae:	899b      	ldrh	r3, [r3, #12]
 80169b0:	b29b      	uxth	r3, r3
 80169b2:	4618      	mov	r0, r3
 80169b4:	f7f9 feea 	bl	801078c <lwip_htons>
 80169b8:	4603      	mov	r3, r0
 80169ba:	b2db      	uxtb	r3, r3
 80169bc:	f003 0307 	and.w	r3, r3, #7
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d116      	bne.n	80169f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	68db      	ldr	r3, [r3, #12]
 80169c8:	899b      	ldrh	r3, [r3, #12]
 80169ca:	b29c      	uxth	r4, r3
 80169cc:	2001      	movs	r0, #1
 80169ce:	f7f9 fedd 	bl	801078c <lwip_htons>
 80169d2:	4603      	mov	r3, r0
 80169d4:	461a      	mov	r2, r3
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	68db      	ldr	r3, [r3, #12]
 80169da:	4322      	orrs	r2, r4
 80169dc:	b292      	uxth	r2, r2
 80169de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	8b5b      	ldrh	r3, [r3, #26]
 80169e4:	f043 0320 	orr.w	r3, r3, #32
 80169e8:	b29a      	uxth	r2, r3
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80169ee:	2300      	movs	r3, #0
 80169f0:	e004      	b.n	80169fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80169f2:	2101      	movs	r1, #1
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f000 f80b 	bl	8016a10 <tcp_enqueue_flags>
 80169fa:	4603      	mov	r3, r0
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	3714      	adds	r7, #20
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd90      	pop	{r4, r7, pc}
 8016a04:	0801da38 	.word	0x0801da38
 8016a08:	0801de40 	.word	0x0801de40
 8016a0c:	0801da8c 	.word	0x0801da8c

08016a10 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b08a      	sub	sp, #40	@ 0x28
 8016a14:	af02      	add	r7, sp, #8
 8016a16:	6078      	str	r0, [r7, #4]
 8016a18:	460b      	mov	r3, r1
 8016a1a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016a20:	2300      	movs	r3, #0
 8016a22:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016a24:	78fb      	ldrb	r3, [r7, #3]
 8016a26:	f003 0303 	and.w	r3, r3, #3
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d106      	bne.n	8016a3c <tcp_enqueue_flags+0x2c>
 8016a2e:	4b67      	ldr	r3, [pc, #412]	@ (8016bcc <tcp_enqueue_flags+0x1bc>)
 8016a30:	f240 4211 	movw	r2, #1041	@ 0x411
 8016a34:	4966      	ldr	r1, [pc, #408]	@ (8016bd0 <tcp_enqueue_flags+0x1c0>)
 8016a36:	4867      	ldr	r0, [pc, #412]	@ (8016bd4 <tcp_enqueue_flags+0x1c4>)
 8016a38:	f004 fc2c 	bl	801b294 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d106      	bne.n	8016a50 <tcp_enqueue_flags+0x40>
 8016a42:	4b62      	ldr	r3, [pc, #392]	@ (8016bcc <tcp_enqueue_flags+0x1bc>)
 8016a44:	f240 4213 	movw	r2, #1043	@ 0x413
 8016a48:	4963      	ldr	r1, [pc, #396]	@ (8016bd8 <tcp_enqueue_flags+0x1c8>)
 8016a4a:	4862      	ldr	r0, [pc, #392]	@ (8016bd4 <tcp_enqueue_flags+0x1c4>)
 8016a4c:	f004 fc22 	bl	801b294 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016a50:	78fb      	ldrb	r3, [r7, #3]
 8016a52:	f003 0302 	and.w	r3, r3, #2
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d001      	beq.n	8016a5e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016a5e:	7ffb      	ldrb	r3, [r7, #31]
 8016a60:	009b      	lsls	r3, r3, #2
 8016a62:	b2db      	uxtb	r3, r3
 8016a64:	f003 0304 	and.w	r3, r3, #4
 8016a68:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016a6a:	7dfb      	ldrb	r3, [r7, #23]
 8016a6c:	b29b      	uxth	r3, r3
 8016a6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016a72:	4619      	mov	r1, r3
 8016a74:	2036      	movs	r0, #54	@ 0x36
 8016a76:	f7fb f853 	bl	8011b20 <pbuf_alloc>
 8016a7a:	6138      	str	r0, [r7, #16]
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d109      	bne.n	8016a96 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	8b5b      	ldrh	r3, [r3, #26]
 8016a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a8a:	b29a      	uxth	r2, r3
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016a90:	f04f 33ff 	mov.w	r3, #4294967295
 8016a94:	e095      	b.n	8016bc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016a96:	693b      	ldr	r3, [r7, #16]
 8016a98:	895a      	ldrh	r2, [r3, #10]
 8016a9a:	7dfb      	ldrb	r3, [r7, #23]
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d206      	bcs.n	8016ab0 <tcp_enqueue_flags+0xa0>
 8016aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8016bcc <tcp_enqueue_flags+0x1bc>)
 8016aa4:	f240 4239 	movw	r2, #1081	@ 0x439
 8016aa8:	494c      	ldr	r1, [pc, #304]	@ (8016bdc <tcp_enqueue_flags+0x1cc>)
 8016aaa:	484a      	ldr	r0, [pc, #296]	@ (8016bd4 <tcp_enqueue_flags+0x1c4>)
 8016aac:	f004 fbf2 	bl	801b294 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016ab4:	78fa      	ldrb	r2, [r7, #3]
 8016ab6:	7ffb      	ldrb	r3, [r7, #31]
 8016ab8:	9300      	str	r3, [sp, #0]
 8016aba:	460b      	mov	r3, r1
 8016abc:	6939      	ldr	r1, [r7, #16]
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f7ff fd72 	bl	80165a8 <tcp_create_segment>
 8016ac4:	60f8      	str	r0, [r7, #12]
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d109      	bne.n	8016ae0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	8b5b      	ldrh	r3, [r3, #26]
 8016ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016ad4:	b29a      	uxth	r2, r3
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016ada:	f04f 33ff 	mov.w	r3, #4294967295
 8016ade:	e070      	b.n	8016bc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	68db      	ldr	r3, [r3, #12]
 8016ae4:	f003 0303 	and.w	r3, r3, #3
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d006      	beq.n	8016afa <tcp_enqueue_flags+0xea>
 8016aec:	4b37      	ldr	r3, [pc, #220]	@ (8016bcc <tcp_enqueue_flags+0x1bc>)
 8016aee:	f240 4242 	movw	r2, #1090	@ 0x442
 8016af2:	493b      	ldr	r1, [pc, #236]	@ (8016be0 <tcp_enqueue_flags+0x1d0>)
 8016af4:	4837      	ldr	r0, [pc, #220]	@ (8016bd4 <tcp_enqueue_flags+0x1c4>)
 8016af6:	f004 fbcd 	bl	801b294 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	891b      	ldrh	r3, [r3, #8]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d006      	beq.n	8016b10 <tcp_enqueue_flags+0x100>
 8016b02:	4b32      	ldr	r3, [pc, #200]	@ (8016bcc <tcp_enqueue_flags+0x1bc>)
 8016b04:	f240 4243 	movw	r2, #1091	@ 0x443
 8016b08:	4936      	ldr	r1, [pc, #216]	@ (8016be4 <tcp_enqueue_flags+0x1d4>)
 8016b0a:	4832      	ldr	r0, [pc, #200]	@ (8016bd4 <tcp_enqueue_flags+0x1c4>)
 8016b0c:	f004 fbc2 	bl	801b294 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d103      	bne.n	8016b20 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	68fa      	ldr	r2, [r7, #12]
 8016b1c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016b1e:	e00d      	b.n	8016b3c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b24:	61bb      	str	r3, [r7, #24]
 8016b26:	e002      	b.n	8016b2e <tcp_enqueue_flags+0x11e>
 8016b28:	69bb      	ldr	r3, [r7, #24]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	61bb      	str	r3, [r7, #24]
 8016b2e:	69bb      	ldr	r3, [r7, #24]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d1f8      	bne.n	8016b28 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016b36:	69bb      	ldr	r3, [r7, #24]
 8016b38:	68fa      	ldr	r2, [r7, #12]
 8016b3a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2200      	movs	r2, #0
 8016b40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016b44:	78fb      	ldrb	r3, [r7, #3]
 8016b46:	f003 0302 	and.w	r3, r3, #2
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d104      	bne.n	8016b58 <tcp_enqueue_flags+0x148>
 8016b4e:	78fb      	ldrb	r3, [r7, #3]
 8016b50:	f003 0301 	and.w	r3, r3, #1
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d004      	beq.n	8016b62 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016b5c:	1c5a      	adds	r2, r3, #1
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016b62:	78fb      	ldrb	r3, [r7, #3]
 8016b64:	f003 0301 	and.w	r3, r3, #1
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d006      	beq.n	8016b7a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	8b5b      	ldrh	r3, [r3, #26]
 8016b70:	f043 0320 	orr.w	r3, r3, #32
 8016b74:	b29a      	uxth	r2, r3
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	685b      	ldr	r3, [r3, #4]
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f7fb fb44 	bl	801220c <pbuf_clen>
 8016b84:	4603      	mov	r3, r0
 8016b86:	461a      	mov	r2, r3
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b8e:	4413      	add	r3, r2
 8016b90:	b29a      	uxth	r2, r3
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d00e      	beq.n	8016bc0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d10a      	bne.n	8016bc0 <tcp_enqueue_flags+0x1b0>
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d106      	bne.n	8016bc0 <tcp_enqueue_flags+0x1b0>
 8016bb2:	4b06      	ldr	r3, [pc, #24]	@ (8016bcc <tcp_enqueue_flags+0x1bc>)
 8016bb4:	f240 4265 	movw	r2, #1125	@ 0x465
 8016bb8:	490b      	ldr	r1, [pc, #44]	@ (8016be8 <tcp_enqueue_flags+0x1d8>)
 8016bba:	4806      	ldr	r0, [pc, #24]	@ (8016bd4 <tcp_enqueue_flags+0x1c4>)
 8016bbc:	f004 fb6a 	bl	801b294 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016bc0:	2300      	movs	r3, #0
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3720      	adds	r7, #32
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
 8016bca:	bf00      	nop
 8016bcc:	0801da38 	.word	0x0801da38
 8016bd0:	0801de5c 	.word	0x0801de5c
 8016bd4:	0801da8c 	.word	0x0801da8c
 8016bd8:	0801deb4 	.word	0x0801deb4
 8016bdc:	0801ded4 	.word	0x0801ded4
 8016be0:	0801df10 	.word	0x0801df10
 8016be4:	0801df28 	.word	0x0801df28
 8016be8:	0801df54 	.word	0x0801df54

08016bec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016bec:	b5b0      	push	{r4, r5, r7, lr}
 8016bee:	b08a      	sub	sp, #40	@ 0x28
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d106      	bne.n	8016c08 <tcp_output+0x1c>
 8016bfa:	4b8a      	ldr	r3, [pc, #552]	@ (8016e24 <tcp_output+0x238>)
 8016bfc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016c00:	4989      	ldr	r1, [pc, #548]	@ (8016e28 <tcp_output+0x23c>)
 8016c02:	488a      	ldr	r0, [pc, #552]	@ (8016e2c <tcp_output+0x240>)
 8016c04:	f004 fb46 	bl	801b294 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	7d1b      	ldrb	r3, [r3, #20]
 8016c0c:	2b01      	cmp	r3, #1
 8016c0e:	d106      	bne.n	8016c1e <tcp_output+0x32>
 8016c10:	4b84      	ldr	r3, [pc, #528]	@ (8016e24 <tcp_output+0x238>)
 8016c12:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016c16:	4986      	ldr	r1, [pc, #536]	@ (8016e30 <tcp_output+0x244>)
 8016c18:	4884      	ldr	r0, [pc, #528]	@ (8016e2c <tcp_output+0x240>)
 8016c1a:	f004 fb3b 	bl	801b294 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016c1e:	4b85      	ldr	r3, [pc, #532]	@ (8016e34 <tcp_output+0x248>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	687a      	ldr	r2, [r7, #4]
 8016c24:	429a      	cmp	r2, r3
 8016c26:	d101      	bne.n	8016c2c <tcp_output+0x40>
    return ERR_OK;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	e1ce      	b.n	8016fca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016c38:	4293      	cmp	r3, r2
 8016c3a:	bf28      	it	cs
 8016c3c:	4613      	movcs	r3, r2
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8016c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d10b      	bne.n	8016c66 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	8b5b      	ldrh	r3, [r3, #26]
 8016c52:	f003 0302 	and.w	r3, r3, #2
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	f000 81aa 	beq.w	8016fb0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f000 fdcb 	bl	80177f8 <tcp_send_empty_ack>
 8016c62:	4603      	mov	r3, r0
 8016c64:	e1b1      	b.n	8016fca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016c66:	6879      	ldr	r1, [r7, #4]
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	3304      	adds	r3, #4
 8016c6c:	461a      	mov	r2, r3
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f7ff fc7e 	bl	8016570 <tcp_route>
 8016c74:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016c76:	697b      	ldr	r3, [r7, #20]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d102      	bne.n	8016c82 <tcp_output+0x96>
    return ERR_RTE;
 8016c7c:	f06f 0303 	mvn.w	r3, #3
 8016c80:	e1a3      	b.n	8016fca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d003      	beq.n	8016c90 <tcp_output+0xa4>
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d111      	bne.n	8016cb4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d002      	beq.n	8016c9c <tcp_output+0xb0>
 8016c96:	697b      	ldr	r3, [r7, #20]
 8016c98:	3304      	adds	r3, #4
 8016c9a:	e000      	b.n	8016c9e <tcp_output+0xb2>
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d102      	bne.n	8016cac <tcp_output+0xc0>
      return ERR_RTE;
 8016ca6:	f06f 0303 	mvn.w	r3, #3
 8016caa:	e18e      	b.n	8016fca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016cac:	693b      	ldr	r3, [r7, #16]
 8016cae:	681a      	ldr	r2, [r3, #0]
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cb6:	68db      	ldr	r3, [r3, #12]
 8016cb8:	685b      	ldr	r3, [r3, #4]
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7f9 fd7c 	bl	80107b8 <lwip_htonl>
 8016cc0:	4602      	mov	r2, r0
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016cc6:	1ad3      	subs	r3, r2, r3
 8016cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016cca:	8912      	ldrh	r2, [r2, #8]
 8016ccc:	4413      	add	r3, r2
 8016cce:	69ba      	ldr	r2, [r7, #24]
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d227      	bcs.n	8016d24 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016cda:	461a      	mov	r2, r3
 8016cdc:	69bb      	ldr	r3, [r7, #24]
 8016cde:	4293      	cmp	r3, r2
 8016ce0:	d114      	bne.n	8016d0c <tcp_output+0x120>
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d110      	bne.n	8016d0c <tcp_output+0x120>
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d10b      	bne.n	8016d0c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	2201      	movs	r2, #1
 8016d00:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2200      	movs	r2, #0
 8016d08:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	8b5b      	ldrh	r3, [r3, #26]
 8016d10:	f003 0302 	and.w	r3, r3, #2
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	f000 814d 	beq.w	8016fb4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016d1a:	6878      	ldr	r0, [r7, #4]
 8016d1c:	f000 fd6c 	bl	80177f8 <tcp_send_empty_ack>
 8016d20:	4603      	mov	r3, r0
 8016d22:	e152      	b.n	8016fca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2200      	movs	r2, #0
 8016d28:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d30:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016d32:	6a3b      	ldr	r3, [r7, #32]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	f000 811c 	beq.w	8016f72 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016d3a:	e002      	b.n	8016d42 <tcp_output+0x156>
 8016d3c:	6a3b      	ldr	r3, [r7, #32]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	623b      	str	r3, [r7, #32]
 8016d42:	6a3b      	ldr	r3, [r7, #32]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d1f8      	bne.n	8016d3c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016d4a:	e112      	b.n	8016f72 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d4e:	68db      	ldr	r3, [r3, #12]
 8016d50:	899b      	ldrh	r3, [r3, #12]
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7f9 fd19 	bl	801078c <lwip_htons>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	b2db      	uxtb	r3, r3
 8016d5e:	f003 0304 	and.w	r3, r3, #4
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d006      	beq.n	8016d74 <tcp_output+0x188>
 8016d66:	4b2f      	ldr	r3, [pc, #188]	@ (8016e24 <tcp_output+0x238>)
 8016d68:	f240 5236 	movw	r2, #1334	@ 0x536
 8016d6c:	4932      	ldr	r1, [pc, #200]	@ (8016e38 <tcp_output+0x24c>)
 8016d6e:	482f      	ldr	r0, [pc, #188]	@ (8016e2c <tcp_output+0x240>)
 8016d70:	f004 fa90 	bl	801b294 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d01f      	beq.n	8016dbc <tcp_output+0x1d0>
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	8b5b      	ldrh	r3, [r3, #26]
 8016d80:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d119      	bne.n	8016dbc <tcp_output+0x1d0>
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d00b      	beq.n	8016da8 <tcp_output+0x1bc>
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d110      	bne.n	8016dbc <tcp_output+0x1d0>
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d9e:	891a      	ldrh	r2, [r3, #8]
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d209      	bcs.n	8016dbc <tcp_output+0x1d0>
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d004      	beq.n	8016dbc <tcp_output+0x1d0>
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016db8:	2b0f      	cmp	r3, #15
 8016dba:	d901      	bls.n	8016dc0 <tcp_output+0x1d4>
 8016dbc:	2301      	movs	r3, #1
 8016dbe:	e000      	b.n	8016dc2 <tcp_output+0x1d6>
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d106      	bne.n	8016dd4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	8b5b      	ldrh	r3, [r3, #26]
 8016dca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	f000 80e4 	beq.w	8016f9c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	7d1b      	ldrb	r3, [r3, #20]
 8016dd8:	2b02      	cmp	r3, #2
 8016dda:	d00d      	beq.n	8016df8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dde:	68db      	ldr	r3, [r3, #12]
 8016de0:	899b      	ldrh	r3, [r3, #12]
 8016de2:	b29c      	uxth	r4, r3
 8016de4:	2010      	movs	r0, #16
 8016de6:	f7f9 fcd1 	bl	801078c <lwip_htons>
 8016dea:	4603      	mov	r3, r0
 8016dec:	461a      	mov	r2, r3
 8016dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df0:	68db      	ldr	r3, [r3, #12]
 8016df2:	4322      	orrs	r2, r4
 8016df4:	b292      	uxth	r2, r2
 8016df6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016df8:	697a      	ldr	r2, [r7, #20]
 8016dfa:	6879      	ldr	r1, [r7, #4]
 8016dfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016dfe:	f000 f909 	bl	8017014 <tcp_output_segment>
 8016e02:	4603      	mov	r3, r0
 8016e04:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d016      	beq.n	8016e3c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	8b5b      	ldrh	r3, [r3, #26]
 8016e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e16:	b29a      	uxth	r2, r3
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	835a      	strh	r2, [r3, #26]
      return err;
 8016e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e20:	e0d3      	b.n	8016fca <tcp_output+0x3de>
 8016e22:	bf00      	nop
 8016e24:	0801da38 	.word	0x0801da38
 8016e28:	0801df7c 	.word	0x0801df7c
 8016e2c:	0801da8c 	.word	0x0801da8c
 8016e30:	0801df94 	.word	0x0801df94
 8016e34:	24014c00 	.word	0x24014c00
 8016e38:	0801dfbc 	.word	0x0801dfbc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e3e:	681a      	ldr	r2, [r3, #0]
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	7d1b      	ldrb	r3, [r3, #20]
 8016e48:	2b02      	cmp	r3, #2
 8016e4a:	d006      	beq.n	8016e5a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	8b5b      	ldrh	r3, [r3, #26]
 8016e50:	f023 0303 	bic.w	r3, r3, #3
 8016e54:	b29a      	uxth	r2, r3
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e5c:	68db      	ldr	r3, [r3, #12]
 8016e5e:	685b      	ldr	r3, [r3, #4]
 8016e60:	4618      	mov	r0, r3
 8016e62:	f7f9 fca9 	bl	80107b8 <lwip_htonl>
 8016e66:	4604      	mov	r4, r0
 8016e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e6a:	891b      	ldrh	r3, [r3, #8]
 8016e6c:	461d      	mov	r5, r3
 8016e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e70:	68db      	ldr	r3, [r3, #12]
 8016e72:	899b      	ldrh	r3, [r3, #12]
 8016e74:	b29b      	uxth	r3, r3
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7f9 fc88 	bl	801078c <lwip_htons>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	b2db      	uxtb	r3, r3
 8016e80:	f003 0303 	and.w	r3, r3, #3
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d001      	beq.n	8016e8c <tcp_output+0x2a0>
 8016e88:	2301      	movs	r3, #1
 8016e8a:	e000      	b.n	8016e8e <tcp_output+0x2a2>
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	442b      	add	r3, r5
 8016e90:	4423      	add	r3, r4
 8016e92:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016e98:	68bb      	ldr	r3, [r7, #8]
 8016e9a:	1ad3      	subs	r3, r2, r3
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	da02      	bge.n	8016ea6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	68ba      	ldr	r2, [r7, #8]
 8016ea4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ea8:	891b      	ldrh	r3, [r3, #8]
 8016eaa:	461c      	mov	r4, r3
 8016eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eae:	68db      	ldr	r3, [r3, #12]
 8016eb0:	899b      	ldrh	r3, [r3, #12]
 8016eb2:	b29b      	uxth	r3, r3
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f7f9 fc69 	bl	801078c <lwip_htons>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	f003 0303 	and.w	r3, r3, #3
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d001      	beq.n	8016eca <tcp_output+0x2de>
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	e000      	b.n	8016ecc <tcp_output+0x2e0>
 8016eca:	2300      	movs	r3, #0
 8016ecc:	4423      	add	r3, r4
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d049      	beq.n	8016f66 <tcp_output+0x37a>
      seg->next = NULL;
 8016ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d105      	bne.n	8016eec <tcp_output+0x300>
        pcb->unacked = seg;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ee4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ee8:	623b      	str	r3, [r7, #32]
 8016eea:	e03f      	b.n	8016f6c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eee:	68db      	ldr	r3, [r3, #12]
 8016ef0:	685b      	ldr	r3, [r3, #4]
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f7f9 fc60 	bl	80107b8 <lwip_htonl>
 8016ef8:	4604      	mov	r4, r0
 8016efa:	6a3b      	ldr	r3, [r7, #32]
 8016efc:	68db      	ldr	r3, [r3, #12]
 8016efe:	685b      	ldr	r3, [r3, #4]
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7f9 fc59 	bl	80107b8 <lwip_htonl>
 8016f06:	4603      	mov	r3, r0
 8016f08:	1ae3      	subs	r3, r4, r3
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	da24      	bge.n	8016f58 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	3370      	adds	r3, #112	@ 0x70
 8016f12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f14:	e002      	b.n	8016f1c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016f16:	69fb      	ldr	r3, [r7, #28]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f1c:	69fb      	ldr	r3, [r7, #28]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d011      	beq.n	8016f48 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	68db      	ldr	r3, [r3, #12]
 8016f2a:	685b      	ldr	r3, [r3, #4]
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f7f9 fc43 	bl	80107b8 <lwip_htonl>
 8016f32:	4604      	mov	r4, r0
 8016f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f36:	68db      	ldr	r3, [r3, #12]
 8016f38:	685b      	ldr	r3, [r3, #4]
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f7f9 fc3c 	bl	80107b8 <lwip_htonl>
 8016f40:	4603      	mov	r3, r0
 8016f42:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	dbe6      	blt.n	8016f16 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016f48:	69fb      	ldr	r3, [r7, #28]
 8016f4a:	681a      	ldr	r2, [r3, #0]
 8016f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f4e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016f50:	69fb      	ldr	r3, [r7, #28]
 8016f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f54:	601a      	str	r2, [r3, #0]
 8016f56:	e009      	b.n	8016f6c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016f58:	6a3b      	ldr	r3, [r7, #32]
 8016f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f5c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016f5e:	6a3b      	ldr	r3, [r7, #32]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	623b      	str	r3, [r7, #32]
 8016f64:	e002      	b.n	8016f6c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016f66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016f68:	f7fc fc43 	bl	80137f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f70:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8016f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d012      	beq.n	8016f9e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f7a:	68db      	ldr	r3, [r3, #12]
 8016f7c:	685b      	ldr	r3, [r3, #4]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7f9 fc1a 	bl	80107b8 <lwip_htonl>
 8016f84:	4602      	mov	r2, r0
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f8a:	1ad3      	subs	r3, r2, r3
 8016f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f8e:	8912      	ldrh	r2, [r2, #8]
 8016f90:	4413      	add	r3, r2
  while (seg != NULL &&
 8016f92:	69ba      	ldr	r2, [r7, #24]
 8016f94:	429a      	cmp	r2, r3
 8016f96:	f4bf aed9 	bcs.w	8016d4c <tcp_output+0x160>
 8016f9a:	e000      	b.n	8016f9e <tcp_output+0x3b2>
      break;
 8016f9c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d108      	bne.n	8016fb8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2200      	movs	r2, #0
 8016faa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8016fae:	e004      	b.n	8016fba <tcp_output+0x3ce>
    goto output_done;
 8016fb0:	bf00      	nop
 8016fb2:	e002      	b.n	8016fba <tcp_output+0x3ce>
    goto output_done;
 8016fb4:	bf00      	nop
 8016fb6:	e000      	b.n	8016fba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016fb8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	8b5b      	ldrh	r3, [r3, #26]
 8016fbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016fc2:	b29a      	uxth	r2, r3
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016fc8:	2300      	movs	r3, #0
}
 8016fca:	4618      	mov	r0, r3
 8016fcc:	3728      	adds	r7, #40	@ 0x28
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8016fd2:	bf00      	nop

08016fd4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d106      	bne.n	8016ff0 <tcp_output_segment_busy+0x1c>
 8016fe2:	4b09      	ldr	r3, [pc, #36]	@ (8017008 <tcp_output_segment_busy+0x34>)
 8016fe4:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016fe8:	4908      	ldr	r1, [pc, #32]	@ (801700c <tcp_output_segment_busy+0x38>)
 8016fea:	4809      	ldr	r0, [pc, #36]	@ (8017010 <tcp_output_segment_busy+0x3c>)
 8016fec:	f004 f952 	bl	801b294 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	685b      	ldr	r3, [r3, #4]
 8016ff4:	7b9b      	ldrb	r3, [r3, #14]
 8016ff6:	2b01      	cmp	r3, #1
 8016ff8:	d001      	beq.n	8016ffe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016ffa:	2301      	movs	r3, #1
 8016ffc:	e000      	b.n	8017000 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016ffe:	2300      	movs	r3, #0
}
 8017000:	4618      	mov	r0, r3
 8017002:	3708      	adds	r7, #8
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}
 8017008:	0801da38 	.word	0x0801da38
 801700c:	0801dfd4 	.word	0x0801dfd4
 8017010:	0801da8c 	.word	0x0801da8c

08017014 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017014:	b5b0      	push	{r4, r5, r7, lr}
 8017016:	b08c      	sub	sp, #48	@ 0x30
 8017018:	af04      	add	r7, sp, #16
 801701a:	60f8      	str	r0, [r7, #12]
 801701c:	60b9      	str	r1, [r7, #8]
 801701e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d106      	bne.n	8017034 <tcp_output_segment+0x20>
 8017026:	4b64      	ldr	r3, [pc, #400]	@ (80171b8 <tcp_output_segment+0x1a4>)
 8017028:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801702c:	4963      	ldr	r1, [pc, #396]	@ (80171bc <tcp_output_segment+0x1a8>)
 801702e:	4864      	ldr	r0, [pc, #400]	@ (80171c0 <tcp_output_segment+0x1ac>)
 8017030:	f004 f930 	bl	801b294 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d106      	bne.n	8017048 <tcp_output_segment+0x34>
 801703a:	4b5f      	ldr	r3, [pc, #380]	@ (80171b8 <tcp_output_segment+0x1a4>)
 801703c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8017040:	4960      	ldr	r1, [pc, #384]	@ (80171c4 <tcp_output_segment+0x1b0>)
 8017042:	485f      	ldr	r0, [pc, #380]	@ (80171c0 <tcp_output_segment+0x1ac>)
 8017044:	f004 f926 	bl	801b294 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d106      	bne.n	801705c <tcp_output_segment+0x48>
 801704e:	4b5a      	ldr	r3, [pc, #360]	@ (80171b8 <tcp_output_segment+0x1a4>)
 8017050:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8017054:	495c      	ldr	r1, [pc, #368]	@ (80171c8 <tcp_output_segment+0x1b4>)
 8017056:	485a      	ldr	r0, [pc, #360]	@ (80171c0 <tcp_output_segment+0x1ac>)
 8017058:	f004 f91c 	bl	801b294 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801705c:	68f8      	ldr	r0, [r7, #12]
 801705e:	f7ff ffb9 	bl	8016fd4 <tcp_output_segment_busy>
 8017062:	4603      	mov	r3, r0
 8017064:	2b00      	cmp	r3, #0
 8017066:	d001      	beq.n	801706c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017068:	2300      	movs	r3, #0
 801706a:	e0a1      	b.n	80171b0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	68dc      	ldr	r4, [r3, #12]
 8017074:	4610      	mov	r0, r2
 8017076:	f7f9 fb9f 	bl	80107b8 <lwip_htonl>
 801707a:	4603      	mov	r3, r0
 801707c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	68dc      	ldr	r4, [r3, #12]
 8017086:	4610      	mov	r0, r2
 8017088:	f7f9 fb80 	bl	801078c <lwip_htons>
 801708c:	4603      	mov	r3, r0
 801708e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017094:	68ba      	ldr	r2, [r7, #8]
 8017096:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017098:	441a      	add	r2, r3
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	68db      	ldr	r3, [r3, #12]
 80170a2:	3314      	adds	r3, #20
 80170a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	7a9b      	ldrb	r3, [r3, #10]
 80170aa:	f003 0301 	and.w	r3, r3, #1
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d015      	beq.n	80170de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80170b2:	68bb      	ldr	r3, [r7, #8]
 80170b4:	3304      	adds	r3, #4
 80170b6:	461a      	mov	r2, r3
 80170b8:	6879      	ldr	r1, [r7, #4]
 80170ba:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80170be:	f7fc fe8f 	bl	8013de0 <tcp_eff_send_mss_netif>
 80170c2:	4603      	mov	r3, r0
 80170c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80170c6:	8b7b      	ldrh	r3, [r7, #26]
 80170c8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80170cc:	4618      	mov	r0, r3
 80170ce:	f7f9 fb73 	bl	80107b8 <lwip_htonl>
 80170d2:	4602      	mov	r2, r0
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80170d8:	69fb      	ldr	r3, [r7, #28]
 80170da:	3304      	adds	r3, #4
 80170dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	da02      	bge.n	80170ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	2200      	movs	r2, #0
 80170ec:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d10c      	bne.n	8017110 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80170f6:	4b35      	ldr	r3, [pc, #212]	@ (80171cc <tcp_output_segment+0x1b8>)
 80170f8:	681a      	ldr	r2, [r3, #0]
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	68db      	ldr	r3, [r3, #12]
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	4618      	mov	r0, r3
 8017106:	f7f9 fb57 	bl	80107b8 <lwip_htonl>
 801710a:	4602      	mov	r2, r0
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	68da      	ldr	r2, [r3, #12]
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	685b      	ldr	r3, [r3, #4]
 8017118:	685b      	ldr	r3, [r3, #4]
 801711a:	1ad3      	subs	r3, r2, r3
 801711c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	685b      	ldr	r3, [r3, #4]
 8017122:	8959      	ldrh	r1, [r3, #10]
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	685b      	ldr	r3, [r3, #4]
 8017128:	8b3a      	ldrh	r2, [r7, #24]
 801712a:	1a8a      	subs	r2, r1, r2
 801712c:	b292      	uxth	r2, r2
 801712e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	8919      	ldrh	r1, [r3, #8]
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	685b      	ldr	r3, [r3, #4]
 801713a:	8b3a      	ldrh	r2, [r7, #24]
 801713c:	1a8a      	subs	r2, r1, r2
 801713e:	b292      	uxth	r2, r2
 8017140:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	68fa      	ldr	r2, [r7, #12]
 8017148:	68d2      	ldr	r2, [r2, #12]
 801714a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	68db      	ldr	r3, [r3, #12]
 8017150:	2200      	movs	r2, #0
 8017152:	741a      	strb	r2, [r3, #16]
 8017154:	2200      	movs	r2, #0
 8017156:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	68da      	ldr	r2, [r3, #12]
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	7a9b      	ldrb	r3, [r3, #10]
 8017160:	f003 0301 	and.w	r3, r3, #1
 8017164:	2b00      	cmp	r3, #0
 8017166:	d001      	beq.n	801716c <tcp_output_segment+0x158>
 8017168:	2318      	movs	r3, #24
 801716a:	e000      	b.n	801716e <tcp_output_segment+0x15a>
 801716c:	2314      	movs	r3, #20
 801716e:	4413      	add	r3, r2
 8017170:	69fa      	ldr	r2, [r7, #28]
 8017172:	429a      	cmp	r2, r3
 8017174:	d006      	beq.n	8017184 <tcp_output_segment+0x170>
 8017176:	4b10      	ldr	r3, [pc, #64]	@ (80171b8 <tcp_output_segment+0x1a4>)
 8017178:	f240 621c 	movw	r2, #1564	@ 0x61c
 801717c:	4914      	ldr	r1, [pc, #80]	@ (80171d0 <tcp_output_segment+0x1bc>)
 801717e:	4810      	ldr	r0, [pc, #64]	@ (80171c0 <tcp_output_segment+0x1ac>)
 8017180:	f004 f888 	bl	801b294 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	6858      	ldr	r0, [r3, #4]
 8017188:	68b9      	ldr	r1, [r7, #8]
 801718a:	68bb      	ldr	r3, [r7, #8]
 801718c:	1d1c      	adds	r4, r3, #4
 801718e:	68bb      	ldr	r3, [r7, #8]
 8017190:	7add      	ldrb	r5, [r3, #11]
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	7a9b      	ldrb	r3, [r3, #10]
 8017196:	687a      	ldr	r2, [r7, #4]
 8017198:	9202      	str	r2, [sp, #8]
 801719a:	2206      	movs	r2, #6
 801719c:	9201      	str	r2, [sp, #4]
 801719e:	9300      	str	r3, [sp, #0]
 80171a0:	462b      	mov	r3, r5
 80171a2:	4622      	mov	r2, r4
 80171a4:	f002 fdc6 	bl	8019d34 <ip4_output_if>
 80171a8:	4603      	mov	r3, r0
 80171aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80171ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80171b0:	4618      	mov	r0, r3
 80171b2:	3720      	adds	r7, #32
 80171b4:	46bd      	mov	sp, r7
 80171b6:	bdb0      	pop	{r4, r5, r7, pc}
 80171b8:	0801da38 	.word	0x0801da38
 80171bc:	0801dffc 	.word	0x0801dffc
 80171c0:	0801da8c 	.word	0x0801da8c
 80171c4:	0801e01c 	.word	0x0801e01c
 80171c8:	0801e03c 	.word	0x0801e03c
 80171cc:	24014bb4 	.word	0x24014bb4
 80171d0:	0801e060 	.word	0x0801e060

080171d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80171d4:	b5b0      	push	{r4, r5, r7, lr}
 80171d6:	b084      	sub	sp, #16
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d106      	bne.n	80171f0 <tcp_rexmit_rto_prepare+0x1c>
 80171e2:	4b31      	ldr	r3, [pc, #196]	@ (80172a8 <tcp_rexmit_rto_prepare+0xd4>)
 80171e4:	f240 6263 	movw	r2, #1635	@ 0x663
 80171e8:	4930      	ldr	r1, [pc, #192]	@ (80172ac <tcp_rexmit_rto_prepare+0xd8>)
 80171ea:	4831      	ldr	r0, [pc, #196]	@ (80172b0 <tcp_rexmit_rto_prepare+0xdc>)
 80171ec:	f004 f852 	bl	801b294 <iprintf>

  if (pcb->unacked == NULL) {
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d102      	bne.n	80171fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80171f8:	f06f 0305 	mvn.w	r3, #5
 80171fc:	e050      	b.n	80172a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017202:	60fb      	str	r3, [r7, #12]
 8017204:	e00b      	b.n	801721e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017206:	68f8      	ldr	r0, [r7, #12]
 8017208:	f7ff fee4 	bl	8016fd4 <tcp_output_segment_busy>
 801720c:	4603      	mov	r3, r0
 801720e:	2b00      	cmp	r3, #0
 8017210:	d002      	beq.n	8017218 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017212:	f06f 0305 	mvn.w	r3, #5
 8017216:	e043      	b.n	80172a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	60fb      	str	r3, [r7, #12]
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d1ef      	bne.n	8017206 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017226:	68f8      	ldr	r0, [r7, #12]
 8017228:	f7ff fed4 	bl	8016fd4 <tcp_output_segment_busy>
 801722c:	4603      	mov	r3, r0
 801722e:	2b00      	cmp	r3, #0
 8017230:	d002      	beq.n	8017238 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017232:	f06f 0305 	mvn.w	r3, #5
 8017236:	e033      	b.n	80172a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2200      	movs	r2, #0
 801724c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	8b5b      	ldrh	r3, [r3, #26]
 8017252:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8017256:	b29a      	uxth	r2, r3
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	68db      	ldr	r3, [r3, #12]
 8017260:	685b      	ldr	r3, [r3, #4]
 8017262:	4618      	mov	r0, r3
 8017264:	f7f9 faa8 	bl	80107b8 <lwip_htonl>
 8017268:	4604      	mov	r4, r0
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	891b      	ldrh	r3, [r3, #8]
 801726e:	461d      	mov	r5, r3
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	68db      	ldr	r3, [r3, #12]
 8017274:	899b      	ldrh	r3, [r3, #12]
 8017276:	b29b      	uxth	r3, r3
 8017278:	4618      	mov	r0, r3
 801727a:	f7f9 fa87 	bl	801078c <lwip_htons>
 801727e:	4603      	mov	r3, r0
 8017280:	b2db      	uxtb	r3, r3
 8017282:	f003 0303 	and.w	r3, r3, #3
 8017286:	2b00      	cmp	r3, #0
 8017288:	d001      	beq.n	801728e <tcp_rexmit_rto_prepare+0xba>
 801728a:	2301      	movs	r3, #1
 801728c:	e000      	b.n	8017290 <tcp_rexmit_rto_prepare+0xbc>
 801728e:	2300      	movs	r3, #0
 8017290:	442b      	add	r3, r5
 8017292:	18e2      	adds	r2, r4, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2200      	movs	r2, #0
 801729c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801729e:	2300      	movs	r3, #0
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3710      	adds	r7, #16
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bdb0      	pop	{r4, r5, r7, pc}
 80172a8:	0801da38 	.word	0x0801da38
 80172ac:	0801e074 	.word	0x0801e074
 80172b0:	0801da8c 	.word	0x0801da8c

080172b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b082      	sub	sp, #8
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d106      	bne.n	80172d0 <tcp_rexmit_rto_commit+0x1c>
 80172c2:	4b0d      	ldr	r3, [pc, #52]	@ (80172f8 <tcp_rexmit_rto_commit+0x44>)
 80172c4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80172c8:	490c      	ldr	r1, [pc, #48]	@ (80172fc <tcp_rexmit_rto_commit+0x48>)
 80172ca:	480d      	ldr	r0, [pc, #52]	@ (8017300 <tcp_rexmit_rto_commit+0x4c>)
 80172cc:	f003 ffe2 	bl	801b294 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80172d6:	2bff      	cmp	r3, #255	@ 0xff
 80172d8:	d007      	beq.n	80172ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80172e0:	3301      	adds	r3, #1
 80172e2:	b2da      	uxtb	r2, r3
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	f7ff fc7e 	bl	8016bec <tcp_output>
}
 80172f0:	bf00      	nop
 80172f2:	3708      	adds	r7, #8
 80172f4:	46bd      	mov	sp, r7
 80172f6:	bd80      	pop	{r7, pc}
 80172f8:	0801da38 	.word	0x0801da38
 80172fc:	0801e098 	.word	0x0801e098
 8017300:	0801da8c 	.word	0x0801da8c

08017304 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d106      	bne.n	8017320 <tcp_rexmit_rto+0x1c>
 8017312:	4b0a      	ldr	r3, [pc, #40]	@ (801733c <tcp_rexmit_rto+0x38>)
 8017314:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8017318:	4909      	ldr	r1, [pc, #36]	@ (8017340 <tcp_rexmit_rto+0x3c>)
 801731a:	480a      	ldr	r0, [pc, #40]	@ (8017344 <tcp_rexmit_rto+0x40>)
 801731c:	f003 ffba 	bl	801b294 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017320:	6878      	ldr	r0, [r7, #4]
 8017322:	f7ff ff57 	bl	80171d4 <tcp_rexmit_rto_prepare>
 8017326:	4603      	mov	r3, r0
 8017328:	2b00      	cmp	r3, #0
 801732a:	d102      	bne.n	8017332 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	f7ff ffc1 	bl	80172b4 <tcp_rexmit_rto_commit>
  }
}
 8017332:	bf00      	nop
 8017334:	3708      	adds	r7, #8
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	0801da38 	.word	0x0801da38
 8017340:	0801e0bc 	.word	0x0801e0bc
 8017344:	0801da8c 	.word	0x0801da8c

08017348 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017348:	b590      	push	{r4, r7, lr}
 801734a:	b085      	sub	sp, #20
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d106      	bne.n	8017364 <tcp_rexmit+0x1c>
 8017356:	4b2f      	ldr	r3, [pc, #188]	@ (8017414 <tcp_rexmit+0xcc>)
 8017358:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801735c:	492e      	ldr	r1, [pc, #184]	@ (8017418 <tcp_rexmit+0xd0>)
 801735e:	482f      	ldr	r0, [pc, #188]	@ (801741c <tcp_rexmit+0xd4>)
 8017360:	f003 ff98 	bl	801b294 <iprintf>

  if (pcb->unacked == NULL) {
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017368:	2b00      	cmp	r3, #0
 801736a:	d102      	bne.n	8017372 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801736c:	f06f 0305 	mvn.w	r3, #5
 8017370:	e04c      	b.n	801740c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017376:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017378:	68b8      	ldr	r0, [r7, #8]
 801737a:	f7ff fe2b 	bl	8016fd4 <tcp_output_segment_busy>
 801737e:	4603      	mov	r3, r0
 8017380:	2b00      	cmp	r3, #0
 8017382:	d002      	beq.n	801738a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017384:	f06f 0305 	mvn.w	r3, #5
 8017388:	e040      	b.n	801740c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	336c      	adds	r3, #108	@ 0x6c
 8017396:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017398:	e002      	b.n	80173a0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d011      	beq.n	80173cc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	68db      	ldr	r3, [r3, #12]
 80173ae:	685b      	ldr	r3, [r3, #4]
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7f9 fa01 	bl	80107b8 <lwip_htonl>
 80173b6:	4604      	mov	r4, r0
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	68db      	ldr	r3, [r3, #12]
 80173bc:	685b      	ldr	r3, [r3, #4]
 80173be:	4618      	mov	r0, r3
 80173c0:	f7f9 f9fa 	bl	80107b8 <lwip_htonl>
 80173c4:	4603      	mov	r3, r0
 80173c6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	dbe6      	blt.n	801739a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	681a      	ldr	r2, [r3, #0]
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	68ba      	ldr	r2, [r7, #8]
 80173d8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80173da:	68bb      	ldr	r3, [r7, #8]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d103      	bne.n	80173ea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	2200      	movs	r2, #0
 80173e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80173f0:	2bff      	cmp	r3, #255	@ 0xff
 80173f2:	d007      	beq.n	8017404 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80173fa:	3301      	adds	r3, #1
 80173fc:	b2da      	uxtb	r2, r3
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2200      	movs	r2, #0
 8017408:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801740a:	2300      	movs	r3, #0
}
 801740c:	4618      	mov	r0, r3
 801740e:	3714      	adds	r7, #20
 8017410:	46bd      	mov	sp, r7
 8017412:	bd90      	pop	{r4, r7, pc}
 8017414:	0801da38 	.word	0x0801da38
 8017418:	0801e0d8 	.word	0x0801e0d8
 801741c:	0801da8c 	.word	0x0801da8c

08017420 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b082      	sub	sp, #8
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d106      	bne.n	801743c <tcp_rexmit_fast+0x1c>
 801742e:	4b2a      	ldr	r3, [pc, #168]	@ (80174d8 <tcp_rexmit_fast+0xb8>)
 8017430:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8017434:	4929      	ldr	r1, [pc, #164]	@ (80174dc <tcp_rexmit_fast+0xbc>)
 8017436:	482a      	ldr	r0, [pc, #168]	@ (80174e0 <tcp_rexmit_fast+0xc0>)
 8017438:	f003 ff2c 	bl	801b294 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017440:	2b00      	cmp	r3, #0
 8017442:	d045      	beq.n	80174d0 <tcp_rexmit_fast+0xb0>
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	8b5b      	ldrh	r3, [r3, #26]
 8017448:	f003 0304 	and.w	r3, r3, #4
 801744c:	2b00      	cmp	r3, #0
 801744e:	d13f      	bne.n	80174d0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017450:	6878      	ldr	r0, [r7, #4]
 8017452:	f7ff ff79 	bl	8017348 <tcp_rexmit>
 8017456:	4603      	mov	r3, r0
 8017458:	2b00      	cmp	r3, #0
 801745a:	d139      	bne.n	80174d0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017468:	4293      	cmp	r3, r2
 801746a:	bf28      	it	cs
 801746c:	4613      	movcs	r3, r2
 801746e:	b29b      	uxth	r3, r3
 8017470:	2b00      	cmp	r3, #0
 8017472:	da00      	bge.n	8017476 <tcp_rexmit_fast+0x56>
 8017474:	3301      	adds	r3, #1
 8017476:	105b      	asrs	r3, r3, #1
 8017478:	b29a      	uxth	r2, r3
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017486:	461a      	mov	r2, r3
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801748c:	005b      	lsls	r3, r3, #1
 801748e:	429a      	cmp	r2, r3
 8017490:	d206      	bcs.n	80174a0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017496:	005b      	lsls	r3, r3, #1
 8017498:	b29a      	uxth	r2, r3
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80174aa:	4619      	mov	r1, r3
 80174ac:	0049      	lsls	r1, r1, #1
 80174ae:	440b      	add	r3, r1
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	4413      	add	r3, r2
 80174b4:	b29a      	uxth	r2, r3
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	8b5b      	ldrh	r3, [r3, #26]
 80174c0:	f043 0304 	orr.w	r3, r3, #4
 80174c4:	b29a      	uxth	r2, r3
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	2200      	movs	r2, #0
 80174ce:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80174d0:	bf00      	nop
 80174d2:	3708      	adds	r7, #8
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}
 80174d8:	0801da38 	.word	0x0801da38
 80174dc:	0801e0f0 	.word	0x0801e0f0
 80174e0:	0801da8c 	.word	0x0801da8c

080174e4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b086      	sub	sp, #24
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	60f8      	str	r0, [r7, #12]
 80174ec:	607b      	str	r3, [r7, #4]
 80174ee:	460b      	mov	r3, r1
 80174f0:	817b      	strh	r3, [r7, #10]
 80174f2:	4613      	mov	r3, r2
 80174f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80174f6:	897a      	ldrh	r2, [r7, #10]
 80174f8:	893b      	ldrh	r3, [r7, #8]
 80174fa:	4413      	add	r3, r2
 80174fc:	b29b      	uxth	r3, r3
 80174fe:	3314      	adds	r3, #20
 8017500:	b29b      	uxth	r3, r3
 8017502:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017506:	4619      	mov	r1, r3
 8017508:	2022      	movs	r0, #34	@ 0x22
 801750a:	f7fa fb09 	bl	8011b20 <pbuf_alloc>
 801750e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017510:	697b      	ldr	r3, [r7, #20]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d04d      	beq.n	80175b2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017516:	897b      	ldrh	r3, [r7, #10]
 8017518:	3313      	adds	r3, #19
 801751a:	697a      	ldr	r2, [r7, #20]
 801751c:	8952      	ldrh	r2, [r2, #10]
 801751e:	4293      	cmp	r3, r2
 8017520:	db06      	blt.n	8017530 <tcp_output_alloc_header_common+0x4c>
 8017522:	4b26      	ldr	r3, [pc, #152]	@ (80175bc <tcp_output_alloc_header_common+0xd8>)
 8017524:	f240 7223 	movw	r2, #1827	@ 0x723
 8017528:	4925      	ldr	r1, [pc, #148]	@ (80175c0 <tcp_output_alloc_header_common+0xdc>)
 801752a:	4826      	ldr	r0, [pc, #152]	@ (80175c4 <tcp_output_alloc_header_common+0xe0>)
 801752c:	f003 feb2 	bl	801b294 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017530:	697b      	ldr	r3, [r7, #20]
 8017532:	685b      	ldr	r3, [r3, #4]
 8017534:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017536:	8c3b      	ldrh	r3, [r7, #32]
 8017538:	4618      	mov	r0, r3
 801753a:	f7f9 f927 	bl	801078c <lwip_htons>
 801753e:	4603      	mov	r3, r0
 8017540:	461a      	mov	r2, r3
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017548:	4618      	mov	r0, r3
 801754a:	f7f9 f91f 	bl	801078c <lwip_htons>
 801754e:	4603      	mov	r3, r0
 8017550:	461a      	mov	r2, r3
 8017552:	693b      	ldr	r3, [r7, #16]
 8017554:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017556:	693b      	ldr	r3, [r7, #16]
 8017558:	687a      	ldr	r2, [r7, #4]
 801755a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801755c:	68f8      	ldr	r0, [r7, #12]
 801755e:	f7f9 f92b 	bl	80107b8 <lwip_htonl>
 8017562:	4602      	mov	r2, r0
 8017564:	693b      	ldr	r3, [r7, #16]
 8017566:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017568:	897b      	ldrh	r3, [r7, #10]
 801756a:	089b      	lsrs	r3, r3, #2
 801756c:	b29b      	uxth	r3, r3
 801756e:	3305      	adds	r3, #5
 8017570:	b29b      	uxth	r3, r3
 8017572:	031b      	lsls	r3, r3, #12
 8017574:	b29a      	uxth	r2, r3
 8017576:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801757a:	b29b      	uxth	r3, r3
 801757c:	4313      	orrs	r3, r2
 801757e:	b29b      	uxth	r3, r3
 8017580:	4618      	mov	r0, r3
 8017582:	f7f9 f903 	bl	801078c <lwip_htons>
 8017586:	4603      	mov	r3, r0
 8017588:	461a      	mov	r2, r3
 801758a:	693b      	ldr	r3, [r7, #16]
 801758c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801758e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017590:	4618      	mov	r0, r3
 8017592:	f7f9 f8fb 	bl	801078c <lwip_htons>
 8017596:	4603      	mov	r3, r0
 8017598:	461a      	mov	r2, r3
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	2200      	movs	r2, #0
 80175a2:	741a      	strb	r2, [r3, #16]
 80175a4:	2200      	movs	r2, #0
 80175a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80175a8:	693b      	ldr	r3, [r7, #16]
 80175aa:	2200      	movs	r2, #0
 80175ac:	749a      	strb	r2, [r3, #18]
 80175ae:	2200      	movs	r2, #0
 80175b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80175b2:	697b      	ldr	r3, [r7, #20]
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3718      	adds	r7, #24
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}
 80175bc:	0801da38 	.word	0x0801da38
 80175c0:	0801e110 	.word	0x0801e110
 80175c4:	0801da8c 	.word	0x0801da8c

080175c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80175c8:	b5b0      	push	{r4, r5, r7, lr}
 80175ca:	b08a      	sub	sp, #40	@ 0x28
 80175cc:	af04      	add	r7, sp, #16
 80175ce:	60f8      	str	r0, [r7, #12]
 80175d0:	607b      	str	r3, [r7, #4]
 80175d2:	460b      	mov	r3, r1
 80175d4:	817b      	strh	r3, [r7, #10]
 80175d6:	4613      	mov	r3, r2
 80175d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d106      	bne.n	80175ee <tcp_output_alloc_header+0x26>
 80175e0:	4b15      	ldr	r3, [pc, #84]	@ (8017638 <tcp_output_alloc_header+0x70>)
 80175e2:	f240 7242 	movw	r2, #1858	@ 0x742
 80175e6:	4915      	ldr	r1, [pc, #84]	@ (801763c <tcp_output_alloc_header+0x74>)
 80175e8:	4815      	ldr	r0, [pc, #84]	@ (8017640 <tcp_output_alloc_header+0x78>)
 80175ea:	f003 fe53 	bl	801b294 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	8adb      	ldrh	r3, [r3, #22]
 80175f6:	68fa      	ldr	r2, [r7, #12]
 80175f8:	8b12      	ldrh	r2, [r2, #24]
 80175fa:	68f9      	ldr	r1, [r7, #12]
 80175fc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80175fe:	893d      	ldrh	r5, [r7, #8]
 8017600:	897c      	ldrh	r4, [r7, #10]
 8017602:	9103      	str	r1, [sp, #12]
 8017604:	2110      	movs	r1, #16
 8017606:	9102      	str	r1, [sp, #8]
 8017608:	9201      	str	r2, [sp, #4]
 801760a:	9300      	str	r3, [sp, #0]
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	462a      	mov	r2, r5
 8017610:	4621      	mov	r1, r4
 8017612:	f7ff ff67 	bl	80174e4 <tcp_output_alloc_header_common>
 8017616:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d006      	beq.n	801762c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017622:	68fa      	ldr	r2, [r7, #12]
 8017624:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017626:	441a      	add	r2, r3
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801762c:	697b      	ldr	r3, [r7, #20]
}
 801762e:	4618      	mov	r0, r3
 8017630:	3718      	adds	r7, #24
 8017632:	46bd      	mov	sp, r7
 8017634:	bdb0      	pop	{r4, r5, r7, pc}
 8017636:	bf00      	nop
 8017638:	0801da38 	.word	0x0801da38
 801763c:	0801e140 	.word	0x0801e140
 8017640:	0801da8c 	.word	0x0801da8c

08017644 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b088      	sub	sp, #32
 8017648:	af00      	add	r7, sp, #0
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	60b9      	str	r1, [r7, #8]
 801764e:	4611      	mov	r1, r2
 8017650:	461a      	mov	r2, r3
 8017652:	460b      	mov	r3, r1
 8017654:	71fb      	strb	r3, [r7, #7]
 8017656:	4613      	mov	r3, r2
 8017658:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801765a:	2300      	movs	r3, #0
 801765c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801765e:	68bb      	ldr	r3, [r7, #8]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d106      	bne.n	8017672 <tcp_output_fill_options+0x2e>
 8017664:	4b12      	ldr	r3, [pc, #72]	@ (80176b0 <tcp_output_fill_options+0x6c>)
 8017666:	f240 7256 	movw	r2, #1878	@ 0x756
 801766a:	4912      	ldr	r1, [pc, #72]	@ (80176b4 <tcp_output_fill_options+0x70>)
 801766c:	4812      	ldr	r0, [pc, #72]	@ (80176b8 <tcp_output_fill_options+0x74>)
 801766e:	f003 fe11 	bl	801b294 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017672:	68bb      	ldr	r3, [r7, #8]
 8017674:	685b      	ldr	r3, [r3, #4]
 8017676:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017678:	69bb      	ldr	r3, [r7, #24]
 801767a:	3314      	adds	r3, #20
 801767c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801767e:	8bfb      	ldrh	r3, [r7, #30]
 8017680:	009b      	lsls	r3, r3, #2
 8017682:	461a      	mov	r2, r3
 8017684:	79fb      	ldrb	r3, [r7, #7]
 8017686:	009b      	lsls	r3, r3, #2
 8017688:	f003 0304 	and.w	r3, r3, #4
 801768c:	4413      	add	r3, r2
 801768e:	3314      	adds	r3, #20
 8017690:	69ba      	ldr	r2, [r7, #24]
 8017692:	4413      	add	r3, r2
 8017694:	697a      	ldr	r2, [r7, #20]
 8017696:	429a      	cmp	r2, r3
 8017698:	d006      	beq.n	80176a8 <tcp_output_fill_options+0x64>
 801769a:	4b05      	ldr	r3, [pc, #20]	@ (80176b0 <tcp_output_fill_options+0x6c>)
 801769c:	f240 7275 	movw	r2, #1909	@ 0x775
 80176a0:	4906      	ldr	r1, [pc, #24]	@ (80176bc <tcp_output_fill_options+0x78>)
 80176a2:	4805      	ldr	r0, [pc, #20]	@ (80176b8 <tcp_output_fill_options+0x74>)
 80176a4:	f003 fdf6 	bl	801b294 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80176a8:	bf00      	nop
 80176aa:	3720      	adds	r7, #32
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	0801da38 	.word	0x0801da38
 80176b4:	0801e168 	.word	0x0801e168
 80176b8:	0801da8c 	.word	0x0801da8c
 80176bc:	0801e060 	.word	0x0801e060

080176c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b08a      	sub	sp, #40	@ 0x28
 80176c4:	af04      	add	r7, sp, #16
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	60b9      	str	r1, [r7, #8]
 80176ca:	607a      	str	r2, [r7, #4]
 80176cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d106      	bne.n	80176e2 <tcp_output_control_segment+0x22>
 80176d4:	4b1c      	ldr	r3, [pc, #112]	@ (8017748 <tcp_output_control_segment+0x88>)
 80176d6:	f240 7287 	movw	r2, #1927	@ 0x787
 80176da:	491c      	ldr	r1, [pc, #112]	@ (801774c <tcp_output_control_segment+0x8c>)
 80176dc:	481c      	ldr	r0, [pc, #112]	@ (8017750 <tcp_output_control_segment+0x90>)
 80176de:	f003 fdd9 	bl	801b294 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80176e2:	683a      	ldr	r2, [r7, #0]
 80176e4:	6879      	ldr	r1, [r7, #4]
 80176e6:	68f8      	ldr	r0, [r7, #12]
 80176e8:	f7fe ff42 	bl	8016570 <tcp_route>
 80176ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d102      	bne.n	80176fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80176f4:	23fc      	movs	r3, #252	@ 0xfc
 80176f6:	75fb      	strb	r3, [r7, #23]
 80176f8:	e01c      	b.n	8017734 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d006      	beq.n	801770e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	7adb      	ldrb	r3, [r3, #11]
 8017704:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	7a9b      	ldrb	r3, [r3, #10]
 801770a:	757b      	strb	r3, [r7, #21]
 801770c:	e003      	b.n	8017716 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801770e:	23ff      	movs	r3, #255	@ 0xff
 8017710:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017712:	2300      	movs	r3, #0
 8017714:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017716:	7dba      	ldrb	r2, [r7, #22]
 8017718:	693b      	ldr	r3, [r7, #16]
 801771a:	9302      	str	r3, [sp, #8]
 801771c:	2306      	movs	r3, #6
 801771e:	9301      	str	r3, [sp, #4]
 8017720:	7d7b      	ldrb	r3, [r7, #21]
 8017722:	9300      	str	r3, [sp, #0]
 8017724:	4613      	mov	r3, r2
 8017726:	683a      	ldr	r2, [r7, #0]
 8017728:	6879      	ldr	r1, [r7, #4]
 801772a:	68b8      	ldr	r0, [r7, #8]
 801772c:	f002 fb02 	bl	8019d34 <ip4_output_if>
 8017730:	4603      	mov	r3, r0
 8017732:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017734:	68b8      	ldr	r0, [r7, #8]
 8017736:	f7fa fcdb 	bl	80120f0 <pbuf_free>
  return err;
 801773a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801773e:	4618      	mov	r0, r3
 8017740:	3718      	adds	r7, #24
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}
 8017746:	bf00      	nop
 8017748:	0801da38 	.word	0x0801da38
 801774c:	0801e190 	.word	0x0801e190
 8017750:	0801da8c 	.word	0x0801da8c

08017754 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017754:	b590      	push	{r4, r7, lr}
 8017756:	b08b      	sub	sp, #44	@ 0x2c
 8017758:	af04      	add	r7, sp, #16
 801775a:	60f8      	str	r0, [r7, #12]
 801775c:	60b9      	str	r1, [r7, #8]
 801775e:	607a      	str	r2, [r7, #4]
 8017760:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d106      	bne.n	8017776 <tcp_rst+0x22>
 8017768:	4b1f      	ldr	r3, [pc, #124]	@ (80177e8 <tcp_rst+0x94>)
 801776a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801776e:	491f      	ldr	r1, [pc, #124]	@ (80177ec <tcp_rst+0x98>)
 8017770:	481f      	ldr	r0, [pc, #124]	@ (80177f0 <tcp_rst+0x9c>)
 8017772:	f003 fd8f 	bl	801b294 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017778:	2b00      	cmp	r3, #0
 801777a:	d106      	bne.n	801778a <tcp_rst+0x36>
 801777c:	4b1a      	ldr	r3, [pc, #104]	@ (80177e8 <tcp_rst+0x94>)
 801777e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8017782:	491c      	ldr	r1, [pc, #112]	@ (80177f4 <tcp_rst+0xa0>)
 8017784:	481a      	ldr	r0, [pc, #104]	@ (80177f0 <tcp_rst+0x9c>)
 8017786:	f003 fd85 	bl	801b294 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801778a:	2300      	movs	r3, #0
 801778c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801778e:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8017792:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017794:	7dfb      	ldrb	r3, [r7, #23]
 8017796:	b29c      	uxth	r4, r3
 8017798:	68b8      	ldr	r0, [r7, #8]
 801779a:	f7f9 f80d 	bl	80107b8 <lwip_htonl>
 801779e:	4602      	mov	r2, r0
 80177a0:	8abb      	ldrh	r3, [r7, #20]
 80177a2:	9303      	str	r3, [sp, #12]
 80177a4:	2314      	movs	r3, #20
 80177a6:	9302      	str	r3, [sp, #8]
 80177a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80177aa:	9301      	str	r3, [sp, #4]
 80177ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80177ae:	9300      	str	r3, [sp, #0]
 80177b0:	4613      	mov	r3, r2
 80177b2:	2200      	movs	r2, #0
 80177b4:	4621      	mov	r1, r4
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	f7ff fe94 	bl	80174e4 <tcp_output_alloc_header_common>
 80177bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80177be:	693b      	ldr	r3, [r7, #16]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d00c      	beq.n	80177de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80177c4:	7dfb      	ldrb	r3, [r7, #23]
 80177c6:	2200      	movs	r2, #0
 80177c8:	6939      	ldr	r1, [r7, #16]
 80177ca:	68f8      	ldr	r0, [r7, #12]
 80177cc:	f7ff ff3a 	bl	8017644 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80177d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177d2:	683a      	ldr	r2, [r7, #0]
 80177d4:	6939      	ldr	r1, [r7, #16]
 80177d6:	68f8      	ldr	r0, [r7, #12]
 80177d8:	f7ff ff72 	bl	80176c0 <tcp_output_control_segment>
 80177dc:	e000      	b.n	80177e0 <tcp_rst+0x8c>
    return;
 80177de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80177e0:	371c      	adds	r7, #28
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd90      	pop	{r4, r7, pc}
 80177e6:	bf00      	nop
 80177e8:	0801da38 	.word	0x0801da38
 80177ec:	0801e1bc 	.word	0x0801e1bc
 80177f0:	0801da8c 	.word	0x0801da8c
 80177f4:	0801e1d8 	.word	0x0801e1d8

080177f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80177f8:	b590      	push	{r4, r7, lr}
 80177fa:	b087      	sub	sp, #28
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017800:	2300      	movs	r3, #0
 8017802:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017804:	2300      	movs	r3, #0
 8017806:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d106      	bne.n	801781c <tcp_send_empty_ack+0x24>
 801780e:	4b28      	ldr	r3, [pc, #160]	@ (80178b0 <tcp_send_empty_ack+0xb8>)
 8017810:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017814:	4927      	ldr	r1, [pc, #156]	@ (80178b4 <tcp_send_empty_ack+0xbc>)
 8017816:	4828      	ldr	r0, [pc, #160]	@ (80178b8 <tcp_send_empty_ack+0xc0>)
 8017818:	f003 fd3c 	bl	801b294 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801781c:	7dfb      	ldrb	r3, [r7, #23]
 801781e:	009b      	lsls	r3, r3, #2
 8017820:	b2db      	uxtb	r3, r3
 8017822:	f003 0304 	and.w	r3, r3, #4
 8017826:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017828:	7d7b      	ldrb	r3, [r7, #21]
 801782a:	b29c      	uxth	r4, r3
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017830:	4618      	mov	r0, r3
 8017832:	f7f8 ffc1 	bl	80107b8 <lwip_htonl>
 8017836:	4603      	mov	r3, r0
 8017838:	2200      	movs	r2, #0
 801783a:	4621      	mov	r1, r4
 801783c:	6878      	ldr	r0, [r7, #4]
 801783e:	f7ff fec3 	bl	80175c8 <tcp_output_alloc_header>
 8017842:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017844:	693b      	ldr	r3, [r7, #16]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d109      	bne.n	801785e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	8b5b      	ldrh	r3, [r3, #26]
 801784e:	f043 0303 	orr.w	r3, r3, #3
 8017852:	b29a      	uxth	r2, r3
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017858:	f06f 0301 	mvn.w	r3, #1
 801785c:	e023      	b.n	80178a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801785e:	7dbb      	ldrb	r3, [r7, #22]
 8017860:	7dfa      	ldrb	r2, [r7, #23]
 8017862:	6939      	ldr	r1, [r7, #16]
 8017864:	6878      	ldr	r0, [r7, #4]
 8017866:	f7ff feed 	bl	8017644 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	3304      	adds	r3, #4
 8017870:	6939      	ldr	r1, [r7, #16]
 8017872:	6878      	ldr	r0, [r7, #4]
 8017874:	f7ff ff24 	bl	80176c0 <tcp_output_control_segment>
 8017878:	4603      	mov	r3, r0
 801787a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801787c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d007      	beq.n	8017894 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	8b5b      	ldrh	r3, [r3, #26]
 8017888:	f043 0303 	orr.w	r3, r3, #3
 801788c:	b29a      	uxth	r2, r3
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	835a      	strh	r2, [r3, #26]
 8017892:	e006      	b.n	80178a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	8b5b      	ldrh	r3, [r3, #26]
 8017898:	f023 0303 	bic.w	r3, r3, #3
 801789c:	b29a      	uxth	r2, r3
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80178a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	371c      	adds	r7, #28
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd90      	pop	{r4, r7, pc}
 80178ae:	bf00      	nop
 80178b0:	0801da38 	.word	0x0801da38
 80178b4:	0801e1f4 	.word	0x0801e1f4
 80178b8:	0801da8c 	.word	0x0801da8c

080178bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80178bc:	b590      	push	{r4, r7, lr}
 80178be:	b087      	sub	sp, #28
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178c4:	2300      	movs	r3, #0
 80178c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d106      	bne.n	80178dc <tcp_keepalive+0x20>
 80178ce:	4b18      	ldr	r3, [pc, #96]	@ (8017930 <tcp_keepalive+0x74>)
 80178d0:	f640 0224 	movw	r2, #2084	@ 0x824
 80178d4:	4917      	ldr	r1, [pc, #92]	@ (8017934 <tcp_keepalive+0x78>)
 80178d6:	4818      	ldr	r0, [pc, #96]	@ (8017938 <tcp_keepalive+0x7c>)
 80178d8:	f003 fcdc 	bl	801b294 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80178dc:	7dfb      	ldrb	r3, [r7, #23]
 80178de:	b29c      	uxth	r4, r3
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80178e4:	3b01      	subs	r3, #1
 80178e6:	4618      	mov	r0, r3
 80178e8:	f7f8 ff66 	bl	80107b8 <lwip_htonl>
 80178ec:	4603      	mov	r3, r0
 80178ee:	2200      	movs	r2, #0
 80178f0:	4621      	mov	r1, r4
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f7ff fe68 	bl	80175c8 <tcp_output_alloc_header>
 80178f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80178fa:	693b      	ldr	r3, [r7, #16]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d102      	bne.n	8017906 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017900:	f04f 33ff 	mov.w	r3, #4294967295
 8017904:	e010      	b.n	8017928 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017906:	7dfb      	ldrb	r3, [r7, #23]
 8017908:	2200      	movs	r2, #0
 801790a:	6939      	ldr	r1, [r7, #16]
 801790c:	6878      	ldr	r0, [r7, #4]
 801790e:	f7ff fe99 	bl	8017644 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017912:	687a      	ldr	r2, [r7, #4]
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	3304      	adds	r3, #4
 8017918:	6939      	ldr	r1, [r7, #16]
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f7ff fed0 	bl	80176c0 <tcp_output_control_segment>
 8017920:	4603      	mov	r3, r0
 8017922:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017924:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017928:	4618      	mov	r0, r3
 801792a:	371c      	adds	r7, #28
 801792c:	46bd      	mov	sp, r7
 801792e:	bd90      	pop	{r4, r7, pc}
 8017930:	0801da38 	.word	0x0801da38
 8017934:	0801e214 	.word	0x0801e214
 8017938:	0801da8c 	.word	0x0801da8c

0801793c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801793c:	b590      	push	{r4, r7, lr}
 801793e:	b08b      	sub	sp, #44	@ 0x2c
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017944:	2300      	movs	r3, #0
 8017946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d106      	bne.n	801795e <tcp_zero_window_probe+0x22>
 8017950:	4b4c      	ldr	r3, [pc, #304]	@ (8017a84 <tcp_zero_window_probe+0x148>)
 8017952:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017956:	494c      	ldr	r1, [pc, #304]	@ (8017a88 <tcp_zero_window_probe+0x14c>)
 8017958:	484c      	ldr	r0, [pc, #304]	@ (8017a8c <tcp_zero_window_probe+0x150>)
 801795a:	f003 fc9b 	bl	801b294 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017962:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017964:	6a3b      	ldr	r3, [r7, #32]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d101      	bne.n	801796e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801796a:	2300      	movs	r3, #0
 801796c:	e086      	b.n	8017a7c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017974:	2bff      	cmp	r3, #255	@ 0xff
 8017976:	d007      	beq.n	8017988 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801797e:	3301      	adds	r3, #1
 8017980:	b2da      	uxtb	r2, r3
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017988:	6a3b      	ldr	r3, [r7, #32]
 801798a:	68db      	ldr	r3, [r3, #12]
 801798c:	899b      	ldrh	r3, [r3, #12]
 801798e:	b29b      	uxth	r3, r3
 8017990:	4618      	mov	r0, r3
 8017992:	f7f8 fefb 	bl	801078c <lwip_htons>
 8017996:	4603      	mov	r3, r0
 8017998:	b2db      	uxtb	r3, r3
 801799a:	f003 0301 	and.w	r3, r3, #1
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d005      	beq.n	80179ae <tcp_zero_window_probe+0x72>
 80179a2:	6a3b      	ldr	r3, [r7, #32]
 80179a4:	891b      	ldrh	r3, [r3, #8]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d101      	bne.n	80179ae <tcp_zero_window_probe+0x72>
 80179aa:	2301      	movs	r3, #1
 80179ac:	e000      	b.n	80179b0 <tcp_zero_window_probe+0x74>
 80179ae:	2300      	movs	r3, #0
 80179b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80179b2:	7ffb      	ldrb	r3, [r7, #31]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	bf0c      	ite	eq
 80179b8:	2301      	moveq	r3, #1
 80179ba:	2300      	movne	r3, #0
 80179bc:	b2db      	uxtb	r3, r3
 80179be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80179c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80179c4:	b299      	uxth	r1, r3
 80179c6:	6a3b      	ldr	r3, [r7, #32]
 80179c8:	68db      	ldr	r3, [r3, #12]
 80179ca:	685b      	ldr	r3, [r3, #4]
 80179cc:	8bba      	ldrh	r2, [r7, #28]
 80179ce:	6878      	ldr	r0, [r7, #4]
 80179d0:	f7ff fdfa 	bl	80175c8 <tcp_output_alloc_header>
 80179d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80179d6:	69bb      	ldr	r3, [r7, #24]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d102      	bne.n	80179e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80179dc:	f04f 33ff 	mov.w	r3, #4294967295
 80179e0:	e04c      	b.n	8017a7c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80179e2:	69bb      	ldr	r3, [r7, #24]
 80179e4:	685b      	ldr	r3, [r3, #4]
 80179e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80179e8:	7ffb      	ldrb	r3, [r7, #31]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d011      	beq.n	8017a12 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80179ee:	697b      	ldr	r3, [r7, #20]
 80179f0:	899b      	ldrh	r3, [r3, #12]
 80179f2:	b29b      	uxth	r3, r3
 80179f4:	b21b      	sxth	r3, r3
 80179f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80179fa:	b21c      	sxth	r4, r3
 80179fc:	2011      	movs	r0, #17
 80179fe:	f7f8 fec5 	bl	801078c <lwip_htons>
 8017a02:	4603      	mov	r3, r0
 8017a04:	b21b      	sxth	r3, r3
 8017a06:	4323      	orrs	r3, r4
 8017a08:	b21b      	sxth	r3, r3
 8017a0a:	b29a      	uxth	r2, r3
 8017a0c:	697b      	ldr	r3, [r7, #20]
 8017a0e:	819a      	strh	r2, [r3, #12]
 8017a10:	e010      	b.n	8017a34 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017a12:	69bb      	ldr	r3, [r7, #24]
 8017a14:	685b      	ldr	r3, [r3, #4]
 8017a16:	3314      	adds	r3, #20
 8017a18:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017a1a:	6a3b      	ldr	r3, [r7, #32]
 8017a1c:	6858      	ldr	r0, [r3, #4]
 8017a1e:	6a3b      	ldr	r3, [r7, #32]
 8017a20:	685b      	ldr	r3, [r3, #4]
 8017a22:	891a      	ldrh	r2, [r3, #8]
 8017a24:	6a3b      	ldr	r3, [r7, #32]
 8017a26:	891b      	ldrh	r3, [r3, #8]
 8017a28:	1ad3      	subs	r3, r2, r3
 8017a2a:	b29b      	uxth	r3, r3
 8017a2c:	2201      	movs	r2, #1
 8017a2e:	6939      	ldr	r1, [r7, #16]
 8017a30:	f7fa fd64 	bl	80124fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017a34:	6a3b      	ldr	r3, [r7, #32]
 8017a36:	68db      	ldr	r3, [r3, #12]
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f7f8 febc 	bl	80107b8 <lwip_htonl>
 8017a40:	4603      	mov	r3, r0
 8017a42:	3301      	adds	r3, #1
 8017a44:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	1ad3      	subs	r3, r2, r3
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	da02      	bge.n	8017a58 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	68fa      	ldr	r2, [r7, #12]
 8017a56:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	69b9      	ldr	r1, [r7, #24]
 8017a60:	6878      	ldr	r0, [r7, #4]
 8017a62:	f7ff fdef 	bl	8017644 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a66:	687a      	ldr	r2, [r7, #4]
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	3304      	adds	r3, #4
 8017a6c:	69b9      	ldr	r1, [r7, #24]
 8017a6e:	6878      	ldr	r0, [r7, #4]
 8017a70:	f7ff fe26 	bl	80176c0 <tcp_output_control_segment>
 8017a74:	4603      	mov	r3, r0
 8017a76:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017a78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	372c      	adds	r7, #44	@ 0x2c
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd90      	pop	{r4, r7, pc}
 8017a84:	0801da38 	.word	0x0801da38
 8017a88:	0801e230 	.word	0x0801e230
 8017a8c:	0801da8c 	.word	0x0801da8c

08017a90 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017a98:	f7fa ff0a 	bl	80128b0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8017ac8 <tcpip_tcp_timer+0x38>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d103      	bne.n	8017aac <tcpip_tcp_timer+0x1c>
 8017aa4:	4b09      	ldr	r3, [pc, #36]	@ (8017acc <tcpip_tcp_timer+0x3c>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d005      	beq.n	8017ab8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017aac:	2200      	movs	r2, #0
 8017aae:	4908      	ldr	r1, [pc, #32]	@ (8017ad0 <tcpip_tcp_timer+0x40>)
 8017ab0:	20fa      	movs	r0, #250	@ 0xfa
 8017ab2:	f000 f8f3 	bl	8017c9c <sys_timeout>
 8017ab6:	e003      	b.n	8017ac0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017ab8:	4b06      	ldr	r3, [pc, #24]	@ (8017ad4 <tcpip_tcp_timer+0x44>)
 8017aba:	2200      	movs	r2, #0
 8017abc:	601a      	str	r2, [r3, #0]
  }
}
 8017abe:	bf00      	nop
 8017ac0:	bf00      	nop
 8017ac2:	3708      	adds	r7, #8
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}
 8017ac8:	24014bc0 	.word	0x24014bc0
 8017acc:	24014bc4 	.word	0x24014bc4
 8017ad0:	08017a91 	.word	0x08017a91
 8017ad4:	24014c0c 	.word	0x24014c0c

08017ad8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017adc:	4b0a      	ldr	r3, [pc, #40]	@ (8017b08 <tcp_timer_needed+0x30>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d10f      	bne.n	8017b04 <tcp_timer_needed+0x2c>
 8017ae4:	4b09      	ldr	r3, [pc, #36]	@ (8017b0c <tcp_timer_needed+0x34>)
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d103      	bne.n	8017af4 <tcp_timer_needed+0x1c>
 8017aec:	4b08      	ldr	r3, [pc, #32]	@ (8017b10 <tcp_timer_needed+0x38>)
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d007      	beq.n	8017b04 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017af4:	4b04      	ldr	r3, [pc, #16]	@ (8017b08 <tcp_timer_needed+0x30>)
 8017af6:	2201      	movs	r2, #1
 8017af8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017afa:	2200      	movs	r2, #0
 8017afc:	4905      	ldr	r1, [pc, #20]	@ (8017b14 <tcp_timer_needed+0x3c>)
 8017afe:	20fa      	movs	r0, #250	@ 0xfa
 8017b00:	f000 f8cc 	bl	8017c9c <sys_timeout>
  }
}
 8017b04:	bf00      	nop
 8017b06:	bd80      	pop	{r7, pc}
 8017b08:	24014c0c 	.word	0x24014c0c
 8017b0c:	24014bc0 	.word	0x24014bc0
 8017b10:	24014bc4 	.word	0x24014bc4
 8017b14:	08017a91 	.word	0x08017a91

08017b18 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b086      	sub	sp, #24
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	60f8      	str	r0, [r7, #12]
 8017b20:	60b9      	str	r1, [r7, #8]
 8017b22:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017b24:	200b      	movs	r0, #11
 8017b26:	f7f9 fbc1 	bl	80112ac <memp_malloc>
 8017b2a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017b2c:	693b      	ldr	r3, [r7, #16]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d109      	bne.n	8017b46 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017b32:	693b      	ldr	r3, [r7, #16]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d151      	bne.n	8017bdc <sys_timeout_abs+0xc4>
 8017b38:	4b2a      	ldr	r3, [pc, #168]	@ (8017be4 <sys_timeout_abs+0xcc>)
 8017b3a:	22be      	movs	r2, #190	@ 0xbe
 8017b3c:	492a      	ldr	r1, [pc, #168]	@ (8017be8 <sys_timeout_abs+0xd0>)
 8017b3e:	482b      	ldr	r0, [pc, #172]	@ (8017bec <sys_timeout_abs+0xd4>)
 8017b40:	f003 fba8 	bl	801b294 <iprintf>
    return;
 8017b44:	e04a      	b.n	8017bdc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017b46:	693b      	ldr	r3, [r7, #16]
 8017b48:	2200      	movs	r2, #0
 8017b4a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017b4c:	693b      	ldr	r3, [r7, #16]
 8017b4e:	68ba      	ldr	r2, [r7, #8]
 8017b50:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	687a      	ldr	r2, [r7, #4]
 8017b56:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017b58:	693b      	ldr	r3, [r7, #16]
 8017b5a:	68fa      	ldr	r2, [r7, #12]
 8017b5c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017b5e:	4b24      	ldr	r3, [pc, #144]	@ (8017bf0 <sys_timeout_abs+0xd8>)
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d103      	bne.n	8017b6e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017b66:	4a22      	ldr	r2, [pc, #136]	@ (8017bf0 <sys_timeout_abs+0xd8>)
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	6013      	str	r3, [r2, #0]
    return;
 8017b6c:	e037      	b.n	8017bde <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017b6e:	693b      	ldr	r3, [r7, #16]
 8017b70:	685a      	ldr	r2, [r3, #4]
 8017b72:	4b1f      	ldr	r3, [pc, #124]	@ (8017bf0 <sys_timeout_abs+0xd8>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	685b      	ldr	r3, [r3, #4]
 8017b78:	1ad3      	subs	r3, r2, r3
 8017b7a:	0fdb      	lsrs	r3, r3, #31
 8017b7c:	f003 0301 	and.w	r3, r3, #1
 8017b80:	b2db      	uxtb	r3, r3
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d007      	beq.n	8017b96 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017b86:	4b1a      	ldr	r3, [pc, #104]	@ (8017bf0 <sys_timeout_abs+0xd8>)
 8017b88:	681a      	ldr	r2, [r3, #0]
 8017b8a:	693b      	ldr	r3, [r7, #16]
 8017b8c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017b8e:	4a18      	ldr	r2, [pc, #96]	@ (8017bf0 <sys_timeout_abs+0xd8>)
 8017b90:	693b      	ldr	r3, [r7, #16]
 8017b92:	6013      	str	r3, [r2, #0]
 8017b94:	e023      	b.n	8017bde <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b96:	4b16      	ldr	r3, [pc, #88]	@ (8017bf0 <sys_timeout_abs+0xd8>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	617b      	str	r3, [r7, #20]
 8017b9c:	e01a      	b.n	8017bd4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017b9e:	697b      	ldr	r3, [r7, #20]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d00b      	beq.n	8017bbe <sys_timeout_abs+0xa6>
 8017ba6:	693b      	ldr	r3, [r7, #16]
 8017ba8:	685a      	ldr	r2, [r3, #4]
 8017baa:	697b      	ldr	r3, [r7, #20]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	685b      	ldr	r3, [r3, #4]
 8017bb0:	1ad3      	subs	r3, r2, r3
 8017bb2:	0fdb      	lsrs	r3, r3, #31
 8017bb4:	f003 0301 	and.w	r3, r3, #1
 8017bb8:	b2db      	uxtb	r3, r3
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d007      	beq.n	8017bce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017bbe:	697b      	ldr	r3, [r7, #20]
 8017bc0:	681a      	ldr	r2, [r3, #0]
 8017bc2:	693b      	ldr	r3, [r7, #16]
 8017bc4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017bc6:	697b      	ldr	r3, [r7, #20]
 8017bc8:	693a      	ldr	r2, [r7, #16]
 8017bca:	601a      	str	r2, [r3, #0]
        break;
 8017bcc:	e007      	b.n	8017bde <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	617b      	str	r3, [r7, #20]
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d1e1      	bne.n	8017b9e <sys_timeout_abs+0x86>
 8017bda:	e000      	b.n	8017bde <sys_timeout_abs+0xc6>
    return;
 8017bdc:	bf00      	nop
      }
    }
  }
}
 8017bde:	3718      	adds	r7, #24
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd80      	pop	{r7, pc}
 8017be4:	0801e254 	.word	0x0801e254
 8017be8:	0801e288 	.word	0x0801e288
 8017bec:	0801e2c8 	.word	0x0801e2c8
 8017bf0:	24014c04 	.word	0x24014c04

08017bf4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b086      	sub	sp, #24
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017c00:	697b      	ldr	r3, [r7, #20]
 8017c02:	685b      	ldr	r3, [r3, #4]
 8017c04:	4798      	blx	r3

  now = sys_now();
 8017c06:	f7f4 fa6f 	bl	800c0e8 <sys_now>
 8017c0a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017c0c:	697b      	ldr	r3, [r7, #20]
 8017c0e:	681a      	ldr	r2, [r3, #0]
 8017c10:	4b0f      	ldr	r3, [pc, #60]	@ (8017c50 <lwip_cyclic_timer+0x5c>)
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	4413      	add	r3, r2
 8017c16:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017c18:	68fa      	ldr	r2, [r7, #12]
 8017c1a:	693b      	ldr	r3, [r7, #16]
 8017c1c:	1ad3      	subs	r3, r2, r3
 8017c1e:	0fdb      	lsrs	r3, r3, #31
 8017c20:	f003 0301 	and.w	r3, r3, #1
 8017c24:	b2db      	uxtb	r3, r3
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d009      	beq.n	8017c3e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017c2a:	697b      	ldr	r3, [r7, #20]
 8017c2c:	681a      	ldr	r2, [r3, #0]
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	4413      	add	r3, r2
 8017c32:	687a      	ldr	r2, [r7, #4]
 8017c34:	4907      	ldr	r1, [pc, #28]	@ (8017c54 <lwip_cyclic_timer+0x60>)
 8017c36:	4618      	mov	r0, r3
 8017c38:	f7ff ff6e 	bl	8017b18 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017c3c:	e004      	b.n	8017c48 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017c3e:	687a      	ldr	r2, [r7, #4]
 8017c40:	4904      	ldr	r1, [pc, #16]	@ (8017c54 <lwip_cyclic_timer+0x60>)
 8017c42:	68f8      	ldr	r0, [r7, #12]
 8017c44:	f7ff ff68 	bl	8017b18 <sys_timeout_abs>
}
 8017c48:	bf00      	nop
 8017c4a:	3718      	adds	r7, #24
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}
 8017c50:	24014c08 	.word	0x24014c08
 8017c54:	08017bf5 	.word	0x08017bf5

08017c58 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c5e:	2301      	movs	r3, #1
 8017c60:	607b      	str	r3, [r7, #4]
 8017c62:	e00e      	b.n	8017c82 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017c64:	4a0b      	ldr	r2, [pc, #44]	@ (8017c94 <sys_timeouts_init+0x3c>)
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	00db      	lsls	r3, r3, #3
 8017c70:	4a08      	ldr	r2, [pc, #32]	@ (8017c94 <sys_timeouts_init+0x3c>)
 8017c72:	4413      	add	r3, r2
 8017c74:	461a      	mov	r2, r3
 8017c76:	4908      	ldr	r1, [pc, #32]	@ (8017c98 <sys_timeouts_init+0x40>)
 8017c78:	f000 f810 	bl	8017c9c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	3301      	adds	r3, #1
 8017c80:	607b      	str	r3, [r7, #4]
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	2b02      	cmp	r3, #2
 8017c86:	d9ed      	bls.n	8017c64 <sys_timeouts_init+0xc>
  }
}
 8017c88:	bf00      	nop
 8017c8a:	bf00      	nop
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	0801eed8 	.word	0x0801eed8
 8017c98:	08017bf5 	.word	0x08017bf5

08017c9c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b086      	sub	sp, #24
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017cae:	d306      	bcc.n	8017cbe <sys_timeout+0x22>
 8017cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8017cdc <sys_timeout+0x40>)
 8017cb2:	f240 1229 	movw	r2, #297	@ 0x129
 8017cb6:	490a      	ldr	r1, [pc, #40]	@ (8017ce0 <sys_timeout+0x44>)
 8017cb8:	480a      	ldr	r0, [pc, #40]	@ (8017ce4 <sys_timeout+0x48>)
 8017cba:	f003 faeb 	bl	801b294 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017cbe:	f7f4 fa13 	bl	800c0e8 <sys_now>
 8017cc2:	4602      	mov	r2, r0
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	4413      	add	r3, r2
 8017cc8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017cca:	687a      	ldr	r2, [r7, #4]
 8017ccc:	68b9      	ldr	r1, [r7, #8]
 8017cce:	6978      	ldr	r0, [r7, #20]
 8017cd0:	f7ff ff22 	bl	8017b18 <sys_timeout_abs>
#endif
}
 8017cd4:	bf00      	nop
 8017cd6:	3718      	adds	r7, #24
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}
 8017cdc:	0801e254 	.word	0x0801e254
 8017ce0:	0801e2f0 	.word	0x0801e2f0
 8017ce4:	0801e2c8 	.word	0x0801e2c8

08017ce8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b084      	sub	sp, #16
 8017cec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017cee:	f7f4 f9fb 	bl	800c0e8 <sys_now>
 8017cf2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017cf4:	4b17      	ldr	r3, [pc, #92]	@ (8017d54 <sys_check_timeouts+0x6c>)
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017cfa:	68bb      	ldr	r3, [r7, #8]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d022      	beq.n	8017d46 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017d00:	68bb      	ldr	r3, [r7, #8]
 8017d02:	685b      	ldr	r3, [r3, #4]
 8017d04:	68fa      	ldr	r2, [r7, #12]
 8017d06:	1ad3      	subs	r3, r2, r3
 8017d08:	0fdb      	lsrs	r3, r3, #31
 8017d0a:	f003 0301 	and.w	r3, r3, #1
 8017d0e:	b2db      	uxtb	r3, r3
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d11a      	bne.n	8017d4a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017d14:	68bb      	ldr	r3, [r7, #8]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	4a0e      	ldr	r2, [pc, #56]	@ (8017d54 <sys_check_timeouts+0x6c>)
 8017d1a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017d1c:	68bb      	ldr	r3, [r7, #8]
 8017d1e:	689b      	ldr	r3, [r3, #8]
 8017d20:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017d22:	68bb      	ldr	r3, [r7, #8]
 8017d24:	68db      	ldr	r3, [r3, #12]
 8017d26:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	685b      	ldr	r3, [r3, #4]
 8017d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8017d58 <sys_check_timeouts+0x70>)
 8017d2e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017d30:	68b9      	ldr	r1, [r7, #8]
 8017d32:	200b      	movs	r0, #11
 8017d34:	f7f9 fb30 	bl	8011398 <memp_free>
    if (handler != NULL) {
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d0da      	beq.n	8017cf4 <sys_check_timeouts+0xc>
      handler(arg);
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	6838      	ldr	r0, [r7, #0]
 8017d42:	4798      	blx	r3
  do {
 8017d44:	e7d6      	b.n	8017cf4 <sys_check_timeouts+0xc>
      return;
 8017d46:	bf00      	nop
 8017d48:	e000      	b.n	8017d4c <sys_check_timeouts+0x64>
      return;
 8017d4a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017d4c:	3710      	adds	r7, #16
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd80      	pop	{r7, pc}
 8017d52:	bf00      	nop
 8017d54:	24014c04 	.word	0x24014c04
 8017d58:	24014c08 	.word	0x24014c08

08017d5c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b082      	sub	sp, #8
 8017d60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017d62:	4b16      	ldr	r3, [pc, #88]	@ (8017dbc <sys_timeouts_sleeptime+0x60>)
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d102      	bne.n	8017d70 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d6e:	e020      	b.n	8017db2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017d70:	f7f4 f9ba 	bl	800c0e8 <sys_now>
 8017d74:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017d76:	4b11      	ldr	r3, [pc, #68]	@ (8017dbc <sys_timeouts_sleeptime+0x60>)
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	685a      	ldr	r2, [r3, #4]
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	1ad3      	subs	r3, r2, r3
 8017d80:	0fdb      	lsrs	r3, r3, #31
 8017d82:	f003 0301 	and.w	r3, r3, #1
 8017d86:	b2db      	uxtb	r3, r3
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d001      	beq.n	8017d90 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	e010      	b.n	8017db2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017d90:	4b0a      	ldr	r3, [pc, #40]	@ (8017dbc <sys_timeouts_sleeptime+0x60>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	685a      	ldr	r2, [r3, #4]
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	1ad3      	subs	r3, r2, r3
 8017d9a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017d9c:	683b      	ldr	r3, [r7, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	da06      	bge.n	8017db0 <sys_timeouts_sleeptime+0x54>
 8017da2:	4b07      	ldr	r3, [pc, #28]	@ (8017dc0 <sys_timeouts_sleeptime+0x64>)
 8017da4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8017da8:	4906      	ldr	r1, [pc, #24]	@ (8017dc4 <sys_timeouts_sleeptime+0x68>)
 8017daa:	4807      	ldr	r0, [pc, #28]	@ (8017dc8 <sys_timeouts_sleeptime+0x6c>)
 8017dac:	f003 fa72 	bl	801b294 <iprintf>
    return ret;
 8017db0:	683b      	ldr	r3, [r7, #0]
  }
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3708      	adds	r7, #8
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}
 8017dba:	bf00      	nop
 8017dbc:	24014c04 	.word	0x24014c04
 8017dc0:	0801e254 	.word	0x0801e254
 8017dc4:	0801e328 	.word	0x0801e328
 8017dc8:	0801e2c8 	.word	0x0801e2c8

08017dcc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017dd0:	f003 f960 	bl	801b094 <rand>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017ddc:	b29b      	uxth	r3, r3
 8017dde:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017de2:	b29a      	uxth	r2, r3
 8017de4:	4b01      	ldr	r3, [pc, #4]	@ (8017dec <udp_init+0x20>)
 8017de6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017de8:	bf00      	nop
 8017dea:	bd80      	pop	{r7, pc}
 8017dec:	240049ec 	.word	0x240049ec

08017df0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017df0:	b480      	push	{r7}
 8017df2:	b083      	sub	sp, #12
 8017df4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017df6:	2300      	movs	r3, #0
 8017df8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017dfa:	4b17      	ldr	r3, [pc, #92]	@ (8017e58 <udp_new_port+0x68>)
 8017dfc:	881b      	ldrh	r3, [r3, #0]
 8017dfe:	1c5a      	adds	r2, r3, #1
 8017e00:	b291      	uxth	r1, r2
 8017e02:	4a15      	ldr	r2, [pc, #84]	@ (8017e58 <udp_new_port+0x68>)
 8017e04:	8011      	strh	r1, [r2, #0]
 8017e06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	d103      	bne.n	8017e16 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017e0e:	4b12      	ldr	r3, [pc, #72]	@ (8017e58 <udp_new_port+0x68>)
 8017e10:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017e14:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e16:	4b11      	ldr	r3, [pc, #68]	@ (8017e5c <udp_new_port+0x6c>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	603b      	str	r3, [r7, #0]
 8017e1c:	e011      	b.n	8017e42 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	8a5a      	ldrh	r2, [r3, #18]
 8017e22:	4b0d      	ldr	r3, [pc, #52]	@ (8017e58 <udp_new_port+0x68>)
 8017e24:	881b      	ldrh	r3, [r3, #0]
 8017e26:	429a      	cmp	r2, r3
 8017e28:	d108      	bne.n	8017e3c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017e2a:	88fb      	ldrh	r3, [r7, #6]
 8017e2c:	3301      	adds	r3, #1
 8017e2e:	80fb      	strh	r3, [r7, #6]
 8017e30:	88fb      	ldrh	r3, [r7, #6]
 8017e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017e36:	d3e0      	bcc.n	8017dfa <udp_new_port+0xa>
        return 0;
 8017e38:	2300      	movs	r3, #0
 8017e3a:	e007      	b.n	8017e4c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e3c:	683b      	ldr	r3, [r7, #0]
 8017e3e:	68db      	ldr	r3, [r3, #12]
 8017e40:	603b      	str	r3, [r7, #0]
 8017e42:	683b      	ldr	r3, [r7, #0]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d1ea      	bne.n	8017e1e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017e48:	4b03      	ldr	r3, [pc, #12]	@ (8017e58 <udp_new_port+0x68>)
 8017e4a:	881b      	ldrh	r3, [r3, #0]
}
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	370c      	adds	r7, #12
 8017e50:	46bd      	mov	sp, r7
 8017e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e56:	4770      	bx	lr
 8017e58:	240049ec 	.word	0x240049ec
 8017e5c:	24014c10 	.word	0x24014c10

08017e60 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b084      	sub	sp, #16
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	60f8      	str	r0, [r7, #12]
 8017e68:	60b9      	str	r1, [r7, #8]
 8017e6a:	4613      	mov	r3, r2
 8017e6c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d105      	bne.n	8017e80 <udp_input_local_match+0x20>
 8017e74:	4b27      	ldr	r3, [pc, #156]	@ (8017f14 <udp_input_local_match+0xb4>)
 8017e76:	2287      	movs	r2, #135	@ 0x87
 8017e78:	4927      	ldr	r1, [pc, #156]	@ (8017f18 <udp_input_local_match+0xb8>)
 8017e7a:	4828      	ldr	r0, [pc, #160]	@ (8017f1c <udp_input_local_match+0xbc>)
 8017e7c:	f003 fa0a 	bl	801b294 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d105      	bne.n	8017e92 <udp_input_local_match+0x32>
 8017e86:	4b23      	ldr	r3, [pc, #140]	@ (8017f14 <udp_input_local_match+0xb4>)
 8017e88:	2288      	movs	r2, #136	@ 0x88
 8017e8a:	4925      	ldr	r1, [pc, #148]	@ (8017f20 <udp_input_local_match+0xc0>)
 8017e8c:	4823      	ldr	r0, [pc, #140]	@ (8017f1c <udp_input_local_match+0xbc>)
 8017e8e:	f003 fa01 	bl	801b294 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	7a1b      	ldrb	r3, [r3, #8]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d00b      	beq.n	8017eb2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	7a1a      	ldrb	r2, [r3, #8]
 8017e9e:	4b21      	ldr	r3, [pc, #132]	@ (8017f24 <udp_input_local_match+0xc4>)
 8017ea0:	685b      	ldr	r3, [r3, #4]
 8017ea2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017eaa:	429a      	cmp	r2, r3
 8017eac:	d001      	beq.n	8017eb2 <udp_input_local_match+0x52>
    return 0;
 8017eae:	2300      	movs	r3, #0
 8017eb0:	e02b      	b.n	8017f0a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017eb2:	79fb      	ldrb	r3, [r7, #7]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d018      	beq.n	8017eea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d013      	beq.n	8017ee6 <udp_input_local_match+0x86>
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d00f      	beq.n	8017ee6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017ec6:	4b17      	ldr	r3, [pc, #92]	@ (8017f24 <udp_input_local_match+0xc4>)
 8017ec8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ece:	d00a      	beq.n	8017ee6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	681a      	ldr	r2, [r3, #0]
 8017ed4:	4b13      	ldr	r3, [pc, #76]	@ (8017f24 <udp_input_local_match+0xc4>)
 8017ed6:	695b      	ldr	r3, [r3, #20]
 8017ed8:	405a      	eors	r2, r3
 8017eda:	68bb      	ldr	r3, [r7, #8]
 8017edc:	3308      	adds	r3, #8
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d110      	bne.n	8017f08 <udp_input_local_match+0xa8>
          return 1;
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	e00f      	b.n	8017f0a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d009      	beq.n	8017f04 <udp_input_local_match+0xa4>
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d005      	beq.n	8017f04 <udp_input_local_match+0xa4>
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	681a      	ldr	r2, [r3, #0]
 8017efc:	4b09      	ldr	r3, [pc, #36]	@ (8017f24 <udp_input_local_match+0xc4>)
 8017efe:	695b      	ldr	r3, [r3, #20]
 8017f00:	429a      	cmp	r2, r3
 8017f02:	d101      	bne.n	8017f08 <udp_input_local_match+0xa8>
        return 1;
 8017f04:	2301      	movs	r3, #1
 8017f06:	e000      	b.n	8017f0a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017f08:	2300      	movs	r3, #0
}
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	3710      	adds	r7, #16
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
 8017f12:	bf00      	nop
 8017f14:	0801e33c 	.word	0x0801e33c
 8017f18:	0801e36c 	.word	0x0801e36c
 8017f1c:	0801e390 	.word	0x0801e390
 8017f20:	0801e3b8 	.word	0x0801e3b8
 8017f24:	2400e078 	.word	0x2400e078

08017f28 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017f28:	b590      	push	{r4, r7, lr}
 8017f2a:	b08d      	sub	sp, #52	@ 0x34
 8017f2c:	af02      	add	r7, sp, #8
 8017f2e:	6078      	str	r0, [r7, #4]
 8017f30:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017f32:	2300      	movs	r3, #0
 8017f34:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d105      	bne.n	8017f48 <udp_input+0x20>
 8017f3c:	4b7c      	ldr	r3, [pc, #496]	@ (8018130 <udp_input+0x208>)
 8017f3e:	22cf      	movs	r2, #207	@ 0xcf
 8017f40:	497c      	ldr	r1, [pc, #496]	@ (8018134 <udp_input+0x20c>)
 8017f42:	487d      	ldr	r0, [pc, #500]	@ (8018138 <udp_input+0x210>)
 8017f44:	f003 f9a6 	bl	801b294 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d105      	bne.n	8017f5a <udp_input+0x32>
 8017f4e:	4b78      	ldr	r3, [pc, #480]	@ (8018130 <udp_input+0x208>)
 8017f50:	22d0      	movs	r2, #208	@ 0xd0
 8017f52:	497a      	ldr	r1, [pc, #488]	@ (801813c <udp_input+0x214>)
 8017f54:	4878      	ldr	r0, [pc, #480]	@ (8018138 <udp_input+0x210>)
 8017f56:	f003 f99d 	bl	801b294 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	895b      	ldrh	r3, [r3, #10]
 8017f5e:	2b07      	cmp	r3, #7
 8017f60:	d803      	bhi.n	8017f6a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017f62:	6878      	ldr	r0, [r7, #4]
 8017f64:	f7fa f8c4 	bl	80120f0 <pbuf_free>
    goto end;
 8017f68:	e0de      	b.n	8018128 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	685b      	ldr	r3, [r3, #4]
 8017f6e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017f70:	4b73      	ldr	r3, [pc, #460]	@ (8018140 <udp_input+0x218>)
 8017f72:	695b      	ldr	r3, [r3, #20]
 8017f74:	4a72      	ldr	r2, [pc, #456]	@ (8018140 <udp_input+0x218>)
 8017f76:	6812      	ldr	r2, [r2, #0]
 8017f78:	4611      	mov	r1, r2
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	f001 ffb2 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 8017f80:	4603      	mov	r3, r0
 8017f82:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	881b      	ldrh	r3, [r3, #0]
 8017f88:	b29b      	uxth	r3, r3
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f7f8 fbfe 	bl	801078c <lwip_htons>
 8017f90:	4603      	mov	r3, r0
 8017f92:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017f94:	697b      	ldr	r3, [r7, #20]
 8017f96:	885b      	ldrh	r3, [r3, #2]
 8017f98:	b29b      	uxth	r3, r3
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f7f8 fbf6 	bl	801078c <lwip_htons>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017fac:	2300      	movs	r3, #0
 8017fae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fb0:	4b64      	ldr	r3, [pc, #400]	@ (8018144 <udp_input+0x21c>)
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8017fb6:	e054      	b.n	8018062 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fba:	8a5b      	ldrh	r3, [r3, #18]
 8017fbc:	89fa      	ldrh	r2, [r7, #14]
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d14a      	bne.n	8018058 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017fc2:	7cfb      	ldrb	r3, [r7, #19]
 8017fc4:	461a      	mov	r2, r3
 8017fc6:	6839      	ldr	r1, [r7, #0]
 8017fc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017fca:	f7ff ff49 	bl	8017e60 <udp_input_local_match>
 8017fce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d041      	beq.n	8018058 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fd6:	7c1b      	ldrb	r3, [r3, #16]
 8017fd8:	f003 0304 	and.w	r3, r3, #4
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d11d      	bne.n	801801c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017fe0:	69fb      	ldr	r3, [r7, #28]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d102      	bne.n	8017fec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fe8:	61fb      	str	r3, [r7, #28]
 8017fea:	e017      	b.n	801801c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017fec:	7cfb      	ldrb	r3, [r7, #19]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d014      	beq.n	801801c <udp_input+0xf4>
 8017ff2:	4b53      	ldr	r3, [pc, #332]	@ (8018140 <udp_input+0x218>)
 8017ff4:	695b      	ldr	r3, [r3, #20]
 8017ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ffa:	d10f      	bne.n	801801c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017ffc:	69fb      	ldr	r3, [r7, #28]
 8017ffe:	681a      	ldr	r2, [r3, #0]
 8018000:	683b      	ldr	r3, [r7, #0]
 8018002:	3304      	adds	r3, #4
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	429a      	cmp	r2, r3
 8018008:	d008      	beq.n	801801c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801800c:	681a      	ldr	r2, [r3, #0]
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	3304      	adds	r3, #4
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	429a      	cmp	r2, r3
 8018016:	d101      	bne.n	801801c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801801a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801801e:	8a9b      	ldrh	r3, [r3, #20]
 8018020:	8a3a      	ldrh	r2, [r7, #16]
 8018022:	429a      	cmp	r2, r3
 8018024:	d118      	bne.n	8018058 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018028:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801802a:	2b00      	cmp	r3, #0
 801802c:	d005      	beq.n	801803a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018030:	685a      	ldr	r2, [r3, #4]
 8018032:	4b43      	ldr	r3, [pc, #268]	@ (8018140 <udp_input+0x218>)
 8018034:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018036:	429a      	cmp	r2, r3
 8018038:	d10e      	bne.n	8018058 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801803a:	6a3b      	ldr	r3, [r7, #32]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d014      	beq.n	801806a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018042:	68da      	ldr	r2, [r3, #12]
 8018044:	6a3b      	ldr	r3, [r7, #32]
 8018046:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018048:	4b3e      	ldr	r3, [pc, #248]	@ (8018144 <udp_input+0x21c>)
 801804a:	681a      	ldr	r2, [r3, #0]
 801804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801804e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018050:	4a3c      	ldr	r2, [pc, #240]	@ (8018144 <udp_input+0x21c>)
 8018052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018054:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018056:	e008      	b.n	801806a <udp_input+0x142>
      }
    }

    prev = pcb;
 8018058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801805a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801805e:	68db      	ldr	r3, [r3, #12]
 8018060:	627b      	str	r3, [r7, #36]	@ 0x24
 8018062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018064:	2b00      	cmp	r3, #0
 8018066:	d1a7      	bne.n	8017fb8 <udp_input+0x90>
 8018068:	e000      	b.n	801806c <udp_input+0x144>
        break;
 801806a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801806c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801806e:	2b00      	cmp	r3, #0
 8018070:	d101      	bne.n	8018076 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018072:	69fb      	ldr	r3, [r7, #28]
 8018074:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018078:	2b00      	cmp	r3, #0
 801807a:	d002      	beq.n	8018082 <udp_input+0x15a>
    for_us = 1;
 801807c:	2301      	movs	r3, #1
 801807e:	76fb      	strb	r3, [r7, #27]
 8018080:	e00a      	b.n	8018098 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018082:	683b      	ldr	r3, [r7, #0]
 8018084:	3304      	adds	r3, #4
 8018086:	681a      	ldr	r2, [r3, #0]
 8018088:	4b2d      	ldr	r3, [pc, #180]	@ (8018140 <udp_input+0x218>)
 801808a:	695b      	ldr	r3, [r3, #20]
 801808c:	429a      	cmp	r2, r3
 801808e:	bf0c      	ite	eq
 8018090:	2301      	moveq	r3, #1
 8018092:	2300      	movne	r3, #0
 8018094:	b2db      	uxtb	r3, r3
 8018096:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018098:	7efb      	ldrb	r3, [r7, #27]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d041      	beq.n	8018122 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801809e:	2108      	movs	r1, #8
 80180a0:	6878      	ldr	r0, [r7, #4]
 80180a2:	f7f9 ff9f 	bl	8011fe4 <pbuf_remove_header>
 80180a6:	4603      	mov	r3, r0
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d00a      	beq.n	80180c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80180ac:	4b20      	ldr	r3, [pc, #128]	@ (8018130 <udp_input+0x208>)
 80180ae:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80180b2:	4925      	ldr	r1, [pc, #148]	@ (8018148 <udp_input+0x220>)
 80180b4:	4820      	ldr	r0, [pc, #128]	@ (8018138 <udp_input+0x210>)
 80180b6:	f003 f8ed 	bl	801b294 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f7fa f818 	bl	80120f0 <pbuf_free>
      goto end;
 80180c0:	e032      	b.n	8018128 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80180c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d012      	beq.n	80180ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80180c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180ca:	699b      	ldr	r3, [r3, #24]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d00a      	beq.n	80180e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80180d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180d2:	699c      	ldr	r4, [r3, #24]
 80180d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180d6:	69d8      	ldr	r0, [r3, #28]
 80180d8:	8a3b      	ldrh	r3, [r7, #16]
 80180da:	9300      	str	r3, [sp, #0]
 80180dc:	4b1b      	ldr	r3, [pc, #108]	@ (801814c <udp_input+0x224>)
 80180de:	687a      	ldr	r2, [r7, #4]
 80180e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80180e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80180e4:	e021      	b.n	801812a <udp_input+0x202>
        pbuf_free(p);
 80180e6:	6878      	ldr	r0, [r7, #4]
 80180e8:	f7fa f802 	bl	80120f0 <pbuf_free>
        goto end;
 80180ec:	e01c      	b.n	8018128 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80180ee:	7cfb      	ldrb	r3, [r7, #19]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d112      	bne.n	801811a <udp_input+0x1f2>
 80180f4:	4b12      	ldr	r3, [pc, #72]	@ (8018140 <udp_input+0x218>)
 80180f6:	695b      	ldr	r3, [r3, #20]
 80180f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80180fc:	2be0      	cmp	r3, #224	@ 0xe0
 80180fe:	d00c      	beq.n	801811a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018100:	4b0f      	ldr	r3, [pc, #60]	@ (8018140 <udp_input+0x218>)
 8018102:	899b      	ldrh	r3, [r3, #12]
 8018104:	3308      	adds	r3, #8
 8018106:	b29b      	uxth	r3, r3
 8018108:	b21b      	sxth	r3, r3
 801810a:	4619      	mov	r1, r3
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f7f9 ffdc 	bl	80120ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018112:	2103      	movs	r1, #3
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f001 fbaf 	bl	8019878 <icmp_dest_unreach>
      pbuf_free(p);
 801811a:	6878      	ldr	r0, [r7, #4]
 801811c:	f7f9 ffe8 	bl	80120f0 <pbuf_free>
  return;
 8018120:	e003      	b.n	801812a <udp_input+0x202>
    pbuf_free(p);
 8018122:	6878      	ldr	r0, [r7, #4]
 8018124:	f7f9 ffe4 	bl	80120f0 <pbuf_free>
  return;
 8018128:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801812a:	372c      	adds	r7, #44	@ 0x2c
 801812c:	46bd      	mov	sp, r7
 801812e:	bd90      	pop	{r4, r7, pc}
 8018130:	0801e33c 	.word	0x0801e33c
 8018134:	0801e3e0 	.word	0x0801e3e0
 8018138:	0801e390 	.word	0x0801e390
 801813c:	0801e3f8 	.word	0x0801e3f8
 8018140:	2400e078 	.word	0x2400e078
 8018144:	24014c10 	.word	0x24014c10
 8018148:	0801e414 	.word	0x0801e414
 801814c:	2400e088 	.word	0x2400e088

08018150 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b082      	sub	sp, #8
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
 8018158:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d109      	bne.n	8018174 <udp_send+0x24>
 8018160:	4b11      	ldr	r3, [pc, #68]	@ (80181a8 <udp_send+0x58>)
 8018162:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8018166:	4911      	ldr	r1, [pc, #68]	@ (80181ac <udp_send+0x5c>)
 8018168:	4811      	ldr	r0, [pc, #68]	@ (80181b0 <udp_send+0x60>)
 801816a:	f003 f893 	bl	801b294 <iprintf>
 801816e:	f06f 030f 	mvn.w	r3, #15
 8018172:	e015      	b.n	80181a0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d109      	bne.n	801818e <udp_send+0x3e>
 801817a:	4b0b      	ldr	r3, [pc, #44]	@ (80181a8 <udp_send+0x58>)
 801817c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8018180:	490c      	ldr	r1, [pc, #48]	@ (80181b4 <udp_send+0x64>)
 8018182:	480b      	ldr	r0, [pc, #44]	@ (80181b0 <udp_send+0x60>)
 8018184:	f003 f886 	bl	801b294 <iprintf>
 8018188:	f06f 030f 	mvn.w	r3, #15
 801818c:	e008      	b.n	80181a0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	1d1a      	adds	r2, r3, #4
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	8a9b      	ldrh	r3, [r3, #20]
 8018196:	6839      	ldr	r1, [r7, #0]
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f000 f80d 	bl	80181b8 <udp_sendto>
 801819e:	4603      	mov	r3, r0
}
 80181a0:	4618      	mov	r0, r3
 80181a2:	3708      	adds	r7, #8
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}
 80181a8:	0801e33c 	.word	0x0801e33c
 80181ac:	0801e430 	.word	0x0801e430
 80181b0:	0801e390 	.word	0x0801e390
 80181b4:	0801e448 	.word	0x0801e448

080181b8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b088      	sub	sp, #32
 80181bc:	af02      	add	r7, sp, #8
 80181be:	60f8      	str	r0, [r7, #12]
 80181c0:	60b9      	str	r1, [r7, #8]
 80181c2:	607a      	str	r2, [r7, #4]
 80181c4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d109      	bne.n	80181e0 <udp_sendto+0x28>
 80181cc:	4b23      	ldr	r3, [pc, #140]	@ (801825c <udp_sendto+0xa4>)
 80181ce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80181d2:	4923      	ldr	r1, [pc, #140]	@ (8018260 <udp_sendto+0xa8>)
 80181d4:	4823      	ldr	r0, [pc, #140]	@ (8018264 <udp_sendto+0xac>)
 80181d6:	f003 f85d 	bl	801b294 <iprintf>
 80181da:	f06f 030f 	mvn.w	r3, #15
 80181de:	e038      	b.n	8018252 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d109      	bne.n	80181fa <udp_sendto+0x42>
 80181e6:	4b1d      	ldr	r3, [pc, #116]	@ (801825c <udp_sendto+0xa4>)
 80181e8:	f240 2219 	movw	r2, #537	@ 0x219
 80181ec:	491e      	ldr	r1, [pc, #120]	@ (8018268 <udp_sendto+0xb0>)
 80181ee:	481d      	ldr	r0, [pc, #116]	@ (8018264 <udp_sendto+0xac>)
 80181f0:	f003 f850 	bl	801b294 <iprintf>
 80181f4:	f06f 030f 	mvn.w	r3, #15
 80181f8:	e02b      	b.n	8018252 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d109      	bne.n	8018214 <udp_sendto+0x5c>
 8018200:	4b16      	ldr	r3, [pc, #88]	@ (801825c <udp_sendto+0xa4>)
 8018202:	f240 221a 	movw	r2, #538	@ 0x21a
 8018206:	4919      	ldr	r1, [pc, #100]	@ (801826c <udp_sendto+0xb4>)
 8018208:	4816      	ldr	r0, [pc, #88]	@ (8018264 <udp_sendto+0xac>)
 801820a:	f003 f843 	bl	801b294 <iprintf>
 801820e:	f06f 030f 	mvn.w	r3, #15
 8018212:	e01e      	b.n	8018252 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	7a1b      	ldrb	r3, [r3, #8]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d006      	beq.n	801822a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	7a1b      	ldrb	r3, [r3, #8]
 8018220:	4618      	mov	r0, r3
 8018222:	f7f9 fbd3 	bl	80119cc <netif_get_by_index>
 8018226:	6178      	str	r0, [r7, #20]
 8018228:	e003      	b.n	8018232 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801822a:	6878      	ldr	r0, [r7, #4]
 801822c:	f001 fbb8 	bl	80199a0 <ip4_route>
 8018230:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8018232:	697b      	ldr	r3, [r7, #20]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d102      	bne.n	801823e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018238:	f06f 0303 	mvn.w	r3, #3
 801823c:	e009      	b.n	8018252 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801823e:	887a      	ldrh	r2, [r7, #2]
 8018240:	697b      	ldr	r3, [r7, #20]
 8018242:	9300      	str	r3, [sp, #0]
 8018244:	4613      	mov	r3, r2
 8018246:	687a      	ldr	r2, [r7, #4]
 8018248:	68b9      	ldr	r1, [r7, #8]
 801824a:	68f8      	ldr	r0, [r7, #12]
 801824c:	f000 f810 	bl	8018270 <udp_sendto_if>
 8018250:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018252:	4618      	mov	r0, r3
 8018254:	3718      	adds	r7, #24
 8018256:	46bd      	mov	sp, r7
 8018258:	bd80      	pop	{r7, pc}
 801825a:	bf00      	nop
 801825c:	0801e33c 	.word	0x0801e33c
 8018260:	0801e460 	.word	0x0801e460
 8018264:	0801e390 	.word	0x0801e390
 8018268:	0801e478 	.word	0x0801e478
 801826c:	0801e494 	.word	0x0801e494

08018270 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b088      	sub	sp, #32
 8018274:	af02      	add	r7, sp, #8
 8018276:	60f8      	str	r0, [r7, #12]
 8018278:	60b9      	str	r1, [r7, #8]
 801827a:	607a      	str	r2, [r7, #4]
 801827c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d109      	bne.n	8018298 <udp_sendto_if+0x28>
 8018284:	4b2e      	ldr	r3, [pc, #184]	@ (8018340 <udp_sendto_if+0xd0>)
 8018286:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801828a:	492e      	ldr	r1, [pc, #184]	@ (8018344 <udp_sendto_if+0xd4>)
 801828c:	482e      	ldr	r0, [pc, #184]	@ (8018348 <udp_sendto_if+0xd8>)
 801828e:	f003 f801 	bl	801b294 <iprintf>
 8018292:	f06f 030f 	mvn.w	r3, #15
 8018296:	e04f      	b.n	8018338 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d109      	bne.n	80182b2 <udp_sendto_if+0x42>
 801829e:	4b28      	ldr	r3, [pc, #160]	@ (8018340 <udp_sendto_if+0xd0>)
 80182a0:	f240 2281 	movw	r2, #641	@ 0x281
 80182a4:	4929      	ldr	r1, [pc, #164]	@ (801834c <udp_sendto_if+0xdc>)
 80182a6:	4828      	ldr	r0, [pc, #160]	@ (8018348 <udp_sendto_if+0xd8>)
 80182a8:	f002 fff4 	bl	801b294 <iprintf>
 80182ac:	f06f 030f 	mvn.w	r3, #15
 80182b0:	e042      	b.n	8018338 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d109      	bne.n	80182cc <udp_sendto_if+0x5c>
 80182b8:	4b21      	ldr	r3, [pc, #132]	@ (8018340 <udp_sendto_if+0xd0>)
 80182ba:	f240 2282 	movw	r2, #642	@ 0x282
 80182be:	4924      	ldr	r1, [pc, #144]	@ (8018350 <udp_sendto_if+0xe0>)
 80182c0:	4821      	ldr	r0, [pc, #132]	@ (8018348 <udp_sendto_if+0xd8>)
 80182c2:	f002 ffe7 	bl	801b294 <iprintf>
 80182c6:	f06f 030f 	mvn.w	r3, #15
 80182ca:	e035      	b.n	8018338 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80182cc:	6a3b      	ldr	r3, [r7, #32]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d109      	bne.n	80182e6 <udp_sendto_if+0x76>
 80182d2:	4b1b      	ldr	r3, [pc, #108]	@ (8018340 <udp_sendto_if+0xd0>)
 80182d4:	f240 2283 	movw	r2, #643	@ 0x283
 80182d8:	491e      	ldr	r1, [pc, #120]	@ (8018354 <udp_sendto_if+0xe4>)
 80182da:	481b      	ldr	r0, [pc, #108]	@ (8018348 <udp_sendto_if+0xd8>)
 80182dc:	f002 ffda 	bl	801b294 <iprintf>
 80182e0:	f06f 030f 	mvn.w	r3, #15
 80182e4:	e028      	b.n	8018338 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d009      	beq.n	8018300 <udp_sendto_if+0x90>
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d005      	beq.n	8018300 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80182fc:	2be0      	cmp	r3, #224	@ 0xe0
 80182fe:	d103      	bne.n	8018308 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018300:	6a3b      	ldr	r3, [r7, #32]
 8018302:	3304      	adds	r3, #4
 8018304:	617b      	str	r3, [r7, #20]
 8018306:	e00b      	b.n	8018320 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	6a3b      	ldr	r3, [r7, #32]
 801830e:	3304      	adds	r3, #4
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	429a      	cmp	r2, r3
 8018314:	d002      	beq.n	801831c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018316:	f06f 0303 	mvn.w	r3, #3
 801831a:	e00d      	b.n	8018338 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018320:	887a      	ldrh	r2, [r7, #2]
 8018322:	697b      	ldr	r3, [r7, #20]
 8018324:	9301      	str	r3, [sp, #4]
 8018326:	6a3b      	ldr	r3, [r7, #32]
 8018328:	9300      	str	r3, [sp, #0]
 801832a:	4613      	mov	r3, r2
 801832c:	687a      	ldr	r2, [r7, #4]
 801832e:	68b9      	ldr	r1, [r7, #8]
 8018330:	68f8      	ldr	r0, [r7, #12]
 8018332:	f000 f811 	bl	8018358 <udp_sendto_if_src>
 8018336:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018338:	4618      	mov	r0, r3
 801833a:	3718      	adds	r7, #24
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}
 8018340:	0801e33c 	.word	0x0801e33c
 8018344:	0801e4b0 	.word	0x0801e4b0
 8018348:	0801e390 	.word	0x0801e390
 801834c:	0801e4cc 	.word	0x0801e4cc
 8018350:	0801e4e8 	.word	0x0801e4e8
 8018354:	0801e508 	.word	0x0801e508

08018358 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b08c      	sub	sp, #48	@ 0x30
 801835c:	af04      	add	r7, sp, #16
 801835e:	60f8      	str	r0, [r7, #12]
 8018360:	60b9      	str	r1, [r7, #8]
 8018362:	607a      	str	r2, [r7, #4]
 8018364:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d109      	bne.n	8018380 <udp_sendto_if_src+0x28>
 801836c:	4b65      	ldr	r3, [pc, #404]	@ (8018504 <udp_sendto_if_src+0x1ac>)
 801836e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8018372:	4965      	ldr	r1, [pc, #404]	@ (8018508 <udp_sendto_if_src+0x1b0>)
 8018374:	4865      	ldr	r0, [pc, #404]	@ (801850c <udp_sendto_if_src+0x1b4>)
 8018376:	f002 ff8d 	bl	801b294 <iprintf>
 801837a:	f06f 030f 	mvn.w	r3, #15
 801837e:	e0bc      	b.n	80184fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018380:	68bb      	ldr	r3, [r7, #8]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d109      	bne.n	801839a <udp_sendto_if_src+0x42>
 8018386:	4b5f      	ldr	r3, [pc, #380]	@ (8018504 <udp_sendto_if_src+0x1ac>)
 8018388:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801838c:	4960      	ldr	r1, [pc, #384]	@ (8018510 <udp_sendto_if_src+0x1b8>)
 801838e:	485f      	ldr	r0, [pc, #380]	@ (801850c <udp_sendto_if_src+0x1b4>)
 8018390:	f002 ff80 	bl	801b294 <iprintf>
 8018394:	f06f 030f 	mvn.w	r3, #15
 8018398:	e0af      	b.n	80184fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d109      	bne.n	80183b4 <udp_sendto_if_src+0x5c>
 80183a0:	4b58      	ldr	r3, [pc, #352]	@ (8018504 <udp_sendto_if_src+0x1ac>)
 80183a2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80183a6:	495b      	ldr	r1, [pc, #364]	@ (8018514 <udp_sendto_if_src+0x1bc>)
 80183a8:	4858      	ldr	r0, [pc, #352]	@ (801850c <udp_sendto_if_src+0x1b4>)
 80183aa:	f002 ff73 	bl	801b294 <iprintf>
 80183ae:	f06f 030f 	mvn.w	r3, #15
 80183b2:	e0a2      	b.n	80184fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80183b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d109      	bne.n	80183ce <udp_sendto_if_src+0x76>
 80183ba:	4b52      	ldr	r3, [pc, #328]	@ (8018504 <udp_sendto_if_src+0x1ac>)
 80183bc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80183c0:	4955      	ldr	r1, [pc, #340]	@ (8018518 <udp_sendto_if_src+0x1c0>)
 80183c2:	4852      	ldr	r0, [pc, #328]	@ (801850c <udp_sendto_if_src+0x1b4>)
 80183c4:	f002 ff66 	bl	801b294 <iprintf>
 80183c8:	f06f 030f 	mvn.w	r3, #15
 80183cc:	e095      	b.n	80184fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80183ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d109      	bne.n	80183e8 <udp_sendto_if_src+0x90>
 80183d4:	4b4b      	ldr	r3, [pc, #300]	@ (8018504 <udp_sendto_if_src+0x1ac>)
 80183d6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80183da:	4950      	ldr	r1, [pc, #320]	@ (801851c <udp_sendto_if_src+0x1c4>)
 80183dc:	484b      	ldr	r0, [pc, #300]	@ (801850c <udp_sendto_if_src+0x1b4>)
 80183de:	f002 ff59 	bl	801b294 <iprintf>
 80183e2:	f06f 030f 	mvn.w	r3, #15
 80183e6:	e088      	b.n	80184fa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	8a5b      	ldrh	r3, [r3, #18]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d10f      	bne.n	8018410 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80183f0:	68f9      	ldr	r1, [r7, #12]
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	8a5b      	ldrh	r3, [r3, #18]
 80183f6:	461a      	mov	r2, r3
 80183f8:	68f8      	ldr	r0, [r7, #12]
 80183fa:	f000 f893 	bl	8018524 <udp_bind>
 80183fe:	4603      	mov	r3, r0
 8018400:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8018402:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d002      	beq.n	8018410 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801840a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801840e:	e074      	b.n	80184fa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018410:	68bb      	ldr	r3, [r7, #8]
 8018412:	891b      	ldrh	r3, [r3, #8]
 8018414:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018418:	4293      	cmp	r3, r2
 801841a:	d902      	bls.n	8018422 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801841c:	f04f 33ff 	mov.w	r3, #4294967295
 8018420:	e06b      	b.n	80184fa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8018422:	2108      	movs	r1, #8
 8018424:	68b8      	ldr	r0, [r7, #8]
 8018426:	f7f9 fdcd 	bl	8011fc4 <pbuf_add_header>
 801842a:	4603      	mov	r3, r0
 801842c:	2b00      	cmp	r3, #0
 801842e:	d015      	beq.n	801845c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018430:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018434:	2108      	movs	r1, #8
 8018436:	2022      	movs	r0, #34	@ 0x22
 8018438:	f7f9 fb72 	bl	8011b20 <pbuf_alloc>
 801843c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801843e:	69fb      	ldr	r3, [r7, #28]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d102      	bne.n	801844a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018444:	f04f 33ff 	mov.w	r3, #4294967295
 8018448:	e057      	b.n	80184fa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	891b      	ldrh	r3, [r3, #8]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d006      	beq.n	8018460 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8018452:	68b9      	ldr	r1, [r7, #8]
 8018454:	69f8      	ldr	r0, [r7, #28]
 8018456:	f7f9 ff6f 	bl	8012338 <pbuf_chain>
 801845a:	e001      	b.n	8018460 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018460:	69fb      	ldr	r3, [r7, #28]
 8018462:	895b      	ldrh	r3, [r3, #10]
 8018464:	2b07      	cmp	r3, #7
 8018466:	d806      	bhi.n	8018476 <udp_sendto_if_src+0x11e>
 8018468:	4b26      	ldr	r3, [pc, #152]	@ (8018504 <udp_sendto_if_src+0x1ac>)
 801846a:	f240 320d 	movw	r2, #781	@ 0x30d
 801846e:	492c      	ldr	r1, [pc, #176]	@ (8018520 <udp_sendto_if_src+0x1c8>)
 8018470:	4826      	ldr	r0, [pc, #152]	@ (801850c <udp_sendto_if_src+0x1b4>)
 8018472:	f002 ff0f 	bl	801b294 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018476:	69fb      	ldr	r3, [r7, #28]
 8018478:	685b      	ldr	r3, [r3, #4]
 801847a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	8a5b      	ldrh	r3, [r3, #18]
 8018480:	4618      	mov	r0, r3
 8018482:	f7f8 f983 	bl	801078c <lwip_htons>
 8018486:	4603      	mov	r3, r0
 8018488:	461a      	mov	r2, r3
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801848e:	887b      	ldrh	r3, [r7, #2]
 8018490:	4618      	mov	r0, r3
 8018492:	f7f8 f97b 	bl	801078c <lwip_htons>
 8018496:	4603      	mov	r3, r0
 8018498:	461a      	mov	r2, r3
 801849a:	697b      	ldr	r3, [r7, #20]
 801849c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	2200      	movs	r2, #0
 80184a2:	719a      	strb	r2, [r3, #6]
 80184a4:	2200      	movs	r2, #0
 80184a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80184a8:	69fb      	ldr	r3, [r7, #28]
 80184aa:	891b      	ldrh	r3, [r3, #8]
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7f8 f96d 	bl	801078c <lwip_htons>
 80184b2:	4603      	mov	r3, r0
 80184b4:	461a      	mov	r2, r3
 80184b6:	697b      	ldr	r3, [r7, #20]
 80184b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80184ba:	2311      	movs	r3, #17
 80184bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	7adb      	ldrb	r3, [r3, #11]
 80184c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	7a9b      	ldrb	r3, [r3, #10]
 80184c8:	7cb9      	ldrb	r1, [r7, #18]
 80184ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80184cc:	9202      	str	r2, [sp, #8]
 80184ce:	7cfa      	ldrb	r2, [r7, #19]
 80184d0:	9201      	str	r2, [sp, #4]
 80184d2:	9300      	str	r3, [sp, #0]
 80184d4:	460b      	mov	r3, r1
 80184d6:	687a      	ldr	r2, [r7, #4]
 80184d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80184da:	69f8      	ldr	r0, [r7, #28]
 80184dc:	f001 fc54 	bl	8019d88 <ip4_output_if_src>
 80184e0:	4603      	mov	r3, r0
 80184e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80184e4:	69fa      	ldr	r2, [r7, #28]
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	429a      	cmp	r2, r3
 80184ea:	d004      	beq.n	80184f6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80184ec:	69f8      	ldr	r0, [r7, #28]
 80184ee:	f7f9 fdff 	bl	80120f0 <pbuf_free>
    q = NULL;
 80184f2:	2300      	movs	r3, #0
 80184f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80184f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	3720      	adds	r7, #32
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}
 8018502:	bf00      	nop
 8018504:	0801e33c 	.word	0x0801e33c
 8018508:	0801e528 	.word	0x0801e528
 801850c:	0801e390 	.word	0x0801e390
 8018510:	0801e548 	.word	0x0801e548
 8018514:	0801e568 	.word	0x0801e568
 8018518:	0801e58c 	.word	0x0801e58c
 801851c:	0801e5b0 	.word	0x0801e5b0
 8018520:	0801e5d4 	.word	0x0801e5d4

08018524 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b086      	sub	sp, #24
 8018528:	af00      	add	r7, sp, #0
 801852a:	60f8      	str	r0, [r7, #12]
 801852c:	60b9      	str	r1, [r7, #8]
 801852e:	4613      	mov	r3, r2
 8018530:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018532:	68bb      	ldr	r3, [r7, #8]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d101      	bne.n	801853c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018538:	4b39      	ldr	r3, [pc, #228]	@ (8018620 <udp_bind+0xfc>)
 801853a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d109      	bne.n	8018556 <udp_bind+0x32>
 8018542:	4b38      	ldr	r3, [pc, #224]	@ (8018624 <udp_bind+0x100>)
 8018544:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8018548:	4937      	ldr	r1, [pc, #220]	@ (8018628 <udp_bind+0x104>)
 801854a:	4838      	ldr	r0, [pc, #224]	@ (801862c <udp_bind+0x108>)
 801854c:	f002 fea2 	bl	801b294 <iprintf>
 8018550:	f06f 030f 	mvn.w	r3, #15
 8018554:	e060      	b.n	8018618 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018556:	2300      	movs	r3, #0
 8018558:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801855a:	4b35      	ldr	r3, [pc, #212]	@ (8018630 <udp_bind+0x10c>)
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	617b      	str	r3, [r7, #20]
 8018560:	e009      	b.n	8018576 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018562:	68fa      	ldr	r2, [r7, #12]
 8018564:	697b      	ldr	r3, [r7, #20]
 8018566:	429a      	cmp	r2, r3
 8018568:	d102      	bne.n	8018570 <udp_bind+0x4c>
      rebind = 1;
 801856a:	2301      	movs	r3, #1
 801856c:	74fb      	strb	r3, [r7, #19]
      break;
 801856e:	e005      	b.n	801857c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018570:	697b      	ldr	r3, [r7, #20]
 8018572:	68db      	ldr	r3, [r3, #12]
 8018574:	617b      	str	r3, [r7, #20]
 8018576:	697b      	ldr	r3, [r7, #20]
 8018578:	2b00      	cmp	r3, #0
 801857a:	d1f2      	bne.n	8018562 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801857c:	88fb      	ldrh	r3, [r7, #6]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d109      	bne.n	8018596 <udp_bind+0x72>
    port = udp_new_port();
 8018582:	f7ff fc35 	bl	8017df0 <udp_new_port>
 8018586:	4603      	mov	r3, r0
 8018588:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801858a:	88fb      	ldrh	r3, [r7, #6]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d12c      	bne.n	80185ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018590:	f06f 0307 	mvn.w	r3, #7
 8018594:	e040      	b.n	8018618 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018596:	4b26      	ldr	r3, [pc, #152]	@ (8018630 <udp_bind+0x10c>)
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	617b      	str	r3, [r7, #20]
 801859c:	e022      	b.n	80185e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801859e:	68fa      	ldr	r2, [r7, #12]
 80185a0:	697b      	ldr	r3, [r7, #20]
 80185a2:	429a      	cmp	r2, r3
 80185a4:	d01b      	beq.n	80185de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80185a6:	697b      	ldr	r3, [r7, #20]
 80185a8:	8a5b      	ldrh	r3, [r3, #18]
 80185aa:	88fa      	ldrh	r2, [r7, #6]
 80185ac:	429a      	cmp	r2, r3
 80185ae:	d116      	bne.n	80185de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185b0:	697b      	ldr	r3, [r7, #20]
 80185b2:	681a      	ldr	r2, [r3, #0]
 80185b4:	68bb      	ldr	r3, [r7, #8]
 80185b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80185b8:	429a      	cmp	r2, r3
 80185ba:	d00d      	beq.n	80185d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d00a      	beq.n	80185d8 <udp_bind+0xb4>
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d006      	beq.n	80185d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80185ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d003      	beq.n	80185d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d102      	bne.n	80185de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80185d8:	f06f 0307 	mvn.w	r3, #7
 80185dc:	e01c      	b.n	8018618 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	68db      	ldr	r3, [r3, #12]
 80185e2:	617b      	str	r3, [r7, #20]
 80185e4:	697b      	ldr	r3, [r7, #20]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d1d9      	bne.n	801859e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80185ea:	68bb      	ldr	r3, [r7, #8]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d002      	beq.n	80185f6 <udp_bind+0xd2>
 80185f0:	68bb      	ldr	r3, [r7, #8]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	e000      	b.n	80185f8 <udp_bind+0xd4>
 80185f6:	2300      	movs	r3, #0
 80185f8:	68fa      	ldr	r2, [r7, #12]
 80185fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	88fa      	ldrh	r2, [r7, #6]
 8018600:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018602:	7cfb      	ldrb	r3, [r7, #19]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d106      	bne.n	8018616 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018608:	4b09      	ldr	r3, [pc, #36]	@ (8018630 <udp_bind+0x10c>)
 801860a:	681a      	ldr	r2, [r3, #0]
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018610:	4a07      	ldr	r2, [pc, #28]	@ (8018630 <udp_bind+0x10c>)
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018616:	2300      	movs	r3, #0
}
 8018618:	4618      	mov	r0, r3
 801861a:	3718      	adds	r7, #24
 801861c:	46bd      	mov	sp, r7
 801861e:	bd80      	pop	{r7, pc}
 8018620:	0801eef0 	.word	0x0801eef0
 8018624:	0801e33c 	.word	0x0801e33c
 8018628:	0801e604 	.word	0x0801e604
 801862c:	0801e390 	.word	0x0801e390
 8018630:	24014c10 	.word	0x24014c10

08018634 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b086      	sub	sp, #24
 8018638:	af00      	add	r7, sp, #0
 801863a:	60f8      	str	r0, [r7, #12]
 801863c:	60b9      	str	r1, [r7, #8]
 801863e:	4613      	mov	r3, r2
 8018640:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d109      	bne.n	801865c <udp_connect+0x28>
 8018648:	4b2c      	ldr	r3, [pc, #176]	@ (80186fc <udp_connect+0xc8>)
 801864a:	f240 4235 	movw	r2, #1077	@ 0x435
 801864e:	492c      	ldr	r1, [pc, #176]	@ (8018700 <udp_connect+0xcc>)
 8018650:	482c      	ldr	r0, [pc, #176]	@ (8018704 <udp_connect+0xd0>)
 8018652:	f002 fe1f 	bl	801b294 <iprintf>
 8018656:	f06f 030f 	mvn.w	r3, #15
 801865a:	e04b      	b.n	80186f4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801865c:	68bb      	ldr	r3, [r7, #8]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d109      	bne.n	8018676 <udp_connect+0x42>
 8018662:	4b26      	ldr	r3, [pc, #152]	@ (80186fc <udp_connect+0xc8>)
 8018664:	f240 4236 	movw	r2, #1078	@ 0x436
 8018668:	4927      	ldr	r1, [pc, #156]	@ (8018708 <udp_connect+0xd4>)
 801866a:	4826      	ldr	r0, [pc, #152]	@ (8018704 <udp_connect+0xd0>)
 801866c:	f002 fe12 	bl	801b294 <iprintf>
 8018670:	f06f 030f 	mvn.w	r3, #15
 8018674:	e03e      	b.n	80186f4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	8a5b      	ldrh	r3, [r3, #18]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d10f      	bne.n	801869e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801867e:	68f9      	ldr	r1, [r7, #12]
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	8a5b      	ldrh	r3, [r3, #18]
 8018684:	461a      	mov	r2, r3
 8018686:	68f8      	ldr	r0, [r7, #12]
 8018688:	f7ff ff4c 	bl	8018524 <udp_bind>
 801868c:	4603      	mov	r3, r0
 801868e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018690:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d002      	beq.n	801869e <udp_connect+0x6a>
      return err;
 8018698:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801869c:	e02a      	b.n	80186f4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801869e:	68bb      	ldr	r3, [r7, #8]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d002      	beq.n	80186aa <udp_connect+0x76>
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	e000      	b.n	80186ac <udp_connect+0x78>
 80186aa:	2300      	movs	r3, #0
 80186ac:	68fa      	ldr	r2, [r7, #12]
 80186ae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	88fa      	ldrh	r2, [r7, #6]
 80186b4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	7c1b      	ldrb	r3, [r3, #16]
 80186ba:	f043 0304 	orr.w	r3, r3, #4
 80186be:	b2da      	uxtb	r2, r3
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80186c4:	4b11      	ldr	r3, [pc, #68]	@ (801870c <udp_connect+0xd8>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	617b      	str	r3, [r7, #20]
 80186ca:	e008      	b.n	80186de <udp_connect+0xaa>
    if (pcb == ipcb) {
 80186cc:	68fa      	ldr	r2, [r7, #12]
 80186ce:	697b      	ldr	r3, [r7, #20]
 80186d0:	429a      	cmp	r2, r3
 80186d2:	d101      	bne.n	80186d8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80186d4:	2300      	movs	r3, #0
 80186d6:	e00d      	b.n	80186f4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80186d8:	697b      	ldr	r3, [r7, #20]
 80186da:	68db      	ldr	r3, [r3, #12]
 80186dc:	617b      	str	r3, [r7, #20]
 80186de:	697b      	ldr	r3, [r7, #20]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d1f3      	bne.n	80186cc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80186e4:	4b09      	ldr	r3, [pc, #36]	@ (801870c <udp_connect+0xd8>)
 80186e6:	681a      	ldr	r2, [r3, #0]
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80186ec:	4a07      	ldr	r2, [pc, #28]	@ (801870c <udp_connect+0xd8>)
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80186f2:	2300      	movs	r3, #0
}
 80186f4:	4618      	mov	r0, r3
 80186f6:	3718      	adds	r7, #24
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}
 80186fc:	0801e33c 	.word	0x0801e33c
 8018700:	0801e61c 	.word	0x0801e61c
 8018704:	0801e390 	.word	0x0801e390
 8018708:	0801e638 	.word	0x0801e638
 801870c:	24014c10 	.word	0x24014c10

08018710 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b082      	sub	sp, #8
 8018714:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018716:	2001      	movs	r0, #1
 8018718:	f7f8 fdc8 	bl	80112ac <memp_malloc>
 801871c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d007      	beq.n	8018734 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018724:	2220      	movs	r2, #32
 8018726:	2100      	movs	r1, #0
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	f002 fe18 	bl	801b35e <memset>
    pcb->ttl = UDP_TTL;
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	22ff      	movs	r2, #255	@ 0xff
 8018732:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018734:	687b      	ldr	r3, [r7, #4]
}
 8018736:	4618      	mov	r0, r3
 8018738:	3708      	adds	r7, #8
 801873a:	46bd      	mov	sp, r7
 801873c:	bd80      	pop	{r7, pc}
	...

08018740 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018740:	b480      	push	{r7}
 8018742:	b085      	sub	sp, #20
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
 8018748:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d01e      	beq.n	801878e <udp_netif_ip_addr_changed+0x4e>
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d01a      	beq.n	801878e <udp_netif_ip_addr_changed+0x4e>
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d017      	beq.n	801878e <udp_netif_ip_addr_changed+0x4e>
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d013      	beq.n	801878e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018766:	4b0d      	ldr	r3, [pc, #52]	@ (801879c <udp_netif_ip_addr_changed+0x5c>)
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	60fb      	str	r3, [r7, #12]
 801876c:	e00c      	b.n	8018788 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	681a      	ldr	r2, [r3, #0]
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	429a      	cmp	r2, r3
 8018778:	d103      	bne.n	8018782 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	681a      	ldr	r2, [r3, #0]
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	68db      	ldr	r3, [r3, #12]
 8018786:	60fb      	str	r3, [r7, #12]
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d1ef      	bne.n	801876e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801878e:	bf00      	nop
 8018790:	3714      	adds	r7, #20
 8018792:	46bd      	mov	sp, r7
 8018794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018798:	4770      	bx	lr
 801879a:	bf00      	nop
 801879c:	24014c10 	.word	0x24014c10

080187a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b082      	sub	sp, #8
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80187a8:	4915      	ldr	r1, [pc, #84]	@ (8018800 <etharp_free_entry+0x60>)
 80187aa:	687a      	ldr	r2, [r7, #4]
 80187ac:	4613      	mov	r3, r2
 80187ae:	005b      	lsls	r3, r3, #1
 80187b0:	4413      	add	r3, r2
 80187b2:	00db      	lsls	r3, r3, #3
 80187b4:	440b      	add	r3, r1
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d013      	beq.n	80187e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80187bc:	4910      	ldr	r1, [pc, #64]	@ (8018800 <etharp_free_entry+0x60>)
 80187be:	687a      	ldr	r2, [r7, #4]
 80187c0:	4613      	mov	r3, r2
 80187c2:	005b      	lsls	r3, r3, #1
 80187c4:	4413      	add	r3, r2
 80187c6:	00db      	lsls	r3, r3, #3
 80187c8:	440b      	add	r3, r1
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	4618      	mov	r0, r3
 80187ce:	f7f9 fc8f 	bl	80120f0 <pbuf_free>
    arp_table[i].q = NULL;
 80187d2:	490b      	ldr	r1, [pc, #44]	@ (8018800 <etharp_free_entry+0x60>)
 80187d4:	687a      	ldr	r2, [r7, #4]
 80187d6:	4613      	mov	r3, r2
 80187d8:	005b      	lsls	r3, r3, #1
 80187da:	4413      	add	r3, r2
 80187dc:	00db      	lsls	r3, r3, #3
 80187de:	440b      	add	r3, r1
 80187e0:	2200      	movs	r2, #0
 80187e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80187e4:	4906      	ldr	r1, [pc, #24]	@ (8018800 <etharp_free_entry+0x60>)
 80187e6:	687a      	ldr	r2, [r7, #4]
 80187e8:	4613      	mov	r3, r2
 80187ea:	005b      	lsls	r3, r3, #1
 80187ec:	4413      	add	r3, r2
 80187ee:	00db      	lsls	r3, r3, #3
 80187f0:	440b      	add	r3, r1
 80187f2:	3314      	adds	r3, #20
 80187f4:	2200      	movs	r2, #0
 80187f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80187f8:	bf00      	nop
 80187fa:	3708      	adds	r7, #8
 80187fc:	46bd      	mov	sp, r7
 80187fe:	bd80      	pop	{r7, pc}
 8018800:	24014c14 	.word	0x24014c14

08018804 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b082      	sub	sp, #8
 8018808:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801880a:	2300      	movs	r3, #0
 801880c:	607b      	str	r3, [r7, #4]
 801880e:	e096      	b.n	801893e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018810:	494f      	ldr	r1, [pc, #316]	@ (8018950 <etharp_tmr+0x14c>)
 8018812:	687a      	ldr	r2, [r7, #4]
 8018814:	4613      	mov	r3, r2
 8018816:	005b      	lsls	r3, r3, #1
 8018818:	4413      	add	r3, r2
 801881a:	00db      	lsls	r3, r3, #3
 801881c:	440b      	add	r3, r1
 801881e:	3314      	adds	r3, #20
 8018820:	781b      	ldrb	r3, [r3, #0]
 8018822:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018824:	78fb      	ldrb	r3, [r7, #3]
 8018826:	2b00      	cmp	r3, #0
 8018828:	f000 8086 	beq.w	8018938 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801882c:	4948      	ldr	r1, [pc, #288]	@ (8018950 <etharp_tmr+0x14c>)
 801882e:	687a      	ldr	r2, [r7, #4]
 8018830:	4613      	mov	r3, r2
 8018832:	005b      	lsls	r3, r3, #1
 8018834:	4413      	add	r3, r2
 8018836:	00db      	lsls	r3, r3, #3
 8018838:	440b      	add	r3, r1
 801883a:	3312      	adds	r3, #18
 801883c:	881b      	ldrh	r3, [r3, #0]
 801883e:	3301      	adds	r3, #1
 8018840:	b298      	uxth	r0, r3
 8018842:	4943      	ldr	r1, [pc, #268]	@ (8018950 <etharp_tmr+0x14c>)
 8018844:	687a      	ldr	r2, [r7, #4]
 8018846:	4613      	mov	r3, r2
 8018848:	005b      	lsls	r3, r3, #1
 801884a:	4413      	add	r3, r2
 801884c:	00db      	lsls	r3, r3, #3
 801884e:	440b      	add	r3, r1
 8018850:	3312      	adds	r3, #18
 8018852:	4602      	mov	r2, r0
 8018854:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018856:	493e      	ldr	r1, [pc, #248]	@ (8018950 <etharp_tmr+0x14c>)
 8018858:	687a      	ldr	r2, [r7, #4]
 801885a:	4613      	mov	r3, r2
 801885c:	005b      	lsls	r3, r3, #1
 801885e:	4413      	add	r3, r2
 8018860:	00db      	lsls	r3, r3, #3
 8018862:	440b      	add	r3, r1
 8018864:	3312      	adds	r3, #18
 8018866:	881b      	ldrh	r3, [r3, #0]
 8018868:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801886c:	d215      	bcs.n	801889a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801886e:	4938      	ldr	r1, [pc, #224]	@ (8018950 <etharp_tmr+0x14c>)
 8018870:	687a      	ldr	r2, [r7, #4]
 8018872:	4613      	mov	r3, r2
 8018874:	005b      	lsls	r3, r3, #1
 8018876:	4413      	add	r3, r2
 8018878:	00db      	lsls	r3, r3, #3
 801887a:	440b      	add	r3, r1
 801887c:	3314      	adds	r3, #20
 801887e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018880:	2b01      	cmp	r3, #1
 8018882:	d10e      	bne.n	80188a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018884:	4932      	ldr	r1, [pc, #200]	@ (8018950 <etharp_tmr+0x14c>)
 8018886:	687a      	ldr	r2, [r7, #4]
 8018888:	4613      	mov	r3, r2
 801888a:	005b      	lsls	r3, r3, #1
 801888c:	4413      	add	r3, r2
 801888e:	00db      	lsls	r3, r3, #3
 8018890:	440b      	add	r3, r1
 8018892:	3312      	adds	r3, #18
 8018894:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018896:	2b04      	cmp	r3, #4
 8018898:	d903      	bls.n	80188a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801889a:	6878      	ldr	r0, [r7, #4]
 801889c:	f7ff ff80 	bl	80187a0 <etharp_free_entry>
 80188a0:	e04a      	b.n	8018938 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80188a2:	492b      	ldr	r1, [pc, #172]	@ (8018950 <etharp_tmr+0x14c>)
 80188a4:	687a      	ldr	r2, [r7, #4]
 80188a6:	4613      	mov	r3, r2
 80188a8:	005b      	lsls	r3, r3, #1
 80188aa:	4413      	add	r3, r2
 80188ac:	00db      	lsls	r3, r3, #3
 80188ae:	440b      	add	r3, r1
 80188b0:	3314      	adds	r3, #20
 80188b2:	781b      	ldrb	r3, [r3, #0]
 80188b4:	2b03      	cmp	r3, #3
 80188b6:	d10a      	bne.n	80188ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80188b8:	4925      	ldr	r1, [pc, #148]	@ (8018950 <etharp_tmr+0x14c>)
 80188ba:	687a      	ldr	r2, [r7, #4]
 80188bc:	4613      	mov	r3, r2
 80188be:	005b      	lsls	r3, r3, #1
 80188c0:	4413      	add	r3, r2
 80188c2:	00db      	lsls	r3, r3, #3
 80188c4:	440b      	add	r3, r1
 80188c6:	3314      	adds	r3, #20
 80188c8:	2204      	movs	r2, #4
 80188ca:	701a      	strb	r2, [r3, #0]
 80188cc:	e034      	b.n	8018938 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80188ce:	4920      	ldr	r1, [pc, #128]	@ (8018950 <etharp_tmr+0x14c>)
 80188d0:	687a      	ldr	r2, [r7, #4]
 80188d2:	4613      	mov	r3, r2
 80188d4:	005b      	lsls	r3, r3, #1
 80188d6:	4413      	add	r3, r2
 80188d8:	00db      	lsls	r3, r3, #3
 80188da:	440b      	add	r3, r1
 80188dc:	3314      	adds	r3, #20
 80188de:	781b      	ldrb	r3, [r3, #0]
 80188e0:	2b04      	cmp	r3, #4
 80188e2:	d10a      	bne.n	80188fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80188e4:	491a      	ldr	r1, [pc, #104]	@ (8018950 <etharp_tmr+0x14c>)
 80188e6:	687a      	ldr	r2, [r7, #4]
 80188e8:	4613      	mov	r3, r2
 80188ea:	005b      	lsls	r3, r3, #1
 80188ec:	4413      	add	r3, r2
 80188ee:	00db      	lsls	r3, r3, #3
 80188f0:	440b      	add	r3, r1
 80188f2:	3314      	adds	r3, #20
 80188f4:	2202      	movs	r2, #2
 80188f6:	701a      	strb	r2, [r3, #0]
 80188f8:	e01e      	b.n	8018938 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80188fa:	4915      	ldr	r1, [pc, #84]	@ (8018950 <etharp_tmr+0x14c>)
 80188fc:	687a      	ldr	r2, [r7, #4]
 80188fe:	4613      	mov	r3, r2
 8018900:	005b      	lsls	r3, r3, #1
 8018902:	4413      	add	r3, r2
 8018904:	00db      	lsls	r3, r3, #3
 8018906:	440b      	add	r3, r1
 8018908:	3314      	adds	r3, #20
 801890a:	781b      	ldrb	r3, [r3, #0]
 801890c:	2b01      	cmp	r3, #1
 801890e:	d113      	bne.n	8018938 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018910:	490f      	ldr	r1, [pc, #60]	@ (8018950 <etharp_tmr+0x14c>)
 8018912:	687a      	ldr	r2, [r7, #4]
 8018914:	4613      	mov	r3, r2
 8018916:	005b      	lsls	r3, r3, #1
 8018918:	4413      	add	r3, r2
 801891a:	00db      	lsls	r3, r3, #3
 801891c:	440b      	add	r3, r1
 801891e:	3308      	adds	r3, #8
 8018920:	6818      	ldr	r0, [r3, #0]
 8018922:	687a      	ldr	r2, [r7, #4]
 8018924:	4613      	mov	r3, r2
 8018926:	005b      	lsls	r3, r3, #1
 8018928:	4413      	add	r3, r2
 801892a:	00db      	lsls	r3, r3, #3
 801892c:	4a08      	ldr	r2, [pc, #32]	@ (8018950 <etharp_tmr+0x14c>)
 801892e:	4413      	add	r3, r2
 8018930:	3304      	adds	r3, #4
 8018932:	4619      	mov	r1, r3
 8018934:	f000 fe6e 	bl	8019614 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	3301      	adds	r3, #1
 801893c:	607b      	str	r3, [r7, #4]
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	2b09      	cmp	r3, #9
 8018942:	f77f af65 	ble.w	8018810 <etharp_tmr+0xc>
      }
    }
  }
}
 8018946:	bf00      	nop
 8018948:	bf00      	nop
 801894a:	3708      	adds	r7, #8
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}
 8018950:	24014c14 	.word	0x24014c14

08018954 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b08a      	sub	sp, #40	@ 0x28
 8018958:	af00      	add	r7, sp, #0
 801895a:	60f8      	str	r0, [r7, #12]
 801895c:	460b      	mov	r3, r1
 801895e:	607a      	str	r2, [r7, #4]
 8018960:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018962:	230a      	movs	r3, #10
 8018964:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018966:	230a      	movs	r3, #10
 8018968:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801896a:	230a      	movs	r3, #10
 801896c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801896e:	2300      	movs	r3, #0
 8018970:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018972:	230a      	movs	r3, #10
 8018974:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018976:	2300      	movs	r3, #0
 8018978:	83bb      	strh	r3, [r7, #28]
 801897a:	2300      	movs	r3, #0
 801897c:	837b      	strh	r3, [r7, #26]
 801897e:	2300      	movs	r3, #0
 8018980:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018982:	2300      	movs	r3, #0
 8018984:	843b      	strh	r3, [r7, #32]
 8018986:	e0ae      	b.n	8018ae6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018988:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801898c:	49a6      	ldr	r1, [pc, #664]	@ (8018c28 <etharp_find_entry+0x2d4>)
 801898e:	4613      	mov	r3, r2
 8018990:	005b      	lsls	r3, r3, #1
 8018992:	4413      	add	r3, r2
 8018994:	00db      	lsls	r3, r3, #3
 8018996:	440b      	add	r3, r1
 8018998:	3314      	adds	r3, #20
 801899a:	781b      	ldrb	r3, [r3, #0]
 801899c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801899e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80189a2:	2b0a      	cmp	r3, #10
 80189a4:	d105      	bne.n	80189b2 <etharp_find_entry+0x5e>
 80189a6:	7dfb      	ldrb	r3, [r7, #23]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d102      	bne.n	80189b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80189ac:	8c3b      	ldrh	r3, [r7, #32]
 80189ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80189b0:	e095      	b.n	8018ade <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80189b2:	7dfb      	ldrb	r3, [r7, #23]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	f000 8092 	beq.w	8018ade <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80189ba:	7dfb      	ldrb	r3, [r7, #23]
 80189bc:	2b01      	cmp	r3, #1
 80189be:	d009      	beq.n	80189d4 <etharp_find_entry+0x80>
 80189c0:	7dfb      	ldrb	r3, [r7, #23]
 80189c2:	2b01      	cmp	r3, #1
 80189c4:	d806      	bhi.n	80189d4 <etharp_find_entry+0x80>
 80189c6:	4b99      	ldr	r3, [pc, #612]	@ (8018c2c <etharp_find_entry+0x2d8>)
 80189c8:	f240 1223 	movw	r2, #291	@ 0x123
 80189cc:	4998      	ldr	r1, [pc, #608]	@ (8018c30 <etharp_find_entry+0x2dc>)
 80189ce:	4899      	ldr	r0, [pc, #612]	@ (8018c34 <etharp_find_entry+0x2e0>)
 80189d0:	f002 fc60 	bl	801b294 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d020      	beq.n	8018a1c <etharp_find_entry+0xc8>
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	6819      	ldr	r1, [r3, #0]
 80189de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80189e2:	4891      	ldr	r0, [pc, #580]	@ (8018c28 <etharp_find_entry+0x2d4>)
 80189e4:	4613      	mov	r3, r2
 80189e6:	005b      	lsls	r3, r3, #1
 80189e8:	4413      	add	r3, r2
 80189ea:	00db      	lsls	r3, r3, #3
 80189ec:	4403      	add	r3, r0
 80189ee:	3304      	adds	r3, #4
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	4299      	cmp	r1, r3
 80189f4:	d112      	bne.n	8018a1c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d00c      	beq.n	8018a16 <etharp_find_entry+0xc2>
 80189fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a00:	4989      	ldr	r1, [pc, #548]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018a02:	4613      	mov	r3, r2
 8018a04:	005b      	lsls	r3, r3, #1
 8018a06:	4413      	add	r3, r2
 8018a08:	00db      	lsls	r3, r3, #3
 8018a0a:	440b      	add	r3, r1
 8018a0c:	3308      	adds	r3, #8
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	687a      	ldr	r2, [r7, #4]
 8018a12:	429a      	cmp	r2, r3
 8018a14:	d102      	bne.n	8018a1c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018a1a:	e100      	b.n	8018c1e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018a1c:	7dfb      	ldrb	r3, [r7, #23]
 8018a1e:	2b01      	cmp	r3, #1
 8018a20:	d140      	bne.n	8018aa4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018a22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a26:	4980      	ldr	r1, [pc, #512]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018a28:	4613      	mov	r3, r2
 8018a2a:	005b      	lsls	r3, r3, #1
 8018a2c:	4413      	add	r3, r2
 8018a2e:	00db      	lsls	r3, r3, #3
 8018a30:	440b      	add	r3, r1
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d01a      	beq.n	8018a6e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018a38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a3c:	497a      	ldr	r1, [pc, #488]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018a3e:	4613      	mov	r3, r2
 8018a40:	005b      	lsls	r3, r3, #1
 8018a42:	4413      	add	r3, r2
 8018a44:	00db      	lsls	r3, r3, #3
 8018a46:	440b      	add	r3, r1
 8018a48:	3312      	adds	r3, #18
 8018a4a:	881b      	ldrh	r3, [r3, #0]
 8018a4c:	8bba      	ldrh	r2, [r7, #28]
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	d845      	bhi.n	8018ade <etharp_find_entry+0x18a>
            old_queue = i;
 8018a52:	8c3b      	ldrh	r3, [r7, #32]
 8018a54:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018a56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a5a:	4973      	ldr	r1, [pc, #460]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018a5c:	4613      	mov	r3, r2
 8018a5e:	005b      	lsls	r3, r3, #1
 8018a60:	4413      	add	r3, r2
 8018a62:	00db      	lsls	r3, r3, #3
 8018a64:	440b      	add	r3, r1
 8018a66:	3312      	adds	r3, #18
 8018a68:	881b      	ldrh	r3, [r3, #0]
 8018a6a:	83bb      	strh	r3, [r7, #28]
 8018a6c:	e037      	b.n	8018ade <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018a6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a72:	496d      	ldr	r1, [pc, #436]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018a74:	4613      	mov	r3, r2
 8018a76:	005b      	lsls	r3, r3, #1
 8018a78:	4413      	add	r3, r2
 8018a7a:	00db      	lsls	r3, r3, #3
 8018a7c:	440b      	add	r3, r1
 8018a7e:	3312      	adds	r3, #18
 8018a80:	881b      	ldrh	r3, [r3, #0]
 8018a82:	8b7a      	ldrh	r2, [r7, #26]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d82a      	bhi.n	8018ade <etharp_find_entry+0x18a>
            old_pending = i;
 8018a88:	8c3b      	ldrh	r3, [r7, #32]
 8018a8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8018a8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a90:	4965      	ldr	r1, [pc, #404]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018a92:	4613      	mov	r3, r2
 8018a94:	005b      	lsls	r3, r3, #1
 8018a96:	4413      	add	r3, r2
 8018a98:	00db      	lsls	r3, r3, #3
 8018a9a:	440b      	add	r3, r1
 8018a9c:	3312      	adds	r3, #18
 8018a9e:	881b      	ldrh	r3, [r3, #0]
 8018aa0:	837b      	strh	r3, [r7, #26]
 8018aa2:	e01c      	b.n	8018ade <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018aa4:	7dfb      	ldrb	r3, [r7, #23]
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d919      	bls.n	8018ade <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018aaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018aae:	495e      	ldr	r1, [pc, #376]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018ab0:	4613      	mov	r3, r2
 8018ab2:	005b      	lsls	r3, r3, #1
 8018ab4:	4413      	add	r3, r2
 8018ab6:	00db      	lsls	r3, r3, #3
 8018ab8:	440b      	add	r3, r1
 8018aba:	3312      	adds	r3, #18
 8018abc:	881b      	ldrh	r3, [r3, #0]
 8018abe:	8b3a      	ldrh	r2, [r7, #24]
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d80c      	bhi.n	8018ade <etharp_find_entry+0x18a>
            old_stable = i;
 8018ac4:	8c3b      	ldrh	r3, [r7, #32]
 8018ac6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8018ac8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018acc:	4956      	ldr	r1, [pc, #344]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018ace:	4613      	mov	r3, r2
 8018ad0:	005b      	lsls	r3, r3, #1
 8018ad2:	4413      	add	r3, r2
 8018ad4:	00db      	lsls	r3, r3, #3
 8018ad6:	440b      	add	r3, r1
 8018ad8:	3312      	adds	r3, #18
 8018ada:	881b      	ldrh	r3, [r3, #0]
 8018adc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018ade:	8c3b      	ldrh	r3, [r7, #32]
 8018ae0:	3301      	adds	r3, #1
 8018ae2:	b29b      	uxth	r3, r3
 8018ae4:	843b      	strh	r3, [r7, #32]
 8018ae6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018aea:	2b09      	cmp	r3, #9
 8018aec:	f77f af4c 	ble.w	8018988 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018af0:	7afb      	ldrb	r3, [r7, #11]
 8018af2:	f003 0302 	and.w	r3, r3, #2
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d108      	bne.n	8018b0c <etharp_find_entry+0x1b8>
 8018afa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018afe:	2b0a      	cmp	r3, #10
 8018b00:	d107      	bne.n	8018b12 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018b02:	7afb      	ldrb	r3, [r7, #11]
 8018b04:	f003 0301 	and.w	r3, r3, #1
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d102      	bne.n	8018b12 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b10:	e085      	b.n	8018c1e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018b12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018b16:	2b09      	cmp	r3, #9
 8018b18:	dc02      	bgt.n	8018b20 <etharp_find_entry+0x1cc>
    i = empty;
 8018b1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b1c:	843b      	strh	r3, [r7, #32]
 8018b1e:	e039      	b.n	8018b94 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018b20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018b24:	2b09      	cmp	r3, #9
 8018b26:	dc14      	bgt.n	8018b52 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018b28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018b2a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018b2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b30:	493d      	ldr	r1, [pc, #244]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018b32:	4613      	mov	r3, r2
 8018b34:	005b      	lsls	r3, r3, #1
 8018b36:	4413      	add	r3, r2
 8018b38:	00db      	lsls	r3, r3, #3
 8018b3a:	440b      	add	r3, r1
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d018      	beq.n	8018b74 <etharp_find_entry+0x220>
 8018b42:	4b3a      	ldr	r3, [pc, #232]	@ (8018c2c <etharp_find_entry+0x2d8>)
 8018b44:	f240 126d 	movw	r2, #365	@ 0x16d
 8018b48:	493b      	ldr	r1, [pc, #236]	@ (8018c38 <etharp_find_entry+0x2e4>)
 8018b4a:	483a      	ldr	r0, [pc, #232]	@ (8018c34 <etharp_find_entry+0x2e0>)
 8018b4c:	f002 fba2 	bl	801b294 <iprintf>
 8018b50:	e010      	b.n	8018b74 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018b52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018b56:	2b09      	cmp	r3, #9
 8018b58:	dc02      	bgt.n	8018b60 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018b5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018b5c:	843b      	strh	r3, [r7, #32]
 8018b5e:	e009      	b.n	8018b74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018b60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018b64:	2b09      	cmp	r3, #9
 8018b66:	dc02      	bgt.n	8018b6e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018b68:	8bfb      	ldrh	r3, [r7, #30]
 8018b6a:	843b      	strh	r3, [r7, #32]
 8018b6c:	e002      	b.n	8018b74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b72:	e054      	b.n	8018c1e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018b74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b78:	2b09      	cmp	r3, #9
 8018b7a:	dd06      	ble.n	8018b8a <etharp_find_entry+0x236>
 8018b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8018c2c <etharp_find_entry+0x2d8>)
 8018b7e:	f240 127f 	movw	r2, #383	@ 0x17f
 8018b82:	492e      	ldr	r1, [pc, #184]	@ (8018c3c <etharp_find_entry+0x2e8>)
 8018b84:	482b      	ldr	r0, [pc, #172]	@ (8018c34 <etharp_find_entry+0x2e0>)
 8018b86:	f002 fb85 	bl	801b294 <iprintf>
    etharp_free_entry(i);
 8018b8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f7ff fe06 	bl	80187a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018b94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b98:	2b09      	cmp	r3, #9
 8018b9a:	dd06      	ble.n	8018baa <etharp_find_entry+0x256>
 8018b9c:	4b23      	ldr	r3, [pc, #140]	@ (8018c2c <etharp_find_entry+0x2d8>)
 8018b9e:	f240 1283 	movw	r2, #387	@ 0x183
 8018ba2:	4926      	ldr	r1, [pc, #152]	@ (8018c3c <etharp_find_entry+0x2e8>)
 8018ba4:	4823      	ldr	r0, [pc, #140]	@ (8018c34 <etharp_find_entry+0x2e0>)
 8018ba6:	f002 fb75 	bl	801b294 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018baa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bae:	491e      	ldr	r1, [pc, #120]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018bb0:	4613      	mov	r3, r2
 8018bb2:	005b      	lsls	r3, r3, #1
 8018bb4:	4413      	add	r3, r2
 8018bb6:	00db      	lsls	r3, r3, #3
 8018bb8:	440b      	add	r3, r1
 8018bba:	3314      	adds	r3, #20
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d006      	beq.n	8018bd0 <etharp_find_entry+0x27c>
 8018bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8018c2c <etharp_find_entry+0x2d8>)
 8018bc4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8018bc8:	491d      	ldr	r1, [pc, #116]	@ (8018c40 <etharp_find_entry+0x2ec>)
 8018bca:	481a      	ldr	r0, [pc, #104]	@ (8018c34 <etharp_find_entry+0x2e0>)
 8018bcc:	f002 fb62 	bl	801b294 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d00b      	beq.n	8018bee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018bd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	6819      	ldr	r1, [r3, #0]
 8018bde:	4812      	ldr	r0, [pc, #72]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018be0:	4613      	mov	r3, r2
 8018be2:	005b      	lsls	r3, r3, #1
 8018be4:	4413      	add	r3, r2
 8018be6:	00db      	lsls	r3, r3, #3
 8018be8:	4403      	add	r3, r0
 8018bea:	3304      	adds	r3, #4
 8018bec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018bee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bf2:	490d      	ldr	r1, [pc, #52]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018bf4:	4613      	mov	r3, r2
 8018bf6:	005b      	lsls	r3, r3, #1
 8018bf8:	4413      	add	r3, r2
 8018bfa:	00db      	lsls	r3, r3, #3
 8018bfc:	440b      	add	r3, r1
 8018bfe:	3312      	adds	r3, #18
 8018c00:	2200      	movs	r2, #0
 8018c02:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018c04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c08:	4907      	ldr	r1, [pc, #28]	@ (8018c28 <etharp_find_entry+0x2d4>)
 8018c0a:	4613      	mov	r3, r2
 8018c0c:	005b      	lsls	r3, r3, #1
 8018c0e:	4413      	add	r3, r2
 8018c10:	00db      	lsls	r3, r3, #3
 8018c12:	440b      	add	r3, r1
 8018c14:	3308      	adds	r3, #8
 8018c16:	687a      	ldr	r2, [r7, #4]
 8018c18:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018c1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018c1e:	4618      	mov	r0, r3
 8018c20:	3728      	adds	r7, #40	@ 0x28
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bd80      	pop	{r7, pc}
 8018c26:	bf00      	nop
 8018c28:	24014c14 	.word	0x24014c14
 8018c2c:	0801e6a0 	.word	0x0801e6a0
 8018c30:	0801e6d8 	.word	0x0801e6d8
 8018c34:	0801e718 	.word	0x0801e718
 8018c38:	0801e740 	.word	0x0801e740
 8018c3c:	0801e758 	.word	0x0801e758
 8018c40:	0801e76c 	.word	0x0801e76c

08018c44 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b088      	sub	sp, #32
 8018c48:	af02      	add	r7, sp, #8
 8018c4a:	60f8      	str	r0, [r7, #12]
 8018c4c:	60b9      	str	r1, [r7, #8]
 8018c4e:	607a      	str	r2, [r7, #4]
 8018c50:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018c58:	2b06      	cmp	r3, #6
 8018c5a:	d006      	beq.n	8018c6a <etharp_update_arp_entry+0x26>
 8018c5c:	4b48      	ldr	r3, [pc, #288]	@ (8018d80 <etharp_update_arp_entry+0x13c>)
 8018c5e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8018c62:	4948      	ldr	r1, [pc, #288]	@ (8018d84 <etharp_update_arp_entry+0x140>)
 8018c64:	4848      	ldr	r0, [pc, #288]	@ (8018d88 <etharp_update_arp_entry+0x144>)
 8018c66:	f002 fb15 	bl	801b294 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d012      	beq.n	8018c96 <etharp_update_arp_entry+0x52>
 8018c70:	68bb      	ldr	r3, [r7, #8]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d00e      	beq.n	8018c96 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c78:	68bb      	ldr	r3, [r7, #8]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	68f9      	ldr	r1, [r7, #12]
 8018c7e:	4618      	mov	r0, r3
 8018c80:	f001 f930 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 8018c84:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d105      	bne.n	8018c96 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018c8a:	68bb      	ldr	r3, [r7, #8]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c92:	2be0      	cmp	r3, #224	@ 0xe0
 8018c94:	d102      	bne.n	8018c9c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018c96:	f06f 030f 	mvn.w	r3, #15
 8018c9a:	e06c      	b.n	8018d76 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018c9c:	78fb      	ldrb	r3, [r7, #3]
 8018c9e:	68fa      	ldr	r2, [r7, #12]
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	68b8      	ldr	r0, [r7, #8]
 8018ca4:	f7ff fe56 	bl	8018954 <etharp_find_entry>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018cac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	da02      	bge.n	8018cba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018cb4:	8afb      	ldrh	r3, [r7, #22]
 8018cb6:	b25b      	sxtb	r3, r3
 8018cb8:	e05d      	b.n	8018d76 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018cba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018cbe:	4933      	ldr	r1, [pc, #204]	@ (8018d8c <etharp_update_arp_entry+0x148>)
 8018cc0:	4613      	mov	r3, r2
 8018cc2:	005b      	lsls	r3, r3, #1
 8018cc4:	4413      	add	r3, r2
 8018cc6:	00db      	lsls	r3, r3, #3
 8018cc8:	440b      	add	r3, r1
 8018cca:	3314      	adds	r3, #20
 8018ccc:	2202      	movs	r2, #2
 8018cce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018cd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018cd4:	492d      	ldr	r1, [pc, #180]	@ (8018d8c <etharp_update_arp_entry+0x148>)
 8018cd6:	4613      	mov	r3, r2
 8018cd8:	005b      	lsls	r3, r3, #1
 8018cda:	4413      	add	r3, r2
 8018cdc:	00db      	lsls	r3, r3, #3
 8018cde:	440b      	add	r3, r1
 8018ce0:	3308      	adds	r3, #8
 8018ce2:	68fa      	ldr	r2, [r7, #12]
 8018ce4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018ce6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018cea:	4613      	mov	r3, r2
 8018cec:	005b      	lsls	r3, r3, #1
 8018cee:	4413      	add	r3, r2
 8018cf0:	00db      	lsls	r3, r3, #3
 8018cf2:	3308      	adds	r3, #8
 8018cf4:	4a25      	ldr	r2, [pc, #148]	@ (8018d8c <etharp_update_arp_entry+0x148>)
 8018cf6:	4413      	add	r3, r2
 8018cf8:	3304      	adds	r3, #4
 8018cfa:	2206      	movs	r2, #6
 8018cfc:	6879      	ldr	r1, [r7, #4]
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f002 fc01 	bl	801b506 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018d04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d08:	4920      	ldr	r1, [pc, #128]	@ (8018d8c <etharp_update_arp_entry+0x148>)
 8018d0a:	4613      	mov	r3, r2
 8018d0c:	005b      	lsls	r3, r3, #1
 8018d0e:	4413      	add	r3, r2
 8018d10:	00db      	lsls	r3, r3, #3
 8018d12:	440b      	add	r3, r1
 8018d14:	3312      	adds	r3, #18
 8018d16:	2200      	movs	r2, #0
 8018d18:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018d1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d1e:	491b      	ldr	r1, [pc, #108]	@ (8018d8c <etharp_update_arp_entry+0x148>)
 8018d20:	4613      	mov	r3, r2
 8018d22:	005b      	lsls	r3, r3, #1
 8018d24:	4413      	add	r3, r2
 8018d26:	00db      	lsls	r3, r3, #3
 8018d28:	440b      	add	r3, r1
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d021      	beq.n	8018d74 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018d30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d34:	4915      	ldr	r1, [pc, #84]	@ (8018d8c <etharp_update_arp_entry+0x148>)
 8018d36:	4613      	mov	r3, r2
 8018d38:	005b      	lsls	r3, r3, #1
 8018d3a:	4413      	add	r3, r2
 8018d3c:	00db      	lsls	r3, r3, #3
 8018d3e:	440b      	add	r3, r1
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018d44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d48:	4910      	ldr	r1, [pc, #64]	@ (8018d8c <etharp_update_arp_entry+0x148>)
 8018d4a:	4613      	mov	r3, r2
 8018d4c:	005b      	lsls	r3, r3, #1
 8018d4e:	4413      	add	r3, r2
 8018d50:	00db      	lsls	r3, r3, #3
 8018d52:	440b      	add	r3, r1
 8018d54:	2200      	movs	r2, #0
 8018d56:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8018d5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018d62:	9300      	str	r3, [sp, #0]
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	6939      	ldr	r1, [r7, #16]
 8018d68:	68f8      	ldr	r0, [r7, #12]
 8018d6a:	f002 f859 	bl	801ae20 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018d6e:	6938      	ldr	r0, [r7, #16]
 8018d70:	f7f9 f9be 	bl	80120f0 <pbuf_free>
  }
  return ERR_OK;
 8018d74:	2300      	movs	r3, #0
}
 8018d76:	4618      	mov	r0, r3
 8018d78:	3718      	adds	r7, #24
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	bf00      	nop
 8018d80:	0801e6a0 	.word	0x0801e6a0
 8018d84:	0801e798 	.word	0x0801e798
 8018d88:	0801e718 	.word	0x0801e718
 8018d8c:	24014c14 	.word	0x24014c14

08018d90 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018d90:	b580      	push	{r7, lr}
 8018d92:	b084      	sub	sp, #16
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018d98:	2300      	movs	r3, #0
 8018d9a:	60fb      	str	r3, [r7, #12]
 8018d9c:	e01e      	b.n	8018ddc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018d9e:	4913      	ldr	r1, [pc, #76]	@ (8018dec <etharp_cleanup_netif+0x5c>)
 8018da0:	68fa      	ldr	r2, [r7, #12]
 8018da2:	4613      	mov	r3, r2
 8018da4:	005b      	lsls	r3, r3, #1
 8018da6:	4413      	add	r3, r2
 8018da8:	00db      	lsls	r3, r3, #3
 8018daa:	440b      	add	r3, r1
 8018dac:	3314      	adds	r3, #20
 8018dae:	781b      	ldrb	r3, [r3, #0]
 8018db0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018db2:	7afb      	ldrb	r3, [r7, #11]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d00e      	beq.n	8018dd6 <etharp_cleanup_netif+0x46>
 8018db8:	490c      	ldr	r1, [pc, #48]	@ (8018dec <etharp_cleanup_netif+0x5c>)
 8018dba:	68fa      	ldr	r2, [r7, #12]
 8018dbc:	4613      	mov	r3, r2
 8018dbe:	005b      	lsls	r3, r3, #1
 8018dc0:	4413      	add	r3, r2
 8018dc2:	00db      	lsls	r3, r3, #3
 8018dc4:	440b      	add	r3, r1
 8018dc6:	3308      	adds	r3, #8
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	687a      	ldr	r2, [r7, #4]
 8018dcc:	429a      	cmp	r2, r3
 8018dce:	d102      	bne.n	8018dd6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018dd0:	68f8      	ldr	r0, [r7, #12]
 8018dd2:	f7ff fce5 	bl	80187a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	3301      	adds	r3, #1
 8018dda:	60fb      	str	r3, [r7, #12]
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	2b09      	cmp	r3, #9
 8018de0:	dddd      	ble.n	8018d9e <etharp_cleanup_netif+0xe>
    }
  }
}
 8018de2:	bf00      	nop
 8018de4:	bf00      	nop
 8018de6:	3710      	adds	r7, #16
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}
 8018dec:	24014c14 	.word	0x24014c14

08018df0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018df0:	b5b0      	push	{r4, r5, r7, lr}
 8018df2:	b08a      	sub	sp, #40	@ 0x28
 8018df4:	af04      	add	r7, sp, #16
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018dfa:	683b      	ldr	r3, [r7, #0]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d107      	bne.n	8018e10 <etharp_input+0x20>
 8018e00:	4b3d      	ldr	r3, [pc, #244]	@ (8018ef8 <etharp_input+0x108>)
 8018e02:	f240 228a 	movw	r2, #650	@ 0x28a
 8018e06:	493d      	ldr	r1, [pc, #244]	@ (8018efc <etharp_input+0x10c>)
 8018e08:	483d      	ldr	r0, [pc, #244]	@ (8018f00 <etharp_input+0x110>)
 8018e0a:	f002 fa43 	bl	801b294 <iprintf>
 8018e0e:	e06f      	b.n	8018ef0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	685b      	ldr	r3, [r3, #4]
 8018e14:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018e16:	693b      	ldr	r3, [r7, #16]
 8018e18:	881b      	ldrh	r3, [r3, #0]
 8018e1a:	b29b      	uxth	r3, r3
 8018e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018e20:	d10c      	bne.n	8018e3c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018e22:	693b      	ldr	r3, [r7, #16]
 8018e24:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018e26:	2b06      	cmp	r3, #6
 8018e28:	d108      	bne.n	8018e3c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018e2a:	693b      	ldr	r3, [r7, #16]
 8018e2c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018e2e:	2b04      	cmp	r3, #4
 8018e30:	d104      	bne.n	8018e3c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018e32:	693b      	ldr	r3, [r7, #16]
 8018e34:	885b      	ldrh	r3, [r3, #2]
 8018e36:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018e38:	2b08      	cmp	r3, #8
 8018e3a:	d003      	beq.n	8018e44 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018e3c:	6878      	ldr	r0, [r7, #4]
 8018e3e:	f7f9 f957 	bl	80120f0 <pbuf_free>
    return;
 8018e42:	e055      	b.n	8018ef0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018e44:	693b      	ldr	r3, [r7, #16]
 8018e46:	330e      	adds	r3, #14
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018e4c:	693b      	ldr	r3, [r7, #16]
 8018e4e:	3318      	adds	r3, #24
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	3304      	adds	r3, #4
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d102      	bne.n	8018e64 <etharp_input+0x74>
    for_us = 0;
 8018e5e:	2300      	movs	r3, #0
 8018e60:	75fb      	strb	r3, [r7, #23]
 8018e62:	e009      	b.n	8018e78 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018e64:	68ba      	ldr	r2, [r7, #8]
 8018e66:	683b      	ldr	r3, [r7, #0]
 8018e68:	3304      	adds	r3, #4
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	429a      	cmp	r2, r3
 8018e6e:	bf0c      	ite	eq
 8018e70:	2301      	moveq	r3, #1
 8018e72:	2300      	movne	r3, #0
 8018e74:	b2db      	uxtb	r3, r3
 8018e76:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018e78:	693b      	ldr	r3, [r7, #16]
 8018e7a:	f103 0208 	add.w	r2, r3, #8
 8018e7e:	7dfb      	ldrb	r3, [r7, #23]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d001      	beq.n	8018e88 <etharp_input+0x98>
 8018e84:	2301      	movs	r3, #1
 8018e86:	e000      	b.n	8018e8a <etharp_input+0x9a>
 8018e88:	2302      	movs	r3, #2
 8018e8a:	f107 010c 	add.w	r1, r7, #12
 8018e8e:	6838      	ldr	r0, [r7, #0]
 8018e90:	f7ff fed8 	bl	8018c44 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	88db      	ldrh	r3, [r3, #6]
 8018e98:	b29b      	uxth	r3, r3
 8018e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018e9e:	d003      	beq.n	8018ea8 <etharp_input+0xb8>
 8018ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018ea4:	d01e      	beq.n	8018ee4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018ea6:	e020      	b.n	8018eea <etharp_input+0xfa>
      if (for_us) {
 8018ea8:	7dfb      	ldrb	r3, [r7, #23]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d01c      	beq.n	8018ee8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018eae:	683b      	ldr	r3, [r7, #0]
 8018eb0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8018eb4:	693b      	ldr	r3, [r7, #16]
 8018eb6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018eba:	683b      	ldr	r3, [r7, #0]
 8018ebc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8018ec0:	683b      	ldr	r3, [r7, #0]
 8018ec2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018ec4:	693a      	ldr	r2, [r7, #16]
 8018ec6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018ec8:	2102      	movs	r1, #2
 8018eca:	9103      	str	r1, [sp, #12]
 8018ecc:	f107 010c 	add.w	r1, r7, #12
 8018ed0:	9102      	str	r1, [sp, #8]
 8018ed2:	9201      	str	r2, [sp, #4]
 8018ed4:	9300      	str	r3, [sp, #0]
 8018ed6:	462b      	mov	r3, r5
 8018ed8:	4622      	mov	r2, r4
 8018eda:	4601      	mov	r1, r0
 8018edc:	6838      	ldr	r0, [r7, #0]
 8018ede:	f000 faeb 	bl	80194b8 <etharp_raw>
      break;
 8018ee2:	e001      	b.n	8018ee8 <etharp_input+0xf8>
      break;
 8018ee4:	bf00      	nop
 8018ee6:	e000      	b.n	8018eea <etharp_input+0xfa>
      break;
 8018ee8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018eea:	6878      	ldr	r0, [r7, #4]
 8018eec:	f7f9 f900 	bl	80120f0 <pbuf_free>
}
 8018ef0:	3718      	adds	r7, #24
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8018ef6:	bf00      	nop
 8018ef8:	0801e6a0 	.word	0x0801e6a0
 8018efc:	0801e7f0 	.word	0x0801e7f0
 8018f00:	0801e718 	.word	0x0801e718

08018f04 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b086      	sub	sp, #24
 8018f08:	af02      	add	r7, sp, #8
 8018f0a:	60f8      	str	r0, [r7, #12]
 8018f0c:	60b9      	str	r1, [r7, #8]
 8018f0e:	4613      	mov	r3, r2
 8018f10:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018f12:	79fa      	ldrb	r2, [r7, #7]
 8018f14:	4944      	ldr	r1, [pc, #272]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8018f16:	4613      	mov	r3, r2
 8018f18:	005b      	lsls	r3, r3, #1
 8018f1a:	4413      	add	r3, r2
 8018f1c:	00db      	lsls	r3, r3, #3
 8018f1e:	440b      	add	r3, r1
 8018f20:	3314      	adds	r3, #20
 8018f22:	781b      	ldrb	r3, [r3, #0]
 8018f24:	2b01      	cmp	r3, #1
 8018f26:	d806      	bhi.n	8018f36 <etharp_output_to_arp_index+0x32>
 8018f28:	4b40      	ldr	r3, [pc, #256]	@ (801902c <etharp_output_to_arp_index+0x128>)
 8018f2a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8018f2e:	4940      	ldr	r1, [pc, #256]	@ (8019030 <etharp_output_to_arp_index+0x12c>)
 8018f30:	4840      	ldr	r0, [pc, #256]	@ (8019034 <etharp_output_to_arp_index+0x130>)
 8018f32:	f002 f9af 	bl	801b294 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018f36:	79fa      	ldrb	r2, [r7, #7]
 8018f38:	493b      	ldr	r1, [pc, #236]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8018f3a:	4613      	mov	r3, r2
 8018f3c:	005b      	lsls	r3, r3, #1
 8018f3e:	4413      	add	r3, r2
 8018f40:	00db      	lsls	r3, r3, #3
 8018f42:	440b      	add	r3, r1
 8018f44:	3314      	adds	r3, #20
 8018f46:	781b      	ldrb	r3, [r3, #0]
 8018f48:	2b02      	cmp	r3, #2
 8018f4a:	d153      	bne.n	8018ff4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018f4c:	79fa      	ldrb	r2, [r7, #7]
 8018f4e:	4936      	ldr	r1, [pc, #216]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8018f50:	4613      	mov	r3, r2
 8018f52:	005b      	lsls	r3, r3, #1
 8018f54:	4413      	add	r3, r2
 8018f56:	00db      	lsls	r3, r3, #3
 8018f58:	440b      	add	r3, r1
 8018f5a:	3312      	adds	r3, #18
 8018f5c:	881b      	ldrh	r3, [r3, #0]
 8018f5e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8018f62:	d919      	bls.n	8018f98 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018f64:	79fa      	ldrb	r2, [r7, #7]
 8018f66:	4613      	mov	r3, r2
 8018f68:	005b      	lsls	r3, r3, #1
 8018f6a:	4413      	add	r3, r2
 8018f6c:	00db      	lsls	r3, r3, #3
 8018f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8018f70:	4413      	add	r3, r2
 8018f72:	3304      	adds	r3, #4
 8018f74:	4619      	mov	r1, r3
 8018f76:	68f8      	ldr	r0, [r7, #12]
 8018f78:	f000 fb4c 	bl	8019614 <etharp_request>
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d138      	bne.n	8018ff4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018f82:	79fa      	ldrb	r2, [r7, #7]
 8018f84:	4928      	ldr	r1, [pc, #160]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8018f86:	4613      	mov	r3, r2
 8018f88:	005b      	lsls	r3, r3, #1
 8018f8a:	4413      	add	r3, r2
 8018f8c:	00db      	lsls	r3, r3, #3
 8018f8e:	440b      	add	r3, r1
 8018f90:	3314      	adds	r3, #20
 8018f92:	2203      	movs	r2, #3
 8018f94:	701a      	strb	r2, [r3, #0]
 8018f96:	e02d      	b.n	8018ff4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018f98:	79fa      	ldrb	r2, [r7, #7]
 8018f9a:	4923      	ldr	r1, [pc, #140]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8018f9c:	4613      	mov	r3, r2
 8018f9e:	005b      	lsls	r3, r3, #1
 8018fa0:	4413      	add	r3, r2
 8018fa2:	00db      	lsls	r3, r3, #3
 8018fa4:	440b      	add	r3, r1
 8018fa6:	3312      	adds	r3, #18
 8018fa8:	881b      	ldrh	r3, [r3, #0]
 8018faa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8018fae:	d321      	bcc.n	8018ff4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018fb0:	79fa      	ldrb	r2, [r7, #7]
 8018fb2:	4613      	mov	r3, r2
 8018fb4:	005b      	lsls	r3, r3, #1
 8018fb6:	4413      	add	r3, r2
 8018fb8:	00db      	lsls	r3, r3, #3
 8018fba:	4a1b      	ldr	r2, [pc, #108]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8018fbc:	4413      	add	r3, r2
 8018fbe:	1d19      	adds	r1, r3, #4
 8018fc0:	79fa      	ldrb	r2, [r7, #7]
 8018fc2:	4613      	mov	r3, r2
 8018fc4:	005b      	lsls	r3, r3, #1
 8018fc6:	4413      	add	r3, r2
 8018fc8:	00db      	lsls	r3, r3, #3
 8018fca:	3308      	adds	r3, #8
 8018fcc:	4a16      	ldr	r2, [pc, #88]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8018fce:	4413      	add	r3, r2
 8018fd0:	3304      	adds	r3, #4
 8018fd2:	461a      	mov	r2, r3
 8018fd4:	68f8      	ldr	r0, [r7, #12]
 8018fd6:	f000 fafb 	bl	80195d0 <etharp_request_dst>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d109      	bne.n	8018ff4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018fe0:	79fa      	ldrb	r2, [r7, #7]
 8018fe2:	4911      	ldr	r1, [pc, #68]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8018fe4:	4613      	mov	r3, r2
 8018fe6:	005b      	lsls	r3, r3, #1
 8018fe8:	4413      	add	r3, r2
 8018fea:	00db      	lsls	r3, r3, #3
 8018fec:	440b      	add	r3, r1
 8018fee:	3314      	adds	r3, #20
 8018ff0:	2203      	movs	r2, #3
 8018ff2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8018ffa:	79fa      	ldrb	r2, [r7, #7]
 8018ffc:	4613      	mov	r3, r2
 8018ffe:	005b      	lsls	r3, r3, #1
 8019000:	4413      	add	r3, r2
 8019002:	00db      	lsls	r3, r3, #3
 8019004:	3308      	adds	r3, #8
 8019006:	4a08      	ldr	r2, [pc, #32]	@ (8019028 <etharp_output_to_arp_index+0x124>)
 8019008:	4413      	add	r3, r2
 801900a:	3304      	adds	r3, #4
 801900c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019010:	9200      	str	r2, [sp, #0]
 8019012:	460a      	mov	r2, r1
 8019014:	68b9      	ldr	r1, [r7, #8]
 8019016:	68f8      	ldr	r0, [r7, #12]
 8019018:	f001 ff02 	bl	801ae20 <ethernet_output>
 801901c:	4603      	mov	r3, r0
}
 801901e:	4618      	mov	r0, r3
 8019020:	3710      	adds	r7, #16
 8019022:	46bd      	mov	sp, r7
 8019024:	bd80      	pop	{r7, pc}
 8019026:	bf00      	nop
 8019028:	24014c14 	.word	0x24014c14
 801902c:	0801e6a0 	.word	0x0801e6a0
 8019030:	0801e810 	.word	0x0801e810
 8019034:	0801e718 	.word	0x0801e718

08019038 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b08a      	sub	sp, #40	@ 0x28
 801903c:	af02      	add	r7, sp, #8
 801903e:	60f8      	str	r0, [r7, #12]
 8019040:	60b9      	str	r1, [r7, #8]
 8019042:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d106      	bne.n	801905c <etharp_output+0x24>
 801904e:	4b73      	ldr	r3, [pc, #460]	@ (801921c <etharp_output+0x1e4>)
 8019050:	f240 321e 	movw	r2, #798	@ 0x31e
 8019054:	4972      	ldr	r1, [pc, #456]	@ (8019220 <etharp_output+0x1e8>)
 8019056:	4873      	ldr	r0, [pc, #460]	@ (8019224 <etharp_output+0x1ec>)
 8019058:	f002 f91c 	bl	801b294 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801905c:	68bb      	ldr	r3, [r7, #8]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d106      	bne.n	8019070 <etharp_output+0x38>
 8019062:	4b6e      	ldr	r3, [pc, #440]	@ (801921c <etharp_output+0x1e4>)
 8019064:	f240 321f 	movw	r2, #799	@ 0x31f
 8019068:	496f      	ldr	r1, [pc, #444]	@ (8019228 <etharp_output+0x1f0>)
 801906a:	486e      	ldr	r0, [pc, #440]	@ (8019224 <etharp_output+0x1ec>)
 801906c:	f002 f912 	bl	801b294 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d106      	bne.n	8019084 <etharp_output+0x4c>
 8019076:	4b69      	ldr	r3, [pc, #420]	@ (801921c <etharp_output+0x1e4>)
 8019078:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801907c:	496b      	ldr	r1, [pc, #428]	@ (801922c <etharp_output+0x1f4>)
 801907e:	4869      	ldr	r0, [pc, #420]	@ (8019224 <etharp_output+0x1ec>)
 8019080:	f002 f908 	bl	801b294 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	68f9      	ldr	r1, [r7, #12]
 801908a:	4618      	mov	r0, r3
 801908c:	f000 ff2a 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 8019090:	4603      	mov	r3, r0
 8019092:	2b00      	cmp	r3, #0
 8019094:	d002      	beq.n	801909c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019096:	4b66      	ldr	r3, [pc, #408]	@ (8019230 <etharp_output+0x1f8>)
 8019098:	61fb      	str	r3, [r7, #28]
 801909a:	e0af      	b.n	80191fc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80190a4:	2be0      	cmp	r3, #224	@ 0xe0
 80190a6:	d118      	bne.n	80190da <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80190a8:	2301      	movs	r3, #1
 80190aa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80190ac:	2300      	movs	r3, #0
 80190ae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80190b0:	235e      	movs	r3, #94	@ 0x5e
 80190b2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	3301      	adds	r3, #1
 80190b8:	781b      	ldrb	r3, [r3, #0]
 80190ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80190be:	b2db      	uxtb	r3, r3
 80190c0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	3302      	adds	r3, #2
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	3303      	adds	r3, #3
 80190ce:	781b      	ldrb	r3, [r3, #0]
 80190d0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80190d2:	f107 0310 	add.w	r3, r7, #16
 80190d6:	61fb      	str	r3, [r7, #28]
 80190d8:	e090      	b.n	80191fc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	681a      	ldr	r2, [r3, #0]
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	3304      	adds	r3, #4
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	405a      	eors	r2, r3
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	3308      	adds	r3, #8
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	4013      	ands	r3, r2
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d012      	beq.n	8019118 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80190f8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80190fc:	4293      	cmp	r3, r2
 80190fe:	d00b      	beq.n	8019118 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	330c      	adds	r3, #12
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d003      	beq.n	8019112 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	330c      	adds	r3, #12
 801910e:	61bb      	str	r3, [r7, #24]
 8019110:	e002      	b.n	8019118 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019112:	f06f 0303 	mvn.w	r3, #3
 8019116:	e07d      	b.n	8019214 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019118:	4b46      	ldr	r3, [pc, #280]	@ (8019234 <etharp_output+0x1fc>)
 801911a:	781b      	ldrb	r3, [r3, #0]
 801911c:	4619      	mov	r1, r3
 801911e:	4a46      	ldr	r2, [pc, #280]	@ (8019238 <etharp_output+0x200>)
 8019120:	460b      	mov	r3, r1
 8019122:	005b      	lsls	r3, r3, #1
 8019124:	440b      	add	r3, r1
 8019126:	00db      	lsls	r3, r3, #3
 8019128:	4413      	add	r3, r2
 801912a:	3314      	adds	r3, #20
 801912c:	781b      	ldrb	r3, [r3, #0]
 801912e:	2b01      	cmp	r3, #1
 8019130:	d925      	bls.n	801917e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019132:	4b40      	ldr	r3, [pc, #256]	@ (8019234 <etharp_output+0x1fc>)
 8019134:	781b      	ldrb	r3, [r3, #0]
 8019136:	4619      	mov	r1, r3
 8019138:	4a3f      	ldr	r2, [pc, #252]	@ (8019238 <etharp_output+0x200>)
 801913a:	460b      	mov	r3, r1
 801913c:	005b      	lsls	r3, r3, #1
 801913e:	440b      	add	r3, r1
 8019140:	00db      	lsls	r3, r3, #3
 8019142:	4413      	add	r3, r2
 8019144:	3308      	adds	r3, #8
 8019146:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019148:	68fa      	ldr	r2, [r7, #12]
 801914a:	429a      	cmp	r2, r3
 801914c:	d117      	bne.n	801917e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801914e:	69bb      	ldr	r3, [r7, #24]
 8019150:	681a      	ldr	r2, [r3, #0]
 8019152:	4b38      	ldr	r3, [pc, #224]	@ (8019234 <etharp_output+0x1fc>)
 8019154:	781b      	ldrb	r3, [r3, #0]
 8019156:	4618      	mov	r0, r3
 8019158:	4937      	ldr	r1, [pc, #220]	@ (8019238 <etharp_output+0x200>)
 801915a:	4603      	mov	r3, r0
 801915c:	005b      	lsls	r3, r3, #1
 801915e:	4403      	add	r3, r0
 8019160:	00db      	lsls	r3, r3, #3
 8019162:	440b      	add	r3, r1
 8019164:	3304      	adds	r3, #4
 8019166:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019168:	429a      	cmp	r2, r3
 801916a:	d108      	bne.n	801917e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801916c:	4b31      	ldr	r3, [pc, #196]	@ (8019234 <etharp_output+0x1fc>)
 801916e:	781b      	ldrb	r3, [r3, #0]
 8019170:	461a      	mov	r2, r3
 8019172:	68b9      	ldr	r1, [r7, #8]
 8019174:	68f8      	ldr	r0, [r7, #12]
 8019176:	f7ff fec5 	bl	8018f04 <etharp_output_to_arp_index>
 801917a:	4603      	mov	r3, r0
 801917c:	e04a      	b.n	8019214 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801917e:	2300      	movs	r3, #0
 8019180:	75fb      	strb	r3, [r7, #23]
 8019182:	e031      	b.n	80191e8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019184:	7dfa      	ldrb	r2, [r7, #23]
 8019186:	492c      	ldr	r1, [pc, #176]	@ (8019238 <etharp_output+0x200>)
 8019188:	4613      	mov	r3, r2
 801918a:	005b      	lsls	r3, r3, #1
 801918c:	4413      	add	r3, r2
 801918e:	00db      	lsls	r3, r3, #3
 8019190:	440b      	add	r3, r1
 8019192:	3314      	adds	r3, #20
 8019194:	781b      	ldrb	r3, [r3, #0]
 8019196:	2b01      	cmp	r3, #1
 8019198:	d923      	bls.n	80191e2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801919a:	7dfa      	ldrb	r2, [r7, #23]
 801919c:	4926      	ldr	r1, [pc, #152]	@ (8019238 <etharp_output+0x200>)
 801919e:	4613      	mov	r3, r2
 80191a0:	005b      	lsls	r3, r3, #1
 80191a2:	4413      	add	r3, r2
 80191a4:	00db      	lsls	r3, r3, #3
 80191a6:	440b      	add	r3, r1
 80191a8:	3308      	adds	r3, #8
 80191aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80191ac:	68fa      	ldr	r2, [r7, #12]
 80191ae:	429a      	cmp	r2, r3
 80191b0:	d117      	bne.n	80191e2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80191b2:	69bb      	ldr	r3, [r7, #24]
 80191b4:	6819      	ldr	r1, [r3, #0]
 80191b6:	7dfa      	ldrb	r2, [r7, #23]
 80191b8:	481f      	ldr	r0, [pc, #124]	@ (8019238 <etharp_output+0x200>)
 80191ba:	4613      	mov	r3, r2
 80191bc:	005b      	lsls	r3, r3, #1
 80191be:	4413      	add	r3, r2
 80191c0:	00db      	lsls	r3, r3, #3
 80191c2:	4403      	add	r3, r0
 80191c4:	3304      	adds	r3, #4
 80191c6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80191c8:	4299      	cmp	r1, r3
 80191ca:	d10a      	bne.n	80191e2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80191cc:	4a19      	ldr	r2, [pc, #100]	@ (8019234 <etharp_output+0x1fc>)
 80191ce:	7dfb      	ldrb	r3, [r7, #23]
 80191d0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80191d2:	7dfb      	ldrb	r3, [r7, #23]
 80191d4:	461a      	mov	r2, r3
 80191d6:	68b9      	ldr	r1, [r7, #8]
 80191d8:	68f8      	ldr	r0, [r7, #12]
 80191da:	f7ff fe93 	bl	8018f04 <etharp_output_to_arp_index>
 80191de:	4603      	mov	r3, r0
 80191e0:	e018      	b.n	8019214 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80191e2:	7dfb      	ldrb	r3, [r7, #23]
 80191e4:	3301      	adds	r3, #1
 80191e6:	75fb      	strb	r3, [r7, #23]
 80191e8:	7dfb      	ldrb	r3, [r7, #23]
 80191ea:	2b09      	cmp	r3, #9
 80191ec:	d9ca      	bls.n	8019184 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80191ee:	68ba      	ldr	r2, [r7, #8]
 80191f0:	69b9      	ldr	r1, [r7, #24]
 80191f2:	68f8      	ldr	r0, [r7, #12]
 80191f4:	f000 f822 	bl	801923c <etharp_query>
 80191f8:	4603      	mov	r3, r0
 80191fa:	e00b      	b.n	8019214 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8019202:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019206:	9300      	str	r3, [sp, #0]
 8019208:	69fb      	ldr	r3, [r7, #28]
 801920a:	68b9      	ldr	r1, [r7, #8]
 801920c:	68f8      	ldr	r0, [r7, #12]
 801920e:	f001 fe07 	bl	801ae20 <ethernet_output>
 8019212:	4603      	mov	r3, r0
}
 8019214:	4618      	mov	r0, r3
 8019216:	3720      	adds	r7, #32
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}
 801921c:	0801e6a0 	.word	0x0801e6a0
 8019220:	0801e7f0 	.word	0x0801e7f0
 8019224:	0801e718 	.word	0x0801e718
 8019228:	0801e840 	.word	0x0801e840
 801922c:	0801e7e0 	.word	0x0801e7e0
 8019230:	0801eef4 	.word	0x0801eef4
 8019234:	24014d04 	.word	0x24014d04
 8019238:	24014c14 	.word	0x24014c14

0801923c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b08c      	sub	sp, #48	@ 0x30
 8019240:	af02      	add	r7, sp, #8
 8019242:	60f8      	str	r0, [r7, #12]
 8019244:	60b9      	str	r1, [r7, #8]
 8019246:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	3326      	adds	r3, #38	@ 0x26
 801924c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801924e:	23ff      	movs	r3, #255	@ 0xff
 8019250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8019254:	2300      	movs	r3, #0
 8019256:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	68f9      	ldr	r1, [r7, #12]
 801925e:	4618      	mov	r0, r3
 8019260:	f000 fe40 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 8019264:	4603      	mov	r3, r0
 8019266:	2b00      	cmp	r3, #0
 8019268:	d10c      	bne.n	8019284 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801926a:	68bb      	ldr	r3, [r7, #8]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019272:	2be0      	cmp	r3, #224	@ 0xe0
 8019274:	d006      	beq.n	8019284 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019276:	68bb      	ldr	r3, [r7, #8]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d003      	beq.n	8019284 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801927c:	68bb      	ldr	r3, [r7, #8]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d102      	bne.n	801928a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019284:	f06f 030f 	mvn.w	r3, #15
 8019288:	e101      	b.n	801948e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801928a:	68fa      	ldr	r2, [r7, #12]
 801928c:	2101      	movs	r1, #1
 801928e:	68b8      	ldr	r0, [r7, #8]
 8019290:	f7ff fb60 	bl	8018954 <etharp_find_entry>
 8019294:	4603      	mov	r3, r0
 8019296:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019298:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801929c:	2b00      	cmp	r3, #0
 801929e:	da02      	bge.n	80192a6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80192a0:	8a7b      	ldrh	r3, [r7, #18]
 80192a2:	b25b      	sxtb	r3, r3
 80192a4:	e0f3      	b.n	801948e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80192a6:	8a7b      	ldrh	r3, [r7, #18]
 80192a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80192aa:	d906      	bls.n	80192ba <etharp_query+0x7e>
 80192ac:	4b7a      	ldr	r3, [pc, #488]	@ (8019498 <etharp_query+0x25c>)
 80192ae:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80192b2:	497a      	ldr	r1, [pc, #488]	@ (801949c <etharp_query+0x260>)
 80192b4:	487a      	ldr	r0, [pc, #488]	@ (80194a0 <etharp_query+0x264>)
 80192b6:	f001 ffed 	bl	801b294 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80192ba:	8a7b      	ldrh	r3, [r7, #18]
 80192bc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80192be:	7c7a      	ldrb	r2, [r7, #17]
 80192c0:	4978      	ldr	r1, [pc, #480]	@ (80194a4 <etharp_query+0x268>)
 80192c2:	4613      	mov	r3, r2
 80192c4:	005b      	lsls	r3, r3, #1
 80192c6:	4413      	add	r3, r2
 80192c8:	00db      	lsls	r3, r3, #3
 80192ca:	440b      	add	r3, r1
 80192cc:	3314      	adds	r3, #20
 80192ce:	781b      	ldrb	r3, [r3, #0]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d115      	bne.n	8019300 <etharp_query+0xc4>
    is_new_entry = 1;
 80192d4:	2301      	movs	r3, #1
 80192d6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80192d8:	7c7a      	ldrb	r2, [r7, #17]
 80192da:	4972      	ldr	r1, [pc, #456]	@ (80194a4 <etharp_query+0x268>)
 80192dc:	4613      	mov	r3, r2
 80192de:	005b      	lsls	r3, r3, #1
 80192e0:	4413      	add	r3, r2
 80192e2:	00db      	lsls	r3, r3, #3
 80192e4:	440b      	add	r3, r1
 80192e6:	3314      	adds	r3, #20
 80192e8:	2201      	movs	r2, #1
 80192ea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80192ec:	7c7a      	ldrb	r2, [r7, #17]
 80192ee:	496d      	ldr	r1, [pc, #436]	@ (80194a4 <etharp_query+0x268>)
 80192f0:	4613      	mov	r3, r2
 80192f2:	005b      	lsls	r3, r3, #1
 80192f4:	4413      	add	r3, r2
 80192f6:	00db      	lsls	r3, r3, #3
 80192f8:	440b      	add	r3, r1
 80192fa:	3308      	adds	r3, #8
 80192fc:	68fa      	ldr	r2, [r7, #12]
 80192fe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019300:	7c7a      	ldrb	r2, [r7, #17]
 8019302:	4968      	ldr	r1, [pc, #416]	@ (80194a4 <etharp_query+0x268>)
 8019304:	4613      	mov	r3, r2
 8019306:	005b      	lsls	r3, r3, #1
 8019308:	4413      	add	r3, r2
 801930a:	00db      	lsls	r3, r3, #3
 801930c:	440b      	add	r3, r1
 801930e:	3314      	adds	r3, #20
 8019310:	781b      	ldrb	r3, [r3, #0]
 8019312:	2b01      	cmp	r3, #1
 8019314:	d011      	beq.n	801933a <etharp_query+0xfe>
 8019316:	7c7a      	ldrb	r2, [r7, #17]
 8019318:	4962      	ldr	r1, [pc, #392]	@ (80194a4 <etharp_query+0x268>)
 801931a:	4613      	mov	r3, r2
 801931c:	005b      	lsls	r3, r3, #1
 801931e:	4413      	add	r3, r2
 8019320:	00db      	lsls	r3, r3, #3
 8019322:	440b      	add	r3, r1
 8019324:	3314      	adds	r3, #20
 8019326:	781b      	ldrb	r3, [r3, #0]
 8019328:	2b01      	cmp	r3, #1
 801932a:	d806      	bhi.n	801933a <etharp_query+0xfe>
 801932c:	4b5a      	ldr	r3, [pc, #360]	@ (8019498 <etharp_query+0x25c>)
 801932e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8019332:	495d      	ldr	r1, [pc, #372]	@ (80194a8 <etharp_query+0x26c>)
 8019334:	485a      	ldr	r0, [pc, #360]	@ (80194a0 <etharp_query+0x264>)
 8019336:	f001 ffad 	bl	801b294 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801933a:	6a3b      	ldr	r3, [r7, #32]
 801933c:	2b00      	cmp	r3, #0
 801933e:	d102      	bne.n	8019346 <etharp_query+0x10a>
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d10c      	bne.n	8019360 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019346:	68b9      	ldr	r1, [r7, #8]
 8019348:	68f8      	ldr	r0, [r7, #12]
 801934a:	f000 f963 	bl	8019614 <etharp_request>
 801934e:	4603      	mov	r3, r0
 8019350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d102      	bne.n	8019360 <etharp_query+0x124>
      return result;
 801935a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801935e:	e096      	b.n	801948e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d106      	bne.n	8019374 <etharp_query+0x138>
 8019366:	4b4c      	ldr	r3, [pc, #304]	@ (8019498 <etharp_query+0x25c>)
 8019368:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801936c:	494f      	ldr	r1, [pc, #316]	@ (80194ac <etharp_query+0x270>)
 801936e:	484c      	ldr	r0, [pc, #304]	@ (80194a0 <etharp_query+0x264>)
 8019370:	f001 ff90 	bl	801b294 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019374:	7c7a      	ldrb	r2, [r7, #17]
 8019376:	494b      	ldr	r1, [pc, #300]	@ (80194a4 <etharp_query+0x268>)
 8019378:	4613      	mov	r3, r2
 801937a:	005b      	lsls	r3, r3, #1
 801937c:	4413      	add	r3, r2
 801937e:	00db      	lsls	r3, r3, #3
 8019380:	440b      	add	r3, r1
 8019382:	3314      	adds	r3, #20
 8019384:	781b      	ldrb	r3, [r3, #0]
 8019386:	2b01      	cmp	r3, #1
 8019388:	d917      	bls.n	80193ba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801938a:	4a49      	ldr	r2, [pc, #292]	@ (80194b0 <etharp_query+0x274>)
 801938c:	7c7b      	ldrb	r3, [r7, #17]
 801938e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019390:	7c7a      	ldrb	r2, [r7, #17]
 8019392:	4613      	mov	r3, r2
 8019394:	005b      	lsls	r3, r3, #1
 8019396:	4413      	add	r3, r2
 8019398:	00db      	lsls	r3, r3, #3
 801939a:	3308      	adds	r3, #8
 801939c:	4a41      	ldr	r2, [pc, #260]	@ (80194a4 <etharp_query+0x268>)
 801939e:	4413      	add	r3, r2
 80193a0:	3304      	adds	r3, #4
 80193a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80193a6:	9200      	str	r2, [sp, #0]
 80193a8:	697a      	ldr	r2, [r7, #20]
 80193aa:	6879      	ldr	r1, [r7, #4]
 80193ac:	68f8      	ldr	r0, [r7, #12]
 80193ae:	f001 fd37 	bl	801ae20 <ethernet_output>
 80193b2:	4603      	mov	r3, r0
 80193b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80193b8:	e067      	b.n	801948a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80193ba:	7c7a      	ldrb	r2, [r7, #17]
 80193bc:	4939      	ldr	r1, [pc, #228]	@ (80194a4 <etharp_query+0x268>)
 80193be:	4613      	mov	r3, r2
 80193c0:	005b      	lsls	r3, r3, #1
 80193c2:	4413      	add	r3, r2
 80193c4:	00db      	lsls	r3, r3, #3
 80193c6:	440b      	add	r3, r1
 80193c8:	3314      	adds	r3, #20
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	2b01      	cmp	r3, #1
 80193ce:	d15c      	bne.n	801948a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80193d0:	2300      	movs	r3, #0
 80193d2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80193d8:	e01c      	b.n	8019414 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80193da:	69fb      	ldr	r3, [r7, #28]
 80193dc:	895a      	ldrh	r2, [r3, #10]
 80193de:	69fb      	ldr	r3, [r7, #28]
 80193e0:	891b      	ldrh	r3, [r3, #8]
 80193e2:	429a      	cmp	r2, r3
 80193e4:	d10a      	bne.n	80193fc <etharp_query+0x1c0>
 80193e6:	69fb      	ldr	r3, [r7, #28]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d006      	beq.n	80193fc <etharp_query+0x1c0>
 80193ee:	4b2a      	ldr	r3, [pc, #168]	@ (8019498 <etharp_query+0x25c>)
 80193f0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80193f4:	492f      	ldr	r1, [pc, #188]	@ (80194b4 <etharp_query+0x278>)
 80193f6:	482a      	ldr	r0, [pc, #168]	@ (80194a0 <etharp_query+0x264>)
 80193f8:	f001 ff4c 	bl	801b294 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80193fc:	69fb      	ldr	r3, [r7, #28]
 80193fe:	7b1b      	ldrb	r3, [r3, #12]
 8019400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019404:	2b00      	cmp	r3, #0
 8019406:	d002      	beq.n	801940e <etharp_query+0x1d2>
        copy_needed = 1;
 8019408:	2301      	movs	r3, #1
 801940a:	61bb      	str	r3, [r7, #24]
        break;
 801940c:	e005      	b.n	801941a <etharp_query+0x1de>
      }
      p = p->next;
 801940e:	69fb      	ldr	r3, [r7, #28]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019414:	69fb      	ldr	r3, [r7, #28]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d1df      	bne.n	80193da <etharp_query+0x19e>
    }
    if (copy_needed) {
 801941a:	69bb      	ldr	r3, [r7, #24]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d007      	beq.n	8019430 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019420:	687a      	ldr	r2, [r7, #4]
 8019422:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8019426:	200e      	movs	r0, #14
 8019428:	f7f9 f8da 	bl	80125e0 <pbuf_clone>
 801942c:	61f8      	str	r0, [r7, #28]
 801942e:	e004      	b.n	801943a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019434:	69f8      	ldr	r0, [r7, #28]
 8019436:	f7f8 ff01 	bl	801223c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801943a:	69fb      	ldr	r3, [r7, #28]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d021      	beq.n	8019484 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019440:	7c7a      	ldrb	r2, [r7, #17]
 8019442:	4918      	ldr	r1, [pc, #96]	@ (80194a4 <etharp_query+0x268>)
 8019444:	4613      	mov	r3, r2
 8019446:	005b      	lsls	r3, r3, #1
 8019448:	4413      	add	r3, r2
 801944a:	00db      	lsls	r3, r3, #3
 801944c:	440b      	add	r3, r1
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d00a      	beq.n	801946a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019454:	7c7a      	ldrb	r2, [r7, #17]
 8019456:	4913      	ldr	r1, [pc, #76]	@ (80194a4 <etharp_query+0x268>)
 8019458:	4613      	mov	r3, r2
 801945a:	005b      	lsls	r3, r3, #1
 801945c:	4413      	add	r3, r2
 801945e:	00db      	lsls	r3, r3, #3
 8019460:	440b      	add	r3, r1
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	4618      	mov	r0, r3
 8019466:	f7f8 fe43 	bl	80120f0 <pbuf_free>
      }
      arp_table[i].q = p;
 801946a:	7c7a      	ldrb	r2, [r7, #17]
 801946c:	490d      	ldr	r1, [pc, #52]	@ (80194a4 <etharp_query+0x268>)
 801946e:	4613      	mov	r3, r2
 8019470:	005b      	lsls	r3, r3, #1
 8019472:	4413      	add	r3, r2
 8019474:	00db      	lsls	r3, r3, #3
 8019476:	440b      	add	r3, r1
 8019478:	69fa      	ldr	r2, [r7, #28]
 801947a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801947c:	2300      	movs	r3, #0
 801947e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019482:	e002      	b.n	801948a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019484:	23ff      	movs	r3, #255	@ 0xff
 8019486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801948a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801948e:	4618      	mov	r0, r3
 8019490:	3728      	adds	r7, #40	@ 0x28
 8019492:	46bd      	mov	sp, r7
 8019494:	bd80      	pop	{r7, pc}
 8019496:	bf00      	nop
 8019498:	0801e6a0 	.word	0x0801e6a0
 801949c:	0801e84c 	.word	0x0801e84c
 80194a0:	0801e718 	.word	0x0801e718
 80194a4:	24014c14 	.word	0x24014c14
 80194a8:	0801e85c 	.word	0x0801e85c
 80194ac:	0801e840 	.word	0x0801e840
 80194b0:	24014d04 	.word	0x24014d04
 80194b4:	0801e884 	.word	0x0801e884

080194b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b08a      	sub	sp, #40	@ 0x28
 80194bc:	af02      	add	r7, sp, #8
 80194be:	60f8      	str	r0, [r7, #12]
 80194c0:	60b9      	str	r1, [r7, #8]
 80194c2:	607a      	str	r2, [r7, #4]
 80194c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80194c6:	2300      	movs	r3, #0
 80194c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d106      	bne.n	80194de <etharp_raw+0x26>
 80194d0:	4b3a      	ldr	r3, [pc, #232]	@ (80195bc <etharp_raw+0x104>)
 80194d2:	f240 4257 	movw	r2, #1111	@ 0x457
 80194d6:	493a      	ldr	r1, [pc, #232]	@ (80195c0 <etharp_raw+0x108>)
 80194d8:	483a      	ldr	r0, [pc, #232]	@ (80195c4 <etharp_raw+0x10c>)
 80194da:	f001 fedb 	bl	801b294 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80194de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80194e2:	211c      	movs	r1, #28
 80194e4:	200e      	movs	r0, #14
 80194e6:	f7f8 fb1b 	bl	8011b20 <pbuf_alloc>
 80194ea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80194ec:	69bb      	ldr	r3, [r7, #24]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d102      	bne.n	80194f8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80194f2:	f04f 33ff 	mov.w	r3, #4294967295
 80194f6:	e05d      	b.n	80195b4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80194f8:	69bb      	ldr	r3, [r7, #24]
 80194fa:	895b      	ldrh	r3, [r3, #10]
 80194fc:	2b1b      	cmp	r3, #27
 80194fe:	d806      	bhi.n	801950e <etharp_raw+0x56>
 8019500:	4b2e      	ldr	r3, [pc, #184]	@ (80195bc <etharp_raw+0x104>)
 8019502:	f240 4262 	movw	r2, #1122	@ 0x462
 8019506:	4930      	ldr	r1, [pc, #192]	@ (80195c8 <etharp_raw+0x110>)
 8019508:	482e      	ldr	r0, [pc, #184]	@ (80195c4 <etharp_raw+0x10c>)
 801950a:	f001 fec3 	bl	801b294 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801950e:	69bb      	ldr	r3, [r7, #24]
 8019510:	685b      	ldr	r3, [r3, #4]
 8019512:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019514:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019516:	4618      	mov	r0, r3
 8019518:	f7f7 f938 	bl	801078c <lwip_htons>
 801951c:	4603      	mov	r3, r0
 801951e:	461a      	mov	r2, r3
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801952a:	2b06      	cmp	r3, #6
 801952c:	d006      	beq.n	801953c <etharp_raw+0x84>
 801952e:	4b23      	ldr	r3, [pc, #140]	@ (80195bc <etharp_raw+0x104>)
 8019530:	f240 4269 	movw	r2, #1129	@ 0x469
 8019534:	4925      	ldr	r1, [pc, #148]	@ (80195cc <etharp_raw+0x114>)
 8019536:	4823      	ldr	r0, [pc, #140]	@ (80195c4 <etharp_raw+0x10c>)
 8019538:	f001 feac 	bl	801b294 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801953c:	697b      	ldr	r3, [r7, #20]
 801953e:	3308      	adds	r3, #8
 8019540:	2206      	movs	r2, #6
 8019542:	6839      	ldr	r1, [r7, #0]
 8019544:	4618      	mov	r0, r3
 8019546:	f001 ffde 	bl	801b506 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801954a:	697b      	ldr	r3, [r7, #20]
 801954c:	3312      	adds	r3, #18
 801954e:	2206      	movs	r2, #6
 8019550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019552:	4618      	mov	r0, r3
 8019554:	f001 ffd7 	bl	801b506 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019558:	697b      	ldr	r3, [r7, #20]
 801955a:	330e      	adds	r3, #14
 801955c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801955e:	6812      	ldr	r2, [r2, #0]
 8019560:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	3318      	adds	r3, #24
 8019566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019568:	6812      	ldr	r2, [r2, #0]
 801956a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801956c:	697b      	ldr	r3, [r7, #20]
 801956e:	2200      	movs	r2, #0
 8019570:	701a      	strb	r2, [r3, #0]
 8019572:	2200      	movs	r2, #0
 8019574:	f042 0201 	orr.w	r2, r2, #1
 8019578:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801957a:	697b      	ldr	r3, [r7, #20]
 801957c:	2200      	movs	r2, #0
 801957e:	f042 0208 	orr.w	r2, r2, #8
 8019582:	709a      	strb	r2, [r3, #2]
 8019584:	2200      	movs	r2, #0
 8019586:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	2206      	movs	r2, #6
 801958c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801958e:	697b      	ldr	r3, [r7, #20]
 8019590:	2204      	movs	r2, #4
 8019592:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019594:	f640 0306 	movw	r3, #2054	@ 0x806
 8019598:	9300      	str	r3, [sp, #0]
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	68ba      	ldr	r2, [r7, #8]
 801959e:	69b9      	ldr	r1, [r7, #24]
 80195a0:	68f8      	ldr	r0, [r7, #12]
 80195a2:	f001 fc3d 	bl	801ae20 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80195a6:	69b8      	ldr	r0, [r7, #24]
 80195a8:	f7f8 fda2 	bl	80120f0 <pbuf_free>
  p = NULL;
 80195ac:	2300      	movs	r3, #0
 80195ae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80195b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80195b4:	4618      	mov	r0, r3
 80195b6:	3720      	adds	r7, #32
 80195b8:	46bd      	mov	sp, r7
 80195ba:	bd80      	pop	{r7, pc}
 80195bc:	0801e6a0 	.word	0x0801e6a0
 80195c0:	0801e7f0 	.word	0x0801e7f0
 80195c4:	0801e718 	.word	0x0801e718
 80195c8:	0801e8a0 	.word	0x0801e8a0
 80195cc:	0801e8d4 	.word	0x0801e8d4

080195d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b088      	sub	sp, #32
 80195d4:	af04      	add	r7, sp, #16
 80195d6:	60f8      	str	r0, [r7, #12]
 80195d8:	60b9      	str	r1, [r7, #8]
 80195da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80195ec:	2201      	movs	r2, #1
 80195ee:	9203      	str	r2, [sp, #12]
 80195f0:	68ba      	ldr	r2, [r7, #8]
 80195f2:	9202      	str	r2, [sp, #8]
 80195f4:	4a06      	ldr	r2, [pc, #24]	@ (8019610 <etharp_request_dst+0x40>)
 80195f6:	9201      	str	r2, [sp, #4]
 80195f8:	9300      	str	r3, [sp, #0]
 80195fa:	4603      	mov	r3, r0
 80195fc:	687a      	ldr	r2, [r7, #4]
 80195fe:	68f8      	ldr	r0, [r7, #12]
 8019600:	f7ff ff5a 	bl	80194b8 <etharp_raw>
 8019604:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019606:	4618      	mov	r0, r3
 8019608:	3710      	adds	r7, #16
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}
 801960e:	bf00      	nop
 8019610:	0801eefc 	.word	0x0801eefc

08019614 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019614:	b580      	push	{r7, lr}
 8019616:	b082      	sub	sp, #8
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
 801961c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801961e:	4a05      	ldr	r2, [pc, #20]	@ (8019634 <etharp_request+0x20>)
 8019620:	6839      	ldr	r1, [r7, #0]
 8019622:	6878      	ldr	r0, [r7, #4]
 8019624:	f7ff ffd4 	bl	80195d0 <etharp_request_dst>
 8019628:	4603      	mov	r3, r0
}
 801962a:	4618      	mov	r0, r3
 801962c:	3708      	adds	r7, #8
 801962e:	46bd      	mov	sp, r7
 8019630:	bd80      	pop	{r7, pc}
 8019632:	bf00      	nop
 8019634:	0801eef4 	.word	0x0801eef4

08019638 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b08e      	sub	sp, #56	@ 0x38
 801963c:	af04      	add	r7, sp, #16
 801963e:	6078      	str	r0, [r7, #4]
 8019640:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019642:	4b87      	ldr	r3, [pc, #540]	@ (8019860 <icmp_input+0x228>)
 8019644:	689b      	ldr	r3, [r3, #8]
 8019646:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801964a:	781b      	ldrb	r3, [r3, #0]
 801964c:	f003 030f 	and.w	r3, r3, #15
 8019650:	b2db      	uxtb	r3, r3
 8019652:	009b      	lsls	r3, r3, #2
 8019654:	b2db      	uxtb	r3, r3
 8019656:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8019658:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801965a:	2b13      	cmp	r3, #19
 801965c:	f240 80e8 	bls.w	8019830 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	895b      	ldrh	r3, [r3, #10]
 8019664:	2b03      	cmp	r3, #3
 8019666:	f240 80e5 	bls.w	8019834 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	685b      	ldr	r3, [r3, #4]
 801966e:	781b      	ldrb	r3, [r3, #0]
 8019670:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019674:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8019678:	2b00      	cmp	r3, #0
 801967a:	f000 80d2 	beq.w	8019822 <icmp_input+0x1ea>
 801967e:	2b08      	cmp	r3, #8
 8019680:	f040 80d2 	bne.w	8019828 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019684:	4b77      	ldr	r3, [pc, #476]	@ (8019864 <icmp_input+0x22c>)
 8019686:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019688:	4b75      	ldr	r3, [pc, #468]	@ (8019860 <icmp_input+0x228>)
 801968a:	695b      	ldr	r3, [r3, #20]
 801968c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019690:	2be0      	cmp	r3, #224	@ 0xe0
 8019692:	f000 80d6 	beq.w	8019842 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019696:	4b72      	ldr	r3, [pc, #456]	@ (8019860 <icmp_input+0x228>)
 8019698:	695b      	ldr	r3, [r3, #20]
 801969a:	4a71      	ldr	r2, [pc, #452]	@ (8019860 <icmp_input+0x228>)
 801969c:	6812      	ldr	r2, [r2, #0]
 801969e:	4611      	mov	r1, r2
 80196a0:	4618      	mov	r0, r3
 80196a2:	f000 fc1f 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 80196a6:	4603      	mov	r3, r0
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	f040 80cc 	bne.w	8019846 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	891b      	ldrh	r3, [r3, #8]
 80196b2:	2b07      	cmp	r3, #7
 80196b4:	f240 80c0 	bls.w	8019838 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80196b8:	6878      	ldr	r0, [r7, #4]
 80196ba:	f7f7 f905 	bl	80108c8 <inet_chksum_pbuf>
 80196be:	4603      	mov	r3, r0
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d003      	beq.n	80196cc <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80196c4:	6878      	ldr	r0, [r7, #4]
 80196c6:	f7f8 fd13 	bl	80120f0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80196ca:	e0c5      	b.n	8019858 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80196cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80196ce:	330e      	adds	r3, #14
 80196d0:	4619      	mov	r1, r3
 80196d2:	6878      	ldr	r0, [r7, #4]
 80196d4:	f7f8 fc76 	bl	8011fc4 <pbuf_add_header>
 80196d8:	4603      	mov	r3, r0
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d04b      	beq.n	8019776 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	891a      	ldrh	r2, [r3, #8]
 80196e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80196e4:	4413      	add	r3, r2
 80196e6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	891b      	ldrh	r3, [r3, #8]
 80196ec:	8b7a      	ldrh	r2, [r7, #26]
 80196ee:	429a      	cmp	r2, r3
 80196f0:	f0c0 80ab 	bcc.w	801984a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80196f4:	8b7b      	ldrh	r3, [r7, #26]
 80196f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80196fa:	4619      	mov	r1, r3
 80196fc:	200e      	movs	r0, #14
 80196fe:	f7f8 fa0f 	bl	8011b20 <pbuf_alloc>
 8019702:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019704:	697b      	ldr	r3, [r7, #20]
 8019706:	2b00      	cmp	r3, #0
 8019708:	f000 80a1 	beq.w	801984e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	895b      	ldrh	r3, [r3, #10]
 8019710:	461a      	mov	r2, r3
 8019712:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019714:	3308      	adds	r3, #8
 8019716:	429a      	cmp	r2, r3
 8019718:	d203      	bcs.n	8019722 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801971a:	6978      	ldr	r0, [r7, #20]
 801971c:	f7f8 fce8 	bl	80120f0 <pbuf_free>
          goto icmperr;
 8019720:	e096      	b.n	8019850 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019722:	697b      	ldr	r3, [r7, #20]
 8019724:	685b      	ldr	r3, [r3, #4]
 8019726:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019728:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801972a:	4618      	mov	r0, r3
 801972c:	f001 feeb 	bl	801b506 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019730:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019732:	4619      	mov	r1, r3
 8019734:	6978      	ldr	r0, [r7, #20]
 8019736:	f7f8 fc55 	bl	8011fe4 <pbuf_remove_header>
 801973a:	4603      	mov	r3, r0
 801973c:	2b00      	cmp	r3, #0
 801973e:	d009      	beq.n	8019754 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019740:	4b49      	ldr	r3, [pc, #292]	@ (8019868 <icmp_input+0x230>)
 8019742:	22b6      	movs	r2, #182	@ 0xb6
 8019744:	4949      	ldr	r1, [pc, #292]	@ (801986c <icmp_input+0x234>)
 8019746:	484a      	ldr	r0, [pc, #296]	@ (8019870 <icmp_input+0x238>)
 8019748:	f001 fda4 	bl	801b294 <iprintf>
          pbuf_free(r);
 801974c:	6978      	ldr	r0, [r7, #20]
 801974e:	f7f8 fccf 	bl	80120f0 <pbuf_free>
          goto icmperr;
 8019752:	e07d      	b.n	8019850 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019754:	6879      	ldr	r1, [r7, #4]
 8019756:	6978      	ldr	r0, [r7, #20]
 8019758:	f7f8 fdfe 	bl	8012358 <pbuf_copy>
 801975c:	4603      	mov	r3, r0
 801975e:	2b00      	cmp	r3, #0
 8019760:	d003      	beq.n	801976a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019762:	6978      	ldr	r0, [r7, #20]
 8019764:	f7f8 fcc4 	bl	80120f0 <pbuf_free>
          goto icmperr;
 8019768:	e072      	b.n	8019850 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801976a:	6878      	ldr	r0, [r7, #4]
 801976c:	f7f8 fcc0 	bl	80120f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019770:	697b      	ldr	r3, [r7, #20]
 8019772:	607b      	str	r3, [r7, #4]
 8019774:	e00f      	b.n	8019796 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019776:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019778:	330e      	adds	r3, #14
 801977a:	4619      	mov	r1, r3
 801977c:	6878      	ldr	r0, [r7, #4]
 801977e:	f7f8 fc31 	bl	8011fe4 <pbuf_remove_header>
 8019782:	4603      	mov	r3, r0
 8019784:	2b00      	cmp	r3, #0
 8019786:	d006      	beq.n	8019796 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019788:	4b37      	ldr	r3, [pc, #220]	@ (8019868 <icmp_input+0x230>)
 801978a:	22c7      	movs	r2, #199	@ 0xc7
 801978c:	4939      	ldr	r1, [pc, #228]	@ (8019874 <icmp_input+0x23c>)
 801978e:	4838      	ldr	r0, [pc, #224]	@ (8019870 <icmp_input+0x238>)
 8019790:	f001 fd80 	bl	801b294 <iprintf>
          goto icmperr;
 8019794:	e05c      	b.n	8019850 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	685b      	ldr	r3, [r3, #4]
 801979a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801979c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801979e:	4619      	mov	r1, r3
 80197a0:	6878      	ldr	r0, [r7, #4]
 80197a2:	f7f8 fc0f 	bl	8011fc4 <pbuf_add_header>
 80197a6:	4603      	mov	r3, r0
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d13c      	bne.n	8019826 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	685b      	ldr	r3, [r3, #4]
 80197b0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80197b2:	69fb      	ldr	r3, [r7, #28]
 80197b4:	681a      	ldr	r2, [r3, #0]
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80197ba:	4b29      	ldr	r3, [pc, #164]	@ (8019860 <icmp_input+0x228>)
 80197bc:	691a      	ldr	r2, [r3, #16]
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80197c2:	693b      	ldr	r3, [r7, #16]
 80197c4:	2200      	movs	r2, #0
 80197c6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80197c8:	693b      	ldr	r3, [r7, #16]
 80197ca:	885b      	ldrh	r3, [r3, #2]
 80197cc:	b29b      	uxth	r3, r3
 80197ce:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80197d2:	4293      	cmp	r3, r2
 80197d4:	d907      	bls.n	80197e6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80197d6:	693b      	ldr	r3, [r7, #16]
 80197d8:	885b      	ldrh	r3, [r3, #2]
 80197da:	b29b      	uxth	r3, r3
 80197dc:	3309      	adds	r3, #9
 80197de:	b29a      	uxth	r2, r3
 80197e0:	693b      	ldr	r3, [r7, #16]
 80197e2:	805a      	strh	r2, [r3, #2]
 80197e4:	e006      	b.n	80197f4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80197e6:	693b      	ldr	r3, [r7, #16]
 80197e8:	885b      	ldrh	r3, [r3, #2]
 80197ea:	b29b      	uxth	r3, r3
 80197ec:	3308      	adds	r3, #8
 80197ee:	b29a      	uxth	r2, r3
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	22ff      	movs	r2, #255	@ 0xff
 80197f8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	2200      	movs	r2, #0
 80197fe:	729a      	strb	r2, [r3, #10]
 8019800:	2200      	movs	r2, #0
 8019802:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019804:	683b      	ldr	r3, [r7, #0]
 8019806:	9302      	str	r3, [sp, #8]
 8019808:	2301      	movs	r3, #1
 801980a:	9301      	str	r3, [sp, #4]
 801980c:	2300      	movs	r3, #0
 801980e:	9300      	str	r3, [sp, #0]
 8019810:	23ff      	movs	r3, #255	@ 0xff
 8019812:	2200      	movs	r2, #0
 8019814:	69f9      	ldr	r1, [r7, #28]
 8019816:	6878      	ldr	r0, [r7, #4]
 8019818:	f000 fa8c 	bl	8019d34 <ip4_output_if>
 801981c:	4603      	mov	r3, r0
 801981e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019820:	e001      	b.n	8019826 <icmp_input+0x1ee>
      break;
 8019822:	bf00      	nop
 8019824:	e000      	b.n	8019828 <icmp_input+0x1f0>
      break;
 8019826:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019828:	6878      	ldr	r0, [r7, #4]
 801982a:	f7f8 fc61 	bl	80120f0 <pbuf_free>
  return;
 801982e:	e013      	b.n	8019858 <icmp_input+0x220>
    goto lenerr;
 8019830:	bf00      	nop
 8019832:	e002      	b.n	801983a <icmp_input+0x202>
    goto lenerr;
 8019834:	bf00      	nop
 8019836:	e000      	b.n	801983a <icmp_input+0x202>
        goto lenerr;
 8019838:	bf00      	nop
lenerr:
  pbuf_free(p);
 801983a:	6878      	ldr	r0, [r7, #4]
 801983c:	f7f8 fc58 	bl	80120f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019840:	e00a      	b.n	8019858 <icmp_input+0x220>
        goto icmperr;
 8019842:	bf00      	nop
 8019844:	e004      	b.n	8019850 <icmp_input+0x218>
        goto icmperr;
 8019846:	bf00      	nop
 8019848:	e002      	b.n	8019850 <icmp_input+0x218>
          goto icmperr;
 801984a:	bf00      	nop
 801984c:	e000      	b.n	8019850 <icmp_input+0x218>
          goto icmperr;
 801984e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019850:	6878      	ldr	r0, [r7, #4]
 8019852:	f7f8 fc4d 	bl	80120f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019856:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019858:	3728      	adds	r7, #40	@ 0x28
 801985a:	46bd      	mov	sp, r7
 801985c:	bd80      	pop	{r7, pc}
 801985e:	bf00      	nop
 8019860:	2400e078 	.word	0x2400e078
 8019864:	2400e08c 	.word	0x2400e08c
 8019868:	0801e918 	.word	0x0801e918
 801986c:	0801e950 	.word	0x0801e950
 8019870:	0801e988 	.word	0x0801e988
 8019874:	0801e9b0 	.word	0x0801e9b0

08019878 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	460b      	mov	r3, r1
 8019882:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019884:	78fb      	ldrb	r3, [r7, #3]
 8019886:	461a      	mov	r2, r3
 8019888:	2103      	movs	r1, #3
 801988a:	6878      	ldr	r0, [r7, #4]
 801988c:	f000 f814 	bl	80198b8 <icmp_send_response>
}
 8019890:	bf00      	nop
 8019892:	3708      	adds	r7, #8
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}

08019898 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019898:	b580      	push	{r7, lr}
 801989a:	b082      	sub	sp, #8
 801989c:	af00      	add	r7, sp, #0
 801989e:	6078      	str	r0, [r7, #4]
 80198a0:	460b      	mov	r3, r1
 80198a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80198a4:	78fb      	ldrb	r3, [r7, #3]
 80198a6:	461a      	mov	r2, r3
 80198a8:	210b      	movs	r1, #11
 80198aa:	6878      	ldr	r0, [r7, #4]
 80198ac:	f000 f804 	bl	80198b8 <icmp_send_response>
}
 80198b0:	bf00      	nop
 80198b2:	3708      	adds	r7, #8
 80198b4:	46bd      	mov	sp, r7
 80198b6:	bd80      	pop	{r7, pc}

080198b8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b08c      	sub	sp, #48	@ 0x30
 80198bc:	af04      	add	r7, sp, #16
 80198be:	6078      	str	r0, [r7, #4]
 80198c0:	460b      	mov	r3, r1
 80198c2:	70fb      	strb	r3, [r7, #3]
 80198c4:	4613      	mov	r3, r2
 80198c6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80198c8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80198cc:	2124      	movs	r1, #36	@ 0x24
 80198ce:	2022      	movs	r0, #34	@ 0x22
 80198d0:	f7f8 f926 	bl	8011b20 <pbuf_alloc>
 80198d4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80198d6:	69fb      	ldr	r3, [r7, #28]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d056      	beq.n	801998a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80198dc:	69fb      	ldr	r3, [r7, #28]
 80198de:	895b      	ldrh	r3, [r3, #10]
 80198e0:	2b23      	cmp	r3, #35	@ 0x23
 80198e2:	d806      	bhi.n	80198f2 <icmp_send_response+0x3a>
 80198e4:	4b2b      	ldr	r3, [pc, #172]	@ (8019994 <icmp_send_response+0xdc>)
 80198e6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80198ea:	492b      	ldr	r1, [pc, #172]	@ (8019998 <icmp_send_response+0xe0>)
 80198ec:	482b      	ldr	r0, [pc, #172]	@ (801999c <icmp_send_response+0xe4>)
 80198ee:	f001 fcd1 	bl	801b294 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	685b      	ldr	r3, [r3, #4]
 80198f6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80198f8:	69fb      	ldr	r3, [r7, #28]
 80198fa:	685b      	ldr	r3, [r3, #4]
 80198fc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80198fe:	697b      	ldr	r3, [r7, #20]
 8019900:	78fa      	ldrb	r2, [r7, #3]
 8019902:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019904:	697b      	ldr	r3, [r7, #20]
 8019906:	78ba      	ldrb	r2, [r7, #2]
 8019908:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801990a:	697b      	ldr	r3, [r7, #20]
 801990c:	2200      	movs	r2, #0
 801990e:	711a      	strb	r2, [r3, #4]
 8019910:	2200      	movs	r2, #0
 8019912:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019914:	697b      	ldr	r3, [r7, #20]
 8019916:	2200      	movs	r2, #0
 8019918:	719a      	strb	r2, [r3, #6]
 801991a:	2200      	movs	r2, #0
 801991c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801991e:	69fb      	ldr	r3, [r7, #28]
 8019920:	685b      	ldr	r3, [r3, #4]
 8019922:	f103 0008 	add.w	r0, r3, #8
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	685b      	ldr	r3, [r3, #4]
 801992a:	221c      	movs	r2, #28
 801992c:	4619      	mov	r1, r3
 801992e:	f001 fdea 	bl	801b506 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019932:	69bb      	ldr	r3, [r7, #24]
 8019934:	68db      	ldr	r3, [r3, #12]
 8019936:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019938:	f107 030c 	add.w	r3, r7, #12
 801993c:	4618      	mov	r0, r3
 801993e:	f000 f82f 	bl	80199a0 <ip4_route>
 8019942:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019944:	693b      	ldr	r3, [r7, #16]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d01b      	beq.n	8019982 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801994a:	697b      	ldr	r3, [r7, #20]
 801994c:	2200      	movs	r2, #0
 801994e:	709a      	strb	r2, [r3, #2]
 8019950:	2200      	movs	r2, #0
 8019952:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019954:	69fb      	ldr	r3, [r7, #28]
 8019956:	895b      	ldrh	r3, [r3, #10]
 8019958:	4619      	mov	r1, r3
 801995a:	6978      	ldr	r0, [r7, #20]
 801995c:	f7f6 ffa2 	bl	80108a4 <inet_chksum>
 8019960:	4603      	mov	r3, r0
 8019962:	461a      	mov	r2, r3
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019968:	f107 020c 	add.w	r2, r7, #12
 801996c:	693b      	ldr	r3, [r7, #16]
 801996e:	9302      	str	r3, [sp, #8]
 8019970:	2301      	movs	r3, #1
 8019972:	9301      	str	r3, [sp, #4]
 8019974:	2300      	movs	r3, #0
 8019976:	9300      	str	r3, [sp, #0]
 8019978:	23ff      	movs	r3, #255	@ 0xff
 801997a:	2100      	movs	r1, #0
 801997c:	69f8      	ldr	r0, [r7, #28]
 801997e:	f000 f9d9 	bl	8019d34 <ip4_output_if>
  }
  pbuf_free(q);
 8019982:	69f8      	ldr	r0, [r7, #28]
 8019984:	f7f8 fbb4 	bl	80120f0 <pbuf_free>
 8019988:	e000      	b.n	801998c <icmp_send_response+0xd4>
    return;
 801998a:	bf00      	nop
}
 801998c:	3720      	adds	r7, #32
 801998e:	46bd      	mov	sp, r7
 8019990:	bd80      	pop	{r7, pc}
 8019992:	bf00      	nop
 8019994:	0801e918 	.word	0x0801e918
 8019998:	0801e9e4 	.word	0x0801e9e4
 801999c:	0801e988 	.word	0x0801e988

080199a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80199a0:	b480      	push	{r7}
 80199a2:	b085      	sub	sp, #20
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80199a8:	4b33      	ldr	r3, [pc, #204]	@ (8019a78 <ip4_route+0xd8>)
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	60fb      	str	r3, [r7, #12]
 80199ae:	e036      	b.n	8019a1e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80199b6:	f003 0301 	and.w	r3, r3, #1
 80199ba:	b2db      	uxtb	r3, r3
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d02b      	beq.n	8019a18 <ip4_route+0x78>
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80199c6:	089b      	lsrs	r3, r3, #2
 80199c8:	f003 0301 	and.w	r3, r3, #1
 80199cc:	b2db      	uxtb	r3, r3
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d022      	beq.n	8019a18 <ip4_route+0x78>
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	3304      	adds	r3, #4
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d01d      	beq.n	8019a18 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681a      	ldr	r2, [r3, #0]
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	3304      	adds	r3, #4
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	405a      	eors	r2, r3
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	3308      	adds	r3, #8
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	4013      	ands	r3, r2
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d101      	bne.n	80199f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	e038      	b.n	8019a6a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80199fe:	f003 0302 	and.w	r3, r3, #2
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d108      	bne.n	8019a18 <ip4_route+0x78>
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	681a      	ldr	r2, [r3, #0]
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	330c      	adds	r3, #12
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	429a      	cmp	r2, r3
 8019a12:	d101      	bne.n	8019a18 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	e028      	b.n	8019a6a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	60fb      	str	r3, [r7, #12]
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d1c5      	bne.n	80199b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019a24:	4b15      	ldr	r3, [pc, #84]	@ (8019a7c <ip4_route+0xdc>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d01a      	beq.n	8019a62 <ip4_route+0xc2>
 8019a2c:	4b13      	ldr	r3, [pc, #76]	@ (8019a7c <ip4_route+0xdc>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a34:	f003 0301 	and.w	r3, r3, #1
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d012      	beq.n	8019a62 <ip4_route+0xc2>
 8019a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8019a7c <ip4_route+0xdc>)
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a44:	f003 0304 	and.w	r3, r3, #4
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d00a      	beq.n	8019a62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8019a7c <ip4_route+0xdc>)
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	3304      	adds	r3, #4
 8019a52:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d004      	beq.n	8019a62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	b2db      	uxtb	r3, r3
 8019a5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8019a60:	d101      	bne.n	8019a66 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019a62:	2300      	movs	r3, #0
 8019a64:	e001      	b.n	8019a6a <ip4_route+0xca>
  }

  return netif_default;
 8019a66:	4b05      	ldr	r3, [pc, #20]	@ (8019a7c <ip4_route+0xdc>)
 8019a68:	681b      	ldr	r3, [r3, #0]
}
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	3714      	adds	r7, #20
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a74:	4770      	bx	lr
 8019a76:	bf00      	nop
 8019a78:	24014ba4 	.word	0x24014ba4
 8019a7c:	24014ba8 	.word	0x24014ba8

08019a80 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b082      	sub	sp, #8
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a8e:	f003 0301 	and.w	r3, r3, #1
 8019a92:	b2db      	uxtb	r3, r3
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d016      	beq.n	8019ac6 <ip4_input_accept+0x46>
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	3304      	adds	r3, #4
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d011      	beq.n	8019ac6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8019ad0 <ip4_input_accept+0x50>)
 8019aa4:	695a      	ldr	r2, [r3, #20]
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	3304      	adds	r3, #4
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	429a      	cmp	r2, r3
 8019aae:	d008      	beq.n	8019ac2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019ab0:	4b07      	ldr	r3, [pc, #28]	@ (8019ad0 <ip4_input_accept+0x50>)
 8019ab2:	695b      	ldr	r3, [r3, #20]
 8019ab4:	6879      	ldr	r1, [r7, #4]
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	f000 fa14 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 8019abc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d001      	beq.n	8019ac6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	e000      	b.n	8019ac8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019ac6:	2300      	movs	r3, #0
}
 8019ac8:	4618      	mov	r0, r3
 8019aca:	3708      	adds	r7, #8
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}
 8019ad0:	2400e078 	.word	0x2400e078

08019ad4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b086      	sub	sp, #24
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	685b      	ldr	r3, [r3, #4]
 8019ae2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019ae4:	697b      	ldr	r3, [r7, #20]
 8019ae6:	781b      	ldrb	r3, [r3, #0]
 8019ae8:	091b      	lsrs	r3, r3, #4
 8019aea:	b2db      	uxtb	r3, r3
 8019aec:	2b04      	cmp	r3, #4
 8019aee:	d004      	beq.n	8019afa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019af0:	6878      	ldr	r0, [r7, #4]
 8019af2:	f7f8 fafd 	bl	80120f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019af6:	2300      	movs	r3, #0
 8019af8:	e113      	b.n	8019d22 <ip4_input+0x24e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019afa:	697b      	ldr	r3, [r7, #20]
 8019afc:	781b      	ldrb	r3, [r3, #0]
 8019afe:	f003 030f 	and.w	r3, r3, #15
 8019b02:	b2db      	uxtb	r3, r3
 8019b04:	009b      	lsls	r3, r3, #2
 8019b06:	b2db      	uxtb	r3, r3
 8019b08:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019b0a:	697b      	ldr	r3, [r7, #20]
 8019b0c:	885b      	ldrh	r3, [r3, #2]
 8019b0e:	b29b      	uxth	r3, r3
 8019b10:	4618      	mov	r0, r3
 8019b12:	f7f6 fe3b 	bl	801078c <lwip_htons>
 8019b16:	4603      	mov	r3, r0
 8019b18:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	891b      	ldrh	r3, [r3, #8]
 8019b1e:	89ba      	ldrh	r2, [r7, #12]
 8019b20:	429a      	cmp	r2, r3
 8019b22:	d204      	bcs.n	8019b2e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019b24:	89bb      	ldrh	r3, [r7, #12]
 8019b26:	4619      	mov	r1, r3
 8019b28:	6878      	ldr	r0, [r7, #4]
 8019b2a:	f7f8 f95b 	bl	8011de4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	895b      	ldrh	r3, [r3, #10]
 8019b32:	89fa      	ldrh	r2, [r7, #14]
 8019b34:	429a      	cmp	r2, r3
 8019b36:	d807      	bhi.n	8019b48 <ip4_input+0x74>
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	891b      	ldrh	r3, [r3, #8]
 8019b3c:	89ba      	ldrh	r2, [r7, #12]
 8019b3e:	429a      	cmp	r2, r3
 8019b40:	d802      	bhi.n	8019b48 <ip4_input+0x74>
 8019b42:	89fb      	ldrh	r3, [r7, #14]
 8019b44:	2b13      	cmp	r3, #19
 8019b46:	d804      	bhi.n	8019b52 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019b48:	6878      	ldr	r0, [r7, #4]
 8019b4a:	f7f8 fad1 	bl	80120f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019b4e:	2300      	movs	r3, #0
 8019b50:	e0e7      	b.n	8019d22 <ip4_input+0x24e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019b52:	697b      	ldr	r3, [r7, #20]
 8019b54:	691b      	ldr	r3, [r3, #16]
 8019b56:	4a75      	ldr	r2, [pc, #468]	@ (8019d2c <ip4_input+0x258>)
 8019b58:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019b5a:	697b      	ldr	r3, [r7, #20]
 8019b5c:	68db      	ldr	r3, [r3, #12]
 8019b5e:	4a73      	ldr	r2, [pc, #460]	@ (8019d2c <ip4_input+0x258>)
 8019b60:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019b62:	4b72      	ldr	r3, [pc, #456]	@ (8019d2c <ip4_input+0x258>)
 8019b64:	695b      	ldr	r3, [r3, #20]
 8019b66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019b6a:	2be0      	cmp	r3, #224	@ 0xe0
 8019b6c:	d112      	bne.n	8019b94 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019b6e:	683b      	ldr	r3, [r7, #0]
 8019b70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b74:	f003 0301 	and.w	r3, r3, #1
 8019b78:	b2db      	uxtb	r3, r3
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d007      	beq.n	8019b8e <ip4_input+0xba>
 8019b7e:	683b      	ldr	r3, [r7, #0]
 8019b80:	3304      	adds	r3, #4
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d002      	beq.n	8019b8e <ip4_input+0xba>
      netif = inp;
 8019b88:	683b      	ldr	r3, [r7, #0]
 8019b8a:	613b      	str	r3, [r7, #16]
 8019b8c:	e02a      	b.n	8019be4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019b8e:	2300      	movs	r3, #0
 8019b90:	613b      	str	r3, [r7, #16]
 8019b92:	e027      	b.n	8019be4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019b94:	6838      	ldr	r0, [r7, #0]
 8019b96:	f7ff ff73 	bl	8019a80 <ip4_input_accept>
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d002      	beq.n	8019ba6 <ip4_input+0xd2>
      netif = inp;
 8019ba0:	683b      	ldr	r3, [r7, #0]
 8019ba2:	613b      	str	r3, [r7, #16]
 8019ba4:	e01e      	b.n	8019be4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019ba6:	2300      	movs	r3, #0
 8019ba8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019baa:	4b60      	ldr	r3, [pc, #384]	@ (8019d2c <ip4_input+0x258>)
 8019bac:	695b      	ldr	r3, [r3, #20]
 8019bae:	b2db      	uxtb	r3, r3
 8019bb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8019bb2:	d017      	beq.n	8019be4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019bb4:	4b5e      	ldr	r3, [pc, #376]	@ (8019d30 <ip4_input+0x25c>)
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	613b      	str	r3, [r7, #16]
 8019bba:	e00e      	b.n	8019bda <ip4_input+0x106>
          if (netif == inp) {
 8019bbc:	693a      	ldr	r2, [r7, #16]
 8019bbe:	683b      	ldr	r3, [r7, #0]
 8019bc0:	429a      	cmp	r2, r3
 8019bc2:	d006      	beq.n	8019bd2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019bc4:	6938      	ldr	r0, [r7, #16]
 8019bc6:	f7ff ff5b 	bl	8019a80 <ip4_input_accept>
 8019bca:	4603      	mov	r3, r0
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d108      	bne.n	8019be2 <ip4_input+0x10e>
 8019bd0:	e000      	b.n	8019bd4 <ip4_input+0x100>
            continue;
 8019bd2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019bd4:	693b      	ldr	r3, [r7, #16]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	613b      	str	r3, [r7, #16]
 8019bda:	693b      	ldr	r3, [r7, #16]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d1ed      	bne.n	8019bbc <ip4_input+0xe8>
 8019be0:	e000      	b.n	8019be4 <ip4_input+0x110>
            break;
 8019be2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019be4:	4b51      	ldr	r3, [pc, #324]	@ (8019d2c <ip4_input+0x258>)
 8019be6:	691b      	ldr	r3, [r3, #16]
 8019be8:	6839      	ldr	r1, [r7, #0]
 8019bea:	4618      	mov	r0, r3
 8019bec:	f000 f97a 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d105      	bne.n	8019c02 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8019d2c <ip4_input+0x258>)
 8019bf8:	691b      	ldr	r3, [r3, #16]
 8019bfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019bfe:	2be0      	cmp	r3, #224	@ 0xe0
 8019c00:	d104      	bne.n	8019c0c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019c02:	6878      	ldr	r0, [r7, #4]
 8019c04:	f7f8 fa74 	bl	80120f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019c08:	2300      	movs	r3, #0
 8019c0a:	e08a      	b.n	8019d22 <ip4_input+0x24e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019c0c:	693b      	ldr	r3, [r7, #16]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d104      	bne.n	8019c1c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019c12:	6878      	ldr	r0, [r7, #4]
 8019c14:	f7f8 fa6c 	bl	80120f0 <pbuf_free>
    return ERR_OK;
 8019c18:	2300      	movs	r3, #0
 8019c1a:	e082      	b.n	8019d22 <ip4_input+0x24e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019c1c:	697b      	ldr	r3, [r7, #20]
 8019c1e:	88db      	ldrh	r3, [r3, #6]
 8019c20:	b29b      	uxth	r3, r3
 8019c22:	461a      	mov	r2, r3
 8019c24:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8019c28:	4013      	ands	r3, r2
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d00b      	beq.n	8019c46 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019c2e:	6878      	ldr	r0, [r7, #4]
 8019c30:	f000 fd2e 	bl	801a690 <ip4_reass>
 8019c34:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d101      	bne.n	8019c40 <ip4_input+0x16c>
      return ERR_OK;
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	e070      	b.n	8019d22 <ip4_input+0x24e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	685b      	ldr	r3, [r3, #4]
 8019c44:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019c46:	4a39      	ldr	r2, [pc, #228]	@ (8019d2c <ip4_input+0x258>)
 8019c48:	693b      	ldr	r3, [r7, #16]
 8019c4a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019c4c:	4a37      	ldr	r2, [pc, #220]	@ (8019d2c <ip4_input+0x258>)
 8019c4e:	683b      	ldr	r3, [r7, #0]
 8019c50:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019c52:	4a36      	ldr	r2, [pc, #216]	@ (8019d2c <ip4_input+0x258>)
 8019c54:	697b      	ldr	r3, [r7, #20]
 8019c56:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019c58:	697b      	ldr	r3, [r7, #20]
 8019c5a:	781b      	ldrb	r3, [r3, #0]
 8019c5c:	f003 030f 	and.w	r3, r3, #15
 8019c60:	b2db      	uxtb	r3, r3
 8019c62:	009b      	lsls	r3, r3, #2
 8019c64:	b2db      	uxtb	r3, r3
 8019c66:	461a      	mov	r2, r3
 8019c68:	4b30      	ldr	r3, [pc, #192]	@ (8019d2c <ip4_input+0x258>)
 8019c6a:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8019c6c:	6839      	ldr	r1, [r7, #0]
 8019c6e:	6878      	ldr	r0, [r7, #4]
 8019c70:	f7f8 fd22 	bl	80126b8 <raw_input>
 8019c74:	4603      	mov	r3, r0
 8019c76:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 8019c78:	7afb      	ldrb	r3, [r7, #11]
 8019c7a:	2b01      	cmp	r3, #1
 8019c7c:	d03e      	beq.n	8019cfc <ip4_input+0x228>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019c7e:	89fb      	ldrh	r3, [r7, #14]
 8019c80:	4619      	mov	r1, r3
 8019c82:	6878      	ldr	r0, [r7, #4]
 8019c84:	f7f8 f9ae 	bl	8011fe4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019c88:	697b      	ldr	r3, [r7, #20]
 8019c8a:	7a5b      	ldrb	r3, [r3, #9]
 8019c8c:	2b11      	cmp	r3, #17
 8019c8e:	d006      	beq.n	8019c9e <ip4_input+0x1ca>
 8019c90:	2b11      	cmp	r3, #17
 8019c92:	dc13      	bgt.n	8019cbc <ip4_input+0x1e8>
 8019c94:	2b01      	cmp	r3, #1
 8019c96:	d00c      	beq.n	8019cb2 <ip4_input+0x1de>
 8019c98:	2b06      	cmp	r3, #6
 8019c9a:	d005      	beq.n	8019ca8 <ip4_input+0x1d4>
 8019c9c:	e00e      	b.n	8019cbc <ip4_input+0x1e8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019c9e:	6839      	ldr	r1, [r7, #0]
 8019ca0:	6878      	ldr	r0, [r7, #4]
 8019ca2:	f7fe f941 	bl	8017f28 <udp_input>
        break;
 8019ca6:	e029      	b.n	8019cfc <ip4_input+0x228>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019ca8:	6839      	ldr	r1, [r7, #0]
 8019caa:	6878      	ldr	r0, [r7, #4]
 8019cac:	f7fa f956 	bl	8013f5c <tcp_input>
        break;
 8019cb0:	e024      	b.n	8019cfc <ip4_input+0x228>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019cb2:	6839      	ldr	r1, [r7, #0]
 8019cb4:	6878      	ldr	r0, [r7, #4]
 8019cb6:	f7ff fcbf 	bl	8019638 <icmp_input>
        break;
 8019cba:	e01f      	b.n	8019cfc <ip4_input+0x228>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8019cbc:	7afb      	ldrb	r3, [r7, #11]
 8019cbe:	2b02      	cmp	r3, #2
 8019cc0:	d018      	beq.n	8019cf4 <ip4_input+0x220>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8019d2c <ip4_input+0x258>)
 8019cc4:	695b      	ldr	r3, [r3, #20]
 8019cc6:	6939      	ldr	r1, [r7, #16]
 8019cc8:	4618      	mov	r0, r3
 8019cca:	f000 f90b 	bl	8019ee4 <ip4_addr_isbroadcast_u32>
 8019cce:	4603      	mov	r3, r0
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d10f      	bne.n	8019cf4 <ip4_input+0x220>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019cd4:	4b15      	ldr	r3, [pc, #84]	@ (8019d2c <ip4_input+0x258>)
 8019cd6:	695b      	ldr	r3, [r3, #20]
 8019cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019cdc:	2be0      	cmp	r3, #224	@ 0xe0
 8019cde:	d009      	beq.n	8019cf4 <ip4_input+0x220>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019ce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019ce4:	4619      	mov	r1, r3
 8019ce6:	6878      	ldr	r0, [r7, #4]
 8019ce8:	f7f8 f9ef 	bl	80120ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019cec:	2102      	movs	r1, #2
 8019cee:	6878      	ldr	r0, [r7, #4]
 8019cf0:	f7ff fdc2 	bl	8019878 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019cf4:	6878      	ldr	r0, [r7, #4]
 8019cf6:	f7f8 f9fb 	bl	80120f0 <pbuf_free>
        break;
 8019cfa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8019d2c <ip4_input+0x258>)
 8019cfe:	2200      	movs	r2, #0
 8019d00:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019d02:	4b0a      	ldr	r3, [pc, #40]	@ (8019d2c <ip4_input+0x258>)
 8019d04:	2200      	movs	r2, #0
 8019d06:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019d08:	4b08      	ldr	r3, [pc, #32]	@ (8019d2c <ip4_input+0x258>)
 8019d0a:	2200      	movs	r2, #0
 8019d0c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019d0e:	4b07      	ldr	r3, [pc, #28]	@ (8019d2c <ip4_input+0x258>)
 8019d10:	2200      	movs	r2, #0
 8019d12:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019d14:	4b05      	ldr	r3, [pc, #20]	@ (8019d2c <ip4_input+0x258>)
 8019d16:	2200      	movs	r2, #0
 8019d18:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019d1a:	4b04      	ldr	r3, [pc, #16]	@ (8019d2c <ip4_input+0x258>)
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019d20:	2300      	movs	r3, #0
}
 8019d22:	4618      	mov	r0, r3
 8019d24:	3718      	adds	r7, #24
 8019d26:	46bd      	mov	sp, r7
 8019d28:	bd80      	pop	{r7, pc}
 8019d2a:	bf00      	nop
 8019d2c:	2400e078 	.word	0x2400e078
 8019d30:	24014ba4 	.word	0x24014ba4

08019d34 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	b08a      	sub	sp, #40	@ 0x28
 8019d38:	af04      	add	r7, sp, #16
 8019d3a:	60f8      	str	r0, [r7, #12]
 8019d3c:	60b9      	str	r1, [r7, #8]
 8019d3e:	607a      	str	r2, [r7, #4]
 8019d40:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019d42:	68bb      	ldr	r3, [r7, #8]
 8019d44:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d009      	beq.n	8019d60 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019d4c:	68bb      	ldr	r3, [r7, #8]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d003      	beq.n	8019d5a <ip4_output_if+0x26>
 8019d52:	68bb      	ldr	r3, [r7, #8]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d102      	bne.n	8019d60 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d5c:	3304      	adds	r3, #4
 8019d5e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019d60:	78fa      	ldrb	r2, [r7, #3]
 8019d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d64:	9302      	str	r3, [sp, #8]
 8019d66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019d6a:	9301      	str	r3, [sp, #4]
 8019d6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019d70:	9300      	str	r3, [sp, #0]
 8019d72:	4613      	mov	r3, r2
 8019d74:	687a      	ldr	r2, [r7, #4]
 8019d76:	6979      	ldr	r1, [r7, #20]
 8019d78:	68f8      	ldr	r0, [r7, #12]
 8019d7a:	f000 f805 	bl	8019d88 <ip4_output_if_src>
 8019d7e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019d80:	4618      	mov	r0, r3
 8019d82:	3718      	adds	r7, #24
 8019d84:	46bd      	mov	sp, r7
 8019d86:	bd80      	pop	{r7, pc}

08019d88 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b088      	sub	sp, #32
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	60f8      	str	r0, [r7, #12]
 8019d90:	60b9      	str	r1, [r7, #8]
 8019d92:	607a      	str	r2, [r7, #4]
 8019d94:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	7b9b      	ldrb	r3, [r3, #14]
 8019d9a:	2b01      	cmp	r3, #1
 8019d9c:	d006      	beq.n	8019dac <ip4_output_if_src+0x24>
 8019d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8019ecc <ip4_output_if_src+0x144>)
 8019da0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8019da4:	494a      	ldr	r1, [pc, #296]	@ (8019ed0 <ip4_output_if_src+0x148>)
 8019da6:	484b      	ldr	r0, [pc, #300]	@ (8019ed4 <ip4_output_if_src+0x14c>)
 8019da8:	f001 fa74 	bl	801b294 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d060      	beq.n	8019e74 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019db2:	2314      	movs	r3, #20
 8019db4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019db6:	2114      	movs	r1, #20
 8019db8:	68f8      	ldr	r0, [r7, #12]
 8019dba:	f7f8 f903 	bl	8011fc4 <pbuf_add_header>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d002      	beq.n	8019dca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019dc4:	f06f 0301 	mvn.w	r3, #1
 8019dc8:	e07c      	b.n	8019ec4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	685b      	ldr	r3, [r3, #4]
 8019dce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	895b      	ldrh	r3, [r3, #10]
 8019dd4:	2b13      	cmp	r3, #19
 8019dd6:	d806      	bhi.n	8019de6 <ip4_output_if_src+0x5e>
 8019dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8019ecc <ip4_output_if_src+0x144>)
 8019dda:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8019dde:	493e      	ldr	r1, [pc, #248]	@ (8019ed8 <ip4_output_if_src+0x150>)
 8019de0:	483c      	ldr	r0, [pc, #240]	@ (8019ed4 <ip4_output_if_src+0x14c>)
 8019de2:	f001 fa57 	bl	801b294 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019de6:	69fb      	ldr	r3, [r7, #28]
 8019de8:	78fa      	ldrb	r2, [r7, #3]
 8019dea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019dec:	69fb      	ldr	r3, [r7, #28]
 8019dee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019df2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	681a      	ldr	r2, [r3, #0]
 8019df8:	69fb      	ldr	r3, [r7, #28]
 8019dfa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019dfc:	8b7b      	ldrh	r3, [r7, #26]
 8019dfe:	089b      	lsrs	r3, r3, #2
 8019e00:	b29b      	uxth	r3, r3
 8019e02:	b2db      	uxtb	r3, r3
 8019e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e08:	b2da      	uxtb	r2, r3
 8019e0a:	69fb      	ldr	r3, [r7, #28]
 8019e0c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019e0e:	69fb      	ldr	r3, [r7, #28]
 8019e10:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019e14:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	891b      	ldrh	r3, [r3, #8]
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f7f6 fcb6 	bl	801078c <lwip_htons>
 8019e20:	4603      	mov	r3, r0
 8019e22:	461a      	mov	r2, r3
 8019e24:	69fb      	ldr	r3, [r7, #28]
 8019e26:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019e28:	69fb      	ldr	r3, [r7, #28]
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	719a      	strb	r2, [r3, #6]
 8019e2e:	2200      	movs	r2, #0
 8019e30:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019e32:	4b2a      	ldr	r3, [pc, #168]	@ (8019edc <ip4_output_if_src+0x154>)
 8019e34:	881b      	ldrh	r3, [r3, #0]
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7f6 fca8 	bl	801078c <lwip_htons>
 8019e3c:	4603      	mov	r3, r0
 8019e3e:	461a      	mov	r2, r3
 8019e40:	69fb      	ldr	r3, [r7, #28]
 8019e42:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019e44:	4b25      	ldr	r3, [pc, #148]	@ (8019edc <ip4_output_if_src+0x154>)
 8019e46:	881b      	ldrh	r3, [r3, #0]
 8019e48:	3301      	adds	r3, #1
 8019e4a:	b29a      	uxth	r2, r3
 8019e4c:	4b23      	ldr	r3, [pc, #140]	@ (8019edc <ip4_output_if_src+0x154>)
 8019e4e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019e50:	68bb      	ldr	r3, [r7, #8]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d104      	bne.n	8019e60 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019e56:	4b22      	ldr	r3, [pc, #136]	@ (8019ee0 <ip4_output_if_src+0x158>)
 8019e58:	681a      	ldr	r2, [r3, #0]
 8019e5a:	69fb      	ldr	r3, [r7, #28]
 8019e5c:	60da      	str	r2, [r3, #12]
 8019e5e:	e003      	b.n	8019e68 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	681a      	ldr	r2, [r3, #0]
 8019e64:	69fb      	ldr	r3, [r7, #28]
 8019e66:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019e68:	69fb      	ldr	r3, [r7, #28]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	729a      	strb	r2, [r3, #10]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	72da      	strb	r2, [r3, #11]
 8019e72:	e00f      	b.n	8019e94 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	895b      	ldrh	r3, [r3, #10]
 8019e78:	2b13      	cmp	r3, #19
 8019e7a:	d802      	bhi.n	8019e82 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019e7c:	f06f 0301 	mvn.w	r3, #1
 8019e80:	e020      	b.n	8019ec4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	685b      	ldr	r3, [r3, #4]
 8019e86:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019e88:	69fb      	ldr	r3, [r7, #28]
 8019e8a:	691b      	ldr	r3, [r3, #16]
 8019e8c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019e8e:	f107 0314 	add.w	r3, r7, #20
 8019e92:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d00c      	beq.n	8019eb6 <ip4_output_if_src+0x12e>
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	891a      	ldrh	r2, [r3, #8]
 8019ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ea2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019ea4:	429a      	cmp	r2, r3
 8019ea6:	d906      	bls.n	8019eb6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019ea8:	687a      	ldr	r2, [r7, #4]
 8019eaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019eac:	68f8      	ldr	r0, [r7, #12]
 8019eae:	f000 fde3 	bl	801aa78 <ip4_frag>
 8019eb2:	4603      	mov	r3, r0
 8019eb4:	e006      	b.n	8019ec4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019eb8:	695b      	ldr	r3, [r3, #20]
 8019eba:	687a      	ldr	r2, [r7, #4]
 8019ebc:	68f9      	ldr	r1, [r7, #12]
 8019ebe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ec0:	4798      	blx	r3
 8019ec2:	4603      	mov	r3, r0
}
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	3720      	adds	r7, #32
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bd80      	pop	{r7, pc}
 8019ecc:	0801ea10 	.word	0x0801ea10
 8019ed0:	0801ea44 	.word	0x0801ea44
 8019ed4:	0801ea50 	.word	0x0801ea50
 8019ed8:	0801ea78 	.word	0x0801ea78
 8019edc:	24014d06 	.word	0x24014d06
 8019ee0:	0801eef0 	.word	0x0801eef0

08019ee4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019ee4:	b480      	push	{r7}
 8019ee6:	b085      	sub	sp, #20
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
 8019eec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ef8:	d002      	beq.n	8019f00 <ip4_addr_isbroadcast_u32+0x1c>
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d101      	bne.n	8019f04 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019f00:	2301      	movs	r3, #1
 8019f02:	e02a      	b.n	8019f5a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019f04:	683b      	ldr	r3, [r7, #0]
 8019f06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019f0a:	f003 0302 	and.w	r3, r3, #2
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d101      	bne.n	8019f16 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019f12:	2300      	movs	r3, #0
 8019f14:	e021      	b.n	8019f5a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019f16:	683b      	ldr	r3, [r7, #0]
 8019f18:	3304      	adds	r3, #4
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	687a      	ldr	r2, [r7, #4]
 8019f1e:	429a      	cmp	r2, r3
 8019f20:	d101      	bne.n	8019f26 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019f22:	2300      	movs	r3, #0
 8019f24:	e019      	b.n	8019f5a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019f26:	68fa      	ldr	r2, [r7, #12]
 8019f28:	683b      	ldr	r3, [r7, #0]
 8019f2a:	3304      	adds	r3, #4
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	405a      	eors	r2, r3
 8019f30:	683b      	ldr	r3, [r7, #0]
 8019f32:	3308      	adds	r3, #8
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	4013      	ands	r3, r2
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d10d      	bne.n	8019f58 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	3308      	adds	r3, #8
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	43da      	mvns	r2, r3
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	3308      	adds	r3, #8
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019f50:	429a      	cmp	r2, r3
 8019f52:	d101      	bne.n	8019f58 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019f54:	2301      	movs	r3, #1
 8019f56:	e000      	b.n	8019f5a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019f58:	2300      	movs	r3, #0
  }
}
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	3714      	adds	r7, #20
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f64:	4770      	bx	lr
	...

08019f68 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b082      	sub	sp, #8
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8019f70:	2210      	movs	r2, #16
 8019f72:	4904      	ldr	r1, [pc, #16]	@ (8019f84 <ip4addr_ntoa+0x1c>)
 8019f74:	6878      	ldr	r0, [r7, #4]
 8019f76:	f000 f807 	bl	8019f88 <ip4addr_ntoa_r>
 8019f7a:	4603      	mov	r3, r0
}
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	3708      	adds	r7, #8
 8019f80:	46bd      	mov	sp, r7
 8019f82:	bd80      	pop	{r7, pc}
 8019f84:	24014d08 	.word	0x24014d08

08019f88 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019f88:	b480      	push	{r7}
 8019f8a:	b08d      	sub	sp, #52	@ 0x34
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	60f8      	str	r0, [r7, #12]
 8019f90:	60b9      	str	r1, [r7, #8]
 8019f92:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8019f94:	2300      	movs	r3, #0
 8019f96:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8019f9e:	68bb      	ldr	r3, [r7, #8]
 8019fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8019fa2:	f107 0318 	add.w	r3, r7, #24
 8019fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8019fa8:	2300      	movs	r3, #0
 8019faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019fae:	e058      	b.n	801a062 <ip4addr_ntoa_r+0xda>
    i = 0;
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8019fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fb8:	781a      	ldrb	r2, [r3, #0]
 8019fba:	4b32      	ldr	r3, [pc, #200]	@ (801a084 <ip4addr_ntoa_r+0xfc>)
 8019fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8019fc0:	08d9      	lsrs	r1, r3, #3
 8019fc2:	460b      	mov	r3, r1
 8019fc4:	009b      	lsls	r3, r3, #2
 8019fc6:	440b      	add	r3, r1
 8019fc8:	005b      	lsls	r3, r3, #1
 8019fca:	1ad3      	subs	r3, r2, r3
 8019fcc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8019fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fd0:	781b      	ldrb	r3, [r3, #0]
 8019fd2:	4a2c      	ldr	r2, [pc, #176]	@ (801a084 <ip4addr_ntoa_r+0xfc>)
 8019fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8019fd8:	08db      	lsrs	r3, r3, #3
 8019fda:	b2da      	uxtb	r2, r3
 8019fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fde:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8019fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019fe4:	1c5a      	adds	r2, r3, #1
 8019fe6:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8019fea:	4619      	mov	r1, r3
 8019fec:	7ffb      	ldrb	r3, [r7, #31]
 8019fee:	3330      	adds	r3, #48	@ 0x30
 8019ff0:	b2da      	uxtb	r2, r3
 8019ff2:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8019ff6:	443b      	add	r3, r7
 8019ff8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8019ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ffe:	781b      	ldrb	r3, [r3, #0]
 801a000:	2b00      	cmp	r3, #0
 801a002:	d1d8      	bne.n	8019fb6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801a004:	e011      	b.n	801a02a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801a006:	6a3b      	ldr	r3, [r7, #32]
 801a008:	1c5a      	adds	r2, r3, #1
 801a00a:	623a      	str	r2, [r7, #32]
 801a00c:	687a      	ldr	r2, [r7, #4]
 801a00e:	429a      	cmp	r2, r3
 801a010:	dc01      	bgt.n	801a016 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801a012:	2300      	movs	r3, #0
 801a014:	e030      	b.n	801a078 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801a016:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801a01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a01c:	1c59      	adds	r1, r3, #1
 801a01e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a020:	3230      	adds	r2, #48	@ 0x30
 801a022:	443a      	add	r2, r7
 801a024:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801a028:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801a02a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a02e:	1e5a      	subs	r2, r3, #1
 801a030:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801a034:	2b00      	cmp	r3, #0
 801a036:	d1e6      	bne.n	801a006 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801a038:	6a3b      	ldr	r3, [r7, #32]
 801a03a:	1c5a      	adds	r2, r3, #1
 801a03c:	623a      	str	r2, [r7, #32]
 801a03e:	687a      	ldr	r2, [r7, #4]
 801a040:	429a      	cmp	r2, r3
 801a042:	dc01      	bgt.n	801a048 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801a044:	2300      	movs	r3, #0
 801a046:	e017      	b.n	801a078 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801a048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a04a:	1c5a      	adds	r2, r3, #1
 801a04c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a04e:	222e      	movs	r2, #46	@ 0x2e
 801a050:	701a      	strb	r2, [r3, #0]
    ap++;
 801a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a054:	3301      	adds	r3, #1
 801a056:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801a058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a05c:	3301      	adds	r3, #1
 801a05e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a062:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a066:	2b03      	cmp	r3, #3
 801a068:	d9a2      	bls.n	8019fb0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801a06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a06c:	3b01      	subs	r3, #1
 801a06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a072:	2200      	movs	r2, #0
 801a074:	701a      	strb	r2, [r3, #0]
  return buf;
 801a076:	68bb      	ldr	r3, [r7, #8]
}
 801a078:	4618      	mov	r0, r3
 801a07a:	3734      	adds	r7, #52	@ 0x34
 801a07c:	46bd      	mov	sp, r7
 801a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a082:	4770      	bx	lr
 801a084:	cccccccd 	.word	0xcccccccd

0801a088 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b084      	sub	sp, #16
 801a08c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a08e:	2300      	movs	r3, #0
 801a090:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a092:	4b12      	ldr	r3, [pc, #72]	@ (801a0dc <ip_reass_tmr+0x54>)
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a098:	e018      	b.n	801a0cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	7fdb      	ldrb	r3, [r3, #31]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d00b      	beq.n	801a0ba <ip_reass_tmr+0x32>
      r->timer--;
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	7fdb      	ldrb	r3, [r3, #31]
 801a0a6:	3b01      	subs	r3, #1
 801a0a8:	b2da      	uxtb	r2, r3
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	60fb      	str	r3, [r7, #12]
 801a0b8:	e008      	b.n	801a0cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a0c4:	68b9      	ldr	r1, [r7, #8]
 801a0c6:	6878      	ldr	r0, [r7, #4]
 801a0c8:	f000 f80a 	bl	801a0e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d1e3      	bne.n	801a09a <ip_reass_tmr+0x12>
    }
  }
}
 801a0d2:	bf00      	nop
 801a0d4:	bf00      	nop
 801a0d6:	3710      	adds	r7, #16
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	bd80      	pop	{r7, pc}
 801a0dc:	24014d18 	.word	0x24014d18

0801a0e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b088      	sub	sp, #32
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
 801a0e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a0ee:	683a      	ldr	r2, [r7, #0]
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	429a      	cmp	r2, r3
 801a0f4:	d105      	bne.n	801a102 <ip_reass_free_complete_datagram+0x22>
 801a0f6:	4b45      	ldr	r3, [pc, #276]	@ (801a20c <ip_reass_free_complete_datagram+0x12c>)
 801a0f8:	22ab      	movs	r2, #171	@ 0xab
 801a0fa:	4945      	ldr	r1, [pc, #276]	@ (801a210 <ip_reass_free_complete_datagram+0x130>)
 801a0fc:	4845      	ldr	r0, [pc, #276]	@ (801a214 <ip_reass_free_complete_datagram+0x134>)
 801a0fe:	f001 f8c9 	bl	801b294 <iprintf>
  if (prev != NULL) {
 801a102:	683b      	ldr	r3, [r7, #0]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d00a      	beq.n	801a11e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	687a      	ldr	r2, [r7, #4]
 801a10e:	429a      	cmp	r2, r3
 801a110:	d005      	beq.n	801a11e <ip_reass_free_complete_datagram+0x3e>
 801a112:	4b3e      	ldr	r3, [pc, #248]	@ (801a20c <ip_reass_free_complete_datagram+0x12c>)
 801a114:	22ad      	movs	r2, #173	@ 0xad
 801a116:	4940      	ldr	r1, [pc, #256]	@ (801a218 <ip_reass_free_complete_datagram+0x138>)
 801a118:	483e      	ldr	r0, [pc, #248]	@ (801a214 <ip_reass_free_complete_datagram+0x134>)
 801a11a:	f001 f8bb 	bl	801b294 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	685b      	ldr	r3, [r3, #4]
 801a122:	685b      	ldr	r3, [r3, #4]
 801a124:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a126:	697b      	ldr	r3, [r7, #20]
 801a128:	889b      	ldrh	r3, [r3, #4]
 801a12a:	b29b      	uxth	r3, r3
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d12a      	bne.n	801a186 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	685b      	ldr	r3, [r3, #4]
 801a134:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a136:	697b      	ldr	r3, [r7, #20]
 801a138:	681a      	ldr	r2, [r3, #0]
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a13e:	69bb      	ldr	r3, [r7, #24]
 801a140:	6858      	ldr	r0, [r3, #4]
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	3308      	adds	r3, #8
 801a146:	2214      	movs	r2, #20
 801a148:	4619      	mov	r1, r3
 801a14a:	f001 f9dc 	bl	801b506 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a14e:	2101      	movs	r1, #1
 801a150:	69b8      	ldr	r0, [r7, #24]
 801a152:	f7ff fba1 	bl	8019898 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a156:	69b8      	ldr	r0, [r7, #24]
 801a158:	f7f8 f858 	bl	801220c <pbuf_clen>
 801a15c:	4603      	mov	r3, r0
 801a15e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a160:	8bfa      	ldrh	r2, [r7, #30]
 801a162:	8a7b      	ldrh	r3, [r7, #18]
 801a164:	4413      	add	r3, r2
 801a166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a16a:	db05      	blt.n	801a178 <ip_reass_free_complete_datagram+0x98>
 801a16c:	4b27      	ldr	r3, [pc, #156]	@ (801a20c <ip_reass_free_complete_datagram+0x12c>)
 801a16e:	22bc      	movs	r2, #188	@ 0xbc
 801a170:	492a      	ldr	r1, [pc, #168]	@ (801a21c <ip_reass_free_complete_datagram+0x13c>)
 801a172:	4828      	ldr	r0, [pc, #160]	@ (801a214 <ip_reass_free_complete_datagram+0x134>)
 801a174:	f001 f88e 	bl	801b294 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a178:	8bfa      	ldrh	r2, [r7, #30]
 801a17a:	8a7b      	ldrh	r3, [r7, #18]
 801a17c:	4413      	add	r3, r2
 801a17e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a180:	69b8      	ldr	r0, [r7, #24]
 801a182:	f7f7 ffb5 	bl	80120f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	685b      	ldr	r3, [r3, #4]
 801a18a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a18c:	e01f      	b.n	801a1ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a18e:	69bb      	ldr	r3, [r7, #24]
 801a190:	685b      	ldr	r3, [r3, #4]
 801a192:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a194:	69bb      	ldr	r3, [r7, #24]
 801a196:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a198:	697b      	ldr	r3, [r7, #20]
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a19e:	68f8      	ldr	r0, [r7, #12]
 801a1a0:	f7f8 f834 	bl	801220c <pbuf_clen>
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a1a8:	8bfa      	ldrh	r2, [r7, #30]
 801a1aa:	8a7b      	ldrh	r3, [r7, #18]
 801a1ac:	4413      	add	r3, r2
 801a1ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a1b2:	db05      	blt.n	801a1c0 <ip_reass_free_complete_datagram+0xe0>
 801a1b4:	4b15      	ldr	r3, [pc, #84]	@ (801a20c <ip_reass_free_complete_datagram+0x12c>)
 801a1b6:	22cc      	movs	r2, #204	@ 0xcc
 801a1b8:	4918      	ldr	r1, [pc, #96]	@ (801a21c <ip_reass_free_complete_datagram+0x13c>)
 801a1ba:	4816      	ldr	r0, [pc, #88]	@ (801a214 <ip_reass_free_complete_datagram+0x134>)
 801a1bc:	f001 f86a 	bl	801b294 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a1c0:	8bfa      	ldrh	r2, [r7, #30]
 801a1c2:	8a7b      	ldrh	r3, [r7, #18]
 801a1c4:	4413      	add	r3, r2
 801a1c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a1c8:	68f8      	ldr	r0, [r7, #12]
 801a1ca:	f7f7 ff91 	bl	80120f0 <pbuf_free>
  while (p != NULL) {
 801a1ce:	69bb      	ldr	r3, [r7, #24]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d1dc      	bne.n	801a18e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a1d4:	6839      	ldr	r1, [r7, #0]
 801a1d6:	6878      	ldr	r0, [r7, #4]
 801a1d8:	f000 f8c2 	bl	801a360 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a1dc:	4b10      	ldr	r3, [pc, #64]	@ (801a220 <ip_reass_free_complete_datagram+0x140>)
 801a1de:	881b      	ldrh	r3, [r3, #0]
 801a1e0:	8bfa      	ldrh	r2, [r7, #30]
 801a1e2:	429a      	cmp	r2, r3
 801a1e4:	d905      	bls.n	801a1f2 <ip_reass_free_complete_datagram+0x112>
 801a1e6:	4b09      	ldr	r3, [pc, #36]	@ (801a20c <ip_reass_free_complete_datagram+0x12c>)
 801a1e8:	22d2      	movs	r2, #210	@ 0xd2
 801a1ea:	490e      	ldr	r1, [pc, #56]	@ (801a224 <ip_reass_free_complete_datagram+0x144>)
 801a1ec:	4809      	ldr	r0, [pc, #36]	@ (801a214 <ip_reass_free_complete_datagram+0x134>)
 801a1ee:	f001 f851 	bl	801b294 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a1f2:	4b0b      	ldr	r3, [pc, #44]	@ (801a220 <ip_reass_free_complete_datagram+0x140>)
 801a1f4:	881a      	ldrh	r2, [r3, #0]
 801a1f6:	8bfb      	ldrh	r3, [r7, #30]
 801a1f8:	1ad3      	subs	r3, r2, r3
 801a1fa:	b29a      	uxth	r2, r3
 801a1fc:	4b08      	ldr	r3, [pc, #32]	@ (801a220 <ip_reass_free_complete_datagram+0x140>)
 801a1fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a200:	8bfb      	ldrh	r3, [r7, #30]
}
 801a202:	4618      	mov	r0, r3
 801a204:	3720      	adds	r7, #32
 801a206:	46bd      	mov	sp, r7
 801a208:	bd80      	pop	{r7, pc}
 801a20a:	bf00      	nop
 801a20c:	0801eaa8 	.word	0x0801eaa8
 801a210:	0801eae4 	.word	0x0801eae4
 801a214:	0801eaf0 	.word	0x0801eaf0
 801a218:	0801eb18 	.word	0x0801eb18
 801a21c:	0801eb2c 	.word	0x0801eb2c
 801a220:	24014d1c 	.word	0x24014d1c
 801a224:	0801eb4c 	.word	0x0801eb4c

0801a228 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a228:	b580      	push	{r7, lr}
 801a22a:	b08a      	sub	sp, #40	@ 0x28
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	6078      	str	r0, [r7, #4]
 801a230:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a232:	2300      	movs	r3, #0
 801a234:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a236:	2300      	movs	r3, #0
 801a238:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a23a:	2300      	movs	r3, #0
 801a23c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a23e:	2300      	movs	r3, #0
 801a240:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a242:	2300      	movs	r3, #0
 801a244:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a246:	4b28      	ldr	r3, [pc, #160]	@ (801a2e8 <ip_reass_remove_oldest_datagram+0xc0>)
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a24c:	e030      	b.n	801a2b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a250:	695a      	ldr	r2, [r3, #20]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	68db      	ldr	r3, [r3, #12]
 801a256:	429a      	cmp	r2, r3
 801a258:	d10c      	bne.n	801a274 <ip_reass_remove_oldest_datagram+0x4c>
 801a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a25c:	699a      	ldr	r2, [r3, #24]
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	691b      	ldr	r3, [r3, #16]
 801a262:	429a      	cmp	r2, r3
 801a264:	d106      	bne.n	801a274 <ip_reass_remove_oldest_datagram+0x4c>
 801a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a268:	899a      	ldrh	r2, [r3, #12]
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	889b      	ldrh	r3, [r3, #4]
 801a26e:	b29b      	uxth	r3, r3
 801a270:	429a      	cmp	r2, r3
 801a272:	d014      	beq.n	801a29e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a274:	693b      	ldr	r3, [r7, #16]
 801a276:	3301      	adds	r3, #1
 801a278:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a27a:	6a3b      	ldr	r3, [r7, #32]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d104      	bne.n	801a28a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a282:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a284:	69fb      	ldr	r3, [r7, #28]
 801a286:	61bb      	str	r3, [r7, #24]
 801a288:	e009      	b.n	801a29e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a28c:	7fda      	ldrb	r2, [r3, #31]
 801a28e:	6a3b      	ldr	r3, [r7, #32]
 801a290:	7fdb      	ldrb	r3, [r3, #31]
 801a292:	429a      	cmp	r2, r3
 801a294:	d803      	bhi.n	801a29e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a298:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a29a:	69fb      	ldr	r3, [r7, #28]
 801a29c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d001      	beq.n	801a2aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d1cb      	bne.n	801a24e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a2b6:	6a3b      	ldr	r3, [r7, #32]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d008      	beq.n	801a2ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a2bc:	69b9      	ldr	r1, [r7, #24]
 801a2be:	6a38      	ldr	r0, [r7, #32]
 801a2c0:	f7ff ff0e 	bl	801a0e0 <ip_reass_free_complete_datagram>
 801a2c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a2c6:	697a      	ldr	r2, [r7, #20]
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	4413      	add	r3, r2
 801a2cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a2ce:	697a      	ldr	r2, [r7, #20]
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	429a      	cmp	r2, r3
 801a2d4:	da02      	bge.n	801a2dc <ip_reass_remove_oldest_datagram+0xb4>
 801a2d6:	693b      	ldr	r3, [r7, #16]
 801a2d8:	2b01      	cmp	r3, #1
 801a2da:	dcac      	bgt.n	801a236 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a2dc:	697b      	ldr	r3, [r7, #20]
}
 801a2de:	4618      	mov	r0, r3
 801a2e0:	3728      	adds	r7, #40	@ 0x28
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	bd80      	pop	{r7, pc}
 801a2e6:	bf00      	nop
 801a2e8:	24014d18 	.word	0x24014d18

0801a2ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b084      	sub	sp, #16
 801a2f0:	af00      	add	r7, sp, #0
 801a2f2:	6078      	str	r0, [r7, #4]
 801a2f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a2f6:	2005      	movs	r0, #5
 801a2f8:	f7f6 ffd8 	bl	80112ac <memp_malloc>
 801a2fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	2b00      	cmp	r3, #0
 801a302:	d110      	bne.n	801a326 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a304:	6839      	ldr	r1, [r7, #0]
 801a306:	6878      	ldr	r0, [r7, #4]
 801a308:	f7ff ff8e 	bl	801a228 <ip_reass_remove_oldest_datagram>
 801a30c:	4602      	mov	r2, r0
 801a30e:	683b      	ldr	r3, [r7, #0]
 801a310:	4293      	cmp	r3, r2
 801a312:	dc03      	bgt.n	801a31c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a314:	2005      	movs	r0, #5
 801a316:	f7f6 ffc9 	bl	80112ac <memp_malloc>
 801a31a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d101      	bne.n	801a326 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a322:	2300      	movs	r3, #0
 801a324:	e016      	b.n	801a354 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a326:	2220      	movs	r2, #32
 801a328:	2100      	movs	r1, #0
 801a32a:	68f8      	ldr	r0, [r7, #12]
 801a32c:	f001 f817 	bl	801b35e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	220f      	movs	r2, #15
 801a334:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a336:	4b09      	ldr	r3, [pc, #36]	@ (801a35c <ip_reass_enqueue_new_datagram+0x70>)
 801a338:	681a      	ldr	r2, [r3, #0]
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a33e:	4a07      	ldr	r2, [pc, #28]	@ (801a35c <ip_reass_enqueue_new_datagram+0x70>)
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	3308      	adds	r3, #8
 801a348:	2214      	movs	r2, #20
 801a34a:	6879      	ldr	r1, [r7, #4]
 801a34c:	4618      	mov	r0, r3
 801a34e:	f001 f8da 	bl	801b506 <memcpy>
  return ipr;
 801a352:	68fb      	ldr	r3, [r7, #12]
}
 801a354:	4618      	mov	r0, r3
 801a356:	3710      	adds	r7, #16
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}
 801a35c:	24014d18 	.word	0x24014d18

0801a360 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b082      	sub	sp, #8
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
 801a368:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a36a:	4b10      	ldr	r3, [pc, #64]	@ (801a3ac <ip_reass_dequeue_datagram+0x4c>)
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	687a      	ldr	r2, [r7, #4]
 801a370:	429a      	cmp	r2, r3
 801a372:	d104      	bne.n	801a37e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	4a0c      	ldr	r2, [pc, #48]	@ (801a3ac <ip_reass_dequeue_datagram+0x4c>)
 801a37a:	6013      	str	r3, [r2, #0]
 801a37c:	e00d      	b.n	801a39a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a37e:	683b      	ldr	r3, [r7, #0]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d106      	bne.n	801a392 <ip_reass_dequeue_datagram+0x32>
 801a384:	4b0a      	ldr	r3, [pc, #40]	@ (801a3b0 <ip_reass_dequeue_datagram+0x50>)
 801a386:	f240 1245 	movw	r2, #325	@ 0x145
 801a38a:	490a      	ldr	r1, [pc, #40]	@ (801a3b4 <ip_reass_dequeue_datagram+0x54>)
 801a38c:	480a      	ldr	r0, [pc, #40]	@ (801a3b8 <ip_reass_dequeue_datagram+0x58>)
 801a38e:	f000 ff81 	bl	801b294 <iprintf>
    prev->next = ipr->next;
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681a      	ldr	r2, [r3, #0]
 801a396:	683b      	ldr	r3, [r7, #0]
 801a398:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a39a:	6879      	ldr	r1, [r7, #4]
 801a39c:	2005      	movs	r0, #5
 801a39e:	f7f6 fffb 	bl	8011398 <memp_free>
}
 801a3a2:	bf00      	nop
 801a3a4:	3708      	adds	r7, #8
 801a3a6:	46bd      	mov	sp, r7
 801a3a8:	bd80      	pop	{r7, pc}
 801a3aa:	bf00      	nop
 801a3ac:	24014d18 	.word	0x24014d18
 801a3b0:	0801eaa8 	.word	0x0801eaa8
 801a3b4:	0801eb70 	.word	0x0801eb70
 801a3b8:	0801eaf0 	.word	0x0801eaf0

0801a3bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a3bc:	b580      	push	{r7, lr}
 801a3be:	b08c      	sub	sp, #48	@ 0x30
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	60f8      	str	r0, [r7, #12]
 801a3c4:	60b9      	str	r1, [r7, #8]
 801a3c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a3cc:	2301      	movs	r3, #1
 801a3ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a3d0:	68bb      	ldr	r3, [r7, #8]
 801a3d2:	685b      	ldr	r3, [r3, #4]
 801a3d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a3d6:	69fb      	ldr	r3, [r7, #28]
 801a3d8:	885b      	ldrh	r3, [r3, #2]
 801a3da:	b29b      	uxth	r3, r3
 801a3dc:	4618      	mov	r0, r3
 801a3de:	f7f6 f9d5 	bl	801078c <lwip_htons>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a3e6:	69fb      	ldr	r3, [r7, #28]
 801a3e8:	781b      	ldrb	r3, [r3, #0]
 801a3ea:	f003 030f 	and.w	r3, r3, #15
 801a3ee:	b2db      	uxtb	r3, r3
 801a3f0:	009b      	lsls	r3, r3, #2
 801a3f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a3f4:	7e7b      	ldrb	r3, [r7, #25]
 801a3f6:	b29b      	uxth	r3, r3
 801a3f8:	8b7a      	ldrh	r2, [r7, #26]
 801a3fa:	429a      	cmp	r2, r3
 801a3fc:	d202      	bcs.n	801a404 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a402:	e135      	b.n	801a670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a404:	7e7b      	ldrb	r3, [r7, #25]
 801a406:	b29b      	uxth	r3, r3
 801a408:	8b7a      	ldrh	r2, [r7, #26]
 801a40a:	1ad3      	subs	r3, r2, r3
 801a40c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a40e:	69fb      	ldr	r3, [r7, #28]
 801a410:	88db      	ldrh	r3, [r3, #6]
 801a412:	b29b      	uxth	r3, r3
 801a414:	4618      	mov	r0, r3
 801a416:	f7f6 f9b9 	bl	801078c <lwip_htons>
 801a41a:	4603      	mov	r3, r0
 801a41c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a420:	b29b      	uxth	r3, r3
 801a422:	00db      	lsls	r3, r3, #3
 801a424:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a426:	68bb      	ldr	r3, [r7, #8]
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801a42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a42e:	2200      	movs	r2, #0
 801a430:	701a      	strb	r2, [r3, #0]
 801a432:	2200      	movs	r2, #0
 801a434:	705a      	strb	r2, [r3, #1]
 801a436:	2200      	movs	r2, #0
 801a438:	709a      	strb	r2, [r3, #2]
 801a43a:	2200      	movs	r2, #0
 801a43c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a440:	8afa      	ldrh	r2, [r7, #22]
 801a442:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a444:	8afa      	ldrh	r2, [r7, #22]
 801a446:	8b7b      	ldrh	r3, [r7, #26]
 801a448:	4413      	add	r3, r2
 801a44a:	b29a      	uxth	r2, r3
 801a44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a44e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a452:	88db      	ldrh	r3, [r3, #6]
 801a454:	b29b      	uxth	r3, r3
 801a456:	8afa      	ldrh	r2, [r7, #22]
 801a458:	429a      	cmp	r2, r3
 801a45a:	d902      	bls.n	801a462 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a45c:	f04f 33ff 	mov.w	r3, #4294967295
 801a460:	e106      	b.n	801a670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	685b      	ldr	r3, [r3, #4]
 801a466:	627b      	str	r3, [r7, #36]	@ 0x24
 801a468:	e068      	b.n	801a53c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a46c:	685b      	ldr	r3, [r3, #4]
 801a46e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a472:	889b      	ldrh	r3, [r3, #4]
 801a474:	b29a      	uxth	r2, r3
 801a476:	693b      	ldr	r3, [r7, #16]
 801a478:	889b      	ldrh	r3, [r3, #4]
 801a47a:	b29b      	uxth	r3, r3
 801a47c:	429a      	cmp	r2, r3
 801a47e:	d235      	bcs.n	801a4ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a484:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d020      	beq.n	801a4ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a48e:	889b      	ldrh	r3, [r3, #4]
 801a490:	b29a      	uxth	r2, r3
 801a492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a494:	88db      	ldrh	r3, [r3, #6]
 801a496:	b29b      	uxth	r3, r3
 801a498:	429a      	cmp	r2, r3
 801a49a:	d307      	bcc.n	801a4ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a49e:	88db      	ldrh	r3, [r3, #6]
 801a4a0:	b29a      	uxth	r2, r3
 801a4a2:	693b      	ldr	r3, [r7, #16]
 801a4a4:	889b      	ldrh	r3, [r3, #4]
 801a4a6:	b29b      	uxth	r3, r3
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	d902      	bls.n	801a4b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a4b0:	e0de      	b.n	801a670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4b4:	68ba      	ldr	r2, [r7, #8]
 801a4b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4ba:	88db      	ldrh	r3, [r3, #6]
 801a4bc:	b29a      	uxth	r2, r3
 801a4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4c0:	889b      	ldrh	r3, [r3, #4]
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	429a      	cmp	r2, r3
 801a4c6:	d03d      	beq.n	801a544 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a4cc:	e03a      	b.n	801a544 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4d0:	88db      	ldrh	r3, [r3, #6]
 801a4d2:	b29a      	uxth	r2, r3
 801a4d4:	693b      	ldr	r3, [r7, #16]
 801a4d6:	889b      	ldrh	r3, [r3, #4]
 801a4d8:	b29b      	uxth	r3, r3
 801a4da:	429a      	cmp	r2, r3
 801a4dc:	d902      	bls.n	801a4e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4de:	f04f 33ff 	mov.w	r3, #4294967295
 801a4e2:	e0c5      	b.n	801a670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	68ba      	ldr	r2, [r7, #8]
 801a4e8:	605a      	str	r2, [r3, #4]
      break;
 801a4ea:	e02b      	b.n	801a544 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ee:	889b      	ldrh	r3, [r3, #4]
 801a4f0:	b29a      	uxth	r2, r3
 801a4f2:	693b      	ldr	r3, [r7, #16]
 801a4f4:	889b      	ldrh	r3, [r3, #4]
 801a4f6:	b29b      	uxth	r3, r3
 801a4f8:	429a      	cmp	r2, r3
 801a4fa:	d102      	bne.n	801a502 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a500:	e0b6      	b.n	801a670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a504:	889b      	ldrh	r3, [r3, #4]
 801a506:	b29a      	uxth	r2, r3
 801a508:	693b      	ldr	r3, [r7, #16]
 801a50a:	88db      	ldrh	r3, [r3, #6]
 801a50c:	b29b      	uxth	r3, r3
 801a50e:	429a      	cmp	r2, r3
 801a510:	d202      	bcs.n	801a518 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a512:	f04f 33ff 	mov.w	r3, #4294967295
 801a516:	e0ab      	b.n	801a670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d009      	beq.n	801a532 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a520:	88db      	ldrh	r3, [r3, #6]
 801a522:	b29a      	uxth	r2, r3
 801a524:	693b      	ldr	r3, [r7, #16]
 801a526:	889b      	ldrh	r3, [r3, #4]
 801a528:	b29b      	uxth	r3, r3
 801a52a:	429a      	cmp	r2, r3
 801a52c:	d001      	beq.n	801a532 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a52e:	2300      	movs	r3, #0
 801a530:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a532:	693b      	ldr	r3, [r7, #16]
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801a538:	693b      	ldr	r3, [r7, #16]
 801a53a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801a53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d193      	bne.n	801a46a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a542:	e000      	b.n	801a546 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a544:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d12d      	bne.n	801a5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d01c      	beq.n	801a58c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a554:	88db      	ldrh	r3, [r3, #6]
 801a556:	b29a      	uxth	r2, r3
 801a558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a55a:	889b      	ldrh	r3, [r3, #4]
 801a55c:	b29b      	uxth	r3, r3
 801a55e:	429a      	cmp	r2, r3
 801a560:	d906      	bls.n	801a570 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a562:	4b45      	ldr	r3, [pc, #276]	@ (801a678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a564:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801a568:	4944      	ldr	r1, [pc, #272]	@ (801a67c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a56a:	4845      	ldr	r0, [pc, #276]	@ (801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a56c:	f000 fe92 	bl	801b294 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a572:	68ba      	ldr	r2, [r7, #8]
 801a574:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a578:	88db      	ldrh	r3, [r3, #6]
 801a57a:	b29a      	uxth	r2, r3
 801a57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a57e:	889b      	ldrh	r3, [r3, #4]
 801a580:	b29b      	uxth	r3, r3
 801a582:	429a      	cmp	r2, r3
 801a584:	d010      	beq.n	801a5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a586:	2300      	movs	r3, #0
 801a588:	623b      	str	r3, [r7, #32]
 801a58a:	e00d      	b.n	801a5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	685b      	ldr	r3, [r3, #4]
 801a590:	2b00      	cmp	r3, #0
 801a592:	d006      	beq.n	801a5a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a594:	4b38      	ldr	r3, [pc, #224]	@ (801a678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a596:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801a59a:	493a      	ldr	r1, [pc, #232]	@ (801a684 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a59c:	4838      	ldr	r0, [pc, #224]	@ (801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a59e:	f000 fe79 	bl	801b294 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	68ba      	ldr	r2, [r7, #8]
 801a5a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d105      	bne.n	801a5ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	7f9b      	ldrb	r3, [r3, #30]
 801a5b2:	f003 0301 	and.w	r3, r3, #1
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d059      	beq.n	801a66e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a5ba:	6a3b      	ldr	r3, [r7, #32]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d04f      	beq.n	801a660 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	685b      	ldr	r3, [r3, #4]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d006      	beq.n	801a5d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	685b      	ldr	r3, [r3, #4]
 801a5cc:	685b      	ldr	r3, [r3, #4]
 801a5ce:	889b      	ldrh	r3, [r3, #4]
 801a5d0:	b29b      	uxth	r3, r3
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d002      	beq.n	801a5dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	623b      	str	r3, [r7, #32]
 801a5da:	e041      	b.n	801a660 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5de:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801a5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a5e6:	e012      	b.n	801a60e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ea:	685b      	ldr	r3, [r3, #4]
 801a5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801a5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5f0:	88db      	ldrh	r3, [r3, #6]
 801a5f2:	b29a      	uxth	r2, r3
 801a5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5f6:	889b      	ldrh	r3, [r3, #4]
 801a5f8:	b29b      	uxth	r3, r3
 801a5fa:	429a      	cmp	r2, r3
 801a5fc:	d002      	beq.n	801a604 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a5fe:	2300      	movs	r3, #0
 801a600:	623b      	str	r3, [r7, #32]
            break;
 801a602:	e007      	b.n	801a614 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a606:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801a608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a610:	2b00      	cmp	r3, #0
 801a612:	d1e9      	bne.n	801a5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a614:	6a3b      	ldr	r3, [r7, #32]
 801a616:	2b00      	cmp	r3, #0
 801a618:	d022      	beq.n	801a660 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	685b      	ldr	r3, [r3, #4]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d106      	bne.n	801a630 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a622:	4b15      	ldr	r3, [pc, #84]	@ (801a678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a624:	f240 12df 	movw	r2, #479	@ 0x1df
 801a628:	4917      	ldr	r1, [pc, #92]	@ (801a688 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a62a:	4815      	ldr	r0, [pc, #84]	@ (801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a62c:	f000 fe32 	bl	801b294 <iprintf>
          LWIP_ASSERT("sanity check",
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	685b      	ldr	r3, [r3, #4]
 801a634:	685b      	ldr	r3, [r3, #4]
 801a636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a638:	429a      	cmp	r2, r3
 801a63a:	d106      	bne.n	801a64a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a63c:	4b0e      	ldr	r3, [pc, #56]	@ (801a678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a63e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801a642:	4911      	ldr	r1, [pc, #68]	@ (801a688 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a644:	480e      	ldr	r0, [pc, #56]	@ (801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a646:	f000 fe25 	bl	801b294 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d006      	beq.n	801a660 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a652:	4b09      	ldr	r3, [pc, #36]	@ (801a678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a654:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801a658:	490c      	ldr	r1, [pc, #48]	@ (801a68c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a65a:	4809      	ldr	r0, [pc, #36]	@ (801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a65c:	f000 fe1a 	bl	801b294 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a660:	6a3b      	ldr	r3, [r7, #32]
 801a662:	2b00      	cmp	r3, #0
 801a664:	bf14      	ite	ne
 801a666:	2301      	movne	r3, #1
 801a668:	2300      	moveq	r3, #0
 801a66a:	b2db      	uxtb	r3, r3
 801a66c:	e000      	b.n	801a670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a66e:	2300      	movs	r3, #0
}
 801a670:	4618      	mov	r0, r3
 801a672:	3730      	adds	r7, #48	@ 0x30
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}
 801a678:	0801eaa8 	.word	0x0801eaa8
 801a67c:	0801eb8c 	.word	0x0801eb8c
 801a680:	0801eaf0 	.word	0x0801eaf0
 801a684:	0801ebac 	.word	0x0801ebac
 801a688:	0801ebe4 	.word	0x0801ebe4
 801a68c:	0801ebf4 	.word	0x0801ebf4

0801a690 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b08e      	sub	sp, #56	@ 0x38
 801a694:	af00      	add	r7, sp, #0
 801a696:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	685b      	ldr	r3, [r3, #4]
 801a69c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6a0:	781b      	ldrb	r3, [r3, #0]
 801a6a2:	f003 030f 	and.w	r3, r3, #15
 801a6a6:	b2db      	uxtb	r3, r3
 801a6a8:	009b      	lsls	r3, r3, #2
 801a6aa:	b2db      	uxtb	r3, r3
 801a6ac:	2b14      	cmp	r3, #20
 801a6ae:	f040 8171 	bne.w	801a994 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6b4:	88db      	ldrh	r3, [r3, #6]
 801a6b6:	b29b      	uxth	r3, r3
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	f7f6 f867 	bl	801078c <lwip_htons>
 801a6be:	4603      	mov	r3, r0
 801a6c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a6c4:	b29b      	uxth	r3, r3
 801a6c6:	00db      	lsls	r3, r3, #3
 801a6c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6cc:	885b      	ldrh	r3, [r3, #2]
 801a6ce:	b29b      	uxth	r3, r3
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	f7f6 f85b 	bl	801078c <lwip_htons>
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6dc:	781b      	ldrb	r3, [r3, #0]
 801a6de:	f003 030f 	and.w	r3, r3, #15
 801a6e2:	b2db      	uxtb	r3, r3
 801a6e4:	009b      	lsls	r3, r3, #2
 801a6e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801a6ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a6ee:	b29b      	uxth	r3, r3
 801a6f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a6f2:	429a      	cmp	r2, r3
 801a6f4:	f0c0 8150 	bcc.w	801a998 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a6f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a6fc:	b29b      	uxth	r3, r3
 801a6fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a700:	1ad3      	subs	r3, r2, r3
 801a702:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a704:	6878      	ldr	r0, [r7, #4]
 801a706:	f7f7 fd81 	bl	801220c <pbuf_clen>
 801a70a:	4603      	mov	r3, r0
 801a70c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a70e:	4b8c      	ldr	r3, [pc, #560]	@ (801a940 <ip4_reass+0x2b0>)
 801a710:	881b      	ldrh	r3, [r3, #0]
 801a712:	461a      	mov	r2, r3
 801a714:	8c3b      	ldrh	r3, [r7, #32]
 801a716:	4413      	add	r3, r2
 801a718:	2b0a      	cmp	r3, #10
 801a71a:	dd10      	ble.n	801a73e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a71c:	8c3b      	ldrh	r3, [r7, #32]
 801a71e:	4619      	mov	r1, r3
 801a720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a722:	f7ff fd81 	bl	801a228 <ip_reass_remove_oldest_datagram>
 801a726:	4603      	mov	r3, r0
 801a728:	2b00      	cmp	r3, #0
 801a72a:	f000 8137 	beq.w	801a99c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a72e:	4b84      	ldr	r3, [pc, #528]	@ (801a940 <ip4_reass+0x2b0>)
 801a730:	881b      	ldrh	r3, [r3, #0]
 801a732:	461a      	mov	r2, r3
 801a734:	8c3b      	ldrh	r3, [r7, #32]
 801a736:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a738:	2b0a      	cmp	r3, #10
 801a73a:	f300 812f 	bgt.w	801a99c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a73e:	4b81      	ldr	r3, [pc, #516]	@ (801a944 <ip4_reass+0x2b4>)
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	633b      	str	r3, [r7, #48]	@ 0x30
 801a744:	e015      	b.n	801a772 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a748:	695a      	ldr	r2, [r3, #20]
 801a74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a74c:	68db      	ldr	r3, [r3, #12]
 801a74e:	429a      	cmp	r2, r3
 801a750:	d10c      	bne.n	801a76c <ip4_reass+0xdc>
 801a752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a754:	699a      	ldr	r2, [r3, #24]
 801a756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a758:	691b      	ldr	r3, [r3, #16]
 801a75a:	429a      	cmp	r2, r3
 801a75c:	d106      	bne.n	801a76c <ip4_reass+0xdc>
 801a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a760:	899a      	ldrh	r2, [r3, #12]
 801a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a764:	889b      	ldrh	r3, [r3, #4]
 801a766:	b29b      	uxth	r3, r3
 801a768:	429a      	cmp	r2, r3
 801a76a:	d006      	beq.n	801a77a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	633b      	str	r3, [r7, #48]	@ 0x30
 801a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a774:	2b00      	cmp	r3, #0
 801a776:	d1e6      	bne.n	801a746 <ip4_reass+0xb6>
 801a778:	e000      	b.n	801a77c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a77a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d109      	bne.n	801a796 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a782:	8c3b      	ldrh	r3, [r7, #32]
 801a784:	4619      	mov	r1, r3
 801a786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a788:	f7ff fdb0 	bl	801a2ec <ip_reass_enqueue_new_datagram>
 801a78c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a790:	2b00      	cmp	r3, #0
 801a792:	d11c      	bne.n	801a7ce <ip4_reass+0x13e>
      goto nullreturn;
 801a794:	e105      	b.n	801a9a2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a798:	88db      	ldrh	r3, [r3, #6]
 801a79a:	b29b      	uxth	r3, r3
 801a79c:	4618      	mov	r0, r3
 801a79e:	f7f5 fff5 	bl	801078c <lwip_htons>
 801a7a2:	4603      	mov	r3, r0
 801a7a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d110      	bne.n	801a7ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7ae:	89db      	ldrh	r3, [r3, #14]
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	f7f5 ffeb 	bl	801078c <lwip_htons>
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d006      	beq.n	801a7ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7c2:	3308      	adds	r3, #8
 801a7c4:	2214      	movs	r2, #20
 801a7c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	f000 fe9c 	bl	801b506 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7d0:	88db      	ldrh	r3, [r3, #6]
 801a7d2:	b29b      	uxth	r3, r3
 801a7d4:	f003 0320 	and.w	r3, r3, #32
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	bf0c      	ite	eq
 801a7dc:	2301      	moveq	r3, #1
 801a7de:	2300      	movne	r3, #0
 801a7e0:	b2db      	uxtb	r3, r3
 801a7e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a7e4:	69fb      	ldr	r3, [r7, #28]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d00e      	beq.n	801a808 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a7ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a7ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a7ee:	4413      	add	r3, r2
 801a7f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a7f2:	8b7a      	ldrh	r2, [r7, #26]
 801a7f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a7f6:	429a      	cmp	r2, r3
 801a7f8:	f0c0 80a0 	bcc.w	801a93c <ip4_reass+0x2ac>
 801a7fc:	8b7b      	ldrh	r3, [r7, #26]
 801a7fe:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801a802:	4293      	cmp	r3, r2
 801a804:	f200 809a 	bhi.w	801a93c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a808:	69fa      	ldr	r2, [r7, #28]
 801a80a:	6879      	ldr	r1, [r7, #4]
 801a80c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a80e:	f7ff fdd5 	bl	801a3bc <ip_reass_chain_frag_into_datagram_and_validate>
 801a812:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a814:	697b      	ldr	r3, [r7, #20]
 801a816:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a81a:	f000 809b 	beq.w	801a954 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a81e:	4b48      	ldr	r3, [pc, #288]	@ (801a940 <ip4_reass+0x2b0>)
 801a820:	881a      	ldrh	r2, [r3, #0]
 801a822:	8c3b      	ldrh	r3, [r7, #32]
 801a824:	4413      	add	r3, r2
 801a826:	b29a      	uxth	r2, r3
 801a828:	4b45      	ldr	r3, [pc, #276]	@ (801a940 <ip4_reass+0x2b0>)
 801a82a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a82c:	69fb      	ldr	r3, [r7, #28]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d00d      	beq.n	801a84e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a832:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a836:	4413      	add	r3, r2
 801a838:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a83c:	8a7a      	ldrh	r2, [r7, #18]
 801a83e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a842:	7f9b      	ldrb	r3, [r3, #30]
 801a844:	f043 0301 	orr.w	r3, r3, #1
 801a848:	b2da      	uxtb	r2, r3
 801a84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a84c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a84e:	697b      	ldr	r3, [r7, #20]
 801a850:	2b01      	cmp	r3, #1
 801a852:	d171      	bne.n	801a938 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a856:	8b9b      	ldrh	r3, [r3, #28]
 801a858:	3314      	adds	r3, #20
 801a85a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a85e:	685b      	ldr	r3, [r3, #4]
 801a860:	685b      	ldr	r3, [r3, #4]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	685b      	ldr	r3, [r3, #4]
 801a86c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a870:	3308      	adds	r3, #8
 801a872:	2214      	movs	r2, #20
 801a874:	4619      	mov	r1, r3
 801a876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a878:	f000 fe45 	bl	801b506 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a87c:	8a3b      	ldrh	r3, [r7, #16]
 801a87e:	4618      	mov	r0, r3
 801a880:	f7f5 ff84 	bl	801078c <lwip_htons>
 801a884:	4603      	mov	r3, r0
 801a886:	461a      	mov	r2, r3
 801a888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a88a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a88e:	2200      	movs	r2, #0
 801a890:	719a      	strb	r2, [r3, #6]
 801a892:	2200      	movs	r2, #0
 801a894:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a898:	2200      	movs	r2, #0
 801a89a:	729a      	strb	r2, [r3, #10]
 801a89c:	2200      	movs	r2, #0
 801a89e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8a2:	685b      	ldr	r3, [r3, #4]
 801a8a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a8a6:	e00d      	b.n	801a8c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8aa:	685b      	ldr	r3, [r3, #4]
 801a8ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a8ae:	2114      	movs	r1, #20
 801a8b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a8b2:	f7f7 fb97 	bl	8011fe4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a8b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a8b8:	6878      	ldr	r0, [r7, #4]
 801a8ba:	f7f7 fce7 	bl	801228c <pbuf_cat>
      r = iprh->next_pbuf;
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801a8c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d1ee      	bne.n	801a8a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a8ca:	4b1e      	ldr	r3, [pc, #120]	@ (801a944 <ip4_reass+0x2b4>)
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a8d0:	429a      	cmp	r2, r3
 801a8d2:	d102      	bne.n	801a8da <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a8d8:	e010      	b.n	801a8fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a8da:	4b1a      	ldr	r3, [pc, #104]	@ (801a944 <ip4_reass+0x2b4>)
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a8e0:	e007      	b.n	801a8f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	d006      	beq.n	801a8fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d1f4      	bne.n	801a8e2 <ip4_reass+0x252>
 801a8f8:	e000      	b.n	801a8fc <ip4_reass+0x26c>
          break;
 801a8fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a8fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a8fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a900:	f7ff fd2e 	bl	801a360 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a904:	6878      	ldr	r0, [r7, #4]
 801a906:	f7f7 fc81 	bl	801220c <pbuf_clen>
 801a90a:	4603      	mov	r3, r0
 801a90c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a90e:	4b0c      	ldr	r3, [pc, #48]	@ (801a940 <ip4_reass+0x2b0>)
 801a910:	881b      	ldrh	r3, [r3, #0]
 801a912:	8c3a      	ldrh	r2, [r7, #32]
 801a914:	429a      	cmp	r2, r3
 801a916:	d906      	bls.n	801a926 <ip4_reass+0x296>
 801a918:	4b0b      	ldr	r3, [pc, #44]	@ (801a948 <ip4_reass+0x2b8>)
 801a91a:	f240 229b 	movw	r2, #667	@ 0x29b
 801a91e:	490b      	ldr	r1, [pc, #44]	@ (801a94c <ip4_reass+0x2bc>)
 801a920:	480b      	ldr	r0, [pc, #44]	@ (801a950 <ip4_reass+0x2c0>)
 801a922:	f000 fcb7 	bl	801b294 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a926:	4b06      	ldr	r3, [pc, #24]	@ (801a940 <ip4_reass+0x2b0>)
 801a928:	881a      	ldrh	r2, [r3, #0]
 801a92a:	8c3b      	ldrh	r3, [r7, #32]
 801a92c:	1ad3      	subs	r3, r2, r3
 801a92e:	b29a      	uxth	r2, r3
 801a930:	4b03      	ldr	r3, [pc, #12]	@ (801a940 <ip4_reass+0x2b0>)
 801a932:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	e038      	b.n	801a9aa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a938:	2300      	movs	r3, #0
 801a93a:	e036      	b.n	801a9aa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a93c:	bf00      	nop
 801a93e:	e00a      	b.n	801a956 <ip4_reass+0x2c6>
 801a940:	24014d1c 	.word	0x24014d1c
 801a944:	24014d18 	.word	0x24014d18
 801a948:	0801eaa8 	.word	0x0801eaa8
 801a94c:	0801ec18 	.word	0x0801ec18
 801a950:	0801eaf0 	.word	0x0801eaf0
    goto nullreturn_ipr;
 801a954:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d106      	bne.n	801a96a <ip4_reass+0x2da>
 801a95c:	4b15      	ldr	r3, [pc, #84]	@ (801a9b4 <ip4_reass+0x324>)
 801a95e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801a962:	4915      	ldr	r1, [pc, #84]	@ (801a9b8 <ip4_reass+0x328>)
 801a964:	4815      	ldr	r0, [pc, #84]	@ (801a9bc <ip4_reass+0x32c>)
 801a966:	f000 fc95 	bl	801b294 <iprintf>
  if (ipr->p == NULL) {
 801a96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a96c:	685b      	ldr	r3, [r3, #4]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d116      	bne.n	801a9a0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a972:	4b13      	ldr	r3, [pc, #76]	@ (801a9c0 <ip4_reass+0x330>)
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a978:	429a      	cmp	r2, r3
 801a97a:	d006      	beq.n	801a98a <ip4_reass+0x2fa>
 801a97c:	4b0d      	ldr	r3, [pc, #52]	@ (801a9b4 <ip4_reass+0x324>)
 801a97e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a982:	4910      	ldr	r1, [pc, #64]	@ (801a9c4 <ip4_reass+0x334>)
 801a984:	480d      	ldr	r0, [pc, #52]	@ (801a9bc <ip4_reass+0x32c>)
 801a986:	f000 fc85 	bl	801b294 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a98a:	2100      	movs	r1, #0
 801a98c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a98e:	f7ff fce7 	bl	801a360 <ip_reass_dequeue_datagram>
 801a992:	e006      	b.n	801a9a2 <ip4_reass+0x312>
    goto nullreturn;
 801a994:	bf00      	nop
 801a996:	e004      	b.n	801a9a2 <ip4_reass+0x312>
    goto nullreturn;
 801a998:	bf00      	nop
 801a99a:	e002      	b.n	801a9a2 <ip4_reass+0x312>
      goto nullreturn;
 801a99c:	bf00      	nop
 801a99e:	e000      	b.n	801a9a2 <ip4_reass+0x312>
  }

nullreturn:
 801a9a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a9a2:	6878      	ldr	r0, [r7, #4]
 801a9a4:	f7f7 fba4 	bl	80120f0 <pbuf_free>
  return NULL;
 801a9a8:	2300      	movs	r3, #0
}
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	3738      	adds	r7, #56	@ 0x38
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	bd80      	pop	{r7, pc}
 801a9b2:	bf00      	nop
 801a9b4:	0801eaa8 	.word	0x0801eaa8
 801a9b8:	0801ec34 	.word	0x0801ec34
 801a9bc:	0801eaf0 	.word	0x0801eaf0
 801a9c0:	24014d18 	.word	0x24014d18
 801a9c4:	0801ec40 	.word	0x0801ec40

0801a9c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a9cc:	2006      	movs	r0, #6
 801a9ce:	f7f6 fc6d 	bl	80112ac <memp_malloc>
 801a9d2:	4603      	mov	r3, r0
}
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	bd80      	pop	{r7, pc}

0801a9d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b082      	sub	sp, #8
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d106      	bne.n	801a9f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a9e6:	4b07      	ldr	r3, [pc, #28]	@ (801aa04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a9e8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801a9ec:	4906      	ldr	r1, [pc, #24]	@ (801aa08 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a9ee:	4807      	ldr	r0, [pc, #28]	@ (801aa0c <ip_frag_free_pbuf_custom_ref+0x34>)
 801a9f0:	f000 fc50 	bl	801b294 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a9f4:	6879      	ldr	r1, [r7, #4]
 801a9f6:	2006      	movs	r0, #6
 801a9f8:	f7f6 fcce 	bl	8011398 <memp_free>
}
 801a9fc:	bf00      	nop
 801a9fe:	3708      	adds	r7, #8
 801aa00:	46bd      	mov	sp, r7
 801aa02:	bd80      	pop	{r7, pc}
 801aa04:	0801eaa8 	.word	0x0801eaa8
 801aa08:	0801ec60 	.word	0x0801ec60
 801aa0c:	0801eaf0 	.word	0x0801eaf0

0801aa10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b084      	sub	sp, #16
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d106      	bne.n	801aa30 <ipfrag_free_pbuf_custom+0x20>
 801aa22:	4b11      	ldr	r3, [pc, #68]	@ (801aa68 <ipfrag_free_pbuf_custom+0x58>)
 801aa24:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801aa28:	4910      	ldr	r1, [pc, #64]	@ (801aa6c <ipfrag_free_pbuf_custom+0x5c>)
 801aa2a:	4811      	ldr	r0, [pc, #68]	@ (801aa70 <ipfrag_free_pbuf_custom+0x60>)
 801aa2c:	f000 fc32 	bl	801b294 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801aa30:	68fa      	ldr	r2, [r7, #12]
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	429a      	cmp	r2, r3
 801aa36:	d006      	beq.n	801aa46 <ipfrag_free_pbuf_custom+0x36>
 801aa38:	4b0b      	ldr	r3, [pc, #44]	@ (801aa68 <ipfrag_free_pbuf_custom+0x58>)
 801aa3a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801aa3e:	490d      	ldr	r1, [pc, #52]	@ (801aa74 <ipfrag_free_pbuf_custom+0x64>)
 801aa40:	480b      	ldr	r0, [pc, #44]	@ (801aa70 <ipfrag_free_pbuf_custom+0x60>)
 801aa42:	f000 fc27 	bl	801b294 <iprintf>
  if (pcr->original != NULL) {
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	695b      	ldr	r3, [r3, #20]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d004      	beq.n	801aa58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	695b      	ldr	r3, [r3, #20]
 801aa52:	4618      	mov	r0, r3
 801aa54:	f7f7 fb4c 	bl	80120f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801aa58:	68f8      	ldr	r0, [r7, #12]
 801aa5a:	f7ff ffbd 	bl	801a9d8 <ip_frag_free_pbuf_custom_ref>
}
 801aa5e:	bf00      	nop
 801aa60:	3710      	adds	r7, #16
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd80      	pop	{r7, pc}
 801aa66:	bf00      	nop
 801aa68:	0801eaa8 	.word	0x0801eaa8
 801aa6c:	0801ec6c 	.word	0x0801ec6c
 801aa70:	0801eaf0 	.word	0x0801eaf0
 801aa74:	0801ec78 	.word	0x0801ec78

0801aa78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b094      	sub	sp, #80	@ 0x50
 801aa7c:	af02      	add	r7, sp, #8
 801aa7e:	60f8      	str	r0, [r7, #12]
 801aa80:	60b9      	str	r1, [r7, #8]
 801aa82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801aa84:	2300      	movs	r3, #0
 801aa86:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801aa8a:	68bb      	ldr	r3, [r7, #8]
 801aa8c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801aa8e:	3b14      	subs	r3, #20
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	da00      	bge.n	801aa96 <ip4_frag+0x1e>
 801aa94:	3307      	adds	r3, #7
 801aa96:	10db      	asrs	r3, r3, #3
 801aa98:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801aa9a:	2314      	movs	r3, #20
 801aa9c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	685b      	ldr	r3, [r3, #4]
 801aaa2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801aaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aaa6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801aaa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaaa:	781b      	ldrb	r3, [r3, #0]
 801aaac:	f003 030f 	and.w	r3, r3, #15
 801aab0:	b2db      	uxtb	r3, r3
 801aab2:	009b      	lsls	r3, r3, #2
 801aab4:	b2db      	uxtb	r3, r3
 801aab6:	2b14      	cmp	r3, #20
 801aab8:	d002      	beq.n	801aac0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801aaba:	f06f 0305 	mvn.w	r3, #5
 801aabe:	e110      	b.n	801ace2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	895b      	ldrh	r3, [r3, #10]
 801aac4:	2b13      	cmp	r3, #19
 801aac6:	d809      	bhi.n	801aadc <ip4_frag+0x64>
 801aac8:	4b88      	ldr	r3, [pc, #544]	@ (801acec <ip4_frag+0x274>)
 801aaca:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801aace:	4988      	ldr	r1, [pc, #544]	@ (801acf0 <ip4_frag+0x278>)
 801aad0:	4888      	ldr	r0, [pc, #544]	@ (801acf4 <ip4_frag+0x27c>)
 801aad2:	f000 fbdf 	bl	801b294 <iprintf>
 801aad6:	f06f 0305 	mvn.w	r3, #5
 801aada:	e102      	b.n	801ace2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aade:	88db      	ldrh	r3, [r3, #6]
 801aae0:	b29b      	uxth	r3, r3
 801aae2:	4618      	mov	r0, r3
 801aae4:	f7f5 fe52 	bl	801078c <lwip_htons>
 801aae8:	4603      	mov	r3, r0
 801aaea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801aaec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801aaee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aaf2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801aaf6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801aaf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801aafc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	891b      	ldrh	r3, [r3, #8]
 801ab02:	3b14      	subs	r3, #20
 801ab04:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ab08:	e0e1      	b.n	801acce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ab0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ab0c:	00db      	lsls	r3, r3, #3
 801ab0e:	b29b      	uxth	r3, r3
 801ab10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ab14:	4293      	cmp	r3, r2
 801ab16:	bf28      	it	cs
 801ab18:	4613      	movcs	r3, r2
 801ab1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ab1c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ab20:	2114      	movs	r1, #20
 801ab22:	200e      	movs	r0, #14
 801ab24:	f7f6 fffc 	bl	8011b20 <pbuf_alloc>
 801ab28:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	f000 80d5 	beq.w	801acdc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab34:	895b      	ldrh	r3, [r3, #10]
 801ab36:	2b13      	cmp	r3, #19
 801ab38:	d806      	bhi.n	801ab48 <ip4_frag+0xd0>
 801ab3a:	4b6c      	ldr	r3, [pc, #432]	@ (801acec <ip4_frag+0x274>)
 801ab3c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ab40:	496d      	ldr	r1, [pc, #436]	@ (801acf8 <ip4_frag+0x280>)
 801ab42:	486c      	ldr	r0, [pc, #432]	@ (801acf4 <ip4_frag+0x27c>)
 801ab44:	f000 fba6 	bl	801b294 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ab48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab4a:	685b      	ldr	r3, [r3, #4]
 801ab4c:	2214      	movs	r2, #20
 801ab4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ab50:	4618      	mov	r0, r3
 801ab52:	f000 fcd8 	bl	801b506 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ab56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab58:	685b      	ldr	r3, [r3, #4]
 801ab5a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801ab5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ab5e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801ab62:	e064      	b.n	801ac2e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	895a      	ldrh	r2, [r3, #10]
 801ab68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ab6a:	1ad3      	subs	r3, r2, r3
 801ab6c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	895b      	ldrh	r3, [r3, #10]
 801ab72:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ab74:	429a      	cmp	r2, r3
 801ab76:	d906      	bls.n	801ab86 <ip4_frag+0x10e>
 801ab78:	4b5c      	ldr	r3, [pc, #368]	@ (801acec <ip4_frag+0x274>)
 801ab7a:	f240 322d 	movw	r2, #813	@ 0x32d
 801ab7e:	495f      	ldr	r1, [pc, #380]	@ (801acfc <ip4_frag+0x284>)
 801ab80:	485c      	ldr	r0, [pc, #368]	@ (801acf4 <ip4_frag+0x27c>)
 801ab82:	f000 fb87 	bl	801b294 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ab86:	8bfa      	ldrh	r2, [r7, #30]
 801ab88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ab8c:	4293      	cmp	r3, r2
 801ab8e:	bf28      	it	cs
 801ab90:	4613      	movcs	r3, r2
 801ab92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ab96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d105      	bne.n	801abaa <ip4_frag+0x132>
        poff = 0;
 801ab9e:	2300      	movs	r3, #0
 801aba0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	60fb      	str	r3, [r7, #12]
        continue;
 801aba8:	e041      	b.n	801ac2e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801abaa:	f7ff ff0d 	bl	801a9c8 <ip_frag_alloc_pbuf_custom_ref>
 801abae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801abb0:	69bb      	ldr	r3, [r7, #24]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d103      	bne.n	801abbe <ip4_frag+0x146>
        pbuf_free(rambuf);
 801abb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801abb8:	f7f7 fa9a 	bl	80120f0 <pbuf_free>
        goto memerr;
 801abbc:	e08f      	b.n	801acde <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801abbe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801abc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801abc6:	4413      	add	r3, r2
 801abc8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801abcc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801abd0:	9201      	str	r2, [sp, #4]
 801abd2:	9300      	str	r3, [sp, #0]
 801abd4:	4603      	mov	r3, r0
 801abd6:	2241      	movs	r2, #65	@ 0x41
 801abd8:	2000      	movs	r0, #0
 801abda:	f7f7 f8cf 	bl	8011d7c <pbuf_alloced_custom>
 801abde:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801abe0:	697b      	ldr	r3, [r7, #20]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d106      	bne.n	801abf4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801abe6:	69b8      	ldr	r0, [r7, #24]
 801abe8:	f7ff fef6 	bl	801a9d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801abec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801abee:	f7f7 fa7f 	bl	80120f0 <pbuf_free>
        goto memerr;
 801abf2:	e074      	b.n	801acde <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801abf4:	68f8      	ldr	r0, [r7, #12]
 801abf6:	f7f7 fb21 	bl	801223c <pbuf_ref>
      pcr->original = p;
 801abfa:	69bb      	ldr	r3, [r7, #24]
 801abfc:	68fa      	ldr	r2, [r7, #12]
 801abfe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ac00:	69bb      	ldr	r3, [r7, #24]
 801ac02:	4a3f      	ldr	r2, [pc, #252]	@ (801ad00 <ip4_frag+0x288>)
 801ac04:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ac06:	6979      	ldr	r1, [r7, #20]
 801ac08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac0a:	f7f7 fb3f 	bl	801228c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ac0e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801ac12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ac16:	1ad3      	subs	r3, r2, r3
 801ac18:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801ac1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d004      	beq.n	801ac2e <ip4_frag+0x1b6>
        poff = 0;
 801ac24:	2300      	movs	r3, #0
 801ac26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ac2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d196      	bne.n	801ab64 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ac36:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ac38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ac3c:	4413      	add	r3, r2
 801ac3e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ac40:	68bb      	ldr	r3, [r7, #8]
 801ac42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ac44:	f1a3 0213 	sub.w	r2, r3, #19
 801ac48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	bfcc      	ite	gt
 801ac50:	2301      	movgt	r3, #1
 801ac52:	2300      	movle	r3, #0
 801ac54:	b2db      	uxtb	r3, r3
 801ac56:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ac58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ac5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801ac62:	6a3b      	ldr	r3, [r7, #32]
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d002      	beq.n	801ac6e <ip4_frag+0x1f6>
 801ac68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d003      	beq.n	801ac76 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ac6e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ac70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801ac74:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ac76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ac78:	4618      	mov	r0, r3
 801ac7a:	f7f5 fd87 	bl	801078c <lwip_htons>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	461a      	mov	r2, r3
 801ac82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac84:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ac86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ac88:	3314      	adds	r3, #20
 801ac8a:	b29b      	uxth	r3, r3
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	f7f5 fd7d 	bl	801078c <lwip_htons>
 801ac92:	4603      	mov	r3, r0
 801ac94:	461a      	mov	r2, r3
 801ac96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac98:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	729a      	strb	r2, [r3, #10]
 801aca0:	2200      	movs	r2, #0
 801aca2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	695b      	ldr	r3, [r3, #20]
 801aca8:	687a      	ldr	r2, [r7, #4]
 801acaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801acac:	68b8      	ldr	r0, [r7, #8]
 801acae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801acb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801acb2:	f7f7 fa1d 	bl	80120f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801acb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801acba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801acbc:	1ad3      	subs	r3, r2, r3
 801acbe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801acc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801acc6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801acc8:	4413      	add	r3, r2
 801acca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801acce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	f47f af19 	bne.w	801ab0a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801acd8:	2300      	movs	r3, #0
 801acda:	e002      	b.n	801ace2 <ip4_frag+0x26a>
      goto memerr;
 801acdc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801acde:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ace2:	4618      	mov	r0, r3
 801ace4:	3748      	adds	r7, #72	@ 0x48
 801ace6:	46bd      	mov	sp, r7
 801ace8:	bd80      	pop	{r7, pc}
 801acea:	bf00      	nop
 801acec:	0801eaa8 	.word	0x0801eaa8
 801acf0:	0801ec84 	.word	0x0801ec84
 801acf4:	0801eaf0 	.word	0x0801eaf0
 801acf8:	0801eca0 	.word	0x0801eca0
 801acfc:	0801ecc0 	.word	0x0801ecc0
 801ad00:	0801aa11 	.word	0x0801aa11

0801ad04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ad04:	b580      	push	{r7, lr}
 801ad06:	b086      	sub	sp, #24
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]
 801ad0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ad0e:	230e      	movs	r3, #14
 801ad10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	895b      	ldrh	r3, [r3, #10]
 801ad16:	2b0e      	cmp	r3, #14
 801ad18:	d96e      	bls.n	801adf8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	7bdb      	ldrb	r3, [r3, #15]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d106      	bne.n	801ad30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ad28:	3301      	adds	r3, #1
 801ad2a:	b2da      	uxtb	r2, r3
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	685b      	ldr	r3, [r3, #4]
 801ad34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ad36:	693b      	ldr	r3, [r7, #16]
 801ad38:	7b1a      	ldrb	r2, [r3, #12]
 801ad3a:	7b5b      	ldrb	r3, [r3, #13]
 801ad3c:	021b      	lsls	r3, r3, #8
 801ad3e:	4313      	orrs	r3, r2
 801ad40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ad42:	693b      	ldr	r3, [r7, #16]
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	f003 0301 	and.w	r3, r3, #1
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d023      	beq.n	801ad96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ad4e:	693b      	ldr	r3, [r7, #16]
 801ad50:	781b      	ldrb	r3, [r3, #0]
 801ad52:	2b01      	cmp	r3, #1
 801ad54:	d10f      	bne.n	801ad76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ad56:	693b      	ldr	r3, [r7, #16]
 801ad58:	785b      	ldrb	r3, [r3, #1]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d11b      	bne.n	801ad96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ad5e:	693b      	ldr	r3, [r7, #16]
 801ad60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ad62:	2b5e      	cmp	r3, #94	@ 0x5e
 801ad64:	d117      	bne.n	801ad96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	7b5b      	ldrb	r3, [r3, #13]
 801ad6a:	f043 0310 	orr.w	r3, r3, #16
 801ad6e:	b2da      	uxtb	r2, r3
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	735a      	strb	r2, [r3, #13]
 801ad74:	e00f      	b.n	801ad96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ad76:	693b      	ldr	r3, [r7, #16]
 801ad78:	2206      	movs	r2, #6
 801ad7a:	4928      	ldr	r1, [pc, #160]	@ (801ae1c <ethernet_input+0x118>)
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	f000 fade 	bl	801b33e <memcmp>
 801ad82:	4603      	mov	r3, r0
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d106      	bne.n	801ad96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	7b5b      	ldrb	r3, [r3, #13]
 801ad8c:	f043 0308 	orr.w	r3, r3, #8
 801ad90:	b2da      	uxtb	r2, r3
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ad96:	89fb      	ldrh	r3, [r7, #14]
 801ad98:	2b08      	cmp	r3, #8
 801ad9a:	d003      	beq.n	801ada4 <ethernet_input+0xa0>
 801ad9c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801ada0:	d014      	beq.n	801adcc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ada2:	e032      	b.n	801ae0a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801adaa:	f003 0308 	and.w	r3, r3, #8
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d024      	beq.n	801adfc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801adb2:	8afb      	ldrh	r3, [r7, #22]
 801adb4:	4619      	mov	r1, r3
 801adb6:	6878      	ldr	r0, [r7, #4]
 801adb8:	f7f7 f914 	bl	8011fe4 <pbuf_remove_header>
 801adbc:	4603      	mov	r3, r0
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d11e      	bne.n	801ae00 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801adc2:	6839      	ldr	r1, [r7, #0]
 801adc4:	6878      	ldr	r0, [r7, #4]
 801adc6:	f7fe fe85 	bl	8019ad4 <ip4_input>
      break;
 801adca:	e013      	b.n	801adf4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801adcc:	683b      	ldr	r3, [r7, #0]
 801adce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801add2:	f003 0308 	and.w	r3, r3, #8
 801add6:	2b00      	cmp	r3, #0
 801add8:	d014      	beq.n	801ae04 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801adda:	8afb      	ldrh	r3, [r7, #22]
 801addc:	4619      	mov	r1, r3
 801adde:	6878      	ldr	r0, [r7, #4]
 801ade0:	f7f7 f900 	bl	8011fe4 <pbuf_remove_header>
 801ade4:	4603      	mov	r3, r0
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d10e      	bne.n	801ae08 <ethernet_input+0x104>
        etharp_input(p, netif);
 801adea:	6839      	ldr	r1, [r7, #0]
 801adec:	6878      	ldr	r0, [r7, #4]
 801adee:	f7fd ffff 	bl	8018df0 <etharp_input>
      break;
 801adf2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801adf4:	2300      	movs	r3, #0
 801adf6:	e00c      	b.n	801ae12 <ethernet_input+0x10e>
    goto free_and_return;
 801adf8:	bf00      	nop
 801adfa:	e006      	b.n	801ae0a <ethernet_input+0x106>
        goto free_and_return;
 801adfc:	bf00      	nop
 801adfe:	e004      	b.n	801ae0a <ethernet_input+0x106>
        goto free_and_return;
 801ae00:	bf00      	nop
 801ae02:	e002      	b.n	801ae0a <ethernet_input+0x106>
        goto free_and_return;
 801ae04:	bf00      	nop
 801ae06:	e000      	b.n	801ae0a <ethernet_input+0x106>
        goto free_and_return;
 801ae08:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ae0a:	6878      	ldr	r0, [r7, #4]
 801ae0c:	f7f7 f970 	bl	80120f0 <pbuf_free>
  return ERR_OK;
 801ae10:	2300      	movs	r3, #0
}
 801ae12:	4618      	mov	r0, r3
 801ae14:	3718      	adds	r7, #24
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}
 801ae1a:	bf00      	nop
 801ae1c:	0801eef4 	.word	0x0801eef4

0801ae20 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b086      	sub	sp, #24
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	60f8      	str	r0, [r7, #12]
 801ae28:	60b9      	str	r1, [r7, #8]
 801ae2a:	607a      	str	r2, [r7, #4]
 801ae2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ae2e:	8c3b      	ldrh	r3, [r7, #32]
 801ae30:	4618      	mov	r0, r3
 801ae32:	f7f5 fcab 	bl	801078c <lwip_htons>
 801ae36:	4603      	mov	r3, r0
 801ae38:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ae3a:	210e      	movs	r1, #14
 801ae3c:	68b8      	ldr	r0, [r7, #8]
 801ae3e:	f7f7 f8c1 	bl	8011fc4 <pbuf_add_header>
 801ae42:	4603      	mov	r3, r0
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d125      	bne.n	801ae94 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	685b      	ldr	r3, [r3, #4]
 801ae4c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ae4e:	693b      	ldr	r3, [r7, #16]
 801ae50:	8afa      	ldrh	r2, [r7, #22]
 801ae52:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ae54:	693b      	ldr	r3, [r7, #16]
 801ae56:	2206      	movs	r2, #6
 801ae58:	6839      	ldr	r1, [r7, #0]
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f000 fb53 	bl	801b506 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ae60:	693b      	ldr	r3, [r7, #16]
 801ae62:	3306      	adds	r3, #6
 801ae64:	2206      	movs	r2, #6
 801ae66:	6879      	ldr	r1, [r7, #4]
 801ae68:	4618      	mov	r0, r3
 801ae6a:	f000 fb4c 	bl	801b506 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ae74:	2b06      	cmp	r3, #6
 801ae76:	d006      	beq.n	801ae86 <ethernet_output+0x66>
 801ae78:	4b0a      	ldr	r3, [pc, #40]	@ (801aea4 <ethernet_output+0x84>)
 801ae7a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801ae7e:	490a      	ldr	r1, [pc, #40]	@ (801aea8 <ethernet_output+0x88>)
 801ae80:	480a      	ldr	r0, [pc, #40]	@ (801aeac <ethernet_output+0x8c>)
 801ae82:	f000 fa07 	bl	801b294 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	699b      	ldr	r3, [r3, #24]
 801ae8a:	68b9      	ldr	r1, [r7, #8]
 801ae8c:	68f8      	ldr	r0, [r7, #12]
 801ae8e:	4798      	blx	r3
 801ae90:	4603      	mov	r3, r0
 801ae92:	e002      	b.n	801ae9a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ae94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ae96:	f06f 0301 	mvn.w	r3, #1
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3718      	adds	r7, #24
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
 801aea2:	bf00      	nop
 801aea4:	0801ecd0 	.word	0x0801ecd0
 801aea8:	0801ed08 	.word	0x0801ed08
 801aeac:	0801ed3c 	.word	0x0801ed3c

0801aeb0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	b082      	sub	sp, #8
 801aeb4:	af00      	add	r7, sp, #0
 801aeb6:	6078      	str	r0, [r7, #4]
 801aeb8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801aeba:	683b      	ldr	r3, [r7, #0]
 801aebc:	2200      	movs	r2, #0
 801aebe:	2104      	movs	r1, #4
 801aec0:	4618      	mov	r0, r3
 801aec2:	f7f1 feed 	bl	800cca0 <osMessageQueueNew>
 801aec6:	4602      	mov	r2, r0
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d102      	bne.n	801aeda <sys_mbox_new+0x2a>
    return ERR_MEM;
 801aed4:	f04f 33ff 	mov.w	r3, #4294967295
 801aed8:	e000      	b.n	801aedc <sys_mbox_new+0x2c>

  return ERR_OK;
 801aeda:	2300      	movs	r3, #0
}
 801aedc:	4618      	mov	r0, r3
 801aede:	3708      	adds	r7, #8
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b084      	sub	sp, #16
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
 801aeec:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	6818      	ldr	r0, [r3, #0]
 801aef2:	4639      	mov	r1, r7
 801aef4:	2300      	movs	r3, #0
 801aef6:	2200      	movs	r2, #0
 801aef8:	f7f1 ff46 	bl	800cd88 <osMessageQueuePut>
 801aefc:	4603      	mov	r3, r0
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d102      	bne.n	801af08 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801af02:	2300      	movs	r3, #0
 801af04:	73fb      	strb	r3, [r7, #15]
 801af06:	e001      	b.n	801af0c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801af08:	23ff      	movs	r3, #255	@ 0xff
 801af0a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801af0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801af10:	4618      	mov	r0, r3
 801af12:	3710      	adds	r7, #16
 801af14:	46bd      	mov	sp, r7
 801af16:	bd80      	pop	{r7, pc}

0801af18 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b086      	sub	sp, #24
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	60f8      	str	r0, [r7, #12]
 801af20:	60b9      	str	r1, [r7, #8]
 801af22:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801af24:	f7f1 fbcc 	bl	800c6c0 <osKernelGetTickCount>
 801af28:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d013      	beq.n	801af58 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	6818      	ldr	r0, [r3, #0]
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2200      	movs	r2, #0
 801af38:	68b9      	ldr	r1, [r7, #8]
 801af3a:	f7f1 ff85 	bl	800ce48 <osMessageQueueGet>
 801af3e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801af40:	693b      	ldr	r3, [r7, #16]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d105      	bne.n	801af52 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801af46:	f7f1 fbbb 	bl	800c6c0 <osKernelGetTickCount>
 801af4a:	4602      	mov	r2, r0
 801af4c:	697b      	ldr	r3, [r7, #20]
 801af4e:	1ad3      	subs	r3, r2, r3
 801af50:	e00f      	b.n	801af72 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801af52:	f04f 33ff 	mov.w	r3, #4294967295
 801af56:	e00c      	b.n	801af72 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	6818      	ldr	r0, [r3, #0]
 801af5c:	f04f 33ff 	mov.w	r3, #4294967295
 801af60:	2200      	movs	r2, #0
 801af62:	68b9      	ldr	r1, [r7, #8]
 801af64:	f7f1 ff70 	bl	800ce48 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801af68:	f7f1 fbaa 	bl	800c6c0 <osKernelGetTickCount>
 801af6c:	4602      	mov	r2, r0
 801af6e:	697b      	ldr	r3, [r7, #20]
 801af70:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801af72:	4618      	mov	r0, r3
 801af74:	3718      	adds	r7, #24
 801af76:	46bd      	mov	sp, r7
 801af78:	bd80      	pop	{r7, pc}

0801af7a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801af7a:	b480      	push	{r7}
 801af7c:	b083      	sub	sp, #12
 801af7e:	af00      	add	r7, sp, #0
 801af80:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d101      	bne.n	801af8e <sys_mbox_valid+0x14>
    return 0;
 801af8a:	2300      	movs	r3, #0
 801af8c:	e000      	b.n	801af90 <sys_mbox_valid+0x16>
  else
    return 1;
 801af8e:	2301      	movs	r3, #1
}
 801af90:	4618      	mov	r0, r3
 801af92:	370c      	adds	r7, #12
 801af94:	46bd      	mov	sp, r7
 801af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af9a:	4770      	bx	lr

0801af9c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801afa0:	2000      	movs	r0, #0
 801afa2:	f7f1 fc4f 	bl	800c844 <osMutexNew>
 801afa6:	4603      	mov	r3, r0
 801afa8:	4a01      	ldr	r2, [pc, #4]	@ (801afb0 <sys_init+0x14>)
 801afaa:	6013      	str	r3, [r2, #0]
#endif
}
 801afac:	bf00      	nop
 801afae:	bd80      	pop	{r7, pc}
 801afb0:	24014d20 	.word	0x24014d20

0801afb4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b082      	sub	sp, #8
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801afbc:	2000      	movs	r0, #0
 801afbe:	f7f1 fc41 	bl	800c844 <osMutexNew>
 801afc2:	4602      	mov	r2, r0
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d102      	bne.n	801afd6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801afd0:	f04f 33ff 	mov.w	r3, #4294967295
 801afd4:	e000      	b.n	801afd8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801afd6:	2300      	movs	r3, #0
}
 801afd8:	4618      	mov	r0, r3
 801afda:	3708      	adds	r7, #8
 801afdc:	46bd      	mov	sp, r7
 801afde:	bd80      	pop	{r7, pc}

0801afe0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b082      	sub	sp, #8
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	f04f 31ff 	mov.w	r1, #4294967295
 801aff0:	4618      	mov	r0, r3
 801aff2:	f7f1 fcad 	bl	800c950 <osMutexAcquire>
#endif
}
 801aff6:	bf00      	nop
 801aff8:	3708      	adds	r7, #8
 801affa:	46bd      	mov	sp, r7
 801affc:	bd80      	pop	{r7, pc}

0801affe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801affe:	b580      	push	{r7, lr}
 801b000:	b082      	sub	sp, #8
 801b002:	af00      	add	r7, sp, #0
 801b004:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	4618      	mov	r0, r3
 801b00c:	f7f1 fceb 	bl	800c9e6 <osMutexRelease>
}
 801b010:	bf00      	nop
 801b012:	3708      	adds	r7, #8
 801b014:	46bd      	mov	sp, r7
 801b016:	bd80      	pop	{r7, pc}

0801b018 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b08e      	sub	sp, #56	@ 0x38
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	60f8      	str	r0, [r7, #12]
 801b020:	60b9      	str	r1, [r7, #8]
 801b022:	607a      	str	r2, [r7, #4]
 801b024:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b026:	f107 0314 	add.w	r3, r7, #20
 801b02a:	2224      	movs	r2, #36	@ 0x24
 801b02c:	2100      	movs	r1, #0
 801b02e:	4618      	mov	r0, r3
 801b030:	f000 f995 	bl	801b35e <memset>
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	617b      	str	r3, [r7, #20]
 801b038:	683b      	ldr	r3, [r7, #0]
 801b03a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b03c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b03e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b040:	f107 0314 	add.w	r3, r7, #20
 801b044:	461a      	mov	r2, r3
 801b046:	6879      	ldr	r1, [r7, #4]
 801b048:	68b8      	ldr	r0, [r7, #8]
 801b04a:	f7f1 fb4e 	bl	800c6ea <osThreadNew>
 801b04e:	4603      	mov	r3, r0
#endif
}
 801b050:	4618      	mov	r0, r3
 801b052:	3738      	adds	r7, #56	@ 0x38
 801b054:	46bd      	mov	sp, r7
 801b056:	bd80      	pop	{r7, pc}

0801b058 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b05c:	4b04      	ldr	r3, [pc, #16]	@ (801b070 <sys_arch_protect+0x18>)
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	f04f 31ff 	mov.w	r1, #4294967295
 801b064:	4618      	mov	r0, r3
 801b066:	f7f1 fc73 	bl	800c950 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b06a:	2301      	movs	r3, #1
}
 801b06c:	4618      	mov	r0, r3
 801b06e:	bd80      	pop	{r7, pc}
 801b070:	24014d20 	.word	0x24014d20

0801b074 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b082      	sub	sp, #8
 801b078:	af00      	add	r7, sp, #0
 801b07a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b07c:	4b04      	ldr	r3, [pc, #16]	@ (801b090 <sys_arch_unprotect+0x1c>)
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	4618      	mov	r0, r3
 801b082:	f7f1 fcb0 	bl	800c9e6 <osMutexRelease>
}
 801b086:	bf00      	nop
 801b088:	3708      	adds	r7, #8
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd80      	pop	{r7, pc}
 801b08e:	bf00      	nop
 801b090:	24014d20 	.word	0x24014d20

0801b094 <rand>:
 801b094:	4b16      	ldr	r3, [pc, #88]	@ (801b0f0 <rand+0x5c>)
 801b096:	b510      	push	{r4, lr}
 801b098:	681c      	ldr	r4, [r3, #0]
 801b09a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b09c:	b9b3      	cbnz	r3, 801b0cc <rand+0x38>
 801b09e:	2018      	movs	r0, #24
 801b0a0:	f000 faa8 	bl	801b5f4 <malloc>
 801b0a4:	4602      	mov	r2, r0
 801b0a6:	6320      	str	r0, [r4, #48]	@ 0x30
 801b0a8:	b920      	cbnz	r0, 801b0b4 <rand+0x20>
 801b0aa:	4b12      	ldr	r3, [pc, #72]	@ (801b0f4 <rand+0x60>)
 801b0ac:	4812      	ldr	r0, [pc, #72]	@ (801b0f8 <rand+0x64>)
 801b0ae:	2152      	movs	r1, #82	@ 0x52
 801b0b0:	f000 fa38 	bl	801b524 <__assert_func>
 801b0b4:	4911      	ldr	r1, [pc, #68]	@ (801b0fc <rand+0x68>)
 801b0b6:	4b12      	ldr	r3, [pc, #72]	@ (801b100 <rand+0x6c>)
 801b0b8:	e9c0 1300 	strd	r1, r3, [r0]
 801b0bc:	4b11      	ldr	r3, [pc, #68]	@ (801b104 <rand+0x70>)
 801b0be:	6083      	str	r3, [r0, #8]
 801b0c0:	230b      	movs	r3, #11
 801b0c2:	8183      	strh	r3, [r0, #12]
 801b0c4:	2100      	movs	r1, #0
 801b0c6:	2001      	movs	r0, #1
 801b0c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b0cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b0ce:	480e      	ldr	r0, [pc, #56]	@ (801b108 <rand+0x74>)
 801b0d0:	690b      	ldr	r3, [r1, #16]
 801b0d2:	694c      	ldr	r4, [r1, #20]
 801b0d4:	4a0d      	ldr	r2, [pc, #52]	@ (801b10c <rand+0x78>)
 801b0d6:	4358      	muls	r0, r3
 801b0d8:	fb02 0004 	mla	r0, r2, r4, r0
 801b0dc:	fba3 3202 	umull	r3, r2, r3, r2
 801b0e0:	3301      	adds	r3, #1
 801b0e2:	eb40 0002 	adc.w	r0, r0, r2
 801b0e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b0ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b0ee:	bd10      	pop	{r4, pc}
 801b0f0:	240049fc 	.word	0x240049fc
 801b0f4:	0801ef02 	.word	0x0801ef02
 801b0f8:	0801ef19 	.word	0x0801ef19
 801b0fc:	abcd330e 	.word	0xabcd330e
 801b100:	e66d1234 	.word	0xe66d1234
 801b104:	0005deec 	.word	0x0005deec
 801b108:	5851f42d 	.word	0x5851f42d
 801b10c:	4c957f2d 	.word	0x4c957f2d

0801b110 <std>:
 801b110:	2300      	movs	r3, #0
 801b112:	b510      	push	{r4, lr}
 801b114:	4604      	mov	r4, r0
 801b116:	e9c0 3300 	strd	r3, r3, [r0]
 801b11a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b11e:	6083      	str	r3, [r0, #8]
 801b120:	8181      	strh	r1, [r0, #12]
 801b122:	6643      	str	r3, [r0, #100]	@ 0x64
 801b124:	81c2      	strh	r2, [r0, #14]
 801b126:	6183      	str	r3, [r0, #24]
 801b128:	4619      	mov	r1, r3
 801b12a:	2208      	movs	r2, #8
 801b12c:	305c      	adds	r0, #92	@ 0x5c
 801b12e:	f000 f916 	bl	801b35e <memset>
 801b132:	4b0d      	ldr	r3, [pc, #52]	@ (801b168 <std+0x58>)
 801b134:	6263      	str	r3, [r4, #36]	@ 0x24
 801b136:	4b0d      	ldr	r3, [pc, #52]	@ (801b16c <std+0x5c>)
 801b138:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b13a:	4b0d      	ldr	r3, [pc, #52]	@ (801b170 <std+0x60>)
 801b13c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b13e:	4b0d      	ldr	r3, [pc, #52]	@ (801b174 <std+0x64>)
 801b140:	6323      	str	r3, [r4, #48]	@ 0x30
 801b142:	4b0d      	ldr	r3, [pc, #52]	@ (801b178 <std+0x68>)
 801b144:	6224      	str	r4, [r4, #32]
 801b146:	429c      	cmp	r4, r3
 801b148:	d006      	beq.n	801b158 <std+0x48>
 801b14a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b14e:	4294      	cmp	r4, r2
 801b150:	d002      	beq.n	801b158 <std+0x48>
 801b152:	33d0      	adds	r3, #208	@ 0xd0
 801b154:	429c      	cmp	r4, r3
 801b156:	d105      	bne.n	801b164 <std+0x54>
 801b158:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b160:	f000 b9ce 	b.w	801b500 <__retarget_lock_init_recursive>
 801b164:	bd10      	pop	{r4, pc}
 801b166:	bf00      	nop
 801b168:	0801b2b9 	.word	0x0801b2b9
 801b16c:	0801b2db 	.word	0x0801b2db
 801b170:	0801b313 	.word	0x0801b313
 801b174:	0801b337 	.word	0x0801b337
 801b178:	24014d24 	.word	0x24014d24

0801b17c <stdio_exit_handler>:
 801b17c:	4a02      	ldr	r2, [pc, #8]	@ (801b188 <stdio_exit_handler+0xc>)
 801b17e:	4903      	ldr	r1, [pc, #12]	@ (801b18c <stdio_exit_handler+0x10>)
 801b180:	4803      	ldr	r0, [pc, #12]	@ (801b190 <stdio_exit_handler+0x14>)
 801b182:	f000 b869 	b.w	801b258 <_fwalk_sglue>
 801b186:	bf00      	nop
 801b188:	240049f0 	.word	0x240049f0
 801b18c:	0801be05 	.word	0x0801be05
 801b190:	24004a00 	.word	0x24004a00

0801b194 <cleanup_stdio>:
 801b194:	6841      	ldr	r1, [r0, #4]
 801b196:	4b0c      	ldr	r3, [pc, #48]	@ (801b1c8 <cleanup_stdio+0x34>)
 801b198:	4299      	cmp	r1, r3
 801b19a:	b510      	push	{r4, lr}
 801b19c:	4604      	mov	r4, r0
 801b19e:	d001      	beq.n	801b1a4 <cleanup_stdio+0x10>
 801b1a0:	f000 fe30 	bl	801be04 <_fflush_r>
 801b1a4:	68a1      	ldr	r1, [r4, #8]
 801b1a6:	4b09      	ldr	r3, [pc, #36]	@ (801b1cc <cleanup_stdio+0x38>)
 801b1a8:	4299      	cmp	r1, r3
 801b1aa:	d002      	beq.n	801b1b2 <cleanup_stdio+0x1e>
 801b1ac:	4620      	mov	r0, r4
 801b1ae:	f000 fe29 	bl	801be04 <_fflush_r>
 801b1b2:	68e1      	ldr	r1, [r4, #12]
 801b1b4:	4b06      	ldr	r3, [pc, #24]	@ (801b1d0 <cleanup_stdio+0x3c>)
 801b1b6:	4299      	cmp	r1, r3
 801b1b8:	d004      	beq.n	801b1c4 <cleanup_stdio+0x30>
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1c0:	f000 be20 	b.w	801be04 <_fflush_r>
 801b1c4:	bd10      	pop	{r4, pc}
 801b1c6:	bf00      	nop
 801b1c8:	24014d24 	.word	0x24014d24
 801b1cc:	24014d8c 	.word	0x24014d8c
 801b1d0:	24014df4 	.word	0x24014df4

0801b1d4 <global_stdio_init.part.0>:
 801b1d4:	b510      	push	{r4, lr}
 801b1d6:	4b0b      	ldr	r3, [pc, #44]	@ (801b204 <global_stdio_init.part.0+0x30>)
 801b1d8:	4c0b      	ldr	r4, [pc, #44]	@ (801b208 <global_stdio_init.part.0+0x34>)
 801b1da:	4a0c      	ldr	r2, [pc, #48]	@ (801b20c <global_stdio_init.part.0+0x38>)
 801b1dc:	601a      	str	r2, [r3, #0]
 801b1de:	4620      	mov	r0, r4
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	2104      	movs	r1, #4
 801b1e4:	f7ff ff94 	bl	801b110 <std>
 801b1e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b1ec:	2201      	movs	r2, #1
 801b1ee:	2109      	movs	r1, #9
 801b1f0:	f7ff ff8e 	bl	801b110 <std>
 801b1f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b1f8:	2202      	movs	r2, #2
 801b1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1fe:	2112      	movs	r1, #18
 801b200:	f7ff bf86 	b.w	801b110 <std>
 801b204:	24014e5c 	.word	0x24014e5c
 801b208:	24014d24 	.word	0x24014d24
 801b20c:	0801b17d 	.word	0x0801b17d

0801b210 <__sfp_lock_acquire>:
 801b210:	4801      	ldr	r0, [pc, #4]	@ (801b218 <__sfp_lock_acquire+0x8>)
 801b212:	f000 b976 	b.w	801b502 <__retarget_lock_acquire_recursive>
 801b216:	bf00      	nop
 801b218:	24014e65 	.word	0x24014e65

0801b21c <__sfp_lock_release>:
 801b21c:	4801      	ldr	r0, [pc, #4]	@ (801b224 <__sfp_lock_release+0x8>)
 801b21e:	f000 b971 	b.w	801b504 <__retarget_lock_release_recursive>
 801b222:	bf00      	nop
 801b224:	24014e65 	.word	0x24014e65

0801b228 <__sinit>:
 801b228:	b510      	push	{r4, lr}
 801b22a:	4604      	mov	r4, r0
 801b22c:	f7ff fff0 	bl	801b210 <__sfp_lock_acquire>
 801b230:	6a23      	ldr	r3, [r4, #32]
 801b232:	b11b      	cbz	r3, 801b23c <__sinit+0x14>
 801b234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b238:	f7ff bff0 	b.w	801b21c <__sfp_lock_release>
 801b23c:	4b04      	ldr	r3, [pc, #16]	@ (801b250 <__sinit+0x28>)
 801b23e:	6223      	str	r3, [r4, #32]
 801b240:	4b04      	ldr	r3, [pc, #16]	@ (801b254 <__sinit+0x2c>)
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d1f5      	bne.n	801b234 <__sinit+0xc>
 801b248:	f7ff ffc4 	bl	801b1d4 <global_stdio_init.part.0>
 801b24c:	e7f2      	b.n	801b234 <__sinit+0xc>
 801b24e:	bf00      	nop
 801b250:	0801b195 	.word	0x0801b195
 801b254:	24014e5c 	.word	0x24014e5c

0801b258 <_fwalk_sglue>:
 801b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b25c:	4607      	mov	r7, r0
 801b25e:	4688      	mov	r8, r1
 801b260:	4614      	mov	r4, r2
 801b262:	2600      	movs	r6, #0
 801b264:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b268:	f1b9 0901 	subs.w	r9, r9, #1
 801b26c:	d505      	bpl.n	801b27a <_fwalk_sglue+0x22>
 801b26e:	6824      	ldr	r4, [r4, #0]
 801b270:	2c00      	cmp	r4, #0
 801b272:	d1f7      	bne.n	801b264 <_fwalk_sglue+0xc>
 801b274:	4630      	mov	r0, r6
 801b276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b27a:	89ab      	ldrh	r3, [r5, #12]
 801b27c:	2b01      	cmp	r3, #1
 801b27e:	d907      	bls.n	801b290 <_fwalk_sglue+0x38>
 801b280:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b284:	3301      	adds	r3, #1
 801b286:	d003      	beq.n	801b290 <_fwalk_sglue+0x38>
 801b288:	4629      	mov	r1, r5
 801b28a:	4638      	mov	r0, r7
 801b28c:	47c0      	blx	r8
 801b28e:	4306      	orrs	r6, r0
 801b290:	3568      	adds	r5, #104	@ 0x68
 801b292:	e7e9      	b.n	801b268 <_fwalk_sglue+0x10>

0801b294 <iprintf>:
 801b294:	b40f      	push	{r0, r1, r2, r3}
 801b296:	b507      	push	{r0, r1, r2, lr}
 801b298:	4906      	ldr	r1, [pc, #24]	@ (801b2b4 <iprintf+0x20>)
 801b29a:	ab04      	add	r3, sp, #16
 801b29c:	6808      	ldr	r0, [r1, #0]
 801b29e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2a2:	6881      	ldr	r1, [r0, #8]
 801b2a4:	9301      	str	r3, [sp, #4]
 801b2a6:	f000 fa85 	bl	801b7b4 <_vfiprintf_r>
 801b2aa:	b003      	add	sp, #12
 801b2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2b0:	b004      	add	sp, #16
 801b2b2:	4770      	bx	lr
 801b2b4:	240049fc 	.word	0x240049fc

0801b2b8 <__sread>:
 801b2b8:	b510      	push	{r4, lr}
 801b2ba:	460c      	mov	r4, r1
 801b2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2c0:	f000 f8d6 	bl	801b470 <_read_r>
 801b2c4:	2800      	cmp	r0, #0
 801b2c6:	bfab      	itete	ge
 801b2c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b2ca:	89a3      	ldrhlt	r3, [r4, #12]
 801b2cc:	181b      	addge	r3, r3, r0
 801b2ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b2d2:	bfac      	ite	ge
 801b2d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b2d6:	81a3      	strhlt	r3, [r4, #12]
 801b2d8:	bd10      	pop	{r4, pc}

0801b2da <__swrite>:
 801b2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2de:	461f      	mov	r7, r3
 801b2e0:	898b      	ldrh	r3, [r1, #12]
 801b2e2:	05db      	lsls	r3, r3, #23
 801b2e4:	4605      	mov	r5, r0
 801b2e6:	460c      	mov	r4, r1
 801b2e8:	4616      	mov	r6, r2
 801b2ea:	d505      	bpl.n	801b2f8 <__swrite+0x1e>
 801b2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2f0:	2302      	movs	r3, #2
 801b2f2:	2200      	movs	r2, #0
 801b2f4:	f000 f8aa 	bl	801b44c <_lseek_r>
 801b2f8:	89a3      	ldrh	r3, [r4, #12]
 801b2fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b302:	81a3      	strh	r3, [r4, #12]
 801b304:	4632      	mov	r2, r6
 801b306:	463b      	mov	r3, r7
 801b308:	4628      	mov	r0, r5
 801b30a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b30e:	f000 b8c1 	b.w	801b494 <_write_r>

0801b312 <__sseek>:
 801b312:	b510      	push	{r4, lr}
 801b314:	460c      	mov	r4, r1
 801b316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b31a:	f000 f897 	bl	801b44c <_lseek_r>
 801b31e:	1c43      	adds	r3, r0, #1
 801b320:	89a3      	ldrh	r3, [r4, #12]
 801b322:	bf15      	itete	ne
 801b324:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b326:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b32a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b32e:	81a3      	strheq	r3, [r4, #12]
 801b330:	bf18      	it	ne
 801b332:	81a3      	strhne	r3, [r4, #12]
 801b334:	bd10      	pop	{r4, pc}

0801b336 <__sclose>:
 801b336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b33a:	f000 b819 	b.w	801b370 <_close_r>

0801b33e <memcmp>:
 801b33e:	b510      	push	{r4, lr}
 801b340:	3901      	subs	r1, #1
 801b342:	4402      	add	r2, r0
 801b344:	4290      	cmp	r0, r2
 801b346:	d101      	bne.n	801b34c <memcmp+0xe>
 801b348:	2000      	movs	r0, #0
 801b34a:	e005      	b.n	801b358 <memcmp+0x1a>
 801b34c:	7803      	ldrb	r3, [r0, #0]
 801b34e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b352:	42a3      	cmp	r3, r4
 801b354:	d001      	beq.n	801b35a <memcmp+0x1c>
 801b356:	1b18      	subs	r0, r3, r4
 801b358:	bd10      	pop	{r4, pc}
 801b35a:	3001      	adds	r0, #1
 801b35c:	e7f2      	b.n	801b344 <memcmp+0x6>

0801b35e <memset>:
 801b35e:	4402      	add	r2, r0
 801b360:	4603      	mov	r3, r0
 801b362:	4293      	cmp	r3, r2
 801b364:	d100      	bne.n	801b368 <memset+0xa>
 801b366:	4770      	bx	lr
 801b368:	f803 1b01 	strb.w	r1, [r3], #1
 801b36c:	e7f9      	b.n	801b362 <memset+0x4>
	...

0801b370 <_close_r>:
 801b370:	b538      	push	{r3, r4, r5, lr}
 801b372:	4d06      	ldr	r5, [pc, #24]	@ (801b38c <_close_r+0x1c>)
 801b374:	2300      	movs	r3, #0
 801b376:	4604      	mov	r4, r0
 801b378:	4608      	mov	r0, r1
 801b37a:	602b      	str	r3, [r5, #0]
 801b37c:	f7e6 fbde 	bl	8001b3c <_close>
 801b380:	1c43      	adds	r3, r0, #1
 801b382:	d102      	bne.n	801b38a <_close_r+0x1a>
 801b384:	682b      	ldr	r3, [r5, #0]
 801b386:	b103      	cbz	r3, 801b38a <_close_r+0x1a>
 801b388:	6023      	str	r3, [r4, #0]
 801b38a:	bd38      	pop	{r3, r4, r5, pc}
 801b38c:	24014e60 	.word	0x24014e60

0801b390 <_reclaim_reent>:
 801b390:	4b2d      	ldr	r3, [pc, #180]	@ (801b448 <_reclaim_reent+0xb8>)
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	4283      	cmp	r3, r0
 801b396:	b570      	push	{r4, r5, r6, lr}
 801b398:	4604      	mov	r4, r0
 801b39a:	d053      	beq.n	801b444 <_reclaim_reent+0xb4>
 801b39c:	69c3      	ldr	r3, [r0, #28]
 801b39e:	b31b      	cbz	r3, 801b3e8 <_reclaim_reent+0x58>
 801b3a0:	68db      	ldr	r3, [r3, #12]
 801b3a2:	b163      	cbz	r3, 801b3be <_reclaim_reent+0x2e>
 801b3a4:	2500      	movs	r5, #0
 801b3a6:	69e3      	ldr	r3, [r4, #28]
 801b3a8:	68db      	ldr	r3, [r3, #12]
 801b3aa:	5959      	ldr	r1, [r3, r5]
 801b3ac:	b9b1      	cbnz	r1, 801b3dc <_reclaim_reent+0x4c>
 801b3ae:	3504      	adds	r5, #4
 801b3b0:	2d80      	cmp	r5, #128	@ 0x80
 801b3b2:	d1f8      	bne.n	801b3a6 <_reclaim_reent+0x16>
 801b3b4:	69e3      	ldr	r3, [r4, #28]
 801b3b6:	4620      	mov	r0, r4
 801b3b8:	68d9      	ldr	r1, [r3, #12]
 801b3ba:	f000 f8d1 	bl	801b560 <_free_r>
 801b3be:	69e3      	ldr	r3, [r4, #28]
 801b3c0:	6819      	ldr	r1, [r3, #0]
 801b3c2:	b111      	cbz	r1, 801b3ca <_reclaim_reent+0x3a>
 801b3c4:	4620      	mov	r0, r4
 801b3c6:	f000 f8cb 	bl	801b560 <_free_r>
 801b3ca:	69e3      	ldr	r3, [r4, #28]
 801b3cc:	689d      	ldr	r5, [r3, #8]
 801b3ce:	b15d      	cbz	r5, 801b3e8 <_reclaim_reent+0x58>
 801b3d0:	4629      	mov	r1, r5
 801b3d2:	4620      	mov	r0, r4
 801b3d4:	682d      	ldr	r5, [r5, #0]
 801b3d6:	f000 f8c3 	bl	801b560 <_free_r>
 801b3da:	e7f8      	b.n	801b3ce <_reclaim_reent+0x3e>
 801b3dc:	680e      	ldr	r6, [r1, #0]
 801b3de:	4620      	mov	r0, r4
 801b3e0:	f000 f8be 	bl	801b560 <_free_r>
 801b3e4:	4631      	mov	r1, r6
 801b3e6:	e7e1      	b.n	801b3ac <_reclaim_reent+0x1c>
 801b3e8:	6961      	ldr	r1, [r4, #20]
 801b3ea:	b111      	cbz	r1, 801b3f2 <_reclaim_reent+0x62>
 801b3ec:	4620      	mov	r0, r4
 801b3ee:	f000 f8b7 	bl	801b560 <_free_r>
 801b3f2:	69e1      	ldr	r1, [r4, #28]
 801b3f4:	b111      	cbz	r1, 801b3fc <_reclaim_reent+0x6c>
 801b3f6:	4620      	mov	r0, r4
 801b3f8:	f000 f8b2 	bl	801b560 <_free_r>
 801b3fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b3fe:	b111      	cbz	r1, 801b406 <_reclaim_reent+0x76>
 801b400:	4620      	mov	r0, r4
 801b402:	f000 f8ad 	bl	801b560 <_free_r>
 801b406:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b408:	b111      	cbz	r1, 801b410 <_reclaim_reent+0x80>
 801b40a:	4620      	mov	r0, r4
 801b40c:	f000 f8a8 	bl	801b560 <_free_r>
 801b410:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b412:	b111      	cbz	r1, 801b41a <_reclaim_reent+0x8a>
 801b414:	4620      	mov	r0, r4
 801b416:	f000 f8a3 	bl	801b560 <_free_r>
 801b41a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b41c:	b111      	cbz	r1, 801b424 <_reclaim_reent+0x94>
 801b41e:	4620      	mov	r0, r4
 801b420:	f000 f89e 	bl	801b560 <_free_r>
 801b424:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b426:	b111      	cbz	r1, 801b42e <_reclaim_reent+0x9e>
 801b428:	4620      	mov	r0, r4
 801b42a:	f000 f899 	bl	801b560 <_free_r>
 801b42e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b430:	b111      	cbz	r1, 801b438 <_reclaim_reent+0xa8>
 801b432:	4620      	mov	r0, r4
 801b434:	f000 f894 	bl	801b560 <_free_r>
 801b438:	6a23      	ldr	r3, [r4, #32]
 801b43a:	b11b      	cbz	r3, 801b444 <_reclaim_reent+0xb4>
 801b43c:	4620      	mov	r0, r4
 801b43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b442:	4718      	bx	r3
 801b444:	bd70      	pop	{r4, r5, r6, pc}
 801b446:	bf00      	nop
 801b448:	240049fc 	.word	0x240049fc

0801b44c <_lseek_r>:
 801b44c:	b538      	push	{r3, r4, r5, lr}
 801b44e:	4d07      	ldr	r5, [pc, #28]	@ (801b46c <_lseek_r+0x20>)
 801b450:	4604      	mov	r4, r0
 801b452:	4608      	mov	r0, r1
 801b454:	4611      	mov	r1, r2
 801b456:	2200      	movs	r2, #0
 801b458:	602a      	str	r2, [r5, #0]
 801b45a:	461a      	mov	r2, r3
 801b45c:	f7e6 fb95 	bl	8001b8a <_lseek>
 801b460:	1c43      	adds	r3, r0, #1
 801b462:	d102      	bne.n	801b46a <_lseek_r+0x1e>
 801b464:	682b      	ldr	r3, [r5, #0]
 801b466:	b103      	cbz	r3, 801b46a <_lseek_r+0x1e>
 801b468:	6023      	str	r3, [r4, #0]
 801b46a:	bd38      	pop	{r3, r4, r5, pc}
 801b46c:	24014e60 	.word	0x24014e60

0801b470 <_read_r>:
 801b470:	b538      	push	{r3, r4, r5, lr}
 801b472:	4d07      	ldr	r5, [pc, #28]	@ (801b490 <_read_r+0x20>)
 801b474:	4604      	mov	r4, r0
 801b476:	4608      	mov	r0, r1
 801b478:	4611      	mov	r1, r2
 801b47a:	2200      	movs	r2, #0
 801b47c:	602a      	str	r2, [r5, #0]
 801b47e:	461a      	mov	r2, r3
 801b480:	f7e6 fb23 	bl	8001aca <_read>
 801b484:	1c43      	adds	r3, r0, #1
 801b486:	d102      	bne.n	801b48e <_read_r+0x1e>
 801b488:	682b      	ldr	r3, [r5, #0]
 801b48a:	b103      	cbz	r3, 801b48e <_read_r+0x1e>
 801b48c:	6023      	str	r3, [r4, #0]
 801b48e:	bd38      	pop	{r3, r4, r5, pc}
 801b490:	24014e60 	.word	0x24014e60

0801b494 <_write_r>:
 801b494:	b538      	push	{r3, r4, r5, lr}
 801b496:	4d07      	ldr	r5, [pc, #28]	@ (801b4b4 <_write_r+0x20>)
 801b498:	4604      	mov	r4, r0
 801b49a:	4608      	mov	r0, r1
 801b49c:	4611      	mov	r1, r2
 801b49e:	2200      	movs	r2, #0
 801b4a0:	602a      	str	r2, [r5, #0]
 801b4a2:	461a      	mov	r2, r3
 801b4a4:	f7e6 fb2e 	bl	8001b04 <_write>
 801b4a8:	1c43      	adds	r3, r0, #1
 801b4aa:	d102      	bne.n	801b4b2 <_write_r+0x1e>
 801b4ac:	682b      	ldr	r3, [r5, #0]
 801b4ae:	b103      	cbz	r3, 801b4b2 <_write_r+0x1e>
 801b4b0:	6023      	str	r3, [r4, #0]
 801b4b2:	bd38      	pop	{r3, r4, r5, pc}
 801b4b4:	24014e60 	.word	0x24014e60

0801b4b8 <__libc_init_array>:
 801b4b8:	b570      	push	{r4, r5, r6, lr}
 801b4ba:	4d0d      	ldr	r5, [pc, #52]	@ (801b4f0 <__libc_init_array+0x38>)
 801b4bc:	4c0d      	ldr	r4, [pc, #52]	@ (801b4f4 <__libc_init_array+0x3c>)
 801b4be:	1b64      	subs	r4, r4, r5
 801b4c0:	10a4      	asrs	r4, r4, #2
 801b4c2:	2600      	movs	r6, #0
 801b4c4:	42a6      	cmp	r6, r4
 801b4c6:	d109      	bne.n	801b4dc <__libc_init_array+0x24>
 801b4c8:	4d0b      	ldr	r5, [pc, #44]	@ (801b4f8 <__libc_init_array+0x40>)
 801b4ca:	4c0c      	ldr	r4, [pc, #48]	@ (801b4fc <__libc_init_array+0x44>)
 801b4cc:	f000 fe48 	bl	801c160 <_init>
 801b4d0:	1b64      	subs	r4, r4, r5
 801b4d2:	10a4      	asrs	r4, r4, #2
 801b4d4:	2600      	movs	r6, #0
 801b4d6:	42a6      	cmp	r6, r4
 801b4d8:	d105      	bne.n	801b4e6 <__libc_init_array+0x2e>
 801b4da:	bd70      	pop	{r4, r5, r6, pc}
 801b4dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4e0:	4798      	blx	r3
 801b4e2:	3601      	adds	r6, #1
 801b4e4:	e7ee      	b.n	801b4c4 <__libc_init_array+0xc>
 801b4e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4ea:	4798      	blx	r3
 801b4ec:	3601      	adds	r6, #1
 801b4ee:	e7f2      	b.n	801b4d6 <__libc_init_array+0x1e>
 801b4f0:	0801efe8 	.word	0x0801efe8
 801b4f4:	0801efe8 	.word	0x0801efe8
 801b4f8:	0801efe8 	.word	0x0801efe8
 801b4fc:	0801efec 	.word	0x0801efec

0801b500 <__retarget_lock_init_recursive>:
 801b500:	4770      	bx	lr

0801b502 <__retarget_lock_acquire_recursive>:
 801b502:	4770      	bx	lr

0801b504 <__retarget_lock_release_recursive>:
 801b504:	4770      	bx	lr

0801b506 <memcpy>:
 801b506:	440a      	add	r2, r1
 801b508:	4291      	cmp	r1, r2
 801b50a:	f100 33ff 	add.w	r3, r0, #4294967295
 801b50e:	d100      	bne.n	801b512 <memcpy+0xc>
 801b510:	4770      	bx	lr
 801b512:	b510      	push	{r4, lr}
 801b514:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b518:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b51c:	4291      	cmp	r1, r2
 801b51e:	d1f9      	bne.n	801b514 <memcpy+0xe>
 801b520:	bd10      	pop	{r4, pc}
	...

0801b524 <__assert_func>:
 801b524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b526:	4614      	mov	r4, r2
 801b528:	461a      	mov	r2, r3
 801b52a:	4b09      	ldr	r3, [pc, #36]	@ (801b550 <__assert_func+0x2c>)
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	4605      	mov	r5, r0
 801b530:	68d8      	ldr	r0, [r3, #12]
 801b532:	b14c      	cbz	r4, 801b548 <__assert_func+0x24>
 801b534:	4b07      	ldr	r3, [pc, #28]	@ (801b554 <__assert_func+0x30>)
 801b536:	9100      	str	r1, [sp, #0]
 801b538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b53c:	4906      	ldr	r1, [pc, #24]	@ (801b558 <__assert_func+0x34>)
 801b53e:	462b      	mov	r3, r5
 801b540:	f000 fc88 	bl	801be54 <fiprintf>
 801b544:	f000 fd3c 	bl	801bfc0 <abort>
 801b548:	4b04      	ldr	r3, [pc, #16]	@ (801b55c <__assert_func+0x38>)
 801b54a:	461c      	mov	r4, r3
 801b54c:	e7f3      	b.n	801b536 <__assert_func+0x12>
 801b54e:	bf00      	nop
 801b550:	240049fc 	.word	0x240049fc
 801b554:	0801ef71 	.word	0x0801ef71
 801b558:	0801ef7e 	.word	0x0801ef7e
 801b55c:	0801efac 	.word	0x0801efac

0801b560 <_free_r>:
 801b560:	b538      	push	{r3, r4, r5, lr}
 801b562:	4605      	mov	r5, r0
 801b564:	2900      	cmp	r1, #0
 801b566:	d041      	beq.n	801b5ec <_free_r+0x8c>
 801b568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b56c:	1f0c      	subs	r4, r1, #4
 801b56e:	2b00      	cmp	r3, #0
 801b570:	bfb8      	it	lt
 801b572:	18e4      	addlt	r4, r4, r3
 801b574:	f000 f8e8 	bl	801b748 <__malloc_lock>
 801b578:	4a1d      	ldr	r2, [pc, #116]	@ (801b5f0 <_free_r+0x90>)
 801b57a:	6813      	ldr	r3, [r2, #0]
 801b57c:	b933      	cbnz	r3, 801b58c <_free_r+0x2c>
 801b57e:	6063      	str	r3, [r4, #4]
 801b580:	6014      	str	r4, [r2, #0]
 801b582:	4628      	mov	r0, r5
 801b584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b588:	f000 b8e4 	b.w	801b754 <__malloc_unlock>
 801b58c:	42a3      	cmp	r3, r4
 801b58e:	d908      	bls.n	801b5a2 <_free_r+0x42>
 801b590:	6820      	ldr	r0, [r4, #0]
 801b592:	1821      	adds	r1, r4, r0
 801b594:	428b      	cmp	r3, r1
 801b596:	bf01      	itttt	eq
 801b598:	6819      	ldreq	r1, [r3, #0]
 801b59a:	685b      	ldreq	r3, [r3, #4]
 801b59c:	1809      	addeq	r1, r1, r0
 801b59e:	6021      	streq	r1, [r4, #0]
 801b5a0:	e7ed      	b.n	801b57e <_free_r+0x1e>
 801b5a2:	461a      	mov	r2, r3
 801b5a4:	685b      	ldr	r3, [r3, #4]
 801b5a6:	b10b      	cbz	r3, 801b5ac <_free_r+0x4c>
 801b5a8:	42a3      	cmp	r3, r4
 801b5aa:	d9fa      	bls.n	801b5a2 <_free_r+0x42>
 801b5ac:	6811      	ldr	r1, [r2, #0]
 801b5ae:	1850      	adds	r0, r2, r1
 801b5b0:	42a0      	cmp	r0, r4
 801b5b2:	d10b      	bne.n	801b5cc <_free_r+0x6c>
 801b5b4:	6820      	ldr	r0, [r4, #0]
 801b5b6:	4401      	add	r1, r0
 801b5b8:	1850      	adds	r0, r2, r1
 801b5ba:	4283      	cmp	r3, r0
 801b5bc:	6011      	str	r1, [r2, #0]
 801b5be:	d1e0      	bne.n	801b582 <_free_r+0x22>
 801b5c0:	6818      	ldr	r0, [r3, #0]
 801b5c2:	685b      	ldr	r3, [r3, #4]
 801b5c4:	6053      	str	r3, [r2, #4]
 801b5c6:	4408      	add	r0, r1
 801b5c8:	6010      	str	r0, [r2, #0]
 801b5ca:	e7da      	b.n	801b582 <_free_r+0x22>
 801b5cc:	d902      	bls.n	801b5d4 <_free_r+0x74>
 801b5ce:	230c      	movs	r3, #12
 801b5d0:	602b      	str	r3, [r5, #0]
 801b5d2:	e7d6      	b.n	801b582 <_free_r+0x22>
 801b5d4:	6820      	ldr	r0, [r4, #0]
 801b5d6:	1821      	adds	r1, r4, r0
 801b5d8:	428b      	cmp	r3, r1
 801b5da:	bf04      	itt	eq
 801b5dc:	6819      	ldreq	r1, [r3, #0]
 801b5de:	685b      	ldreq	r3, [r3, #4]
 801b5e0:	6063      	str	r3, [r4, #4]
 801b5e2:	bf04      	itt	eq
 801b5e4:	1809      	addeq	r1, r1, r0
 801b5e6:	6021      	streq	r1, [r4, #0]
 801b5e8:	6054      	str	r4, [r2, #4]
 801b5ea:	e7ca      	b.n	801b582 <_free_r+0x22>
 801b5ec:	bd38      	pop	{r3, r4, r5, pc}
 801b5ee:	bf00      	nop
 801b5f0:	24014e6c 	.word	0x24014e6c

0801b5f4 <malloc>:
 801b5f4:	4b02      	ldr	r3, [pc, #8]	@ (801b600 <malloc+0xc>)
 801b5f6:	4601      	mov	r1, r0
 801b5f8:	6818      	ldr	r0, [r3, #0]
 801b5fa:	f000 b825 	b.w	801b648 <_malloc_r>
 801b5fe:	bf00      	nop
 801b600:	240049fc 	.word	0x240049fc

0801b604 <sbrk_aligned>:
 801b604:	b570      	push	{r4, r5, r6, lr}
 801b606:	4e0f      	ldr	r6, [pc, #60]	@ (801b644 <sbrk_aligned+0x40>)
 801b608:	460c      	mov	r4, r1
 801b60a:	6831      	ldr	r1, [r6, #0]
 801b60c:	4605      	mov	r5, r0
 801b60e:	b911      	cbnz	r1, 801b616 <sbrk_aligned+0x12>
 801b610:	f000 fcc6 	bl	801bfa0 <_sbrk_r>
 801b614:	6030      	str	r0, [r6, #0]
 801b616:	4621      	mov	r1, r4
 801b618:	4628      	mov	r0, r5
 801b61a:	f000 fcc1 	bl	801bfa0 <_sbrk_r>
 801b61e:	1c43      	adds	r3, r0, #1
 801b620:	d103      	bne.n	801b62a <sbrk_aligned+0x26>
 801b622:	f04f 34ff 	mov.w	r4, #4294967295
 801b626:	4620      	mov	r0, r4
 801b628:	bd70      	pop	{r4, r5, r6, pc}
 801b62a:	1cc4      	adds	r4, r0, #3
 801b62c:	f024 0403 	bic.w	r4, r4, #3
 801b630:	42a0      	cmp	r0, r4
 801b632:	d0f8      	beq.n	801b626 <sbrk_aligned+0x22>
 801b634:	1a21      	subs	r1, r4, r0
 801b636:	4628      	mov	r0, r5
 801b638:	f000 fcb2 	bl	801bfa0 <_sbrk_r>
 801b63c:	3001      	adds	r0, #1
 801b63e:	d1f2      	bne.n	801b626 <sbrk_aligned+0x22>
 801b640:	e7ef      	b.n	801b622 <sbrk_aligned+0x1e>
 801b642:	bf00      	nop
 801b644:	24014e68 	.word	0x24014e68

0801b648 <_malloc_r>:
 801b648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b64c:	1ccd      	adds	r5, r1, #3
 801b64e:	f025 0503 	bic.w	r5, r5, #3
 801b652:	3508      	adds	r5, #8
 801b654:	2d0c      	cmp	r5, #12
 801b656:	bf38      	it	cc
 801b658:	250c      	movcc	r5, #12
 801b65a:	2d00      	cmp	r5, #0
 801b65c:	4606      	mov	r6, r0
 801b65e:	db01      	blt.n	801b664 <_malloc_r+0x1c>
 801b660:	42a9      	cmp	r1, r5
 801b662:	d904      	bls.n	801b66e <_malloc_r+0x26>
 801b664:	230c      	movs	r3, #12
 801b666:	6033      	str	r3, [r6, #0]
 801b668:	2000      	movs	r0, #0
 801b66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b66e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b744 <_malloc_r+0xfc>
 801b672:	f000 f869 	bl	801b748 <__malloc_lock>
 801b676:	f8d8 3000 	ldr.w	r3, [r8]
 801b67a:	461c      	mov	r4, r3
 801b67c:	bb44      	cbnz	r4, 801b6d0 <_malloc_r+0x88>
 801b67e:	4629      	mov	r1, r5
 801b680:	4630      	mov	r0, r6
 801b682:	f7ff ffbf 	bl	801b604 <sbrk_aligned>
 801b686:	1c43      	adds	r3, r0, #1
 801b688:	4604      	mov	r4, r0
 801b68a:	d158      	bne.n	801b73e <_malloc_r+0xf6>
 801b68c:	f8d8 4000 	ldr.w	r4, [r8]
 801b690:	4627      	mov	r7, r4
 801b692:	2f00      	cmp	r7, #0
 801b694:	d143      	bne.n	801b71e <_malloc_r+0xd6>
 801b696:	2c00      	cmp	r4, #0
 801b698:	d04b      	beq.n	801b732 <_malloc_r+0xea>
 801b69a:	6823      	ldr	r3, [r4, #0]
 801b69c:	4639      	mov	r1, r7
 801b69e:	4630      	mov	r0, r6
 801b6a0:	eb04 0903 	add.w	r9, r4, r3
 801b6a4:	f000 fc7c 	bl	801bfa0 <_sbrk_r>
 801b6a8:	4581      	cmp	r9, r0
 801b6aa:	d142      	bne.n	801b732 <_malloc_r+0xea>
 801b6ac:	6821      	ldr	r1, [r4, #0]
 801b6ae:	1a6d      	subs	r5, r5, r1
 801b6b0:	4629      	mov	r1, r5
 801b6b2:	4630      	mov	r0, r6
 801b6b4:	f7ff ffa6 	bl	801b604 <sbrk_aligned>
 801b6b8:	3001      	adds	r0, #1
 801b6ba:	d03a      	beq.n	801b732 <_malloc_r+0xea>
 801b6bc:	6823      	ldr	r3, [r4, #0]
 801b6be:	442b      	add	r3, r5
 801b6c0:	6023      	str	r3, [r4, #0]
 801b6c2:	f8d8 3000 	ldr.w	r3, [r8]
 801b6c6:	685a      	ldr	r2, [r3, #4]
 801b6c8:	bb62      	cbnz	r2, 801b724 <_malloc_r+0xdc>
 801b6ca:	f8c8 7000 	str.w	r7, [r8]
 801b6ce:	e00f      	b.n	801b6f0 <_malloc_r+0xa8>
 801b6d0:	6822      	ldr	r2, [r4, #0]
 801b6d2:	1b52      	subs	r2, r2, r5
 801b6d4:	d420      	bmi.n	801b718 <_malloc_r+0xd0>
 801b6d6:	2a0b      	cmp	r2, #11
 801b6d8:	d917      	bls.n	801b70a <_malloc_r+0xc2>
 801b6da:	1961      	adds	r1, r4, r5
 801b6dc:	42a3      	cmp	r3, r4
 801b6de:	6025      	str	r5, [r4, #0]
 801b6e0:	bf18      	it	ne
 801b6e2:	6059      	strne	r1, [r3, #4]
 801b6e4:	6863      	ldr	r3, [r4, #4]
 801b6e6:	bf08      	it	eq
 801b6e8:	f8c8 1000 	streq.w	r1, [r8]
 801b6ec:	5162      	str	r2, [r4, r5]
 801b6ee:	604b      	str	r3, [r1, #4]
 801b6f0:	4630      	mov	r0, r6
 801b6f2:	f000 f82f 	bl	801b754 <__malloc_unlock>
 801b6f6:	f104 000b 	add.w	r0, r4, #11
 801b6fa:	1d23      	adds	r3, r4, #4
 801b6fc:	f020 0007 	bic.w	r0, r0, #7
 801b700:	1ac2      	subs	r2, r0, r3
 801b702:	bf1c      	itt	ne
 801b704:	1a1b      	subne	r3, r3, r0
 801b706:	50a3      	strne	r3, [r4, r2]
 801b708:	e7af      	b.n	801b66a <_malloc_r+0x22>
 801b70a:	6862      	ldr	r2, [r4, #4]
 801b70c:	42a3      	cmp	r3, r4
 801b70e:	bf0c      	ite	eq
 801b710:	f8c8 2000 	streq.w	r2, [r8]
 801b714:	605a      	strne	r2, [r3, #4]
 801b716:	e7eb      	b.n	801b6f0 <_malloc_r+0xa8>
 801b718:	4623      	mov	r3, r4
 801b71a:	6864      	ldr	r4, [r4, #4]
 801b71c:	e7ae      	b.n	801b67c <_malloc_r+0x34>
 801b71e:	463c      	mov	r4, r7
 801b720:	687f      	ldr	r7, [r7, #4]
 801b722:	e7b6      	b.n	801b692 <_malloc_r+0x4a>
 801b724:	461a      	mov	r2, r3
 801b726:	685b      	ldr	r3, [r3, #4]
 801b728:	42a3      	cmp	r3, r4
 801b72a:	d1fb      	bne.n	801b724 <_malloc_r+0xdc>
 801b72c:	2300      	movs	r3, #0
 801b72e:	6053      	str	r3, [r2, #4]
 801b730:	e7de      	b.n	801b6f0 <_malloc_r+0xa8>
 801b732:	230c      	movs	r3, #12
 801b734:	6033      	str	r3, [r6, #0]
 801b736:	4630      	mov	r0, r6
 801b738:	f000 f80c 	bl	801b754 <__malloc_unlock>
 801b73c:	e794      	b.n	801b668 <_malloc_r+0x20>
 801b73e:	6005      	str	r5, [r0, #0]
 801b740:	e7d6      	b.n	801b6f0 <_malloc_r+0xa8>
 801b742:	bf00      	nop
 801b744:	24014e6c 	.word	0x24014e6c

0801b748 <__malloc_lock>:
 801b748:	4801      	ldr	r0, [pc, #4]	@ (801b750 <__malloc_lock+0x8>)
 801b74a:	f7ff beda 	b.w	801b502 <__retarget_lock_acquire_recursive>
 801b74e:	bf00      	nop
 801b750:	24014e64 	.word	0x24014e64

0801b754 <__malloc_unlock>:
 801b754:	4801      	ldr	r0, [pc, #4]	@ (801b75c <__malloc_unlock+0x8>)
 801b756:	f7ff bed5 	b.w	801b504 <__retarget_lock_release_recursive>
 801b75a:	bf00      	nop
 801b75c:	24014e64 	.word	0x24014e64

0801b760 <__sfputc_r>:
 801b760:	6893      	ldr	r3, [r2, #8]
 801b762:	3b01      	subs	r3, #1
 801b764:	2b00      	cmp	r3, #0
 801b766:	b410      	push	{r4}
 801b768:	6093      	str	r3, [r2, #8]
 801b76a:	da08      	bge.n	801b77e <__sfputc_r+0x1e>
 801b76c:	6994      	ldr	r4, [r2, #24]
 801b76e:	42a3      	cmp	r3, r4
 801b770:	db01      	blt.n	801b776 <__sfputc_r+0x16>
 801b772:	290a      	cmp	r1, #10
 801b774:	d103      	bne.n	801b77e <__sfputc_r+0x1e>
 801b776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b77a:	f000 bb7d 	b.w	801be78 <__swbuf_r>
 801b77e:	6813      	ldr	r3, [r2, #0]
 801b780:	1c58      	adds	r0, r3, #1
 801b782:	6010      	str	r0, [r2, #0]
 801b784:	7019      	strb	r1, [r3, #0]
 801b786:	4608      	mov	r0, r1
 801b788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b78c:	4770      	bx	lr

0801b78e <__sfputs_r>:
 801b78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b790:	4606      	mov	r6, r0
 801b792:	460f      	mov	r7, r1
 801b794:	4614      	mov	r4, r2
 801b796:	18d5      	adds	r5, r2, r3
 801b798:	42ac      	cmp	r4, r5
 801b79a:	d101      	bne.n	801b7a0 <__sfputs_r+0x12>
 801b79c:	2000      	movs	r0, #0
 801b79e:	e007      	b.n	801b7b0 <__sfputs_r+0x22>
 801b7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7a4:	463a      	mov	r2, r7
 801b7a6:	4630      	mov	r0, r6
 801b7a8:	f7ff ffda 	bl	801b760 <__sfputc_r>
 801b7ac:	1c43      	adds	r3, r0, #1
 801b7ae:	d1f3      	bne.n	801b798 <__sfputs_r+0xa>
 801b7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b7b4 <_vfiprintf_r>:
 801b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b8:	460d      	mov	r5, r1
 801b7ba:	b09d      	sub	sp, #116	@ 0x74
 801b7bc:	4614      	mov	r4, r2
 801b7be:	4698      	mov	r8, r3
 801b7c0:	4606      	mov	r6, r0
 801b7c2:	b118      	cbz	r0, 801b7cc <_vfiprintf_r+0x18>
 801b7c4:	6a03      	ldr	r3, [r0, #32]
 801b7c6:	b90b      	cbnz	r3, 801b7cc <_vfiprintf_r+0x18>
 801b7c8:	f7ff fd2e 	bl	801b228 <__sinit>
 801b7cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b7ce:	07d9      	lsls	r1, r3, #31
 801b7d0:	d405      	bmi.n	801b7de <_vfiprintf_r+0x2a>
 801b7d2:	89ab      	ldrh	r3, [r5, #12]
 801b7d4:	059a      	lsls	r2, r3, #22
 801b7d6:	d402      	bmi.n	801b7de <_vfiprintf_r+0x2a>
 801b7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b7da:	f7ff fe92 	bl	801b502 <__retarget_lock_acquire_recursive>
 801b7de:	89ab      	ldrh	r3, [r5, #12]
 801b7e0:	071b      	lsls	r3, r3, #28
 801b7e2:	d501      	bpl.n	801b7e8 <_vfiprintf_r+0x34>
 801b7e4:	692b      	ldr	r3, [r5, #16]
 801b7e6:	b99b      	cbnz	r3, 801b810 <_vfiprintf_r+0x5c>
 801b7e8:	4629      	mov	r1, r5
 801b7ea:	4630      	mov	r0, r6
 801b7ec:	f000 fb82 	bl	801bef4 <__swsetup_r>
 801b7f0:	b170      	cbz	r0, 801b810 <_vfiprintf_r+0x5c>
 801b7f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b7f4:	07dc      	lsls	r4, r3, #31
 801b7f6:	d504      	bpl.n	801b802 <_vfiprintf_r+0x4e>
 801b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b7fc:	b01d      	add	sp, #116	@ 0x74
 801b7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b802:	89ab      	ldrh	r3, [r5, #12]
 801b804:	0598      	lsls	r0, r3, #22
 801b806:	d4f7      	bmi.n	801b7f8 <_vfiprintf_r+0x44>
 801b808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b80a:	f7ff fe7b 	bl	801b504 <__retarget_lock_release_recursive>
 801b80e:	e7f3      	b.n	801b7f8 <_vfiprintf_r+0x44>
 801b810:	2300      	movs	r3, #0
 801b812:	9309      	str	r3, [sp, #36]	@ 0x24
 801b814:	2320      	movs	r3, #32
 801b816:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b81a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b81e:	2330      	movs	r3, #48	@ 0x30
 801b820:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b9d0 <_vfiprintf_r+0x21c>
 801b824:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b828:	f04f 0901 	mov.w	r9, #1
 801b82c:	4623      	mov	r3, r4
 801b82e:	469a      	mov	sl, r3
 801b830:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b834:	b10a      	cbz	r2, 801b83a <_vfiprintf_r+0x86>
 801b836:	2a25      	cmp	r2, #37	@ 0x25
 801b838:	d1f9      	bne.n	801b82e <_vfiprintf_r+0x7a>
 801b83a:	ebba 0b04 	subs.w	fp, sl, r4
 801b83e:	d00b      	beq.n	801b858 <_vfiprintf_r+0xa4>
 801b840:	465b      	mov	r3, fp
 801b842:	4622      	mov	r2, r4
 801b844:	4629      	mov	r1, r5
 801b846:	4630      	mov	r0, r6
 801b848:	f7ff ffa1 	bl	801b78e <__sfputs_r>
 801b84c:	3001      	adds	r0, #1
 801b84e:	f000 80a7 	beq.w	801b9a0 <_vfiprintf_r+0x1ec>
 801b852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b854:	445a      	add	r2, fp
 801b856:	9209      	str	r2, [sp, #36]	@ 0x24
 801b858:	f89a 3000 	ldrb.w	r3, [sl]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	f000 809f 	beq.w	801b9a0 <_vfiprintf_r+0x1ec>
 801b862:	2300      	movs	r3, #0
 801b864:	f04f 32ff 	mov.w	r2, #4294967295
 801b868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b86c:	f10a 0a01 	add.w	sl, sl, #1
 801b870:	9304      	str	r3, [sp, #16]
 801b872:	9307      	str	r3, [sp, #28]
 801b874:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b878:	931a      	str	r3, [sp, #104]	@ 0x68
 801b87a:	4654      	mov	r4, sl
 801b87c:	2205      	movs	r2, #5
 801b87e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b882:	4853      	ldr	r0, [pc, #332]	@ (801b9d0 <_vfiprintf_r+0x21c>)
 801b884:	f7e4 fd44 	bl	8000310 <memchr>
 801b888:	9a04      	ldr	r2, [sp, #16]
 801b88a:	b9d8      	cbnz	r0, 801b8c4 <_vfiprintf_r+0x110>
 801b88c:	06d1      	lsls	r1, r2, #27
 801b88e:	bf44      	itt	mi
 801b890:	2320      	movmi	r3, #32
 801b892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b896:	0713      	lsls	r3, r2, #28
 801b898:	bf44      	itt	mi
 801b89a:	232b      	movmi	r3, #43	@ 0x2b
 801b89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b8a0:	f89a 3000 	ldrb.w	r3, [sl]
 801b8a4:	2b2a      	cmp	r3, #42	@ 0x2a
 801b8a6:	d015      	beq.n	801b8d4 <_vfiprintf_r+0x120>
 801b8a8:	9a07      	ldr	r2, [sp, #28]
 801b8aa:	4654      	mov	r4, sl
 801b8ac:	2000      	movs	r0, #0
 801b8ae:	f04f 0c0a 	mov.w	ip, #10
 801b8b2:	4621      	mov	r1, r4
 801b8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b8b8:	3b30      	subs	r3, #48	@ 0x30
 801b8ba:	2b09      	cmp	r3, #9
 801b8bc:	d94b      	bls.n	801b956 <_vfiprintf_r+0x1a2>
 801b8be:	b1b0      	cbz	r0, 801b8ee <_vfiprintf_r+0x13a>
 801b8c0:	9207      	str	r2, [sp, #28]
 801b8c2:	e014      	b.n	801b8ee <_vfiprintf_r+0x13a>
 801b8c4:	eba0 0308 	sub.w	r3, r0, r8
 801b8c8:	fa09 f303 	lsl.w	r3, r9, r3
 801b8cc:	4313      	orrs	r3, r2
 801b8ce:	9304      	str	r3, [sp, #16]
 801b8d0:	46a2      	mov	sl, r4
 801b8d2:	e7d2      	b.n	801b87a <_vfiprintf_r+0xc6>
 801b8d4:	9b03      	ldr	r3, [sp, #12]
 801b8d6:	1d19      	adds	r1, r3, #4
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	9103      	str	r1, [sp, #12]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	bfbb      	ittet	lt
 801b8e0:	425b      	neglt	r3, r3
 801b8e2:	f042 0202 	orrlt.w	r2, r2, #2
 801b8e6:	9307      	strge	r3, [sp, #28]
 801b8e8:	9307      	strlt	r3, [sp, #28]
 801b8ea:	bfb8      	it	lt
 801b8ec:	9204      	strlt	r2, [sp, #16]
 801b8ee:	7823      	ldrb	r3, [r4, #0]
 801b8f0:	2b2e      	cmp	r3, #46	@ 0x2e
 801b8f2:	d10a      	bne.n	801b90a <_vfiprintf_r+0x156>
 801b8f4:	7863      	ldrb	r3, [r4, #1]
 801b8f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801b8f8:	d132      	bne.n	801b960 <_vfiprintf_r+0x1ac>
 801b8fa:	9b03      	ldr	r3, [sp, #12]
 801b8fc:	1d1a      	adds	r2, r3, #4
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	9203      	str	r2, [sp, #12]
 801b902:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b906:	3402      	adds	r4, #2
 801b908:	9305      	str	r3, [sp, #20]
 801b90a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b9e0 <_vfiprintf_r+0x22c>
 801b90e:	7821      	ldrb	r1, [r4, #0]
 801b910:	2203      	movs	r2, #3
 801b912:	4650      	mov	r0, sl
 801b914:	f7e4 fcfc 	bl	8000310 <memchr>
 801b918:	b138      	cbz	r0, 801b92a <_vfiprintf_r+0x176>
 801b91a:	9b04      	ldr	r3, [sp, #16]
 801b91c:	eba0 000a 	sub.w	r0, r0, sl
 801b920:	2240      	movs	r2, #64	@ 0x40
 801b922:	4082      	lsls	r2, r0
 801b924:	4313      	orrs	r3, r2
 801b926:	3401      	adds	r4, #1
 801b928:	9304      	str	r3, [sp, #16]
 801b92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b92e:	4829      	ldr	r0, [pc, #164]	@ (801b9d4 <_vfiprintf_r+0x220>)
 801b930:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b934:	2206      	movs	r2, #6
 801b936:	f7e4 fceb 	bl	8000310 <memchr>
 801b93a:	2800      	cmp	r0, #0
 801b93c:	d03f      	beq.n	801b9be <_vfiprintf_r+0x20a>
 801b93e:	4b26      	ldr	r3, [pc, #152]	@ (801b9d8 <_vfiprintf_r+0x224>)
 801b940:	bb1b      	cbnz	r3, 801b98a <_vfiprintf_r+0x1d6>
 801b942:	9b03      	ldr	r3, [sp, #12]
 801b944:	3307      	adds	r3, #7
 801b946:	f023 0307 	bic.w	r3, r3, #7
 801b94a:	3308      	adds	r3, #8
 801b94c:	9303      	str	r3, [sp, #12]
 801b94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b950:	443b      	add	r3, r7
 801b952:	9309      	str	r3, [sp, #36]	@ 0x24
 801b954:	e76a      	b.n	801b82c <_vfiprintf_r+0x78>
 801b956:	fb0c 3202 	mla	r2, ip, r2, r3
 801b95a:	460c      	mov	r4, r1
 801b95c:	2001      	movs	r0, #1
 801b95e:	e7a8      	b.n	801b8b2 <_vfiprintf_r+0xfe>
 801b960:	2300      	movs	r3, #0
 801b962:	3401      	adds	r4, #1
 801b964:	9305      	str	r3, [sp, #20]
 801b966:	4619      	mov	r1, r3
 801b968:	f04f 0c0a 	mov.w	ip, #10
 801b96c:	4620      	mov	r0, r4
 801b96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b972:	3a30      	subs	r2, #48	@ 0x30
 801b974:	2a09      	cmp	r2, #9
 801b976:	d903      	bls.n	801b980 <_vfiprintf_r+0x1cc>
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d0c6      	beq.n	801b90a <_vfiprintf_r+0x156>
 801b97c:	9105      	str	r1, [sp, #20]
 801b97e:	e7c4      	b.n	801b90a <_vfiprintf_r+0x156>
 801b980:	fb0c 2101 	mla	r1, ip, r1, r2
 801b984:	4604      	mov	r4, r0
 801b986:	2301      	movs	r3, #1
 801b988:	e7f0      	b.n	801b96c <_vfiprintf_r+0x1b8>
 801b98a:	ab03      	add	r3, sp, #12
 801b98c:	9300      	str	r3, [sp, #0]
 801b98e:	462a      	mov	r2, r5
 801b990:	4b12      	ldr	r3, [pc, #72]	@ (801b9dc <_vfiprintf_r+0x228>)
 801b992:	a904      	add	r1, sp, #16
 801b994:	4630      	mov	r0, r6
 801b996:	f3af 8000 	nop.w
 801b99a:	4607      	mov	r7, r0
 801b99c:	1c78      	adds	r0, r7, #1
 801b99e:	d1d6      	bne.n	801b94e <_vfiprintf_r+0x19a>
 801b9a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b9a2:	07d9      	lsls	r1, r3, #31
 801b9a4:	d405      	bmi.n	801b9b2 <_vfiprintf_r+0x1fe>
 801b9a6:	89ab      	ldrh	r3, [r5, #12]
 801b9a8:	059a      	lsls	r2, r3, #22
 801b9aa:	d402      	bmi.n	801b9b2 <_vfiprintf_r+0x1fe>
 801b9ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b9ae:	f7ff fda9 	bl	801b504 <__retarget_lock_release_recursive>
 801b9b2:	89ab      	ldrh	r3, [r5, #12]
 801b9b4:	065b      	lsls	r3, r3, #25
 801b9b6:	f53f af1f 	bmi.w	801b7f8 <_vfiprintf_r+0x44>
 801b9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b9bc:	e71e      	b.n	801b7fc <_vfiprintf_r+0x48>
 801b9be:	ab03      	add	r3, sp, #12
 801b9c0:	9300      	str	r3, [sp, #0]
 801b9c2:	462a      	mov	r2, r5
 801b9c4:	4b05      	ldr	r3, [pc, #20]	@ (801b9dc <_vfiprintf_r+0x228>)
 801b9c6:	a904      	add	r1, sp, #16
 801b9c8:	4630      	mov	r0, r6
 801b9ca:	f000 f879 	bl	801bac0 <_printf_i>
 801b9ce:	e7e4      	b.n	801b99a <_vfiprintf_r+0x1e6>
 801b9d0:	0801efad 	.word	0x0801efad
 801b9d4:	0801efb7 	.word	0x0801efb7
 801b9d8:	00000000 	.word	0x00000000
 801b9dc:	0801b78f 	.word	0x0801b78f
 801b9e0:	0801efb3 	.word	0x0801efb3

0801b9e4 <_printf_common>:
 801b9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9e8:	4616      	mov	r6, r2
 801b9ea:	4698      	mov	r8, r3
 801b9ec:	688a      	ldr	r2, [r1, #8]
 801b9ee:	690b      	ldr	r3, [r1, #16]
 801b9f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b9f4:	4293      	cmp	r3, r2
 801b9f6:	bfb8      	it	lt
 801b9f8:	4613      	movlt	r3, r2
 801b9fa:	6033      	str	r3, [r6, #0]
 801b9fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ba00:	4607      	mov	r7, r0
 801ba02:	460c      	mov	r4, r1
 801ba04:	b10a      	cbz	r2, 801ba0a <_printf_common+0x26>
 801ba06:	3301      	adds	r3, #1
 801ba08:	6033      	str	r3, [r6, #0]
 801ba0a:	6823      	ldr	r3, [r4, #0]
 801ba0c:	0699      	lsls	r1, r3, #26
 801ba0e:	bf42      	ittt	mi
 801ba10:	6833      	ldrmi	r3, [r6, #0]
 801ba12:	3302      	addmi	r3, #2
 801ba14:	6033      	strmi	r3, [r6, #0]
 801ba16:	6825      	ldr	r5, [r4, #0]
 801ba18:	f015 0506 	ands.w	r5, r5, #6
 801ba1c:	d106      	bne.n	801ba2c <_printf_common+0x48>
 801ba1e:	f104 0a19 	add.w	sl, r4, #25
 801ba22:	68e3      	ldr	r3, [r4, #12]
 801ba24:	6832      	ldr	r2, [r6, #0]
 801ba26:	1a9b      	subs	r3, r3, r2
 801ba28:	42ab      	cmp	r3, r5
 801ba2a:	dc26      	bgt.n	801ba7a <_printf_common+0x96>
 801ba2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ba30:	6822      	ldr	r2, [r4, #0]
 801ba32:	3b00      	subs	r3, #0
 801ba34:	bf18      	it	ne
 801ba36:	2301      	movne	r3, #1
 801ba38:	0692      	lsls	r2, r2, #26
 801ba3a:	d42b      	bmi.n	801ba94 <_printf_common+0xb0>
 801ba3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ba40:	4641      	mov	r1, r8
 801ba42:	4638      	mov	r0, r7
 801ba44:	47c8      	blx	r9
 801ba46:	3001      	adds	r0, #1
 801ba48:	d01e      	beq.n	801ba88 <_printf_common+0xa4>
 801ba4a:	6823      	ldr	r3, [r4, #0]
 801ba4c:	6922      	ldr	r2, [r4, #16]
 801ba4e:	f003 0306 	and.w	r3, r3, #6
 801ba52:	2b04      	cmp	r3, #4
 801ba54:	bf02      	ittt	eq
 801ba56:	68e5      	ldreq	r5, [r4, #12]
 801ba58:	6833      	ldreq	r3, [r6, #0]
 801ba5a:	1aed      	subeq	r5, r5, r3
 801ba5c:	68a3      	ldr	r3, [r4, #8]
 801ba5e:	bf0c      	ite	eq
 801ba60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ba64:	2500      	movne	r5, #0
 801ba66:	4293      	cmp	r3, r2
 801ba68:	bfc4      	itt	gt
 801ba6a:	1a9b      	subgt	r3, r3, r2
 801ba6c:	18ed      	addgt	r5, r5, r3
 801ba6e:	2600      	movs	r6, #0
 801ba70:	341a      	adds	r4, #26
 801ba72:	42b5      	cmp	r5, r6
 801ba74:	d11a      	bne.n	801baac <_printf_common+0xc8>
 801ba76:	2000      	movs	r0, #0
 801ba78:	e008      	b.n	801ba8c <_printf_common+0xa8>
 801ba7a:	2301      	movs	r3, #1
 801ba7c:	4652      	mov	r2, sl
 801ba7e:	4641      	mov	r1, r8
 801ba80:	4638      	mov	r0, r7
 801ba82:	47c8      	blx	r9
 801ba84:	3001      	adds	r0, #1
 801ba86:	d103      	bne.n	801ba90 <_printf_common+0xac>
 801ba88:	f04f 30ff 	mov.w	r0, #4294967295
 801ba8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba90:	3501      	adds	r5, #1
 801ba92:	e7c6      	b.n	801ba22 <_printf_common+0x3e>
 801ba94:	18e1      	adds	r1, r4, r3
 801ba96:	1c5a      	adds	r2, r3, #1
 801ba98:	2030      	movs	r0, #48	@ 0x30
 801ba9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ba9e:	4422      	add	r2, r4
 801baa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801baa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801baa8:	3302      	adds	r3, #2
 801baaa:	e7c7      	b.n	801ba3c <_printf_common+0x58>
 801baac:	2301      	movs	r3, #1
 801baae:	4622      	mov	r2, r4
 801bab0:	4641      	mov	r1, r8
 801bab2:	4638      	mov	r0, r7
 801bab4:	47c8      	blx	r9
 801bab6:	3001      	adds	r0, #1
 801bab8:	d0e6      	beq.n	801ba88 <_printf_common+0xa4>
 801baba:	3601      	adds	r6, #1
 801babc:	e7d9      	b.n	801ba72 <_printf_common+0x8e>
	...

0801bac0 <_printf_i>:
 801bac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bac4:	7e0f      	ldrb	r7, [r1, #24]
 801bac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bac8:	2f78      	cmp	r7, #120	@ 0x78
 801baca:	4691      	mov	r9, r2
 801bacc:	4680      	mov	r8, r0
 801bace:	460c      	mov	r4, r1
 801bad0:	469a      	mov	sl, r3
 801bad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bad6:	d807      	bhi.n	801bae8 <_printf_i+0x28>
 801bad8:	2f62      	cmp	r7, #98	@ 0x62
 801bada:	d80a      	bhi.n	801baf2 <_printf_i+0x32>
 801badc:	2f00      	cmp	r7, #0
 801bade:	f000 80d1 	beq.w	801bc84 <_printf_i+0x1c4>
 801bae2:	2f58      	cmp	r7, #88	@ 0x58
 801bae4:	f000 80b8 	beq.w	801bc58 <_printf_i+0x198>
 801bae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801baec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801baf0:	e03a      	b.n	801bb68 <_printf_i+0xa8>
 801baf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801baf6:	2b15      	cmp	r3, #21
 801baf8:	d8f6      	bhi.n	801bae8 <_printf_i+0x28>
 801bafa:	a101      	add	r1, pc, #4	@ (adr r1, 801bb00 <_printf_i+0x40>)
 801bafc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bb00:	0801bb59 	.word	0x0801bb59
 801bb04:	0801bb6d 	.word	0x0801bb6d
 801bb08:	0801bae9 	.word	0x0801bae9
 801bb0c:	0801bae9 	.word	0x0801bae9
 801bb10:	0801bae9 	.word	0x0801bae9
 801bb14:	0801bae9 	.word	0x0801bae9
 801bb18:	0801bb6d 	.word	0x0801bb6d
 801bb1c:	0801bae9 	.word	0x0801bae9
 801bb20:	0801bae9 	.word	0x0801bae9
 801bb24:	0801bae9 	.word	0x0801bae9
 801bb28:	0801bae9 	.word	0x0801bae9
 801bb2c:	0801bc6b 	.word	0x0801bc6b
 801bb30:	0801bb97 	.word	0x0801bb97
 801bb34:	0801bc25 	.word	0x0801bc25
 801bb38:	0801bae9 	.word	0x0801bae9
 801bb3c:	0801bae9 	.word	0x0801bae9
 801bb40:	0801bc8d 	.word	0x0801bc8d
 801bb44:	0801bae9 	.word	0x0801bae9
 801bb48:	0801bb97 	.word	0x0801bb97
 801bb4c:	0801bae9 	.word	0x0801bae9
 801bb50:	0801bae9 	.word	0x0801bae9
 801bb54:	0801bc2d 	.word	0x0801bc2d
 801bb58:	6833      	ldr	r3, [r6, #0]
 801bb5a:	1d1a      	adds	r2, r3, #4
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	6032      	str	r2, [r6, #0]
 801bb60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bb64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bb68:	2301      	movs	r3, #1
 801bb6a:	e09c      	b.n	801bca6 <_printf_i+0x1e6>
 801bb6c:	6833      	ldr	r3, [r6, #0]
 801bb6e:	6820      	ldr	r0, [r4, #0]
 801bb70:	1d19      	adds	r1, r3, #4
 801bb72:	6031      	str	r1, [r6, #0]
 801bb74:	0606      	lsls	r6, r0, #24
 801bb76:	d501      	bpl.n	801bb7c <_printf_i+0xbc>
 801bb78:	681d      	ldr	r5, [r3, #0]
 801bb7a:	e003      	b.n	801bb84 <_printf_i+0xc4>
 801bb7c:	0645      	lsls	r5, r0, #25
 801bb7e:	d5fb      	bpl.n	801bb78 <_printf_i+0xb8>
 801bb80:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bb84:	2d00      	cmp	r5, #0
 801bb86:	da03      	bge.n	801bb90 <_printf_i+0xd0>
 801bb88:	232d      	movs	r3, #45	@ 0x2d
 801bb8a:	426d      	negs	r5, r5
 801bb8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bb90:	4858      	ldr	r0, [pc, #352]	@ (801bcf4 <_printf_i+0x234>)
 801bb92:	230a      	movs	r3, #10
 801bb94:	e011      	b.n	801bbba <_printf_i+0xfa>
 801bb96:	6821      	ldr	r1, [r4, #0]
 801bb98:	6833      	ldr	r3, [r6, #0]
 801bb9a:	0608      	lsls	r0, r1, #24
 801bb9c:	f853 5b04 	ldr.w	r5, [r3], #4
 801bba0:	d402      	bmi.n	801bba8 <_printf_i+0xe8>
 801bba2:	0649      	lsls	r1, r1, #25
 801bba4:	bf48      	it	mi
 801bba6:	b2ad      	uxthmi	r5, r5
 801bba8:	2f6f      	cmp	r7, #111	@ 0x6f
 801bbaa:	4852      	ldr	r0, [pc, #328]	@ (801bcf4 <_printf_i+0x234>)
 801bbac:	6033      	str	r3, [r6, #0]
 801bbae:	bf14      	ite	ne
 801bbb0:	230a      	movne	r3, #10
 801bbb2:	2308      	moveq	r3, #8
 801bbb4:	2100      	movs	r1, #0
 801bbb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bbba:	6866      	ldr	r6, [r4, #4]
 801bbbc:	60a6      	str	r6, [r4, #8]
 801bbbe:	2e00      	cmp	r6, #0
 801bbc0:	db05      	blt.n	801bbce <_printf_i+0x10e>
 801bbc2:	6821      	ldr	r1, [r4, #0]
 801bbc4:	432e      	orrs	r6, r5
 801bbc6:	f021 0104 	bic.w	r1, r1, #4
 801bbca:	6021      	str	r1, [r4, #0]
 801bbcc:	d04b      	beq.n	801bc66 <_printf_i+0x1a6>
 801bbce:	4616      	mov	r6, r2
 801bbd0:	fbb5 f1f3 	udiv	r1, r5, r3
 801bbd4:	fb03 5711 	mls	r7, r3, r1, r5
 801bbd8:	5dc7      	ldrb	r7, [r0, r7]
 801bbda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bbde:	462f      	mov	r7, r5
 801bbe0:	42bb      	cmp	r3, r7
 801bbe2:	460d      	mov	r5, r1
 801bbe4:	d9f4      	bls.n	801bbd0 <_printf_i+0x110>
 801bbe6:	2b08      	cmp	r3, #8
 801bbe8:	d10b      	bne.n	801bc02 <_printf_i+0x142>
 801bbea:	6823      	ldr	r3, [r4, #0]
 801bbec:	07df      	lsls	r7, r3, #31
 801bbee:	d508      	bpl.n	801bc02 <_printf_i+0x142>
 801bbf0:	6923      	ldr	r3, [r4, #16]
 801bbf2:	6861      	ldr	r1, [r4, #4]
 801bbf4:	4299      	cmp	r1, r3
 801bbf6:	bfde      	ittt	le
 801bbf8:	2330      	movle	r3, #48	@ 0x30
 801bbfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bbfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bc02:	1b92      	subs	r2, r2, r6
 801bc04:	6122      	str	r2, [r4, #16]
 801bc06:	f8cd a000 	str.w	sl, [sp]
 801bc0a:	464b      	mov	r3, r9
 801bc0c:	aa03      	add	r2, sp, #12
 801bc0e:	4621      	mov	r1, r4
 801bc10:	4640      	mov	r0, r8
 801bc12:	f7ff fee7 	bl	801b9e4 <_printf_common>
 801bc16:	3001      	adds	r0, #1
 801bc18:	d14a      	bne.n	801bcb0 <_printf_i+0x1f0>
 801bc1a:	f04f 30ff 	mov.w	r0, #4294967295
 801bc1e:	b004      	add	sp, #16
 801bc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc24:	6823      	ldr	r3, [r4, #0]
 801bc26:	f043 0320 	orr.w	r3, r3, #32
 801bc2a:	6023      	str	r3, [r4, #0]
 801bc2c:	4832      	ldr	r0, [pc, #200]	@ (801bcf8 <_printf_i+0x238>)
 801bc2e:	2778      	movs	r7, #120	@ 0x78
 801bc30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bc34:	6823      	ldr	r3, [r4, #0]
 801bc36:	6831      	ldr	r1, [r6, #0]
 801bc38:	061f      	lsls	r7, r3, #24
 801bc3a:	f851 5b04 	ldr.w	r5, [r1], #4
 801bc3e:	d402      	bmi.n	801bc46 <_printf_i+0x186>
 801bc40:	065f      	lsls	r7, r3, #25
 801bc42:	bf48      	it	mi
 801bc44:	b2ad      	uxthmi	r5, r5
 801bc46:	6031      	str	r1, [r6, #0]
 801bc48:	07d9      	lsls	r1, r3, #31
 801bc4a:	bf44      	itt	mi
 801bc4c:	f043 0320 	orrmi.w	r3, r3, #32
 801bc50:	6023      	strmi	r3, [r4, #0]
 801bc52:	b11d      	cbz	r5, 801bc5c <_printf_i+0x19c>
 801bc54:	2310      	movs	r3, #16
 801bc56:	e7ad      	b.n	801bbb4 <_printf_i+0xf4>
 801bc58:	4826      	ldr	r0, [pc, #152]	@ (801bcf4 <_printf_i+0x234>)
 801bc5a:	e7e9      	b.n	801bc30 <_printf_i+0x170>
 801bc5c:	6823      	ldr	r3, [r4, #0]
 801bc5e:	f023 0320 	bic.w	r3, r3, #32
 801bc62:	6023      	str	r3, [r4, #0]
 801bc64:	e7f6      	b.n	801bc54 <_printf_i+0x194>
 801bc66:	4616      	mov	r6, r2
 801bc68:	e7bd      	b.n	801bbe6 <_printf_i+0x126>
 801bc6a:	6833      	ldr	r3, [r6, #0]
 801bc6c:	6825      	ldr	r5, [r4, #0]
 801bc6e:	6961      	ldr	r1, [r4, #20]
 801bc70:	1d18      	adds	r0, r3, #4
 801bc72:	6030      	str	r0, [r6, #0]
 801bc74:	062e      	lsls	r6, r5, #24
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	d501      	bpl.n	801bc7e <_printf_i+0x1be>
 801bc7a:	6019      	str	r1, [r3, #0]
 801bc7c:	e002      	b.n	801bc84 <_printf_i+0x1c4>
 801bc7e:	0668      	lsls	r0, r5, #25
 801bc80:	d5fb      	bpl.n	801bc7a <_printf_i+0x1ba>
 801bc82:	8019      	strh	r1, [r3, #0]
 801bc84:	2300      	movs	r3, #0
 801bc86:	6123      	str	r3, [r4, #16]
 801bc88:	4616      	mov	r6, r2
 801bc8a:	e7bc      	b.n	801bc06 <_printf_i+0x146>
 801bc8c:	6833      	ldr	r3, [r6, #0]
 801bc8e:	1d1a      	adds	r2, r3, #4
 801bc90:	6032      	str	r2, [r6, #0]
 801bc92:	681e      	ldr	r6, [r3, #0]
 801bc94:	6862      	ldr	r2, [r4, #4]
 801bc96:	2100      	movs	r1, #0
 801bc98:	4630      	mov	r0, r6
 801bc9a:	f7e4 fb39 	bl	8000310 <memchr>
 801bc9e:	b108      	cbz	r0, 801bca4 <_printf_i+0x1e4>
 801bca0:	1b80      	subs	r0, r0, r6
 801bca2:	6060      	str	r0, [r4, #4]
 801bca4:	6863      	ldr	r3, [r4, #4]
 801bca6:	6123      	str	r3, [r4, #16]
 801bca8:	2300      	movs	r3, #0
 801bcaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bcae:	e7aa      	b.n	801bc06 <_printf_i+0x146>
 801bcb0:	6923      	ldr	r3, [r4, #16]
 801bcb2:	4632      	mov	r2, r6
 801bcb4:	4649      	mov	r1, r9
 801bcb6:	4640      	mov	r0, r8
 801bcb8:	47d0      	blx	sl
 801bcba:	3001      	adds	r0, #1
 801bcbc:	d0ad      	beq.n	801bc1a <_printf_i+0x15a>
 801bcbe:	6823      	ldr	r3, [r4, #0]
 801bcc0:	079b      	lsls	r3, r3, #30
 801bcc2:	d413      	bmi.n	801bcec <_printf_i+0x22c>
 801bcc4:	68e0      	ldr	r0, [r4, #12]
 801bcc6:	9b03      	ldr	r3, [sp, #12]
 801bcc8:	4298      	cmp	r0, r3
 801bcca:	bfb8      	it	lt
 801bccc:	4618      	movlt	r0, r3
 801bcce:	e7a6      	b.n	801bc1e <_printf_i+0x15e>
 801bcd0:	2301      	movs	r3, #1
 801bcd2:	4632      	mov	r2, r6
 801bcd4:	4649      	mov	r1, r9
 801bcd6:	4640      	mov	r0, r8
 801bcd8:	47d0      	blx	sl
 801bcda:	3001      	adds	r0, #1
 801bcdc:	d09d      	beq.n	801bc1a <_printf_i+0x15a>
 801bcde:	3501      	adds	r5, #1
 801bce0:	68e3      	ldr	r3, [r4, #12]
 801bce2:	9903      	ldr	r1, [sp, #12]
 801bce4:	1a5b      	subs	r3, r3, r1
 801bce6:	42ab      	cmp	r3, r5
 801bce8:	dcf2      	bgt.n	801bcd0 <_printf_i+0x210>
 801bcea:	e7eb      	b.n	801bcc4 <_printf_i+0x204>
 801bcec:	2500      	movs	r5, #0
 801bcee:	f104 0619 	add.w	r6, r4, #25
 801bcf2:	e7f5      	b.n	801bce0 <_printf_i+0x220>
 801bcf4:	0801efbe 	.word	0x0801efbe
 801bcf8:	0801efcf 	.word	0x0801efcf

0801bcfc <__sflush_r>:
 801bcfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd04:	0716      	lsls	r6, r2, #28
 801bd06:	4605      	mov	r5, r0
 801bd08:	460c      	mov	r4, r1
 801bd0a:	d454      	bmi.n	801bdb6 <__sflush_r+0xba>
 801bd0c:	684b      	ldr	r3, [r1, #4]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	dc02      	bgt.n	801bd18 <__sflush_r+0x1c>
 801bd12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	dd48      	ble.n	801bdaa <__sflush_r+0xae>
 801bd18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bd1a:	2e00      	cmp	r6, #0
 801bd1c:	d045      	beq.n	801bdaa <__sflush_r+0xae>
 801bd1e:	2300      	movs	r3, #0
 801bd20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bd24:	682f      	ldr	r7, [r5, #0]
 801bd26:	6a21      	ldr	r1, [r4, #32]
 801bd28:	602b      	str	r3, [r5, #0]
 801bd2a:	d030      	beq.n	801bd8e <__sflush_r+0x92>
 801bd2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bd2e:	89a3      	ldrh	r3, [r4, #12]
 801bd30:	0759      	lsls	r1, r3, #29
 801bd32:	d505      	bpl.n	801bd40 <__sflush_r+0x44>
 801bd34:	6863      	ldr	r3, [r4, #4]
 801bd36:	1ad2      	subs	r2, r2, r3
 801bd38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bd3a:	b10b      	cbz	r3, 801bd40 <__sflush_r+0x44>
 801bd3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bd3e:	1ad2      	subs	r2, r2, r3
 801bd40:	2300      	movs	r3, #0
 801bd42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bd44:	6a21      	ldr	r1, [r4, #32]
 801bd46:	4628      	mov	r0, r5
 801bd48:	47b0      	blx	r6
 801bd4a:	1c43      	adds	r3, r0, #1
 801bd4c:	89a3      	ldrh	r3, [r4, #12]
 801bd4e:	d106      	bne.n	801bd5e <__sflush_r+0x62>
 801bd50:	6829      	ldr	r1, [r5, #0]
 801bd52:	291d      	cmp	r1, #29
 801bd54:	d82b      	bhi.n	801bdae <__sflush_r+0xb2>
 801bd56:	4a2a      	ldr	r2, [pc, #168]	@ (801be00 <__sflush_r+0x104>)
 801bd58:	40ca      	lsrs	r2, r1
 801bd5a:	07d6      	lsls	r6, r2, #31
 801bd5c:	d527      	bpl.n	801bdae <__sflush_r+0xb2>
 801bd5e:	2200      	movs	r2, #0
 801bd60:	6062      	str	r2, [r4, #4]
 801bd62:	04d9      	lsls	r1, r3, #19
 801bd64:	6922      	ldr	r2, [r4, #16]
 801bd66:	6022      	str	r2, [r4, #0]
 801bd68:	d504      	bpl.n	801bd74 <__sflush_r+0x78>
 801bd6a:	1c42      	adds	r2, r0, #1
 801bd6c:	d101      	bne.n	801bd72 <__sflush_r+0x76>
 801bd6e:	682b      	ldr	r3, [r5, #0]
 801bd70:	b903      	cbnz	r3, 801bd74 <__sflush_r+0x78>
 801bd72:	6560      	str	r0, [r4, #84]	@ 0x54
 801bd74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bd76:	602f      	str	r7, [r5, #0]
 801bd78:	b1b9      	cbz	r1, 801bdaa <__sflush_r+0xae>
 801bd7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bd7e:	4299      	cmp	r1, r3
 801bd80:	d002      	beq.n	801bd88 <__sflush_r+0x8c>
 801bd82:	4628      	mov	r0, r5
 801bd84:	f7ff fbec 	bl	801b560 <_free_r>
 801bd88:	2300      	movs	r3, #0
 801bd8a:	6363      	str	r3, [r4, #52]	@ 0x34
 801bd8c:	e00d      	b.n	801bdaa <__sflush_r+0xae>
 801bd8e:	2301      	movs	r3, #1
 801bd90:	4628      	mov	r0, r5
 801bd92:	47b0      	blx	r6
 801bd94:	4602      	mov	r2, r0
 801bd96:	1c50      	adds	r0, r2, #1
 801bd98:	d1c9      	bne.n	801bd2e <__sflush_r+0x32>
 801bd9a:	682b      	ldr	r3, [r5, #0]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d0c6      	beq.n	801bd2e <__sflush_r+0x32>
 801bda0:	2b1d      	cmp	r3, #29
 801bda2:	d001      	beq.n	801bda8 <__sflush_r+0xac>
 801bda4:	2b16      	cmp	r3, #22
 801bda6:	d11e      	bne.n	801bde6 <__sflush_r+0xea>
 801bda8:	602f      	str	r7, [r5, #0]
 801bdaa:	2000      	movs	r0, #0
 801bdac:	e022      	b.n	801bdf4 <__sflush_r+0xf8>
 801bdae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bdb2:	b21b      	sxth	r3, r3
 801bdb4:	e01b      	b.n	801bdee <__sflush_r+0xf2>
 801bdb6:	690f      	ldr	r7, [r1, #16]
 801bdb8:	2f00      	cmp	r7, #0
 801bdba:	d0f6      	beq.n	801bdaa <__sflush_r+0xae>
 801bdbc:	0793      	lsls	r3, r2, #30
 801bdbe:	680e      	ldr	r6, [r1, #0]
 801bdc0:	bf08      	it	eq
 801bdc2:	694b      	ldreq	r3, [r1, #20]
 801bdc4:	600f      	str	r7, [r1, #0]
 801bdc6:	bf18      	it	ne
 801bdc8:	2300      	movne	r3, #0
 801bdca:	eba6 0807 	sub.w	r8, r6, r7
 801bdce:	608b      	str	r3, [r1, #8]
 801bdd0:	f1b8 0f00 	cmp.w	r8, #0
 801bdd4:	dde9      	ble.n	801bdaa <__sflush_r+0xae>
 801bdd6:	6a21      	ldr	r1, [r4, #32]
 801bdd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bdda:	4643      	mov	r3, r8
 801bddc:	463a      	mov	r2, r7
 801bdde:	4628      	mov	r0, r5
 801bde0:	47b0      	blx	r6
 801bde2:	2800      	cmp	r0, #0
 801bde4:	dc08      	bgt.n	801bdf8 <__sflush_r+0xfc>
 801bde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bdee:	81a3      	strh	r3, [r4, #12]
 801bdf0:	f04f 30ff 	mov.w	r0, #4294967295
 801bdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bdf8:	4407      	add	r7, r0
 801bdfa:	eba8 0800 	sub.w	r8, r8, r0
 801bdfe:	e7e7      	b.n	801bdd0 <__sflush_r+0xd4>
 801be00:	20400001 	.word	0x20400001

0801be04 <_fflush_r>:
 801be04:	b538      	push	{r3, r4, r5, lr}
 801be06:	690b      	ldr	r3, [r1, #16]
 801be08:	4605      	mov	r5, r0
 801be0a:	460c      	mov	r4, r1
 801be0c:	b913      	cbnz	r3, 801be14 <_fflush_r+0x10>
 801be0e:	2500      	movs	r5, #0
 801be10:	4628      	mov	r0, r5
 801be12:	bd38      	pop	{r3, r4, r5, pc}
 801be14:	b118      	cbz	r0, 801be1e <_fflush_r+0x1a>
 801be16:	6a03      	ldr	r3, [r0, #32]
 801be18:	b90b      	cbnz	r3, 801be1e <_fflush_r+0x1a>
 801be1a:	f7ff fa05 	bl	801b228 <__sinit>
 801be1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be22:	2b00      	cmp	r3, #0
 801be24:	d0f3      	beq.n	801be0e <_fflush_r+0xa>
 801be26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801be28:	07d0      	lsls	r0, r2, #31
 801be2a:	d404      	bmi.n	801be36 <_fflush_r+0x32>
 801be2c:	0599      	lsls	r1, r3, #22
 801be2e:	d402      	bmi.n	801be36 <_fflush_r+0x32>
 801be30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801be32:	f7ff fb66 	bl	801b502 <__retarget_lock_acquire_recursive>
 801be36:	4628      	mov	r0, r5
 801be38:	4621      	mov	r1, r4
 801be3a:	f7ff ff5f 	bl	801bcfc <__sflush_r>
 801be3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801be40:	07da      	lsls	r2, r3, #31
 801be42:	4605      	mov	r5, r0
 801be44:	d4e4      	bmi.n	801be10 <_fflush_r+0xc>
 801be46:	89a3      	ldrh	r3, [r4, #12]
 801be48:	059b      	lsls	r3, r3, #22
 801be4a:	d4e1      	bmi.n	801be10 <_fflush_r+0xc>
 801be4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801be4e:	f7ff fb59 	bl	801b504 <__retarget_lock_release_recursive>
 801be52:	e7dd      	b.n	801be10 <_fflush_r+0xc>

0801be54 <fiprintf>:
 801be54:	b40e      	push	{r1, r2, r3}
 801be56:	b503      	push	{r0, r1, lr}
 801be58:	4601      	mov	r1, r0
 801be5a:	ab03      	add	r3, sp, #12
 801be5c:	4805      	ldr	r0, [pc, #20]	@ (801be74 <fiprintf+0x20>)
 801be5e:	f853 2b04 	ldr.w	r2, [r3], #4
 801be62:	6800      	ldr	r0, [r0, #0]
 801be64:	9301      	str	r3, [sp, #4]
 801be66:	f7ff fca5 	bl	801b7b4 <_vfiprintf_r>
 801be6a:	b002      	add	sp, #8
 801be6c:	f85d eb04 	ldr.w	lr, [sp], #4
 801be70:	b003      	add	sp, #12
 801be72:	4770      	bx	lr
 801be74:	240049fc 	.word	0x240049fc

0801be78 <__swbuf_r>:
 801be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be7a:	460e      	mov	r6, r1
 801be7c:	4614      	mov	r4, r2
 801be7e:	4605      	mov	r5, r0
 801be80:	b118      	cbz	r0, 801be8a <__swbuf_r+0x12>
 801be82:	6a03      	ldr	r3, [r0, #32]
 801be84:	b90b      	cbnz	r3, 801be8a <__swbuf_r+0x12>
 801be86:	f7ff f9cf 	bl	801b228 <__sinit>
 801be8a:	69a3      	ldr	r3, [r4, #24]
 801be8c:	60a3      	str	r3, [r4, #8]
 801be8e:	89a3      	ldrh	r3, [r4, #12]
 801be90:	071a      	lsls	r2, r3, #28
 801be92:	d501      	bpl.n	801be98 <__swbuf_r+0x20>
 801be94:	6923      	ldr	r3, [r4, #16]
 801be96:	b943      	cbnz	r3, 801beaa <__swbuf_r+0x32>
 801be98:	4621      	mov	r1, r4
 801be9a:	4628      	mov	r0, r5
 801be9c:	f000 f82a 	bl	801bef4 <__swsetup_r>
 801bea0:	b118      	cbz	r0, 801beaa <__swbuf_r+0x32>
 801bea2:	f04f 37ff 	mov.w	r7, #4294967295
 801bea6:	4638      	mov	r0, r7
 801bea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801beaa:	6823      	ldr	r3, [r4, #0]
 801beac:	6922      	ldr	r2, [r4, #16]
 801beae:	1a98      	subs	r0, r3, r2
 801beb0:	6963      	ldr	r3, [r4, #20]
 801beb2:	b2f6      	uxtb	r6, r6
 801beb4:	4283      	cmp	r3, r0
 801beb6:	4637      	mov	r7, r6
 801beb8:	dc05      	bgt.n	801bec6 <__swbuf_r+0x4e>
 801beba:	4621      	mov	r1, r4
 801bebc:	4628      	mov	r0, r5
 801bebe:	f7ff ffa1 	bl	801be04 <_fflush_r>
 801bec2:	2800      	cmp	r0, #0
 801bec4:	d1ed      	bne.n	801bea2 <__swbuf_r+0x2a>
 801bec6:	68a3      	ldr	r3, [r4, #8]
 801bec8:	3b01      	subs	r3, #1
 801beca:	60a3      	str	r3, [r4, #8]
 801becc:	6823      	ldr	r3, [r4, #0]
 801bece:	1c5a      	adds	r2, r3, #1
 801bed0:	6022      	str	r2, [r4, #0]
 801bed2:	701e      	strb	r6, [r3, #0]
 801bed4:	6962      	ldr	r2, [r4, #20]
 801bed6:	1c43      	adds	r3, r0, #1
 801bed8:	429a      	cmp	r2, r3
 801beda:	d004      	beq.n	801bee6 <__swbuf_r+0x6e>
 801bedc:	89a3      	ldrh	r3, [r4, #12]
 801bede:	07db      	lsls	r3, r3, #31
 801bee0:	d5e1      	bpl.n	801bea6 <__swbuf_r+0x2e>
 801bee2:	2e0a      	cmp	r6, #10
 801bee4:	d1df      	bne.n	801bea6 <__swbuf_r+0x2e>
 801bee6:	4621      	mov	r1, r4
 801bee8:	4628      	mov	r0, r5
 801beea:	f7ff ff8b 	bl	801be04 <_fflush_r>
 801beee:	2800      	cmp	r0, #0
 801bef0:	d0d9      	beq.n	801bea6 <__swbuf_r+0x2e>
 801bef2:	e7d6      	b.n	801bea2 <__swbuf_r+0x2a>

0801bef4 <__swsetup_r>:
 801bef4:	b538      	push	{r3, r4, r5, lr}
 801bef6:	4b29      	ldr	r3, [pc, #164]	@ (801bf9c <__swsetup_r+0xa8>)
 801bef8:	4605      	mov	r5, r0
 801befa:	6818      	ldr	r0, [r3, #0]
 801befc:	460c      	mov	r4, r1
 801befe:	b118      	cbz	r0, 801bf08 <__swsetup_r+0x14>
 801bf00:	6a03      	ldr	r3, [r0, #32]
 801bf02:	b90b      	cbnz	r3, 801bf08 <__swsetup_r+0x14>
 801bf04:	f7ff f990 	bl	801b228 <__sinit>
 801bf08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf0c:	0719      	lsls	r1, r3, #28
 801bf0e:	d422      	bmi.n	801bf56 <__swsetup_r+0x62>
 801bf10:	06da      	lsls	r2, r3, #27
 801bf12:	d407      	bmi.n	801bf24 <__swsetup_r+0x30>
 801bf14:	2209      	movs	r2, #9
 801bf16:	602a      	str	r2, [r5, #0]
 801bf18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf1c:	81a3      	strh	r3, [r4, #12]
 801bf1e:	f04f 30ff 	mov.w	r0, #4294967295
 801bf22:	e033      	b.n	801bf8c <__swsetup_r+0x98>
 801bf24:	0758      	lsls	r0, r3, #29
 801bf26:	d512      	bpl.n	801bf4e <__swsetup_r+0x5a>
 801bf28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bf2a:	b141      	cbz	r1, 801bf3e <__swsetup_r+0x4a>
 801bf2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bf30:	4299      	cmp	r1, r3
 801bf32:	d002      	beq.n	801bf3a <__swsetup_r+0x46>
 801bf34:	4628      	mov	r0, r5
 801bf36:	f7ff fb13 	bl	801b560 <_free_r>
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	6363      	str	r3, [r4, #52]	@ 0x34
 801bf3e:	89a3      	ldrh	r3, [r4, #12]
 801bf40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801bf44:	81a3      	strh	r3, [r4, #12]
 801bf46:	2300      	movs	r3, #0
 801bf48:	6063      	str	r3, [r4, #4]
 801bf4a:	6923      	ldr	r3, [r4, #16]
 801bf4c:	6023      	str	r3, [r4, #0]
 801bf4e:	89a3      	ldrh	r3, [r4, #12]
 801bf50:	f043 0308 	orr.w	r3, r3, #8
 801bf54:	81a3      	strh	r3, [r4, #12]
 801bf56:	6923      	ldr	r3, [r4, #16]
 801bf58:	b94b      	cbnz	r3, 801bf6e <__swsetup_r+0x7a>
 801bf5a:	89a3      	ldrh	r3, [r4, #12]
 801bf5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801bf60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bf64:	d003      	beq.n	801bf6e <__swsetup_r+0x7a>
 801bf66:	4621      	mov	r1, r4
 801bf68:	4628      	mov	r0, r5
 801bf6a:	f000 f856 	bl	801c01a <__smakebuf_r>
 801bf6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf72:	f013 0201 	ands.w	r2, r3, #1
 801bf76:	d00a      	beq.n	801bf8e <__swsetup_r+0x9a>
 801bf78:	2200      	movs	r2, #0
 801bf7a:	60a2      	str	r2, [r4, #8]
 801bf7c:	6962      	ldr	r2, [r4, #20]
 801bf7e:	4252      	negs	r2, r2
 801bf80:	61a2      	str	r2, [r4, #24]
 801bf82:	6922      	ldr	r2, [r4, #16]
 801bf84:	b942      	cbnz	r2, 801bf98 <__swsetup_r+0xa4>
 801bf86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801bf8a:	d1c5      	bne.n	801bf18 <__swsetup_r+0x24>
 801bf8c:	bd38      	pop	{r3, r4, r5, pc}
 801bf8e:	0799      	lsls	r1, r3, #30
 801bf90:	bf58      	it	pl
 801bf92:	6962      	ldrpl	r2, [r4, #20]
 801bf94:	60a2      	str	r2, [r4, #8]
 801bf96:	e7f4      	b.n	801bf82 <__swsetup_r+0x8e>
 801bf98:	2000      	movs	r0, #0
 801bf9a:	e7f7      	b.n	801bf8c <__swsetup_r+0x98>
 801bf9c:	240049fc 	.word	0x240049fc

0801bfa0 <_sbrk_r>:
 801bfa0:	b538      	push	{r3, r4, r5, lr}
 801bfa2:	4d06      	ldr	r5, [pc, #24]	@ (801bfbc <_sbrk_r+0x1c>)
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	4604      	mov	r4, r0
 801bfa8:	4608      	mov	r0, r1
 801bfaa:	602b      	str	r3, [r5, #0]
 801bfac:	f7e5 fdfa 	bl	8001ba4 <_sbrk>
 801bfb0:	1c43      	adds	r3, r0, #1
 801bfb2:	d102      	bne.n	801bfba <_sbrk_r+0x1a>
 801bfb4:	682b      	ldr	r3, [r5, #0]
 801bfb6:	b103      	cbz	r3, 801bfba <_sbrk_r+0x1a>
 801bfb8:	6023      	str	r3, [r4, #0]
 801bfba:	bd38      	pop	{r3, r4, r5, pc}
 801bfbc:	24014e60 	.word	0x24014e60

0801bfc0 <abort>:
 801bfc0:	b508      	push	{r3, lr}
 801bfc2:	2006      	movs	r0, #6
 801bfc4:	f000 f88e 	bl	801c0e4 <raise>
 801bfc8:	2001      	movs	r0, #1
 801bfca:	f7e5 fd73 	bl	8001ab4 <_exit>

0801bfce <__swhatbuf_r>:
 801bfce:	b570      	push	{r4, r5, r6, lr}
 801bfd0:	460c      	mov	r4, r1
 801bfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfd6:	2900      	cmp	r1, #0
 801bfd8:	b096      	sub	sp, #88	@ 0x58
 801bfda:	4615      	mov	r5, r2
 801bfdc:	461e      	mov	r6, r3
 801bfde:	da0d      	bge.n	801bffc <__swhatbuf_r+0x2e>
 801bfe0:	89a3      	ldrh	r3, [r4, #12]
 801bfe2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bfe6:	f04f 0100 	mov.w	r1, #0
 801bfea:	bf14      	ite	ne
 801bfec:	2340      	movne	r3, #64	@ 0x40
 801bfee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801bff2:	2000      	movs	r0, #0
 801bff4:	6031      	str	r1, [r6, #0]
 801bff6:	602b      	str	r3, [r5, #0]
 801bff8:	b016      	add	sp, #88	@ 0x58
 801bffa:	bd70      	pop	{r4, r5, r6, pc}
 801bffc:	466a      	mov	r2, sp
 801bffe:	f000 f879 	bl	801c0f4 <_fstat_r>
 801c002:	2800      	cmp	r0, #0
 801c004:	dbec      	blt.n	801bfe0 <__swhatbuf_r+0x12>
 801c006:	9901      	ldr	r1, [sp, #4]
 801c008:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c00c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c010:	4259      	negs	r1, r3
 801c012:	4159      	adcs	r1, r3
 801c014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c018:	e7eb      	b.n	801bff2 <__swhatbuf_r+0x24>

0801c01a <__smakebuf_r>:
 801c01a:	898b      	ldrh	r3, [r1, #12]
 801c01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c01e:	079d      	lsls	r5, r3, #30
 801c020:	4606      	mov	r6, r0
 801c022:	460c      	mov	r4, r1
 801c024:	d507      	bpl.n	801c036 <__smakebuf_r+0x1c>
 801c026:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c02a:	6023      	str	r3, [r4, #0]
 801c02c:	6123      	str	r3, [r4, #16]
 801c02e:	2301      	movs	r3, #1
 801c030:	6163      	str	r3, [r4, #20]
 801c032:	b003      	add	sp, #12
 801c034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c036:	ab01      	add	r3, sp, #4
 801c038:	466a      	mov	r2, sp
 801c03a:	f7ff ffc8 	bl	801bfce <__swhatbuf_r>
 801c03e:	9f00      	ldr	r7, [sp, #0]
 801c040:	4605      	mov	r5, r0
 801c042:	4639      	mov	r1, r7
 801c044:	4630      	mov	r0, r6
 801c046:	f7ff faff 	bl	801b648 <_malloc_r>
 801c04a:	b948      	cbnz	r0, 801c060 <__smakebuf_r+0x46>
 801c04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c050:	059a      	lsls	r2, r3, #22
 801c052:	d4ee      	bmi.n	801c032 <__smakebuf_r+0x18>
 801c054:	f023 0303 	bic.w	r3, r3, #3
 801c058:	f043 0302 	orr.w	r3, r3, #2
 801c05c:	81a3      	strh	r3, [r4, #12]
 801c05e:	e7e2      	b.n	801c026 <__smakebuf_r+0xc>
 801c060:	89a3      	ldrh	r3, [r4, #12]
 801c062:	6020      	str	r0, [r4, #0]
 801c064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c068:	81a3      	strh	r3, [r4, #12]
 801c06a:	9b01      	ldr	r3, [sp, #4]
 801c06c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c070:	b15b      	cbz	r3, 801c08a <__smakebuf_r+0x70>
 801c072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c076:	4630      	mov	r0, r6
 801c078:	f000 f84e 	bl	801c118 <_isatty_r>
 801c07c:	b128      	cbz	r0, 801c08a <__smakebuf_r+0x70>
 801c07e:	89a3      	ldrh	r3, [r4, #12]
 801c080:	f023 0303 	bic.w	r3, r3, #3
 801c084:	f043 0301 	orr.w	r3, r3, #1
 801c088:	81a3      	strh	r3, [r4, #12]
 801c08a:	89a3      	ldrh	r3, [r4, #12]
 801c08c:	431d      	orrs	r5, r3
 801c08e:	81a5      	strh	r5, [r4, #12]
 801c090:	e7cf      	b.n	801c032 <__smakebuf_r+0x18>

0801c092 <_raise_r>:
 801c092:	291f      	cmp	r1, #31
 801c094:	b538      	push	{r3, r4, r5, lr}
 801c096:	4605      	mov	r5, r0
 801c098:	460c      	mov	r4, r1
 801c09a:	d904      	bls.n	801c0a6 <_raise_r+0x14>
 801c09c:	2316      	movs	r3, #22
 801c09e:	6003      	str	r3, [r0, #0]
 801c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c0a4:	bd38      	pop	{r3, r4, r5, pc}
 801c0a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c0a8:	b112      	cbz	r2, 801c0b0 <_raise_r+0x1e>
 801c0aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c0ae:	b94b      	cbnz	r3, 801c0c4 <_raise_r+0x32>
 801c0b0:	4628      	mov	r0, r5
 801c0b2:	f000 f853 	bl	801c15c <_getpid_r>
 801c0b6:	4622      	mov	r2, r4
 801c0b8:	4601      	mov	r1, r0
 801c0ba:	4628      	mov	r0, r5
 801c0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c0c0:	f000 b83a 	b.w	801c138 <_kill_r>
 801c0c4:	2b01      	cmp	r3, #1
 801c0c6:	d00a      	beq.n	801c0de <_raise_r+0x4c>
 801c0c8:	1c59      	adds	r1, r3, #1
 801c0ca:	d103      	bne.n	801c0d4 <_raise_r+0x42>
 801c0cc:	2316      	movs	r3, #22
 801c0ce:	6003      	str	r3, [r0, #0]
 801c0d0:	2001      	movs	r0, #1
 801c0d2:	e7e7      	b.n	801c0a4 <_raise_r+0x12>
 801c0d4:	2100      	movs	r1, #0
 801c0d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c0da:	4620      	mov	r0, r4
 801c0dc:	4798      	blx	r3
 801c0de:	2000      	movs	r0, #0
 801c0e0:	e7e0      	b.n	801c0a4 <_raise_r+0x12>
	...

0801c0e4 <raise>:
 801c0e4:	4b02      	ldr	r3, [pc, #8]	@ (801c0f0 <raise+0xc>)
 801c0e6:	4601      	mov	r1, r0
 801c0e8:	6818      	ldr	r0, [r3, #0]
 801c0ea:	f7ff bfd2 	b.w	801c092 <_raise_r>
 801c0ee:	bf00      	nop
 801c0f0:	240049fc 	.word	0x240049fc

0801c0f4 <_fstat_r>:
 801c0f4:	b538      	push	{r3, r4, r5, lr}
 801c0f6:	4d07      	ldr	r5, [pc, #28]	@ (801c114 <_fstat_r+0x20>)
 801c0f8:	2300      	movs	r3, #0
 801c0fa:	4604      	mov	r4, r0
 801c0fc:	4608      	mov	r0, r1
 801c0fe:	4611      	mov	r1, r2
 801c100:	602b      	str	r3, [r5, #0]
 801c102:	f7e5 fd27 	bl	8001b54 <_fstat>
 801c106:	1c43      	adds	r3, r0, #1
 801c108:	d102      	bne.n	801c110 <_fstat_r+0x1c>
 801c10a:	682b      	ldr	r3, [r5, #0]
 801c10c:	b103      	cbz	r3, 801c110 <_fstat_r+0x1c>
 801c10e:	6023      	str	r3, [r4, #0]
 801c110:	bd38      	pop	{r3, r4, r5, pc}
 801c112:	bf00      	nop
 801c114:	24014e60 	.word	0x24014e60

0801c118 <_isatty_r>:
 801c118:	b538      	push	{r3, r4, r5, lr}
 801c11a:	4d06      	ldr	r5, [pc, #24]	@ (801c134 <_isatty_r+0x1c>)
 801c11c:	2300      	movs	r3, #0
 801c11e:	4604      	mov	r4, r0
 801c120:	4608      	mov	r0, r1
 801c122:	602b      	str	r3, [r5, #0]
 801c124:	f7e5 fd26 	bl	8001b74 <_isatty>
 801c128:	1c43      	adds	r3, r0, #1
 801c12a:	d102      	bne.n	801c132 <_isatty_r+0x1a>
 801c12c:	682b      	ldr	r3, [r5, #0]
 801c12e:	b103      	cbz	r3, 801c132 <_isatty_r+0x1a>
 801c130:	6023      	str	r3, [r4, #0]
 801c132:	bd38      	pop	{r3, r4, r5, pc}
 801c134:	24014e60 	.word	0x24014e60

0801c138 <_kill_r>:
 801c138:	b538      	push	{r3, r4, r5, lr}
 801c13a:	4d07      	ldr	r5, [pc, #28]	@ (801c158 <_kill_r+0x20>)
 801c13c:	2300      	movs	r3, #0
 801c13e:	4604      	mov	r4, r0
 801c140:	4608      	mov	r0, r1
 801c142:	4611      	mov	r1, r2
 801c144:	602b      	str	r3, [r5, #0]
 801c146:	f7e5 fca3 	bl	8001a90 <_kill>
 801c14a:	1c43      	adds	r3, r0, #1
 801c14c:	d102      	bne.n	801c154 <_kill_r+0x1c>
 801c14e:	682b      	ldr	r3, [r5, #0]
 801c150:	b103      	cbz	r3, 801c154 <_kill_r+0x1c>
 801c152:	6023      	str	r3, [r4, #0]
 801c154:	bd38      	pop	{r3, r4, r5, pc}
 801c156:	bf00      	nop
 801c158:	24014e60 	.word	0x24014e60

0801c15c <_getpid_r>:
 801c15c:	f7e5 bc90 	b.w	8001a80 <_getpid>

0801c160 <_init>:
 801c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c162:	bf00      	nop
 801c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c166:	bc08      	pop	{r3}
 801c168:	469e      	mov	lr, r3
 801c16a:	4770      	bx	lr

0801c16c <_fini>:
 801c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c16e:	bf00      	nop
 801c170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c172:	bc08      	pop	{r3}
 801c174:	469e      	mov	lr, r3
 801c176:	4770      	bx	lr
